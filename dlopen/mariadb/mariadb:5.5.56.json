{
    "matches": {
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/configure.cmake": "# Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.\n# \n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n#\n\nINCLUDE (CheckCSourceCompiles)\nINCLUDE (CheckCXXSourceCompiles)\nINCLUDE (CheckStructHasMember)\nINCLUDE (CheckLibraryExists)\nINCLUDE (CheckFunctionExists)\nINCLUDE (CheckCCompilerFlag)\nINCLUDE (CheckCSourceRuns)\nINCLUDE (CheckSymbolExists)\n\n\n# WITH_PIC options.Not of much use, PIC is taken care of on platforms\n# where it makes sense anyway.\nIF(UNIX)\n  IF(APPLE)  \n    # OSX  executable are always PIC\n    SET(WITH_PIC ON)\n  ELSE()\n    OPTION(WITH_PIC \"Generate PIC objects\" OFF)\n    IF(WITH_PIC)\n      SET(CMAKE_C_FLAGS \n        \"${CMAKE_C_FLAGS} ${CMAKE_SHARED_LIBRARY_C_FLAGS}\")\n      SET(CMAKE_CXX_FLAGS \n        \"${CMAKE_CXX_FLAGS} ${CMAKE_SHARED_LIBRARY_CXX_FLAGS}\")\n    ENDIF()\n  ENDIF()\nENDIF()\n\n\n\n# System type affects version_compile_os variable \nIF(NOT SYSTEM_TYPE)\n  IF(PLATFORM)\n    SET(SYSTEM_TYPE ${PLATFORM})\n  ELSE()\n    SET(SYSTEM_TYPE ${CMAKE_SYSTEM_NAME})\n  ENDIF()\nENDIF()\n\n\nIF(CMAKE_COMPILER_IS_GNUCXX)\n  # MySQL \"canonical\" GCC flags. At least -fno-rtti flag affects\n  # ABI and cannot be simply removed. \n  SET(CMAKE_CXX_FLAGS \n    \"${CMAKE_CXX_FLAGS} -fno-implicit-templates -fno-exceptions -fno-rtti\")\n  IF(CMAKE_CXX_FLAGS)\n    STRING(REGEX MATCH \"fno-implicit-templates\" NO_IMPLICIT_TEMPLATES\n      ${CMAKE_CXX_FLAGS})\n    IF (NO_IMPLICIT_TEMPLATES)\n      SET(HAVE_EXPLICIT_TEMPLATE_INSTANTIATION TRUE)\n    ENDIF()\n  ENDIF()\n\n  IF (CMAKE_EXE_LINKER_FLAGS MATCHES \" -static \" \n     OR CMAKE_EXE_LINKER_FLAGS MATCHES \" -static$\")\n     SET(HAVE_DLOPEN FALSE CACHE \"Disable dlopen due to -static flag\" FORCE)\n     SET(WITHOUT_DYNAMIC_PLUGINS TRUE)\n  ENDIF()\nENDIF()\n\nIF(WITHOUT_DYNAMIC_PLUGINS)\n  MESSAGE(\"Dynamic plugins are disabled.\")\nENDIF(WITHOUT_DYNAMIC_PLUGINS)\n\n# Large files, common flag\nSET(_LARGEFILE_SOURCE  1)\n\n# If finds the size of a type, set SIZEOF_<type> and HAVE_<type>\nFUNCTION(MY_CHECK_TYPE_SIZE type defbase)\n  CHECK_TYPE_SIZE(\"${type}\" SIZEOF_${defbase})\n  IF(SIZEOF_${defbase})\n    SET(HAVE_${defbase} 1 PARENT_SCOPE)\n  ENDIF()\nENDFUNCTION()\n\n# Same for structs, setting HAVE_STRUCT_<name> instead\nFUNCTION(MY_CHECK_STRUCT_SIZE type defbase)\n  CHECK_TYPE_SIZE(\"struct ${type}\" SIZEOF_${defbase})\n  IF(SIZEOF_${defbase})\n    SET(HAVE_STRUCT_${defbase} 1 PARENT_SCOPE)\n  ENDIF()\nENDFUNCTION()\n\n# Searches function in libraries\n# if function is found, sets output parameter result to the name of the library\n# if function is found in libc, result will be empty \nFUNCTION(MY_SEARCH_LIBS func libs result)\n  IF(${${result}})\n    # Library is already found or was predefined\n    RETURN()\n  ENDIF()\n  CHECK_FUNCTION_EXISTS(${func} HAVE_${func}_IN_LIBC)\n  IF(HAVE_${func}_IN_LIBC)\n    SET(${result} \"\" PARENT_SCOPE)\n    RETURN()\n  ENDIF()\n  FOREACH(lib  ${libs})\n    CHECK_LIBRARY_EXISTS(${lib} ${func} \"\" HAVE_${func}_IN_${lib}) \n    IF(HAVE_${func}_IN_${lib})\n      SET(${result} ${lib} PARENT_SCOPE)\n      SET(HAVE_${result} 1 PARENT_SCOPE)\n      RETURN()\n    ENDIF()\n  ENDFOREACH()\nENDFUNCTION()\n\n# Find out which libraries to use.\nIF(UNIX)\n  MY_SEARCH_LIBS(floor m LIBM)\n  IF(NOT LIBM)\n    MY_SEARCH_LIBS(__infinity m LIBM)\n  ENDIF()\n  MY_SEARCH_LIBS(gethostbyname_r  \"nsl_r;nsl\" LIBNSL)\n  MY_SEARCH_LIBS(bind \"bind;socket\" LIBBIND)\n  MY_SEARCH_LIBS(crypt crypt LIBCRYPT)\n  MY_SEARCH_LIBS(setsockopt socket LIBSOCKET)\n  MY_SEARCH_LIBS(dlopen dl LIBDL)\n  MY_SEARCH_LIBS(sched_yield rt LIBRT)\n  IF(NOT LIBRT)\n    MY_SEARCH_LIBS(clock_gettime rt LIBRT)\n  ENDIF()\n  FIND_PACKAGE(Threads)\n\n  SET(CMAKE_REQUIRED_LIBRARIES \n    ${LIBM} ${LIBNSL} ${LIBBIND} ${LIBCRYPT} ${LIBSOCKET} ${LIBDL} ${CMAKE_THREAD_LIBS_INIT} ${LIBRT} ${LIBEXECINFO})\n  # Need explicit pthread for gcc -fsanitize=address\n  IF(CMAKE_USE_PTHREADS_INIT AND CMAKE_C_FLAGS MATCHES \"-fsanitize=\")\n    SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} pthread)\n  ENDIF()\n\n  IF(CMAKE_REQUIRED_LIBRARIES)\n    LIST(REMOVE_DUPLICATES CMAKE_REQUIRED_LIBRARIES)\n  ENDIF()  \n  LINK_LIBRARIES(${CMAKE_THREAD_LIBS_INIT})\n  \n  OPTION(WITH_LIBWRAP \"Compile with tcp wrappers support\" OFF)\n  IF(WITH_LIBWRAP)\n    SET(SAVE_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\n    SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} wrap)\n    CHECK_C_SOURCE_COMPILES(\n    \"\n    #include <sys/types.h>\n    #include <tcpd.h>\n    int allow_severity = 0;\n    int deny_severity  = 0;\n    int main()\n    {\n      hosts_access(0);\n    }\"\n    HAVE_LIBWRAP)\n    SET(CMAKE_REQUIRED_LIBRARIES ${SAVE_CMAKE_REQUIRED_LIBRARIES})\n    IF(HAVE_LIBWRAP)\n      SET(MYSYS_LIBWRAP_SOURCE  ${CMAKE_SOURCE_DIR}/mysys/my_libwrap.c)\n      SET(LIBWRAP \"wrap\")\n    ENDIF()\n  ENDIF()\nENDIF()\n\n#\n# Tests for header files\n#\nINCLUDE (CheckIncludeFiles)\nINCLUDE (CheckIncludeFileCXX)\n\nCHECK_INCLUDE_FILES (\"stdlib.h;stdarg.h;string.h;float.h\" STDC_HEADERS)\nCHECK_INCLUDE_FILES (sys/types.h HAVE_SYS_TYPES_H)\nCHECK_INCLUDE_FILES (alloca.h HAVE_ALLOCA_H)\nCHECK_INCLUDE_FILES (aio.h HAVE_AIO_H)\nCHECK_INCLUDE_FILES (arpa/inet.h HAVE_ARPA_INET_H)\nCHECK_INCLUDE_FILES (crypt.h HAVE_CRYPT_H)\nCHECK_INCLUDE_FILE_CXX (cxxabi.h HAVE_CXXABI_H)\nCHECK_INCLUDE_FILES (bfd.h BFD_H_EXISTS)\nCHECK_INCLUDE_FILES (dirent.h HAVE_DIRENT_H)\nCHECK_INCLUDE_FILES (dlfcn.h HAVE_DLFCN_H)\nCHECK_INCLUDE_FILES (execinfo.h HAVE_EXECINFO_H)\nCHECK_INCLUDE_FILES (fcntl.h HAVE_FCNTL_H)\nCHECK_INCLUDE_FILES (fenv.h HAVE_FENV_H)\nCHECK_INCLUDE_FILES (float.h HAVE_FLOAT_H)\nCHECK_INCLUDE_FILES (floatingpoint.h HAVE_FLOATINGPOINT_H)\nCHECK_INCLUDE_FILES (fpu_control.h HAVE_FPU_CONTROL_H)\nCHECK_INCLUDE_FILES (grp.h HAVE_GRP_H)\nCHECK_INCLUDE_FILES (ieeefp.h HAVE_IEEEFP_H)\nCHECK_INCLUDE_FILES (inttypes.h HAVE_INTTYPES_H)\nCHECK_INCLUDE_FILES (langinfo.h HAVE_LANGINFO_H)\nCHECK_INCLUDE_FILES (linux/unistd.h HAVE_LINUX_UNISTD_H)\nCHECK_INCLUDE_FILES (limits.h HAVE_LIMITS_H)\nCHECK_INCLUDE_FILES (locale.h HAVE_LOCALE_H)\nCHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)\nCHECK_INCLUDE_FILES (memory.h HAVE_MEMORY_H)\nCHECK_INCLUDE_FILES (ndir.h HAVE_NDIR_H)\nCHECK_INCLUDE_FILES (netinet/in.h HAVE_NETINET_IN_H)\nCHECK_INCLUDE_FILES (paths.h HAVE_PATHS_H)\nCHECK_INCLUDE_FILES (port.h HAVE_PORT_H)\nCHECK_INCLUDE_FILES (poll.h HAVE_POLL_H)\nCHECK_INCLUDE_FILES (pwd.h HAVE_PWD_H)\nCHECK_INCLUDE_FILES (sched.h HAVE_SCHED_H)\nCHECK_INCLUDE_FILES (select.h HAVE_SELECT_H)\nCHECK_INCLUDE_FILES (semaphore.h HAVE_SEMAPHORE_H)\nCHECK_INCLUDE_FILES (\"sys/types.h;sys/dir.h\" HAVE_SYS_DIR_H)\nCHECK_INCLUDE_FILES (\"sys/types.h;sys/event.h\" HAVE_SYS_EVENT_H)\nCHECK_INCLUDE_FILES (sys/ndir.h HAVE_SYS_NDIR_H)\nCHECK_INCLUDE_FILES (sys/pte.h HAVE_SYS_PTE_H)\nCHECK_INCLUDE_FILES (stddef.h HAVE_STDDEF_H)\nCHECK_INCLUDE_FILES (stdint.h HAVE_STDINT_H)\nCHECK_INCLUDE_FILES (stdlib.h HAVE_STDLIB_H)\nCHECK_INCLUDE_FILES (strings.h HAVE_STRINGS_H)\nCHECK_INCLUDE_FILES (string.h HAVE_STRING_H)\nCHECK_INCLUDE_FILES (synch.h HAVE_SYNCH_H)\nCHECK_INCLUDE_FILES (sysent.h HAVE_SYSENT_H)\nCHECK_INCLUDE_FILES (sys/cdefs.h HAVE_SYS_CDEFS_H)\nCHECK_INCLUDE_FILES (sys/file.h HAVE_SYS_FILE_H)\nCHECK_INCLUDE_FILES (sys/fpu.h HAVE_SYS_FPU_H)\nCHECK_INCLUDE_FILES (sys/ioctl.h HAVE_SYS_IOCTL_H)\nCHECK_INCLUDE_FILES (\"sys/types.h;sys/ipc.h\" HAVE_SYS_IPC_H)\nCHECK_INCLUDE_FILES (\"sys/types.h;sys/malloc.h\" HAVE_SYS_MALLOC_H)\nCHECK_INCLUDE_FILES (sys/mman.h HAVE_SYS_MMAN_H)\nCHECK_INCLUDE_FILES (sys/prctl.h HAVE_SYS_PRCTL_H)\nCHECK_INCLUDE_FILES (sys/resource.h HAVE_SYS_RESOURCE_H)\nCHECK_INCLUDE_FILES (sys/select.h HAVE_SYS_SELECT_H)\nCHECK_INCLUDE_FILES (\"sys/types.h;sys/shm.h\" HAVE_SYS_SHM_H)\nCHECK_INCLUDE_FILES (sys/socket.h HAVE_SYS_SOCKET_H)\nCHECK_INCLUDE_FILES (sys/stat.h HAVE_SYS_STAT_H)\nCHECK_INCLUDE_FILES (sys/stream.h HAVE_SYS_STREAM_H)\nCHECK_INCLUDE_FILES (sys/termcap.h HAVE_SYS_TERMCAP_H)\nCHECK_INCLUDE_FILES (asm/termbits.h HAVE_ASM_TERMBITS_H)\nCHECK_INCLUDE_FILES (termbits.h HAVE_TERMBITS_H)\nCHECK_INCLUDE_FILES (termios.h HAVE_TERMIOS_H)\nCHECK_INCLUDE_FILES (termio.h HAVE_TERMIO_H)\nCHECK_INCLUDE_FILES (termcap.h HAVE_TERMCAP_H)\nCHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)\nCHECK_INCLUDE_FILES (utime.h HAVE_UTIME_H)\nCHECK_INCLUDE_FILES (varargs.h HAVE_VARARGS_H)\nCHECK_INCLUDE_FILES (sys/time.h HAVE_SYS_TIME_H)\nCHECK_INCLUDE_FILES (sys/utime.h HAVE_SYS_UTIME_H)\nCHECK_INCLUDE_FILES (sys/wait.h HAVE_SYS_WAIT_H)\nCHECK_INCLUDE_FILES (sys/param.h HAVE_SYS_PARAM_H)\nCHECK_INCLUDE_FILES (sys/vadvise.h HAVE_SYS_VADVISE_H)\nCHECK_INCLUDE_FILES (fnmatch.h HAVE_FNMATCH_H)\nCHECK_INCLUDE_FILES (stdarg.h  HAVE_STDARG_H)\nCHECK_INCLUDE_FILES (\"stdlib.h;sys/un.h\" HAVE_SYS_UN_H)\nCHECK_INCLUDE_FILES (vis.h HAVE_VIS_H)\nCHECK_INCLUDE_FILES (wchar.h HAVE_WCHAR_H)\nCHECK_INCLUDE_FILES (wctype.h HAVE_WCTYPE_H)\nCHECK_INCLUDE_FILES (sys/sockio.h HAVE_SYS_SOCKIO_H)\nCHECK_INCLUDE_FILES (sys/utsname.h HAVE_SYS_UTSNAME_H)\n\nIF(BFD_H_EXISTS)\n  IF(NOT_FOR_DISTRIBUTION)\n    SET(NON_DISTRIBUTABLE_WARNING 1)\n    SET(HAVE_BFD_H 1)\n  ENDIF()\nENDIF()\n\nIF(HAVE_SYS_STREAM_H)\n  # Needs sys/stream.h on Solaris\n  CHECK_INCLUDE_FILES (\"sys/stream.h;sys/ptem.h\" HAVE_SYS_PTEM_H)\nELSE()\n  CHECK_INCLUDE_FILES (sys/ptem.h HAVE_SYS_PTEM_H)\nENDIF()\n\n# Figure out threading library\n#\nFIND_PACKAGE (Threads)\n\nFUNCTION(MY_CHECK_PTHREAD_ONCE_INIT)\n  CHECK_C_COMPILER_FLAG(\"-Werror\" HAVE_WERROR_FLAG)\n  IF(NOT HAVE_WERROR_FLAG)\n    RETURN()\n  ENDIF()\n  SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -Werror\")\n  CHECK_C_SOURCE_COMPILES(\"\n    #include <pthread.h>\n    void foo(void) {}\n    int main()\n    {\n      pthread_once_t once_control = PTHREAD_ONCE_INIT;\n      pthread_once(&once_control, foo);\n      return 0;\n    }\"\n    HAVE_PTHREAD_ONCE_INIT\n  )\n  # http://bugs.opensolaris.org/bugdatabase/printableBug.do?bug_id=6611808\n  IF(NOT HAVE_PTHREAD_ONCE_INIT)\n    CHECK_C_SOURCE_COMPILES(\"\n      #include <pthread.h>\n      void foo(void) {}\n      int main()\n      {\n        pthread_once_t once_control = { PTHREAD_ONCE_INIT };\n        pthread_once(&once_control, foo);\n        return 0;\n      }\"\n      HAVE_ARRAY_PTHREAD_ONCE_INIT\n    )\n  ENDIF()\n  IF(HAVE_PTHREAD_ONCE_INIT)\n    SET(PTHREAD_ONCE_INITIALIZER \"PTHREAD_ONCE_INIT\" PARENT_SCOPE)\n  ENDIF()\n  IF(HAVE_ARRAY_PTHREAD_ONCE_INIT)\n    SET(PTHREAD_ONCE_INITIALIZER \"{ PTHREAD_ONCE_INIT }\" PARENT_SCOPE)\n  ENDIF()\nENDFUNCTION()\n\nIF(CMAKE_USE_PTHREADS_INIT)\n  MY_CHECK_PTHREAD_ONCE_INIT()\nENDIF()\n\n#\n# Tests for functions\n#\nCHECK_FUNCTION_EXISTS (access HAVE_ACCESS)\n#CHECK_FUNCTION_EXISTS (aiowait HAVE_AIOWAIT)\nCHECK_FUNCTION_EXISTS (aio_read HAVE_AIO_READ)\nCHECK_FUNCTION_EXISTS (alarm HAVE_ALARM)\nSET(HAVE_ALLOCA 1)\nCHECK_FUNCTION_EXISTS (backtrace HAVE_BACKTRACE)\nCHECK_FUNCTION_EXISTS (backtrace_symbols HAVE_BACKTRACE_SYMBOLS)\nCHECK_FUNCTION_EXISTS (backtrace_symbols_fd HAVE_BACKTRACE_SYMBOLS_FD)\nCHECK_FUNCTION_EXISTS (printstack HAVE_PRINTSTACK)\nCHECK_FUNCTION_EXISTS (bfill HAVE_BFILL)\nCHECK_FUNCTION_EXISTS (bmove HAVE_BMOVE)\nCHECK_FUNCTION_EXISTS (bsearch HAVE_BSEARCH)\nCHECK_FUNCTION_EXISTS (index HAVE_INDEX)\nCHECK_FUNCTION_EXISTS (bzero HAVE_BZERO)\nCHECK_FUNCTION_EXISTS (clock_gettime HAVE_CLOCK_GETTIME)\nCHECK_FUNCTION_EXISTS (cuserid HAVE_CUSERID)\nCHECK_FUNCTION_EXISTS (directio HAVE_DIRECTIO)\nCHECK_FUNCTION_EXISTS (_doprnt HAVE_DOPRNT)\nCHECK_FUNCTION_EXISTS (flockfile HAVE_FLOCKFILE)\nCHECK_FUNCTION_EXISTS (ftruncate HAVE_FTRUNCATE)\nCHECK_FUNCTION_EXISTS (getline HAVE_GETLINE)\nCHECK_FUNCTION_EXISTS (compress HAVE_COMPRESS)\nCHECK_FUNCTION_EXISTS (crypt HAVE_CRYPT)\nCHECK_FUNCTION_EXISTS (dlerror HAVE_DLERROR)\nCHECK_FUNCTION_EXISTS (dlopen HAVE_DLOPEN)\nCHECK_FUNCTION_EXISTS (fchmod HAVE_FCHMOD)\nCHECK_FUNCTION_EXISTS (fcntl HAVE_FCNTL)\nCHECK_FUNCTION_EXISTS (fconvert HAVE_FCONVERT)\nCHECK_FUNCTION_EXISTS (fdatasync HAVE_FDATASYNC)\nCHECK_SYMBOL_EXISTS(fdatasync \"unistd.h\" HAVE_DECL_FDATASYNC)\nCHECK_FUNCTION_EXISTS (fesetround HAVE_FESETROUND)\nCHECK_FUNCTION_EXISTS (fedisableexcept HAVE_FEDISABLEEXCEPT)\nCHECK_FUNCTION_EXISTS (fpsetmask HAVE_FPSETMASK)\nCHECK_FUNCTION_EXISTS (fseeko HAVE_FSEEKO)\nCHECK_FUNCTION_EXISTS (fsync HAVE_FSYNC)\nCHECK_FUNCTION_EXISTS (getcwd HAVE_GETCWD)\nCHECK_FUNCTION_EXISTS (gethostbyaddr_r HAVE_GETHOSTBYADDR_R)\nCHECK_FUNCTION_EXISTS (gethrtime HAVE_GETHRTIME)\nCHECK_FUNCTION_EXISTS (getnameinfo HAVE_GETNAMEINFO)\nCHECK_FUNCTION_EXISTS (getpass HAVE_GETPASS)\nCHECK_FUNCTION_EXISTS (getpassphrase HAVE_GETPASSPHRASE)\nCHECK_FUNCTION_EXISTS (getpwnam HAVE_GETPWNAM)\nCHECK_FUNCTION_EXISTS (getpwuid HAVE_GETPWUID)\nCHECK_FUNCTION_EXISTS (getrlimit HAVE_GETRLIMIT)\nCHECK_FUNCTION_EXISTS (getrusage HAVE_GETRUSAGE)\nCHECK_FUNCTION_EXISTS (getwd HAVE_GETWD)\nCHECK_FUNCTION_EXISTS (gmtime_r HAVE_GMTIME_R)\nCHECK_FUNCTION_EXISTS (initgroups HAVE_INITGROUPS)\nCHECK_FUNCTION_EXISTS (issetugid HAVE_ISSETUGID)\nCHECK_FUNCTION_EXISTS (getuid HAVE_GETUID)\nCHECK_FUNCTION_EXISTS (geteuid HAVE_GETEUID)\nCHECK_FUNCTION_EXISTS (getgid HAVE_GETGID)\nCHECK_FUNCTION_EXISTS (getegid HAVE_GETEGID)\nCHECK_FUNCTION_EXISTS (ldiv HAVE_LDIV)\nCHECK_FUNCTION_EXISTS (localtime_r HAVE_LOCALTIME_R)\nCHECK_FUNCTION_EXISTS (longjmp HAVE_LONGJMP)\nCHECK_FUNCTION_EXISTS (lstat HAVE_LSTAT)\nCHECK_FUNCTION_EXISTS (madvise HAVE_MADVISE)\nCHECK_FUNCTION_EXISTS (mallinfo HAVE_MALLINFO)\nCHECK_FUNCTION_EXISTS (memcpy HAVE_MEMCPY)\nCHECK_FUNCTION_EXISTS (memmove HAVE_MEMMOVE)\nCHECK_FUNCTION_EXISTS (mkstemp HAVE_MKSTEMP)\nCHECK_FUNCTION_EXISTS (mlock HAVE_MLOCK)\nCHECK_FUNCTION_EXISTS (mlockall HAVE_MLOCKALL)\nCHECK_FUNCTION_EXISTS (mmap HAVE_MMAP)\nCHECK_FUNCTION_EXISTS (mmap64 HAVE_MMAP64)\nCHECK_FUNCTION_EXISTS (perror HAVE_PERROR)\nCHECK_FUNCTION_EXISTS (poll HAVE_POLL)\nCHECK_FUNCTION_EXISTS (port_create HAVE_PORT_CREATE)\nCHECK_FUNCTION_EXISTS (posix_fallocate HAVE_POSIX_FALLOCATE)\nCHECK_FUNCTION_EXISTS (pread HAVE_PREAD)\nCHECK_FUNCTION_EXISTS (pthread_attr_create HAVE_PTHREAD_ATTR_CREATE)\nCHECK_FUNCTION_EXISTS (pthread_attr_getstacksize HAVE_PTHREAD_ATTR_GETSTACKSIZE)\nCHECK_FUNCTION_EXISTS (pthread_attr_setscope HAVE_PTHREAD_ATTR_SETSCOPE)\nCHECK_FUNCTION_EXISTS (pthread_attr_getguardsize HAVE_PTHREAD_ATTR_GETGUARDSIZE)\nCHECK_FUNCTION_EXISTS (pthread_attr_setstacksize HAVE_PTHREAD_ATTR_SETSTACKSIZE)\nCHECK_FUNCTION_EXISTS (pthread_condattr_create HAVE_PTHREAD_CONDATTR_CREATE)\nCHECK_FUNCTION_EXISTS (pthread_condattr_setclock HAVE_PTHREAD_CONDATTR_SETCLOCK)\nCHECK_FUNCTION_EXISTS (pthread_key_delete HAVE_PTHREAD_KEY_DELETE)\nCHECK_FUNCTION_EXISTS (pthread_rwlock_rdlock HAVE_PTHREAD_RWLOCK_RDLOCK)\nCHECK_FUNCTION_EXISTS (pthread_sigmask HAVE_PTHREAD_SIGMASK)\nCHECK_FUNCTION_EXISTS (pthread_threadmask HAVE_PTHREAD_THREADMASK)\nCHECK_FUNCTION_EXISTS (pthread_yield_np HAVE_PTHREAD_YIELD_NP)\nCHECK_FUNCTION_EXISTS (putenv HAVE_PUTENV)\nCHECK_FUNCTION_EXISTS (readdir_r HAVE_READDIR_R)\nCHECK_FUNCTION_EXISTS (readlink HAVE_READLINK)\nCHECK_FUNCTION_EXISTS (re_comp HAVE_RE_COMP)\nCHECK_FUNCTION_EXISTS (regcomp HAVE_REGCOMP)\nCHECK_FUNCTION_EXISTS (realpath HAVE_REALPATH)\nCHECK_FUNCTION_EXISTS (rename HAVE_RENAME)\nCHECK_FUNCTION_EXISTS (rwlock_init HAVE_RWLOCK_INIT)\nCHECK_FUNCTION_EXISTS (sched_yield HAVE_SCHED_YIELD)\nCHECK_FUNCTION_EXISTS (setenv HAVE_SETENV)\nCHECK_FUNCTION_EXISTS (setlocale HAVE_SETLOCALE)\nCHECK_FUNCTION_EXISTS (setfd HAVE_SETFD)\nCHECK_FUNCTION_EXISTS (sigaction HAVE_SIGACTION)\nCHECK_FUNCTION_EXISTS (sigthreadmask HAVE_SIGTHREADMASK)\nCHECK_FUNCTION_EXISTS (sigwait HAVE_SIGWAIT)\nCHECK_FUNCTION_EXISTS (sigaddset HAVE_SIGADDSET)\nCHECK_FUNCTION_EXISTS (sigemptyset HAVE_SIGEMPTYSET)\nCHECK_FUNCTION_EXISTS (sighold HAVE_SIGHOLD) \nCHECK_FUNCTION_EXISTS (sigset HAVE_SIGSET)\nCHECK_FUNCTION_EXISTS (sleep HAVE_SLEEP)\nCHECK_FUNCTION_EXISTS (snprintf HAVE_SNPRINTF)\nCHECK_FUNCTION_EXISTS (stpcpy HAVE_STPCPY)\nCHECK_FUNCTION_EXISTS (strcoll HAVE_STRCOLL)\nCHECK_FUNCTION_EXISTS (strerror HAVE_STRERROR)\nCHECK_FUNCTION_EXISTS (strlcpy HAVE_STRLCPY)\nCHECK_FUNCTION_EXISTS (strnlen HAVE_STRNLEN)\nCHECK_FUNCTION_EXISTS (strlcat HAVE_STRLCAT)\nCHECK_FUNCTION_EXISTS (strsignal HAVE_STRSIGNAL)\nCHECK_FUNCTION_EXISTS (fgetln HAVE_FGETLN)\nCHECK_FUNCTION_EXISTS (strpbrk HAVE_STRPBRK)\nCHECK_FUNCTION_EXISTS (strstr HAVE_STRSTR)\nCHECK_FUNCTION_EXISTS (strtok_r HAVE_STRTOK_R)\nCHECK_FUNCTION_EXISTS (strtol HAVE_STRTOL)\nCHECK_FUNCTION_EXISTS (strtoll HAVE_STRTOLL)\nCHECK_FUNCTION_EXISTS (strtoul HAVE_STRTOUL)\nCHECK_FUNCTION_EXISTS (strtoull HAVE_STRTOULL)\nCHECK_FUNCTION_EXISTS (strcasecmp HAVE_STRCASECMP)\nCHECK_FUNCTION_EXISTS (strncasecmp HAVE_STRNCASECMP)\nCHECK_FUNCTION_EXISTS (strdup HAVE_STRDUP)\nCHECK_FUNCTION_EXISTS (shmat HAVE_SHMAT) \nCHECK_FUNCTION_EXISTS (shmctl HAVE_SHMCTL)\nCHECK_FUNCTION_EXISTS (shmdt HAVE_SHMDT)\nCHECK_FUNCTION_EXISTS (shmget HAVE_SHMGET)\nCHECK_FUNCTION_EXISTS (tell HAVE_TELL)\nCHECK_FUNCTION_EXISTS (tempnam HAVE_TEMPNAM)\nCHECK_FUNCTION_EXISTS (thr_setconcurrency HAVE_THR_SETCONCURRENCY)\nCHECK_FUNCTION_EXISTS (thr_yield HAVE_THR_YIELD)\nCHECK_FUNCTION_EXISTS (vasprintf HAVE_VASPRINTF)\nCHECK_FUNCTION_EXISTS (vsnprintf HAVE_VSNPRINTF)\nCHECK_FUNCTION_EXISTS (vprintf HAVE_VPRINTF)\nCHECK_FUNCTION_EXISTS (valloc HAVE_VALLOC)\nCHECK_FUNCTION_EXISTS (memalign HAVE_MEMALIGN)\nCHECK_FUNCTION_EXISTS (chown HAVE_CHOWN)\nCHECK_FUNCTION_EXISTS (nl_langinfo HAVE_NL_LANGINFO)\n\nIF(HAVE_SYS_EVENT_H)\nCHECK_FUNCTION_EXISTS (kqueue HAVE_KQUEUE)\nENDIF()\n\n#--------------------------------------------------------------------\n# Support for WL#2373 (Use cycle counter for timing)\n#--------------------------------------------------------------------\n\nCHECK_INCLUDE_FILES(time.h HAVE_TIME_H)\nCHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)\nCHECK_INCLUDE_FILES(sys/times.h HAVE_SYS_TIMES_H)\nCHECK_INCLUDE_FILES(asm/msr.h HAVE_ASM_MSR_H)\n#msr.h has rdtscll()\n\nCHECK_INCLUDE_FILES(ia64intrin.h HAVE_IA64INTRIN_H)\n\nCHECK_FUNCTION_EXISTS(times HAVE_TIMES)\nCHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)\nCHECK_FUNCTION_EXISTS(read_real_time HAVE_READ_REAL_TIME)\n# This should work on AIX.\n\nCHECK_FUNCTION_EXISTS(ftime HAVE_FTIME)\n# This is still a normal call for milliseconds.\n\nCHECK_FUNCTION_EXISTS(time HAVE_TIME)\n# We can use time() on Macintosh if there is no ftime().\n\nCHECK_FUNCTION_EXISTS(rdtscll HAVE_RDTSCLL)\n# I doubt that we'll ever reach the check for this.\n\n\n#\n# Tests for symbols\n#\n\n#CHECK_SYMBOL_EXISTS(sys_errlist \"stdio.h\" HAVE_SYS_ERRLIST)\nCHECK_SYMBOL_EXISTS(madvise \"sys/mman.h\" HAVE_DECL_MADVISE)\nCHECK_SYMBOL_EXISTS(tzname \"time.h\" HAVE_TZNAME)\nCHECK_SYMBOL_EXISTS(lrand48 \"stdlib.h\" HAVE_LRAND48)\nCHECK_SYMBOL_EXISTS(getpagesize \"unistd.h\" HAVE_GETPAGESIZE)\nCHECK_SYMBOL_EXISTS(TIOCGWINSZ \"sys/ioctl.h\" GWINSZ_IN_SYS_IOCTL)\nCHECK_SYMBOL_EXISTS(FIONREAD \"sys/ioctl.h\" FIONREAD_IN_SYS_IOCTL)\nCHECK_SYMBOL_EXISTS(TIOCSTAT \"sys/ioctl.h\" TIOCSTAT_IN_SYS_IOCTL)\nCHECK_SYMBOL_EXISTS(FIONREAD \"sys/filio.h\" FIONREAD_IN_SYS_FILIO)\nCHECK_SYMBOL_EXISTS(gettimeofday \"sys/time.h\" HAVE_GETTIMEOFDAY)\n\nCHECK_SYMBOL_EXISTS(finite  \"math.h\" HAVE_FINITE_IN_MATH_H)\nIF(HAVE_FINITE_IN_MATH_H)\n  SET(HAVE_FINITE TRUE CACHE INTERNAL \"\")\nELSE()\n  CHECK_SYMBOL_EXISTS(finite  \"ieeefp.h\" HAVE_FINITE)\nENDIF()\nCHECK_SYMBOL_EXISTS(log2  math.h HAVE_LOG2)\nCHECK_SYMBOL_EXISTS(isnan math.h HAVE_ISNAN)\nCHECK_SYMBOL_EXISTS(rint  math.h HAVE_RINT)\n\n# isinf() prototype not found on Solaris\nCHECK_CXX_SOURCE_COMPILES(\n\"#include  <math.h>\nint main() { \n  isinf(0.0); \n  return 0;\n}\" HAVE_ISINF)\n\n\n\n#\n# Test for endianess\n#\nINCLUDE(TestBigEndian)\nIF(APPLE)\n  # Cannot run endian test on universal PPC/Intel binaries \n  # would return inconsistent result.\n  # config.h.cmake includes a special #ifdef for Darwin\nELSE()\n  TEST_BIG_ENDIAN(WORDS_BIGENDIAN)\nENDIF()\n\n#\n# Tests for type sizes (and presence)\n#\nINCLUDE (CheckTypeSize)\nset(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}\n        -D_LARGEFILE_SOURCE -D_LARGE_FILES -D_FILE_OFFSET_BITS=64\n        -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS)\nSET(CMAKE_EXTRA_INCLUDE_FILES signal.h)\nMY_CHECK_TYPE_SIZE(sigset_t SIGSET_T)\nIF(NOT SIZEOF_SIGSET_T)\n SET(sigset_t int)\nENDIF()\nMY_CHECK_TYPE_SIZE(mode_t MODE_T)\nIF(NOT SIZEOF_MODE_T)\n SET(mode_t int)\nENDIF()\n\nIF(HAVE_NETINET_IN_H)\n  SET(CMAKE_EXTRA_INCLUDE_FILES netinet/in.h)\n  MY_CHECK_TYPE_SIZE(in_addr_t IN_ADDR_T)\nENDIF(HAVE_NETINET_IN_H)\n\nIF(HAVE_STDINT_H)\n  SET(CMAKE_EXTRA_INCLUDE_FILES stdint.h)\nENDIF(HAVE_STDINT_H)\n\nSET(HAVE_VOIDP 1)\nSET(HAVE_CHARP 1)\nSET(HAVE_LONG 1)\nSET(HAVE_SIZE_T 1)\n\nIF(NOT APPLE)\nMY_CHECK_TYPE_SIZE(\"void *\" VOIDP)\nMY_CHECK_TYPE_SIZE(\"char *\" CHARP)\nMY_CHECK_TYPE_SIZE(long LONG)\nMY_CHECK_TYPE_SIZE(size_t SIZE_T)\nENDIF()\n\nMY_CHECK_TYPE_SIZE(char CHAR)\nMY_CHECK_TYPE_SIZE(short SHORT)\nMY_CHECK_TYPE_SIZE(int INT)\nMY_CHECK_TYPE_SIZE(\"long long\" LONG_LONG)\nSET(CMAKE_EXTRA_INCLUDE_FILES stdio.h sys/types.h)\nMY_CHECK_TYPE_SIZE(off_t OFF_T)\nMY_CHECK_TYPE_SIZE(uchar UCHAR)\nMY_CHECK_TYPE_SIZE(uint UINT)\nMY_CHECK_TYPE_SIZE(ulong ULONG)\nMY_CHECK_TYPE_SIZE(int8 INT8)\nMY_CHECK_TYPE_SIZE(uint8 UINT8)\nMY_CHECK_TYPE_SIZE(int16 INT16)\nMY_CHECK_TYPE_SIZE(uint16 UINT16)\nMY_CHECK_TYPE_SIZE(int32 INT32)\nMY_CHECK_TYPE_SIZE(uint32 UINT32)\nMY_CHECK_TYPE_SIZE(u_int32_t U_INT32_T)\nMY_CHECK_TYPE_SIZE(int64 INT64)\nMY_CHECK_TYPE_SIZE(uint64 UINT64)\nMY_CHECK_TYPE_SIZE(time_t TIME_T)\nSET (CMAKE_EXTRA_INCLUDE_FILES sys/types.h)\nMY_CHECK_TYPE_SIZE(bool  BOOL)\nSET(CMAKE_EXTRA_INCLUDE_FILES)\nIF(HAVE_SYS_SOCKET_H)\n  SET(CMAKE_EXTRA_INCLUDE_FILES sys/socket.h)\nENDIF(HAVE_SYS_SOCKET_H)\nMY_CHECK_TYPE_SIZE(socklen_t SOCKLEN_T)\nSET(CMAKE_EXTRA_INCLUDE_FILES)\n\nIF(HAVE_IEEEFP_H)\n  SET(CMAKE_EXTRA_INCLUDE_FILES ieeefp.h)\n  MY_CHECK_TYPE_SIZE(fp_except FP_EXCEPT)\nENDIF()\n\n\n#\n# Code tests\n#\n\n# check whether time_t is unsigned\nCHECK_C_SOURCE_COMPILES(\"\n#include <time.h>\nint main()\n{\n  int array[(((time_t)-1) > 0) ? 1 : -1];\n  return 0;\n}\"\nTIME_T_UNSIGNED)\n\n\nCHECK_C_SOURCE_COMPILES(\"\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#endif\nint main()\n{\n  getaddrinfo( 0, 0, 0, 0);\n  return 0;\n}\"\nHAVE_GETADDRINFO)\n\nCHECK_C_SOURCE_COMPILES(\"\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#endif\nint main()\n{\n  select(0,0,0,0,0);\n  return 0;\n}\"\nHAVE_SELECT)\n\n#\n# Check if timespec has ts_sec and ts_nsec fields\n#\n\nCHECK_C_SOURCE_COMPILES(\"\n#include <pthread.h>\n\nint main(int ac, char **av)\n{\n  struct timespec abstime;\n  abstime.ts_sec = time(NULL)+1;\n  abstime.ts_nsec = 0;\n}\n\" HAVE_TIMESPEC_TS_SEC)\n\n\n#\n# Check return type of qsort()\n#\nCHECK_C_SOURCE_COMPILES(\"\n#include <stdlib.h>\n#ifdef __cplusplus\nextern \\\"C\\\"\n#endif\nvoid qsort(void *base, size_t nel, size_t width,\n  int (*compar) (const void *, const void *));\nint main(int ac, char **av) {}\n\" QSORT_TYPE_IS_VOID)\nIF(QSORT_TYPE_IS_VOID)\n  SET(RETQSORTTYPE \"void\")\nELSE(QSORT_TYPE_IS_VOID)\n  SET(RETQSORTTYPE \"int\")\nENDIF(QSORT_TYPE_IS_VOID)\n\nIF(WIN32)\nSET(SOCKET_SIZE_TYPE int)\nELSE()\nCHECK_CXX_SOURCE_COMPILES(\"\n#include <sys/socket.h>\nint main(int argc, char **argv)\n{\n  getsockname(0,0,(socklen_t *) 0);\n  return 0; \n}\"\nHAVE_SOCKET_SIZE_T_AS_socklen_t)\n\nIF(HAVE_SOCKET_SIZE_T_AS_socklen_t)\n  SET(SOCKET_SIZE_TYPE socklen_t)\nELSE()\n  CHECK_CXX_SOURCE_COMPILES(\"\n  #include <sys/socket.h>\n  int main(int argc, char **argv)\n  {\n    getsockname(0,0,(int *) 0);\n    return 0; \n  }\"\n  HAVE_SOCKET_SIZE_T_AS_int)\n  IF(HAVE_SOCKET_SIZE_T_AS_int)\n    SET(SOCKET_SIZE_TYPE int)\n  ELSE()\n    CHECK_CXX_SOURCE_COMPILES(\"\n    #include <sys/socket.h>\n    int main(int argc, char **argv)\n    {\n      getsockname(0,0,(size_t *) 0);\n      return 0; \n    }\"\n    HAVE_SOCKET_SIZE_T_AS_size_t)\n    IF(HAVE_SOCKET_SIZE_T_AS_size_t)\n      SET(SOCKET_SIZE_TYPE size_t)\n    ELSE()\n      SET(SOCKET_SIZE_TYPE int)\n    ENDIF()\n  ENDIF()\nENDIF()\nENDIF()\n\nCHECK_CXX_SOURCE_COMPILES(\"\n#include <pthread.h>\nint main()\n{\n  pthread_yield();\n  return 0;\n}\n\" HAVE_PTHREAD_YIELD_ZERO_ARG)\n\nIF(NOT STACK_DIRECTION)\n  IF(CMAKE_CROSSCOMPILING)\n   MESSAGE(FATAL_ERROR \n   \"STACK_DIRECTION is not defined.  Please specify -DSTACK_DIRECTION=1 \"\n   \"or -DSTACK_DIRECTION=-1 when calling cmake.\")\n  ELSE()\n    TRY_RUN(STACKDIR_RUN_RESULT STACKDIR_COMPILE_RESULT    \n     ${CMAKE_BINARY_DIR} \n     ${CMAKE_SOURCE_DIR}/cmake/stack_direction.c\n     )\n     # Test program returns 0 (down) or 1 (up).\n     # Convert to -1 or 1\n     IF(STACKDIR_RUN_RESULT EQUAL 0)\n       SET(STACK_DIRECTION -1 CACHE INTERNAL \"Stack grows direction\")\n     ELSE()\n       SET(STACK_DIRECTION 1 CACHE INTERNAL \"Stack grows direction\")\n     ENDIF()\n     MESSAGE(STATUS \"Checking stack direction : ${STACK_DIRECTION}\")\n   ENDIF()\nENDIF()\n\n#\n# Check return type of signal handlers\n#\nCHECK_C_SOURCE_COMPILES(\"\n#include <signal.h>\n#ifdef signal\n# undef signal\n#endif\n#ifdef __cplusplus\nextern \\\"C\\\" void (*signal (int, void (*)(int)))(int);\n#else\nvoid (*signal ()) ();\n#endif\nint main(int ac, char **av) {}\n\" SIGNAL_RETURN_TYPE_IS_VOID)\nIF(SIGNAL_RETURN_TYPE_IS_VOID)\n  SET(RETSIGTYPE void)\n  SET(VOID_SIGHANDLER 1)\nELSE(SIGNAL_RETURN_TYPE_IS_VOID)\n  SET(RETSIGTYPE int)\nENDIF(SIGNAL_RETURN_TYPE_IS_VOID)\n\n\nCHECK_INCLUDE_FILES(\"time.h;sys/time.h\" TIME_WITH_SYS_TIME)\nCHECK_SYMBOL_EXISTS(O_NONBLOCK \"unistd.h;fcntl.h\" HAVE_FCNTL_NONBLOCK)\nIF(NOT HAVE_FCNTL_NONBLOCK)\n SET(NO_FCNTL_NONBLOCK 1)\nENDIF()\n\n#\n# Test for how the C compiler does inline, if at all\n#\n# SunPro is weird, apparently it only supports inline at -xO3 or -xO4.\n# And if CMAKE_C_FLAGS has -xO4 but CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE} has -xO2\n# then CHECK_C_SOURCE_COMPILES will succeed but the built will fail.\n# We must test all flags here.\n# XXX actually, we can do this for all compilers, not only SunPro\nIF (CMAKE_CXX_COMPILER_ID MATCHES \"SunPro\" AND\n    CMAKE_GENERATOR MATCHES \"Makefiles\")\n  STRING(TOUPPER \"CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE}\" flags)\n  SET(CMAKE_REQUIRED_FLAGS \"${${flags}}\")\nENDIF()\nCHECK_C_SOURCE_COMPILES(\"\nextern int bar(int x);\nstatic inline int foo(){return bar(1);}\nint main(int argc, char *argv[]){return 0;}\"\n                            C_HAS_inline)\nIF(NOT C_HAS_inline)\n  CHECK_C_SOURCE_COMPILES(\"\n  extern int bar(int x);\n  static __inline int foo(){return bar(1);}\n  int main(int argc, char *argv[]){return 0;}\"\n                            C_HAS___inline)\n  IF(C_HAS___inline)\n    SET(C_INLINE __inline)\n  ElSE()\n    SET(C_INLINE)\n    MESSAGE(WARNING \"C compiler does not support funcion inlining\")\n    IF(NOT NOINLINE)\n      MESSAGE(FATAL_ERROR \"Use -DNOINLINE=TRUE to allow compilation without inlining\")\n    ENDIF()\n  ENDIF()\nENDIF()\n\nIF(NOT CMAKE_CROSSCOMPILING AND NOT MSVC)\n  STRING(TOLOWER ${CMAKE_SYSTEM_PROCESSOR}  processor)\n  IF(processor MATCHES \"86\" OR processor MATCHES \"amd64\" OR processor MATCHES \"x64\")\n  #Check for x86 PAUSE instruction\n  # We have to actually try running the test program, because of a bug\n  # in Solaris on x86_64, where it wrongly reports that PAUSE is not\n  # supported when trying to run an application.  See\n  # http://bugs.opensolaris.org/bugdatabase/printableBug.do?bug_id=6478684\n  CHECK_C_SOURCE_RUNS(\"\n  int main()\n  { \n    __asm__ __volatile__ (\\\"pause\\\"); \n    return 0;\n  }\"  HAVE_PAUSE_INSTRUCTION)\n  ENDIF()\n  IF (NOT HAVE_PAUSE_INSTRUCTION)\n    CHECK_C_SOURCE_COMPILES(\"\n    int main()\n    {\n     __asm__ __volatile__ (\\\"rep; nop\\\");\n     return 0;\n    }\n   \" HAVE_FAKE_PAUSE_INSTRUCTION)\n  ENDIF()\nENDIF()\n  \nCHECK_SYMBOL_EXISTS(tcgetattr \"termios.h\" HAVE_TCGETATTR 1)\n\n#\n# Check type of signal routines (posix, 4.2bsd, 4.1bsd or v7)\n#\nCHECK_C_SOURCE_COMPILES(\"\n  #include <signal.h>\n  int main(int ac, char **av)\n  {\n    sigset_t ss;\n    struct sigaction sa;\n    sigemptyset(&ss); sigsuspend(&ss);\n    sigaction(SIGINT, &sa, (struct sigaction *) 0);\n    sigprocmask(SIG_BLOCK, &ss, (sigset_t *) 0);\n  }\"\n  HAVE_POSIX_SIGNALS)\n\nIF(NOT HAVE_POSIX_SIGNALS)\n CHECK_C_SOURCE_COMPILES(\"\n  #include <signal.h>\n  int main(int ac, char **av)\n  {\n    int mask = sigmask(SIGINT);\n    sigsetmask(mask); sigblock(mask); sigpause(mask);\n  }\"\n  HAVE_BSD_SIGNALS)\n  IF (NOT HAVE_BSD_SIGNALS)\n    CHECK_C_SOURCE_COMPILES(\"\n    #include <signal.h>\n    void foo() { }\n    int main(int ac, char **av)\n    {\n      int mask = sigmask(SIGINT);\n      sigset(SIGINT, foo); sigrelse(SIGINT);\n      sighold(SIGINT); sigpause(SIGINT);\n    }\"\n   HAVE_SVR3_SIGNALS)  \n   IF (NOT HAVE_SVR3_SIGNALS)\n    SET(HAVE_V7_SIGNALS 1)\n   ENDIF(NOT HAVE_SVR3_SIGNALS)\n ENDIF(NOT HAVE_BSD_SIGNALS)\nENDIF(NOT HAVE_POSIX_SIGNALS)\n\n# Assume regular sprintf\nSET(SPRINTFS_RETURNS_INT 1)\n\nIF(CMAKE_COMPILER_IS_GNUCXX AND HAVE_CXXABI_H)\nCHECK_CXX_SOURCE_COMPILES(\"\n #include <cxxabi.h>\n int main(int argc, char **argv) \n  {\n    char *foo= 0; int bar= 0;\n    foo= abi::__cxa_demangle(foo, foo, 0, &bar);\n    return 0;\n  }\"\n  HAVE_ABI_CXA_DEMANGLE)\nENDIF()\n\nCHECK_C_SOURCE_COMPILES(\"\n  int main(int argc, char **argv) \n  {\n    extern char *__bss_start;\n    return __bss_start ? 1 : 0;\n  }\"\nHAVE_BSS_START)\n\nCHECK_C_SOURCE_COMPILES(\"\n    int main()\n    {\n      extern void __attribute__((weak)) foo(void);\n      return 0;\n    }\"\n    HAVE_WEAK_SYMBOL\n)\n\n\nCHECK_CXX_SOURCE_COMPILES(\"\n    #include <new>\n    int main()\n    {\n      char *c = new char;\n      return 0;\n    }\"\n    HAVE_CXX_NEW\n)\n\nCHECK_CXX_SOURCE_COMPILES(\"\n    #undef inline\n    #if !defined(SCO) && !defined(__osf__) && !defined(_REENTRANT)\n    #define _REENTRANT\n    #endif\n    #include <pthread.h>\n    #include <sys/types.h>\n    #include <sys/socket.h>\n    #include <netinet/in.h>\n    #include <arpa/inet.h>\n    #include <netdb.h>\n    int main()\n    {\n\n       struct hostent *foo =\n       gethostbyaddr_r((const char *) 0,\n          0, 0, (struct hostent *) 0, (char *) NULL,  0, (int *)0);\n       return 0;\n    }\n  \"\n  HAVE_SOLARIS_STYLE_GETHOST)\n\n# Use of ALARMs to wakeup on timeout on sockets\n#\n# This feature makes use of a mutex and is a scalability hog we\n# try to avoid using. However we need support for SO_SNDTIMEO and\n# SO_RCVTIMEO socket options for this to work. So we will check\n# if this feature is supported by a simple TRY_RUN macro. However\n# on some OS's there is support for setting those variables but\n# they are silently ignored. For those OS's we will not attempt\n# to use SO_SNDTIMEO and SO_RCVTIMEO even if it is said to work.\n# See Bug#29093 for the problem with SO_SND/RCVTIMEO on HP/UX.\n# Solaris11 has a similar problem\n# To use alarm is simple, simply avoid setting anything.\n\nIF(WIN32)\n  SET(HAVE_SOCKET_TIMEOUT 1)\nELSEIF(CMAKE_SYSTEM MATCHES \"HP-UX\")\n  SET(HAVE_SOCKET_TIMEOUT 0)\nELSEIF(CMAKE_SYSTEM_NAME MATCHES \"SunOS\")\n  SET(HAVE_SOCKET_TIMEOUT 0)\nELSEIF(CMAKE_CROSSCOMPILING)\n  SET(HAVE_SOCKET_TIMEOUT 0)\nELSE()\nSET(CMAKE_REQUIRED_LIBRARIES ${LIBNSL} ${LIBSOCKET}) \nCHECK_C_SOURCE_RUNS(\n\"\n #include <sys/types.h>\n #include <sys/socket.h>\n #include <sys/time.h>\n \n int main()\n {    \n   int fd = socket(AF_INET, SOCK_STREAM, 0);\n   struct timeval tv;\n   int ret= 0;\n   tv.tv_sec= 2;\n   tv.tv_usec= 0;\n   ret|= setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));\n   ret|= setsockopt(fd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));\n   return !!ret;\n }\n\" HAVE_SOCKET_TIMEOUT)\nENDIF()\n\nSET(NO_ALARM \"${HAVE_SOCKET_TIMEOUT}\" CACHE BOOL \n   \"No need to use alarm to implement socket timeout\")\nSET(SIGNAL_WITH_VIO_CLOSE \"${HAVE_SOCKET_TIMEOUT}\")\nMARK_AS_ADVANCED(NO_ALARM)\n\n\nIF(CMAKE_COMPILER_IS_GNUCXX)\nIF(WITH_ATOMIC_OPS STREQUAL \"up\")\n  SET(MY_ATOMIC_MODE_DUMMY 1 CACHE BOOL \"Assume single-CPU mode, no concurrency\")\nELSEIF(WITH_ATOMIC_OPS STREQUAL \"rwlocks\")\n  SET(MY_ATOMIC_MODE_RWLOCK 1 CACHE BOOL \"Use pthread rwlocks for atomic ops\")\nELSEIF(WITH_ATOMIC_OPS STREQUAL \"smp\")\nELSEIF(NOT WITH_ATOMIC_OPS)\n  CHECK_CXX_SOURCE_COMPILES(\"\n  int main()\n  {\n    int foo= -10; int bar= 10;\n    long long int foo64= -10; long long int bar64= 10;\n    if (!__sync_fetch_and_add(&foo, bar) || foo)\n      return -1;\n    bar= __sync_lock_test_and_set(&foo, bar);\n    if (bar || foo != 10)\n      return -1;\n    bar= __sync_val_compare_and_swap(&bar, foo, 15);\n    if (bar)\n      return -1;\n    if (!__sync_fetch_and_add(&foo64, bar64) || foo64)\n      return -1;\n    bar64= __sync_lock_test_and_set(&foo64, bar64);\n    if (bar64 || foo64 != 10)\n      return -1;\n    bar64= __sync_val_compare_and_swap(&bar64, foo, 15);\n    if (bar64)\n      return -1;\n    return 0;\n  }\"\n  HAVE_GCC_ATOMIC_BUILTINS)\nELSE()\n  MESSAGE(FATAL_ERROR \"${WITH_ATOMIC_OPS} is not a valid value for WITH_ATOMIC_OPS!\")\nENDIF()\nENDIF()\n\nSET(WITH_ATOMIC_LOCKS \"${WITH_ATOMIC_LOCKS}\" CACHE STRING\n\"Implement atomic operations using pthread rwlocks or atomic CPU\ninstructions for multi-processor or uniprocessor\nconfiguration. By default gcc built-in sync functions are used,\nif available and 'smp' configuration otherwise.\")\nMARK_AS_ADVANCED(WITH_ATOMIC_LOCKS MY_ATOMIC_MODE_RWLOCK MY_ATOMIC_MODE_DUMMY)\n\nIF(WITH_VALGRIND)\n  SET(HAVE_valgrind 1)\nENDIF()\n\nCHECK_INCLUDE_FILES(\"valgrind/memcheck.h;valgrind/valgrind.h\" \n  HAVE_VALGRIND)\n\n#--------------------------------------------------------------------\n# Check for IPv6 support\n#--------------------------------------------------------------------\nCHECK_INCLUDE_FILE(netinet/in6.h HAVE_NETINET_IN6_H)\n\nIF(UNIX)\n  SET(CMAKE_EXTRA_INCLUDE_FILES sys/types.h netinet/in.h sys/socket.h)\n  IF(HAVE_NETINET_IN6_H)\n    SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} netinet/in6.h)\n  ENDIF()\nELSEIF(WIN32)\n  SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} winsock2.h ws2ipdef.h)\nENDIF()\n\nMY_CHECK_STRUCT_SIZE(\"sockaddr_in6\" SOCKADDR_IN6)\nMY_CHECK_STRUCT_SIZE(\"in6_addr\" IN6_ADDR)\n\nIF(HAVE_STRUCT_SOCKADDR_IN6 OR HAVE_STRUCT_IN6_ADDR)\n  SET(HAVE_IPV6 TRUE CACHE INTERNAL \"\")\nENDIF()\n\n\n# Check for sockaddr_storage.ss_family\n# It is called differently under OS400 and older AIX\n\nCHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_storage\"\n ss_family \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_STORAGE_SS_FAMILY)\nIF(NOT HAVE_SOCKADDR_STORAGE_SS_FAMILY)\n  CHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_storage\"\n  __ss_family \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_STORAGE___SS_FAMILY)\n  IF(HAVE_SOCKADDR_STORAGE___SS_FAMILY)\n    SET(ss_family __ss_family)\n  ENDIF()\nENDIF()\n\n#\n# Check if struct sockaddr_in::sin_len is available.\n#\n\nCHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in\" sin_len\n  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_IN_SIN_LEN)\n\n#\n# Check if struct sockaddr_in6::sin6_len is available.\n#\n\nCHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in6\" sin6_len\n  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_IN6_SIN6_LEN)\n\nSET(CMAKE_EXTRA_INCLUDE_FILES) \n\nCHECK_STRUCT_HAS_MEMBER(\"struct dirent\" d_ino \"dirent.h\"  STRUCT_DIRENT_HAS_D_INO)\nCHECK_STRUCT_HAS_MEMBER(\"struct dirent\" d_namlen \"dirent.h\"  STRUCT_DIRENT_HAS_D_NAMLEN)\nSET(SPRINTF_RETURNS_INT 1)\nCHECK_INCLUDE_FILE(ucontext.h HAVE_UCONTEXT_H)\nIF(NOT HAVE_UCONTEXT_H)\n  CHECK_INCLUDE_FILE(sys/ucontext.h HAVE_UCONTEXT_H)\nENDIF()\nCHECK_STRUCT_HAS_MEMBER(\"struct timespec\" tv_sec \"time.h\" STRUCT_TIMESPEC_HAS_TV_SEC)\nCHECK_STRUCT_HAS_MEMBER(\"struct timespec\" tv_nsec \"time.h\" STRUCT_TIMESPEC_HAS_TV_NSEC)\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/cmake/dtrace.cmake": "# Copyright (c) 2009, 2014, Oracle and/or its affiliates. All rights reserved.\n# \n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA \n\nIF(CMAKE_SYSTEM_NAME MATCHES \"SunOS\" AND CMAKE_COMPILER_IS_GNUCXX\n  AND CMAKE_SIZEOF_VOID_P EQUAL 4)\n  IF(NOT DEFINED BUGGY_GCC_NO_DTRACE_MODULES)\n    EXECUTE_PROCESS(\n      COMMAND ${CMAKE_C_COMPILER} ${CMAKE_C_COMPILER_ARG1}  --version\n      OUTPUT_VARIABLE out)\n    IF(out MATCHES \"3.4.6\")\n     # This gcc causes crashes in dlopen() for dtraced shared libs,\n     # while standard shipped with Solaris10 3.4.3 is ok\n     SET(BUGGY_GCC_NO_DTRACE_MODULES 1 CACHE INTERNAL \"\")\n    ELSE()\n     SET(BUGGY_GCC_NO_DTRACE_MODULES 0 CACHE INTERNAL \"\")\n    ENDIF()\n  ENDIF()\nENDIF()\n\n# Check if OS supports DTrace\nMACRO(CHECK_DTRACE)\n FIND_PROGRAM(DTRACE dtrace)\n MARK_AS_ADVANCED(DTRACE)\n\n IF(CMAKE_C_COMPILER MATCHES \"ccache\" AND CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n   # dtrace fails on fedora if  CC='ccache gcc' is used\n   SET(BUGGY_LINUX_DTRACE 1)\n ENDIF()\n\n # On FreeBSD, dtrace does not handle userland tracing yet\n IF(DTRACE AND NOT CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\"\n     AND NOT BUGGY_GCC_NO_DTRACE_MODULES\n     AND NOT BUGGY_LINUX_DTRACE) \n   SET(ENABLE_DTRACE ON CACHE BOOL \"Enable dtrace\")\n ENDIF()\n SET(HAVE_DTRACE ${ENABLE_DTRACE})\n IF(CMAKE_SYSTEM_NAME MATCHES \"SunOS\")\n   IF(CMAKE_SIZEOF_VOID_P EQUAL 4)\n     SET(DTRACE_FLAGS -32 CACHE INTERNAL \"DTrace architecture flags\")\n   ELSE()\n     SET(DTRACE_FLAGS -64 CACHE INTERNAL \"DTrace architecture flags\")\n   ENDIF()\n ENDIF()\nENDMACRO()\n\nCHECK_DTRACE()\n\n# Produce a header file  with\n# DTrace macros\nMACRO (DTRACE_HEADER provider header header_no_dtrace)\n IF(ENABLE_DTRACE)\n ADD_CUSTOM_COMMAND(\n   OUTPUT  ${header} ${header_no_dtrace}\n   COMMAND ${DTRACE} -h -s ${provider} -o ${header}\n   COMMAND perl ${CMAKE_SOURCE_DIR}/scripts/dheadgen.pl -f ${provider} > ${header_no_dtrace}\n   DEPENDS ${provider}\n )\n ENDIF()\nENDMACRO()\n\n\n# Create provider headers\nIF(ENABLE_DTRACE)\n  CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/include/probes_mysql.d.base \n    ${CMAKE_BINARY_DIR}/include/probes_mysql.d COPYONLY)\n  DTRACE_HEADER(\n   ${CMAKE_BINARY_DIR}/include/probes_mysql.d \n   ${CMAKE_BINARY_DIR}/include/probes_mysql_dtrace.h\n   ${CMAKE_BINARY_DIR}/include/probes_mysql_nodtrace.h\n  )\n  ADD_CUSTOM_TARGET(gen_dtrace_header\n  DEPENDS  \n  ${CMAKE_BINARY_DIR}/include/probes_mysql.d\n  ${CMAKE_BINARY_DIR}/include/probes_mysql_dtrace.h\n  ${CMAKE_BINARY_DIR}/include/probes_mysql_nodtrace.h\n  ) \nELSE()\n CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/include/probes_mysql_nodtrace.h.in\n   ${CMAKE_BINARY_DIR}/include/probes_mysql_nodtrace.h COPYONLY)\nENDIF()\n\nFUNCTION(DTRACE_INSTRUMENT target)\n  IF(BUGGY_GCC_NO_DTRACE_MODULES)\n    GET_TARGET_PROPERTY(target_type ${target} TYPE)\n    IF(target_type MATCHES \"MODULE_LIBRARY\")\n      RETURN()\n    ENDIF()\n  ENDIF()\n  IF(ENABLE_DTRACE)\n    ADD_DEPENDENCIES(${target} gen_dtrace_header)\n\n    # Invoke dtrace to generate object file and link it together with target.\n    IF(CMAKE_SYSTEM_NAME MATCHES \"SunOS\")\n      SET(objdir ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${target}.dir)\n      SET(outfile ${objdir}/${target}_dtrace.o)\n      GET_TARGET_PROPERTY(target_type ${target} TYPE)\n      ADD_CUSTOM_COMMAND(\n        TARGET ${target} PRE_LINK \n        COMMAND ${CMAKE_COMMAND}\n          -DDTRACE=${DTRACE}\t  \n          -DOUTFILE=${outfile} \n          -DDFILE=${CMAKE_BINARY_DIR}/include/probes_mysql.d\n          -DDTRACE_FLAGS=${DTRACE_FLAGS}\n          -DDIRS=.\n          -DTYPE=${target_type}\n          -P ${CMAKE_SOURCE_DIR}/cmake/dtrace_prelink.cmake\n        WORKING_DIRECTORY ${objdir}\n      )\n    ELSEIF(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n      # dtrace on Linux runs gcc and uses flags from environment\n      SET(CFLAGS_SAVED $ENV{CFLAGS})\n      SET(ENV{CFLAGS} ${CMAKE_C_FLAGS})\n      SET(outfile \"${CMAKE_BINARY_DIR}/probes_mysql.o\")\n      # Systemtap object\n      EXECUTE_PROCESS(\n        COMMAND ${DTRACE} -G -s ${CMAKE_SOURCE_DIR}/include/probes_mysql.d.base\n        -o ${outfile}\n        )\n      SET(ENV{CFLAGS} ${CFLAGS_SAVED})\n    ENDIF()\n\n    # Do not try to extend the library if we have not built the .o file\n    IF(outfile)\n      # Add full  object path to linker flags\n      GET_TARGET_PROPERTY(target_type ${target} TYPE)\n      IF(NOT target_type MATCHES \"STATIC\")\n        SET_TARGET_PROPERTIES(${target} PROPERTIES LINK_FLAGS \"${outfile}\")\n      ELSE()\n        # For static library flags, add the object to the library.\n        # Note: DTrace probes in static libraries are  unusable currently \n        # (see explanation for DTRACE_INSTRUMENT_STATIC_LIBS below)\n        # but maybe one day this will be fixed.\n        GET_TARGET_PROPERTY(target_location ${target} LOCATION)\n        ADD_CUSTOM_COMMAND(\n          TARGET ${target} POST_BUILD\n          COMMAND ${CMAKE_AR} r  ${target_location} ${outfile}\n\t  COMMAND ${CMAKE_RANLIB} ${target_location}\n          )\n        # Used in DTRACE_INSTRUMENT_WITH_STATIC_LIBS\n        SET(TARGET_OBJECT_DIRECTORY_${target}  ${objdir} CACHE INTERNAL \"\")\n      ENDIF()\n    ENDIF()\n  ENDIF()\nENDFUNCTION()\n\n\n# Ugly workaround for Solaris' DTrace inability to use probes\n# from static libraries, discussed e.g in this thread\n# (http://opensolaris.org/jive/thread.jspa?messageID=432454)\n# We have to collect all object files that may be instrumented\n# and go into the mysqld (also those that come from in static libs)\n# run them again through dtrace -G to generate an ELF file that links\n# to mysqld.\nMACRO (DTRACE_INSTRUMENT_STATIC_LIBS target libs)\nIF(CMAKE_SYSTEM_NAME MATCHES \"SunOS\" AND ENABLE_DTRACE)\n  # Filter out non-static libraries in the list, if any\n  SET(static_libs)\n  FOREACH(lib ${libs})\n    GET_TARGET_PROPERTY(libtype ${lib} TYPE)\n    IF(libtype MATCHES STATIC_LIBRARY)\n      SET(static_libs ${static_libs} ${lib})\n    ENDIF()\n  ENDFOREACH()\n\n  FOREACH(lib ${static_libs})\n    SET(dirs ${dirs} ${TARGET_OBJECT_DIRECTORY_${lib}})\n  ENDFOREACH()\n\n  SET (obj ${CMAKE_CURRENT_BINARY_DIR}/${target}_dtrace_all.o)\n  ADD_CUSTOM_COMMAND(\n  OUTPUT ${obj}\n  DEPENDS ${static_libs}\n  COMMAND ${CMAKE_COMMAND}\n   -DDTRACE=${DTRACE}\t  \n   -DOUTFILE=${obj} \n   -DDFILE=${CMAKE_BINARY_DIR}/include/probes_mysql.d\n   -DDTRACE_FLAGS=${DTRACE_FLAGS}\n   \"-DDIRS=${dirs}\"\n   -DTYPE=MERGE\n   -P ${CMAKE_SOURCE_DIR}/cmake/dtrace_prelink.cmake\n   VERBATIM\n  )\n  ADD_CUSTOM_TARGET(${target}_dtrace_all  DEPENDS ${obj})\n  ADD_DEPENDENCIES(${target} ${target}_dtrace_all)\n  TARGET_LINK_LIBRARIES(${target} ${obj})\nENDIF()\nENDMACRO()\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/cmake/os/SunOS.cmake": "# Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.\n# \n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA \n\nINCLUDE(CheckSymbolExists)\nINCLUDE(CheckCSourceRuns)\nINCLUDE(CheckCSourceCompiles) \n\n# Enable 64 bit file offsets\nSET(_FILE_OFFSET_BITS 64)\n\n# Legacy option, without it  my_pthread is having problems\nADD_DEFINITIONS(-DHAVE_RWLOCK_T)\n\n# On  Solaris, use of intrinsics will screw the lib search logic\n# Force using -lm, so rint etc are found.\nSET(LIBM m)\n\n# CMake defined -lthread as thread flag. This crashes in dlopen \n# when trying to load plugins workaround with -lpthread\nSET(CMAKE_THREADS_LIBS_INIT -lpthread CACHE INTERNAL \"\" FORCE)\n\n# Solaris specific large page support\nCHECK_SYMBOL_EXISTS(MHA_MAPSIZE_VA sys/mman.h  HAVE_DECL_MHA_MAPSIZE_VA)\nIF(HAVE_DECL_MHA_MAPSIZE_VA)\n SET(HAVE_SOLARIS_LARGE_PAGES 1)\n SET(HAVE_LARGE_PAGE_OPTION 1)\nENDIF()\n\n\n# Solaris atomics\nCHECK_C_SOURCE_RUNS(\n \"\n #include  <atomic.h>\n  int main()\n  {\n    int foo = -10; int bar = 10;\n    int64_t foo64 = -10; int64_t bar64 = 10;\n    if (atomic_add_int_nv((uint_t *)&foo, bar) || foo)\n      return -1;\n    bar = atomic_swap_uint((uint_t *)&foo, (uint_t)bar);\n    if (bar || foo != 10)\n     return -1;\n    bar = atomic_cas_uint((uint_t *)&bar, (uint_t)foo, 15);\n    if (bar)\n      return -1;\n    if (atomic_add_64_nv((volatile uint64_t *)&foo64, bar64) || foo64)\n      return -1;\n    bar64 = atomic_swap_64((volatile uint64_t *)&foo64, (uint64_t)bar64);\n    if (bar64 || foo64 != 10)\n      return -1;\n    bar64 = atomic_cas_64((volatile uint64_t *)&bar64, (uint_t)foo64, 15);\n    if (bar64)\n      return -1;\n    atomic_or_64((volatile uint64_t *)&bar64, 0);\n    return 0;\n  }\n\"  HAVE_SOLARIS_ATOMIC)\n\n\n# Check is special processor flag needs to be set on older GCC\n#that defaults to v8 sparc . Code here is taken from my_rdtsc.c \nIF(CMAKE_COMPILER_IS_GNUCC AND CMAKE_SIZEOF_VOID_P EQUAL 4\n  AND CMAKE_SYSTEM_PROCESSOR MATCHES \"sparc\")\n  SET(SOURCE\n  \"\n  int main()\n  {\n     long high\\;\n     long low\\;\n    __asm __volatile__ (\\\"rd %%tick,%1\\; srlx %1,32,%0\\\" : \\\"=r\\\" ( high), \\\"=r\\\" (low))\\;\n    return 0\\;\n  } \")\n  CHECK_C_SOURCE_COMPILES(${SOURCE}  HAVE_SPARC32_TICK)\n  IF(NOT HAVE_SPARC32_TICK)\n    SET(CMAKE_REQUIRED_FLAGS \"-mcpu=v9\")\n    CHECK_C_SOURCE_COMPILES(${SOURCE}  HAVE_SPARC32_TICK_WITH_V9)\n    SET(CMAKE_REQUIRED_FLAGS)\n    IF(HAVE_SPARC32_TICK_WITH_V9)\n      SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mcpu=v9\")\n      SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcpu=v9\")\n    ENDIF()\n  ENDIF()\nENDIF()\n\nIF(CMAKE_CXX_COMPILER_ID MATCHES \"SunPro\")\n  # Unnamed structs and unions\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -features=extensions\")\nENDIF()\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql-common/client_plugin.c": "/* Copyright (C) 2010 Sergei Golubchik and Monty Program Ab\n   Copyright (c) 2010, 2011, Oracle and/or its affiliates.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n/**\n  @file\n  \n  Support code for the client side (libmysql) plugins\n\n  Client plugins are somewhat different from server plugins, they are simpler.\n\n  They do not need to be installed or in any way explicitly loaded on the\n  client, they are loaded automatically on demand.\n  One client plugin per shared object, soname *must* match the plugin name.\n\n  There is no reference counting and no unloading either.\n*/\n\n#if _MSC_VER\n/* Silence warnings about variable 'unused' being used. */\n#define FORCE_INIT_OF_VARS 1\n#endif\n\n#include <my_global.h>\n#include \"mysql.h\"\n#include <my_sys.h>\n#include <m_string.h>\n#include <my_pthread.h>\n\n#include <sql_common.h>\n#include \"errmsg.h\"\n#include <mysql/client_plugin.h>\n\nstruct st_client_plugin_int {\n  struct st_client_plugin_int *next;\n  void   *dlhandle;\n  struct st_mysql_client_plugin *plugin;\n};\n\nstatic my_bool initialized= 0;\nstatic MEM_ROOT mem_root;\n\n#define plugin_declarations_sym \"_mysql_client_plugin_declaration_\"\n\nstatic uint plugin_version[MYSQL_CLIENT_MAX_PLUGINS]=\n{\n  0, /* these two are taken by Connector/C */\n  0, /* these two are taken by Connector/C */\n  MYSQL_CLIENT_AUTHENTICATION_PLUGIN_INTERFACE_VERSION\n};\n\n/*\n  Loaded plugins are stored in a linked list.\n  The list is append-only, the elements are added to the head (like in a stack).\n  The elements are added under a mutex, but the list can be read and traversed\n  without any mutex because once an element is added to the list, it stays\n  there. The main purpose of a mutex is to prevent two threads from\n  loading the same plugin twice in parallel.\n*/\nstruct st_client_plugin_int *plugin_list[MYSQL_CLIENT_MAX_PLUGINS];\nstatic pthread_mutex_t LOCK_load_client_plugin;\n\nstatic int is_not_initialized(MYSQL *mysql, const char *name)\n{\n  DBUG_ENTER(\"is_not_initialized\");\n\n  if (initialized)\n    DBUG_RETURN(0);\n\n  set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD,\n                           unknown_sqlstate, ER(CR_AUTH_PLUGIN_CANNOT_LOAD),\n                           name, \"not initialized\");\n  DBUG_RETURN(1);\n}\n\n/**\n  finds a plugin in the list\n\n  @param name   plugin name to search for\n  @param type   plugin type\n\n  @note this does NOT necessarily need a mutex, take care!\n  \n  @retval a pointer to a found plugin or 0\n*/\nstatic struct st_mysql_client_plugin *\nfind_plugin(const char *name, int type)\n{\n  struct st_client_plugin_int *p;\n  DBUG_ENTER(\"find_plugin\");\n\n  DBUG_ASSERT(initialized);\n  DBUG_ASSERT(type >= 0 && type < MYSQL_CLIENT_MAX_PLUGINS);\n  if (type < 0 || type >= MYSQL_CLIENT_MAX_PLUGINS)\n    DBUG_RETURN(0);\n\n  for (p= plugin_list[type]; p; p= p->next)\n  {\n    if (strcmp(p->plugin->name, name) == 0)\n      DBUG_RETURN(p->plugin);\n  }\n  DBUG_RETURN(NULL);\n}\n\n/**\n  verifies the plugin and adds it to the list\n\n  @param mysql          MYSQL structure (for error reporting)\n  @param plugin         plugin to install\n  @param dlhandle       a handle to the shared object (returned by dlopen)\n                        or 0 if the plugin was not dynamically loaded\n  @param argc           number of arguments in the 'va_list args'\n  @param args           arguments passed to the plugin initialization function\n\n  @retval a pointer to an installed plugin or 0\n*/\nstatic struct st_mysql_client_plugin *\nadd_plugin(MYSQL *mysql, struct st_mysql_client_plugin *plugin, void *dlhandle,\n           int argc, va_list args)\n{\n  const char *errmsg;\n  struct st_client_plugin_int plugin_int, *p;\n  char errbuf[1024];\n  DBUG_ENTER(\"add_plugin\");\n\n  DBUG_ASSERT(initialized);\n\n  plugin_int.plugin= plugin;\n  plugin_int.dlhandle= dlhandle;\n\n  if (plugin->type >= MYSQL_CLIENT_MAX_PLUGINS)\n  {\n    errmsg= \"Unknown client plugin type\";\n    goto err1;\n  }\n\n  if (plugin->interface_version < plugin_version[plugin->type] ||\n      (plugin->interface_version >> 8) >\n       (plugin_version[plugin->type] >> 8))\n  {\n    errmsg= \"Incompatible client plugin interface\";\n    goto err1;\n  }\n\n  /* Call the plugin initialization function, if any */\n  if (plugin->init && plugin->init(errbuf, sizeof(errbuf), argc, args))\n  {\n    errmsg= errbuf;\n    goto err1;\n  }\n\n  p= (struct st_client_plugin_int *)\n    memdup_root(&mem_root, &plugin_int, sizeof(plugin_int));\n\n  if (!p)\n  {\n    errmsg= \"Out of memory\";\n    goto err2;\n  }\n\n  safe_mutex_assert_owner(&LOCK_load_client_plugin);\n\n  p->next= plugin_list[plugin->type];\n  plugin_list[plugin->type]= p;\n  net_clear_error(&mysql->net);\n\n  DBUG_RETURN(plugin);\n\nerr2:\n  if (plugin->deinit)\n    plugin->deinit();\nerr1:\n  set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n                           ER(CR_AUTH_PLUGIN_CANNOT_LOAD), plugin->name,\n                           errmsg);\n  if (dlhandle)\n    (void)dlclose(dlhandle);\n  DBUG_RETURN(NULL);\n}\n\n/**\n  Loads plugins which are specified in the environment variable\n  LIBMYSQL_PLUGINS.\n  \n  Multiple plugins must be separated by semicolon. This function doesn't\n  return or log an error.\n\n  The function is be called by mysql_client_plugin_init\n\n  @todo\n  Support extended syntax, passing parameters to plugins, for example\n  LIBMYSQL_PLUGINS=\"plugin1(param1,param2);plugin2;...\"\n  or\n  LIBMYSQL_PLUGINS=\"plugin1=int:param1,str:param2;plugin2;...\"\n*/\nstatic void load_env_plugins(MYSQL *mysql)\n{\n  char *plugs, *free_env, *s= getenv(\"LIBMYSQL_PLUGINS\");\n  DBUG_ENTER(\"load_env_plugins\");\n\n  /* no plugins to load */\n  if (!s)\n    DBUG_VOID_RETURN;\n\n  free_env= plugs= my_strdup(s, MYF(MY_WME));\n\n  do {\n    if ((s= strchr(plugs, ';')))\n      *s= '\\0';\n    mysql_load_plugin(mysql, plugs, -1, 0);\n    plugs= s + 1;\n  } while (s);\n\n  my_free(free_env);\n  DBUG_VOID_RETURN;\n}\n\n/********** extern functions to be used by libmysql *********************/\n\n/**\n  Initializes the client plugin layer.\n\n  This function must be called before any other client plugin function.\n\n  @retval 0    successful\n  @retval != 0 error occured\n*/\nint mysql_client_plugin_init()\n{\n  MYSQL mysql;\n  struct st_mysql_client_plugin **builtin;\n  va_list unused;\n  DBUG_ENTER(\"mysql_client_plugin_init\");\n  LINT_INIT_STRUCT(unused);\n\n  if (initialized)\n    DBUG_RETURN(0);\n\n  bzero(&mysql, sizeof(mysql)); /* dummy mysql for set_mysql_extended_error */\n\n  pthread_mutex_init(&LOCK_load_client_plugin, MY_MUTEX_INIT_SLOW);\n  init_alloc_root(&mem_root, 128, 128);\n\n  bzero(&plugin_list, sizeof(plugin_list));\n\n  initialized= 1;\n\n  pthread_mutex_lock(&LOCK_load_client_plugin);\n\n  for (builtin= mysql_client_builtins; *builtin; builtin++)\n    add_plugin(&mysql, *builtin, 0, 0, unused);\n\n  pthread_mutex_unlock(&LOCK_load_client_plugin);\n\n  load_env_plugins(&mysql);\n\n  DBUG_RETURN(0);\n}\n\n/**\n  Deinitializes the client plugin layer.\n\n  Unloades all client plugins and frees any associated resources.\n*/\nvoid mysql_client_plugin_deinit()\n{\n  int i;\n  struct st_client_plugin_int *p;\n  DBUG_ENTER(\"mysql_client_plugin_deinit\");\n\n  if (!initialized)\n    DBUG_VOID_RETURN;\n\n  for (i=0; i < MYSQL_CLIENT_MAX_PLUGINS; i++)\n    for (p= plugin_list[i]; p; p= p->next)\n    {\n      if (p->plugin->deinit)\n        p->plugin->deinit();\n      if (p->dlhandle)\n        (void)dlclose(p->dlhandle);\n    }\n\n  bzero(&plugin_list, sizeof(plugin_list));\n  initialized= 0;\n  free_root(&mem_root, MYF(0));\n  pthread_mutex_destroy(&LOCK_load_client_plugin);\n  DBUG_VOID_RETURN;\n}\n\n/************* public facing functions, for client consumption *********/\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *\nmysql_client_register_plugin(MYSQL *mysql,\n                             struct st_mysql_client_plugin *plugin)\n{\n  va_list unused;\n  DBUG_ENTER(\"mysql_client_register_plugin\");\n  LINT_INIT_STRUCT(unused);\n\n  if (is_not_initialized(mysql, plugin->name))\n    DBUG_RETURN(NULL);\n\n  pthread_mutex_lock(&LOCK_load_client_plugin);\n\n  /* make sure the plugin wasn't loaded meanwhile */\n  if (find_plugin(plugin->name, plugin->type))\n  {\n    set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD,\n                             unknown_sqlstate, ER(CR_AUTH_PLUGIN_CANNOT_LOAD),\n                             plugin->name, \"it is already loaded\");\n    plugin= NULL;\n  }\n  else\n    plugin= add_plugin(mysql, plugin, 0, 0, unused);\n\n  pthread_mutex_unlock(&LOCK_load_client_plugin);\n  DBUG_RETURN(plugin);\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *\nmysql_load_plugin_v(MYSQL *mysql, const char *name, int type,\n                    int argc, va_list args)\n{\n  const char *errmsg;\n  char dlpath[FN_REFLEN+1];\n  void *sym, *dlhandle;\n  struct st_mysql_client_plugin *plugin;\n  DBUG_ENTER(\"mysql_load_plugin_v\");\n\n  DBUG_PRINT (\"entry\", (\"name=%s type=%d int argc=%d\", name, type, argc));\n  if (is_not_initialized(mysql, name))\n  {\n    DBUG_PRINT (\"leave\", (\"mysql not initialized\"));\n    DBUG_RETURN (NULL);\n  }\n\n  pthread_mutex_lock(&LOCK_load_client_plugin);\n\n  /* make sure the plugin wasn't loaded meanwhile */\n  if (type >= 0 && find_plugin(name, type))\n  {\n    errmsg= \"it is already loaded\";\n    goto err;\n  }\n\n  /* Compile dll path */\n  strxnmov(dlpath, sizeof(dlpath) - 1,\n           mysql->options.extension && mysql->options.extension->plugin_dir ?\n           mysql->options.extension->plugin_dir : PLUGINDIR, \"/\",\n           name, SO_EXT, NullS);\n   \n  DBUG_PRINT (\"info\", (\"dlopeninig %s\", dlpath));\n  /* Open new dll handle */\n  if (!(dlhandle= dlopen(dlpath, RTLD_NOW)))\n  {\n    DBUG_PRINT (\"info\", (\"failed to dlopen\"));\n    errmsg= dlerror();\n    goto err;\n  }\n\n  if (!(sym= dlsym(dlhandle, plugin_declarations_sym)))\n  {\n    errmsg= \"not a plugin\";\n    (void)dlclose(dlhandle);\n    goto err;\n  }\n\n  plugin= (struct st_mysql_client_plugin*)sym;\n\n  if (type >=0 && type != plugin->type)\n  {\n    errmsg= \"type mismatch\";\n    goto err;\n  }\n\n  if (strcmp(name, plugin->name))\n  {\n    errmsg= \"name mismatch\";\n    goto err;\n  }\n\n  if (type < 0 && find_plugin(name, plugin->type))\n  {\n    errmsg= \"it is already loaded\";\n    goto err;\n  }\n\n  plugin= add_plugin(mysql, plugin, dlhandle, argc, args);\n\n  pthread_mutex_unlock(&LOCK_load_client_plugin);\n\n  DBUG_PRINT (\"leave\", (\"plugin loaded ok\"));\n  DBUG_RETURN (plugin);\n\nerr:\n  pthread_mutex_unlock(&LOCK_load_client_plugin);\n  DBUG_PRINT (\"leave\", (\"plugin load error : %s\", errmsg));\n  set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n                           ER(CR_AUTH_PLUGIN_CANNOT_LOAD), name, errmsg);\n  DBUG_RETURN (NULL);\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *\nmysql_load_plugin(MYSQL *mysql, const char *name, int type, int argc, ...)\n{\n  struct st_mysql_client_plugin *p;\n  va_list args;\n  DBUG_ENTER(\"mysql_load_plugin\");\n\n  va_start(args, argc);\n  p= mysql_load_plugin_v(mysql, name, type, argc, args);\n  va_end(args);\n  DBUG_RETURN(p);\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *\nmysql_client_find_plugin(MYSQL *mysql, const char *name, int type)\n{\n  struct st_mysql_client_plugin *p;\n  DBUG_ENTER(\"mysql_client_find_plugin\");\n\n  DBUG_PRINT (\"entry\", (\"name=%s, type=%d\", name, type));\n  if (is_not_initialized(mysql, name))\n    DBUG_RETURN (NULL);\n\n  if (type < 0 || type >= MYSQL_CLIENT_MAX_PLUGINS)\n  {\n    set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n                             ER(CR_AUTH_PLUGIN_CANNOT_LOAD), name,\n                             \"invalid type\");\n  }\n\n  if ((p= find_plugin(name, type)))\n  {\n    DBUG_PRINT (\"leave\", (\"found %p\", p));\n    DBUG_RETURN (p);\n  }\n\n  /* not found, load it */\n  p= mysql_load_plugin(mysql, name, type, 0);\n  DBUG_PRINT (\"leave\", (\"loaded %p\", p));\n  DBUG_RETURN (p);\n}\n\n\n/* see <mysql/client_plugin.h> for a full description */\nint mysql_plugin_options(struct st_mysql_client_plugin *plugin,\n                                 const char *option,\n                                 const void *value)\n{\n  DBUG_ENTER(\"mysql_plugin_options\");\n  /* does the plugin support options call? */\n  if (!plugin || !plugin->options)\n    DBUG_RETURN(1);\n  DBUG_RETURN(plugin->options(option, value));\n}\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/build-aux/ltmain.sh": "# Generated from ltmain.m4sh.\n\n# ltmain.sh (GNU libtool) 2.2.6\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2007 2008 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#     --config             show all configuration variables\n#     --debug              enable verbose shell tracing\n# -n, --dry-run            display commands without modifying any files\n#     --features           display basic configuration information and exit\n#     --mode=MODE          use operation mode MODE\n#     --preserve-dup-deps  don't remove duplicate dependency libraries\n#     --quiet, --silent    don't print informational messages\n#     --tag=TAG            use configuration variables from tag TAG\n# -v, --verbose            print informational messages (default)\n#     --version            print version information\n# -h, --help               print short or long help message\n#\n# MODE must be one of the following:\n#\n#       clean              remove files from the build directory\n#       compile            compile a source file into a libtool object\n#       execute            automatically set library path, then run a program\n#       finish             complete the installation of libtool libraries\n#       install            install libraries or executables\n#       link               create a library or an executable\n#       uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#       host-triplet:\t$host\n#       shell:\t\t$SHELL\n#       compiler:\t\t$LTCC\n#       compiler flags:\t\t$LTCFLAGS\n#       linker:\t\t$LD (gnu? $with_gnu_ld)\n#       $progname:\t\t(GNU libtool) 2.2.6\n#       automake:\t\t$automake_version\n#       autoconf:\t\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n\nPROGRAM=ltmain.sh\nPACKAGE=libtool\nVERSION=2.2.6\nTIMESTAMP=\"\"\npackage_revision=1.3012\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# NLS nuisances: We save the old values to restore during execute mode.\n# Only set LANG and LC_ALL to C if already set.\n# These must not be set unconditionally because not all systems understand\n# e.g. LANG=C (notably SCO).\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\n\n$lt_unset CDPATH\n\n\n\n\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"echo\"}\n: ${EGREP=\"/usr/bin/grep -E\"}\n: ${FGREP=\"/usr/bin/grep -F\"}\n: ${GREP=\"/usr/bin/grep\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SED=\"/opt/local/bin/gsed\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n  # Extract subdirectory from the argument.\n  func_dirname_result=`$ECHO \"X${1}\" | $Xsed -e \"$dirname\"`\n  if test \"X$func_dirname_result\" = \"X${1}\"; then\n    func_dirname_result=\"${3}\"\n  else\n    func_dirname_result=\"$func_dirname_result${2}\"\n  fi\n  func_basename_result=`$ECHO \"X${1}\" | $Xsed -e \"$basename\"`\n}\n\n# Generated shell functions inserted here.\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n# The name of this program:\n# In the unlikely event $progname began with a '-', it would play havoc with\n# func_echo (imagine progname=-n), so we prepend ./ in that case:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\ncase $progname in\n  -*) progname=./$progname ;;\nesac\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=:\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname${mode+: }$mode: $*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname${mode+: }$mode: \"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname${mode+: }$mode: warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"X$my_directory_path\" | $Xsed -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"X$my_dir_list\" | $Xsed -e 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"X$my_tmpdir\" | $Xsed\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"X$1\" | $Xsed -e \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"X$1\" | $Xsed \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $SED -n '/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $SED -n '/^# Usage:/,/# -h/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    $ECHO\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(automake --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(autoconf --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n     }' < \"$progpath\"\n    exit $?\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    func_error \"missing argument for $1\"\n    exit_cmd=exit\n}\n\nexit_cmd=:\n\n\n\n\n\n# Check that we have a working $ECHO.\nif test \"X$1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X$1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t'; then\n  # Yippee, $ECHO works!\n  :\nelse\n  # Restart under the correct shell, and then maybe $ECHO will work.\n  exec $SHELL \"$progpath\" --no-reexec ${1+\"$@\"}\nfi\n\nif test \"X$1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<EOF\n$*\nEOF\n  exit $EXIT_SUCCESS\nfi\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\n# $mode is unset\nnonopt=\nexecute_dlfiles=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\nopt_dry_run=false\nopt_duplicate_deps=false\nopt_silent=false\nopt_debug=:\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    $ECHO \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      $ECHO \"enable shared libraries\"\n    else\n      $ECHO \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      $ECHO \"enable static libraries\"\n    else\n      $ECHO \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# Parse options once, thoroughly.  This comes as soon as possible in\n# the script to make things like `libtool --version' happen quickly.\n{\n\n  # Shorthand for --mode=foo, only valid as the first argument\n  case $1 in\n  clean|clea|cle|cl)\n    shift; set dummy --mode clean ${1+\"$@\"}; shift\n    ;;\n  compile|compil|compi|comp|com|co|c)\n    shift; set dummy --mode compile ${1+\"$@\"}; shift\n    ;;\n  execute|execut|execu|exec|exe|ex|e)\n    shift; set dummy --mode execute ${1+\"$@\"}; shift\n    ;;\n  finish|finis|fini|fin|fi|f)\n    shift; set dummy --mode finish ${1+\"$@\"}; shift\n    ;;\n  install|instal|insta|inst|ins|in|i)\n    shift; set dummy --mode install ${1+\"$@\"}; shift\n    ;;\n  link|lin|li|l)\n    shift; set dummy --mode link ${1+\"$@\"}; shift\n    ;;\n  uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n    shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n    ;;\n  esac\n\n  # Parse non-mode specific arguments:\n  while test \"$#\" -gt 0; do\n    opt=\"$1\"\n    shift\n\n    case $opt in\n      --config)\t\tfunc_config\t\t\t\t\t;;\n\n      --debug)\t\tpreserve_args=\"$preserve_args $opt\"\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\topt_debug='set -x'\n\t\t\t$opt_debug\n\t\t\t;;\n\n      -dlopen)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\texecute_dlfiles=\"$execute_dlfiles $1\"\n\t\t\tshift\n\t\t\t;;\n\n      --dry-run | -n)\topt_dry_run=:\t\t\t\t\t;;\n      --features)       func_features\t\t\t\t\t;;\n      --finish)\t\tmode=\"finish\"\t\t\t\t\t;;\n\n      --mode)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\tcase $1 in\n\t\t\t  # Valid mode arguments:\n\t\t\t  clean)\t;;\n\t\t\t  compile)\t;;\n\t\t\t  execute)\t;;\n\t\t\t  finish)\t;;\n\t\t\t  install)\t;;\n\t\t\t  link)\t\t;;\n\t\t\t  relink)\t;;\n\t\t\t  uninstall)\t;;\n\n\t\t\t  # Catch anything else as an error\n\t\t\t  *) func_error \"invalid argument for $opt\"\n\t\t\t     exit_cmd=exit\n\t\t\t     break\n\t\t\t     ;;\n\t\t        esac\n\n\t\t\tmode=\"$1\"\n\t\t\tshift\n\t\t\t;;\n\n      --preserve-dup-deps)\n\t\t\topt_duplicate_deps=:\t\t\t\t;;\n\n      --quiet|--silent)\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_silent=:\n\t\t\t;;\n\n      --verbose| -v)\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_silent=false\n\t\t\t;;\n\n      --tag)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\tpreserve_args=\"$preserve_args $opt $1\"\n\t\t\tfunc_enable_tag \"$1\"\t# tagname is set here\n\t\t\tshift\n\t\t\t;;\n\n      # Separate optargs to long options:\n      -dlopen=*|--mode=*|--tag=*)\n\t\t\tfunc_opt_split \"$opt\"\n\t\t\tset dummy \"$func_opt_split_opt\" \"$func_opt_split_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t\t;;\n      --help)\t\topt_help=:\t\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t\t;;\n\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\"\t;;\n\n      *)\t\tnonopt=\"$opt\"\n\t\t\tbreak\n\t\t\t;;\n    esac\n  done\n\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc*)\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_duplicate_deps\n      ;;\n  esac\n\n  # Having warned about all mis-specified options, bail out if\n  # anything was wrong.\n  $exit_cmd $EXIT_FAILURE\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n$opt_help || {\n  # Sanity checks first:\n  func_check_version_match\n\n  if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n    func_fatal_configuration \"not configured to build any kind of library\"\n  fi\n\n  test -z \"$mode\" && func_fatal_error \"error: you must specify a MODE.\"\n\n\n  # Darwin sucks\n  eval std_shrext=\\\"$shrext_cmds\\\"\n\n\n  # Only execute mode is allowed to have -dlopen flags.\n  if test -n \"$execute_dlfiles\" && test \"$mode\" != execute; then\n    func_error \"unrecognized option \\`-dlopen'\"\n    $ECHO \"$help\" 1>&2\n    exit $EXIT_FAILURE\n  fi\n\n  # Change the help message to a mode-specific one.\n  generic_help=\"$help\"\n  help=\"Try \\`$progname --help --mode=$mode' for more information.\"\n}\n\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_ltwrapper_scriptname_result=\"\"\n    if func_ltwrapper_executable_p \"$1\"; then\n\tfunc_dirname_and_basename \"$1\" \"\" \".\"\n\tfunc_stripname '' '.exe' \"$func_basename_result\"\n\tfunc_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n    fi\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval cmd=\\\"$cmd\\\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n        func_quote_for_eval \"$arg\"\n\tCC_quoted=\"$CC_quoted $func_quote_for_eval_result\"\n      done\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" `$ECHO $CC` \"* | \"`$ECHO $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$ECHO $CC_quoted` \"* | \"`$ECHO $CC_quoted` \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_quote_for_eval \"$arg\"\n\t      CC_quoted=\"$CC_quoted $func_quote_for_eval_result\"\n\t    done\n\t    case \"$@ \" in\n\t      \" $CC \"* | \"$CC \"* | \" `$ECHO $CC` \"* | \"`$ECHO $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$ECHO $CC_quoted` \"* | \"`$ECHO $CC_quoted` \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          pie_flag=\"$pie_flag $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  later=\"$later $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_quote_for_eval \"$arg\"\n\t    lastarg=\"$lastarg $func_quote_for_eval_result\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  base_compile=\"$base_compile $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_quote_for_eval \"$lastarg\"\n      base_compile=\"$base_compile $func_quote_for_eval_result\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.obj | *.sx)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"X$srcfile\" | $Xsed -e 's%^.*/%%' -e 's%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      removelist=\"$removelist $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    removelist=\"$removelist $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    if test -n \"$fix_srcfile_path\"; then\n      eval srcfile=\\\"$fix_srcfile_path\\\"\n    fi\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tcommand=\"$command -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tcommand=\"$command -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      command=\"$command$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\ntest \"$mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to building PIC objects only\n  -prefer-non-pic   try to building non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$mode'\"\n        ;;\n    esac\n\n    $ECHO\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n\n    exit $?\n}\n\n  # Now that we've collected a possible --mode arg, show help if necessary\n  $opt_help && func_mode_help\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $execute_dlfiles; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  dir=\"$dir/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -*) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_quote_for_eval \"$file\"\n      args=\"$args $func_quote_for_eval_result\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\t$ECHO \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libdirs=\"$nonopt\"\n    admincmds=\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for dir\n      do\n\tlibdirs=\"$libdirs $dir\"\n      done\n\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || admincmds=\"$admincmds\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    $ECHO \"X----------------------------------------------------------------------\" | $Xsed\n    $ECHO \"Libraries have been installed in:\"\n    for libdir in $libdirs; do\n      $ECHO \"   $libdir\"\n    done\n    $ECHO\n    $ECHO \"If you ever happen to want to link against installed libraries\"\n    $ECHO \"in a given directory, LIBDIR, you must either use libtool, and\"\n    $ECHO \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n    $ECHO \"flag during linking and do at least one of the following:\"\n    if test -n \"$shlibpath_var\"; then\n      $ECHO \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n      $ECHO \"     during execution\"\n    fi\n    if test -n \"$runpath_var\"; then\n      $ECHO \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n      $ECHO \"     during linking\"\n    fi\n    if test -n \"$hardcode_libdir_flag_spec\"; then\n      libdir=LIBDIR\n      eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n      $ECHO \"   - use the \\`$flag' linker flag\"\n    fi\n    if test -n \"$admincmds\"; then\n      $ECHO \"   - have your system administrator run these commands:$admincmds\"\n    fi\n    if test -f /etc/ld.so.conf; then\n      $ECHO \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n    fi\n    $ECHO\n\n    $ECHO \"See any operating system documentation about shared libraries for\"\n    case $host in\n      solaris2.[6789]|solaris2.1[0-9])\n        $ECHO \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t$ECHO \"pages.\"\n\t;;\n      *)\n        $ECHO \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n        ;;\n    esac\n    $ECHO \"X----------------------------------------------------------------------\" | $Xsed\n    exit $EXIT_SUCCESS\n}\n\ntest \"$mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       $ECHO \"X$nonopt\" | $GREP shtool >/dev/null; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    install_prog=\"$install_prog$func_quote_for_eval_result\"\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    for arg\n    do\n      if test -n \"$dest\"; then\n\tfiles=\"$files $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tcase \" $install_prog \" in\n\t*[\\\\\\ /]cp\\ *) ;;\n\t*) prev=$arg ;;\n\tesac\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      install_prog=\"$install_prog $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tstaticlibs=\"$staticlibs $file\"\n\t;;\n\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) current_libdirs=\"$current_libdirs $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) future_libdirs=\"$future_libdirs $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tdir=\"$dir$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"X$destdir\" | $Xsed -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && staticlibs=\"$staticlibs $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"X$lib\" | $Xsed -e 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"X$relink_command\" | $Xsed -e 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"X$file$stripped_ext\" | $Xsed -e \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"X$objs$old_deplibs\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_verbose \"extracting global C symbols from \\`$progfile'\"\n\t    $opt_dry_run || eval \"$NM $progfile | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n\t  $opt_dry_run || {\n\t    eval '$ECHO \": $name \" >> \"$nlist\"'\n\t    eval \"$NM $dlprefile 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t  }\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    $ECHO '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\n\"\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* )\n\t    $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\n/* DATA imports from DLLs on WIN32 con't be const, because\n   runtime relocations are performed -- see ld's documentation\n   on pseudo-relocs.  */\"\n\t    lt_dlsym_const= ;;\n\t  *osf5*)\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n/* This system does not cope well with relocations in const data */\"\n\t    lt_dlsym_const= ;;\n\t  *)\n\t    lt_dlsym_const=const ;;\n\t  esac\n\n\t  $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\nextern $lt_dlsym_const lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\n$lt_dlsym_const lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) symtab_cflags=\"$symtab_cflags $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format pe-i386(.*architecture: i386)?' >/dev/null ; then\n      win32_nmres=`eval $NM -f posix -A $1 |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" 'exit $?'\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n\n# func_emit_wrapper_part1 [arg=no]\n#\n# Emit the first part of a libtool wrapper script on stdout.\n# For more information, see the description associated with\n# func_emit_wrapper(), below.\nfunc_emit_wrapper_part1 ()\n{\n\tfunc_emit_wrapper_part1_arg1=no\n\tif test -n \"$1\" ; then\n\t  func_emit_wrapper_part1_arg1=$1\n\tfi\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed='${SED} -e 1s/^X//'\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    ECHO=\\\"$qecho\\\"\n    file=\\\"\\$0\\\"\n    # Make sure echo works.\n    if test \\\"X\\$1\\\" = X--no-reexec; then\n      # Discard the --no-reexec flag, and continue.\n      shift\n    elif test \\\"X\\`{ \\$ECHO '\\t'; } 2>/dev/null\\`\\\" = 'X\\t'; then\n      # Yippee, \\$ECHO works!\n      :\n    else\n      # Restart under the correct shell, and then maybe \\$ECHO will work.\n      exec $SHELL \\\"\\$0\\\" --no-reexec \\${1+\\\"\\$@\\\"}\n    fi\n  fi\\\n\"\n\t$ECHO \"\\\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"X\\$file\\\" | \\$Xsed -e 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | ${SED} -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"X\\$file\\\" | \\$Xsed -e 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"X\\$file\\\" | \\$Xsed -e 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | ${SED} -n 's/.*-> //p'\\`\n  done\n\"\n}\n# end: func_emit_wrapper_part1\n\n# func_emit_wrapper_part2 [arg=no]\n#\n# Emit the second part of a libtool wrapper script on stdout.\n# For more information, see the description associated with\n# func_emit_wrapper(), below.\nfunc_emit_wrapper_part2 ()\n{\n\tfunc_emit_wrapper_part2_arg1=no\n\tif test -n \"$1\" ; then\n\t  func_emit_wrapper_part2_arg1=$1\n\tfi\n\n\t$ECHO \"\\\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_part2_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"X\\$thisdir\\\" | \\$Xsed -e 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"X\\$$shlibpath_var\\\" | \\$Xsed -e 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t# fixup the dll searchpath if we need to.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n\"\n\tcase $host in\n\t# Backslashes separate directories on plain windows\n\t*-*-mingw | *-*-os2* | *-cegcc*)\n\t  $ECHO \"\\\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\n\t*)\n\t  $ECHO \"\\\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\tesac\n\t$ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    $ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n# end: func_emit_wrapper_part2\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=no\n\tif test -n \"$1\" ; then\n\t  func_emit_wrapper_arg1=$1\n\tfi\n\n\t# split this up so that func_emit_cwrapperexe_src\n\t# can call each part independently.\n\tfunc_emit_wrapper_part1 \"${func_emit_wrapper_arg1}\"\n\tfunc_emit_wrapper_part2 \"${func_emit_wrapper_arg1}\"\n}\n\n\n# func_to_host_path arg\n#\n# Convert paths to host format when used with build tools.\n# Intended for use with \"native\" mingw (where libtool itself\n# is running under the msys shell), or in the following cross-\n# build environments:\n#    $build          $host\n#    mingw (msys)    mingw  [e.g. native]\n#    cygwin          mingw\n#    *nix + wine     mingw\n# where wine is equipped with the `winepath' executable.\n# In the native mingw case, the (msys) shell automatically\n# converts paths for any non-msys applications it launches,\n# but that facility isn't available from inside the cwrapper.\n# Similar accommodations are necessary for $host mingw and\n# $build cygwin.  Calling this function does no harm for other\n# $host/$build combinations not listed above.\n#\n# ARG is the path (on $build) that should be converted to\n# the proper representation for $host. The result is stored\n# in $func_to_host_path_result.\nfunc_to_host_path ()\n{\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\" ; then\n    case $host in\n      *mingw* )\n        lt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n        case $build in\n          *mingw* ) # actually, msys\n            # awkward: cmd appends spaces to result\n            lt_sed_strip_trailing_spaces=\"s/[ ]*\\$//\"\n            func_to_host_path_tmp1=`( cmd //c echo \"$1\" |\\\n              $SED -e \"$lt_sed_strip_trailing_spaces\" ) 2>/dev/null || echo \"\"`\n            func_to_host_path_result=`echo \"$func_to_host_path_tmp1\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          *cygwin* )\n            func_to_host_path_tmp1=`cygpath -w \"$1\"`\n            func_to_host_path_result=`echo \"$func_to_host_path_tmp1\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          * )\n            # Unfortunately, winepath does not exit with a non-zero\n            # error code, so we are forced to check the contents of\n            # stdout. On the other hand, if the command is not\n            # found, the shell will set an exit code of 127 and print\n            # *an error message* to stdout. So we must check for both\n            # error code of zero AND non-empty stdout, which explains\n            # the odd construction:\n            func_to_host_path_tmp1=`winepath -w \"$1\" 2>/dev/null`\n            if test \"$?\" -eq 0 && test -n \"${func_to_host_path_tmp1}\"; then\n              func_to_host_path_result=`echo \"$func_to_host_path_tmp1\" |\\\n                $SED -e \"$lt_sed_naive_backslashify\"`\n            else\n              # Allow warning below.\n              func_to_host_path_result=\"\"\n            fi\n            ;;\n        esac\n        if test -z \"$func_to_host_path_result\" ; then\n          func_error \"Could not determine host path corresponding to\"\n          func_error \"  '$1'\"\n          func_error \"Continuing, but uninstalled executables may not work.\"\n          # Fallback:\n          func_to_host_path_result=\"$1\"\n        fi\n        ;;\n    esac\n  fi\n}\n# end: func_to_host_path\n\n# func_to_host_pathlist arg\n#\n# Convert pathlists to host format when used with build tools.\n# See func_to_host_path(), above. This function supports the\n# following $build/$host combinations (but does no harm for\n# combinations not listed here):\n#    $build          $host\n#    mingw (msys)    mingw  [e.g. native]\n#    cygwin          mingw\n#    *nix + wine     mingw\n#\n# Path separators are also converted from $build format to\n# $host format. If ARG begins or ends with a path separator\n# character, it is preserved (but converted to $host format)\n# on output.\n#\n# ARG is a pathlist (on $build) that should be converted to\n# the proper representation on $host. The result is stored\n# in $func_to_host_pathlist_result.\nfunc_to_host_pathlist ()\n{\n  func_to_host_pathlist_result=\"$1\"\n  if test -n \"$1\" ; then\n    case $host in\n      *mingw* )\n        lt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n        # Remove leading and trailing path separator characters from\n        # ARG. msys behavior is inconsistent here, cygpath turns them\n        # into '.;' and ';.', and winepath ignores them completely.\n        func_to_host_pathlist_tmp2=\"$1\"\n        # Once set for this call, this variable should not be\n        # reassigned. It is used in tha fallback case.\n        func_to_host_pathlist_tmp1=`echo \"$func_to_host_pathlist_tmp2\" |\\\n          $SED -e 's|^:*||' -e 's|:*$||'`\n        case $build in\n          *mingw* ) # Actually, msys.\n            # Awkward: cmd appends spaces to result.\n            lt_sed_strip_trailing_spaces=\"s/[ ]*\\$//\"\n            func_to_host_pathlist_tmp2=`( cmd //c echo \"$func_to_host_pathlist_tmp1\" |\\\n              $SED -e \"$lt_sed_strip_trailing_spaces\" ) 2>/dev/null || echo \"\"`\n            func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp2\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          *cygwin* )\n            func_to_host_pathlist_tmp2=`cygpath -w -p \"$func_to_host_pathlist_tmp1\"`\n            func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp2\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          * )\n            # unfortunately, winepath doesn't convert pathlists\n            func_to_host_pathlist_result=\"\"\n            func_to_host_pathlist_oldIFS=$IFS\n            IFS=:\n            for func_to_host_pathlist_f in $func_to_host_pathlist_tmp1 ; do\n              IFS=$func_to_host_pathlist_oldIFS\n              if test -n \"$func_to_host_pathlist_f\" ; then\n                func_to_host_path \"$func_to_host_pathlist_f\"\n                if test -n \"$func_to_host_path_result\" ; then\n                  if test -z \"$func_to_host_pathlist_result\" ; then\n                    func_to_host_pathlist_result=\"$func_to_host_path_result\"\n                  else\n                    func_to_host_pathlist_result=\"$func_to_host_pathlist_result;$func_to_host_path_result\"\n                  fi\n                fi\n              fi\n              IFS=:\n            done\n            IFS=$func_to_host_pathlist_oldIFS\n            ;;\n        esac\n        if test -z \"$func_to_host_pathlist_result\" ; then\n          func_error \"Could not determine the host path(s) corresponding to\"\n          func_error \"  '$1'\"\n          func_error \"Continuing, but uninstalled executables may not work.\"\n          # Fallback. This may break if $1 contains DOS-style drive\n          # specifications. The fix is not to complicate the expression\n          # below, but for the user to provide a working wine installation\n          # with winepath so that path translation in the cross-to-mingw\n          # case works properly.\n          lt_replace_pathsep_nix_to_dos=\"s|:|;|g\"\n          func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp1\" |\\\n            $SED -e \"$lt_replace_pathsep_nix_to_dos\"`\n        fi\n        # Now, add the leading and trailing path separators back\n        case \"$1\" in\n          :* ) func_to_host_pathlist_result=\";$func_to_host_pathlist_result\"\n            ;;\n        esac\n        case \"$1\" in\n          *: ) func_to_host_pathlist_result=\"$func_to_host_pathlist_result;\"\n            ;;\n        esac\n        ;;\n    esac\n  fi\n}\n# end: func_to_host_pathlist\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n\n   Currently, it simply execs the wrapper *script* \"$SHELL $output\",\n   but could eventually absorb all of the scripts functionality and\n   exec $objdir/$outputname directly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n# define setmode _setmode\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n#  define HAVE_SETENV\n#  ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n#  endif\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n#ifdef _MSC_VER\n# define S_IXUSR _S_IEXEC\n# define stat _stat\n# ifndef _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifdef __CYGWIN__\n# define FOPEN_WB \"wb\"\n#endif\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#undef LTWRAPPER_DEBUGPRINTF\n#if defined DEBUGWRAPPER\n# define LTWRAPPER_DEBUGPRINTF(args) ltwrapper_debugprintf args\nstatic void\nltwrapper_debugprintf (const char *fmt, ...)\n{\n    va_list args;\n    va_start (args, fmt);\n    (void) vfprintf (stderr, fmt, args);\n    va_end (args);\n}\n#else\n# define LTWRAPPER_DEBUGPRINTF(args)\n#endif\n\nconst char *program_name = NULL;\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_fatal (const char *message, ...);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_opt_process_env_set (const char *arg);\nvoid lt_opt_process_env_prepend (const char *arg);\nvoid lt_opt_process_env_append (const char *arg);\nint lt_split_name_value (const char *arg, char** name, char** value);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\n\nstatic const char *script_text_part1 =\nEOF\n\n\t    func_emit_wrapper_part1 yes |\n\t        $SED -e 's/\\([\\\\\"]\\)/\\\\\\1/g' \\\n\t             -e 's/^/  \"/' -e 's/$/\\\\n\"/'\n\t    echo \";\"\n\t    cat <<EOF\n\nstatic const char *script_text_part2 =\nEOF\n\t    func_emit_wrapper_part2 yes |\n\t        $SED -e 's/\\([\\\\\"]\\)/\\\\\\1/g' \\\n\t             -e 's/^/  \"/' -e 's/$/\\\\n\"/'\n\t    echo \";\"\n\n\t    cat <<EOF\nconst char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_pathlist \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_pathlist_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_pathlist \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_pathlist_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n#define LTWRAPPER_OPTION_PREFIX_LENGTH  5\n\nstatic const size_t opt_prefix_len         = LTWRAPPER_OPTION_PREFIX_LENGTH;\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\n\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\n\nstatic const size_t env_set_opt_len     = LTWRAPPER_OPTION_PREFIX_LENGTH + 7;\nstatic const char *env_set_opt          = LTWRAPPER_OPTION_PREFIX \"env-set\";\n  /* argument is putenv-style \"foo=bar\", value of foo is set to bar */\n\nstatic const size_t env_prepend_opt_len = LTWRAPPER_OPTION_PREFIX_LENGTH + 11;\nstatic const char *env_prepend_opt      = LTWRAPPER_OPTION_PREFIX \"env-prepend\";\n  /* argument is putenv-style \"foo=bar\", new value of foo is bar${foo} */\n\nstatic const size_t env_append_opt_len  = LTWRAPPER_OPTION_PREFIX_LENGTH + 10;\nstatic const char *env_append_opt       = LTWRAPPER_OPTION_PREFIX \"env-append\";\n  /* argument is putenv-style \"foo=bar\", new value of foo is ${foo}bar */\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  LTWRAPPER_DEBUGPRINTF ((\"(main) argv[0]      : %s\\n\", argv[0]));\n  LTWRAPPER_DEBUGPRINTF ((\"(main) program_name : %s\\n\", program_name));\n\n  /* very simple arg parsing; don't want to rely on getopt */\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  printf (\"%s\", script_text_part1);\n\t  printf (\"%s\", script_text_part2);\n\t  return 0;\n\t}\n    }\n\n  newargz = XMALLOC (char *, argc + 1);\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (\"Couldn't find %s\", argv[0]);\n  LTWRAPPER_DEBUGPRINTF ((\"(main) found exe (before symlink chase) at : %s\\n\",\n\t\t\t  tmp_pathspec));\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  LTWRAPPER_DEBUGPRINTF ((\"(main) found exe (after symlink chase) at : %s\\n\",\n\t\t\t  actual_cwrapper_path));\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup( base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(main) libtool target name: %s\\n\",\n\t\t\t  target_name));\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strncmp (argv[i], env_set_opt, env_set_opt_len) == 0)\n        {\n          if (argv[i][env_set_opt_len] == '=')\n            {\n              const char *p = argv[i] + env_set_opt_len + 1;\n              lt_opt_process_env_set (p);\n            }\n          else if (argv[i][env_set_opt_len] == '\\0' && i + 1 < argc)\n            {\n              lt_opt_process_env_set (argv[++i]); /* don't copy */\n            }\n          else\n            lt_fatal (\"%s missing required argument\", env_set_opt);\n          continue;\n        }\n      if (strncmp (argv[i], env_prepend_opt, env_prepend_opt_len) == 0)\n        {\n          if (argv[i][env_prepend_opt_len] == '=')\n            {\n              const char *p = argv[i] + env_prepend_opt_len + 1;\n              lt_opt_process_env_prepend (p);\n            }\n          else if (argv[i][env_prepend_opt_len] == '\\0' && i + 1 < argc)\n            {\n              lt_opt_process_env_prepend (argv[++i]); /* don't copy */\n            }\n          else\n            lt_fatal (\"%s missing required argument\", env_prepend_opt);\n          continue;\n        }\n      if (strncmp (argv[i], env_append_opt, env_append_opt_len) == 0)\n        {\n          if (argv[i][env_append_opt_len] == '=')\n            {\n              const char *p = argv[i] + env_append_opt_len + 1;\n              lt_opt_process_env_append (p);\n            }\n          else if (argv[i][env_append_opt_len] == '\\0' && i + 1 < argc)\n            {\n              lt_opt_process_env_append (argv[++i]); /* don't copy */\n            }\n          else\n            lt_fatal (\"%s missing required argument\", env_append_opt);\n          continue;\n        }\n      if (strncmp (argv[i], ltwrapper_option_prefix, opt_prefix_len) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (\"Unrecognized option in %s namespace: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\n  LTWRAPPER_DEBUGPRINTF     ((\"(main) lt_argv_zero : %s\\n\", (lt_argv_zero ? lt_argv_zero : \"<NULL>\")));\n  for (i = 0; i < newargc; i++)\n    {\n      LTWRAPPER_DEBUGPRINTF ((\"(main) newargz[%d]   : %s\\n\", i, (newargz[i] ? newargz[i] : \"<NULL>\")));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      LTWRAPPER_DEBUGPRINTF ((\"(main) failed to launch target \\\"%s\\\": errno = %d\\n\", lt_argv_zero, errno));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (\"Memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(check_executable)  : %s\\n\",\n\t\t\t  path ? (*path ? path : \"EMPTY!\") : \"NULL!\"));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(make_executable)   : %s\\n\",\n\t\t\t  path ? (*path ? path : \"EMPTY!\") : \"NULL!\"));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(find_executable)   : %s\\n\",\n\t\t\t  wrapper ? (*wrapper ? wrapper : \"EMPTY!\") : \"NULL!\"));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (\"getcwd failed\");\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (\"getcwd failed\");\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      LTWRAPPER_DEBUGPRINTF ((\"checking path component for symlinks: %s\\n\",\n\t\t\t      tmp_pathspec));\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  char *errstr = strerror (errno);\n\t  lt_fatal (\"Error accessing file %s (%s)\", tmp_pathspec, errstr);\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (\"Could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nstatic void\nlt_error_core (int exit_status, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s: %s: \", program_name, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_setenv) setting '%s' to '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nint\nlt_split_name_value (const char *arg, char** name, char** value)\n{\n  const char *p;\n  int len;\n  if (!arg || !*arg)\n    return 1;\n\n  p = strchr (arg, (int)'=');\n\n  if (!p)\n    return 1;\n\n  *value = xstrdup (++p);\n\n  len = strlen (arg) - strlen (*value);\n  *name = XMALLOC (char, len);\n  strncpy (*name, arg, len-1);\n  (*name)[len - 1] = '\\0';\n\n  return 0;\n}\n\nvoid\nlt_opt_process_env_set (const char *arg)\n{\n  char *name = NULL;\n  char *value = NULL;\n\n  if (lt_split_name_value (arg, &name, &value) != 0)\n    {\n      XFREE (name);\n      XFREE (value);\n      lt_fatal (\"bad argument for %s: '%s'\", env_set_opt, arg);\n    }\n\n  lt_setenv (name, value);\n  XFREE (name);\n  XFREE (value);\n}\n\nvoid\nlt_opt_process_env_prepend (const char *arg)\n{\n  char *name = NULL;\n  char *value = NULL;\n  char *new_value = NULL;\n\n  if (lt_split_name_value (arg, &name, &value) != 0)\n    {\n      XFREE (name);\n      XFREE (value);\n      lt_fatal (\"bad argument for %s: '%s'\", env_prepend_opt, arg);\n    }\n\n  new_value = lt_extend_str (getenv (name), value, 0);\n  lt_setenv (name, new_value);\n  XFREE (new_value);\n  XFREE (name);\n  XFREE (value);\n}\n\nvoid\nlt_opt_process_env_append (const char *arg)\n{\n  char *name = NULL;\n  char *value = NULL;\n  char *new_value = NULL;\n\n  if (lt_split_name_value (arg, &name, &value) != 0)\n    {\n      XFREE (name);\n      XFREE (value);\n      lt_fatal (\"bad argument for %s: '%s'\", env_append_opt, arg);\n    }\n\n  new_value = lt_extend_str (getenv (name), value, 1);\n  lt_setenv (name, new_value);\n  XFREE (new_value);\n  XFREE (name);\n  XFREE (value);\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\n\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      dlfiles=\"$dlfiles $arg\"\n\t    else\n\t      dlprefiles=\"$dlprefiles $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) deplibs=\"$deplibs $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      moreargs=\"$moreargs $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      dlfiles=\"$dlfiles $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    dlprefiles=\"$dlprefiles $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) rpath=\"$rpath $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) xrpath=\"$xrpath $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  weak_libs=\"$weak_libs $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname '-L' '' \"$arg\"\n\tdir=$func_stripname_result\n\tif test -z \"$dir\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"*) ;;\n\t*)\n\t  deplibs=\"$deplibs -L$dir\"\n\t  lib_search_path=\"$lib_search_path $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"X$dir\" | $Xsed -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    deplibs=\"$deplibs System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tdeplibs=\"$deplibs $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) xrpath=\"$xrpath $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  arg=\"$arg $wl$func_quote_for_eval_result\"\n\t  compiler_flags=\"$compiler_flags $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  arg=\"$arg $wl$func_quote_for_eval_result\"\n\t  compiler_flags=\"$compiler_flags $wl$func_quote_for_eval_result\"\n\t  linker_flags=\"$linker_flags $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # -64, -mips[0-9] enable 64-bit mode on the SGI compiler\n      # -r[0-9][0-9]* specifies the processor on the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler\n      # +DA*, +DD* enable 64-bit mode on the HP compiler\n      # -q* pass through compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* pass through architecture-specific\n      # compiler args for GCC\n      # -F/path gives path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-* pass through profiling flag for GCC\n      # @file GCC response files\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        compiler_flags=\"$compiler_flags $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tobjs=\"$objs $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tdlfiles=\"$dlfiles $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      dlprefiles=\"$dlprefiles $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tdeplibs=\"$deplibs $arg\"\n\told_deplibs=\"$old_deplibs $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  dlfiles=\"$dlfiles $arg\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  dlprefiles=\"$dlprefiles $arg\"\n\t  prev=\n\telse\n\t  deplibs=\"$deplibs $arg\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"X\\${$shlibpath_var}\\\" \\| \\$Xsed -e \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_duplicate_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\tesac\n      fi\n      libs=\"$libs $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) specialdeplibs=\"$specialdeplibs $pre_post_deps\" ;;\n\t  esac\n\t  pre_post_deps=\"$pre_post_deps $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  case $lib in\n\t  *.la)\tfunc_source \"$lib\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n            deplib_base=`$ECHO \"X$deplib\" | $Xsed -e \"$basename\"`\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) deplibs=\"$deplibs $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    compiler_flags=\"$compiler_flags $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    dir=$func_stripname_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) xrpath=\"$xrpath $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la) lib=\"$deplib\" ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"X$deplib\\\"\" 2>/dev/null | $Xsed -e 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\t$ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t$ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t$ECHO \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\t$ECHO \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      newdlprefiles=\"$newdlprefiles $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      newdlfiles=\"$newdlfiles $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"X$inherited_linker_flags\" | $Xsed -e 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) new_inherited_linker_flags=\"$new_inherited_linker_flags $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \"X $dependency_libs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && dlfiles=\"$dlfiles $dlopen\"\n\t  test -n \"$dlpreopen\" && dlprefiles=\"$dlprefiles $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    convenience=\"$convenience $ladir/$objdir/$old_library\"\n\t    old_convenience=\"$old_convenience $ladir/$objdir/$old_library\"\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tfor l in $old_library $library_names; do\n\t  linklib=\"$l\"\n\tdone\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    dlprefiles=\"$dlprefiles $lib $dependency_libs\"\n\t  else\n\t    newdlfiles=\"$newdlfiles $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$libdir\"\n\t    absdir=\"$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t  # are required to link).\n\t  if test -n \"$old_library\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$old_library\"\n\t    # Keep a list of preopened convenience libraries to check\n\t    # that they are being used correctly in the link pass.\n\t    test -z \"$libdir\" && \\\n\t\tdlpreconveniencelibs=\"$dlpreconveniencelibs $dir/$old_library\"\n\t  # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t  elif test -n \"$dlname\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$dlname\"\n\t  else\n\t    newdlprefiles=\"$newdlprefiles $dir/$linklib\"\n\t  fi\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  newlib_search_path=\"$newlib_search_path $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) temp_rpath=\"$temp_rpath$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      notinst_deplibs=\"$notinst_deplibs $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      notinst_deplibs=\"$notinst_deplibs $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    $ECHO\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  $ECHO\n\t\t\t  $ECHO \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  $ECHO \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$dir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) compile_shlibpath=\"$compile_shlibpath$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    $ECHO\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    $ECHO \"*** I have the capability to make that library automatically link in when\"\n\t    $ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t    $ECHO \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      $ECHO \"*** But as you try to build a module library, libtool will still create \"\n\t      $ECHO \"*** a static module, that should work as long as the dlopening application\"\n\t      $ECHO \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\t$ECHO\n\t\t$ECHO \"*** However, this would only work if libtool was able to extract symbol\"\n\t\t$ECHO \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\t$ECHO \"*** not find such a program.  So, this module is probably useless.\"\n\t\t$ECHO \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) xrpath=\"$xrpath $temp_xrpath\";;\n\t\t   esac;;\n\t      *) temp_deplibs=\"$temp_deplibs $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  newlib_search_path=\"$newlib_search_path $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=\"$func_dirname_result\"\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      compiler_flags=\"$compiler_flags ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      linker_flags=\"$linker_flags -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \"X $new_inherited_linker_flags\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) lib_search_path=\"$lib_search_path $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  tmp_libs=\"$tmp_libs $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      objs=\"$objs$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  $ECHO\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  libobjs=\"$libobjs $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  verstring=\"$verstring:${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      libobjs=\"$libobjs $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       removelist=\"$removelist $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\toldlibs=\"$oldlibs $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"X$libobjs\" | $SP2NL | $Xsed -e '/\\.'${libext}'$/d' -e \"$lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"X$lib_search_path \" | $Xsed -e \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"X$deplibs \" | $Xsed -e \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"X$dependency_libs \" | $Xsed -e \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  temp_xrpath=\"$temp_xrpath -R$libdir\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlfiles=\"$dlfiles $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlprefiles=\"$dlprefiles $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    deplibs=\"$deplibs System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      deplibs=\"$deplibs -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    $ECHO\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    $ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t    $ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    $ECHO \"*** shared version of the library, which I believe you do not have\"\n\t\t    $ECHO \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    $ECHO \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      $ECHO\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      $ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t      $ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      $ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t      $ECHO \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      $ECHO \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  $ECHO\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  $ECHO \"*** make it link in!  You will probably need to install it or some\"\n\t\t  $ECHO \"*** library that it depends on before this library will be fully\"\n\t\t  $ECHO \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"X$potlib\" | $Xsed -e 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tnewdeplibs=\"$newdeplibs $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\t$ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t$ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t$ECHO \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"X$potent_lib\\\"\" 2>/dev/null | $Xsed -e 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\t$ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t$ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t$ECHO \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \"X $deplibs\" | $Xsed \\\n\t      -e 's/ -lc$//' -e 's/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \"X $tmp_deplibs\" | $Xsed -e \"s,$i,,\"`\n\t    done\n\t  fi\n\t  if $ECHO \"X $tmp_deplibs\" | $Xsed -e 's/[\t ]//g' |\n\t     $GREP . >/dev/null; then\n\t    $ECHO\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      $ECHO \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      $ECHO \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    $ECHO \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t  fi\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \"X $newdeplibs\" | $Xsed -e 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    $ECHO\n\t    $ECHO \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    $ECHO \"*** a static module, that should work as long as the dlopening\"\n\t    $ECHO \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      $ECHO\n\t      $ECHO \"*** However, this would only work if libtool was able to extract symbol\"\n\t      $ECHO \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      $ECHO \"*** not find such a program.  So, this module is probably useless.\"\n\t      $ECHO \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    $ECHO \"*** The inter-library dependencies that have been dropped here will be\"\n\t    $ECHO \"*** automatically added whenever a program is linked with this library\"\n\t    $ECHO \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      $ECHO\n\t      $ECHO \"*** Since this library must not contain undefined symbols,\"\n\t      $ECHO \"*** because either the platform does not support them or\"\n\t      $ECHO \"*** it was explicitly requested with -no-undefined,\"\n\t      $ECHO \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \"X $newdeplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \"X $new_inherited_linker_flags\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \"X $deplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    hardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tdep_rpath=\"$dep_rpath $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    if test -n \"$hardcode_libdir_flag_spec_ld\"; then\n\t      eval dep_rpath=\\\"$hardcode_libdir_flag_spec_ld\\\"\n\t    else\n\t      eval dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\n\t    fi\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      rpath=\"$rpath$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  linknames=\"$linknames $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"X$libobjs\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  delfiles=\"$delfiles $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      eval cmd=\\\"$cmd\\\"\n\t      func_len \" $cmd\"\n\t      len=$func_len_result\n\t      if test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || eval '$ECHO \"X$include_expsyms\" | $Xsed | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  delfiles=\"$delfiles $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    tmp_deplibs=\"$tmp_deplibs $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    generated=\"$generated $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    libobjs=\"$libobjs $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  linker_flags=\"$linker_flags $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  output_la=`$ECHO \"X$output\" | $Xsed -e \"$basename\"`\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    $ECHO 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      $ECHO \"$obj\" >> $output\n\t    done\n\t    $ECHO ')' >> $output\n\t    delfiles=\"$delfiles $output\"\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      $ECHO \"$obj\" >> $output\n\t    done\n\t    delfiles=\"$delfiles $output\"\n\t    output=$firstobj\\\"$file_list_spec$output\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    eval concat_cmds=\\\"$reload_cmds $objlist $last_robj\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds $objlist $last_robj~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=$obj\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds $objlist $last_robj\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\n\t      fi\n\t      delfiles=\"$delfiles $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || eval '$ECHO \"X$include_expsyms\" | $Xsed | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      delfiles=\"$delfiles $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  libobjs=\"$libobjs $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"X$tmp_whole_archive_flags\" | $Xsed -e 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"X$libobjs\" | $SP2NL | $Xsed -e '/\\.'${libext}$'/d' -e '/\\.lib$/d' -e \"$lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \"X $compile_deplibs\" | $Xsed -e 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \"X $finalize_deplibs\" | $Xsed -e 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      compile_command=\"$compile_command ${wl}-bind_at_load\"\n\t      finalize_command=\"$finalize_command ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \"X $compile_deplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \"X $finalize_deplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      compile_command=\"$compile_command $compile_deplibs\"\n      finalize_command=\"$finalize_command $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_perm_rpath=\"$finalize_perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"X$compile_command\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"X$finalize_command\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *cegcc)\n        # Disable wrappers for cegcc, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"X$compile_command\" | $Xsed -e 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"X$link_command\" | $Xsed -e 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"X$compile_var$compile_command$compile_rpath\" | $Xsed -e 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"X$link_command\" | $Xsed -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"$sed_quote_subst\"`\n      fi\n\n      # Quote $ECHO for shipping.\n      if test \"X$ECHO\" = \"X$SHELL $progpath --fallback-echo\"; then\n\tcase $progpath in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) qecho=\"$SHELL $progpath --fallback-echo\";;\n\t*) qecho=\"$SHELL `pwd`/$progpath --fallback-echo\";;\n\tesac\n\tqecho=`$ECHO \"X$qecho\" | $Xsed -e \"$sed_quote_subst\"`\n      else\n\tqecho=`$ECHO \"X$ECHO\" | $Xsed -e \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    oldobjs=\"$oldobjs $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tgenerated=\"$generated $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\toldobjs=\"$oldobjs $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  oldobjs=\"$oldobjs $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  $ECHO \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      oldobjs=\"$oldobjs $gentop/$newobj\"\n\t      ;;\n\t    *) oldobjs=\"$oldobjs $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tnewdependency_libs=\"$newdependency_libs $libdir/$name\"\n\t\t;;\n\t      *) newdependency_libs=\"$newdependency_libs $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tnewdlfiles=\"$newdlfiles $libdir/$name\"\n\t\t;;\n\t      *) newdlfiles=\"$newdlfiles $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tnewdlprefiles=\"$newdlprefiles $libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlfiles=\"$newdlfiles $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlprefiles=\"$newdlprefiles $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll) tdlname=../bin/$dlname ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$mode\" = link || test \"$mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) RM=\"$RM $arg\"; rmforce=yes ;;\n      -*) RM=\"$RM $arg\" ;;\n      *) files=\"$files $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    origobjdir=\"$objdir\"\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\tobjdir=\"$origobjdir\"\n      else\n\tobjdir=\"$dir/$origobjdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$mode\" = uninstall && objdir=\"$dir\"\n\n      # Remember objdir for removal later, being careful to avoid duplicates\n      if test \"$mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $objdir \"*) ;;\n\t  *) rmdirs=\"$rmdirs $objdir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    rmfiles=\"$rmfiles $objdir/$n\"\n\t  done\n\t  test -n \"$old_library\" && rmfiles=\"$rmfiles $objdir/$old_library\"\n\n\t  case \"$mode\" in\n\t  clean)\n\t    case \"  $library_names \" in\n\t    # \"  \" in the beginning catches empty $dlname\n\t    *\" $dlname \"*) ;;\n\t    *) rmfiles=\"$rmfiles $objdir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && rmfiles=\"$rmfiles $objdir/$name $objdir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    rmfiles=\"$rmfiles $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      rmfiles=\"$rmfiles $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    rmfiles=\"$rmfiles $objdir/$name $objdir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      rmfiles=\"$rmfiles $objdir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      rmfiles=\"$rmfiles $objdir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n    objdir=\"$origobjdir\"\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$mode\" = uninstall || test \"$mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\n# serial 56 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"X$cc_temp\" | $Xsed -e 's%.*/%%' -e \"s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n_LT_PROG_ECHO_BACKSLASH\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from `configure', and `config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# `config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=\"$ac_aux_dir/ltmain.sh\"\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the `libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to `config.status' so that its\n# declaration there will have the same value as in `configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"X$][$1\" | $Xsed -e \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"X$<var>\" | $Xsed -e \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags=\"_LT_TAGS\"dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into `config.status', and then the shell code to quote escape them in\n# for loops in `config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \"X\\\\\\\\\\$\\$var\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"X\\\\\\$\\$var\\\\\" | \\\\\\$Xsed -e \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \"X\\\\\\\\\\$\\$var\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"X\\\\\\$\\$var\\\\\" | \\\\\\$Xsed -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Fix-up fallback echo if it was mangled by the above quoting rules.\ncase \\$lt_ECHO in\n*'\\\\\\[$]0 --fallback-echo\"')dnl \"\n  lt_ECHO=\\`\\$ECHO \"X\\$lt_ECHO\" | \\$Xsed -e 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\[$]0 --fallback-echo\"\\[$]/\\[$]0 --fallback-echo\"/'\\`\n  ;;\nesac\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\ncat >\"$CONFIG_LT\" <<_LTEOF\n#! $SHELL\n# Generated by $as_me.\n# Run this file to recreate a libtool stub with the current configuration.\n\nlt_cl_silent=false\nSHELL=\\${CONFIG_SHELL-$SHELL}\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAS_SHELL_SANITIZE\n_AS_PREPARE\n\nexec AS_MESSAGE_FD>&1\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n\\`$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2008 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test $[#] != 0\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nif test \"$no_create\" != yes; then\n  lt_cl_success=:\n  test \"$silent\" = yes &&\n    lt_config_lt_args=\"$lt_config_lt_args --quiet\"\n  exec AS_MESSAGE_LOG_FD>/dev/null\n  $SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\n  exec AS_MESSAGE_LOG_FD>>config.log\n  $lt_cl_success || AS_EXIT(1)\nfi\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '/^# Generated shell functions inserted here/q' \"$ltmain\" >> \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\"; exit 1)\n\n  _LT_PROG_XSI_SHELLFNS\n\n  sed -n '/^# Generated shell functions inserted here/,$p' \"$ltmain\" >> \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\"; exit 1)\n\n  mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\tif test -f libconftest.dylib && test ! -s conftest.err && test $_lt_result = 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=\"$save_LDFLAGS\"\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES\n# --------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=echo\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n    m4_if([$1], [CXX],\n[   if test \"$lt_cv_apple_cc_single_mod\" != \"yes\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dsymutil}\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dar_export_syms}${_lt_dsymutil}\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX\n# -----------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nAC_LINK_IFELSE(AC_LANG_PROGRAM,[\nlt_aix_libpath_sed='\n    /Import File Strings/,/^$/ {\n\t/^0/ {\n\t    s/^0  *\\(.*\\)$/\\1/\n\t    p\n\t}\n    }'\naix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n# Check for a 64-bit object if we didn't find anything.\nif test -z \"$aix_libpath\"; then\n  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\nfi],[])\nif test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[ifdef([AC_DIVERSION_NOTICE],\n\t     [AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)],\n\t [AC_DIVERT_PUSH(NOTICE)])\n$1\nAC_DIVERT_POP\n])# _LT_SHELL_INIT\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Add some code to the start of the generated configure script which\n# will find an echo command which doesn't interpret backslashes.\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[_LT_SHELL_INIT([\n# Check that we are running under the correct shell.\nSHELL=${CONFIG_SHELL-/bin/sh}\n\ncase X$lt_ECHO in\nX*--fallback-echo)\n  # Remove one level of quotation (which was required for Make).\n  ECHO=`echo \"$lt_ECHO\" | sed 's,\\\\\\\\\\[$]\\\\[$]0,'[$]0','`\n  ;;\nesac\n\nECHO=${lt_ECHO-echo}\nif test \"X[$]1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X[$]1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t' ; then\n  # Yippee, $ECHO works!\n  :\nelse\n  # Restart under the correct shell.\n  exec $SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\nfi\n\nif test \"X[$]1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<_LT_EOF\n[$]*\n_LT_EOF\n  exit 0\nfi\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nif test -z \"$lt_ECHO\"; then\n  if test \"X${echo_test_string+set}\" != Xset; then\n    # find a string as large as possible, as long as the shell can cope with it\n    for cmd in 'sed 50q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 2q \"[$]0\"' 'echo test'; do\n      # expected sizes: less than 2Kb, 1Kb, 512 bytes, 16 bytes, ...\n      if { echo_test_string=`eval $cmd`; } 2>/dev/null &&\n\t { test \"X$echo_test_string\" = \"X$echo_test_string\"; } 2>/dev/null\n      then\n        break\n      fi\n    done\n  fi\n\n  if test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t' &&\n     echo_testing_string=`{ $ECHO \"$echo_test_string\"; } 2>/dev/null` &&\n     test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n    :\n  else\n    # The Solaris, AIX, and Digital Unix default echo programs unquote\n    # backslashes.  This makes it impossible to quote backslashes using\n    #   echo \"$something\" | sed 's/\\\\/\\\\\\\\/g'\n    #\n    # So, first we look for a working echo in the user's PATH.\n\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for dir in $PATH /usr/ucb; do\n      IFS=\"$lt_save_ifs\"\n      if (test -f $dir/echo || test -f $dir/echo$ac_exeext) &&\n         test \"X`($dir/echo '\\t') 2>/dev/null`\" = 'X\\t' &&\n         echo_testing_string=`($dir/echo \"$echo_test_string\") 2>/dev/null` &&\n         test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n        ECHO=\"$dir/echo\"\n        break\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n\n    if test \"X$ECHO\" = Xecho; then\n      # We didn't find a better echo, so look for alternatives.\n      if test \"X`{ print -r '\\t'; } 2>/dev/null`\" = 'X\\t' &&\n         echo_testing_string=`{ print -r \"$echo_test_string\"; } 2>/dev/null` &&\n         test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n        # This shell has a builtin print -r that does the trick.\n        ECHO='print -r'\n      elif { test -f /bin/ksh || test -f /bin/ksh$ac_exeext; } &&\n\t   test \"X$CONFIG_SHELL\" != X/bin/ksh; then\n        # If we have ksh, try running configure again with it.\n        ORIGINAL_CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n        export ORIGINAL_CONFIG_SHELL\n        CONFIG_SHELL=/bin/ksh\n        export CONFIG_SHELL\n        exec $CONFIG_SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\n      else\n        # Try using printf.\n        ECHO='printf %s\\n'\n        if test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t' &&\n\t   echo_testing_string=`{ $ECHO \"$echo_test_string\"; } 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t  # Cool, printf works\n\t  :\n        elif echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = 'X\\t' &&\n\t     echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t  CONFIG_SHELL=$ORIGINAL_CONFIG_SHELL\n\t  export CONFIG_SHELL\n\t  SHELL=\"$CONFIG_SHELL\"\n\t  export SHELL\n\t  ECHO=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n        elif echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = 'X\\t' &&\n\t     echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t  ECHO=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n        else\n\t  # maybe with a smaller string...\n\t  prev=:\n\n\t  for cmd in 'echo test' 'sed 2q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 50q \"[$]0\"'; do\n\t    if { test \"X$echo_test_string\" = \"X`eval $cmd`\"; } 2>/dev/null\n\t    then\n\t      break\n\t    fi\n\t    prev=\"$cmd\"\n\t  done\n\n\t  if test \"$prev\" != 'sed 50q \"[$]0\"'; then\n\t    echo_test_string=`eval $prev`\n\t    export echo_test_string\n\t    exec ${ORIGINAL_CONFIG_SHELL-${CONFIG_SHELL-/bin/sh}} \"[$]0\" ${1+\"[$]@\"}\n\t  else\n\t    # Oops.  We lost completely, so just stick with echo.\n\t    ECHO=echo\n\t  fi\n        fi\n      fi\n    fi\n  fi\nfi\n\n# Copy echo and quote the copy suitably for passing to libtool from\n# the Makefile, instead of quoting the original, which is used later.\nlt_ECHO=$ECHO\nif test \"X$lt_ECHO\" = \"X$CONFIG_SHELL [$]0 --fallback-echo\"; then\n   lt_ECHO=\"$CONFIG_SHELL \\\\\\$\\[$]0 --fallback-echo\"\nfi\n\nAC_SUBST(lt_ECHO)\n])\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1],\n    [An echo program that does not interpret backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line __oline__ \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|ppc*-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_i386\"\n\t    ;;\n\t  ppc64-*linux*|powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  ppc*-*linux*|powerpc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\nsparc*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*) LD=\"${LD-ld} -m elf64_sparc\" ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n])# _LT_ENABLE_LOCK\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[AC_CHECK_TOOL(AR, ar, false)\ntest -z \"$AR\" && AR=ar\ntest -z \"$AR_FLAGS\" && AR_FLAGS=cru\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1])\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$oldlib\"\nfi\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"X$_lt_linker_boilerplate\" | $Xsed -e '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`$SHELL [$]0 --fallback-echo \"X$teststring$teststring\" 2>/dev/null` \\\n\t         = \"XX$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line __oline__ \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\nvoid fnord() { int i=42;}\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else if (dlsym( self,\"_fnord\")) status = $lt_dlneed_uscore;\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=\"nottested\"\nif test \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED(LT_OBJDIR, \"$lt_cv_objdir/\",\n  [Define to the sub-directory in which libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test \"X$_LT_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_TAGVAR(hardcode_action, $1)\" = relink ||\n   test \"$_LT_TAGVAR(inherit_rpath, $1)\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n  if $ECHO \"$lt_search_path_spec\" | $GREP ';' >/dev/null ; then\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED -e 's/;/ /g'`\n  else\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n  fi\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO $lt_tmp_lt_search_path_spec | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  sys_lib_search_path_spec=`$ECHO $lt_search_path_spec`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$ECHO \"X$lib\" | $Xsed -e '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$host_os in\n  yes,cygwin* | yes,mingw* | yes,pw32* | yes,cegcc*)\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=\"/usr/lib /lib/w32api /lib /usr/local/lib\"\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=`$CC -print-search-dirs | $GREP \"^libraries:\" | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH printed by\n        # mingw gcc, but we are running on Cygwin. Gcc prints its search\n        # path with ; separators, and with drive letters. We can handle the\n        # drive letters (cygwin fileutils understands them), so leave them,\n        # especially as we might pass files found there to a mingw objdump,\n        # which wouldn't understand a cygwinified path. Ahh.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    ;;\n\n  *)\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    ;;\n  esac\n  dynamic_linker='Win32 ld.exe'\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd1*)\n  dynamic_linker=no\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[123]]*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555.\n  postinstall_cmds='chmod 555 $lib'\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  # Some binutils ld are patched to set DT_RUNPATH\n  save_LDFLAGS=$LDFLAGS\n  save_libdir=$libdir\n  eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n       LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n    [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n       [shlibpath_overrides_runpath=yes])])\n  LDFLAGS=$save_LDFLAGS\n  libdir=$save_libdir\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program which can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program which can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_DECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_DECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    lt_cv_deplibs_check_method='file_magic file format pei*-i386(.*architecture: i386)?'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF-[0-9][0-9]) shared object file - PA-RISC [0-9].[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]].[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method == \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  AC_CHECK_TOOLS(DUMPBIN, [\"dumpbin -symbols\" \"link -dump -symbols\"], :)\n  AC_SUBST([DUMPBIN])\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:__oline__: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:__oline__: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:__oline__: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cygwin* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\(lib[[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| $lt_cv_sys_global_symbol_pipe \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nconst struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_save_LIBS=\"$LIBS\"\n\t  lt_save_CFLAGS=\"$CFLAGS\"\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=\"$lt_save_LIBS\"\n\t  CFLAGS=\"$lt_save_CFLAGS\"\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nAC_MSG_CHECKING([for $compiler option to produce PIC])\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64 which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC*)\n\t    # IBM XL 8.0 on PPC\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl*)\n\t# IBM XL C 8.0/Fortran 10.1 on PPC\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n\t*Sun\\ F*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\nAC_MSG_RESULT([$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n  ;;\n  cygwin* | mingw* | cegcc*)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;/^.*[[ ]]__nm__/s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  esac\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n  if test \"$with_gnu_ld\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.9.1, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to modify your PATH\n*** so that a non-GNU linker is found, and then restart.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95*)\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n\txl[[cC]]*)\t\t\t# IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='-rpath $libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $compiler_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $compiler_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then $ECHO \"X${wl}${allow_undefined_flag}\" | $Xsed; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  # Exported symbols can be pulled into shared objects from archives\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      # Tell ltmain to make .lib files, not .a files.\n      libext=lib\n      # Tell ltmain to make .dll files, not .so files.\n      shrext_cmds=\".dll\"\n      # FIXME: Setting linknames here is a bad hack.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `$ECHO \"X$deplibs\" | $Xsed -e '\\''s/ -lc$//'\\''` -link -dll~linknames='\n      # The linker will automatically build a .lib file if we build a DLL.\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n      # FIXME: Should let the user specify the lib program.\n      _LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n      _LT_TAGVAR(fix_srcfile_path, $1)='`cygpath -w \"$srcfile\"`'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    freebsd1*)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='+b $libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n        save_LDFLAGS=\"$LDFLAGS\"\n        LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n        AC_LINK_IFELSE(int foo(void) {},\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n        )\n        LDFLAGS=\"$save_LDFLAGS\"\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~$ECHO DATA >> $output_objdir/$libname.def~$ECHO \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~$ECHO EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_MSG_CHECKING([whether -lc should be explicitly linked in])\n      $RM conftest*\n      echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n      if AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n        soname=conftest\n        lib=conftest\n        libobjs=conftest.$ac_objext\n        deplibs=\n        wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\tpic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n        compiler_flags=-v\n        linker_flags=-v\n        verstring=\n        output_objdir=.\n        libname=conftest\n        lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n        _LT_TAGVAR(allow_undefined_flag, $1)=\n        if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n        then\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        else\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n        fi\n        _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n      else\n        cat conftest.err 1>&5\n      fi\n      $RM conftest*\n      AC_MSG_RESULT([$_LT_TAGVAR(archive_cmds_need_lc, $1)])\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec_ld], [1],\n    [[If ld is used when linking, flag to hardcode $libdir into a binary\n    during linking.  This must work even if $libdir does not exist]])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting ${shlibpath_var} if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [fix_srcfile_path], [1],\n    [Fix the shell variable $srcfile for the compiler])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report which library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_PROG_CXX\n# ------------\n# Since AC_PROG_CXX is broken, in that it returns g++ if there is no c++\n# compiler, we have our own version here.\nm4_defun([_LT_PROG_CXX],\n[\npushdef([AC_MSG_ERROR], [_lt_caught_CXX_error=yes])\nAC_PROG_CXX\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\npopdef([AC_MSG_ERROR])\n])# _LT_PROG_CXX\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([_LT_PROG_CXX], [])\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[AC_REQUIRE([_LT_PROG_CXX])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_caught_CXX_error\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test \"$GXX\" = yes; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test \"$GXX\" = yes; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test \"$with_gnu_ld\" = yes; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='${wl}'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test \"$host_cpu\" = ia64; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\"\"\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n        if test \"$GXX\" = yes; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag=\"$shared_flag \"'${wl}-G'\n\t  fi\n        else\n          # not using gcc\n          if test \"$host_cpu\" = ia64; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test \"$aix_use_runtimelinking\" = yes; then\n\t      shared_flag='${wl}-G'\n\t    else\n\t      shared_flag='${wl}-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test \"$aix_use_runtimelinking\" = yes; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then $ECHO \"X${wl}${allow_undefined_flag}\" | $Xsed; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n        else\n          if test \"$host_cpu\" = ia64; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n        # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n        # as there is no search path for DLLs.\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n        _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n        _LT_TAGVAR(always_export_symbols, $1)=no\n        _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n        if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n          # If the export-symbols file already is a .def file (1st line\n          # is EXPORTS), use it as is; otherwise, prepend...\n          _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    cp $export_symbols $output_objdir/$soname.def;\n          else\n\t    echo EXPORTS > $output_objdir/$soname.def;\n\t    cat $export_symbols >> $output_objdir/$soname.def;\n          fi~\n          $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n        else\n          _LT_TAGVAR(ld_shlibs, $1)=no\n        fi\n        ;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd[[12]]*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      gnu*)\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n            ;;\n          *)\n            if test \"$GXX\" = yes; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test $with_gnu_ld = no; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test $with_gnu_ld = no; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test \"$with_gnu_ld\" = no; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]]* | *pgcpp\\ [[1-5]]*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n\t\t$RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 will use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`$ECHO \"X$templist\" | $Xsed -e \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\t    ;;\n\t  xl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    if test \"x$supports_anon_versioning\" = xyes; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t\tcat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t\techo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t\t$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='echo'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd2*)\n        # C++ shared libraries are fairly broken\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      openbsd*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=echo\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t          echo \"-hidden\">> $lib.exp~\n\t          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~\n\t          $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`$ECHO \"X$templist\" | $Xsed -e \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\t    ;;\n\t  *)\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands `-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='echo'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -shared -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We can NOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=\"$GXX\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test \"$_lt_caught_CXX_error\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n])\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" ||\n          test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       else\n\t prev=\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case $p in\n\t -L* | -R*)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       ;;\n\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | ${SED} -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_PROG_F77\n# ------------\n# Since AC_PROG_F77 is broken, in that it returns the empty string\n# if there is no fortran compiler, we have our own version here.\nm4_defun([_LT_PROG_F77],\n[\npushdef([AC_MSG_ERROR], [_lt_disable_F77=yes])\nAC_PROG_F77\nif test -z \"$F77\" || test \"X$F77\" = \"Xno\"; then\n  _lt_disable_F77=yes\nfi\npopdef([AC_MSG_ERROR])\n])# _LT_PROG_F77\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([_LT_PROG_F77], [])\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_REQUIRE([_LT_PROG_F77])dnl\nAC_LANG_PUSH(Fortran 77)\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_F77\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  CC=${F77-\"f77\"}\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$G77\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\nfi # test \"$_lt_disable_F77\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_PROG_FC\n# -----------\n# Since AC_PROG_FC is broken, in that it returns the empty string\n# if there is no fortran compiler, we have our own version here.\nm4_defun([_LT_PROG_FC],\n[\npushdef([AC_MSG_ERROR], [_lt_disable_FC=yes])\nAC_PROG_FC\nif test -z \"$FC\" || test \"X$FC\" = \"Xno\"; then\n  _lt_disable_FC=yes\nfi\npopdef([AC_MSG_ERROR])\n])# _LT_PROG_FC\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([_LT_PROG_FC], [])\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_REQUIRE([_LT_PROG_FC])dnl\nAC_LANG_PUSH(Fortran)\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_FC\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  CC=${FC-\"f95\"}\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$ac_cv_fc_compiler_gnu\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\nfi # test \"$_lt_disable_FC\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=\"$lt_save_CC\"\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=\"$lt_save_CC\"\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[AC_MSG_CHECKING([whether the shell understands some XSI constructs])\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\nAC_MSG_RESULT([$xsi_shell])\n_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])\n\nAC_MSG_CHECKING([whether the shell understands \"+=\"])\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$[1]+=\\$[2]\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\nAC_MSG_RESULT([$lt_shell_append])\n_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PROG_XSI_SHELLFNS\n# ---------------------\n# Bourne and XSI compatible variants of some useful shell functions.\nm4_defun([_LT_PROG_XSI_SHELLFNS],\n[case $xsi_shell in\n  yes)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n  case ${1} in\n    */*) func_dirname_result=\"${1%/*}${2}\" ;;\n    *  ) func_dirname_result=\"${3}\" ;;\n  esac\n}\n\n# func_basename file\nfunc_basename ()\n{\n  func_basename_result=\"${1##*/}\"\n}\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n  case ${1} in\n    */*) func_dirname_result=\"${1%/*}${2}\" ;;\n    *  ) func_dirname_result=\"${3}\" ;;\n  esac\n  func_basename_result=\"${1##*/}\"\n}\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nfunc_stripname ()\n{\n  # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n  # positional parameters, so assign one to ordinary parameter first.\n  func_stripname_result=${3}\n  func_stripname_result=${func_stripname_result#\"${1}\"}\n  func_stripname_result=${func_stripname_result%\"${2}\"}\n}\n\n# func_opt_split\nfunc_opt_split ()\n{\n  func_opt_split_opt=${1%%=*}\n  func_opt_split_arg=${1#*=}\n}\n\n# func_lo2o object\nfunc_lo2o ()\n{\n  case ${1} in\n    *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\n    *)    func_lo2o_result=${1} ;;\n  esac\n}\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n  func_xform_result=${1%.*}.lo\n}\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n  func_arith_result=$(( $[*] ))\n}\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n  func_len_result=${#1}\n}\n\n_LT_EOF\n    ;;\n  *) # Bourne compatible functions.\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n  # Extract subdirectory from the argument.\n  func_dirname_result=`$ECHO \"X${1}\" | $Xsed -e \"$dirname\"`\n  if test \"X$func_dirname_result\" = \"X${1}\"; then\n    func_dirname_result=\"${3}\"\n  else\n    func_dirname_result=\"$func_dirname_result${2}\"\n  fi\n}\n\n# func_basename file\nfunc_basename ()\n{\n  func_basename_result=`$ECHO \"X${1}\" | $Xsed -e \"$basename\"`\n}\n\ndnl func_dirname_and_basename\ndnl A portable version of this function is already defined in general.m4sh\ndnl so there is no need for it here.\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n  case ${2} in\n    .*) func_stripname_result=`$ECHO \"X${3}\" \\\n           | $Xsed -e \"s%^${1}%%\" -e \"s%\\\\\\\\${2}\\$%%\"`;;\n    *)  func_stripname_result=`$ECHO \"X${3}\" \\\n           | $Xsed -e \"s%^${1}%%\" -e \"s%${2}\\$%%\"`;;\n  esac\n}\n\n# sed scripts:\nmy_sed_long_opt='1s/^\\(-[[^=]]*\\)=.*/\\1/;q'\nmy_sed_long_arg='1s/^-[[^=]]*=//'\n\n# func_opt_split\nfunc_opt_split ()\n{\n  func_opt_split_opt=`$ECHO \"X${1}\" | $Xsed -e \"$my_sed_long_opt\"`\n  func_opt_split_arg=`$ECHO \"X${1}\" | $Xsed -e \"$my_sed_long_arg\"`\n}\n\n# func_lo2o object\nfunc_lo2o ()\n{\n  func_lo2o_result=`$ECHO \"X${1}\" | $Xsed -e \"$lo2o\"`\n}\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n  func_xform_result=`$ECHO \"X${1}\" | $Xsed -e 's/\\.[[^.]]*$/.lo/'`\n}\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n  func_arith_result=`expr \"$[@]\"`\n}\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n  func_len_result=`expr \"$[1]\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n}\n\n_LT_EOF\nesac\n\ncase $lt_shell_append in\n  yes)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n  eval \"$[1]+=\\$[2]\"\n}\n_LT_EOF\n    ;;\n  *)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n  eval \"$[1]=\\$$[1]\\$[2]\"\n}\n\n_LT_EOF\n    ;;\n  esac\n])\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 6 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option `$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl `shared' nor `disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n  \t\t   [_LT_ENABLE_FAST_INSTALL])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [0], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [0], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [0], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the `shared' and\n# `disable-shared' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the `static' and\n# `disable-static' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the `fast-install'\n# and `disable-fast-install' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the `pic-only' and `no-pic'\n# LT_INIT options.\n# MODE is either `yes' or `no'.  If omitted, it defaults to `both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [pic_mode=\"$withval\"],\n    [pic_mode=default])\n\ntest -z \"$pic_mode\" && pic_mode=m4_default([$1], [default])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/m4/lib-link.m4": "# lib-link.m4 serial 9 (gettext-0.16)\ndnl Copyright (C) 2001-2006 Free Software Foundation, Inc.\ndnl This file is free software; the Free Software Foundation\ndnl gives unlimited permission to copy and/or distribute it,\ndnl with or without modifications, as long as this notice is preserved.\n\ndnl From Bruno Haible.\n\nAC_PREREQ(2.50)\n\ndnl AC_LIB_LINKFLAGS(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets and AC_SUBSTs the LIB${NAME} and LTLIB${NAME} variables and\ndnl augments the CPPFLAGS variable.\nAC_DEFUN([AC_LIB_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  define([Name],[translit([$1],[./-], [___])])\n  define([NAME],[translit([$1],[abcdefghijklmnopqrstuvwxyz./-],\n                               [ABCDEFGHIJKLMNOPQRSTUVWXYZ___])])\n  AC_CACHE_CHECK([how to link with lib[]$1], [ac_cv_lib[]Name[]_libs], [\n    AC_LIB_LINKFLAGS_BODY([$1], [$2])\n    ac_cv_lib[]Name[]_libs=\"$LIB[]NAME\"\n    ac_cv_lib[]Name[]_ltlibs=\"$LTLIB[]NAME\"\n    ac_cv_lib[]Name[]_cppflags=\"$INC[]NAME\"\n  ])\n  LIB[]NAME=\"$ac_cv_lib[]Name[]_libs\"\n  LTLIB[]NAME=\"$ac_cv_lib[]Name[]_ltlibs\"\n  INC[]NAME=\"$ac_cv_lib[]Name[]_cppflags\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  dnl Also set HAVE_LIB[]NAME so that AC_LIB_HAVE_LINKFLAGS can reuse the\n  dnl results of this search when this library appears as a dependency.\n  HAVE_LIB[]NAME=yes\n  undefine([Name])\n  undefine([NAME])\n])\n\ndnl AC_LIB_HAVE_LINKFLAGS(name, dependencies, includes, testcode)\ndnl searches for libname and the libraries corresponding to explicit and\ndnl implicit dependencies, together with the specified include files and\ndnl the ability to compile and link the specified testcode. If found, it\ndnl sets and AC_SUBSTs HAVE_LIB${NAME}=yes and the LIB${NAME} and\ndnl LTLIB${NAME} variables and augments the CPPFLAGS variable, and\ndnl #defines HAVE_LIB${NAME} to 1. Otherwise, it sets and AC_SUBSTs\ndnl HAVE_LIB${NAME}=no and LIB${NAME} and LTLIB${NAME} to empty.\nAC_DEFUN([AC_LIB_HAVE_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  define([Name],[translit([$1],[./-], [___])])\n  define([NAME],[translit([$1],[abcdefghijklmnopqrstuvwxyz./-],\n                               [ABCDEFGHIJKLMNOPQRSTUVWXYZ___])])\n\n  dnl Search for lib[]Name and define LIB[]NAME, LTLIB[]NAME and INC[]NAME\n  dnl accordingly.\n  AC_LIB_LINKFLAGS_BODY([$1], [$2])\n\n  dnl Add $INC[]NAME to CPPFLAGS before performing the following checks,\n  dnl because if the user has installed lib[]Name and not disabled its use\n  dnl via --without-lib[]Name-prefix, he wants to use it.\n  ac_save_CPPFLAGS=\"$CPPFLAGS\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n\n  AC_CACHE_CHECK([for lib[]$1], [ac_cv_lib[]Name], [\n    ac_save_LIBS=\"$LIBS\"\n    LIBS=\"$LIBS $LIB[]NAME\"\n    AC_TRY_LINK([$3], [$4], [ac_cv_lib[]Name=yes], [ac_cv_lib[]Name=no])\n    LIBS=\"$ac_save_LIBS\"\n  ])\n  if test \"$ac_cv_lib[]Name\" = yes; then\n    HAVE_LIB[]NAME=yes\n    AC_DEFINE([HAVE_LIB]NAME, 1, [Define if you have the $1 library.])\n    AC_MSG_CHECKING([how to link with lib[]$1])\n    AC_MSG_RESULT([$LIB[]NAME])\n  else\n    HAVE_LIB[]NAME=no\n    dnl If $LIB[]NAME didn't lead to a usable library, we don't need\n    dnl $INC[]NAME either.\n    CPPFLAGS=\"$ac_save_CPPFLAGS\"\n    LIB[]NAME=\n    LTLIB[]NAME=\n  fi\n  AC_SUBST([HAVE_LIB]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  undefine([Name])\n  undefine([NAME])\n])\n\ndnl Determine the platform dependent parameters needed to use rpath:\ndnl libext, shlibext, hardcode_libdir_flag_spec, hardcode_libdir_separator,\ndnl hardcode_direct, hardcode_minus_L.\nAC_DEFUN([AC_LIB_RPATH],\n[\n  dnl Tell automake >= 1.10 to complain if config.rpath is missing.\n  m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([config.rpath])])\n  AC_REQUIRE([AC_PROG_CC])                dnl we use $CC, $GCC, $LDFLAGS\n  AC_REQUIRE([AC_LIB_PROG_LD])            dnl we use $LD, $with_gnu_ld\n  AC_REQUIRE([AC_CANONICAL_HOST])         dnl we use $host\n  AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT]) dnl we use $ac_aux_dir\n  AC_CACHE_CHECK([for shared library run path origin], acl_cv_rpath, [\n    CC=\"$CC\" GCC=\"$GCC\" LDFLAGS=\"$LDFLAGS\" LD=\"$LD\" with_gnu_ld=\"$with_gnu_ld\" \\\n    ${CONFIG_SHELL-/bin/sh} \"$ac_aux_dir/config.rpath\" \"$host\" > conftest.sh\n    . ./conftest.sh\n    rm -f ./conftest.sh\n    acl_cv_rpath=done\n  ])\n  wl=\"$acl_cv_wl\"\n  libext=\"$acl_cv_libext\"\n  shlibext=\"$acl_cv_shlibext\"\n  hardcode_libdir_flag_spec=\"$acl_cv_hardcode_libdir_flag_spec\"\n  hardcode_libdir_separator=\"$acl_cv_hardcode_libdir_separator\"\n  hardcode_direct=\"$acl_cv_hardcode_direct\"\n  hardcode_minus_L=\"$acl_cv_hardcode_minus_L\"\n  dnl Determine whether the user wants rpath handling at all.\n  AC_ARG_ENABLE(rpath,\n    [  --disable-rpath         do not hardcode runtime library paths],\n    :, enable_rpath=yes)\n])\n\ndnl AC_LIB_LINKFLAGS_BODY(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets the LIB${NAME}, LTLIB${NAME} and INC${NAME} variables.\nAC_DEFUN([AC_LIB_LINKFLAGS_BODY],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])\n  define([NAME],[translit([$1],[abcdefghijklmnopqrstuvwxyz./-],\n                               [ABCDEFGHIJKLMNOPQRSTUVWXYZ___])])\n  dnl By default, look in $includedir and $libdir.\n  use_additional=yes\n  AC_LIB_WITH_FINAL_PREFIX([\n    eval additional_includedir=\\\"$includedir\\\"\n    eval additional_libdir=\\\"$libdir\\\"\n  ])\n  AC_LIB_ARG_WITH([lib$1-prefix],\n[  --with-lib$1-prefix[=DIR]  search for lib$1 in DIR/include and DIR/lib\n  --without-lib$1-prefix     don't search for lib$1 in includedir and libdir],\n[\n    if test \"X$withval\" = \"Xno\"; then\n      use_additional=no\n    else\n      if test \"X$withval\" = \"X\"; then\n        AC_LIB_WITH_FINAL_PREFIX([\n          eval additional_includedir=\\\"$includedir\\\"\n          eval additional_libdir=\\\"$libdir\\\"\n        ])\n      else\n        additional_includedir=\"$withval/include\"\n        additional_libdir=\"$withval/$acl_libdirstem\"\n      fi\n    fi\n])\n  dnl Search the library and its dependencies in $additional_libdir and\n  dnl $LDFLAGS. Using breadth-first-seach.\n  LIB[]NAME=\n  LTLIB[]NAME=\n  INC[]NAME=\n  rpathdirs=\n  ltrpathdirs=\n  names_already_handled=\n  names_next_round='$1 $2'\n  while test -n \"$names_next_round\"; do\n    names_this_round=\"$names_next_round\"\n    names_next_round=\n    for name in $names_this_round; do\n      already_handled=\n      for n in $names_already_handled; do\n        if test \"$n\" = \"$name\"; then\n          already_handled=yes\n          break\n        fi\n      done\n      if test -z \"$already_handled\"; then\n        names_already_handled=\"$names_already_handled $name\"\n        dnl See if it was already located by an earlier AC_LIB_LINKFLAGS\n        dnl or AC_LIB_HAVE_LINKFLAGS call.\n        uppername=`echo \"$name\" | sed -e 'y|abcdefghijklmnopqrstuvwxyz./-|ABCDEFGHIJKLMNOPQRSTUVWXYZ___|'`\n        eval value=\\\"\\$HAVE_LIB$uppername\\\"\n        if test -n \"$value\"; then\n          if test \"$value\" = yes; then\n            eval value=\\\"\\$LIB$uppername\\\"\n            test -z \"$value\" || LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$value\"\n            eval value=\\\"\\$LTLIB$uppername\\\"\n            test -z \"$value\" || LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$value\"\n          else\n            dnl An earlier call to AC_LIB_HAVE_LINKFLAGS has determined\n            dnl that this library doesn't exist. So just drop it.\n            :\n          fi\n        else\n          dnl Search the library lib$name in $additional_libdir and $LDFLAGS\n          dnl and the already constructed $LIBNAME/$LTLIBNAME.\n          found_dir=\n          found_la=\n          found_so=\n          found_a=\n          if test $use_additional = yes; then\n            if test -n \"$shlibext\" \\\n               && { test -f \"$additional_libdir/lib$name.$shlibext\" \\\n                    || { test \"$shlibext\" = dll \\\n                         && test -f \"$additional_libdir/lib$name.dll.a\"; }; }; then\n              found_dir=\"$additional_libdir\"\n              if test -f \"$additional_libdir/lib$name.$shlibext\"; then\n                found_so=\"$additional_libdir/lib$name.$shlibext\"\n              else\n                found_so=\"$additional_libdir/lib$name.dll.a\"\n              fi\n              if test -f \"$additional_libdir/lib$name.la\"; then\n                found_la=\"$additional_libdir/lib$name.la\"\n              fi\n            else\n              if test -f \"$additional_libdir/lib$name.$libext\"; then\n                found_dir=\"$additional_libdir\"\n                found_a=\"$additional_libdir/lib$name.$libext\"\n                if test -f \"$additional_libdir/lib$name.la\"; then\n                  found_la=\"$additional_libdir/lib$name.la\"\n                fi\n              fi\n            fi\n          fi\n          if test \"X$found_dir\" = \"X\"; then\n            for x in $LDFLAGS $LTLIB[]NAME; do\n              AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n              case \"$x\" in\n                -L*)\n                  dir=`echo \"X$x\" | sed -e 's/^X-L//'`\n                  if test -n \"$shlibext\" \\\n                     && { test -f \"$dir/lib$name.$shlibext\" \\\n                          || { test \"$shlibext\" = dll \\\n                               && test -f \"$dir/lib$name.dll.a\"; }; }; then\n                    found_dir=\"$dir\"\n                    if test -f \"$dir/lib$name.$shlibext\"; then\n                      found_so=\"$dir/lib$name.$shlibext\"\n                    else\n                      found_so=\"$dir/lib$name.dll.a\"\n                    fi\n                    if test -f \"$dir/lib$name.la\"; then\n                      found_la=\"$dir/lib$name.la\"\n                    fi\n                  else\n                    if test -f \"$dir/lib$name.$libext\"; then\n                      found_dir=\"$dir\"\n                      found_a=\"$dir/lib$name.$libext\"\n                      if test -f \"$dir/lib$name.la\"; then\n                        found_la=\"$dir/lib$name.la\"\n                      fi\n                    fi\n                  fi\n                  ;;\n              esac\n              if test \"X$found_dir\" != \"X\"; then\n                break\n              fi\n            done\n          fi\n          if test \"X$found_dir\" != \"X\"; then\n            dnl Found the library.\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$found_dir -l$name\"\n            if test \"X$found_so\" != \"X\"; then\n              dnl Linking with a shared library. We attempt to hardcode its\n              dnl directory into the executable's runpath, unless it's the\n              dnl standard /usr/lib.\n              if test \"$enable_rpath\" = no || test \"X$found_dir\" = \"X/usr/$acl_libdirstem\"; then\n                dnl No hardcoding is needed.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n              else\n                dnl Use an explicit option to hardcode DIR into the resulting\n                dnl binary.\n                dnl Potentially add DIR to ltrpathdirs.\n                dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                haveit=\n                for x in $ltrpathdirs; do\n                  if test \"X$x\" = \"X$found_dir\"; then\n                    haveit=yes\n                    break\n                  fi\n                done\n                if test -z \"$haveit\"; then\n                  ltrpathdirs=\"$ltrpathdirs $found_dir\"\n                fi\n                dnl The hardcoding into $LIBNAME is system dependent.\n                if test \"$hardcode_direct\" = yes; then\n                  dnl Using DIR/libNAME.so during linking hardcodes DIR into the\n                  dnl resulting binary.\n                  LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                else\n                  if test -n \"$hardcode_libdir_flag_spec\" && test \"$hardcode_minus_L\" = no; then\n                    dnl Use an explicit option to hardcode DIR into the resulting\n                    dnl binary.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    dnl Potentially add DIR to rpathdirs.\n                    dnl The rpathdirs will be appended to $LIBNAME at the end.\n                    haveit=\n                    for x in $rpathdirs; do\n                      if test \"X$x\" = \"X$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      rpathdirs=\"$rpathdirs $found_dir\"\n                    fi\n                  else\n                    dnl Rely on \"-L$found_dir\".\n                    dnl But don't add it if it's already contained in the LDFLAGS\n                    dnl or the already constructed $LIBNAME\n                    haveit=\n                    for x in $LDFLAGS $LIB[]NAME; do\n                      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                      if test \"X$x\" = \"X-L$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir\"\n                    fi\n                    if test \"$hardcode_minus_L\" != no; then\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    else\n                      dnl We cannot use $hardcode_runpath_var and LD_RUN_PATH\n                      dnl here, because this doesn't fit in flags passed to the\n                      dnl compiler. So give up. No hardcoding. This affects only\n                      dnl very old systems.\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n                    fi\n                  fi\n                fi\n              fi\n            else\n              if test \"X$found_a\" != \"X\"; then\n                dnl Linking with a static library.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_a\"\n              else\n                dnl We shouldn't come here, but anyway it's good to have a\n                dnl fallback.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir -l$name\"\n              fi\n            fi\n            dnl Assume the include files are nearby.\n            additional_includedir=\n            case \"$found_dir\" in\n              */$acl_libdirstem | */$acl_libdirstem/)\n                basedir=`echo \"X$found_dir\" | sed -e 's,^X,,' -e \"s,/$acl_libdirstem/\"'*$,,'`\n                additional_includedir=\"$basedir/include\"\n                ;;\n            esac\n            if test \"X$additional_includedir\" != \"X\"; then\n              dnl Potentially add $additional_includedir to $INCNAME.\n              dnl But don't add it\n              dnl   1. if it's the standard /usr/include,\n              dnl   2. if it's /usr/local/include and we are using GCC on Linux,\n              dnl   3. if it's already present in $CPPFLAGS or the already\n              dnl      constructed $INCNAME,\n              dnl   4. if it doesn't exist as a directory.\n              if test \"X$additional_includedir\" != \"X/usr/include\"; then\n                haveit=\n                if test \"X$additional_includedir\" = \"X/usr/local/include\"; then\n                  if test -n \"$GCC\"; then\n                    case $host_os in\n                      linux* | gnu* | k*bsd*-gnu) haveit=yes;;\n                    esac\n                  fi\n                fi\n                if test -z \"$haveit\"; then\n                  for x in $CPPFLAGS $INC[]NAME; do\n                    AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                    if test \"X$x\" = \"X-I$additional_includedir\"; then\n                      haveit=yes\n                      break\n                    fi\n                  done\n                  if test -z \"$haveit\"; then\n                    if test -d \"$additional_includedir\"; then\n                      dnl Really add $additional_includedir to $INCNAME.\n                      INC[]NAME=\"${INC[]NAME}${INC[]NAME:+ }-I$additional_includedir\"\n                    fi\n                  fi\n                fi\n              fi\n            fi\n            dnl Look for dependencies.\n            if test -n \"$found_la\"; then\n              dnl Read the .la file. It defines the variables\n              dnl dlname, library_names, old_library, dependency_libs, current,\n              dnl age, revision, installed, dlopen, dlpreopen, libdir.\n              save_libdir=\"$libdir\"\n              case \"$found_la\" in\n                */* | *\\\\*) . \"$found_la\" ;;\n                *) . \"./$found_la\" ;;\n              esac\n              libdir=\"$save_libdir\"\n              dnl We use only dependency_libs.\n              for dep in $dependency_libs; do\n                case \"$dep\" in\n                  -L*)\n                    additional_libdir=`echo \"X$dep\" | sed -e 's/^X-L//'`\n                    dnl Potentially add $additional_libdir to $LIBNAME and $LTLIBNAME.\n                    dnl But don't add it\n                    dnl   1. if it's the standard /usr/lib,\n                    dnl   2. if it's /usr/local/lib and we are using GCC on Linux,\n                    dnl   3. if it's already present in $LDFLAGS or the already\n                    dnl      constructed $LIBNAME,\n                    dnl   4. if it doesn't exist as a directory.\n                    if test \"X$additional_libdir\" != \"X/usr/$acl_libdirstem\"; then\n                      haveit=\n                      if test \"X$additional_libdir\" = \"X/usr/local/$acl_libdirstem\"; then\n                        if test -n \"$GCC\"; then\n                          case $host_os in\n                            linux* | gnu* | k*bsd*-gnu) haveit=yes;;\n                          esac\n                        fi\n                      fi\n                      if test -z \"$haveit\"; then\n                        haveit=\n                        for x in $LDFLAGS $LIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LIBNAME.\n                            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                        haveit=\n                        for x in $LDFLAGS $LTLIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LTLIBNAME.\n                            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                      fi\n                    fi\n                    ;;\n                  -R*)\n                    dir=`echo \"X$dep\" | sed -e 's/^X-R//'`\n                    if test \"$enable_rpath\" != no; then\n                      dnl Potentially add DIR to rpathdirs.\n                      dnl The rpathdirs will be appended to $LIBNAME at the end.\n                      haveit=\n                      for x in $rpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        rpathdirs=\"$rpathdirs $dir\"\n                      fi\n                      dnl Potentially add DIR to ltrpathdirs.\n                      dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                      haveit=\n                      for x in $ltrpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        ltrpathdirs=\"$ltrpathdirs $dir\"\n                      fi\n                    fi\n                    ;;\n                  -l*)\n                    dnl Handle this in the next round.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's/^X-l//'`\n                    ;;\n                  *.la)\n                    dnl Handle this in the next round. Throw away the .la's\n                    dnl directory; it is already contained in a preceding -L\n                    dnl option.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's,^X.*/,,' -e 's,^lib,,' -e 's,\\.la$,,'`\n                    ;;\n                  *)\n                    dnl Most likely an immediate library name.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$dep\"\n                    LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$dep\"\n                    ;;\n                esac\n              done\n            fi\n          else\n            dnl Didn't find the library; assume it is in the system directories\n            dnl known to the linker and runtime loader. (All the system\n            dnl directories known to the linker should also be known to the\n            dnl runtime loader, otherwise the system is severely misconfigured.)\n            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-l$name\"\n          fi\n        fi\n      fi\n    done\n  done\n  if test \"X$rpathdirs\" != \"X\"; then\n    if test -n \"$hardcode_libdir_separator\"; then\n      dnl Weird platform: only the last -rpath option counts, the user must\n      dnl pass all path elements in one option. We can arrange that for a\n      dnl single library, but not when more than one $LIBNAMEs are used.\n      alldirs=\n      for found_dir in $rpathdirs; do\n        alldirs=\"${alldirs}${alldirs:+$hardcode_libdir_separator}$found_dir\"\n      done\n      dnl Note: hardcode_libdir_flag_spec uses $libdir and $wl.\n      acl_save_libdir=\"$libdir\"\n      libdir=\"$alldirs\"\n      eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n      libdir=\"$acl_save_libdir\"\n      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n    else\n      dnl The -rpath options are cumulative.\n      for found_dir in $rpathdirs; do\n        acl_save_libdir=\"$libdir\"\n        libdir=\"$found_dir\"\n        eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n        libdir=\"$acl_save_libdir\"\n        LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n      done\n    fi\n  fi\n  if test \"X$ltrpathdirs\" != \"X\"; then\n    dnl When using libtool, the option that works for both libraries and\n    dnl executables is -R. The -R options are cumulative.\n    for found_dir in $ltrpathdirs; do\n      LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-R$found_dir\"\n    done\n  fi\n])\n\ndnl AC_LIB_APPENDTOVAR(VAR, CONTENTS) appends the elements of CONTENTS to VAR,\ndnl unless already present in VAR.\ndnl Works only for CPPFLAGS, not for LIB* variables because that sometimes\ndnl contains two or three consecutive elements that belong together.\nAC_DEFUN([AC_LIB_APPENDTOVAR],\n[\n  for element in [$2]; do\n    haveit=\n    for x in $[$1]; do\n      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n      if test \"X$x\" = \"X$element\"; then\n        haveit=yes\n        break\n      fi\n    done\n    if test -z \"$haveit\"; then\n      [$1]=\"${[$1]}${[$1]:+ }$element\"\n    fi\n  done\n])\n\ndnl For those cases where a variable contains several -L and -l options\ndnl referring to unknown libraries and directories, this macro determines the\ndnl necessary additional linker options for the runtime path.\ndnl AC_LIB_LINKFLAGS_FROM_LIBS([LDADDVAR], [LIBSVALUE], [USE-LIBTOOL])\ndnl sets LDADDVAR to linker options needed together with LIBSVALUE.\ndnl If USE-LIBTOOL evaluates to non-empty, linking with libtool is assumed,\ndnl otherwise linking without libtool is assumed.\nAC_DEFUN([AC_LIB_LINKFLAGS_FROM_LIBS],\n[\n  AC_REQUIRE([AC_LIB_RPATH])\n  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])\n  $1=\n  if test \"$enable_rpath\" != no; then\n    if test -n \"$hardcode_libdir_flag_spec\" && test \"$hardcode_minus_L\" = no; then\n      dnl Use an explicit option to hardcode directories into the resulting\n      dnl binary.\n      rpathdirs=\n      next=\n      for opt in $2; do\n        if test -n \"$next\"; then\n          dir=\"$next\"\n          dnl No need to hardcode the standard /usr/lib.\n          if test \"X$dir\" != \"X/usr/$acl_libdirstem\"; then\n            rpathdirs=\"$rpathdirs $dir\"\n          fi\n          next=\n        else\n          case $opt in\n            -L) next=yes ;;\n            -L*) dir=`echo \"X$opt\" | sed -e 's,^X-L,,'`\n                 dnl No need to hardcode the standard /usr/lib.\n                 if test \"X$dir\" != \"X/usr/$acl_libdirstem\"; then\n                   rpathdirs=\"$rpathdirs $dir\"\n                 fi\n                 next= ;;\n            *) next= ;;\n          esac\n        fi\n      done\n      if test \"X$rpathdirs\" != \"X\"; then\n        if test -n \"\"$3\"\"; then\n          dnl libtool is used for linking. Use -R options.\n          for dir in $rpathdirs; do\n            $1=\"${$1}${$1:+ }-R$dir\"\n          done\n        else\n          dnl The linker is used for linking directly.\n          if test -n \"$hardcode_libdir_separator\"; then\n            dnl Weird platform: only the last -rpath option counts, the user\n            dnl must pass all path elements in one option.\n            alldirs=\n            for dir in $rpathdirs; do\n              alldirs=\"${alldirs}${alldirs:+$hardcode_libdir_separator}$dir\"\n            done\n            acl_save_libdir=\"$libdir\"\n            libdir=\"$alldirs\"\n            eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n            libdir=\"$acl_save_libdir\"\n            $1=\"$flag\"\n          else\n            dnl The -rpath options are cumulative.\n            for dir in $rpathdirs; do\n              acl_save_libdir=\"$libdir\"\n              libdir=\"$dir\"\n              eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n              libdir=\"$acl_save_libdir\"\n              $1=\"${$1}${$1:+ }$flag\"\n            done\n          fi\n        fi\n      fi\n    fi\n  fi\n  AC_SUBST([$1])\n])\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql/sys_vars.cc": "/* Copyright (c) 2002, 2015, Oracle and/or its affiliates.\n   Copyright (c) 2012, 2015, MariaDB\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n/*\n  How to add new variables:\n\n  1. copy one of the existing variables, and edit the declaration.\n  2. if you need special behavior on assignment or additional checks\n     use ON_CHECK and ON_UPDATE callbacks.\n  3. *Don't* add new Sys_var classes or uncle Occam will come\n     with his razor to haunt you at nights\n\n  Note - all storage engine variables (for example myisam_whatever)\n  should go into the corresponding storage engine sources\n  (for example in storage/myisam/ha_myisam.cc) !\n*/\n\n#include \"my_global.h\"                          /* NO_EMBEDDED_ACCESS_CHECKS */\n#include \"sql_priv.h\"\n#include \"sql_class.h\"                          // set_var.h: THD\n#include \"sql_parse.h\"\n#include \"sys_vars.h\"\n\n#include \"events.h\"\n#include <thr_alarm.h>\n#include \"slave.h\"\n#include \"rpl_mi.h\"\n#include \"transaction.h\"\n#include \"mysqld.h\"\n#include \"lock.h\"\n#include \"sql_time.h\"                       // known_date_time_formats\n#include \"sql_acl.h\" // SUPER_ACL,\n                     // mysql_user_table_is_in_short_password_format\n#include \"derror.h\"  // read_texts\n#include \"sql_base.h\"                           // close_cached_tables\n#include <myisam.h>\n#include \"log_slow.h\"\n#include \"debug_sync.h\"                         // DEBUG_SYNC\n#include \"sql_show.h\"\n\n#include \"log_event.h\"\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n#include \"../storage/perfschema/pfs_server.h\"\n#endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */\n#include \"threadpool.h\"\n\n/*\n  The rule for this file: everything should be 'static'. When a sys_var\n  variable or a function from this file is - in very rare cases - needed\n  elsewhere it should be explicitly declared 'export' here to show that it's\n  not a mistakenly forgotten 'static' keyword.\n*/\n#define export /* not static */\n\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n\nstatic Sys_var_mybool Sys_pfs_enabled(\n       \"performance_schema\",\n       \"Enable the performance schema.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_enabled),\n       CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\nstatic Sys_var_ulong Sys_pfs_events_waits_history_long_size(\n       \"performance_schema_events_waits_history_long_size\",\n       \"Number of rows in EVENTS_WAITS_HISTORY_LONG.\",\n       PARSED_EARLY READ_ONLY\n       GLOBAL_VAR(pfs_param.m_events_waits_history_long_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 1024*1024),\n       DEFAULT(PFS_WAITS_HISTORY_LONG_SIZE), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_events_waits_history_size(\n       \"performance_schema_events_waits_history_size\",\n       \"Number of rows per thread in EVENTS_WAITS_HISTORY.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_events_waits_history_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 1024),\n       DEFAULT(PFS_WAITS_HISTORY_SIZE), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_cond_classes(\n       \"performance_schema_max_cond_classes\",\n       \"Maximum number of condition instruments.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_cond_class_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 256),\n       DEFAULT(PFS_MAX_COND_CLASS), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_cond_instances(\n       \"performance_schema_max_cond_instances\",\n       \"Maximum number of instrumented condition objects.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_cond_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 1024*1024),\n       DEFAULT(PFS_MAX_COND), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_file_classes(\n       \"performance_schema_max_file_classes\",\n       \"Maximum number of file instruments.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_file_class_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 256),\n       DEFAULT(PFS_MAX_FILE_CLASS), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_file_handles(\n       \"performance_schema_max_file_handles\",\n       \"Maximum number of opened instrumented files.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_file_handle_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 1024*1024),\n       DEFAULT(PFS_MAX_FILE_HANDLE), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_file_instances(\n       \"performance_schema_max_file_instances\",\n       \"Maximum number of instrumented files.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_file_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 1024*1024),\n       DEFAULT(PFS_MAX_FILE), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_mutex_classes(\n       \"performance_schema_max_mutex_classes\",\n       \"Maximum number of mutex instruments.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_mutex_class_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 256),\n       DEFAULT(PFS_MAX_MUTEX_CLASS), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_mutex_instances(\n       \"performance_schema_max_mutex_instances\",\n       \"Maximum number of instrumented MUTEX objects.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_mutex_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 100*1024*1024),\n       DEFAULT(PFS_MAX_MUTEX), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_rwlock_classes(\n       \"performance_schema_max_rwlock_classes\",\n       \"Maximum number of rwlock instruments.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_rwlock_class_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 256),\n       DEFAULT(PFS_MAX_RWLOCK_CLASS), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_rwlock_instances(\n       \"performance_schema_max_rwlock_instances\",\n       \"Maximum number of instrumented RWLOCK objects.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_rwlock_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 100*1024*1024),\n       DEFAULT(PFS_MAX_RWLOCK), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_table_handles(\n       \"performance_schema_max_table_handles\",\n       \"Maximum number of opened instrumented tables.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_table_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 1024*1024),\n       DEFAULT(PFS_MAX_TABLE), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_table_instances(\n       \"performance_schema_max_table_instances\",\n       \"Maximum number of instrumented tables.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_table_share_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 1024*1024),\n       DEFAULT(PFS_MAX_TABLE_SHARE), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_thread_classes(\n       \"performance_schema_max_thread_classes\",\n       \"Maximum number of thread instruments.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_thread_class_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 256),\n       DEFAULT(PFS_MAX_THREAD_CLASS), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_pfs_max_thread_instances(\n       \"performance_schema_max_thread_instances\",\n       \"Maximum number of instrumented threads.\",\n       PARSED_EARLY READ_ONLY GLOBAL_VAR(pfs_param.m_thread_sizing),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 1024*1024),\n       DEFAULT(PFS_MAX_THREAD), BLOCK_SIZE(1));\n\n#endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */\n\nstatic Sys_var_ulong Sys_auto_increment_increment(\n       \"auto_increment_increment\",\n       \"Auto-increment columns are incremented by this\",\n       SESSION_VAR(auto_increment_increment),\n       CMD_LINE(OPT_ARG),\n       VALID_RANGE(1, 65535), DEFAULT(1), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, IN_BINLOG);\n\nstatic Sys_var_ulong Sys_auto_increment_offset(\n       \"auto_increment_offset\",\n       \"Offset added to Auto-increment columns. Used when \"\n       \"auto-increment-increment != 1\",\n       SESSION_VAR(auto_increment_offset),\n       CMD_LINE(OPT_ARG),\n       VALID_RANGE(1, 65535), DEFAULT(1), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, IN_BINLOG);\n\nstatic Sys_var_mybool Sys_automatic_sp_privileges(\n       \"automatic_sp_privileges\",\n       \"Creating and dropping stored procedures alters ACLs\",\n       GLOBAL_VAR(sp_automatic_privileges),\n       CMD_LINE(OPT_ARG), DEFAULT(TRUE));\n\nstatic Sys_var_ulong Sys_back_log(\n       \"back_log\", \"The number of outstanding connection requests \"\n       \"MySQL can have. This comes into play when the main MySQL thread \"\n       \"gets very many connection requests in a very short time\",\n       READ_ONLY GLOBAL_VAR(back_log), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, 65535), DEFAULT(50), BLOCK_SIZE(1));\n\nstatic Sys_var_charptr Sys_basedir(\n       \"basedir\", \"Path to installation directory. All paths are \"\n       \"usually resolved relative to this\",\n       READ_ONLY GLOBAL_VAR(mysql_home_ptr), CMD_LINE(REQUIRED_ARG, 'b'),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_ulonglong Sys_binlog_cache_size(\n       \"binlog_cache_size\", \"The size of the transactional cache for \"\n       \"updates to transactional engines for the binary log. \"\n       \"If you often use transactions containing many statements, \"\n       \"you can increase this to get more performance\",\n       GLOBAL_VAR(binlog_cache_size),\n       CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(IO_SIZE, SIZE_T_MAX), DEFAULT(32768), BLOCK_SIZE(IO_SIZE));\n\nstatic Sys_var_ulonglong Sys_binlog_stmt_cache_size(\n       \"binlog_stmt_cache_size\", \"The size of the statement cache for \"\n       \"updates to non-transactional engines for the binary log. \"\n       \"If you often use statements updating a great number of rows, \"\n       \"you can increase this to get more performance\",\n       GLOBAL_VAR(binlog_stmt_cache_size),\n       CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(IO_SIZE, SIZE_T_MAX), DEFAULT(32768), BLOCK_SIZE(IO_SIZE));\n\n/*\n  Some variables like @sql_log_bin and @binlog_format change how/if binlogging\n  is done. We must not change them inside a running transaction or statement,\n  otherwise the event group eventually written to the binlog may become\n  incomplete or otherwise garbled.\n\n  This function does the appropriate check.\n\n  It returns true if an error is caused by incorrect usage, false if ok.\n*/\nstatic bool\nerror_if_in_trans_or_substatement(THD *thd, int in_substatement_error,\n                                  int in_transaction_error)\n{\n  if (thd->in_sub_stmt)\n  {\n    my_error(in_substatement_error, MYF(0));\n    return true;\n  }\n\n  if (thd->in_active_multi_stmt_transaction())\n  {\n    my_error(in_transaction_error, MYF(0));\n    return true;\n  }\n\n  return false;\n}\n\nstatic bool check_has_super(sys_var *self, THD *thd, set_var *var)\n{\n  DBUG_ASSERT(self->scope() != sys_var::GLOBAL);// don't abuse check_has_super()\n#ifndef NO_EMBEDDED_ACCESS_CHECKS\n  if (!(thd->security_ctx->master_access & SUPER_ACL))\n  {\n    my_error(ER_SPECIFIC_ACCESS_DENIED_ERROR, MYF(0), \"SUPER\");\n    return true;\n  }\n#endif\n  return false;\n}\nstatic bool binlog_format_check(sys_var *self, THD *thd, set_var *var)\n{\n  if (check_has_super(self, thd, var))\n    return true;\n\n  if (var->type == OPT_GLOBAL)\n    return false;\n\n  /*\n     If RBR and open temporary tables, their CREATE TABLE may not be in the\n     binlog, so we can't toggle to SBR in this connection.\n\n     If binlog_format=MIXED, there are open temporary tables, and an unsafe\n     statement is executed, then subsequent statements are logged in row\n     format and hence changes to temporary tables may be lost. So we forbid\n     switching @@SESSION.binlog_format from MIXED to STATEMENT when there are\n     open temp tables and we are logging in row format.\n  */\n  if (thd->temporary_tables && var->type == OPT_SESSION &&\n      var->save_result.ulonglong_value == BINLOG_FORMAT_STMT &&\n      ((thd->variables.binlog_format == BINLOG_FORMAT_MIXED &&\n        thd->is_current_stmt_binlog_format_row()) ||\n       thd->variables.binlog_format == BINLOG_FORMAT_ROW))\n  {\n    my_error(ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR, MYF(0));\n    return true;\n  }\n\n  if (error_if_in_trans_or_substatement(thd,\n         ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT,\n         ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT))\n    return true;\n\n  return false;\n}\n\nstatic bool fix_binlog_format_after_update(sys_var *self, THD *thd,\n                                           enum_var_type type)\n{\n  if (type == OPT_SESSION)\n    thd->reset_current_stmt_binlog_format_row();\n  return false;\n}\n\nstatic Sys_var_enum Sys_binlog_format(\n       \"binlog_format\", \"What form of binary logging the master will \"\n       \"use: either ROW for row-based binary logging, STATEMENT \"\n       \"for statement-based binary logging, or MIXED. MIXED is statement-\"\n       \"based binary logging except for those statements where only row-\"\n       \"based is correct: those which involve user-defined functions (i.e. \"\n       \"UDFs) or the UUID() function; for those, row-based binary logging is \"\n       \"automatically used. If NDBCLUSTER is enabled and binlog-format is \"\n       \"MIXED, the format switches to row-based and back implicitly per each \"\n       \"query accessing an NDBCLUSTER table\",\n       SESSION_VAR(binlog_format), CMD_LINE(REQUIRED_ARG, OPT_BINLOG_FORMAT),\n       binlog_format_names, DEFAULT(BINLOG_FORMAT_STMT),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(binlog_format_check),\n       ON_UPDATE(fix_binlog_format_after_update));\n\nstatic bool binlog_direct_check(sys_var *self, THD *thd, set_var *var)\n{\n  if (check_has_super(self, thd, var))\n    return true;\n\n  if (var->type == OPT_GLOBAL)\n    return false;\n\n  if (error_if_in_trans_or_substatement(thd,\n          ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT,\n          ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT))\n     return true;\n\n  return false;\n}\n\nstatic Sys_var_mybool Sys_binlog_direct(\n       \"binlog_direct_non_transactional_updates\",\n       \"Causes updates to non-transactional engines using statement format to \"\n       \"be written directly to binary log. Before using this option make sure \"\n       \"that there are no dependencies between transactional and \"\n       \"non-transactional tables such as in the statement INSERT INTO t_myisam \"\n       \"SELECT * FROM t_innodb; otherwise, slaves may diverge from the master.\",\n       SESSION_VAR(binlog_direct_non_trans_update),\n       CMD_LINE(OPT_ARG), DEFAULT(FALSE),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(binlog_direct_check));\n\nstatic Sys_var_ulonglong Sys_bulk_insert_buff_size(\n       \"bulk_insert_buffer_size\", \"Size of tree cache used in bulk \"\n       \"insert optimisation. Note that this is a limit per thread!\",\n       SESSION_VAR(bulk_insert_buff_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, SIZE_T_MAX), DEFAULT(8192*1024), BLOCK_SIZE(1));\n\nstatic Sys_var_charptr Sys_character_sets_dir(\n       \"character_sets_dir\", \"Directory where character sets are\",\n       READ_ONLY GLOBAL_VAR(charsets_dir), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic bool check_not_null(sys_var *self, THD *thd, set_var *var)\n{\n  return var->value && var->value->is_null();\n}\nstatic bool check_charset(sys_var *self, THD *thd, set_var *var)\n{\n  if (!var->value)\n    return false;\n\n  char buff[STRING_BUFFER_USUAL_SIZE];\n  if (var->value->result_type() == STRING_RESULT)\n  {\n    String str(buff, sizeof(buff), system_charset_info), *res;\n    if (!(res=var->value->val_str(&str)))\n      var->save_result.ptr= NULL;\n    else if (!(var->save_result.ptr= get_charset_by_csname(res->c_ptr(),\n                                                           MY_CS_PRIMARY,\n                                                           MYF(0))) &&\n             !(var->save_result.ptr=get_old_charset_by_name(res->c_ptr())))\n    {\n      ErrConvString err(res);\n      my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), err.ptr());\n      return true;\n    }\n  }\n  else // INT_RESULT\n  {\n    int csno= (int)var->value->val_int();\n    if (!(var->save_result.ptr= get_charset(csno, MYF(0))))\n    {\n      my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), llstr(csno, buff));\n      return true;\n    }\n  }\n  return false;\n}\nstatic bool check_charset_not_null(sys_var *self, THD *thd, set_var *var)\n{\n  return check_charset(self, thd, var) || check_not_null(self, thd, var);\n}\nstatic Sys_var_struct Sys_character_set_system(\n       \"character_set_system\", \"The character set used by the server \"\n       \"for storing identifiers\",\n       READ_ONLY GLOBAL_VAR(system_charset_info), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, csname), DEFAULT(0));\n\nstatic Sys_var_struct Sys_character_set_server(\n       \"character_set_server\", \"The default character set\",\n       SESSION_VAR(collation_server), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, csname), DEFAULT(&default_charset_info),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(check_charset_not_null));\n\nstatic bool check_charset_db(sys_var *self, THD *thd, set_var *var)\n{\n  if (check_charset_not_null(self, thd, var))\n    return true;\n  if (!var->value) // = DEFAULT\n    var->save_result.ptr= thd->db_charset;\n  return false;\n}\nstatic Sys_var_struct Sys_character_set_database(\n       \"character_set_database\",\n       \" The character set used by the default database\",\n       SESSION_VAR(collation_database), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, csname), DEFAULT(&default_charset_info),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(check_charset_db));\n\nstatic bool check_cs_client(sys_var *self, THD *thd, set_var *var)\n{\n  if (check_charset_not_null(self, thd, var))\n    return true;\n\n  // Currently, UCS-2 cannot be used as a client character set\n  if (!is_supported_parser_charset((CHARSET_INFO *)(var->save_result.ptr)))\n    return true;\n\n  return false;\n}\nstatic bool fix_thd_charset(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type == OPT_SESSION)\n    thd->update_charset();\n  return false;\n}\nstatic Sys_var_struct Sys_character_set_client(\n       \"character_set_client\", \"The character set for statements \"\n       \"that arrive from the client\",\n       SESSION_VAR(character_set_client), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, csname), DEFAULT(&default_charset_info),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(check_cs_client),\n       ON_UPDATE(fix_thd_charset));\n\nstatic Sys_var_struct Sys_character_set_connection(\n       \"character_set_connection\", \"The character set used for \"\n       \"literals that do not have a character set introducer and for \"\n       \"number-to-string conversion\",\n       SESSION_VAR(collation_connection), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, csname), DEFAULT(&default_charset_info),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(check_charset_not_null),\n       ON_UPDATE(fix_thd_charset));\n\nstatic Sys_var_struct Sys_character_set_results(\n       \"character_set_results\", \"The character set used for returning \"\n       \"query results to the client\",\n       SESSION_VAR(character_set_results), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, csname), DEFAULT(&default_charset_info),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_charset));\n\nstatic Sys_var_struct Sys_character_set_filesystem(\n       \"character_set_filesystem\", \"The filesystem character set\",\n       SESSION_VAR(character_set_filesystem), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, csname), DEFAULT(&character_set_filesystem),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_charset_not_null),\n       ON_UPDATE(fix_thd_charset));\n\nstatic const char *completion_type_names[]= {\"NO_CHAIN\", \"CHAIN\", \"RELEASE\", 0};\nstatic Sys_var_enum Sys_completion_type(\n       \"completion_type\", \"The transaction completion type, one of \"\n       \"NO_CHAIN, CHAIN, RELEASE\",\n       SESSION_VAR(completion_type), CMD_LINE(REQUIRED_ARG),\n       completion_type_names, DEFAULT(0));\n\nstatic bool check_collation_not_null(sys_var *self, THD *thd, set_var *var)\n{\n  if (!var->value)\n    return false;\n\n  char buff[STRING_BUFFER_USUAL_SIZE];\n  if (var->value->result_type() == STRING_RESULT)\n  {\n    String str(buff, sizeof(buff), system_charset_info), *res;\n    if (!(res= var->value->val_str(&str)))\n      var->save_result.ptr= NULL;\n    else if (!(var->save_result.ptr= get_charset_by_name(res->c_ptr(), MYF(0))))\n    {\n      ErrConvString err(res);\n      my_error(ER_UNKNOWN_COLLATION, MYF(0), err.ptr());\n      return true;\n    }\n  }\n  else // INT_RESULT\n  {\n    int csno= (int)var->value->val_int();\n    if (!(var->save_result.ptr= get_charset(csno, MYF(0))))\n    {\n      my_error(ER_UNKNOWN_COLLATION, MYF(0), llstr(csno, buff));\n      return true;\n    }\n  }\n  return check_not_null(self, thd, var);\n}\nstatic Sys_var_struct Sys_collation_connection(\n       \"collation_connection\", \"The collation of the connection \"\n       \"character set\",\n       SESSION_VAR(collation_connection), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, name), DEFAULT(&default_charset_info),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(check_collation_not_null),\n       ON_UPDATE(fix_thd_charset));\n\nstatic bool check_collation_db(sys_var *self, THD *thd, set_var *var)\n{\n  if (check_collation_not_null(self, thd, var))\n    return true;\n  if (!var->value) // = DEFAULT\n    var->save_result.ptr= thd->db_charset;\n  return false;\n}\nstatic Sys_var_struct Sys_collation_database(\n       \"collation_database\", \"The collation of the database \"\n       \"character set\",\n       SESSION_VAR(collation_database), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, name), DEFAULT(&default_charset_info),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(check_collation_db));\n\nstatic Sys_var_struct Sys_collation_server(\n       \"collation_server\", \"The server default collation\",\n       SESSION_VAR(collation_server), NO_CMD_LINE,\n       offsetof(CHARSET_INFO, name), DEFAULT(&default_charset_info),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(check_collation_not_null));\n\nstatic const char *concurrent_insert_names[]= {\"NEVER\", \"AUTO\", \"ALWAYS\", 0};\nstatic Sys_var_enum Sys_concurrent_insert(\n       \"concurrent_insert\", \"Use concurrent insert with MyISAM. Possible \"\n       \"values are NEVER, AUTO, ALWAYS\",\n       GLOBAL_VAR(myisam_concurrent_insert), CMD_LINE(OPT_ARG),\n       concurrent_insert_names, DEFAULT(1));\n\nstatic Sys_var_ulong Sys_connect_timeout(\n       \"connect_timeout\",\n       \"The number of seconds the mysqld server is waiting for a connect \"\n       \"packet before responding with 'Bad handshake'\",\n       GLOBAL_VAR(connect_timeout), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(2, LONG_TIMEOUT), DEFAULT(CONNECT_TIMEOUT), BLOCK_SIZE(1));\n\nstatic Sys_var_charptr Sys_datadir(\n       \"datadir\", \"Path to the database root directory\",\n       READ_ONLY GLOBAL_VAR(mysql_real_data_home_ptr),\n       CMD_LINE(REQUIRED_ARG, 'h'), IN_FS_CHARSET, DEFAULT(mysql_real_data_home));\n\n#ifndef DBUG_OFF\nstatic Sys_var_dbug Sys_dbug(\n       \"debug\", \"Built-in DBUG debugger\", sys_var::SESSION,\n       CMD_LINE(OPT_ARG, '#'), DEFAULT(\"\"), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_has_super), ON_UPDATE(0),\n       DEPRECATED(\"'@@debug_dbug'\"));\n\nstatic Sys_var_dbug Sys_debug_dbug(\n       \"debug_dbug\", \"Built-in DBUG debugger\", sys_var::SESSION,\n       CMD_LINE(OPT_ARG, '#'), DEFAULT(\"\"), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_has_super));\n#endif\n\n/**\n  @todo\n    When updating myisam_delay_key_write, we should do a 'flush tables'\n    of all MyISAM tables to ensure that they are reopen with the\n    new attribute.\n*/\nexport bool fix_delay_key_write(sys_var *self, THD *thd, enum_var_type type)\n{\n  switch (delay_key_write_options) {\n  case DELAY_KEY_WRITE_NONE:\n    myisam_delay_key_write=0;\n    ha_open_options&= ~HA_OPEN_DELAY_KEY_WRITE;\n    break;\n  case DELAY_KEY_WRITE_ON:\n    myisam_delay_key_write=1;\n    ha_open_options&= ~HA_OPEN_DELAY_KEY_WRITE;\n    break;\n  case DELAY_KEY_WRITE_ALL:\n    myisam_delay_key_write=1;\n    ha_open_options|= HA_OPEN_DELAY_KEY_WRITE;\n    break;\n  }\n#ifdef WITH_ARIA_STORAGE_ENGINE\n  maria_delay_key_write= myisam_delay_key_write;\n#endif\n  return false;\n}\nstatic const char *delay_key_write_names[]= { \"OFF\", \"ON\", \"ALL\", NullS };\nstatic Sys_var_enum Sys_delay_key_write(\n       \"delay_key_write\", \"Type of DELAY_KEY_WRITE\",\n       GLOBAL_VAR(delay_key_write_options), CMD_LINE(OPT_ARG),\n       delay_key_write_names, DEFAULT(DELAY_KEY_WRITE_ON),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_delay_key_write));\n\nstatic Sys_var_ulong Sys_delayed_insert_limit(\n       \"delayed_insert_limit\",\n       \"After inserting delayed_insert_limit rows, the INSERT DELAYED \"\n       \"handler will check if there are any SELECT statements pending. \"\n       \"If so, it allows these to execute before continuing\",\n       GLOBAL_VAR(delayed_insert_limit), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, UINT_MAX), DEFAULT(DELAYED_LIMIT), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_delayed_insert_timeout(\n       \"delayed_insert_timeout\",\n       \"How long a INSERT DELAYED thread should wait for INSERT statements \"\n       \"before terminating\",\n       GLOBAL_VAR(delayed_insert_timeout), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, LONG_TIMEOUT), DEFAULT(DELAYED_WAIT_TIMEOUT),\n       BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_delayed_queue_size(\n       \"delayed_queue_size\",\n       \"What size queue (in rows) should be allocated for handling INSERT \"\n       \"DELAYED. If the queue becomes full, any client that does INSERT \"\n       \"DELAYED will wait until there is room in the queue again\",\n       GLOBAL_VAR(delayed_queue_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, UINT_MAX), DEFAULT(DELAYED_QUEUE_SIZE), BLOCK_SIZE(1));\n\n#ifdef HAVE_EVENT_SCHEDULER\nstatic const char *event_scheduler_names[]= { \"OFF\", \"ON\", \"DISABLED\", NullS };\nstatic bool event_scheduler_check(sys_var *self, THD *thd, set_var *var)\n{\n  /* DISABLED is only accepted on the command line */\n  if (var->save_result.ulonglong_value == Events::EVENTS_DISABLED)\n    return true;\n  /*\n    If the scheduler was disabled because there are no/bad\n    system tables, produce a more meaningful error message\n    than ER_OPTION_PREVENTS_STATEMENT\n  */\n  if (Events::check_if_system_tables_error())\n    return true;\n  if (Events::opt_event_scheduler == Events::EVENTS_DISABLED)\n  {\n    my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),\n             \"--event-scheduler=DISABLED or --skip-grant-tables\");\n    return true;\n  }\n  return false;\n}\nstatic bool event_scheduler_update(sys_var *self, THD *thd, enum_var_type type)\n{\n  int err_no= 0;\n  uint opt_event_scheduler_value= Events::opt_event_scheduler;\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n  /*\n    Events::start() is heavyweight. In particular it creates a new THD,\n    which takes LOCK_global_system_variables internally.\n    Thus we have to release it here.\n    We need to re-take it before returning, though.\n\n    Note that since we release LOCK_global_system_variables before calling\n    start/stop, there is a possibility that the server variable\n    can become out of sync with the real event scheduler state.\n\n    This can happen with two concurrent statments if the first gets\n    interrupted after start/stop but before retaking\n    LOCK_global_system_variables. However, this problem should be quite\n    rare and it's difficult to avoid it without opening up possibilities\n    for deadlocks. See bug#51160.\n  */\n  bool ret= opt_event_scheduler_value == Events::EVENTS_ON\n            ? Events::start(&err_no)\n            : Events::stop();\n  mysql_mutex_lock(&LOCK_global_system_variables);\n  if (ret)\n  {\n    Events::opt_event_scheduler= Events::EVENTS_OFF;\n    my_error(ER_EVENT_SET_VAR_ERROR, MYF(0), err_no);\n  }\n  return ret;\n}\n\nstatic Sys_var_enum Sys_event_scheduler(\n       \"event_scheduler\", \"Enable the event scheduler. Possible values are \"\n       \"ON, OFF, and DISABLED (keep the event scheduler completely \"\n       \"deactivated, it cannot be activated run-time)\",\n       GLOBAL_VAR(Events::opt_event_scheduler), CMD_LINE(OPT_ARG),\n       event_scheduler_names, DEFAULT(Events::EVENTS_OFF),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(event_scheduler_check), ON_UPDATE(event_scheduler_update));\n#endif\n\nstatic Sys_var_ulong Sys_expire_logs_days(\n       \"expire_logs_days\",\n       \"If non-zero, binary logs will be purged after expire_logs_days \"\n       \"days; possible purges happen at startup and at binary log rotation\",\n       GLOBAL_VAR(expire_logs_days),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 99), DEFAULT(0), BLOCK_SIZE(1));\n\nstatic Sys_var_mybool Sys_flush(\n       \"flush\", \"Flush MyISAM tables to disk between SQL commands\",\n       GLOBAL_VAR(myisam_flush),\n       CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\nstatic Sys_var_ulong Sys_flush_time(\n       \"flush_time\",\n       \"A dedicated thread is created to flush all tables at the \"\n       \"given interval\",\n       GLOBAL_VAR(flush_time),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, LONG_TIMEOUT),\n       DEFAULT(0), BLOCK_SIZE(1));\n\nstatic bool check_ftb_syntax(sys_var *self, THD *thd, set_var *var)\n{\n  return ft_boolean_check_syntax_string((uchar*)\n                      (var->save_result.string_value.str));\n}\nstatic bool query_cache_flush(sys_var *self, THD *thd, enum_var_type type)\n{\n#ifdef HAVE_QUERY_CACHE\n  query_cache.flush();\n#endif /* HAVE_QUERY_CACHE */\n  return false;\n}\n/// @todo make SESSION_VAR (usability enhancement and a fix for a race condition)\nstatic Sys_var_charptr Sys_ft_boolean_syntax(\n       \"ft_boolean_syntax\", \"List of operators for \"\n       \"MATCH ... AGAINST ( ... IN BOOLEAN MODE)\",\n       GLOBAL_VAR(ft_boolean_syntax),\n       CMD_LINE(REQUIRED_ARG), IN_SYSTEM_CHARSET,\n       DEFAULT(DEFAULT_FTB_SYNTAX), NO_MUTEX_GUARD,\n       NOT_IN_BINLOG, ON_CHECK(check_ftb_syntax), ON_UPDATE(query_cache_flush));\n\nstatic Sys_var_ulong Sys_ft_max_word_len(\n       \"ft_max_word_len\",\n       \"The maximum length of the word to be included in a FULLTEXT index. \"\n       \"Note: FULLTEXT indexes must be rebuilt after changing this variable\",\n       READ_ONLY GLOBAL_VAR(ft_max_word_len), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(10, HA_FT_MAXCHARLEN), DEFAULT(HA_FT_MAXCHARLEN),\n       BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_ft_min_word_len(\n       \"ft_min_word_len\",\n       \"The minimum length of the word to be included in a FULLTEXT index. \"\n       \"Note: FULLTEXT indexes must be rebuilt after changing this variable\",\n       READ_ONLY GLOBAL_VAR(ft_min_word_len), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, HA_FT_MAXCHARLEN), DEFAULT(4), BLOCK_SIZE(1));\n\n/// @todo make it an updatable SESSION_VAR\nstatic Sys_var_ulong Sys_ft_query_expansion_limit(\n       \"ft_query_expansion_limit\",\n       \"Number of best matches to use for query expansion\",\n       READ_ONLY GLOBAL_VAR(ft_query_expansion_limit),\n       CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 1000), DEFAULT(20), BLOCK_SIZE(1));\n\nstatic Sys_var_charptr Sys_ft_stopword_file(\n       \"ft_stopword_file\",\n       \"Use stopwords from this file instead of built-in list\",\n       READ_ONLY GLOBAL_VAR(ft_stopword_file), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_mybool Sys_ignore_builtin_innodb(\n       \"ignore_builtin_innodb\",\n       \"Disable initialization of builtin InnoDB plugin\",\n       READ_ONLY GLOBAL_VAR(opt_ignore_builtin_innodb),\n       CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\nstatic bool check_init_string(sys_var *self, THD *thd, set_var *var)\n{\n  if (var->save_result.string_value.str == 0)\n  {\n    var->save_result.string_value.str= const_cast<char*>(\"\");\n    var->save_result.string_value.length= 0;\n  }\n  return false;\n}\nstatic PolyLock_rwlock PLock_sys_init_connect(&LOCK_sys_init_connect);\nstatic Sys_var_lexstring Sys_init_connect(\n       \"init_connect\", \"Command(s) that are executed for each \"\n       \"new connection (unless the user has SUPER privilege)\",\n       GLOBAL_VAR(opt_init_connect), CMD_LINE(REQUIRED_ARG), IN_SYSTEM_CHARSET,\n       DEFAULT(\"\"), &PLock_sys_init_connect, NOT_IN_BINLOG,\n       ON_CHECK(check_init_string));\n\nstatic Sys_var_charptr Sys_init_file(\n       \"init_file\", \"Read SQL commands from this file at startup\",\n       READ_ONLY GLOBAL_VAR(opt_init_file),\n#ifdef DISABLE_GRANT_OPTIONS\n       NO_CMD_LINE,\n#else\n       CMD_LINE(REQUIRED_ARG),\n#endif\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic PolyLock_rwlock PLock_sys_init_slave(&LOCK_sys_init_slave);\nstatic Sys_var_lexstring Sys_init_slave(\n       \"init_slave\", \"Command(s) that are executed by a slave server \"\n       \"each time the SQL thread starts\", GLOBAL_VAR(opt_init_slave),\n       CMD_LINE(REQUIRED_ARG), IN_SYSTEM_CHARSET,\n       DEFAULT(\"\"), &PLock_sys_init_slave,\n       NOT_IN_BINLOG, ON_CHECK(check_init_string));\n\nstatic Sys_var_ulong Sys_interactive_timeout(\n       \"interactive_timeout\",\n       \"The number of seconds the server waits for activity on an interactive \"\n       \"connection before closing it\",\n       SESSION_VAR(net_interactive_timeout),\n       CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, LONG_TIMEOUT), DEFAULT(NET_WAIT_TIMEOUT), BLOCK_SIZE(1));\n\nstatic Sys_var_ulonglong Sys_join_buffer_size(\n       \"join_buffer_size\",\n       \"The size of the buffer that is used for joins\",\n       SESSION_VAR(join_buff_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(128, SIZE_T_MAX), DEFAULT(128*1024), BLOCK_SIZE(128));\n\nstatic Sys_var_keycache Sys_key_buffer_size(\n       \"key_buffer_size\", \"The size of the buffer used for \"\n       \"index blocks for MyISAM tables. Increase this to get better index \"\n       \"handling (for all reads and multiple writes) to as much as you can \"\n       \"afford\",\n       KEYCACHE_VAR(param_buff_size),\n       CMD_LINE(REQUIRED_ARG, OPT_KEY_BUFFER_SIZE),\n       VALID_RANGE(0, SIZE_T_MAX), DEFAULT(KEY_CACHE_SIZE),\n       BLOCK_SIZE(IO_SIZE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(update_buffer_size));\n\nstatic Sys_var_keycache Sys_key_cache_block_size(\n       \"key_cache_block_size\", \"The default size of key cache blocks\",\n       KEYCACHE_VAR(param_block_size),\n       CMD_LINE(REQUIRED_ARG, OPT_KEY_CACHE_BLOCK_SIZE),\n       VALID_RANGE(512, 1024*16), DEFAULT(KEY_CACHE_BLOCK_SIZE),\n       BLOCK_SIZE(512), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(resize_keycache));\n\nstatic Sys_var_keycache Sys_key_cache_division_limit(\n       \"key_cache_division_limit\",\n       \"The minimum percentage of warm blocks in key cache\",\n       KEYCACHE_VAR(param_division_limit),\n       CMD_LINE(REQUIRED_ARG, OPT_KEY_CACHE_DIVISION_LIMIT),\n       VALID_RANGE(1, 100), DEFAULT(100),\n       BLOCK_SIZE(1), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(change_keycache_param));\n\nstatic Sys_var_keycache Sys_key_cache_age_threshold(\n       \"key_cache_age_threshold\", \"This characterizes the number of \"\n       \"hits a hot block has to be untouched until it is considered aged \"\n       \"enough to be downgraded to a warm block. This specifies the \"\n       \"percentage ratio of that number of hits to the total number of \"\n       \"blocks in key cache\",\n       KEYCACHE_VAR(param_age_threshold),\n       CMD_LINE(REQUIRED_ARG, OPT_KEY_CACHE_AGE_THRESHOLD),\n       VALID_RANGE(100, UINT_MAX), DEFAULT(300),\n       BLOCK_SIZE(100), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(change_keycache_param));\n\nstatic Sys_var_mybool Sys_large_files_support(\n       \"large_files_support\",\n       \"Whether mysqld was compiled with options for large file support\",\n       READ_ONLY GLOBAL_VAR(opt_large_files),\n       NO_CMD_LINE, DEFAULT(sizeof(my_off_t) > 4));\n\nstatic Sys_var_uint Sys_large_page_size(\n       \"large_page_size\",\n       \"If large page support is enabled, this shows the size of memory pages\",\n       READ_ONLY GLOBAL_VAR(opt_large_page_size), NO_CMD_LINE,\n       VALID_RANGE(0, UINT_MAX), DEFAULT(0), BLOCK_SIZE(1));\n\nstatic Sys_var_mybool Sys_large_pages(\n       \"large_pages\", \"Enable support for large pages\",\n       READ_ONLY GLOBAL_VAR(opt_large_pages),\n       IF_WIN(NO_CMD_LINE, CMD_LINE(OPT_ARG)), DEFAULT(FALSE));\n\nstatic Sys_var_charptr Sys_language(\n       \"lc_messages_dir\", \"Directory where error messages are\",\n       READ_ONLY GLOBAL_VAR(lc_messages_dir_ptr), CMD_LINE(REQUIRED_ARG, 'L'),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_mybool Sys_local_infile(\n       \"local_infile\", \"Enable LOAD DATA LOCAL INFILE\",\n       GLOBAL_VAR(opt_local_infile), CMD_LINE(OPT_ARG), DEFAULT(TRUE));\n\nstatic Sys_var_ulong Sys_lock_wait_timeout(\n       \"lock_wait_timeout\",\n       \"Timeout in seconds to wait for a lock before returning an error.\",\n       SESSION_VAR(lock_wait_timeout), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, LONG_TIMEOUT), DEFAULT(LONG_TIMEOUT), BLOCK_SIZE(1));\n\n#ifdef HAVE_MLOCKALL\nstatic Sys_var_mybool Sys_locked_in_memory(\n       \"locked_in_memory\",\n       \"Whether mysqld was locked in memory with --memlock\",\n       READ_ONLY GLOBAL_VAR(locked_in_memory), NO_CMD_LINE, DEFAULT(FALSE));\n#endif\n\n/* this says NO_CMD_LINE, as command-line option takes a string, not a bool */\nstatic Sys_var_mybool Sys_log_bin(\n       \"log_bin\", \"Whether the binary log is enabled\",\n       READ_ONLY GLOBAL_VAR(opt_bin_log), NO_CMD_LINE, DEFAULT(FALSE));\n\nstatic Sys_var_mybool Sys_trust_function_creators(\n       \"log_bin_trust_function_creators\",\n       \"If set to FALSE (the default), then when --log-bin is used, creation \"\n       \"of a stored function (or trigger) is allowed only to users having the \"\n       \"SUPER privilege and only if this stored function (trigger) may not \"\n       \"break binary logging. Note that if ALL connections to this server \"\n       \"ALWAYS use row-based binary logging, the security issues do not \"\n       \"exist and the binary logging cannot break, so you can safely set \"\n       \"this to TRUE\",\n       GLOBAL_VAR(trust_function_creators),\n       CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\nstatic Sys_var_charptr Sys_log_error(\n       \"log_error\",\n       \"Log errors to file (instead of stdout).  If file name is not specified \"\n       \"then 'datadir'/'log-basename'.err or the 'pid-file' path with extension \"\n       \".err is used\",\n       READ_ONLY GLOBAL_VAR(log_error_file_ptr),\n       CMD_LINE(OPT_ARG, OPT_LOG_ERROR),\n       IN_FS_CHARSET, DEFAULT(disabled_my_option));\n\nstatic Sys_var_mybool Sys_log_queries_not_using_indexes(\n       \"log_queries_not_using_indexes\",\n       \"Log queries that are executed without benefit of any index to the \"\n       \"slow log if it is open\",\n       GLOBAL_VAR(opt_log_queries_not_using_indexes),\n       CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\nstatic Sys_var_ulong Sys_log_warnings(\n       \"log_warnings\",\n       \"Log some not critical warnings to the general log file.\"\n       \"Value can be between 0 and 11. Higher values mean more verbosity\",\n       SESSION_VAR(log_warnings),\n       CMD_LINE(OPT_ARG, 'W'),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(1), BLOCK_SIZE(1));\n\nstatic bool update_cached_long_query_time(sys_var *self, THD *thd,\n                                          enum_var_type type)\n{\n  if (type == OPT_SESSION)\n    thd->variables.long_query_time=\n      double2ulonglong(thd->variables.long_query_time_double * 1e6);\n  else\n    global_system_variables.long_query_time=\n      double2ulonglong(global_system_variables.long_query_time_double * 1e6);\n  return false;\n}\n\nstatic Sys_var_double Sys_long_query_time(\n       \"long_query_time\",\n       \"Log all queries that have taken more than long_query_time seconds \"\n       \"to execute to file. The argument will be treated as a decimal value \"\n       \"with microsecond precision\",\n       SESSION_VAR(long_query_time_double),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, LONG_TIMEOUT), DEFAULT(10),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(update_cached_long_query_time));\n\nstatic bool fix_low_prio_updates(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type == OPT_SESSION)\n    thd->update_lock_default= (thd->variables.low_priority_updates ?\n                               TL_WRITE_LOW_PRIORITY : TL_WRITE);\n  else\n    thr_upgraded_concurrent_insert_lock=\n      (global_system_variables.low_priority_updates ?\n       TL_WRITE_LOW_PRIORITY : TL_WRITE);\n  return false;\n}\nstatic Sys_var_mybool Sys_low_priority_updates(\n       \"low_priority_updates\",\n       \"INSERT/DELETE/UPDATE has lower priority than selects\",\n       SESSION_VAR(low_priority_updates),\n       CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_low_prio_updates));\n\n#ifndef TO_BE_DELETED   /* Alias for the low_priority_updates */\nstatic Sys_var_mybool Sys_sql_low_priority_updates(\n       \"sql_low_priority_updates\",\n       \"INSERT/DELETE/UPDATE has lower priority than selects\",\n       SESSION_VAR(low_priority_updates), NO_CMD_LINE,\n       DEFAULT(FALSE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_low_prio_updates));\n#endif\n\nstatic Sys_var_mybool Sys_lower_case_file_system(\n       \"lower_case_file_system\",\n       \"Case sensitivity of file names on the file system where the \"\n       \"data directory is located\",\n       READ_ONLY GLOBAL_VAR(lower_case_file_system), NO_CMD_LINE,\n       DEFAULT(FALSE));\n\nstatic Sys_var_uint Sys_lower_case_table_names(\n       \"lower_case_table_names\",\n       \"If set to 1 table names are stored in lowercase on disk and table \"\n       \"names will be case-insensitive.  Should be set to 2 if you are using \"\n       \"a case insensitive file system\",\n       READ_ONLY GLOBAL_VAR(lower_case_table_names),\n       CMD_LINE(OPT_ARG, OPT_LOWER_CASE_TABLE_NAMES),\n       VALID_RANGE(0, 2),\n#ifdef FN_NO_CASE_SENSE\n    DEFAULT(1),\n#else\n    DEFAULT(0),\n#endif\n       BLOCK_SIZE(1));\n\nstatic bool session_readonly(sys_var *self, THD *thd, set_var *var)\n{\n  if (var->type == OPT_GLOBAL)\n    return false;\n  my_error(ER_VARIABLE_IS_READONLY, MYF(0), \"SESSION\",\n           self->name.str, \"GLOBAL\");\n  return true;\n}\n\nstatic bool check_max_allowed_packet(sys_var *self, THD *thd,  set_var *var)\n{\n  longlong val;\n  if (session_readonly(self, thd, var))\n    return true;\n\n  val= var->save_result.ulonglong_value;\n  if (val < (longlong) global_system_variables.net_buffer_length)\n  {\n    push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,\n                        WARN_OPTION_BELOW_LIMIT, ER(WARN_OPTION_BELOW_LIMIT),\n                        \"max_allowed_packet\", \"net_buffer_length\");\n  }\n  return false;\n}\n\n\nstatic Sys_var_ulong Sys_max_allowed_packet(\n       \"max_allowed_packet\",\n       \"Max packet length to send to or receive from the server\",\n       SESSION_VAR(max_allowed_packet), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1024, 1024*1024*1024), DEFAULT(1024*1024),\n       BLOCK_SIZE(1024), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_max_allowed_packet));\n\nstatic Sys_var_ulong Sys_slave_max_allowed_packet(\n       \"slave_max_allowed_packet\",\n       \"The maximum packet length to sent successfully from the master to slave.\",\n       GLOBAL_VAR(slave_max_allowed_packet), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1024, MAX_MAX_ALLOWED_PACKET),\n       DEFAULT(MAX_MAX_ALLOWED_PACKET),\n       BLOCK_SIZE(1024));\n\nstatic Sys_var_ulonglong Sys_max_binlog_cache_size(\n       \"max_binlog_cache_size\",\n       \"Sets the total size of the transactional cache\",\n       GLOBAL_VAR(max_binlog_cache_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(IO_SIZE, SIZE_T_MAX),\n       DEFAULT((SIZE_T_MAX/IO_SIZE)*IO_SIZE),\n       BLOCK_SIZE(IO_SIZE));\n\nstatic Sys_var_ulonglong Sys_max_binlog_stmt_cache_size(\n       \"max_binlog_stmt_cache_size\",\n       \"Sets the total size of the statement cache\",\n       GLOBAL_VAR(max_binlog_stmt_cache_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(IO_SIZE, SIZE_T_MAX),\n       DEFAULT((SIZE_T_MAX/IO_SIZE)*IO_SIZE),\n       BLOCK_SIZE(IO_SIZE));\n\nstatic bool fix_max_binlog_size(sys_var *self, THD *thd, enum_var_type type)\n{\n  mysql_bin_log.set_max_size(max_binlog_size);\n#ifdef HAVE_REPLICATION\n  if (!max_relay_log_size)\n    active_mi->rli.relay_log.set_max_size(max_binlog_size);\n#endif\n  return false;\n}\nstatic Sys_var_ulong Sys_max_binlog_size(\n       \"max_binlog_size\",\n       \"Binary log will be rotated automatically when the size exceeds this \"\n       \"value. Will also apply to relay logs if max_relay_log_size is 0\",\n       GLOBAL_VAR(max_binlog_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(IO_SIZE, 1024*1024L*1024L), DEFAULT(1024*1024L*1024L),\n       BLOCK_SIZE(IO_SIZE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_max_binlog_size));\n\nstatic bool fix_max_connections(sys_var *self, THD *thd, enum_var_type type)\n{\n#ifndef EMBEDDED_LIBRARY\n  resize_thr_alarm(max_connections + extra_max_connections +\n                   global_system_variables.max_insert_delayed_threads + 10);\n#endif\n  return false;\n}\n\n// Default max_connections of 151 is larger than Apache's default max\n// children, to avoid \"too many connections\" error in a common setup\nstatic Sys_var_ulong Sys_max_connections(\n       \"max_connections\", \"The number of simultaneous clients allowed\",\n       GLOBAL_VAR(max_connections), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, 100000), DEFAULT(151), BLOCK_SIZE(1), NO_MUTEX_GUARD,\n       NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(fix_max_connections));\n\nstatic Sys_var_ulong Sys_max_connect_errors(\n       \"max_connect_errors\",\n       \"If there is more than this number of interrupted connections from \"\n       \"a host this host will be blocked from further connections\",\n       GLOBAL_VAR(max_connect_errors), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, UINT_MAX), DEFAULT(MAX_CONNECT_ERRORS),\n       BLOCK_SIZE(1));\n\nstatic bool check_max_delayed_threads(sys_var *self, THD *thd, set_var *var)\n{\n  return var->type != OPT_GLOBAL &&\n         var->save_result.ulonglong_value != 0 &&\n         var->save_result.ulonglong_value !=\n                           global_system_variables.max_insert_delayed_threads;\n}\n\n// Alias for max_delayed_threads\nstatic Sys_var_ulong Sys_max_insert_delayed_threads(\n       \"max_insert_delayed_threads\",\n       \"Don't start more than this number of threads to handle INSERT \"\n       \"DELAYED statements. If set to zero INSERT DELAYED will be not used\",\n       SESSION_VAR(max_insert_delayed_threads),\n       NO_CMD_LINE, VALID_RANGE(0, 16384), DEFAULT(20),\n       BLOCK_SIZE(1), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_max_delayed_threads), ON_UPDATE(fix_max_connections));\n\nstatic Sys_var_ulong Sys_max_delayed_threads(\n       \"max_delayed_threads\",\n       \"Don't start more than this number of threads to handle INSERT \"\n       \"DELAYED statements. If set to zero INSERT DELAYED will be not used\",\n       SESSION_VAR(max_insert_delayed_threads),\n       CMD_LINE(REQUIRED_ARG), VALID_RANGE(0, 16384), DEFAULT(20),\n       BLOCK_SIZE(1), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_max_delayed_threads), ON_UPDATE(fix_max_connections));\n\nstatic Sys_var_ulong Sys_max_error_count(\n       \"max_error_count\",\n       \"Max number of errors/warnings to store for a statement\",\n       SESSION_VAR(max_error_count), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 65535), DEFAULT(DEFAULT_ERROR_COUNT), BLOCK_SIZE(1));\n\nstatic Sys_var_ulonglong Sys_max_heap_table_size(\n       \"max_heap_table_size\",\n       \"Don't allow creation of heap tables bigger than this\",\n       SESSION_VAR(max_heap_table_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(16384, (ulonglong)~(intptr)0), DEFAULT(16*1024*1024),\n       BLOCK_SIZE(1024));\n\nstatic Sys_var_ulong Sys_metadata_locks_cache_size(\n       \"metadata_locks_cache_size\", \"Size of unused metadata locks cache\",\n       READ_ONLY GLOBAL_VAR(mdl_locks_cache_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, 1024*1024), DEFAULT(MDL_LOCKS_CACHE_SIZE_DEFAULT),\n       BLOCK_SIZE(1));\n\n/*\n  \"pseudo_thread_id\" variable used in the test suite to detect 32/64bit\n  systems.  If you change it to something else then ulong then fix the tests\n  in mysql-test/include/have_32bit.inc and have_64bit.inc.\n*/\nstatic Sys_var_ulong Sys_pseudo_thread_id(\n       \"pseudo_thread_id\",\n       \"This variable is for internal server use\",\n       SESSION_ONLY(pseudo_thread_id),\n       NO_CMD_LINE, VALID_RANGE(0, ULONG_MAX), DEFAULT(0),\n       BLOCK_SIZE(1), NO_MUTEX_GUARD, IN_BINLOG,\n       ON_CHECK(check_has_super));\n\nstatic bool fix_max_join_size(sys_var *self, THD *thd, enum_var_type type)\n{\n  SV *sv= type == OPT_GLOBAL ? &global_system_variables : &thd->variables;\n  if (sv->max_join_size == HA_POS_ERROR)\n    sv->option_bits|= OPTION_BIG_SELECTS;\n  else\n    sv->option_bits&= ~OPTION_BIG_SELECTS;\n  return false;\n}\nstatic Sys_var_harows Sys_max_join_size(\n       \"max_join_size\",\n       \"Joins that are probably going to read more than max_join_size \"\n       \"records return an error\",\n       SESSION_VAR(max_join_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, HA_POS_ERROR), DEFAULT(HA_POS_ERROR), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_max_join_size));\n\nstatic Sys_var_ulong Sys_max_seeks_for_key(\n       \"max_seeks_for_key\",\n       \"Limit assumed max number of seeks when looking up rows based on a key\",\n       SESSION_VAR(max_seeks_for_key), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, UINT_MAX), DEFAULT(UINT_MAX), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_max_length_for_sort_data(\n       \"max_length_for_sort_data\",\n       \"Max number of bytes in sorted records\",\n       SESSION_VAR(max_length_for_sort_data), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(4, 8192*1024L), DEFAULT(1024), BLOCK_SIZE(1));\n\nstatic Sys_var_harows Sys_sql_max_join_size(\n       \"sql_max_join_size\", \"Alias for max_join_size\",\n       SESSION_VAR(max_join_size), NO_CMD_LINE,\n       VALID_RANGE(1, HA_POS_ERROR), DEFAULT(HA_POS_ERROR), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_max_join_size), DEPRECATED(\"'@@max_join_size'\"));\n\nstatic Sys_var_ulong Sys_max_long_data_size(\n       \"max_long_data_size\",\n       \"The maximum BLOB length to send to server from \"\n       \"mysql_send_long_data API. Deprecated option; \"\n       \"use max_allowed_packet instead.\",\n       READ_ONLY GLOBAL_VAR(max_long_data_size),\n       CMD_LINE(REQUIRED_ARG, OPT_MAX_LONG_DATA_SIZE),\n       VALID_RANGE(1024, UINT_MAX32), DEFAULT(1024*1024),\n       BLOCK_SIZE(1));\n\nstatic PolyLock_mutex PLock_prepared_stmt_count(&LOCK_prepared_stmt_count);\nstatic Sys_var_ulong Sys_max_prepared_stmt_count(\n       \"max_prepared_stmt_count\",\n       \"Maximum number of prepared statements in the server\",\n       GLOBAL_VAR(max_prepared_stmt_count), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 1024*1024), DEFAULT(16382), BLOCK_SIZE(1),\n       &PLock_prepared_stmt_count);\n\nstatic bool fix_max_relay_log_size(sys_var *self, THD *thd, enum_var_type type)\n{\n#ifdef HAVE_REPLICATION\n  active_mi->rli.relay_log.set_max_size(max_relay_log_size ?\n                                        max_relay_log_size: max_binlog_size);\n#endif\n  return false;\n}\nstatic Sys_var_ulong Sys_max_relay_log_size(\n       \"max_relay_log_size\",\n       \"If non-zero: relay log will be rotated automatically when the \"\n       \"size exceeds this value; if zero: when the size \"\n       \"exceeds max_binlog_size\",\n       GLOBAL_VAR(max_relay_log_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 1024L*1024*1024), DEFAULT(0), BLOCK_SIZE(IO_SIZE),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_max_relay_log_size));\n\nstatic Sys_var_ulong Sys_max_sort_length(\n       \"max_sort_length\",\n       \"The number of bytes to use when sorting BLOB or TEXT values (only \"\n       \"the first max_sort_length bytes of each value are used; the rest \"\n       \"are ignored)\",\n       SESSION_VAR(max_sort_length), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(4, 8192*1024L), DEFAULT(1024), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_max_sp_recursion_depth(\n       \"max_sp_recursion_depth\",\n       \"Maximum stored procedure recursion depth\",\n       SESSION_VAR(max_sp_recursion_depth), CMD_LINE(OPT_ARG),\n       VALID_RANGE(0, 255), DEFAULT(0), BLOCK_SIZE(1));\n\n\nstatic bool if_checking_enabled(sys_var *self, THD *thd,  set_var *var)\n{\n  if (session_readonly(self, thd, var))\n    return true;\n  \n  if (!max_user_connections_checking)\n  {\n    my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0), \"--max-user-connections=0\");\n    return true;\n  }\n\n  return false;\n}\n// non-standard session_value_ptr() here\nstatic Sys_var_max_user_conn Sys_max_user_connections(\n       \"max_user_connections\",\n       \"The maximum number of active connections for a single user \"\n       \"(0 = no limit)\",\n       SESSION_VAR(max_user_connections), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(-1, INT_MAX), DEFAULT(0), BLOCK_SIZE(1), NO_MUTEX_GUARD,\n       NOT_IN_BINLOG, ON_CHECK(if_checking_enabled));\n\nstatic Sys_var_ulong Sys_max_tmp_tables(\n       \"max_tmp_tables\",\n       \"Maximum number of temporary tables a client can keep open at a time\",\n       SESSION_VAR(max_tmp_tables), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, UINT_MAX), DEFAULT(32), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_max_write_lock_count(\n       \"max_write_lock_count\",\n       \"After this many write locks, allow some read locks to run in between\",\n       GLOBAL_VAR(max_write_lock_count), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, UINT_MAX), DEFAULT(UINT_MAX), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_min_examined_row_limit(\n       \"min_examined_row_limit\",\n       \"Don't write queries to slow log that examine fewer rows \"\n       \"than that\",\n       SESSION_VAR(min_examined_row_limit), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(0), BLOCK_SIZE(1));\n\n#ifdef _WIN32\nstatic Sys_var_mybool Sys_named_pipe(\n       \"named_pipe\", \"Enable the named pipe (NT)\",\n       READ_ONLY GLOBAL_VAR(opt_enable_named_pipe), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n#endif\n\n\nstatic bool check_net_buffer_length(sys_var *self, THD *thd,  set_var *var)\n{\n  longlong val;\n  if (session_readonly(self, thd, var))\n    return true;\n\n  val= var->save_result.ulonglong_value;\n  if (val > (longlong) global_system_variables.max_allowed_packet)\n  {\n    push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,\n                        WARN_OPTION_BELOW_LIMIT, ER(WARN_OPTION_BELOW_LIMIT),\n                        \"max_allowed_packet\", \"net_buffer_length\");\n  }\n  return false;\n}\nstatic Sys_var_ulong Sys_net_buffer_length(\n       \"net_buffer_length\",\n       \"Buffer length for TCP/IP and socket communication\",\n       SESSION_VAR(net_buffer_length), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1024, 1024*1024), DEFAULT(16384), BLOCK_SIZE(1024),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_net_buffer_length));\n\nstatic bool fix_net_read_timeout(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type != OPT_GLOBAL)\n    my_net_set_read_timeout(&thd->net, thd->variables.net_read_timeout);\n  return false;\n}\nstatic Sys_var_ulong Sys_net_read_timeout(\n       \"net_read_timeout\",\n       \"Number of seconds to wait for more data from a connection before \"\n       \"aborting the read\",\n       SESSION_VAR(net_read_timeout), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, LONG_TIMEOUT), DEFAULT(NET_READ_TIMEOUT), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_net_read_timeout));\n\nstatic bool fix_net_write_timeout(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type != OPT_GLOBAL)\n    my_net_set_write_timeout(&thd->net, thd->variables.net_write_timeout);\n  return false;\n}\nstatic Sys_var_ulong Sys_net_write_timeout(\n       \"net_write_timeout\",\n       \"Number of seconds to wait for a block to be written to a connection \"\n       \"before aborting the write\",\n       SESSION_VAR(net_write_timeout), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, LONG_TIMEOUT), DEFAULT(NET_WRITE_TIMEOUT), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_net_write_timeout));\n\nstatic bool fix_net_retry_count(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type != OPT_GLOBAL)\n    thd->net.retry_count=thd->variables.net_retry_count;\n  return false;\n}\nstatic Sys_var_ulong Sys_net_retry_count(\n       \"net_retry_count\",\n       \"If a read on a communication port is interrupted, retry this \"\n       \"many times before giving up\",\n       SESSION_VAR(net_retry_count), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, UINT_MAX), DEFAULT(MYSQLD_NET_RETRY_COUNT),\n       BLOCK_SIZE(1), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_net_retry_count));\n\nstatic Sys_var_mybool Sys_old_mode(\n       \"old\", \"Use compatible behavior from previous MariaDB version. See also --old-mode\",\n       SESSION_VAR(old_mode), CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\nstatic Sys_var_mybool Sys_old_alter_table(\n       \"old_alter_table\", \"Use old, non-optimized alter table\",\n       SESSION_VAR(old_alter_table), CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\nstatic bool check_old_passwords(sys_var *self, THD *thd, set_var *var)\n{\n  return mysql_user_table_is_in_short_password_format;\n}\nstatic Sys_var_mybool Sys_old_passwords(\n       \"old_passwords\",\n       \"Use old password encryption method (needed for 4.0 and older clients)\",\n       SESSION_VAR(old_passwords), CMD_LINE(OPT_ARG), DEFAULT(FALSE),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_old_passwords));\n\nstatic Sys_var_ulong Sys_open_files_limit(\n       \"open_files_limit\",\n       \"If this is not 0, then mysqld will use this value to reserve file \"\n       \"descriptors to use with setrlimit(). If this value is 0 then mysqld \"\n       \"will reserve max_connections*5 or max_connections + table_cache*2 \"\n       \"(whichever is larger) number of file descriptors\",\n       READ_ONLY GLOBAL_VAR(open_files_limit), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, OS_FILE_LIMIT), DEFAULT(0), BLOCK_SIZE(1));\n\n/// @todo change to enum\nstatic Sys_var_ulong Sys_optimizer_prune_level(\n       \"optimizer_prune_level\",\n       \"Controls the heuristic(s) applied during query optimization to prune \"\n       \"less-promising partial plans from the optimizer search space. \"\n       \"Meaning: 0 - do not apply any heuristic, thus perform exhaustive \"\n       \"search; 1 - prune plans based on number of retrieved rows\",\n       SESSION_VAR(optimizer_prune_level), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 1), DEFAULT(1), BLOCK_SIZE(1));\n\n/** Warns about deprecated value 63 */\nstatic bool fix_optimizer_search_depth(sys_var *self, THD *thd,\n                                       enum_var_type type)\n{\n  SV *sv= type == OPT_GLOBAL ? &global_system_variables : &thd->variables;\n  if (sv->optimizer_search_depth == MAX_TABLES+2)\n    WARN_DEPRECATED(thd, 6, 0, \"optimizer-search-depth=63\",\n                    \"a search depth less than 63\");\n  return false;\n}\n\nstatic Sys_var_ulong Sys_optimizer_search_depth(\n       \"optimizer_search_depth\",\n       \"Maximum depth of search performed by the query optimizer. Values \"\n       \"larger than the number of relations in a query result in better \"\n       \"query plans, but take longer to compile a query. Values smaller \"\n       \"than the number of tables in a relation result in faster \"\n       \"optimization, but may produce very bad query plans. If set to 0, \"\n       \"the system will automatically pick a reasonable value; if set to \"\n       \"63, the optimizer will switch to the original find_best search. \"\n       \"NOTE: The value 63 and its associated behaviour is deprecated\",\n       SESSION_VAR(optimizer_search_depth), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, MAX_TABLES+2), DEFAULT(MAX_TABLES+1), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_optimizer_search_depth));\n\n/* this is used in the sigsegv handler */\nexport const char *optimizer_switch_names[]=\n{\n  \"index_merge\",\"index_merge_union\",\"index_merge_sort_union\",\n  \"index_merge_intersection\",\"index_merge_sort_intersection\",\n  \"engine_condition_pushdown\",\n  \"index_condition_pushdown\",\n  \"derived_merge\", \"derived_with_keys\",\n  \"firstmatch\",\"loosescan\",\"materialization\",\"in_to_exists\",\"semijoin\",\n  \"partial_match_rowid_merge\",\n  \"partial_match_table_scan\",\n  \"subquery_cache\",\n  \"mrr\",\n  \"mrr_cost_based\",\n  \"mrr_sort_keys\",\n  \"outer_join_with_cache\",\n  \"semijoin_with_cache\",\n  \"join_cache_incremental\",\n  \"join_cache_hashed\",\n  \"join_cache_bka\",\n  \"optimize_join_buffer_size\",\n  \"table_elimination\",\n  \"extended_keys\",\n  \"default\", NullS\n};\n/** propagates changes to @@engine_condition_pushdown */\nstatic bool fix_optimizer_switch(sys_var *self, THD *thd,\n                                 enum_var_type type)\n{\n  SV *sv= (type == OPT_GLOBAL) ? &global_system_variables : &thd->variables;\n  sv->engine_condition_pushdown=\n    test(sv->optimizer_switch & OPTIMIZER_SWITCH_ENGINE_CONDITION_PUSHDOWN);\n  return false;\n}\nstatic Sys_var_flagset Sys_optimizer_switch(\n       \"optimizer_switch\",\n       \"optimizer_switch=option=val[,option=val...], where option is one of {\"\n        \"derived_merge, \"\n        \"derived_with_keys, \"\n        \"firstmatch, \"\n        \"in_to_exists, \"\n        \"engine_condition_pushdown, \"\n        \"index_condition_pushdown, \"\n        \"index_merge, \"\n        \"index_merge_intersection, \"\n        \"index_merge_sort_intersection, \"\n        \"index_merge_sort_union, \"\n        \"index_merge_union, \"\n        \"join_cache_bka, \"\n        \"join_cache_hashed, \"\n        \"join_cache_incremental, \"\n        \"loosescan, \"\n        \"materialization, \"\n        \"mrr, \"\n        \"mrr_cost_based, \"\n        \"mrr_sort_keys, \"\n        \"optimize_join_buffer_size, \"\n        \"outer_join_with_cache, \"\n        \"partial_match_rowid_merge, \"\n        \"partial_match_table_scan, \"\n        \"semijoin, \"\n        \"semijoin_with_cache, \"\n        \"subquery_cache, \"\n        \"table_elimination, \"\n        \"extended_keys \"\n       \"} and val is one of {on, off, default}\",\n       SESSION_VAR(optimizer_switch), CMD_LINE(REQUIRED_ARG),\n       optimizer_switch_names, DEFAULT(OPTIMIZER_SWITCH_DEFAULT),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(NULL),\n       ON_UPDATE(fix_optimizer_switch));\n\nstatic Sys_var_charptr Sys_pid_file(\n       \"pid_file\", \"Pid file used by safe_mysqld\",\n       READ_ONLY GLOBAL_VAR(pidfile_name_ptr), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_charptr Sys_plugin_dir(\n       \"plugin_dir\", \"Directory for plugins\",\n       READ_ONLY GLOBAL_VAR(opt_plugin_dir_ptr), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_uint Sys_port(\n       \"port\",\n       \"Port number to use for connection or 0 to default to, \"\n       \"my.cnf, $MYSQL_TCP_PORT, \"\n#if MYSQL_PORT_DEFAULT == 0\n       \"/etc/services, \"\n#endif\n       \"built-in default (\" STRINGIFY_ARG(MYSQL_PORT) \"), whatever comes first\",\n       READ_ONLY GLOBAL_VAR(mysqld_port), CMD_LINE(REQUIRED_ARG, 'P'),\n       VALID_RANGE(0, UINT_MAX32), DEFAULT(0), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_preload_buff_size(\n       \"preload_buffer_size\",\n       \"The size of the buffer that is allocated when preloading indexes\",\n       SESSION_VAR(preload_buff_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1024, 1024*1024*1024), DEFAULT(32768), BLOCK_SIZE(1));\n\nstatic Sys_var_uint Sys_protocol_version(\n       \"protocol_version\",\n       \"The version of the client/server protocol used by the MySQL server\",\n       READ_ONLY GLOBAL_VAR(protocol_version), NO_CMD_LINE,\n       VALID_RANGE(0, ~0), DEFAULT(PROTOCOL_VERSION), BLOCK_SIZE(1));\n\nstatic Sys_var_proxy_user Sys_proxy_user(\n       \"proxy_user\", \"The proxy user account name used when logging in\",\n       IN_SYSTEM_CHARSET);\n\nstatic Sys_var_external_user Sys_exterenal_user(\n       \"external_user\", \"The external user account used when logging in\",\n       IN_SYSTEM_CHARSET);\n\nstatic Sys_var_ulong Sys_read_buff_size(\n       \"read_buffer_size\",\n       \"Each thread that does a sequential scan allocates a buffer of \"\n       \"this size for each table it scans. If you do many sequential scans, \"\n       \"you may want to increase this value\",\n       SESSION_VAR(read_buff_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(IO_SIZE*2, INT_MAX32), DEFAULT(128*1024),\n       BLOCK_SIZE(IO_SIZE));\n\nstatic bool check_read_only(sys_var *self, THD *thd, set_var *var)\n{\n  /* Prevent self dead-lock */\n  if (thd->locked_tables_mode || thd->in_active_multi_stmt_transaction())\n  {\n    my_error(ER_LOCK_OR_ACTIVE_TRANSACTION, MYF(0));\n    return true;\n  }\n  return false;\n}\nstatic bool fix_read_only(sys_var *self, THD *thd, enum_var_type type)\n{\n  bool result= true;\n  my_bool new_read_only= read_only; // make a copy before releasing a mutex\n  DBUG_ENTER(\"sys_var_opt_readonly::update\");\n\n  if (read_only == FALSE || read_only == opt_readonly)\n  {\n    opt_readonly= read_only;\n    DBUG_RETURN(false);\n  }\n\n  if (check_read_only(self, thd, 0)) // just in case\n    goto end;\n\n  if (thd->global_read_lock.is_acquired())\n  {\n    /*\n      This connection already holds the global read lock.\n      This can be the case with:\n      - FLUSH TABLES WITH READ LOCK\n      - SET GLOBAL READ_ONLY = 1\n    */\n    opt_readonly= read_only;\n    DBUG_RETURN(false);\n  }\n\n  /*\n    READ_ONLY=1 prevents write locks from being taken on tables and\n    blocks transactions from committing. We therefore should make sure\n    that no such events occur while setting the read_only variable.\n    This is a 2 step process:\n    [1] lock_global_read_lock()\n      Prevents connections from obtaining new write locks on\n      tables. Note that we can still have active rw transactions.\n    [2] make_global_read_lock_block_commit()\n      Prevents transactions from committing.\n  */\n\n  read_only= opt_readonly;\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n\n  if (thd->global_read_lock.lock_global_read_lock(thd))\n    goto end_with_mutex_unlock;\n\n  if ((result= thd->global_read_lock.make_global_read_lock_block_commit(thd)))\n    goto end_with_read_lock;\n\n  /* Change the opt_readonly system variable, safe because the lock is held */\n  opt_readonly= new_read_only;\n  result= false;\n\n end_with_read_lock:\n  /* Release the lock */\n  thd->global_read_lock.unlock_global_read_lock(thd);\n end_with_mutex_unlock:\n  mysql_mutex_lock(&LOCK_global_system_variables);\n end:\n  read_only= opt_readonly;\n  DBUG_RETURN(result);\n}\n\n\n/**\n  The read_only boolean is always equal to the opt_readonly boolean except\n  during fix_read_only(); when that function is entered, opt_readonly is\n  the pre-update value and read_only is the post-update value.\n  fix_read_only() compares them and runs needed operations for the\n  transition (especially when transitioning from false to true) and\n  synchronizes both booleans in the end.\n*/\nstatic Sys_var_mybool Sys_readonly(\n       \"read_only\",\n       \"Make all non-temporary tables read-only, with the exception for \"\n       \"replication (slave) threads and users with the SUPER privilege\",\n       GLOBAL_VAR(read_only), CMD_LINE(OPT_ARG), DEFAULT(FALSE),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_read_only), ON_UPDATE(fix_read_only));\n\n// Small lower limit to be able to test MRR\nstatic Sys_var_ulong Sys_read_rnd_buff_size(\n       \"read_rnd_buffer_size\",\n       \"When reading rows in sorted order after a sort, the rows are read \"\n       \"through this buffer to avoid a disk seeks\",\n       SESSION_VAR(read_rnd_buff_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, INT_MAX32), DEFAULT(256*1024), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_div_precincrement(\n       \"div_precision_increment\", \"Precision of the result of '/' \"\n       \"operator will be increased on that value\",\n       SESSION_VAR(div_precincrement), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, DECIMAL_MAX_SCALE), DEFAULT(4), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_rpl_recovery_rank(\n       \"rpl_recovery_rank\", \"Unused, will be removed\",\n       GLOBAL_VAR(rpl_recovery_rank), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, ULONG_MAX), DEFAULT(0), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(0),\n       DEPRECATED(\"\"));\n\nstatic Sys_var_ulong Sys_range_alloc_block_size(\n       \"range_alloc_block_size\",\n       \"Allocation block size for storing ranges during optimization\",\n       SESSION_VAR(range_alloc_block_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(RANGE_ALLOC_BLOCK_SIZE, UINT_MAX),\n       DEFAULT(RANGE_ALLOC_BLOCK_SIZE), BLOCK_SIZE(1024));\n\nstatic Sys_var_ulong Sys_multi_range_count(\n       \"multi_range_count\", \"Ignored. Use mrr_buffer_size instead\",\n       SESSION_VAR(multi_range_count), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, ULONG_MAX), DEFAULT(256), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(0),\n       DEPRECATED(\"'@@mrr_buffer_size'\"));\n\nstatic bool fix_thd_mem_root(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type != OPT_GLOBAL)\n    reset_root_defaults(thd->mem_root,\n                        thd->variables.query_alloc_block_size,\n                        thd->variables.query_prealloc_size);\n  return false;\n}\nstatic Sys_var_ulong Sys_query_alloc_block_size(\n       \"query_alloc_block_size\",\n       \"Allocation block size for query parsing and execution\",\n       SESSION_VAR(query_alloc_block_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1024, UINT_MAX), DEFAULT(QUERY_ALLOC_BLOCK_SIZE),\n       BLOCK_SIZE(1024), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_thd_mem_root));\n\nstatic Sys_var_ulong Sys_query_prealloc_size(\n       \"query_prealloc_size\",\n       \"Persistent buffer for query parsing and execution\",\n       SESSION_VAR(query_prealloc_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(QUERY_ALLOC_PREALLOC_SIZE, UINT_MAX),\n       DEFAULT(QUERY_ALLOC_PREALLOC_SIZE),\n       BLOCK_SIZE(1024), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_thd_mem_root));\n\n#ifdef HAVE_SMEM\nstatic Sys_var_mybool Sys_shared_memory(\n       \"shared_memory\", \"Enable the shared memory\",\n       READ_ONLY GLOBAL_VAR(opt_enable_shared_memory), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\nstatic Sys_var_charptr Sys_shared_memory_base_name(\n       \"shared_memory_base_name\", \"Base name of shared memory\",\n       READ_ONLY GLOBAL_VAR(shared_memory_base_name), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n#endif\n\n// this has to be NO_CMD_LINE as the command-line option has a different name\nstatic Sys_var_mybool Sys_skip_external_locking(\n       \"skip_external_locking\", \"Don't use system (external) locking\",\n       READ_ONLY GLOBAL_VAR(my_disable_locking), NO_CMD_LINE, DEFAULT(TRUE));\n\nstatic Sys_var_mybool Sys_skip_networking(\n       \"skip_networking\", \"Don't allow connection with TCP/IP\",\n       READ_ONLY GLOBAL_VAR(opt_disable_networking), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\nstatic Sys_var_mybool Sys_skip_name_resolve(\n       \"skip_name_resolve\",\n       \"Don't resolve hostnames. All hostnames are IP's or 'localhost'.\",\n       READ_ONLY GLOBAL_VAR(opt_skip_name_resolve),\n       CMD_LINE(OPT_ARG, OPT_SKIP_RESOLVE),\n       DEFAULT(FALSE));\n\nstatic Sys_var_mybool Sys_skip_show_database(\n       \"skip_show_database\", \"Don't allow 'SHOW DATABASE' commands\",\n       READ_ONLY GLOBAL_VAR(opt_skip_show_db), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\nstatic Sys_var_charptr Sys_socket(\n       \"socket\", \"Socket file to use for connection\",\n       READ_ONLY GLOBAL_VAR(mysqld_unix_port), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\n/* \n  thread_concurrency is a no-op on all platforms since\n  MySQL 5.1.  It will be removed in the context of\n  WL#5265\n*/\nstatic Sys_var_ulong Sys_thread_concurrency(\n       \"thread_concurrency\",\n       \"Permits the application to give the threads system a hint for \"\n       \"the desired number of threads that should be run at the same time.\"\n       \"This variable has no effect, and is deprecated. \"\n       \"It will be removed in a future release.\",\n       READ_ONLY GLOBAL_VAR(concurrency),\n       CMD_LINE(REQUIRED_ARG, OPT_THREAD_CONCURRENCY),\n       VALID_RANGE(1, 512), DEFAULT(DEFAULT_CONCURRENCY), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(0),\n       DEPRECATED(\"\"));\n\nstatic Sys_var_ulonglong Sys_thread_stack(\n       \"thread_stack\", \"The stack size for each thread\",\n       READ_ONLY GLOBAL_VAR(my_thread_stack_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(128*1024, ULONGLONG_MAX), DEFAULT(DEFAULT_THREAD_STACK),\n       BLOCK_SIZE(1024));\n\nstatic Sys_var_charptr Sys_tmpdir(\n       \"tmpdir\", \"Path for temporary files. Several paths may \"\n       \"be specified, separated by a \"\n#if defined(__WIN__)\n       \"semicolon (;)\"\n#else\n       \"colon (:)\"\n#endif\n       \", in this case they are used in a round-robin fashion\",\n       READ_ONLY GLOBAL_VAR(opt_mysql_tmpdir), CMD_LINE(REQUIRED_ARG, 't'),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic bool fix_trans_mem_root(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type != OPT_GLOBAL)\n    reset_root_defaults(&thd->transaction.mem_root,\n                        thd->variables.trans_alloc_block_size,\n                        thd->variables.trans_prealloc_size);\n  return false;\n}\nstatic Sys_var_ulong Sys_trans_alloc_block_size(\n       \"transaction_alloc_block_size\",\n       \"Allocation block size for transactions to be stored in binary log\",\n       SESSION_VAR(trans_alloc_block_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1024, 128 * 1024 * 1024), DEFAULT(QUERY_ALLOC_BLOCK_SIZE),\n       BLOCK_SIZE(1024), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_trans_mem_root));\n\nstatic Sys_var_ulong Sys_trans_prealloc_size(\n       \"transaction_prealloc_size\",\n       \"Persistent buffer for transactions to be stored in binary log\",\n       SESSION_VAR(trans_prealloc_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1024, 128 * 1024 * 1024), DEFAULT(TRANS_ALLOC_PREALLOC_SIZE),\n       BLOCK_SIZE(1024), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_trans_mem_root));\n\nstatic const char *thread_handling_names[]=\n{\n  \"one-thread-per-connection\", \"no-threads\",\n#ifdef HAVE_POOL_OF_THREADS\n  \"pool-of-threads\",\n#endif\n  0\n};\n\n#if defined (_WIN32) && defined (HAVE_POOL_OF_THREADS)\n/* Windows is using OS threadpool, so we're pretty sure it works well */\n#define DEFAULT_THREAD_HANDLING 2\n#else\n#define DEFAULT_THREAD_HANDLING 0\n#endif\n\nstatic Sys_var_enum Sys_thread_handling(\n       \"thread_handling\",\n       \"Define threads usage for handling queries, one of \"\n       \"one-thread-per-connection, no-threads\"\n#ifdef HAVE_POOL_OF_THREADS\n       \", pool-of-threads\"\n#endif\n       , READ_ONLY GLOBAL_VAR(thread_handling), CMD_LINE(REQUIRED_ARG),\n       thread_handling_names, \n       DEFAULT(DEFAULT_THREAD_HANDLING)\n );\n\n#ifdef HAVE_QUERY_CACHE\nstatic bool check_query_cache_size(sys_var *self, THD *thd, set_var *var)\n{\n  if (global_system_variables.query_cache_type == 0 &&\n      var->value && var->value->val_int() != 0)\n  {\n    my_error(ER_QUERY_CACHE_DISABLED, MYF(0));\n    return true;\n  }\n\n  return false;\n}\nstatic bool fix_query_cache_size(sys_var *self, THD *thd, enum_var_type type)\n{\n  ulong new_cache_size= query_cache.resize(query_cache_size);\n  /*\n     Note: query_cache_size is a global variable reflecting the\n     requested cache size. See also query_cache_size_arg\n  */\n  if (query_cache_size != new_cache_size)\n    push_warning_printf(current_thd, MYSQL_ERROR::WARN_LEVEL_WARN,\n                        ER_WARN_QC_RESIZE, ER(ER_WARN_QC_RESIZE),\n                        query_cache_size, new_cache_size);\n\n  query_cache_size= new_cache_size;\n  return false;\n}\nstatic Sys_var_ulonglong Sys_query_cache_size(\n       \"query_cache_size\",\n       \"The memory allocated to store results from old queries\",\n       GLOBAL_VAR(query_cache_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, ULONG_MAX), DEFAULT(0), BLOCK_SIZE(1024),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_query_cache_size),\n       ON_UPDATE(fix_query_cache_size));\n\nstatic Sys_var_ulong Sys_query_cache_limit(\n       \"query_cache_limit\",\n       \"Don't cache results that are bigger than this\",\n       GLOBAL_VAR(query_cache.query_cache_limit), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(1024*1024), BLOCK_SIZE(1));\n\nstatic bool fix_qcache_min_res_unit(sys_var *self, THD *thd, enum_var_type type)\n{\n  query_cache_min_res_unit=\n    query_cache.set_min_res_unit(query_cache_min_res_unit);\n  return false;\n}\nstatic Sys_var_ulong Sys_query_cache_min_res_unit(\n       \"query_cache_min_res_unit\",\n       \"The minimum size for blocks allocated by the query cache\",\n       GLOBAL_VAR(query_cache_min_res_unit), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(QUERY_CACHE_MIN_RESULT_DATA_SIZE),\n       BLOCK_SIZE(8), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_qcache_min_res_unit));\n\nstatic const char *query_cache_type_names[]= { \"OFF\", \"ON\", \"DEMAND\", 0 };\nstatic bool check_query_cache_type(sys_var *self, THD *thd, set_var *var)\n{\n  if (query_cache.is_disable_in_progress())\n  {\n    my_error(ER_QUERY_CACHE_IS_DISABLED, MYF(0));\n    return true;\n  }\n  if (var->type != OPT_GLOBAL &&\n      global_system_variables.query_cache_type == 0 &&\n      var->value->val_int() != 0)\n  {\n    my_error(ER_QUERY_CACHE_IS_GLOBALY_DISABLED, MYF(0));\n    return true;\n  }\n\n  return false;\n}\nstatic bool fix_query_cache_type(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type != OPT_GLOBAL)\n    return false;\n\n  if (global_system_variables.query_cache_type != 0 &&\n      query_cache.is_disabled())\n  {\n    /* if disabling in progress variable will not be set */\n    DBUG_ASSERT(!query_cache.is_disable_in_progress());\n    /* Enable query cache because it was disabled */\n    fix_query_cache_size(0, thd, type);\n  }\n  else if (global_system_variables.query_cache_type == 0)\n    query_cache.disable_query_cache(thd);\n  return false;\n}\nstatic Sys_var_enum Sys_query_cache_type(\n       \"query_cache_type\",\n       \"OFF = Don't cache or retrieve results. ON = Cache all results \"\n       \"except SELECT SQL_NO_CACHE ... queries. DEMAND = Cache only \"\n       \"SELECT SQL_CACHE ... queries\",\n       SESSION_VAR(query_cache_type), CMD_LINE(REQUIRED_ARG),\n       query_cache_type_names, DEFAULT(1), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_query_cache_type),\n       ON_UPDATE(fix_query_cache_type));\n\nstatic Sys_var_mybool Sys_query_cache_wlock_invalidate(\n       \"query_cache_wlock_invalidate\",\n       \"Invalidate queries in query cache on LOCK for write\",\n       SESSION_VAR(query_cache_wlock_invalidate), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n#endif /* HAVE_QUERY_CACHE */\n\nstatic Sys_var_mybool Sys_secure_auth(\n       \"secure_auth\",\n       \"Disallow authentication for accounts that have old (pre-4.1) \"\n       \"passwords\",\n       GLOBAL_VAR(opt_secure_auth), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\nstatic Sys_var_charptr Sys_secure_file_priv(\n       \"secure_file_priv\",\n       \"Limit LOAD DATA, SELECT ... OUTFILE, and LOAD_FILE() to files \"\n       \"within specified directory\",\n       PREALLOCATED READ_ONLY GLOBAL_VAR(opt_secure_file_priv),\n       CMD_LINE(REQUIRED_ARG), IN_FS_CHARSET, DEFAULT(0));\n\nstatic bool fix_server_id(sys_var *self, THD *thd, enum_var_type type)\n{\n  server_id_supplied = 1;\n  thd->server_id= server_id;\n  return false;\n}\nstatic Sys_var_ulong Sys_server_id(\n       \"server_id\",\n       \"Uniquely identifies the server instance in the community of \"\n       \"replication partners\",\n       GLOBAL_VAR(server_id), CMD_LINE(REQUIRED_ARG, OPT_SERVER_ID),\n       VALID_RANGE(0, UINT_MAX32), DEFAULT(0), BLOCK_SIZE(1), NO_MUTEX_GUARD,\n       NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(fix_server_id));\n\nstatic Sys_var_mybool Sys_slave_compressed_protocol(\n       \"slave_compressed_protocol\",\n       \"Use compression on master/slave protocol\",\n       GLOBAL_VAR(opt_slave_compressed_protocol), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\n#ifdef HAVE_REPLICATION\nstatic const char *slave_exec_mode_names[]= {\"STRICT\", \"IDEMPOTENT\", 0};\nstatic Sys_var_enum Slave_exec_mode(\n       \"slave_exec_mode\",\n       \"Modes for how replication events should be executed. Legal values \"\n       \"are STRICT (default) and IDEMPOTENT. In IDEMPOTENT mode, \"\n       \"replication will not stop for operations that are idempotent. \"\n       \"In STRICT mode, replication will stop on any unexpected difference \"\n       \"between the master and the slave\",\n       GLOBAL_VAR(slave_exec_mode_options), CMD_LINE(REQUIRED_ARG),\n       slave_exec_mode_names, DEFAULT(SLAVE_EXEC_MODE_STRICT));\n\nstatic const char *slave_type_conversions_name[]= {\"ALL_LOSSY\", \"ALL_NON_LOSSY\", 0};\nstatic Sys_var_set Slave_type_conversions(\n       \"slave_type_conversions\",\n       \"Set of slave type conversions that are enabled. Legal values are:\"\n       \" ALL_LOSSY to enable lossy conversions and\"\n       \" ALL_NON_LOSSY to enable non-lossy conversions.\"\n       \" If the variable is assigned the empty set, no conversions are\"\n       \" allowed and it is expected that the types match exactly.\",\n       GLOBAL_VAR(slave_type_conversions_options), CMD_LINE(REQUIRED_ARG),\n       slave_type_conversions_name,\n       DEFAULT(0));\n\nstatic Sys_var_mybool Sys_slave_sql_verify_checksum(\n       \"slave_sql_verify_checksum\",\n       \"Force checksum verification of replication events after reading them \"\n       \"from relay log. Note: Events are always checksum-verified by slave on \"\n       \"receiving them from the network before writing them to the relay log\",\n       GLOBAL_VAR(opt_slave_sql_verify_checksum), CMD_LINE(OPT_ARG),\n       DEFAULT(TRUE));\n\nstatic Sys_var_mybool Sys_master_verify_checksum(\n       \"master_verify_checksum\",\n       \"Force checksum verification of logged events in the binary log before \"\n       \"sending them to slaves or printing them in the output of \"\n       \"SHOW BINLOG EVENTS\",\n       GLOBAL_VAR(opt_master_verify_checksum), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\n/* These names must match RPL_SKIP_XXX #defines in slave.h. */\nstatic const char *replicate_events_marked_for_skip_names[]= {\n  \"replicate\", \"filter_on_slave\", \"filter_on_master\", 0\n};\nstatic bool\nreplicate_events_marked_for_skip_check(sys_var *self, THD *thd,\n                                                set_var *var)\n{\n  int thread_mask;\n  DBUG_ENTER(\"sys_var_replicate_events_marked_for_skip_check\");\n\n  /* Slave threads must be stopped to change the variable. */\n  mysql_mutex_lock(&LOCK_active_mi);\n  lock_slave_threads(active_mi);\n  init_thread_mask(&thread_mask, active_mi, 0 /*not inverse*/);\n  unlock_slave_threads(active_mi);\n  mysql_mutex_unlock(&LOCK_active_mi);\n\n  if (thread_mask) // We refuse if any slave thread is running\n  {\n    my_error(ER_SLAVE_MUST_STOP, MYF(0));\n    DBUG_RETURN(true);\n  }\n  DBUG_RETURN(false);\n}\nbool\nSys_var_replicate_events_marked_for_skip::global_update(THD *thd, set_var *var)\n{\n  bool result;\n  int thread_mask;\n  DBUG_ENTER(\"Sys_var_replicate_events_marked_for_skip::global_update\");\n\n  /* Slave threads must be stopped to change the variable. */\n  mysql_mutex_lock(&LOCK_active_mi);\n  lock_slave_threads(active_mi);\n  init_thread_mask(&thread_mask, active_mi, 0 /*not inverse*/);\n  if (thread_mask) // We refuse if any slave thread is running\n  {\n    my_error(ER_SLAVE_MUST_STOP, MYF(0));\n    result= true;\n  }\n  else\n    result= Sys_var_enum::global_update(thd, var);\n\n  unlock_slave_threads(active_mi);\n  mysql_mutex_unlock(&LOCK_active_mi);\n  DBUG_RETURN(result);\n}\nstatic Sys_var_replicate_events_marked_for_skip Replicate_events_marked_for_skip\n   (\"replicate_events_marked_for_skip\",\n   \"Whether the slave should replicate events that were created with \"\n   \"@@skip_replication=1 on the master. Default REPLICATE (no events are \"\n   \"skipped). Other values are FILTER_ON_SLAVE (events will be sent by the \"\n   \"master but ignored by the slave) and FILTER_ON_MASTER (events marked with \"\n   \"@@skip_replication=1 will be filtered on the master and never be sent to \"\n   \"the slave).\",\n   GLOBAL_VAR(opt_replicate_events_marked_for_skip), CMD_LINE(REQUIRED_ARG),\n   replicate_events_marked_for_skip_names, DEFAULT(RPL_SKIP_REPLICATE),\n   NO_MUTEX_GUARD, NOT_IN_BINLOG,\n   ON_CHECK(replicate_events_marked_for_skip_check));\n#endif\n\n\nstatic Sys_var_ulong Sys_slow_launch_time(\n       \"slow_launch_time\",\n       \"If creating the thread takes longer than this value (in seconds), \"\n       \"the Slow_launch_threads counter will be incremented\",\n       GLOBAL_VAR(slow_launch_time), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, LONG_TIMEOUT), DEFAULT(2), BLOCK_SIZE(1));\n\nstatic Sys_var_ulonglong Sys_sort_buffer(\n       \"sort_buffer_size\",\n       \"Each thread that needs to do a sort allocates a buffer of this size\",\n       SESSION_VAR(sortbuff_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(MIN_SORT_MEMORY, SIZE_T_MAX), DEFAULT(MAX_SORT_MEMORY),\n       BLOCK_SIZE(1));\n\nexport ulonglong expand_sql_mode(ulonglong sql_mode)\n{\n  if (sql_mode & MODE_ANSI)\n  {\n    /*\n      Note that we dont set\n      MODE_NO_KEY_OPTIONS | MODE_NO_TABLE_OPTIONS | MODE_NO_FIELD_OPTIONS\n      to allow one to get full use of MySQL in this mode.\n\n      MODE_ONLY_FULL_GROUP_BY was removed from ANSI mode because it is\n      currently overly restrictive (see BUG#8510).\n    */\n    sql_mode|= (MODE_REAL_AS_FLOAT | MODE_PIPES_AS_CONCAT | MODE_ANSI_QUOTES |\n                MODE_IGNORE_SPACE);\n  }\n  if (sql_mode & MODE_ORACLE)\n    sql_mode|= (MODE_PIPES_AS_CONCAT | MODE_ANSI_QUOTES |\n                MODE_IGNORE_SPACE |\n                MODE_NO_KEY_OPTIONS | MODE_NO_TABLE_OPTIONS |\n                MODE_NO_FIELD_OPTIONS | MODE_NO_AUTO_CREATE_USER);\n  if (sql_mode & MODE_MSSQL)\n    sql_mode|= (MODE_PIPES_AS_CONCAT | MODE_ANSI_QUOTES |\n                MODE_IGNORE_SPACE |\n                MODE_NO_KEY_OPTIONS | MODE_NO_TABLE_OPTIONS |\n                MODE_NO_FIELD_OPTIONS);\n  if (sql_mode & MODE_POSTGRESQL)\n    sql_mode|= (MODE_PIPES_AS_CONCAT | MODE_ANSI_QUOTES |\n                MODE_IGNORE_SPACE |\n                MODE_NO_KEY_OPTIONS | MODE_NO_TABLE_OPTIONS |\n                MODE_NO_FIELD_OPTIONS);\n  if (sql_mode & MODE_DB2)\n    sql_mode|= (MODE_PIPES_AS_CONCAT | MODE_ANSI_QUOTES |\n                MODE_IGNORE_SPACE |\n                MODE_NO_KEY_OPTIONS | MODE_NO_TABLE_OPTIONS |\n                MODE_NO_FIELD_OPTIONS);\n  if (sql_mode & MODE_MAXDB)\n    sql_mode|= (MODE_PIPES_AS_CONCAT | MODE_ANSI_QUOTES |\n                MODE_IGNORE_SPACE |\n                MODE_NO_KEY_OPTIONS | MODE_NO_TABLE_OPTIONS |\n                MODE_NO_FIELD_OPTIONS | MODE_NO_AUTO_CREATE_USER);\n  if (sql_mode & MODE_MYSQL40)\n    sql_mode|= MODE_HIGH_NOT_PRECEDENCE;\n  if (sql_mode & MODE_MYSQL323)\n    sql_mode|= MODE_HIGH_NOT_PRECEDENCE;\n  if (sql_mode & MODE_TRADITIONAL)\n    sql_mode|= (MODE_STRICT_TRANS_TABLES | MODE_STRICT_ALL_TABLES |\n                MODE_NO_ZERO_IN_DATE | MODE_NO_ZERO_DATE |\n                MODE_ERROR_FOR_DIVISION_BY_ZERO | MODE_NO_AUTO_CREATE_USER |\n                MODE_NO_ENGINE_SUBSTITUTION);\n  return sql_mode;\n}\nstatic bool check_sql_mode(sys_var *self, THD *thd, set_var *var)\n{\n  var->save_result.ulonglong_value=\n    expand_sql_mode(var->save_result.ulonglong_value);\n  return false;\n}\nstatic bool fix_sql_mode(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type != OPT_GLOBAL)\n  {\n    /* Update thd->server_status */\n    if (thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES)\n      thd->server_status|= SERVER_STATUS_NO_BACKSLASH_ESCAPES;\n    else\n      thd->server_status&= ~SERVER_STATUS_NO_BACKSLASH_ESCAPES;\n  }\n  return false;\n}\n/*\n  WARNING: When adding new SQL modes don't forget to update the\n  tables definitions that stores it's value (ie: mysql.event, mysql.proc)\n*/\nstatic const char *sql_mode_names[]=\n{\n  \"REAL_AS_FLOAT\", \"PIPES_AS_CONCAT\", \"ANSI_QUOTES\", \"IGNORE_SPACE\",\n  \"IGNORE_BAD_TABLE_OPTIONS\",\n  \"ONLY_FULL_GROUP_BY\", \"NO_UNSIGNED_SUBTRACTION\", \"NO_DIR_IN_CREATE\",\n  \"POSTGRESQL\", \"ORACLE\", \"MSSQL\", \"DB2\", \"MAXDB\", \"NO_KEY_OPTIONS\",\n  \"NO_TABLE_OPTIONS\", \"NO_FIELD_OPTIONS\", \"MYSQL323\", \"MYSQL40\", \"ANSI\",\n  \"NO_AUTO_VALUE_ON_ZERO\", \"NO_BACKSLASH_ESCAPES\", \"STRICT_TRANS_TABLES\",\n  \"STRICT_ALL_TABLES\", \"NO_ZERO_IN_DATE\", \"NO_ZERO_DATE\",\n  \"ALLOW_INVALID_DATES\", \"ERROR_FOR_DIVISION_BY_ZERO\", \"TRADITIONAL\",\n  \"NO_AUTO_CREATE_USER\", \"HIGH_NOT_PRECEDENCE\", \"NO_ENGINE_SUBSTITUTION\",\n  \"PAD_CHAR_TO_FULL_LENGTH\",\n  0\n};\nexport bool sql_mode_string_representation(THD *thd, ulonglong sql_mode,\n                                           LEX_STRING *ls)\n{\n  set_to_string(thd, ls, sql_mode, sql_mode_names);\n  return ls->str == 0;\n}\n/*\n  sql_mode should *not* be IN_BINLOG: even though it is written to the binlog,\n  the slave ignores the MODE_NO_DIR_IN_CREATE variable, so slave's value\n  differs from master's (see log_event.cc: Query_log_event::do_apply_event()).\n*/\nstatic Sys_var_set Sys_sql_mode(\n       \"sql_mode\",\n       \"Syntax: sql-mode=mode[,mode[,mode...]]. See the manual for the \"\n       \"complete list of valid sql modes\",\n       SESSION_VAR(sql_mode), CMD_LINE(REQUIRED_ARG),\n       sql_mode_names, DEFAULT(0), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_sql_mode), ON_UPDATE(fix_sql_mode));\n\nstatic const char *old_mode_names[]=\n{\n  \"NO_DUP_KEY_WARNINGS_WITH_IGNORE\", \"NO_PROGRESS_INFO\",\n  0\n};\n\nexport bool old_mode_string_representation(THD *thd, ulonglong sql_mode,\n                                           LEX_STRING *ls)\n{\n  set_to_string(thd, ls, sql_mode, old_mode_names);\n  return ls->str == 0;\n}\n/*\n  sql_mode should *not* be IN_BINLOG as the slave can't remember this\n  anyway on restart.\n*/\nstatic Sys_var_set Sys_old_behavior(\n       \"old_mode\",\n       \"Used to emulate old behavior from earlier MariaDB or MySQL versions. \"\n       \"Syntax: old_mode=mode[,mode[,mode...]]. \"\n       \"See the manual for the complete list of valid old modes\",\n       SESSION_VAR(old_behavior), CMD_LINE(REQUIRED_ARG),\n       old_mode_names, DEFAULT(0), NO_MUTEX_GUARD, NOT_IN_BINLOG);\n\n#if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)\n#define SSL_OPT(X) CMD_LINE(REQUIRED_ARG,X)\n#else\n#define SSL_OPT(X) NO_CMD_LINE\n#endif\n\nstatic Sys_var_charptr Sys_ssl_ca(\n       \"ssl_ca\",\n       \"CA file in PEM format (check OpenSSL docs, implies --ssl)\",\n       READ_ONLY GLOBAL_VAR(opt_ssl_ca), SSL_OPT(OPT_SSL_CA),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_charptr Sys_ssl_capath(\n       \"ssl_capath\",\n       \"CA directory (check OpenSSL docs, implies --ssl)\",\n       READ_ONLY GLOBAL_VAR(opt_ssl_capath), SSL_OPT(OPT_SSL_CAPATH),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_charptr Sys_ssl_cert(\n       \"ssl_cert\", \"X509 cert in PEM format (implies --ssl)\",\n       READ_ONLY GLOBAL_VAR(opt_ssl_cert), SSL_OPT(OPT_SSL_CERT),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_charptr Sys_ssl_cipher(\n       \"ssl_cipher\", \"SSL cipher to use (implies --ssl)\",\n       READ_ONLY GLOBAL_VAR(opt_ssl_cipher), SSL_OPT(OPT_SSL_CIPHER),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_charptr Sys_ssl_key(\n       \"ssl_key\", \"X509 key in PEM format (implies --ssl)\",\n       READ_ONLY GLOBAL_VAR(opt_ssl_key), SSL_OPT(OPT_SSL_KEY),\n       IN_FS_CHARSET, DEFAULT(0));\n\n// why ENUM and not BOOL ?\nstatic const char *updatable_views_with_limit_names[]= {\"NO\", \"YES\", 0};\nstatic Sys_var_enum Sys_updatable_views_with_limit(\n       \"updatable_views_with_limit\",\n       \"YES = Don't issue an error message (warning only) if a VIEW without \"\n       \"presence of a key of the underlying table is used in queries with a \"\n       \"LIMIT clause for updating. NO = Prohibit update of a VIEW, which \"\n       \"does not contain a key of the underlying table and the query uses \"\n       \"a LIMIT clause (usually get from GUI tools)\",\n       SESSION_VAR(updatable_views_with_limit), CMD_LINE(REQUIRED_ARG),\n       updatable_views_with_limit_names, DEFAULT(TRUE));\n\nstatic Sys_var_mybool Sys_sync_frm(\n       \"sync_frm\", \"Sync .frm files to disk on creation\",\n       GLOBAL_VAR(opt_sync_frm), CMD_LINE(OPT_ARG),\n       DEFAULT(TRUE));\n\nstatic char *system_time_zone_ptr;\nstatic Sys_var_charptr Sys_system_time_zone(\n       \"system_time_zone\", \"The server system time zone\",\n       READ_ONLY GLOBAL_VAR(system_time_zone_ptr), NO_CMD_LINE,\n       IN_SYSTEM_CHARSET, DEFAULT(system_time_zone));\n\nstatic Sys_var_ulong Sys_table_def_size(\n       \"table_definition_cache\",\n       \"The number of cached table definitions\",\n       GLOBAL_VAR(table_def_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(TABLE_DEF_CACHE_MIN, 512*1024),\n       DEFAULT(TABLE_DEF_CACHE_DEFAULT), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_table_cache_size(\n       \"table_open_cache\", \"The number of cached open tables\",\n       GLOBAL_VAR(table_cache_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, 512*1024), DEFAULT(TABLE_OPEN_CACHE_DEFAULT),\n       BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_thread_cache_size(\n       \"thread_cache_size\",\n       \"How many threads we should keep in a cache for reuse\",\n       GLOBAL_VAR(thread_cache_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 16384), DEFAULT(0), BLOCK_SIZE(1));\n\n#ifdef HAVE_POOL_OF_THREADS\nstatic bool fix_tp_max_threads(sys_var *, THD *, enum_var_type)\n{\n#ifdef _WIN32\n  tp_set_max_threads(threadpool_max_threads);\n#endif\n  return false;\n}\n\n\n#ifdef _WIN32\nstatic bool fix_tp_min_threads(sys_var *, THD *, enum_var_type)\n{\n  tp_set_min_threads(threadpool_min_threads);\n  return false;\n}\n#endif\n\n\n#ifndef  _WIN32\nstatic bool check_threadpool_size(sys_var *self, THD *thd, set_var *var)\n{\n  ulonglong v= var->save_result.ulonglong_value;\n  if (v > threadpool_max_size)\n  {\n    var->save_result.ulonglong_value= threadpool_max_size;\n    return throw_bounds_warning(thd, self->name.str, true, true, v);\n  }\n  return false;\n}\n\n\nstatic bool fix_threadpool_size(sys_var*, THD*, enum_var_type)\n{\n  tp_set_threadpool_size(threadpool_size);\n  return false;\n}\n\n\nstatic bool fix_threadpool_stall_limit(sys_var*, THD*, enum_var_type)\n{\n  tp_set_threadpool_stall_limit(threadpool_stall_limit);\n  return false;\n}\n#endif\n\n#ifdef _WIN32\nstatic Sys_var_uint Sys_threadpool_min_threads(\n  \"thread_pool_min_threads\",\n  \"Minimum number of threads in the thread pool.\",\n  GLOBAL_VAR(threadpool_min_threads), CMD_LINE(REQUIRED_ARG),\n  VALID_RANGE(1, 256), DEFAULT(1), BLOCK_SIZE(1),\n  NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n  ON_UPDATE(fix_tp_min_threads)\n  );\n#else\nstatic Sys_var_uint Sys_threadpool_idle_thread_timeout(\n  \"thread_pool_idle_timeout\",\n  \"Timeout in seconds for an idle thread in the thread pool.\"\n  \"Worker thread will be shut down after timeout\",\n  GLOBAL_VAR(threadpool_idle_timeout), CMD_LINE(REQUIRED_ARG),\n  VALID_RANGE(1, UINT_MAX), DEFAULT(60), BLOCK_SIZE(1)\n);\nstatic Sys_var_uint Sys_threadpool_oversubscribe(\n  \"thread_pool_oversubscribe\",\n  \"How many additional active worker threads in a group are allowed.\",\n  GLOBAL_VAR(threadpool_oversubscribe), CMD_LINE(REQUIRED_ARG),\n  VALID_RANGE(1, 1000), DEFAULT(3), BLOCK_SIZE(1)\n);\nstatic Sys_var_uint Sys_threadpool_size(\n \"thread_pool_size\",\n \"Number of thread groups in the pool. \"\n \"This parameter is roughly equivalent to maximum number of concurrently \"\n \"executing threads (threads in a waiting state do not count as executing).\",\n  GLOBAL_VAR(threadpool_size), CMD_LINE(REQUIRED_ARG),\n  VALID_RANGE(1, MAX_THREAD_GROUPS), DEFAULT(my_getncpus()), BLOCK_SIZE(1),\n  NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_threadpool_size),\n  ON_UPDATE(fix_threadpool_size)\n);\nstatic Sys_var_uint Sys_threadpool_stall_limit(\n \"thread_pool_stall_limit\",\n \"Maximum query execution time in milliseconds,\"\n \"before an executing non-yielding thread is considered stalled.\"\n \"If a worker thread is stalled, additional worker thread \"\n \"may be created to handle remaining clients.\",\n  GLOBAL_VAR(threadpool_stall_limit), CMD_LINE(REQUIRED_ARG),\n  VALID_RANGE(10, UINT_MAX), DEFAULT(500), BLOCK_SIZE(1),\n  NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0), \n  ON_UPDATE(fix_threadpool_stall_limit)\n);\n#endif /* !WIN32 */\nstatic Sys_var_uint Sys_threadpool_max_threads(\n  \"thread_pool_max_threads\",\n  \"Maximum allowed number of worker threads in the thread pool\",\n   GLOBAL_VAR(threadpool_max_threads), CMD_LINE(REQUIRED_ARG),\n   VALID_RANGE(1, 65536), DEFAULT(500), BLOCK_SIZE(1),\n   NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0), \n   ON_UPDATE(fix_tp_max_threads)\n);\n#endif /* HAVE_POOL_OF_THREADS */\n\n/**\n  Can't change the 'next' tx_isolation if we are already in a\n  transaction.\n*/\n\nstatic bool check_tx_isolation(sys_var *self, THD *thd, set_var *var)\n{\n  if (var->type == OPT_DEFAULT && thd->in_active_multi_stmt_transaction())\n  {\n    DBUG_ASSERT(thd->in_multi_stmt_transaction_mode());\n    my_error(ER_CANT_CHANGE_TX_ISOLATION, MYF(0));\n    return TRUE;\n  }\n  return FALSE;\n}\n\n// NO_CMD_LINE - different name of the option\nstatic Sys_var_tx_isolation Sys_tx_isolation(\n       \"tx_isolation\", \"Default transaction isolation level\",\n       SESSION_VAR(tx_isolation), NO_CMD_LINE,\n       tx_isolation_names, DEFAULT(ISO_REPEATABLE_READ),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_tx_isolation));\n\nstatic Sys_var_ulonglong Sys_tmp_table_size(\n       \"tmp_table_size\",\n       \"If an internal in-memory temporary table exceeds this size, MySQL \"\n       \"will automatically convert it to an on-disk MyISAM or Aria table\",\n       SESSION_VAR(tmp_table_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1024, (ulonglong)~(intptr)0), DEFAULT(16*1024*1024),\n       BLOCK_SIZE(1));\n\nstatic Sys_var_mybool Sys_timed_mutexes(\n       \"timed_mutexes\",\n       \"Specify whether to time mutexes. Deprecated, has no effect.\",\n       GLOBAL_VAR(timed_mutexes), CMD_LINE(OPT_ARG), DEFAULT(0),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(NULL), ON_UPDATE(NULL),\n       DEPRECATED(\"\"));\n\nstatic char *server_version_ptr;\nstatic Sys_var_charptr Sys_version(\n       \"version\", \"Server version\",\n       READ_ONLY GLOBAL_VAR(server_version_ptr), NO_CMD_LINE,\n       IN_SYSTEM_CHARSET, DEFAULT(server_version));\n\nstatic char *server_version_comment_ptr;\nstatic Sys_var_charptr Sys_version_comment(\n       \"version_comment\", \"version_comment\",\n       READ_ONLY GLOBAL_VAR(server_version_comment_ptr), NO_CMD_LINE,\n       IN_SYSTEM_CHARSET, DEFAULT(MYSQL_COMPILATION_COMMENT));\n\nstatic char *server_version_compile_machine_ptr;\nstatic Sys_var_charptr Sys_version_compile_machine(\n       \"version_compile_machine\", \"version_compile_machine\",\n       READ_ONLY GLOBAL_VAR(server_version_compile_machine_ptr), NO_CMD_LINE,\n       IN_SYSTEM_CHARSET, DEFAULT(MACHINE_TYPE));\n\nstatic char *server_version_compile_os_ptr;\nstatic Sys_var_charptr Sys_version_compile_os(\n       \"version_compile_os\", \"version_compile_os\",\n       READ_ONLY GLOBAL_VAR(server_version_compile_os_ptr), NO_CMD_LINE,\n       IN_SYSTEM_CHARSET, DEFAULT(SYSTEM_TYPE));\n\nstatic Sys_var_ulong Sys_net_wait_timeout(\n       \"wait_timeout\",\n       \"The number of seconds the server waits for activity on a \"\n       \"connection before closing it\",\n       SESSION_VAR(net_wait_timeout), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, IF_WIN(INT_MAX32/1000, LONG_TIMEOUT)),\n       DEFAULT(NET_WAIT_TIMEOUT), BLOCK_SIZE(1));\n\n/** propagates changes to the relevant flag of @@optimizer_switch */\nstatic bool fix_engine_condition_pushdown(sys_var *self, THD *thd,\n                                          enum_var_type type)\n{\n  SV *sv= (type == OPT_GLOBAL) ? &global_system_variables : &thd->variables;\n  if (sv->engine_condition_pushdown)\n    sv->optimizer_switch|= OPTIMIZER_SWITCH_ENGINE_CONDITION_PUSHDOWN;\n  else\n    sv->optimizer_switch&= ~OPTIMIZER_SWITCH_ENGINE_CONDITION_PUSHDOWN;\n  return false;\n}\nstatic Sys_var_mybool Sys_engine_condition_pushdown(\n       \"engine_condition_pushdown\",\n       \"Push supported query conditions to the storage engine.\"\n       \" Deprecated, use --optimizer-switch instead.\",\n       SESSION_VAR(engine_condition_pushdown),\n       CMD_LINE(OPT_ARG, OPT_ENGINE_CONDITION_PUSHDOWN),\n       DEFAULT(TRUE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(NULL),\n       ON_UPDATE(fix_engine_condition_pushdown),\n       DEPRECATED(\"'@@optimizer_switch'\"));\n\nstatic Sys_var_plugin Sys_default_storage_engine(\n       \"default_storage_engine\", \"The default storage engine for new tables\",\n       SESSION_VAR(table_plugin), NO_CMD_LINE,\n       MYSQL_STORAGE_ENGINE_PLUGIN, DEFAULT(&default_storage_engine),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_not_null));\n\n//  Alias for @@default_storage_engine\nstatic Sys_var_plugin Sys_storage_engine(\n       \"storage_engine\", \"Alias for @@default_storage_engine. Deprecated\",\n       SESSION_VAR(table_plugin), NO_CMD_LINE,\n       MYSQL_STORAGE_ENGINE_PLUGIN, DEFAULT(&default_storage_engine),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_not_null));\n\n#if defined(ENABLED_DEBUG_SYNC)\n/*\n  Variable can be set for the session only.\n\n  This could be changed later. Then we need to have a global array of\n  actions in addition to the thread local ones. SET GLOBAL would\n  manage the global array, SET [SESSION] the local array. A sync point\n  would need to look for a local and a global action. Setting and\n  executing of global actions need to be protected by a mutex.\n\n  The purpose of global actions could be to allow synchronizing with\n  connectionless threads that cannot execute SET statements.\n*/\nstatic Sys_var_debug_sync Sys_debug_sync(\n       \"debug_sync\", \"Debug Sync Facility\",\n       sys_var::ONLY_SESSION, NO_CMD_LINE,\n       DEFAULT(0), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_has_super));\n#endif /* defined(ENABLED_DEBUG_SYNC) */\n\n/**\n \"time_format\" \"date_format\" \"datetime_format\"\n\n  the following three variables are unused, and the source of confusion\n  (bug reports like \"I've changed date_format, but date format hasn't changed.\n  I've made them read-only, to alleviate the situation somewhat.\n\n  @todo make them NO_CMD_LINE ?\n*/\nstatic Sys_var_charptr Sys_date_format(\n       \"date_format\", \"The DATE format (ignored)\",\n       READ_ONLY GLOBAL_VAR(global_date_format.format.str),\n       CMD_LINE(REQUIRED_ARG), IN_SYSTEM_CHARSET,\n       DEFAULT(known_date_time_formats[ISO_FORMAT].date_format));\n\nstatic Sys_var_charptr Sys_datetime_format(\n       \"datetime_format\", \"The DATETIME format (ignored)\",\n       READ_ONLY GLOBAL_VAR(global_datetime_format.format.str),\n       CMD_LINE(REQUIRED_ARG), IN_SYSTEM_CHARSET,\n       DEFAULT(known_date_time_formats[ISO_FORMAT].datetime_format));\n\nstatic Sys_var_charptr Sys_time_format(\n       \"time_format\", \"The TIME format (ignored)\",\n       READ_ONLY GLOBAL_VAR(global_time_format.format.str),\n       CMD_LINE(REQUIRED_ARG), IN_SYSTEM_CHARSET,\n       DEFAULT(known_date_time_formats[ISO_FORMAT].time_format));\n\nstatic bool fix_autocommit(sys_var *self, THD *thd, enum_var_type type)\n{\n  if (type == OPT_GLOBAL)\n  {\n    if (global_system_variables.option_bits & OPTION_AUTOCOMMIT)\n      global_system_variables.option_bits&= ~OPTION_NOT_AUTOCOMMIT;\n    else\n      global_system_variables.option_bits|= OPTION_NOT_AUTOCOMMIT;\n    return false;\n  }\n\n  if (thd->variables.option_bits & OPTION_AUTOCOMMIT &&\n      thd->variables.option_bits & OPTION_NOT_AUTOCOMMIT)\n  { // activating autocommit\n\n    if (trans_commit_stmt(thd) || trans_commit(thd))\n    {\n      thd->variables.option_bits&= ~OPTION_AUTOCOMMIT;\n      return true;\n    }\n    /*\n      Don't close thread tables or release metadata locks: if we do so, we\n      risk releasing locks/closing tables of expressions used to assign\n      other variables, as in:\n      set @var=my_stored_function1(), @@autocommit=1, @var2=(select max(a)\n      from my_table), ...\n      The locks will be released at statement end anyway, as SET\n      statement that assigns autocommit is marked to commit\n      transaction implicitly at the end (@sa stmt_causes_implicitcommit()).\n    */\n    thd->variables.option_bits&=\n                 ~(OPTION_BEGIN | OPTION_KEEP_LOG | OPTION_NOT_AUTOCOMMIT);\n    thd->transaction.all.modified_non_trans_table= false;\n    thd->server_status|= SERVER_STATUS_AUTOCOMMIT;\n    return false;\n  }\n\n  if (!(thd->variables.option_bits & OPTION_AUTOCOMMIT) &&\n      !(thd->variables.option_bits & OPTION_NOT_AUTOCOMMIT))\n  { // disabling autocommit\n\n    thd->transaction.all.modified_non_trans_table= false;\n    thd->server_status&= ~SERVER_STATUS_AUTOCOMMIT;\n    thd->variables.option_bits|= OPTION_NOT_AUTOCOMMIT;\n    return false;\n  }\n\n  return false; // autocommit value wasn't changed\n}\nstatic Sys_var_bit Sys_autocommit(\n       \"autocommit\", \"autocommit\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_AUTOCOMMIT, DEFAULT(TRUE),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(fix_autocommit));\nexport sys_var *Sys_autocommit_ptr= &Sys_autocommit; // for sql_yacc.yy\n\nstatic Sys_var_mybool Sys_big_tables(\n       \"big_tables\", \"Allow big result sets by saving all \"\n       \"temporary sets on file (Solves most 'table full' errors)\",\n       SESSION_VAR(big_tables), CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\n#ifndef TO_BE_DELETED   /* Alias for big_tables */\nstatic Sys_var_mybool Sys_sql_big_tables(\n       \"sql_big_tables\", \"alias for big_tables\",\n       SESSION_VAR(big_tables), NO_CMD_LINE, DEFAULT(FALSE));\n#endif\n\nstatic Sys_var_bit Sys_big_selects(\n       \"sql_big_selects\", \"sql_big_selects\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_BIG_SELECTS,\n       DEFAULT(FALSE));\n\nstatic Sys_var_bit Sys_log_off(\n       \"sql_log_off\", \"sql_log_off\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_LOG_OFF,\n       DEFAULT(FALSE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_has_super));\n\n/**\n  This function sets the session variable thd->variables.sql_log_bin \n  to reflect changes to @@session.sql_log_bin.\n\n  @param[IN] self   A pointer to the sys_var, i.e. Sys_log_binlog.\n  @param[IN] type   The type either session or global.\n\n  @return @c FALSE.\n*/\nstatic bool fix_sql_log_bin_after_update(sys_var *self, THD *thd,\n                                         enum_var_type type)\n{\n  DBUG_ASSERT(type == OPT_SESSION);\n\n  if (thd->variables.sql_log_bin)\n    thd->variables.option_bits |= OPTION_BIN_LOG;\n  else\n    thd->variables.option_bits &= ~OPTION_BIN_LOG;\n\n  return FALSE;\n}\n\n/**\n  This function checks if the sql_log_bin can be changed,\n  what is possible if:\n    - the user is a super user;\n    - the set is not called from within a function/trigger;\n    - there is no on-going transaction.\n\n  @param[IN] self   A pointer to the sys_var, i.e. Sys_log_binlog.\n  @param[IN] var    A pointer to the set_var created by the parser.\n\n  @return @c FALSE if the change is allowed, otherwise @c TRUE.\n*/\nstatic bool check_sql_log_bin(sys_var *self, THD *thd, set_var *var)\n{\n  if (check_has_super(self, thd, var))\n    return TRUE;\n\n  if (var->type == OPT_GLOBAL)\n  {\n    my_error(ER_INCORRECT_GLOBAL_LOCAL_VAR, MYF(0), self->name.str, \"SESSION\");\n    return TRUE;\n  }\n\n  if (error_if_in_trans_or_substatement(thd,\n          ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN,\n          ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN))\n    return TRUE;\n\n  return FALSE;\n}\n\nstatic Sys_var_mybool Sys_log_binlog(\n       \"sql_log_bin\", \"Controls whether logging to the binary log is done\",\n       SESSION_VAR(sql_log_bin), NO_CMD_LINE, DEFAULT(TRUE),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_sql_log_bin),\n       ON_UPDATE(fix_sql_log_bin_after_update));\n\nstatic Sys_var_bit Sys_sql_warnings(\n       \"sql_warnings\", \"sql_warnings\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_WARNINGS,\n       DEFAULT(FALSE));\n\nstatic Sys_var_bit Sys_sql_notes(\n       \"sql_notes\", \"sql_notes\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_SQL_NOTES,\n       DEFAULT(TRUE));\n\nstatic Sys_var_bit Sys_auto_is_null(\n       \"sql_auto_is_null\", \"sql_auto_is_null\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_AUTO_IS_NULL,\n       DEFAULT(FALSE), NO_MUTEX_GUARD, IN_BINLOG);\n\nstatic Sys_var_bit Sys_safe_updates(\n       \"sql_safe_updates\", \"sql_safe_updates\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_SAFE_UPDATES,\n       DEFAULT(FALSE));\n\nstatic Sys_var_bit Sys_buffer_results(\n       \"sql_buffer_result\", \"sql_buffer_result\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_BUFFER_RESULT,\n       DEFAULT(FALSE));\n\nstatic Sys_var_bit Sys_quote_show_create(\n       \"sql_quote_show_create\", \"sql_quote_show_create\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_QUOTE_SHOW_CREATE,\n       DEFAULT(TRUE));\n\nstatic Sys_var_bit Sys_foreign_key_checks(\n       \"foreign_key_checks\", \"foreign_key_checks\",\n       SESSION_VAR(option_bits), NO_CMD_LINE,\n       REVERSE(OPTION_NO_FOREIGN_KEY_CHECKS),\n       DEFAULT(TRUE), NO_MUTEX_GUARD, IN_BINLOG);\n\nstatic Sys_var_bit Sys_unique_checks(\n       \"unique_checks\", \"unique_checks\",\n       SESSION_VAR(option_bits), NO_CMD_LINE,\n       REVERSE(OPTION_RELAXED_UNIQUE_CHECKS),\n       DEFAULT(TRUE), NO_MUTEX_GUARD, IN_BINLOG);\n\n#ifdef ENABLED_PROFILING\nstatic Sys_var_bit Sys_profiling(\n       \"profiling\", \"profiling\",\n       SESSION_VAR(option_bits), NO_CMD_LINE, OPTION_PROFILING,\n       DEFAULT(FALSE));\n\nstatic Sys_var_ulong Sys_profiling_history_size(\n       \"profiling_history_size\", \"Limit of query profiling memory\",\n       SESSION_VAR(profiling_history_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 100), DEFAULT(15), BLOCK_SIZE(1));\n#endif\n\n/*\n  When this is set by a connection, binlogged events will be marked with a\n  corresponding flag. The slave can be configured to not replicate events\n  so marked.\n  In the binlog dump thread on the master, this variable is re-used for a\n  related purpose: The slave sets this flag when connecting to the master to\n  request that the master filter out (ie. not send) any events with the flag\n  set, thus saving network traffic on events that would be ignored by the\n  slave anyway.\n*/\nstatic bool check_skip_replication(sys_var *self, THD *thd, set_var *var)\n{\n  /*\n    We must not change @@skip_replication in the middle of a transaction or\n    statement, as that could result in only part of the transaction / statement\n    being replicated.\n    (This would be particularly serious if we were to replicate eg.\n    Rows_log_event without Table_map_log_event or transactional updates without\n    the COMMIT).\n  */\n  if (error_if_in_trans_or_substatement(thd,\n          ER_STORED_FUNCTION_PREVENTS_SWITCH_SKIP_REPLICATION,\n          ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SKIP_REPLICATION))\n    return 1;\n\n  return 0;\n}\n\nstatic Sys_var_bit Sys_skip_replication(\n       \"skip_replication\", \"skip_replication\",\n       SESSION_ONLY(option_bits), NO_CMD_LINE, OPTION_SKIP_REPLICATION,\n       DEFAULT(FALSE), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_skip_replication));\n\nstatic Sys_var_harows Sys_select_limit(\n       \"sql_select_limit\",\n       \"The maximum number of rows to return from SELECT statements\",\n       SESSION_VAR(select_limit), NO_CMD_LINE,\n       VALID_RANGE(0, HA_POS_ERROR), DEFAULT(HA_POS_ERROR), BLOCK_SIZE(1));\n\nstatic bool update_timestamp(THD *thd, set_var *var)\n{\n  if (var->value)\n  {\n    my_hrtime_t hrtime = { hrtime_from_time(var->save_result.double_value) };\n    thd->set_time(hrtime);\n  }\n  else // SET timestamp=DEFAULT\n    thd->user_time.val= 0;\n  return false;\n}\nstatic double read_timestamp(THD *thd)\n{\n  return thd->start_time +\n         thd->start_time_sec_part/(double)TIME_SECOND_PART_FACTOR;\n}\nstatic Sys_var_session_special_double Sys_timestamp(\n       \"timestamp\", \"Set the time for this client\",\n       sys_var::ONLY_SESSION, NO_CMD_LINE,\n       VALID_RANGE(0, TIMESTAMP_MAX_VALUE),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(0), \n       ON_UPDATE(update_timestamp), ON_READ(read_timestamp));\n\nstatic bool update_last_insert_id(THD *thd, set_var *var)\n{\n  if (!var->value)\n  {\n    my_error(ER_NO_DEFAULT, MYF(0), var->var->name.str);\n    return true;\n  }\n  thd->first_successful_insert_id_in_prev_stmt=\n    var->save_result.ulonglong_value;\n  return false;\n}\nstatic ulonglong read_last_insert_id(THD *thd)\n{\n  return (ulonglong) thd->read_first_successful_insert_id_in_prev_stmt();\n}\nstatic Sys_var_session_special Sys_last_insert_id(\n       \"last_insert_id\", \"The value to be returned from LAST_INSERT_ID()\",\n       sys_var::ONLY_SESSION, NO_CMD_LINE,\n       VALID_RANGE(0, ULONGLONG_MAX), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(update_last_insert_id), ON_READ(read_last_insert_id));\n\n// alias for last_insert_id(), Sybase-style\nstatic Sys_var_session_special Sys_identity(\n       \"identity\", \"Synonym for the last_insert_id variable\",\n       sys_var::ONLY_SESSION, NO_CMD_LINE,\n       VALID_RANGE(0, ULONGLONG_MAX), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(update_last_insert_id), ON_READ(read_last_insert_id));\n\n/*\n  insert_id should *not* be marked as written to the binlog (i.e., it\n  should *not* be IN_BINLOG), because we want any statement that\n  refers to insert_id explicitly to be unsafe.  (By \"explicitly\", we\n  mean using @@session.insert_id, whereas insert_id is used\n  \"implicitly\" when NULL value is inserted into an auto_increment\n  column).\n\n  We want statements referring explicitly to @@session.insert_id to be\n  unsafe, because insert_id is modified internally by the slave sql\n  thread when NULL values are inserted in an AUTO_INCREMENT column.\n  This modification interfers with the value of the\n  @@session.insert_id variable if @@session.insert_id is referred\n  explicitly by an insert statement (as is seen by executing \"SET\n  @@session.insert_id=0; CREATE TABLE t (a INT, b INT KEY\n  AUTO_INCREMENT); INSERT INTO t(a) VALUES (@@session.insert_id);\" in\n  statement-based logging mode: t will be different on master and\n  slave).\n*/\nstatic bool update_insert_id(THD *thd, set_var *var)\n{\n  if (!var->value)\n  {\n    my_error(ER_NO_DEFAULT, MYF(0), var->var->name.str);\n    return true;\n  }\n  thd->force_one_auto_inc_interval(var->save_result.ulonglong_value);\n  return false;\n}\n\nstatic ulonglong read_insert_id(THD *thd)\n{\n  return thd->auto_inc_intervals_forced.minimum();\n}\nstatic Sys_var_session_special Sys_insert_id(\n       \"insert_id\", \"The value to be used by the following INSERT \"\n       \"or ALTER TABLE statement when inserting an AUTO_INCREMENT value\",\n       sys_var::ONLY_SESSION, NO_CMD_LINE,\n       VALID_RANGE(0, ULONGLONG_MAX), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(update_insert_id), ON_READ(read_insert_id));\n\nstatic bool update_rand_seed1(THD *thd, set_var *var)\n{\n  if (!var->value)\n  {\n    my_error(ER_NO_DEFAULT, MYF(0), var->var->name.str);\n    return true;\n  }\n  thd->rand.seed1= (ulong) var->save_result.ulonglong_value;\n  return false;\n}\nstatic ulonglong read_rand_seed(THD *thd)\n{\n  return 0;\n}\nstatic Sys_var_session_special Sys_rand_seed1(\n       \"rand_seed1\", \"Sets the internal state of the RAND() \"\n       \"generator for replication purposes\",\n       sys_var::ONLY_SESSION, NO_CMD_LINE,\n       VALID_RANGE(0, ULONG_MAX), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(update_rand_seed1), ON_READ(read_rand_seed));\n\nstatic bool update_rand_seed2(THD *thd, set_var *var)\n{\n  if (!var->value)\n  {\n    my_error(ER_NO_DEFAULT, MYF(0), var->var->name.str);\n    return true;\n  }\n  thd->rand.seed2= (ulong) var->save_result.ulonglong_value;\n  return false;\n}\nstatic Sys_var_session_special Sys_rand_seed2(\n       \"rand_seed2\", \"Sets the internal state of the RAND() \"\n       \"generator for replication purposes\",\n       sys_var::ONLY_SESSION, NO_CMD_LINE,\n       VALID_RANGE(0, ULONG_MAX), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(update_rand_seed2), ON_READ(read_rand_seed));\n\nstatic ulonglong read_error_count(THD *thd)\n{\n  return thd->warning_info->error_count();\n}\n// this really belongs to the SHOW STATUS\nstatic Sys_var_session_special Sys_error_count(\n       \"error_count\", \"The number of errors that resulted from the \"\n       \"last statement that generated messages\",\n       READ_ONLY sys_var::ONLY_SESSION, NO_CMD_LINE,\n       VALID_RANGE(0, ULONGLONG_MAX), BLOCK_SIZE(1), NO_MUTEX_GUARD,\n       NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(0), ON_READ(read_error_count));\n\nstatic ulonglong read_warning_count(THD *thd)\n{\n  return thd->warning_info->warn_count();\n}\n// this really belongs to the SHOW STATUS\nstatic Sys_var_session_special Sys_warning_count(\n       \"warning_count\", \"The number of errors, warnings, and notes \"\n       \"that resulted from the last statement that generated messages\",\n       READ_ONLY sys_var::ONLY_SESSION, NO_CMD_LINE,\n       VALID_RANGE(0, ULONGLONG_MAX), BLOCK_SIZE(1), NO_MUTEX_GUARD,\n       NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(0), ON_READ(read_warning_count));\n\nstatic Sys_var_ulong Sys_default_week_format(\n       \"default_week_format\",\n       \"The default week format used by WEEK() functions\",\n       SESSION_VAR(default_week_format), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 7), DEFAULT(0), BLOCK_SIZE(1));\n\nstatic Sys_var_ulonglong Sys_group_concat_max_len(\n       \"group_concat_max_len\",\n       \"The maximum length of the result of function  GROUP_CONCAT()\",\n       SESSION_VAR(group_concat_max_len), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(4, SIZE_T_MAX), DEFAULT(1024), BLOCK_SIZE(1));\n\nstatic char *glob_hostname_ptr;\nstatic Sys_var_charptr Sys_hostname(\n       \"hostname\", \"Server host name\",\n       READ_ONLY GLOBAL_VAR(glob_hostname_ptr), NO_CMD_LINE,\n       IN_FS_CHARSET, DEFAULT(glob_hostname));\n\n#ifndef EMBEDDED_LIBRARY\nstatic Sys_var_charptr Sys_repl_report_host(\n       \"report_host\",\n       \"Hostname or IP of the slave to be reported to the master during \"\n       \"slave registration. Will appear in the output of SHOW SLAVE HOSTS. \"\n       \"Leave unset if you do not want the slave to register itself with the \"\n       \"master. Note that it is not sufficient for the master to simply read \"\n       \"the IP of the slave off the socket once the slave connects. Due to \"\n       \"NAT and other routing issues, that IP may not be valid for connecting \"\n       \"to the slave from the master or other hosts\",\n       READ_ONLY GLOBAL_VAR(report_host), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_charptr Sys_repl_report_user(\n       \"report_user\",\n       \"The account user name of the slave to be reported to the master \"\n       \"during slave registration\",\n       READ_ONLY GLOBAL_VAR(report_user), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_charptr Sys_repl_report_password(\n       \"report_password\",\n       \"The account password of the slave to be reported to the master \"\n       \"during slave registration\",\n       READ_ONLY GLOBAL_VAR(report_password), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_uint Sys_repl_report_port(\n       \"report_port\",\n       \"Port for connecting to slave reported to the master during slave \"\n       \"registration. Set it only if the slave is listening on a non-default \"\n       \"port or if you have a special tunnel from the master or other clients \"\n       \"to the slave. If not sure, leave this option unset\",\n       READ_ONLY GLOBAL_VAR(report_port), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(0), BLOCK_SIZE(1));\n#endif\n\nstatic Sys_var_mybool Sys_keep_files_on_create(\n       \"keep_files_on_create\",\n       \"Don't overwrite stale .MYD and .MYI even if no directory is specified\",\n       SESSION_VAR(keep_files_on_create), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\nstatic char *license;\nstatic Sys_var_charptr Sys_license(\n       \"license\", \"The type of license the server has\",\n       READ_ONLY GLOBAL_VAR(license), NO_CMD_LINE, IN_SYSTEM_CHARSET,\n       DEFAULT(STRINGIFY_ARG(LICENSE)));\n\nstatic bool check_log_path(sys_var *self, THD *thd, set_var *var)\n{\n  if (!var->value)\n    return false; // DEFAULT is ok\n\n  if (!var->save_result.string_value.str)\n    return true;\n\n  LEX_STRING *val= &var->save_result.string_value;\n\n  if (val->length > FN_REFLEN)\n  { // path is too long\n    my_error(ER_PATH_LENGTH, MYF(0), self->name.str);\n    return true;\n  }\n\n  char path[FN_REFLEN];\n  size_t path_length= unpack_filename(path, val->str);\n\n  if (!path_length)\n    return true;\n\n  static const LEX_CSTRING my_cnf= { STRING_WITH_LEN(\"my.cnf\") };\n  static const LEX_CSTRING my_ini= { STRING_WITH_LEN(\"my.ini\") };\n  if (path_length >= my_cnf.length)\n  {\n    if (strcasecmp(path + path_length - my_cnf.length, my_cnf.str) == 0)\n      return true; // log file name ends with \"my.cnf\"\n    DBUG_ASSERT(my_cnf.length == my_ini.length);\n    if (strcasecmp(path + path_length - my_ini.length, my_ini.str) == 0)\n      return true; // log file name ends with \"my.ini\"\n  }\n\n  MY_STAT f_stat;\n\n  if (my_stat(path, &f_stat, MYF(0)))\n  {\n    if (!MY_S_ISREG(f_stat.st_mode) || !(f_stat.st_mode & MY_S_IWRITE))\n      return true; // not a regular writable file\n    return false;\n  }\n\n  (void) dirname_part(path, val->str, &path_length);\n\n  if (val->length - path_length >= FN_LEN)\n  { // filename is too long\n      my_error(ER_PATH_LENGTH, MYF(0), self->name.str);\n      return true;\n  }\n\n  if (!path_length) // no path is good path (remember, relative to datadir)\n    return false;\n\n  if (my_access(path, (F_OK|W_OK)))\n    return true; // directory is not writable\n\n  return false;\n}\nstatic bool fix_log(char** logname, const char* default_logname,\n                    const char*ext, bool enabled, void (*reopen)(char*))\n{\n  if (!*logname) // SET ... = DEFAULT\n  {\n    make_default_log_name(logname, ext, false);\n    if (!*logname)\n      return true;\n  }\n  logger.lock_exclusive();\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n  if (enabled)\n    reopen(*logname);\n  logger.unlock();\n  mysql_mutex_lock(&LOCK_global_system_variables);\n  return false;\n}\nstatic void reopen_general_log(char* name)\n{\n  logger.get_log_file_handler()->close(0);\n  logger.get_log_file_handler()->open_query_log(name);\n}\nstatic bool fix_general_log_file(sys_var *self, THD *thd, enum_var_type type)\n{\n  return fix_log(&opt_logname,  opt_log_basename, \".log\", opt_log,\n                 reopen_general_log);\n}\nstatic Sys_var_charptr Sys_general_log_path(\n       \"general_log_file\", \"Log connections and queries to given file\",\n       PREALLOCATED GLOBAL_VAR(opt_logname), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_log_path), ON_UPDATE(fix_general_log_file));\n\nstatic void reopen_slow_log(char* name)\n{\n  logger.get_slow_log_file_handler()->close(0);\n  logger.get_slow_log_file_handler()->open_slow_log(name);\n}\nstatic bool fix_slow_log_file(sys_var *self, THD *thd, enum_var_type type)\n{\n  return fix_log(&opt_slow_logname, opt_log_basename, \"-slow.log\",\n                 opt_slow_log, reopen_slow_log);\n}\nstatic Sys_var_charptr Sys_slow_log_path(\n       \"slow_query_log_file\", \"Log slow queries to given log file. \"\n       \"Defaults logging to 'hostname'-slow.log. Must be enabled to activate \"\n       \"other slow log options\",\n       PREALLOCATED GLOBAL_VAR(opt_slow_logname), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_log_path), ON_UPDATE(fix_slow_log_file));\n\n/// @todo deprecate these four legacy have_PLUGIN variables and use I_S instead\nexport SHOW_COMP_OPTION have_csv, have_innodb= SHOW_OPTION_DISABLED;\nexport SHOW_COMP_OPTION have_ndbcluster, have_partitioning;\nstatic Sys_var_have Sys_have_csv(\n       \"have_csv\", \"have_csv\",\n       READ_ONLY GLOBAL_VAR(have_csv), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_innodb(\n       \"have_innodb\", \"have_innodb\",\n       READ_ONLY GLOBAL_VAR(have_innodb), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_ndbcluster(\n       \"have_ndbcluster\", \"have_ndbcluster\",\n       READ_ONLY GLOBAL_VAR(have_ndbcluster), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_partition_db(\n       \"have_partitioning\", \"have_partitioning\",\n       READ_ONLY GLOBAL_VAR(have_partitioning), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_compress(\n       \"have_compress\", \"have_compress\",\n       READ_ONLY GLOBAL_VAR(have_compress), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_crypt(\n       \"have_crypt\", \"have_crypt\",\n       READ_ONLY GLOBAL_VAR(have_crypt), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_dlopen(\n       \"have_dynamic_loading\", \"have_dynamic_loading\",\n       READ_ONLY GLOBAL_VAR(have_dlopen), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_geometry(\n       \"have_geometry\", \"have_geometry\",\n       READ_ONLY GLOBAL_VAR(have_geometry), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_openssl(\n       \"have_openssl\", \"have_openssl\",\n       READ_ONLY GLOBAL_VAR(have_ssl), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_profiling(\n       \"have_profiling\", \"have_profiling\",\n       READ_ONLY GLOBAL_VAR(have_profiling), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_query_cache(\n       \"have_query_cache\", \"have_query_cache\",\n       READ_ONLY GLOBAL_VAR(have_query_cache), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_rtree_keys(\n       \"have_rtree_keys\", \"have_rtree_keys\",\n       READ_ONLY GLOBAL_VAR(have_rtree_keys), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_ssl(\n       \"have_ssl\", \"have_ssl\",\n       READ_ONLY GLOBAL_VAR(have_ssl), NO_CMD_LINE);\n\nstatic Sys_var_have Sys_have_symlink(\n       \"have_symlink\", \"have_symlink\",\n       READ_ONLY GLOBAL_VAR(have_symlink), NO_CMD_LINE);\n\nstatic bool fix_log_state(sys_var *self, THD *thd, enum_var_type type);\nstatic Sys_var_mybool Sys_general_log(\n       \"general_log\", \"Log connections and queries to a table or log file. \"\n       \"Defaults logging to a file 'hostname'.log or a table mysql.general_log\"\n       \"if --log-output=TABLE is used\",\n       GLOBAL_VAR(opt_log), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_log_state));\n\n// Synonym of \"general_log\" for consistency with SHOW VARIABLES output\nstatic Sys_var_mybool Sys_log(\n       \"log\", \"Alias for --general-log. Deprecated\",\n       GLOBAL_VAR(opt_log), NO_CMD_LINE,\n       DEFAULT(FALSE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_log_state), DEPRECATED(\"'@@general_log'\"));\n\nstatic Sys_var_mybool Sys_slow_query_log(\n       \"slow_query_log\",\n       \"Log slow queries to a table or log file. Defaults logging to a file \"\n       \"'hostname'-slow.log or a table mysql.slow_log if --log-output=TABLE is \"\n       \"used. Must be enabled to activate other slow log options\",\n       GLOBAL_VAR(opt_slow_log), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_log_state));\n\n/* Synonym of \"slow_query_log\" for consistency with SHOW VARIABLES output */\nstatic Sys_var_mybool Sys_log_slow(\n       \"log_slow_queries\",\n       \"Alias for --slow-query-log. Deprecated\",\n       GLOBAL_VAR(opt_slow_log), NO_CMD_LINE,\n       DEFAULT(FALSE), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_log_state), DEPRECATED(\"'@@slow_query_log'\"));\n\nstatic bool fix_log_state(sys_var *self, THD *thd, enum_var_type type)\n{\n  bool res;\n  my_bool *UNINIT_VAR(newvalptr), newval, UNINIT_VAR(oldval);\n  uint UNINIT_VAR(log_type);\n\n  if (self == &Sys_general_log || self == &Sys_log)\n  {\n    newvalptr= &opt_log;\n    oldval=    logger.get_log_file_handler()->is_open();\n    log_type=  QUERY_LOG_GENERAL;\n  }\n  else if (self == &Sys_slow_query_log || self == &Sys_log_slow)\n  {\n    newvalptr= &opt_slow_log;\n    oldval=    logger.get_slow_log_file_handler()->is_open();\n    log_type=  QUERY_LOG_SLOW;\n  }\n  else\n    DBUG_ASSERT(FALSE);\n\n  newval= *newvalptr;\n  if (oldval == newval)\n    return false;\n\n  *newvalptr= oldval; // [de]activate_log_handler works that way (sigh)\n\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n  if (!newval)\n  {\n    logger.deactivate_log_handler(thd, log_type);\n    res= false;\n  }\n  else\n    res= logger.activate_log_handler(thd, log_type);\n  mysql_mutex_lock(&LOCK_global_system_variables);\n  return res;\n}\n\nstatic bool check_not_empty_set(sys_var *self, THD *thd, set_var *var)\n{\n  return var->save_result.ulonglong_value == 0;\n}\nstatic bool fix_log_output(sys_var *self, THD *thd, enum_var_type type)\n{\n  logger.lock_exclusive();\n  logger.init_slow_log(log_output_options);\n  logger.init_general_log(log_output_options);\n  logger.unlock();\n  return false;\n}\n\nstatic const char *log_output_names[] = { \"NONE\", \"FILE\", \"TABLE\", NULL};\n\nstatic Sys_var_set Sys_log_output(\n       \"log_output\", \"Syntax: log-output=value[,value...], \"\n       \"where \\\"value\\\" could be TABLE, FILE or NONE\",\n       GLOBAL_VAR(log_output_options), CMD_LINE(REQUIRED_ARG),\n       log_output_names, DEFAULT(LOG_FILE), NO_MUTEX_GUARD, NOT_IN_BINLOG,\n       ON_CHECK(check_not_empty_set), ON_UPDATE(fix_log_output));\n\n#ifdef HAVE_REPLICATION\nstatic Sys_var_mybool Sys_log_slave_updates(\n       \"log_slave_updates\", \"Tells the slave to log the updates from \"\n       \"the slave thread to the binary log. You will need to turn it on if \"\n       \"you plan to daisy-chain the slaves\",\n       READ_ONLY GLOBAL_VAR(opt_log_slave_updates), CMD_LINE(OPT_ARG),\n       DEFAULT(0));\n\nstatic Sys_var_charptr Sys_relay_log(\n       \"relay_log\", \"The location and name to use for relay logs\",\n       READ_ONLY GLOBAL_VAR(opt_relay_logname), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_charptr Sys_relay_log_index(\n       \"relay_log_index\", \"The location and name to use for the file \"\n       \"that keeps a list of the last relay logs\",\n       READ_ONLY GLOBAL_VAR(opt_relaylog_index_name), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_charptr Sys_relay_log_info_file(\n       \"relay_log_info_file\", \"The location and name of the file that \"\n       \"remembers where the SQL replication thread is in the relay logs\",\n       READ_ONLY GLOBAL_VAR(relay_log_info_file), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_mybool Sys_relay_log_purge(\n       \"relay_log_purge\", \"if disabled - do not purge relay logs. \"\n       \"if enabled - purge them as soon as they are no more needed\",\n       GLOBAL_VAR(relay_log_purge), CMD_LINE(OPT_ARG), DEFAULT(TRUE));\n\nstatic Sys_var_mybool Sys_relay_log_recovery(\n       \"relay_log_recovery\", \"Enables automatic relay log recovery \"\n       \"right after the database startup, which means that the IO Thread \"\n       \"starts re-fetching from the master right after the last transaction \"\n       \"processed\",\n       GLOBAL_VAR(relay_log_recovery), CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\nbool Sys_var_rpl_filter::do_check(THD *thd, set_var *var)\n{\n  bool status;\n\n  /*\n    We must not be holding LOCK_global_system_variables here, otherwise we can\n    deadlock with THD::init() which is invoked from within the slave threads\n    with opposite locking order.\n  */\n  mysql_mutex_assert_not_owner(&LOCK_global_system_variables);\n\n  mysql_mutex_lock(&LOCK_active_mi);\n  mysql_mutex_lock(&active_mi->rli.run_lock);\n\n  status= active_mi->rli.slave_running;\n\n  mysql_mutex_unlock(&active_mi->rli.run_lock);\n  mysql_mutex_unlock(&LOCK_active_mi);\n\n  if (status)\n    my_error(ER_SLAVE_MUST_STOP, MYF(0));\n  else\n    status= Sys_var_charptr::do_string_check(thd, var, charset(thd));\n\n  return status;\n}\n\nvoid Sys_var_rpl_filter::lock(void)\n{\n  /*\n    Starting a slave thread causes the new thread to attempt to\n    acquire LOCK_global_system_variables (in THD::init) while\n    LOCK_active_mi is being held by the thread that initiated\n    the process. In order to not violate the lock order, unlock\n    LOCK_global_system_variables before grabbing LOCK_active_mi.\n  */\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n\n  mysql_mutex_lock(&LOCK_active_mi);\n  mysql_mutex_lock(&active_mi->rli.run_lock);\n}\n\nvoid Sys_var_rpl_filter::unlock(void)\n{\n  mysql_mutex_unlock(&active_mi->rli.run_lock);\n  mysql_mutex_unlock(&LOCK_active_mi);\n\n  mysql_mutex_lock(&LOCK_global_system_variables);\n}\n\nbool Sys_var_rpl_filter::global_update(THD *thd, set_var *var)\n{\n  bool slave_running, status= false;\n\n  lock();\n\n  if (! (slave_running= active_mi->rli.slave_running))\n    status= set_filter_value(var->save_result.string_value.str);\n\n  if (slave_running)\n    my_error(ER_SLAVE_MUST_STOP, MYF(0));\n\n  unlock();\n\n  return slave_running || status;\n}\n\nbool Sys_var_rpl_filter::set_filter_value(const char *value)\n{\n  bool status= true;\n\n  switch (opt_id) {\n  case OPT_REPLICATE_DO_DB:\n    status= rpl_filter->set_do_db(value);\n    break;\n  case OPT_REPLICATE_DO_TABLE:\n    status= rpl_filter->set_do_table(value);\n    break;\n  case OPT_REPLICATE_IGNORE_DB:\n    status= rpl_filter->set_ignore_db(value);\n    break;\n  case OPT_REPLICATE_IGNORE_TABLE:\n    status= rpl_filter->set_ignore_table(value);\n    break;\n  case OPT_REPLICATE_WILD_DO_TABLE:\n    status= rpl_filter->set_wild_do_table(value);\n    break;\n  case OPT_REPLICATE_WILD_IGNORE_TABLE:\n    status= rpl_filter->set_wild_ignore_table(value);\n    break;\n  }\n\n  return status;\n}\n\nuchar *Sys_var_rpl_filter::global_value_ptr(THD *thd, LEX_STRING *base)\n{\n  char buf[256];\n  String tmp(buf, sizeof(buf), &my_charset_bin);\n\n  tmp.length(0);\n\n  lock();\n\n  switch (opt_id) {\n  case OPT_REPLICATE_DO_DB:\n    rpl_filter->get_do_db(&tmp);\n    break;\n  case OPT_REPLICATE_DO_TABLE:\n    rpl_filter->get_do_table(&tmp);\n    break;\n  case OPT_REPLICATE_IGNORE_DB:\n    rpl_filter->get_ignore_db(&tmp);\n    break;\n  case OPT_REPLICATE_IGNORE_TABLE:\n    rpl_filter->get_ignore_table(&tmp);\n    break;\n  case OPT_REPLICATE_WILD_DO_TABLE:\n    rpl_filter->get_wild_do_table(&tmp);\n    break;\n  case OPT_REPLICATE_WILD_IGNORE_TABLE:\n    rpl_filter->get_wild_ignore_table(&tmp);\n    break;\n  }\n\n  unlock();\n\n  return (uchar *) thd->strmake(tmp.ptr(), tmp.length());\n}\n\nstatic Sys_var_rpl_filter Sys_replicate_do_db(\n       \"replicate_do_db\", OPT_REPLICATE_DO_DB,\n       \"Tell the slave to restrict replication to updates of tables \"\n       \"whose names appear in the comma-separated list. For \"\n       \"statement-based replication, only the default database (that \"\n       \"is, the one selected by USE) is considered, not any explicitly \"\n       \"mentioned tables in the query. For row-based replication, the \"\n       \"actual names of table(s) being updated are checked.\");\n\nstatic Sys_var_rpl_filter Sys_replicate_do_table(\n       \"replicate_do_table\", OPT_REPLICATE_DO_TABLE,\n       \"Tells the slave to restrict replication to tables in the \"\n       \"comma-separated list.\");\n\nstatic Sys_var_rpl_filter Sys_replicate_ignore_db(\n       \"replicate_ignore_db\", OPT_REPLICATE_IGNORE_DB,\n       \"Tell the slave to restrict replication to updates of tables \"\n       \"whose names do not appear in the comma-separated list. For \"\n       \"statement-based replication, only the default database (that \"\n       \"is, the one selected by USE) is considered, not any explicitly \"\n       \"mentioned tables in the query. For row-based replication, the \"\n       \"actual names of table(s) being updated are checked.\");\n\nstatic Sys_var_rpl_filter Sys_replicate_ignore_table(\n       \"replicate_ignore_table\", OPT_REPLICATE_IGNORE_TABLE,\n       \"Tells the slave thread not to replicate any statement that \"\n       \"updates the specified table, even if any other tables might be \"\n       \"updated by the same statement.\");\n\nstatic Sys_var_rpl_filter Sys_replicate_wild_do_table(\n       \"replicate_wild_do_table\", OPT_REPLICATE_WILD_DO_TABLE,\n       \"Tells the slave thread to restrict replication to statements \"\n       \"where any of the updated tables match the specified database \"\n       \"and table name patterns.\");\n\nstatic Sys_var_rpl_filter Sys_replicate_wild_ignore_table(\n       \"replicate_wild_ignore_table\", OPT_REPLICATE_WILD_IGNORE_TABLE,\n       \"Tells the slave thread to not replicate to the tables that \"\n       \"match the given wildcard pattern.\");\n\nstatic Sys_var_charptr Sys_slave_load_tmpdir(\n       \"slave_load_tmpdir\", \"The location where the slave should put \"\n       \"its temporary files when replicating a LOAD DATA INFILE command\",\n       READ_ONLY GLOBAL_VAR(slave_load_tmpdir), CMD_LINE(REQUIRED_ARG),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic bool fix_slave_net_timeout(sys_var *self, THD *thd, enum_var_type type)\n{\n  DEBUG_SYNC(thd, \"fix_slave_net_timeout\");\n\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n  mysql_mutex_lock(&LOCK_active_mi);\n  DBUG_PRINT(\"info\", (\"slave_net_timeout=%u mi->heartbeat_period=%.3f\",\n                     slave_net_timeout,\n                     (active_mi? active_mi->heartbeat_period : 0.0)));\n  if (active_mi && slave_net_timeout < active_mi->heartbeat_period)\n    push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,\n                        ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,\n                        ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));\n  mysql_mutex_unlock(&LOCK_active_mi);\n  mysql_mutex_lock(&LOCK_global_system_variables);\n  return false;\n}\nstatic Sys_var_uint Sys_slave_net_timeout(\n       \"slave_net_timeout\", \"Number of seconds to wait for more data \"\n       \"from a master/slave connection before aborting the read\",\n       GLOBAL_VAR(slave_net_timeout), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, LONG_TIMEOUT), DEFAULT(SLAVE_NET_TIMEOUT), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(fix_slave_net_timeout));\n\nstatic bool check_slave_skip_counter(sys_var *self, THD *thd, set_var *var)\n{\n  bool result= false;\n  mysql_mutex_lock(&LOCK_active_mi);\n  mysql_mutex_lock(&active_mi->rli.run_lock);\n  if (active_mi->rli.slave_running)\n  {\n    my_message(ER_SLAVE_MUST_STOP, ER(ER_SLAVE_MUST_STOP), MYF(0));\n    result= true;\n  }\n  mysql_mutex_unlock(&active_mi->rli.run_lock);\n  mysql_mutex_unlock(&LOCK_active_mi);\n  return result;\n}\nstatic bool fix_slave_skip_counter(sys_var *self, THD *thd, enum_var_type type)\n{\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n  mysql_mutex_lock(&LOCK_active_mi);\n  mysql_mutex_lock(&active_mi->rli.run_lock);\n  /*\n    The following test should normally never be true as we test this\n    in the check function;  To be safe against multiple\n    SQL_SLAVE_SKIP_COUNTER request, we do the check anyway\n  */\n  if (!active_mi->rli.slave_running)\n  {\n    mysql_mutex_lock(&active_mi->rli.data_lock);\n    active_mi->rli.slave_skip_counter= sql_slave_skip_counter;\n    mysql_mutex_unlock(&active_mi->rli.data_lock);\n  }\n  mysql_mutex_unlock(&active_mi->rli.run_lock);\n  mysql_mutex_unlock(&LOCK_active_mi);\n  mysql_mutex_lock(&LOCK_global_system_variables);\n  return 0;\n}\nstatic Sys_var_uint Sys_slave_skip_counter(\n       \"sql_slave_skip_counter\", \"sql_slave_skip_counter\",\n       GLOBAL_VAR(sql_slave_skip_counter), NO_CMD_LINE,\n       VALID_RANGE(0, UINT_MAX), DEFAULT(0), BLOCK_SIZE(1),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_slave_skip_counter),\n       ON_UPDATE(fix_slave_skip_counter));\n\nstatic Sys_var_charptr Sys_slave_skip_errors(\n       \"slave_skip_errors\", \"Tells the slave thread to continue \"\n       \"replication when a query event returns an error from the \"\n       \"provided list\",\n       READ_ONLY GLOBAL_VAR(opt_slave_skip_errors), CMD_LINE(REQUIRED_ARG),\n       IN_SYSTEM_CHARSET, DEFAULT(0));\n\nstatic Sys_var_ulonglong Sys_relay_log_space_limit(\n       \"relay_log_space_limit\", \"Maximum space to use for all relay logs\",\n       READ_ONLY GLOBAL_VAR(relay_log_space_limit), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, ULONGLONG_MAX), DEFAULT(0), BLOCK_SIZE(1));\n\nstatic Sys_var_uint Sys_sync_relaylog_period(\n       \"sync_relay_log\", \"Synchronously flush relay log to disk after \"\n       \"every #th event. Use 0 (default) to disable synchronous flushing\",\n       GLOBAL_VAR(sync_relaylog_period), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(0), BLOCK_SIZE(1));\n\nstatic Sys_var_uint Sys_sync_relayloginfo_period(\n       \"sync_relay_log_info\", \"Synchronously flush relay log info \"\n       \"to disk after every #th transaction. Use 0 (default) to disable \"\n       \"synchronous flushing\",\n       GLOBAL_VAR(sync_relayloginfo_period), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(0), BLOCK_SIZE(1));\n#endif\n\nstatic Sys_var_uint Sys_sync_binlog_period(\n       \"sync_binlog\", \"Synchronously flush binary log to disk after \"\n       \"every #th event. Use 0 (default) to disable synchronous flushing\",\n       GLOBAL_VAR(sync_binlog_period), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(0), BLOCK_SIZE(1));\n\nstatic Sys_var_uint Sys_sync_masterinfo_period(\n       \"sync_master_info\", \"Synchronously flush master info to disk \"\n       \"after every #th event. Use 0 (default) to disable synchronous flushing\",\n       GLOBAL_VAR(sync_masterinfo_period), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(0), BLOCK_SIZE(1));\n\n#ifdef HAVE_REPLICATION\nstatic Sys_var_ulong Sys_slave_trans_retries(\n       \"slave_transaction_retries\", \"Number of times the slave SQL \"\n       \"thread will retry a transaction in case it failed with a deadlock \"\n       \"or elapsed lock wait timeout, before giving up and stopping\",\n       GLOBAL_VAR(slave_trans_retries), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(10), BLOCK_SIZE(1));\n#endif\n\nstatic bool check_locale(sys_var *self, THD *thd, set_var *var)\n{\n  if (!var->value)\n    return false;\n\n  MY_LOCALE *locale;\n  char buff[STRING_BUFFER_USUAL_SIZE];\n  if (var->value->result_type() == INT_RESULT)\n  {\n    int lcno= (int)var->value->val_int();\n    if (!(locale= my_locale_by_number(lcno)))\n    {\n      my_error(ER_UNKNOWN_LOCALE, MYF(0), llstr(lcno, buff));\n      return true;\n    }\n    if (check_not_null(self, thd, var))\n      return true;\n  }\n  else // STRING_RESULT\n  {\n    String str(buff, sizeof(buff), system_charset_info), *res;\n    if (!(res=var->value->val_str(&str)))\n      return true;\n    else if (!(locale= my_locale_by_name(res->c_ptr_safe())))\n    {\n      ErrConvString err(res);\n      my_error(ER_UNKNOWN_LOCALE, MYF(0), err.ptr());\n      return true;\n    }\n  }\n\n  var->save_result.ptr= locale;\n\n  if (!locale->errmsgs->errmsgs)\n  {\n    bool res;\n    mysql_mutex_lock(&LOCK_error_messages);\n    res= (!locale->errmsgs->errmsgs &&\n          read_texts(ERRMSG_FILE, locale->errmsgs->language,\n                     &locale->errmsgs->errmsgs,\n                     ER_ERROR_LAST - ER_ERROR_FIRST + 1));\n    mysql_mutex_unlock(&LOCK_error_messages);\n    if (res)\n    {\n      push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN, ER_UNKNOWN_ERROR,\n                          \"Can't process error message file for locale '%s'\",\n                          locale->name);\n      return true;\n    }\n  }\n  status_var_increment(thd->status_var.feature_locale);\n  return false;\n}\n\nstatic Sys_var_struct Sys_lc_messages(\n       \"lc_messages\", \"Set the language used for the error messages\",\n       SESSION_VAR(lc_messages), NO_CMD_LINE,\n       my_offsetof(MY_LOCALE, name), DEFAULT(&my_default_lc_messages),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_locale));\n\nstatic Sys_var_struct Sys_lc_time_names(\n       \"lc_time_names\", \"Set the language used for the month \"\n       \"names and the days of the week\",\n       SESSION_VAR(lc_time_names), NO_CMD_LINE,\n       my_offsetof(MY_LOCALE, name), DEFAULT(&my_default_lc_time_names),\n       NO_MUTEX_GUARD, IN_BINLOG, ON_CHECK(check_locale));\n\nstatic Sys_var_tz Sys_time_zone(\n       \"time_zone\", \"time_zone\",\n       SESSION_VAR(time_zone), NO_CMD_LINE,\n       DEFAULT(&default_tz), NO_MUTEX_GUARD, IN_BINLOG);\n\nstatic Sys_var_charptr Sys_ignore_db_dirs(\n       \"ignore_db_dirs\",\n       \"Specifies a directory to add to the ignore list when collecting \"\n       \"database names from the datadir. Put a blank argument to reset \"\n       \"the list accumulated so far.\",\n       READ_ONLY GLOBAL_VAR(opt_ignore_db_dirs), \n       CMD_LINE(REQUIRED_ARG, OPT_IGNORE_DB_DIRECTORY),\n       IN_FS_CHARSET, DEFAULT(0));\n\nstatic Sys_var_ulong Sys_sp_cache_size(\n       \"stored_program_cache\",\n       \"The soft upper limit for number of cached stored routines for \"\n       \"one connection.\",\n       GLOBAL_VAR(stored_program_cache_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 512 * 1024), DEFAULT(256), BLOCK_SIZE(1));\n\nexport const char *plugin_maturity_names[]=\n{ \"unknown\", \"experimental\", \"alpha\", \"beta\", \"gamma\", \"stable\", 0 };\nstatic Sys_var_enum Sys_plugin_maturity(\n       \"plugin_maturity\",\n       \"The lowest desirable plugin maturity \"\n       \"(unknown, experimental, alpha, beta, gamma, or stable). \"\n       \"Plugins less mature than that will not be installed or loaded.\",\n       READ_ONLY GLOBAL_VAR(plugin_maturity), CMD_LINE(REQUIRED_ARG),\n       plugin_maturity_names, DEFAULT(MariaDB_PLUGIN_MATURITY_UNKNOWN));\n\nstatic Sys_var_ulong Sys_deadlock_search_depth_short(\n       \"deadlock_search_depth_short\",\n       \"Short search depth for the two-step deadlock detection\",\n       SESSION_VAR(wt_deadlock_search_depth_short), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 32), DEFAULT(4), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_deadlock_search_depth_long(\n       \"deadlock_search_depth_long\",\n       \"Long search depth for the two-step deadlock detection\",\n       SESSION_VAR(wt_deadlock_search_depth_long), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 33), DEFAULT(15), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_deadlock_timeout_depth_short(\n       \"deadlock_timeout_short\",\n       \"Short timeout for the two-step deadlock detection (in microseconds)\",\n       SESSION_VAR(wt_timeout_short), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(10000), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_deadlock_timeout_depth_long(\n       \"deadlock_timeout_long\",\n       \"Long timeout for the two-step deadlock detection (in microseconds)\",\n       SESSION_VAR(wt_timeout_long), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(50000000), BLOCK_SIZE(1));\n\n#ifndef DBUG_OFF\nstatic Sys_var_ulong Sys_debug_crc_break(\n       \"debug_crc_break\",\n       \"Call my_debug_put_break_here() if crc matches this number (for debug)\",\n       GLOBAL_VAR(my_crc_dbug_check), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, ULONG_MAX), DEFAULT(0), BLOCK_SIZE(1));\n#endif\n\nstatic Sys_var_uint Sys_extra_port(\n       \"extra_port\",\n       \"Extra port number to use for tcp connections in a \"\n       \"one-thread-per-connection manner. 0 means don't use another port\",\n       READ_ONLY GLOBAL_VAR(mysqld_extra_port), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX32), DEFAULT(0), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_extra_max_connections(\n       \"extra_max_connections\", \"The number of connections on extra-port\",\n       GLOBAL_VAR(extra_max_connections), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, 100000), DEFAULT(1), BLOCK_SIZE(1), NO_MUTEX_GUARD,\n       NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(fix_max_connections));\n\n#ifdef SAFE_MUTEX\nstatic Sys_var_mybool Sys_mutex_deadlock_detector(\n       \"mutex_deadlock_detector\", \"Enable checking of wrong mutex usage\",\n       READ_ONLY GLOBAL_VAR(safe_mutex_deadlock_detector),\n       CMD_LINE(OPT_ARG), DEFAULT(TRUE));\n#endif\n\nstatic Sys_var_keycache Sys_key_cache_segments(\n       \"key_cache_segments\", \"The number of segments in a key cache\",\n       KEYCACHE_VAR(param_partitions),\n       CMD_LINE(REQUIRED_ARG, OPT_KEY_CACHE_PARTITIONS),\n       VALID_RANGE(0, MAX_KEY_CACHE_PARTITIONS),\n       DEFAULT(DEFAULT_KEY_CACHE_PARTITIONS),\n       BLOCK_SIZE(1), NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(0),\n       ON_UPDATE(repartition_keycache));\n\nstatic const char *log_slow_filter_names[]= \n{ \"admin\", \"filesort\", \"filesort_on_disk\", \"full_join\", \"full_scan\",\n  \"query_cache\", \"query_cache_miss\", \"tmp_table\", \"tmp_table_on_disk\", 0\n};\nstatic Sys_var_set Sys_log_slow_filter(\n       \"log_slow_filter\",\n       \"Log only certain types of queries. Multiple \"\n       \"flags can be specified, separated by commas. Valid values are admin, \"\n       \"slave, filesort, filesort_on_disk, full_join, full_scan, query_cache, \"\n       \"query_cache_miss, tmp_table, tmp_table_on_disk\",\n       SESSION_VAR(log_slow_filter), CMD_LINE(REQUIRED_ARG),\n       log_slow_filter_names,\n       DEFAULT(MAX_SET(array_elements(log_slow_filter_names)-1)));\n\nstatic Sys_var_ulong Sys_log_slow_rate_limit(\n       \"log_slow_rate_limit\",\n       \"Write to slow log every #th slow query. Set to 1 to log everything. \"\n       \"Increase it to reduce the size of the slow or the performance impact \"\n       \"of slow logging\",\n       SESSION_VAR(log_slow_rate_limit), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(1, UINT_MAX), DEFAULT(1), BLOCK_SIZE(1));\n\nstatic const char *log_slow_verbosity_names[]= { \"innodb\", \"query_plan\", 0 };\nstatic Sys_var_set Sys_log_slow_verbosity(\n       \"log_slow_verbosity\",\n       \"log-slow-verbosity=[value[,value ...]] where value is one of \"\n       \"'innodb', 'query_plan'\",\n       SESSION_VAR(log_slow_verbosity), CMD_LINE(REQUIRED_ARG),\n       log_slow_verbosity_names, DEFAULT(LOG_SLOW_VERBOSITY_INIT));\n\nstatic Sys_var_ulong Sys_join_cache_level(\n       \"join_cache_level\",\n       \"Controls what join operations can be executed with join buffers. Odd \"\n       \"numbers are used for plain join buffers while even numbers are used \"\n       \"for linked buffers\",\n       SESSION_VAR(join_cache_level), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, 8), DEFAULT(2), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_mrr_buffer_size(\n       \"mrr_buffer_size\",\n       \"Size of buffer to use when using MRR with range access\",\n       SESSION_VAR(mrr_buff_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(IO_SIZE*2, INT_MAX32), DEFAULT(256*1024), BLOCK_SIZE(1));\n\nstatic Sys_var_ulong Sys_rowid_merge_buff_size(\n       \"rowid_merge_buff_size\",\n       \"The size of the buffers used [NOT] IN evaluation via partial matching\",\n       SESSION_VAR(rowid_merge_buff_size), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, ((ulonglong)~(intptr)0)/2), DEFAULT(8*1024*1024),\n       BLOCK_SIZE(1));\n\nstatic Sys_var_mybool Sys_userstat(\n       \"userstat\",\n       \"Enables statistics gathering for USER_STATISTICS, CLIENT_STATISTICS, \"\n       \"INDEX_STATISTICS and TABLE_STATISTICS tables in the INFORMATION_SCHEMA\",\n       GLOBAL_VAR(opt_userstat_running),\n       CMD_LINE(OPT_ARG), DEFAULT(FALSE));\n\nstatic Sys_var_mybool Sys_binlog_annotate_row_events(\n       \"binlog_annotate_row_events\",\n       \"Tells the master to annotate RBR events with the statement that \"\n       \"caused these events\",\n       SESSION_VAR(binlog_annotate_row_events), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\n#ifdef HAVE_REPLICATION\nstatic Sys_var_mybool Sys_replicate_annotate_row_events(\n       \"replicate_annotate_row_events\",\n       \"Tells the slave to write annotate rows events recieved from the master \"\n       \"to its own binary log. Ignored if log_slave_updates is not set\",\n       READ_ONLY GLOBAL_VAR(opt_replicate_annotate_row_events),\n       CMD_LINE(OPT_ARG), DEFAULT(0));\n#endif\n\nstatic Sys_var_ulonglong Sys_join_buffer_space_limit(\n       \"join_buffer_space_limit\",\n       \"The limit of the space for all join buffers used by a query\",\n       SESSION_VAR(join_buff_space_limit), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(2048, ULONGLONG_MAX), DEFAULT(16*128*1024),\n       BLOCK_SIZE(2048));\n\nstatic Sys_var_ulong Sys_progress_report_time(\n       \"progress_report_time\",\n       \"Seconds between sending progress reports to the client for \"\n       \"time-consuming statements. Set to 0 to disable progress reporting.\",\n       SESSION_VAR(progress_report_time), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(5), BLOCK_SIZE(1));\n\nstatic Sys_var_mybool Sys_no_thread_alarm(\n       \"debug_no_thread_alarm\",\n       \"Disable system thread alarm calls. Disabling it may be useful \"\n       \"in debugging or testing, never do it in production\",\n       READ_ONLY GLOBAL_VAR(my_disable_thr_alarm), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\nstatic Sys_var_mybool Sys_query_cache_strip_comments(\n       \"query_cache_strip_comments\",\n       \"Strip all comments from a query before storing it \"\n       \"in the query cache\",\n       SESSION_VAR(query_cache_strip_comments), CMD_LINE(OPT_ARG),\n       DEFAULT(FALSE));\n\nstatic ulonglong in_transaction(THD *thd)\n{\n  return test(thd->in_active_multi_stmt_transaction());\n}\nstatic Sys_var_session_special Sys_in_transaction(\n       \"in_transaction\", \"Whether there is an active transaction\",\n       READ_ONLY sys_var::ONLY_SESSION, NO_CMD_LINE,\n       VALID_RANGE(0, 1), BLOCK_SIZE(1), NO_MUTEX_GUARD,\n       NOT_IN_BINLOG, ON_CHECK(0), ON_UPDATE(0), ON_READ(in_transaction));\n\n#ifndef DBUG_OFF\nstatic Sys_var_ulong Sys_debug_binlog_fsync_sleep(\n       \"debug_binlog_fsync_sleep\",\n       \"Extra sleep (in microseconds) to add to binlog fsync(), for debugging\",\n       GLOBAL_VAR(opt_binlog_dbug_fsync_sleep),\n       CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, UINT_MAX), DEFAULT(0), BLOCK_SIZE(1));\n#endif\n\nstatic Sys_var_harows Sys_expensive_subquery_limit(\n       \"expensive_subquery_limit\",\n       \"The maximum number of rows a subquery may examine in order to be \"\n       \"executed during optimization and used for constant optimization\",\n       SESSION_VAR(expensive_subquery_limit), CMD_LINE(REQUIRED_ARG),\n       VALID_RANGE(0, HA_POS_ERROR), DEFAULT(100), BLOCK_SIZE(1));\n\nstatic bool check_pseudo_slave_mode(sys_var *self, THD *thd, set_var *var)\n{\n  longlong previous_val= thd->variables.pseudo_slave_mode;\n  longlong val= (longlong) var->save_result.ulonglong_value;\n  bool rli_fake= false;\n\n#ifndef EMBEDDED_LIBRARY\n  rli_fake= thd->rli_fake ? true : false;\n#endif\n\n  if (rli_fake)\n  {\n    if (!val)\n    {\n#ifndef EMBEDDED_LIBRARY\n      delete thd->rli_fake;\n      thd->rli_fake= NULL;\n#endif\n    }\n    else if (previous_val && val)\n      goto ineffective;\n    else if (!previous_val && val)\n      push_warning(thd, MYSQL_ERROR::WARN_LEVEL_WARN,\n                   ER_WRONG_VALUE_FOR_VAR,\n                   \"'pseudo_slave_mode' is already ON.\");\n  }\n  else\n  {\n    if (!previous_val && !val)\n      goto ineffective;\n    else if (previous_val && !val)\n      push_warning(thd, MYSQL_ERROR::WARN_LEVEL_WARN,\n                   ER_WRONG_VALUE_FOR_VAR,\n                   \"Slave applier execution mode not active, \"\n                   \"statement ineffective.\");\n  }\n  goto end;\n\nineffective:\n  push_warning(thd, MYSQL_ERROR::WARN_LEVEL_WARN,\n               ER_WRONG_VALUE_FOR_VAR,\n               \"'pseudo_slave_mode' change was ineffective.\");\n\nend:\n  return FALSE;\n}\nstatic Sys_var_mybool Sys_pseudo_slave_mode(\n       \"pseudo_slave_mode\",\n       \"SET pseudo_slave_mode= 0,1 are commands that mysqlbinlog \"\n       \"adds to beginning and end of binary log dumps. While zero \"\n       \"value indeed disables, the actual enabling of the slave \"\n       \"applier execution mode is done implicitly when a \"\n       \"Format_description_event is sent through the session.\",\n       SESSION_ONLY(pseudo_slave_mode), NO_CMD_LINE, DEFAULT(FALSE),\n       NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(check_pseudo_slave_mode));\n\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql/mysqld.cc": "/* Copyright (c) 2000, 2015, Oracle and/or its affiliates.\n   Copyright (c) 2008, 2015, SkySQL Ab.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA */\n\n#include \"my_global.h\"                          /* NO_EMBEDDED_ACCESS_CHECKS */\n#include \"sql_priv.h\"\n#include \"unireg.h\"\n#include <signal.h>\n#ifndef __WIN__\n#include <netdb.h>        // getservbyname, servent\n#endif\n#include \"sql_parse.h\"    // test_if_data_home_dir\n#include \"sql_cache.h\"    // query_cache, query_cache_*\n#include \"sql_locale.h\"   // MY_LOCALES, my_locales, my_locale_by_name\n#include \"sql_show.h\"     // free_status_vars, add_status_vars,\n                          // reset_status_vars\n#include \"strfunc.h\"      // find_set_from_flags\n#include \"parse_file.h\"   // File_parser_dummy_hook\n#include \"sql_db.h\"       // my_dboptions_cache_free\n                          // my_dboptions_cache_init\n#include \"sql_table.h\"    // release_ddl_log, execute_ddl_log_recovery\n#include \"sql_connect.h\"  // free_max_user_conn, init_max_user_conn,\n                          // handle_one_connection\n#include \"sql_time.h\"     // known_date_time_formats,\n                          // get_date_time_format_str,\n                          // date_time_format_make\n#include \"tztime.h\"       // my_tz_free, my_tz_init, my_tz_SYSTEM\n#include \"hostname.h\"     // hostname_cache_free, hostname_cache_init\n#include \"sql_acl.h\"      // acl_free, grant_free, acl_init,\n                          // grant_init\n#include \"sql_base.h\"     // table_def_free, table_def_init,\n                          // cached_open_tables,\n                          // cached_table_definitions\n#include \"sql_test.h\"     // mysql_print_status\n#include \"item_create.h\"  // item_create_cleanup, item_create_init\n#include \"sql_servers.h\"  // servers_free, servers_init\n#include \"init.h\"         // unireg_init\n#include \"derror.h\"       // init_errmessage\n#include \"derror.h\"       // init_errmessage\n#include \"des_key_file.h\" // load_des_key_file\n#include \"sql_manager.h\"  // stop_handle_manager, start_handle_manager\n#include \"sql_expression_cache.h\" // subquery_cache_miss, subquery_cache_hit\n\n#include <m_ctype.h>\n#include <my_dir.h>\n#include <my_bit.h>\n#include \"slave.h\"\n#include \"rpl_mi.h\"\n#include \"sql_repl.h\"\n#include \"rpl_filter.h\"\n#include \"client_settings.h\"\n#include \"repl_failsafe.h\"\n#include <sql_common.h>\n#include <my_stacktrace.h>\n#include \"mysqld_suffix.h\"\n#include \"mysys_err.h\"\n#include \"events.h\"\n#include \"sql_audit.h\"\n#include \"probes_mysql.h\"\n#include \"scheduler.h\"\n#include <waiting_threads.h>\n#include \"debug_sync.h\"\n#include \"sql_callback.h\"\n#include \"threadpool.h\"\n\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n#include \"../storage/perfschema/pfs_server.h\"\n#endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */\n\n#include \"keycaches.h\"\n#include \"../storage/myisam/ha_myisam.h\"\n#include \"set_var.h\"\n\n#include \"rpl_injector.h\"\n\n#include \"rpl_handler.h\"\n\n#ifdef HAVE_SYS_PRCTL_H\n#include <sys/prctl.h>\n#endif\n\n#include <thr_alarm.h>\n#include <ft_global.h>\n#include <errmsg.h>\n#include \"sp_rcontext.h\"\n#include \"sp_cache.h\"\n#include \"sql_reload.h\"  // reload_acl_and_cache\n\n#ifdef HAVE_POLL_H\n#include <poll.h>\n#endif\n\n#define mysqld_charset &my_charset_latin1\n\n/* We have HAVE_valgrind below as this speeds up the shutdown of MySQL */\n\n#if defined(SIGNALS_DONT_BREAK_READ) || defined(HAVE_valgrind) && defined(__linux__)\n#define HAVE_CLOSE_SERVER_SOCK 1\n#endif\n\nextern \"C\" {\t\t\t\t\t// Because of SCO 3.2V4.2\n#include <errno.h>\n#include <sys/stat.h>\n#ifndef __GNU_LIBRARY__\n#define __GNU_LIBRARY__\t\t\t\t// Skip warnings in getopt.h\n#endif\n#include <my_getopt.h>\n#ifdef HAVE_SYSENT_H\n#include <sysent.h>\n#endif\n#ifdef HAVE_PWD_H\n#include <pwd.h>\t\t\t\t// For struct passwd\n#endif\n#include <my_net.h>\n\n#if !defined(__WIN__)\n#include <sys/resource.h>\n#ifdef HAVE_SYS_UN_H\n#include <sys/un.h>\n#endif\n#ifdef HAVE_SELECT_H\n#include <select.h>\n#endif\n#ifdef HAVE_SYS_SELECT_H\n#include <sys/select.h>\n#endif\n#include <sys/utsname.h>\n#endif /* __WIN__ */\n\n#include <my_libwrap.h>\n\n#ifdef HAVE_SYS_MMAN_H\n#include <sys/mman.h>\n#endif\n\n#ifdef __WIN__ \n#include <crtdbg.h>\n#endif\n\n#ifdef HAVE_SOLARIS_LARGE_PAGES\n#include <sys/mman.h>\n#if defined(__sun__) && defined(__GNUC__) && defined(__cplusplus) \\\n    && defined(_XOPEN_SOURCE)\nextern int getpagesizes(size_t *, int);\nextern int getpagesizes2(size_t *, int);\nextern int memcntl(caddr_t, size_t, int, caddr_t, int, int);\n#endif /* __sun__ ... */\n#endif /* HAVE_SOLARIS_LARGE_PAGES */\n\n#ifdef _AIX41\nint initgroups(const char *,unsigned int);\n#endif\n\n#if defined(__FreeBSD__) && defined(HAVE_IEEEFP_H) && !defined(HAVE_FEDISABLEEXCEPT)\n#include <ieeefp.h>\n#ifdef HAVE_FP_EXCEPT\t\t\t\t// Fix type conflict\ntypedef fp_except fp_except_t;\n#endif\n#endif /* __FreeBSD__ && HAVE_IEEEFP_H && !HAVE_FEDISABLEEXCEPT */\n#ifdef HAVE_SYS_FPU_H\n/* for IRIX to use set_fpc_csr() */\n#include <sys/fpu.h>\n#endif\n#ifdef HAVE_FPU_CONTROL_H\n#include <fpu_control.h>\n#endif\n#if defined(__i386__) && !defined(HAVE_FPU_CONTROL_H)\n# define fpu_control_t unsigned int\n# define _FPU_EXTENDED 0x300\n# define _FPU_DOUBLE 0x200\n# if defined(__GNUC__) || (defined(__SUNPRO_CC) && __SUNPRO_CC >= 0x590)\n#  define _FPU_GETCW(cw) asm volatile (\"fnstcw %0\" : \"=m\" (*&cw))\n#  define _FPU_SETCW(cw) asm volatile (\"fldcw %0\" : : \"m\" (*&cw))\n# else\n#  define _FPU_GETCW(cw) (cw= 0)\n#  define _FPU_SETCW(cw)\n# endif\n#endif\n\n#ifndef HAVE_FCNTL\n#define fcntl(X,Y,Z) 0\n#endif\n\nextern \"C\" my_bool reopen_fstreams(const char *filename,\n                                   FILE *outstream, FILE *errstream);\n\ninline void setup_fpu()\n{\n#if defined(__FreeBSD__) && defined(HAVE_IEEEFP_H) && !defined(HAVE_FEDISABLEEXCEPT)\n  /* We can't handle floating point exceptions with threads, so disable\n     this on freebsd\n     Don't fall for overflow, underflow,divide-by-zero or loss of precision.\n     fpsetmask() is deprecated in favor of fedisableexcept() in C99.\n  */\n#if defined(FP_X_DNML)\n  fpsetmask(~(FP_X_INV | FP_X_DNML | FP_X_OFL | FP_X_UFL | FP_X_DZ |\n\t      FP_X_IMP));\n#else\n  fpsetmask(~(FP_X_INV |             FP_X_OFL | FP_X_UFL | FP_X_DZ |\n              FP_X_IMP));\n#endif /* FP_X_DNML */\n#endif /* __FreeBSD__ && HAVE_IEEEFP_H && !HAVE_FEDISABLEEXCEPT */\n\n#ifdef HAVE_FEDISABLEEXCEPT\n  fedisableexcept(FE_ALL_EXCEPT);\n#endif\n\n#ifdef HAVE_FESETROUND\n    /* Set FPU rounding mode to \"round-to-nearest\" */\n  fesetround(FE_TONEAREST);\n#endif /* HAVE_FESETROUND */\n\n  /*\n    x86 (32-bit) requires FPU precision to be explicitly set to 64 bit\n    (double precision) for portable results of floating point operations.\n    However, there is no need to do so if compiler is using SSE2 for floating\n    point, double values will be stored and processed in 64 bits anyway.\n  */\n#if defined(__i386__) && !defined(__SSE2_MATH__)\n#if defined(_WIN32)\n#if !defined(_WIN64)\n  _control87(_PC_53, MCW_PC);\n#endif /* !_WIN64 */\n#else /* !_WIN32 */\n  fpu_control_t cw;\n  _FPU_GETCW(cw);\n  cw= (cw & ~_FPU_EXTENDED) | _FPU_DOUBLE;\n  _FPU_SETCW(cw);\n#endif /* _WIN32 && */\n#endif /* __i386__ */\n\n#if defined(__sgi) && defined(HAVE_SYS_FPU_H)\n  /* Enable denormalized DOUBLE values support for IRIX */\n  union fpc_csr n;\n  n.fc_word = get_fpc_csr();\n  n.fc_struct.flush = 0;\n  set_fpc_csr(n.fc_word);\n#endif\n}\n\n} /* cplusplus */\n\n#define MYSQL_KILL_SIGNAL SIGTERM\n\n#include <my_pthread.h>\t\t\t// For thr_setconcurency()\n\n#ifdef SOLARIS\nextern \"C\" int gethostname(char *name, int namelen);\n#endif\n\nextern \"C\" sig_handler handle_fatal_signal(int sig);\n\n#if defined(__linux__)\n#define ENABLE_TEMP_POOL 1\n#else\n#define ENABLE_TEMP_POOL 0\n#endif\n\n/* Constants */\n\n#include <welcome_copyright_notice.h> // ORACLE_WELCOME_COPYRIGHT_NOTICE\n\nconst char *show_comp_option_name[]= {\"YES\", \"NO\", \"DISABLED\"};\n\nstatic const char *tc_heuristic_recover_names[]=\n{\n  \"OFF\", \"COMMIT\", \"ROLLBACK\", NullS\n};\nstatic TYPELIB tc_heuristic_recover_typelib=\n{\n  array_elements(tc_heuristic_recover_names)-1,\"\",\n  tc_heuristic_recover_names, NULL\n};\n\nconst char *first_keyword= \"first\", *binary_keyword= \"BINARY\";\nconst char *my_localhost= \"localhost\", *delayed_user= \"DELAYED\";\n\nbool opt_large_files= sizeof(my_off_t) > 4;\nstatic my_bool opt_autocommit; ///< for --autocommit command-line option\n\n/*\n  Used with --help for detailed option\n*/\nstatic my_bool opt_verbose= 0;\n\narg_cmp_func Arg_comparator::comparator_matrix[6][2] =\n{{&Arg_comparator::compare_string,     &Arg_comparator::compare_e_string},\n {&Arg_comparator::compare_real,       &Arg_comparator::compare_e_real},\n {&Arg_comparator::compare_int_signed, &Arg_comparator::compare_e_int},\n {&Arg_comparator::compare_row,        &Arg_comparator::compare_e_row},\n {&Arg_comparator::compare_decimal,    &Arg_comparator::compare_e_decimal},\n {&Arg_comparator::compare_datetime,   &Arg_comparator::compare_e_datetime}};\n\n/* static variables */\n\n#ifdef HAVE_PSI_INTERFACE\n#if (defined(_WIN32) || defined(HAVE_SMEM)) && !defined(EMBEDDED_LIBRARY)\nstatic PSI_thread_key key_thread_handle_con_namedpipes;\nstatic PSI_cond_key key_COND_handler_count;\n#endif /* _WIN32 || HAVE_SMEM && !EMBEDDED_LIBRARY */\n\n#if defined(HAVE_SMEM) && !defined(EMBEDDED_LIBRARY)\nstatic PSI_thread_key key_thread_handle_con_sharedmem;\n#endif /* HAVE_SMEM && !EMBEDDED_LIBRARY */\n\n#if (defined(_WIN32) || defined(HAVE_SMEM)) && !defined(EMBEDDED_LIBRARY)\nstatic PSI_thread_key key_thread_handle_con_sockets;\n#endif /* _WIN32 || HAVE_SMEM && !EMBEDDED_LIBRARY */\n\n#ifdef __WIN__\nstatic PSI_thread_key key_thread_handle_shutdown;\n#endif /* __WIN__ */\n\n#if defined (HAVE_OPENSSL) && !defined(HAVE_YASSL)\nstatic PSI_rwlock_key key_rwlock_openssl;\n#endif\n#endif /* HAVE_PSI_INTERFACE */\n\n#ifdef HAVE_NPTL\nvolatile sig_atomic_t ld_assume_kernel_is_set= 0;\n#endif\n\n/* the default log output is log tables */\nstatic bool lower_case_table_names_used= 0;\nstatic bool max_long_data_size_used= false;\nstatic bool volatile select_thread_in_use, signal_thread_in_use;\nstatic volatile bool ready_to_exit;\nstatic my_bool opt_debugging= 0, opt_external_locking= 0, opt_console= 0;\nstatic my_bool opt_short_log_format= 0;\nstatic uint kill_cached_threads, wake_thread;\nulong max_used_connections;\nstatic volatile ulong cached_thread_count= 0;\nstatic char *mysqld_user, *mysqld_chroot;\nstatic char *default_character_set_name;\nstatic char *character_set_filesystem_name;\nstatic char *lc_messages;\nstatic char *lc_time_names_name;\nstatic char *my_bind_addr_str;\nstatic char *default_collation_name;\nchar *default_storage_engine;\nstatic char compiled_default_collation_name[]= MYSQL_DEFAULT_COLLATION_NAME;\nstatic I_List<THD> thread_cache;\nstatic bool binlog_format_used= false;\nLEX_STRING opt_init_connect, opt_init_slave;\nstatic mysql_cond_t COND_thread_cache, COND_flush_thread_cache;\nstatic DYNAMIC_ARRAY all_options;\n\n/* Global variables */\n\nbool opt_bin_log, opt_bin_log_used=0, opt_ignore_builtin_innodb= 0;\nmy_bool opt_log, opt_slow_log, debug_assert_if_crashed_table= 0, opt_help= 0;\nstatic my_bool opt_abort;\nulonglong log_output_options;\nmy_bool opt_userstat_running;\nmy_bool opt_log_queries_not_using_indexes= 0;\nbool opt_error_log= IF_WIN(1,0);\nbool opt_disable_networking=0, opt_skip_show_db=0;\nbool opt_skip_name_resolve=0;\nmy_bool opt_character_set_client_handshake= 1;\nbool server_id_supplied = 0;\nbool opt_endinfo, using_udf_functions;\nmy_bool locked_in_memory;\nbool opt_using_transactions;\nbool volatile abort_loop;\nbool volatile shutdown_in_progress;\nuint volatile global_disable_checkpoint;\n#if defined(_WIN32) && !defined(EMBEDDED_LIBRARY)\nulong slow_start_timeout;\n#endif\n/*\n  True if the bootstrap thread is running. Protected by LOCK_thread_count,\n  just like thread_count.\n  Used in bootstrap() function to determine if the bootstrap thread\n  has completed. Note, that we can't use 'thread_count' instead,\n  since in 5.1, in presence of the Event Scheduler, there may be\n  event threads running in parallel, so it's impossible to know\n  what value of 'thread_count' is a sign of completion of the\n  bootstrap thread.\n\n  At the same time, we can't start the event scheduler after\n  bootstrap either, since we want to be able to process event-related\n  SQL commands in the init file and in --bootstrap mode.\n*/\nbool in_bootstrap= FALSE;\n/**\n   @brief 'grant_option' is used to indicate if privileges needs\n   to be checked, in which case the lock, LOCK_grant, is used\n   to protect access to the grant table.\n   @note This flag is dropped in 5.1\n   @see grant_init()\n */\nbool volatile grant_option;\n\nmy_bool opt_skip_slave_start = 0; ///< If set, slave is not autostarted\nmy_bool opt_reckless_slave = 0;\nmy_bool opt_enable_named_pipe= 0;\nmy_bool opt_local_infile, opt_slave_compressed_protocol;\nmy_bool opt_safe_user_create = 0;\nmy_bool opt_show_slave_auth_info;\nmy_bool opt_log_slave_updates= 0;\nmy_bool opt_replicate_annotate_row_events= 0;\nchar *opt_slave_skip_errors;\n\n/*\n  Legacy global handlerton. These will be removed (please do not add more).\n*/\nhandlerton *heap_hton;\nhandlerton *myisam_hton;\nhandlerton *partition_hton;\n\nmy_bool read_only= 0, opt_readonly= 0;\nmy_bool use_temp_pool, relay_log_purge;\nmy_bool relay_log_recovery;\nmy_bool opt_sync_frm, opt_allow_suspicious_udfs;\nmy_bool opt_secure_auth= 0;\nchar* opt_secure_file_priv;\nmy_bool opt_log_slow_admin_statements= 0;\nmy_bool opt_log_slow_slave_statements= 0;\nmy_bool lower_case_file_system= 0;\nmy_bool opt_large_pages= 0;\nmy_bool opt_super_large_pages= 0;\nmy_bool opt_myisam_use_mmap= 0;\nuint   opt_large_page_size= 0;\n#if defined(ENABLED_DEBUG_SYNC)\nMYSQL_PLUGIN_IMPORT uint    opt_debug_sync_timeout= 0;\n#endif /* defined(ENABLED_DEBUG_SYNC) */\nmy_bool opt_old_style_user_limits= 0, trust_function_creators= 0;\nulong opt_replicate_events_marked_for_skip;\n\n/*\n  True if there is at least one per-hour limit for some user, so we should\n  check them before each query (and possibly reset counters when hour is\n  changed). False otherwise.\n*/\nvolatile bool mqh_used = 0;\nmy_bool opt_noacl;\nmy_bool sp_automatic_privileges= 1;\n\nulong opt_binlog_rows_event_max_size;\nmy_bool opt_master_verify_checksum= 0;\nmy_bool opt_slave_sql_verify_checksum= 1;\nconst char *binlog_format_names[]= {\"MIXED\", \"STATEMENT\", \"ROW\", NullS};\nvolatile sig_atomic_t calling_initgroups= 0; /**< Used in SIGSEGV handler. */\nuint mysqld_port, test_flags, select_errors, dropping_tables, ha_open_options;\nuint mysqld_extra_port;\nuint mysqld_port_timeout;\nulong delay_key_write_options;\nuint protocol_version;\nuint lower_case_table_names;\nulong tc_heuristic_recover= 0;\nuint volatile thread_count;\nint32 thread_running;\nulong thread_created;\nulong back_log, connect_timeout, concurrency, server_id;\nulong table_cache_size, table_def_size;\nulong what_to_log;\nulong slow_launch_time, slave_open_temp_tables;\nulong open_files_limit, max_binlog_size, max_relay_log_size;\nulong slave_trans_retries;\nuint  slave_net_timeout;\nulong slave_exec_mode_options;\nulonglong slave_type_conversions_options;\nulong thread_cache_size=0;\nulonglong binlog_cache_size=0;\nulonglong max_binlog_cache_size=0;\nulong slave_max_allowed_packet= 0;\nulonglong binlog_stmt_cache_size=0;\nulonglong  max_binlog_stmt_cache_size=0;\nulonglong query_cache_size=0;\nulong refresh_version;  /* Increments on each reload */\nulong executed_events=0;\nquery_id_t global_query_id;\nmy_atomic_rwlock_t global_query_id_lock;\nmy_atomic_rwlock_t thread_running_lock;\nulong aborted_threads, aborted_connects;\nulong delayed_insert_timeout, delayed_insert_limit, delayed_queue_size;\nulong delayed_insert_threads, delayed_insert_writes, delayed_rows_in_use;\nulong delayed_insert_errors,flush_time;\nulong specialflag=0;\nulong binlog_cache_use= 0, binlog_cache_disk_use= 0;\nulong binlog_stmt_cache_use= 0, binlog_stmt_cache_disk_use= 0;\nulong max_connections, max_connect_errors;\nulong extra_max_connections;\nulonglong denied_connections;\nmy_decimal decimal_zero;\n\n/*\n  Maximum length of parameter value which can be set through\n  mysql_send_long_data() call.\n*/\nulong max_long_data_size;\n\n/* Limits for internal temporary tables (MyISAM or Aria) */\nuint internal_tmp_table_max_key_length;\nuint internal_tmp_table_max_key_segments;\n\nbool max_user_connections_checking=0;\n/**\n  Limit of the total number of prepared statements in the server.\n  Is necessary to protect the server against out-of-memory attacks.\n*/\nulong max_prepared_stmt_count;\n/**\n  Current total number of prepared statements in the server. This number\n  is exact, and therefore may not be equal to the difference between\n  `com_stmt_prepare' and `com_stmt_close' (global status variables), as\n  the latter ones account for all registered attempts to prepare\n  a statement (including unsuccessful ones).  Prepared statements are\n  currently connection-local: if the same SQL query text is prepared in\n  two different connections, this counts as two distinct prepared\n  statements.\n*/\nulong prepared_stmt_count=0;\nulong thread_id=1L,current_pid;\nulong slow_launch_threads = 0;\nuint sync_binlog_period= 0, sync_relaylog_period= 0,\n     sync_relayloginfo_period= 0, sync_masterinfo_period= 0;\nulong expire_logs_days = 0;\nulong rpl_recovery_rank=0;\n/**\n  Soft upper limit for number of sp_head objects that can be stored\n  in the sp_cache for one connection.\n*/\nulong stored_program_cache_size= 0;\n\nconst double log_10[] = {\n  1e000, 1e001, 1e002, 1e003, 1e004, 1e005, 1e006, 1e007, 1e008, 1e009,\n  1e010, 1e011, 1e012, 1e013, 1e014, 1e015, 1e016, 1e017, 1e018, 1e019,\n  1e020, 1e021, 1e022, 1e023, 1e024, 1e025, 1e026, 1e027, 1e028, 1e029,\n  1e030, 1e031, 1e032, 1e033, 1e034, 1e035, 1e036, 1e037, 1e038, 1e039,\n  1e040, 1e041, 1e042, 1e043, 1e044, 1e045, 1e046, 1e047, 1e048, 1e049,\n  1e050, 1e051, 1e052, 1e053, 1e054, 1e055, 1e056, 1e057, 1e058, 1e059,\n  1e060, 1e061, 1e062, 1e063, 1e064, 1e065, 1e066, 1e067, 1e068, 1e069,\n  1e070, 1e071, 1e072, 1e073, 1e074, 1e075, 1e076, 1e077, 1e078, 1e079,\n  1e080, 1e081, 1e082, 1e083, 1e084, 1e085, 1e086, 1e087, 1e088, 1e089,\n  1e090, 1e091, 1e092, 1e093, 1e094, 1e095, 1e096, 1e097, 1e098, 1e099,\n  1e100, 1e101, 1e102, 1e103, 1e104, 1e105, 1e106, 1e107, 1e108, 1e109,\n  1e110, 1e111, 1e112, 1e113, 1e114, 1e115, 1e116, 1e117, 1e118, 1e119,\n  1e120, 1e121, 1e122, 1e123, 1e124, 1e125, 1e126, 1e127, 1e128, 1e129,\n  1e130, 1e131, 1e132, 1e133, 1e134, 1e135, 1e136, 1e137, 1e138, 1e139,\n  1e140, 1e141, 1e142, 1e143, 1e144, 1e145, 1e146, 1e147, 1e148, 1e149,\n  1e150, 1e151, 1e152, 1e153, 1e154, 1e155, 1e156, 1e157, 1e158, 1e159,\n  1e160, 1e161, 1e162, 1e163, 1e164, 1e165, 1e166, 1e167, 1e168, 1e169,\n  1e170, 1e171, 1e172, 1e173, 1e174, 1e175, 1e176, 1e177, 1e178, 1e179,\n  1e180, 1e181, 1e182, 1e183, 1e184, 1e185, 1e186, 1e187, 1e188, 1e189,\n  1e190, 1e191, 1e192, 1e193, 1e194, 1e195, 1e196, 1e197, 1e198, 1e199,\n  1e200, 1e201, 1e202, 1e203, 1e204, 1e205, 1e206, 1e207, 1e208, 1e209,\n  1e210, 1e211, 1e212, 1e213, 1e214, 1e215, 1e216, 1e217, 1e218, 1e219,\n  1e220, 1e221, 1e222, 1e223, 1e224, 1e225, 1e226, 1e227, 1e228, 1e229,\n  1e230, 1e231, 1e232, 1e233, 1e234, 1e235, 1e236, 1e237, 1e238, 1e239,\n  1e240, 1e241, 1e242, 1e243, 1e244, 1e245, 1e246, 1e247, 1e248, 1e249,\n  1e250, 1e251, 1e252, 1e253, 1e254, 1e255, 1e256, 1e257, 1e258, 1e259,\n  1e260, 1e261, 1e262, 1e263, 1e264, 1e265, 1e266, 1e267, 1e268, 1e269,\n  1e270, 1e271, 1e272, 1e273, 1e274, 1e275, 1e276, 1e277, 1e278, 1e279,\n  1e280, 1e281, 1e282, 1e283, 1e284, 1e285, 1e286, 1e287, 1e288, 1e289,\n  1e290, 1e291, 1e292, 1e293, 1e294, 1e295, 1e296, 1e297, 1e298, 1e299,\n  1e300, 1e301, 1e302, 1e303, 1e304, 1e305, 1e306, 1e307, 1e308\n};\n\ntime_t server_start_time, flush_status_time;\n\nchar mysql_home[FN_REFLEN], pidfile_name[FN_REFLEN], system_time_zone[30];\nchar *default_tz_name;\nchar log_error_file[FN_REFLEN], glob_hostname[FN_REFLEN], *opt_log_basename;\nchar mysql_real_data_home[FN_REFLEN],\n     lc_messages_dir[FN_REFLEN], reg_ext[FN_EXTLEN],\n     mysql_charsets_dir[FN_REFLEN],\n     *opt_init_file, *opt_tc_log_file;\nchar *lc_messages_dir_ptr= lc_messages_dir, *log_error_file_ptr;\nchar mysql_unpacked_real_data_home[FN_REFLEN];\nint mysql_unpacked_real_data_home_len;\nuint mysql_real_data_home_len, mysql_data_home_len= 1;\nuint reg_ext_length;\nconst key_map key_map_empty(0);\nkey_map key_map_full(0);                        // Will be initialized later\n\nDATE_TIME_FORMAT global_date_format, global_datetime_format, global_time_format;\nTime_zone *default_tz;\n\nconst char *mysql_real_data_home_ptr= mysql_real_data_home;\nchar server_version[SERVER_VERSION_LENGTH];\nchar *mysqld_unix_port, *opt_mysql_tmpdir;\nulong thread_handling;\n\n/** name of reference on left expression in rewritten IN subquery */\nconst char *in_left_expr_name= \"<left expr>\";\n/** name of additional condition */\nconst char *in_additional_cond= \"<IN COND>\";\nconst char *in_having_cond= \"<IN HAVING>\";\n\n/* classes for comparation parsing/processing */\nEq_creator eq_creator;\nNe_creator ne_creator;\nGt_creator gt_creator;\nLt_creator lt_creator;\nGe_creator ge_creator;\nLe_creator le_creator;\n\nMYSQL_FILE *bootstrap_file;\nint bootstrap_error;\n\nI_List<THD> threads;\nRpl_filter* rpl_filter;\nRpl_filter* binlog_filter;\n\nTHD *first_global_thread()\n{\n  if (threads.is_empty())\n    return NULL;\n  return threads.head();\n}\n\nTHD *next_global_thread(THD *thd)\n{\n  if (threads.is_last(thd))\n    return NULL;\n  struct ilink *next= thd->next;\n  return static_cast<THD*>(next);\n}\n\nstruct system_variables global_system_variables;\nstruct system_variables max_system_variables;\nstruct system_status_var global_status_var;\n\nMY_TMPDIR mysql_tmpdir_list;\nMY_BITMAP temp_pool;\n\nCHARSET_INFO *system_charset_info, *files_charset_info ;\nCHARSET_INFO *national_charset_info, *table_alias_charset;\nCHARSET_INFO *character_set_filesystem;\nCHARSET_INFO *error_message_charset_info;\n\nMY_LOCALE *my_default_lc_messages;\nMY_LOCALE *my_default_lc_time_names;\n\nSHOW_COMP_OPTION have_ssl, have_symlink, have_dlopen, have_query_cache;\nSHOW_COMP_OPTION have_geometry, have_rtree_keys;\nSHOW_COMP_OPTION have_crypt, have_compress;\nSHOW_COMP_OPTION have_profiling;\n\n/* Thread specific variables */\n\npthread_key(MEM_ROOT**,THR_MALLOC);\npthread_key(THD*, THR_THD);\nmysql_mutex_t LOCK_thread_count;\nmysql_mutex_t\n  LOCK_status, LOCK_error_log, LOCK_short_uuid_generator,\n  LOCK_delayed_insert, LOCK_delayed_status, LOCK_delayed_create,\n  LOCK_crypt,\n  LOCK_global_system_variables,\n  LOCK_user_conn, LOCK_slave_list, LOCK_active_mi,\n  LOCK_connection_count, LOCK_error_messages;\n\nmysql_mutex_t LOCK_stats, LOCK_global_user_client_stats,\n              LOCK_global_table_stats, LOCK_global_index_stats;\n\n/**\n  The below lock protects access to two global server variables:\n  max_prepared_stmt_count and prepared_stmt_count. These variables\n  set the limit and hold the current total number of prepared statements\n  in the server, respectively. As PREPARE/DEALLOCATE rate in a loaded\n  server may be fairly high, we need a dedicated lock.\n*/\nmysql_mutex_t LOCK_prepared_stmt_count;\n#ifdef HAVE_OPENSSL\nmysql_mutex_t LOCK_des_key_file;\n#endif\nmysql_rwlock_t LOCK_grant, LOCK_sys_init_connect, LOCK_sys_init_slave;\nmysql_rwlock_t LOCK_system_variables_hash;\nmysql_cond_t COND_thread_count;\npthread_t signal_thread;\npthread_attr_t connection_attrib;\nmysql_mutex_t LOCK_server_started;\nmysql_cond_t COND_server_started;\n\nint mysqld_server_started= 0;\n\nFile_parser_dummy_hook file_parser_dummy_hook;\n\n/* replication parameters, if master_host is not NULL, we are a slave */\nuint report_port= 0;\nulong master_retry_count=0;\nchar *master_info_file;\nchar *relay_log_info_file, *report_user, *report_password, *report_host;\nchar *opt_relay_logname = 0, *opt_relaylog_index_name=0;\nchar *opt_logname, *opt_slow_logname, *opt_bin_logname;\n\n/* Static variables */\n\nstatic volatile sig_atomic_t kill_in_progress;\nmy_bool opt_stack_trace;\nmy_bool opt_expect_abort= 0, opt_bootstrap= 0;\nstatic my_bool opt_myisam_log;\nstatic int cleanup_done;\nstatic ulong opt_specialflag;\nstatic char *opt_binlog_index_name;\nchar *mysql_home_ptr, *pidfile_name_ptr;\n/** Initial command line arguments (count), after load_defaults().*/\nstatic int defaults_argc;\n/**\n  Initial command line arguments (arguments), after load_defaults().\n  This memory is allocated by @c load_defaults() and should be freed\n  using @c free_defaults().\n  Do not modify defaults_argc / defaults_argv,\n  use remaining_argc / remaining_argv instead to parse the command\n  line arguments in multiple steps.\n*/\nstatic char **defaults_argv;\n/** Remaining command line arguments (count), filtered by handle_options().*/\nstatic int remaining_argc;\n/** Remaining command line arguments (arguments), filtered by handle_options().*/\nstatic char **remaining_argv;\n\nint orig_argc;\nchar **orig_argv;\n\n#ifdef HAVE_PSI_INTERFACE\n#ifdef HAVE_MMAP\nPSI_mutex_key key_PAGE_lock, key_LOCK_sync, key_LOCK_active, key_LOCK_pool;\n#endif /* HAVE_MMAP */\n\n#ifdef HAVE_OPENSSL\nPSI_mutex_key key_LOCK_des_key_file;\n#endif /* HAVE_OPENSSL */\n\nPSI_mutex_key key_BINLOG_LOCK_index, key_BINLOG_LOCK_prep_xids,\n  key_delayed_insert_mutex, key_hash_filo_lock, key_LOCK_active_mi,\n  key_LOCK_connection_count, key_LOCK_crypt, key_LOCK_delayed_create,\n  key_LOCK_delayed_insert, key_LOCK_delayed_status, key_LOCK_error_log,\n  key_LOCK_gdl, key_LOCK_global_system_variables,\n  key_LOCK_manager,\n  key_LOCK_prepared_stmt_count,\n  key_LOCK_rpl_status, key_LOCK_server_started, key_LOCK_status,\n  key_LOCK_system_variables_hash, key_LOCK_table_share, key_LOCK_thd_data,\n  key_LOCK_user_conn, key_LOCK_uuid_short_generator, key_LOG_LOCK_log,\n  key_master_info_data_lock, key_master_info_run_lock,\n  key_master_info_sleep_lock,\n  key_mutex_slave_reporting_capability_err_lock, key_relay_log_info_data_lock,\n  key_relay_log_info_log_space_lock, key_relay_log_info_run_lock,\n  key_relay_log_info_sleep_lock,\n  key_structure_guard_mutex, key_TABLE_SHARE_LOCK_ha_data,\n  key_LOCK_error_messages, key_LOG_INFO_lock, key_LOCK_thread_count,\n  key_PARTITION_LOCK_auto_inc;\nPSI_mutex_key key_RELAYLOG_LOCK_index;\n\nPSI_mutex_key key_LOCK_stats,\n  key_LOCK_global_user_client_stats, key_LOCK_global_table_stats,\n  key_LOCK_global_index_stats,\n  key_LOCK_wakeup_ready;\n\nPSI_mutex_key key_LOCK_prepare_ordered, key_LOCK_commit_ordered;\n\nstatic PSI_mutex_info all_server_mutexes[]=\n{\n#ifdef HAVE_MMAP\n  { &key_PAGE_lock, \"PAGE::lock\", 0},\n  { &key_LOCK_sync, \"TC_LOG_MMAP::LOCK_sync\", 0},\n  { &key_LOCK_active, \"TC_LOG_MMAP::LOCK_active\", 0},\n  { &key_LOCK_pool, \"TC_LOG_MMAP::LOCK_pool\", 0},\n#endif /* HAVE_MMAP */\n\n#ifdef HAVE_OPENSSL\n  { &key_LOCK_des_key_file, \"LOCK_des_key_file\", PSI_FLAG_GLOBAL},\n#endif /* HAVE_OPENSSL */\n\n  { &key_BINLOG_LOCK_index, \"MYSQL_BIN_LOG::LOCK_index\", 0},\n  { &key_BINLOG_LOCK_prep_xids, \"MYSQL_BIN_LOG::LOCK_prep_xids\", 0},\n  { &key_RELAYLOG_LOCK_index, \"MYSQL_RELAY_LOG::LOCK_index\", 0},\n  { &key_delayed_insert_mutex, \"Delayed_insert::mutex\", 0},\n  { &key_hash_filo_lock, \"hash_filo::lock\", 0},\n  { &key_LOCK_active_mi, \"LOCK_active_mi\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_connection_count, \"LOCK_connection_count\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_crypt, \"LOCK_crypt\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_delayed_create, \"LOCK_delayed_create\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_delayed_insert, \"LOCK_delayed_insert\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_delayed_status, \"LOCK_delayed_status\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_error_log, \"LOCK_error_log\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_gdl, \"LOCK_gdl\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_global_system_variables, \"LOCK_global_system_variables\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_manager, \"LOCK_manager\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_prepared_stmt_count, \"LOCK_prepared_stmt_count\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_rpl_status, \"LOCK_rpl_status\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_server_started, \"LOCK_server_started\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_status, \"LOCK_status\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_system_variables_hash, \"LOCK_system_variables_hash\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_table_share, \"LOCK_table_share\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_stats, \"LOCK_stats\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_global_user_client_stats, \"LOCK_global_user_client_stats\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_global_table_stats, \"LOCK_global_table_stats\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_global_index_stats, \"LOCK_global_index_stats\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_wakeup_ready, \"THD::LOCK_wakeup_ready\", 0},\n  { &key_LOCK_thd_data, \"THD::LOCK_thd_data\", 0},\n  { &key_LOCK_user_conn, \"LOCK_user_conn\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_uuid_short_generator, \"LOCK_uuid_short_generator\", PSI_FLAG_GLOBAL},\n  { &key_LOG_LOCK_log, \"LOG::LOCK_log\", 0},\n  { &key_master_info_data_lock, \"Master_info::data_lock\", 0},\n  { &key_master_info_run_lock, \"Master_info::run_lock\", 0},\n  { &key_master_info_sleep_lock, \"Master_info::sleep_lock\", 0},\n  { &key_mutex_slave_reporting_capability_err_lock, \"Slave_reporting_capability::err_lock\", 0},\n  { &key_relay_log_info_data_lock, \"Relay_log_info::data_lock\", 0},\n  { &key_relay_log_info_log_space_lock, \"Relay_log_info::log_space_lock\", 0},\n  { &key_relay_log_info_run_lock, \"Relay_log_info::run_lock\", 0},\n  { &key_relay_log_info_sleep_lock, \"Relay_log_info::sleep_lock\", 0},\n  { &key_structure_guard_mutex, \"Query_cache::structure_guard_mutex\", 0},\n  { &key_TABLE_SHARE_LOCK_ha_data, \"TABLE_SHARE::LOCK_ha_data\", 0},\n  { &key_LOCK_error_messages, \"LOCK_error_messages\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_prepare_ordered, \"LOCK_prepare_ordered\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_commit_ordered, \"LOCK_commit_ordered\", PSI_FLAG_GLOBAL},\n  { &key_LOG_INFO_lock, \"LOG_INFO::lock\", 0},\n  { &key_LOCK_thread_count, \"LOCK_thread_count\", PSI_FLAG_GLOBAL},\n  { &key_PARTITION_LOCK_auto_inc, \"HA_DATA_PARTITION::LOCK_auto_inc\", 0}\n};\n\nPSI_rwlock_key key_rwlock_LOCK_grant, key_rwlock_LOCK_logger,\n  key_rwlock_LOCK_sys_init_connect, key_rwlock_LOCK_sys_init_slave,\n  key_rwlock_LOCK_system_variables_hash, key_rwlock_query_cache_query_lock;\n\nstatic PSI_rwlock_info all_server_rwlocks[]=\n{\n#if defined (HAVE_OPENSSL) && !defined(HAVE_YASSL)\n  { &key_rwlock_openssl, \"CRYPTO_dynlock_value::lock\", 0},\n#endif\n  { &key_rwlock_LOCK_grant, \"LOCK_grant\", PSI_FLAG_GLOBAL},\n  { &key_rwlock_LOCK_logger, \"LOGGER::LOCK_logger\", 0},\n  { &key_rwlock_LOCK_sys_init_connect, \"LOCK_sys_init_connect\", PSI_FLAG_GLOBAL},\n  { &key_rwlock_LOCK_sys_init_slave, \"LOCK_sys_init_slave\", PSI_FLAG_GLOBAL},\n  { &key_rwlock_LOCK_system_variables_hash, \"LOCK_system_variables_hash\", PSI_FLAG_GLOBAL},\n  { &key_rwlock_query_cache_query_lock, \"Query_cache_query::lock\", 0}\n};\n\n#ifdef HAVE_MMAP\nPSI_cond_key key_PAGE_cond, key_COND_active, key_COND_pool;\n#endif /* HAVE_MMAP */\n\nPSI_cond_key key_BINLOG_COND_prep_xids, key_BINLOG_update_cond,\n  key_COND_cache_status_changed, key_COND_manager,\n  key_COND_rpl_status, key_COND_server_started,\n  key_delayed_insert_cond, key_delayed_insert_cond_client,\n  key_item_func_sleep_cond, key_master_info_data_cond,\n  key_master_info_start_cond, key_master_info_stop_cond,\n  key_master_info_sleep_cond,\n  key_relay_log_info_data_cond, key_relay_log_info_log_space_cond,\n  key_relay_log_info_start_cond, key_relay_log_info_stop_cond,\n  key_relay_log_info_sleep_cond,\n  key_TABLE_SHARE_cond, key_user_level_lock_cond,\n  key_COND_thread_count, key_COND_thread_cache, key_COND_flush_thread_cache,\n  key_BINLOG_COND_queue_busy;\nPSI_cond_key key_RELAYLOG_update_cond, key_COND_wakeup_ready;\nPSI_cond_key key_RELAYLOG_COND_queue_busy;\nPSI_cond_key key_TC_LOG_MMAP_COND_queue_busy;\n\nstatic PSI_cond_info all_server_conds[]=\n{\n#if (defined(_WIN32) || defined(HAVE_SMEM)) && !defined(EMBEDDED_LIBRARY)\n  { &key_COND_handler_count, \"COND_handler_count\", PSI_FLAG_GLOBAL},\n#endif /* _WIN32 || HAVE_SMEM && !EMBEDDED_LIBRARY */\n#ifdef HAVE_MMAP\n  { &key_PAGE_cond, \"PAGE::cond\", 0},\n  { &key_COND_active, \"TC_LOG_MMAP::COND_active\", 0},\n  { &key_COND_pool, \"TC_LOG_MMAP::COND_pool\", 0},\n  { &key_TC_LOG_MMAP_COND_queue_busy, \"TC_LOG_MMAP::COND_queue_busy\", 0},\n#endif /* HAVE_MMAP */\n  { &key_BINLOG_COND_prep_xids, \"MYSQL_BIN_LOG::COND_prep_xids\", 0},\n  { &key_BINLOG_update_cond, \"MYSQL_BIN_LOG::update_cond\", 0},\n  { &key_BINLOG_COND_queue_busy, \"MYSQL_BIN_LOG::COND_queue_busy\", 0},\n  { &key_RELAYLOG_update_cond, \"MYSQL_RELAY_LOG::update_cond\", 0},\n  { &key_RELAYLOG_COND_queue_busy, \"MYSQL_RELAY_LOG::COND_queue_busy\", 0},\n  { &key_COND_wakeup_ready, \"THD::COND_wakeup_ready\", 0},\n  { &key_COND_cache_status_changed, \"Query_cache::COND_cache_status_changed\", 0},\n  { &key_COND_manager, \"COND_manager\", PSI_FLAG_GLOBAL},\n  { &key_COND_rpl_status, \"COND_rpl_status\", PSI_FLAG_GLOBAL},\n  { &key_COND_server_started, \"COND_server_started\", PSI_FLAG_GLOBAL},\n  { &key_delayed_insert_cond, \"Delayed_insert::cond\", 0},\n  { &key_delayed_insert_cond_client, \"Delayed_insert::cond_client\", 0},\n  { &key_item_func_sleep_cond, \"Item_func_sleep::cond\", 0},\n  { &key_master_info_data_cond, \"Master_info::data_cond\", 0},\n  { &key_master_info_start_cond, \"Master_info::start_cond\", 0},\n  { &key_master_info_stop_cond, \"Master_info::stop_cond\", 0},\n  { &key_master_info_sleep_cond, \"Master_info::sleep_cond\", 0},\n  { &key_relay_log_info_data_cond, \"Relay_log_info::data_cond\", 0},\n  { &key_relay_log_info_log_space_cond, \"Relay_log_info::log_space_cond\", 0},\n  { &key_relay_log_info_start_cond, \"Relay_log_info::start_cond\", 0},\n  { &key_relay_log_info_stop_cond, \"Relay_log_info::stop_cond\", 0},\n  { &key_relay_log_info_sleep_cond, \"Relay_log_info::sleep_cond\", 0},\n  { &key_TABLE_SHARE_cond, \"TABLE_SHARE::cond\", 0},\n  { &key_user_level_lock_cond, \"User_level_lock::cond\", 0},\n  { &key_COND_thread_count, \"COND_thread_count\", PSI_FLAG_GLOBAL},\n  { &key_COND_thread_cache, \"COND_thread_cache\", PSI_FLAG_GLOBAL},\n  { &key_COND_flush_thread_cache, \"COND_flush_thread_cache\", PSI_FLAG_GLOBAL}\n};\n\nPSI_thread_key key_thread_bootstrap, key_thread_delayed_insert,\n  key_thread_handle_manager, key_thread_main,\n  key_thread_one_connection, key_thread_signal_hand;\n\nstatic PSI_thread_info all_server_threads[]=\n{\n#if (defined(_WIN32) || defined(HAVE_SMEM)) && !defined(EMBEDDED_LIBRARY)\n  { &key_thread_handle_con_namedpipes, \"con_named_pipes\", PSI_FLAG_GLOBAL},\n#endif /* _WIN32 || HAVE_SMEM && !EMBEDDED_LIBRARY */\n\n#if defined(HAVE_SMEM) && !defined(EMBEDDED_LIBRARY)\n  { &key_thread_handle_con_sharedmem, \"con_shared_mem\", PSI_FLAG_GLOBAL},\n#endif /* HAVE_SMEM && !EMBEDDED_LIBRARY */\n\n#if (defined(_WIN32) || defined(HAVE_SMEM)) && !defined(EMBEDDED_LIBRARY)\n  { &key_thread_handle_con_sockets, \"con_sockets\", PSI_FLAG_GLOBAL},\n#endif /* _WIN32 || HAVE_SMEM && !EMBEDDED_LIBRARY */\n\n#ifdef __WIN__\n  { &key_thread_handle_shutdown, \"shutdown\", PSI_FLAG_GLOBAL},\n#endif /* __WIN__ */\n\n  { &key_thread_bootstrap, \"bootstrap\", PSI_FLAG_GLOBAL},\n  { &key_thread_delayed_insert, \"delayed_insert\", 0},\n  { &key_thread_handle_manager, \"manager\", PSI_FLAG_GLOBAL},\n  { &key_thread_main, \"main\", PSI_FLAG_GLOBAL},\n  { &key_thread_one_connection, \"one_connection\", 0},\n  { &key_thread_signal_hand, \"signal_handler\", PSI_FLAG_GLOBAL}\n};\n\nPSI_file_key key_file_binlog, key_file_binlog_index, key_file_casetest,\n  key_file_dbopt, key_file_des_key_file, key_file_ERRMSG, key_select_to_file,\n  key_file_fileparser, key_file_frm, key_file_global_ddl_log, key_file_load,\n  key_file_loadfile, key_file_log_event_data, key_file_log_event_info,\n  key_file_master_info, key_file_misc, key_file_partition,\n  key_file_pid, key_file_relay_log_info, key_file_send_file, key_file_tclog,\n  key_file_trg, key_file_trn, key_file_init;\nPSI_file_key key_file_query_log, key_file_slow_log;\nPSI_file_key key_file_relaylog, key_file_relaylog_index;\n\nstatic PSI_file_info all_server_files[]=\n{\n  { &key_file_binlog, \"binlog\", 0},\n  { &key_file_binlog_index, \"binlog_index\", 0},\n  { &key_file_relaylog, \"relaylog\", 0},\n  { &key_file_relaylog_index, \"relaylog_index\", 0},\n  { &key_file_casetest, \"casetest\", 0},\n  { &key_file_dbopt, \"dbopt\", 0},\n  { &key_file_des_key_file, \"des_key_file\", 0},\n  { &key_file_ERRMSG, \"ERRMSG\", 0},\n  { &key_select_to_file, \"select_to_file\", 0},\n  { &key_file_fileparser, \"file_parser\", 0},\n  { &key_file_frm, \"FRM\", 0},\n  { &key_file_global_ddl_log, \"global_ddl_log\", 0},\n  { &key_file_load, \"load\", 0},\n  { &key_file_loadfile, \"LOAD_FILE\", 0},\n  { &key_file_log_event_data, \"log_event_data\", 0},\n  { &key_file_log_event_info, \"log_event_info\", 0},\n  { &key_file_master_info, \"master_info\", 0},\n  { &key_file_misc, \"misc\", 0},\n  { &key_file_partition, \"partition\", 0},\n  { &key_file_pid, \"pid\", 0},\n  { &key_file_query_log, \"query_log\", 0},\n  { &key_file_relay_log_info, \"relay_log_info\", 0},\n  { &key_file_send_file, \"send_file\", 0},\n  { &key_file_slow_log, \"slow_log\", 0},\n  { &key_file_tclog, \"tclog\", 0},\n  { &key_file_trg, \"trigger_name\", 0},\n  { &key_file_trn, \"trigger\", 0},\n  { &key_file_init, \"init\", 0}\n};\n\n/**\n  Initialise all the performance schema instrumentation points\n  used by the server.\n*/\nvoid init_server_psi_keys(void)\n{\n  const char* category= \"sql\";\n  int count;\n\n  if (PSI_server == NULL)\n    return;\n\n  count= array_elements(all_server_mutexes);\n  PSI_server->register_mutex(category, all_server_mutexes, count);\n\n  count= array_elements(all_server_rwlocks);\n  PSI_server->register_rwlock(category, all_server_rwlocks, count);\n\n  count= array_elements(all_server_conds);\n  PSI_server->register_cond(category, all_server_conds, count);\n\n  count= array_elements(all_server_threads);\n  PSI_server->register_thread(category, all_server_threads, count);\n\n  count= array_elements(all_server_files);\n  PSI_server->register_file(category, all_server_files, count);\n}\n\n#endif /* HAVE_PSI_INTERFACE */\n\n/*\n  Since buffered_option_error_reporter is only used currently\n  for parsing performance schema options, this code is not needed\n  when the performance schema is not compiled in.\n*/\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n/**\n  A log message for the error log, buffered in memory.\n  Log messages are temporarily buffered when generated before the error log\n  is initialized, and then printed once the error log is ready.\n*/\nclass Buffered_log : public Sql_alloc\n{\npublic:\n  Buffered_log(enum loglevel level, const char *message);\n\n  ~Buffered_log()\n  {}\n\n  void print(void);\n\nprivate:\n  /** Log message level. */\n  enum loglevel m_level;\n  /** Log message text. */\n  String m_message;\n};\n\n/**\n  Constructor.\n  @param level          the message log level\n  @param message        the message text\n*/\nBuffered_log::Buffered_log(enum loglevel level, const char *message)\n  : m_level(level), m_message()\n{\n  m_message.copy(message, strlen(message), &my_charset_latin1);\n}\n\n/**\n  Print a buffered log to the real log file.\n*/\nvoid Buffered_log::print()\n{\n  /*\n    Since messages are buffered, they can be printed out\n    of order with other entries in the log.\n    Add \"Buffered xxx\" to the message text to prevent confusion.\n  */\n  switch(m_level)\n  {\n  case ERROR_LEVEL:\n    sql_print_error(\"Buffered error: %s\\n\", m_message.c_ptr_safe());\n    break;\n  case WARNING_LEVEL:\n    sql_print_warning(\"Buffered warning: %s\\n\", m_message.c_ptr_safe());\n    break;\n  case INFORMATION_LEVEL:\n    /*\n      Messages printed as \"information\" still end up in the mysqld *error* log,\n      but with a [Note] tag instead of an [ERROR] tag.\n      While this is probably fine for a human reading the log,\n      it is upsetting existing automated scripts used to parse logs,\n      because such scripts are likely to not already handle [Note] properly.\n      INFORMATION_LEVEL messages are simply silenced, on purpose,\n      to avoid un needed verbosity.\n    */\n    break;\n  }\n}\n\n/**\n  Collection of all the buffered log messages.\n*/\nclass Buffered_logs\n{\npublic:\n  Buffered_logs()\n  {}\n\n  ~Buffered_logs()\n  {}\n\n  void init();\n  void cleanup();\n\n  void buffer(enum loglevel m_level, const char *msg);\n  void print();\nprivate:\n  /**\n    Memory root to use to store buffered logs.\n    This memory root lifespan is between init and cleanup.\n    Once the buffered logs are printed, they are not needed anymore,\n    and all the memory used is reclaimed.\n  */\n  MEM_ROOT m_root;\n  /** List of buffered log messages. */\n  List<Buffered_log> m_list;\n};\n\nvoid Buffered_logs::init()\n{\n  init_alloc_root(&m_root, 1024, 0);\n}\n\nvoid Buffered_logs::cleanup()\n{\n  m_list.delete_elements();\n  free_root(&m_root, MYF(0));\n}\n\n/**\n  Add a log message to the buffer.\n*/\nvoid Buffered_logs::buffer(enum loglevel level, const char *msg)\n{\n  /*\n    Do not let Sql_alloc::operator new(size_t) allocate memory,\n    there is no memory root associated with the main() thread.\n    Give explicitly the proper memory root to use to\n    Sql_alloc::operator new(size_t, MEM_ROOT *) instead.\n  */\n  Buffered_log *log= new (&m_root) Buffered_log(level, msg);\n  if (log)\n    m_list.push_back(log, &m_root);\n}\n\n/**\n  Print buffered log messages.\n*/\nvoid Buffered_logs::print()\n{\n  Buffered_log *log;\n  List_iterator_fast<Buffered_log> it(m_list);\n  while ((log= it++))\n    log->print();\n}\n\n/** Logs reported before a logger is available. */\nstatic Buffered_logs buffered_logs;\n\n#ifndef EMBEDDED_LIBRARY\n/**\n  Error reporter that buffer log messages.\n  @param level          log message level\n  @param format         log message format string\n*/\nC_MODE_START\nstatic void buffered_option_error_reporter(enum loglevel level,\n                                           const char *format, ...)\n{\n  va_list args;\n  char buffer[1024];\n\n  va_start(args, format);\n  my_vsnprintf(buffer, sizeof(buffer), format, args);\n  va_end(args);\n  buffered_logs.buffer(level, buffer);\n}\nC_MODE_END\n#endif /* !EMBEDDED_LIBRARY */\n#endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */\n\nstatic my_socket unix_sock, base_ip_sock, extra_ip_sock;\nstruct my_rnd_struct sql_rand; ///< used by sql_class.cc:THD::THD()\n\n#ifndef EMBEDDED_LIBRARY\nstruct passwd *user_info;\nstatic pthread_t select_thread;\n#endif\n\n/* OS specific variables */\n\n#ifdef __WIN__\n#undef\t getpid\n#include <process.h>\n\nstatic mysql_cond_t COND_handler_count;\nstatic uint handler_count;\nstatic bool start_mode=0, use_opt_args;\nstatic int opt_argc;\nstatic char **opt_argv;\n\n#if !defined(EMBEDDED_LIBRARY)\nstatic HANDLE hEventShutdown;\nstatic char shutdown_event_name[40];\n#include \"nt_servc.h\"\nstatic\t NTService  Service;\t      ///< Service object for WinNT\n#endif /* EMBEDDED_LIBRARY */\n#endif /* __WIN__ */\n\n#ifdef _WIN32\nstatic char pipe_name[512];\nstatic SECURITY_ATTRIBUTES saPipeSecurity;\nstatic SECURITY_DESCRIPTOR sdPipeDescriptor;\nstatic HANDLE hPipe = INVALID_HANDLE_VALUE;\n#endif\n\n#ifndef EMBEDDED_LIBRARY\nbool mysqld_embedded=0;\n#else\nbool mysqld_embedded=1;\n#endif\n\nstatic my_bool plugins_are_initialized= FALSE;\n\n#ifndef DBUG_OFF\nstatic const char* default_dbug_option;\n#endif\nstatic const char *current_dbug_option=\"disabled\";\n#ifdef HAVE_LIBWRAP\nconst char *libwrapName= NULL;\nint allow_severity = LOG_INFO;\nint deny_severity = LOG_WARNING;\n#endif\n#ifdef HAVE_QUERY_CACHE\nulong query_cache_min_res_unit= QUERY_CACHE_MIN_RESULT_DATA_SIZE;\nQuery_cache query_cache;\n#endif\n#ifdef HAVE_SMEM\nchar *shared_memory_base_name= default_shared_memory_base_name;\nmy_bool opt_enable_shared_memory;\nHANDLE smem_event_connect_request= 0;\n#endif\n\nmy_bool opt_use_ssl  = 0;\nchar *opt_ssl_ca= NULL, *opt_ssl_capath= NULL, *opt_ssl_cert= NULL,\n     *opt_ssl_cipher= NULL, *opt_ssl_key= NULL;\n\nstatic scheduler_functions thread_scheduler_struct, extra_thread_scheduler_struct;\nscheduler_functions *thread_scheduler= &thread_scheduler_struct,\n                    *extra_thread_scheduler= &extra_thread_scheduler_struct;\n\n#ifdef HAVE_OPENSSL\n#include <openssl/crypto.h>\n#ifndef HAVE_YASSL\ntypedef struct CRYPTO_dynlock_value\n{\n  mysql_rwlock_t lock;\n} openssl_lock_t;\n\nstatic openssl_lock_t *openssl_stdlocks;\nstatic openssl_lock_t *openssl_dynlock_create(const char *, int);\nstatic void openssl_dynlock_destroy(openssl_lock_t *, const char *, int);\nstatic void openssl_lock_function(int, int, const char *, int);\nstatic void openssl_lock(int, openssl_lock_t *, const char *, int);\n#endif\nchar *des_key_file;\n#ifndef EMBEDDED_LIBRARY\nstruct st_VioSSLFd *ssl_acceptor_fd;\n#endif\n#endif /* HAVE_OPENSSL */\n\n/**\n  Number of currently active user connections. The variable is protected by\n  LOCK_connection_count.\n*/\nuint connection_count= 0, extra_connection_count= 0;\n\n/* Function declarations */\n\npthread_handler_t signal_hand(void *arg);\nstatic int mysql_init_variables(void);\nstatic int get_options(int *argc_ptr, char ***argv_ptr);\nstatic bool add_terminator(DYNAMIC_ARRAY *options);\nextern \"C\" my_bool mysqld_get_one_option(int, const struct my_option *, char *);\nstatic int init_thread_environment();\nstatic char *get_relative_path(const char *path);\nstatic int fix_paths(void);\nvoid handle_connections_sockets();\n#ifdef _WIN32\npthread_handler_t handle_connections_sockets_thread(void *arg);\n#endif\npthread_handler_t kill_server_thread(void *arg);\nstatic void bootstrap(MYSQL_FILE *file);\nstatic bool read_init_file(char *file_name);\n#ifdef _WIN32\npthread_handler_t handle_connections_namedpipes(void *arg);\n#endif\n#ifdef HAVE_SMEM\npthread_handler_t handle_connections_shared_memory(void *arg);\n#endif\npthread_handler_t handle_slave(void *arg);\nstatic void clean_up(bool print_message);\nstatic int test_if_case_insensitive(const char *dir_name);\n\n#ifndef EMBEDDED_LIBRARY\nstatic bool pid_file_created= false;\nstatic void usage(void);\nstatic void start_signal_handler(void);\nstatic void close_server_sock();\nstatic void clean_up_mutexes(void);\nstatic void wait_for_signal_thread_to_end(void);\nstatic void create_pid_file();\nstatic void mysqld_exit(int exit_code) __attribute__((noreturn));\n#endif\nstatic void delete_pid_file(myf flags);\nstatic void end_ssl();\n\n\n#ifndef EMBEDDED_LIBRARY\n/****************************************************************************\n** Code to end mysqld\n****************************************************************************/\n\nstatic void close_connections(void)\n{\n#ifdef EXTRA_DEBUG\n  int count=0;\n#endif\n  DBUG_ENTER(\"close_connections\");\n\n  /* Clear thread cache */\n  kill_cached_threads++;\n  flush_thread_cache();\n\n  /* kill connection thread */\n#if !defined(__WIN__)\n  DBUG_PRINT(\"quit\", (\"waiting for select thread: 0x%lx\",\n                      (ulong) select_thread));\n  mysql_mutex_lock(&LOCK_thread_count);\n\n  while (select_thread_in_use)\n  {\n    struct timespec abstime;\n    int error;\n    LINT_INIT(error);\n    DBUG_PRINT(\"info\",(\"Waiting for select thread\"));\n\n#ifndef DONT_USE_THR_ALARM\n    if (pthread_kill(select_thread, thr_client_alarm))\n      break;\t\t\t\t\t// allready dead\n#endif\n    set_timespec(abstime, 2);\n    for (uint tmp=0 ; tmp < 10 && select_thread_in_use; tmp++)\n    {\n      error= mysql_cond_timedwait(&COND_thread_count, &LOCK_thread_count,\n                                  &abstime);\n      if (error != EINTR)\n\tbreak;\n    }\n#ifdef EXTRA_DEBUG\n    if (error != 0 && error != ETIMEDOUT && !count++)\n      sql_print_error(\"Got error %d from mysql_cond_timedwait\", error);\n#endif\n    close_server_sock();\n  }\n  mysql_mutex_unlock(&LOCK_thread_count);\n#endif /* __WIN__ */\n\n\n  /* Abort listening to new connections */\n  DBUG_PRINT(\"quit\",(\"Closing sockets\"));\n  if (!opt_disable_networking )\n  {\n    if (base_ip_sock != INVALID_SOCKET)\n    {\n      (void) mysql_socket_shutdown(base_ip_sock, SHUT_RDWR);\n      (void) closesocket(base_ip_sock);\n      base_ip_sock= INVALID_SOCKET;\n    }\n    if (extra_ip_sock != INVALID_SOCKET)\n    {\n      (void) mysql_socket_shutdown(extra_ip_sock, SHUT_RDWR);\n      (void) closesocket(extra_ip_sock);\n      extra_ip_sock= INVALID_SOCKET;\n    }\n  }\n#ifdef _WIN32\n  if (hPipe != INVALID_HANDLE_VALUE && opt_enable_named_pipe)\n  {\n    HANDLE temp;\n    DBUG_PRINT(\"quit\", (\"Closing named pipes\") );\n\n    /* Create connection to the handle named pipe handler to break the loop */\n    if ((temp = CreateFile(pipe_name,\n\t\t\t   GENERIC_READ | GENERIC_WRITE,\n\t\t\t   0,\n\t\t\t   NULL,\n\t\t\t   OPEN_EXISTING,\n\t\t\t   0,\n\t\t\t   NULL )) != INVALID_HANDLE_VALUE)\n    {\n      WaitNamedPipe(pipe_name, 1000);\n      DWORD dwMode = PIPE_READMODE_BYTE | PIPE_WAIT;\n      SetNamedPipeHandleState(temp, &dwMode, NULL, NULL);\n      CancelIo(temp);\n      DisconnectNamedPipe(temp);\n      CloseHandle(temp);\n    }\n  }\n#endif\n#ifdef HAVE_SYS_UN_H\n  if (unix_sock != INVALID_SOCKET)\n  {\n    (void) mysql_socket_shutdown(unix_sock, SHUT_RDWR);\n    (void) closesocket(unix_sock);\n    (void) unlink(mysqld_unix_port);\n    unix_sock= INVALID_SOCKET;\n  }\n#endif\n  end_thr_alarm(0);\t\t\t // Abort old alarms.\n\n  /*\n    First signal all threads that it's time to die\n    This will give the threads some time to gracefully abort their\n    statements and inform their clients that the server is about to die.\n  */\n\n  THD *tmp;\n  mysql_mutex_lock(&LOCK_thread_count); // For unlink from list\n\n  I_List_iterator<THD> it(threads);\n  while ((tmp=it++))\n  {\n    DBUG_PRINT(\"quit\",(\"Informing thread %ld that it's time to die\",\n\t\t       tmp->thread_id));\n    /* We skip slave threads & scheduler on this first loop through. */\n    if (tmp->slave_thread)\n      continue;\n\n    tmp->killed= KILL_SERVER_HARD;\n    MYSQL_CALLBACK(thread_scheduler, post_kill_notification, (tmp));\n    mysql_mutex_lock(&tmp->LOCK_thd_data);\n    if (tmp->mysys_var)\n    {\n      tmp->mysys_var->abort=1;\n      mysql_mutex_lock(&tmp->mysys_var->mutex);\n      if (tmp->mysys_var->current_cond)\n      {\n        uint i;\n        for (i=0; i < 2; i++)\n        {\n          int ret= mysql_mutex_trylock(tmp->mysys_var->current_mutex);\n          mysql_cond_broadcast(tmp->mysys_var->current_cond);\n          if (!ret)\n          {\n            /* Thread has surely got the signal, unlock and abort */\n            mysql_mutex_unlock(tmp->mysys_var->current_mutex);\n            break;\n          }\n          sleep(1);\n        }\n      }\n      mysql_mutex_unlock(&tmp->mysys_var->mutex);\n    }\n    mysql_mutex_unlock(&tmp->LOCK_thd_data);\n  }\n  mysql_mutex_unlock(&LOCK_thread_count); // For unlink from list\n\n  Events::deinit();\n  end_slave();\n\n  /* Give threads time to die. */\n  for (int i= 0; thread_count && i < 200; i++)\n    my_sleep(20000);\n\n  /*\n    Force remaining threads to die by closing the connection to the client\n    This will ensure that threads that are waiting for a command from the\n    client on a blocking read call are aborted.\n  */\n\n  for (;;)\n  {\n    DBUG_PRINT(\"quit\",(\"Locking LOCK_thread_count\"));\n    mysql_mutex_lock(&LOCK_thread_count); // For unlink from list\n    if (!(tmp=threads.get()))\n    {\n      DBUG_PRINT(\"quit\",(\"Unlocking LOCK_thread_count\"));\n      mysql_mutex_unlock(&LOCK_thread_count);\n      break;\n    }\n#ifndef __bsdi__\t\t\t\t// Bug in BSDI kernel\n    if (tmp->vio_ok())\n    {\n      if (global_system_variables.log_warnings)\n        sql_print_warning(ER_DEFAULT(ER_FORCING_CLOSE),my_progname,\n                          tmp->thread_id,\n                          (tmp->main_security_ctx.user ?\n                           tmp->main_security_ctx.user : \"\"));\n      close_connection(tmp,ER_SERVER_SHUTDOWN);\n    }\n#endif\n    DBUG_PRINT(\"quit\",(\"Unlocking LOCK_thread_count\"));\n    mysql_mutex_unlock(&LOCK_thread_count);\n  }\n  /* All threads has now been aborted */\n  DBUG_PRINT(\"quit\",(\"Waiting for threads to die (count=%u)\",thread_count));\n  mysql_mutex_lock(&LOCK_thread_count);\n  while (thread_count)\n  {\n    mysql_cond_wait(&COND_thread_count, &LOCK_thread_count);\n    DBUG_PRINT(\"quit\",(\"One thread died (count=%u)\",thread_count));\n  }\n  mysql_mutex_unlock(&LOCK_thread_count);\n\n  DBUG_PRINT(\"quit\",(\"close_connections thread\"));\n  DBUG_VOID_RETURN;\n}\n\n\n#ifdef HAVE_CLOSE_SERVER_SOCK\nstatic void close_socket(my_socket sock, const char *info)\n{\n  DBUG_ENTER(\"close_socket\");\n\n  if (sock != INVALID_SOCKET)\n  {\n    DBUG_PRINT(\"info\", (\"calling shutdown on %s socket\", info));\n    (void) mysql_socket_shutdown(sock, SHUT_RDWR);\n#if defined(__NETWARE__)\n    /*\n      The following code is disabled for normal systems as it causes MySQL\n      to hang on AIX 4.3 during shutdown\n    */\n    DBUG_PRINT(\"info\", (\"calling closesocket on %s socket\", info));\n    (void) closesocket(tmp_sock);\n#endif\n  }\n  DBUG_VOID_RETURN;\n}\n#endif\n\n\nstatic void close_server_sock()\n{\n#ifdef HAVE_CLOSE_SERVER_SOCK\n  DBUG_ENTER(\"close_server_sock\");\n\n  close_socket(base_ip_sock, \"TCP/IP\");\n  close_socket(extra_ip_sock, \"TCP/IP\");\n  close_socket(unix_sock, \"unix/IP\");\n\n  if (unix_sock != INVALID_SOCKET)\n    (void) unlink(mysqld_unix_port);\n  base_ip_sock= extra_ip_sock= unix_sock= INVALID_SOCKET;\n\n  DBUG_VOID_RETURN;\n#endif\n}\n\n#endif /*EMBEDDED_LIBRARY*/\n\n\nvoid kill_mysql(void)\n{\n  DBUG_ENTER(\"kill_mysql\");\n\n#if defined(SIGNALS_DONT_BREAK_READ) && !defined(EMBEDDED_LIBRARY)\n  abort_loop=1;\t\t\t\t\t// Break connection loops\n  close_server_sock();\t\t\t\t// Force accept to wake up\n#endif\n\n#if defined(__WIN__)\n#if !defined(EMBEDDED_LIBRARY)\n  {\n    if (!SetEvent(hEventShutdown))\n    {\n      DBUG_PRINT(\"error\",(\"Got error: %ld from SetEvent\",GetLastError()));\n    }\n    /*\n      or:\n      HANDLE hEvent=OpenEvent(0, FALSE, \"MySqlShutdown\");\n      SetEvent(hEventShutdown);\n      CloseHandle(hEvent);\n    */\n  }\n#endif\n#elif defined(HAVE_PTHREAD_KILL)\n  if (pthread_kill(signal_thread, MYSQL_KILL_SIGNAL))\n  {\n    DBUG_PRINT(\"error\",(\"Got error %d from pthread_kill\",errno)); /* purecov: inspected */\n  }\n#elif !defined(SIGNALS_DONT_BREAK_READ)\n  kill(current_pid, MYSQL_KILL_SIGNAL);\n#endif\n  DBUG_PRINT(\"quit\",(\"After pthread_kill\"));\n  shutdown_in_progress=1;\t\t\t// Safety if kill didn't work\n#ifdef SIGNALS_DONT_BREAK_READ\n  if (!kill_in_progress)\n  {\n    pthread_t tmp;\n    int error;\n    abort_loop=1;\n    if ((error= mysql_thread_create(0, /* Not instrumented */\n                                    &tmp, &connection_attrib,\n                                    kill_server_thread, (void*) 0)))\n      sql_print_error(\"Can't create thread to kill server (errno= %d).\", error);\n  }\n#endif\n  DBUG_VOID_RETURN;\n}\n\n/**\n  Force server down. Kill all connections and threads and exit.\n\n  @param  sig_ptr       Signal number that caused kill_server to be called.\n\n  @note\n    A signal number of 0 mean that the function was not called\n    from a signal handler and there is thus no signal to block\n    or stop, we just want to kill the server.\n*/\n\n#if !defined(__WIN__)\nstatic void *kill_server(void *sig_ptr)\n#define RETURN_FROM_KILL_SERVER return 0\n#else\nstatic void __cdecl kill_server(int sig_ptr)\n#define RETURN_FROM_KILL_SERVER return\n#endif\n{\n  DBUG_ENTER(\"kill_server\");\n#ifndef EMBEDDED_LIBRARY\n  int sig=(int) (long) sig_ptr;\t\t\t// This is passed a int\n  // if there is a signal during the kill in progress, ignore the other\n  if (kill_in_progress)\t\t\t\t// Safety\n  {\n    DBUG_LEAVE;\n    RETURN_FROM_KILL_SERVER;\n  }\n  kill_in_progress=TRUE;\n  abort_loop=1;\t\t\t\t\t// This should be set\n  if (sig != 0) // 0 is not a valid signal number\n    my_sigset(sig, SIG_IGN);                    /* purify inspected */\n  if (sig == MYSQL_KILL_SIGNAL || sig == 0)\n    sql_print_information(ER_DEFAULT(ER_NORMAL_SHUTDOWN),my_progname);\n  else\n    sql_print_error(ER_DEFAULT(ER_GOT_SIGNAL),my_progname,sig); /* purecov: inspected */\n\n#ifdef HAVE_SMEM\n  /*\n    Send event to smem_event_connect_request for aborting\n  */\n  if (opt_enable_shared_memory)\n  {\n    if (!SetEvent(smem_event_connect_request))\n    {\n      DBUG_PRINT(\"error\",\n                 (\"Got error: %ld from SetEvent of smem_event_connect_request\",\n                  GetLastError()));\n    }\n  }\n#endif\n\n  close_connections();\n  if (sig != MYSQL_KILL_SIGNAL &&\n      sig != 0)\n    unireg_abort(1);\t\t\t\t/* purecov: inspected */\n  else\n    unireg_end();\n\n  /* purecov: begin deadcode */\n  DBUG_LEAVE;                                   // Must match DBUG_ENTER()\n  my_thread_end();\n  pthread_exit(0);\n  /* purecov: end */\n\n  RETURN_FROM_KILL_SERVER;                      // Avoid compiler warnings\n\n#else /* EMBEDDED_LIBRARY*/\n\n  DBUG_LEAVE;\n  RETURN_FROM_KILL_SERVER;\n\n#endif /* EMBEDDED_LIBRARY */\n}\n\n\n#if defined(USE_ONE_SIGNAL_HAND)\npthread_handler_t kill_server_thread(void *arg __attribute__((unused)))\n{\n  my_thread_init();\t\t\t\t// Initialize new thread\n  kill_server(0);\n  /* purecov: begin deadcode */\n  my_thread_end();\n  pthread_exit(0);\n  return 0;\n  /* purecov: end */\n}\n#endif\n\n\nextern \"C\" sig_handler print_signal_warning(int sig)\n{\n  if (global_system_variables.log_warnings)\n    sql_print_warning(\"Got signal %d from thread %ld\", sig,my_thread_id());\n#ifdef SIGNAL_HANDLER_RESET_ON_DELIVERY\n  my_sigset(sig,print_signal_warning);\t\t/* int. thread system calls */\n#endif\n#if !defined(__WIN__)\n  if (sig == SIGALRM)\n    alarm(2);\t\t\t\t\t/* reschedule alarm */\n#endif\n}\n\n#ifndef EMBEDDED_LIBRARY\n\nstatic void init_error_log_mutex()\n{\n  mysql_mutex_init(key_LOCK_error_log, &LOCK_error_log, MY_MUTEX_INIT_FAST);\n}\n\n\nstatic void clean_up_error_log_mutex()\n{\n  mysql_mutex_destroy(&LOCK_error_log);\n}\n\n\n/**\n  cleanup all memory and end program nicely.\n\n    If SIGNALS_DONT_BREAK_READ is defined, this function is called\n    by the main thread. To get MySQL to shut down nicely in this case\n    (Mac OS X) we have to call exit() instead if pthread_exit().\n\n  @note\n    This function never returns.\n*/\nvoid unireg_end(void)\n{\n  clean_up(1);\n  my_thread_end();\n#if defined(SIGNALS_DONT_BREAK_READ)\n  exit(0);\n#else\n  pthread_exit(0);\t\t\t\t// Exit is in main thread\n#endif\n}\n\n\nextern \"C\" void unireg_abort(int exit_code)\n{\n  DBUG_ENTER(\"unireg_abort\");\n\n  if (opt_help)\n    usage();\n  if (exit_code)\n    sql_print_error(\"Aborting\\n\");\n  clean_up(!opt_abort && (exit_code || !opt_bootstrap)); /* purecov: inspected */\n  DBUG_PRINT(\"quit\",(\"done with cleanup in unireg_abort\"));\n  mysqld_exit(exit_code);\n}\n\nstatic void mysqld_exit(int exit_code)\n{\n  /*\n    Important note: we wait for the signal thread to end,\n    but if a kill -15 signal was sent, the signal thread did\n    spawn the kill_server_thread thread, which is running concurrently.\n  */\n  wait_for_signal_thread_to_end();\n  mysql_audit_finalize();\n  clean_up_mutexes();\n  clean_up_error_log_mutex();\n  my_end((opt_endinfo ? MY_CHECK_ERROR | MY_GIVE_INFO : 0));\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n  shutdown_performance_schema();        // we do it as late as possible\n#endif\n  exit(exit_code); /* purecov: inspected */\n}\n\n#endif /* !EMBEDDED_LIBRARY */\n\nvoid clean_up(bool print_message)\n{\n  DBUG_PRINT(\"exit\",(\"clean_up\"));\n  if (cleanup_done++)\n    return; /* purecov: inspected */\n\n  close_active_mi();\n  stop_handle_manager();\n  release_ddl_log();\n\n  /*\n    make sure that handlers finish up\n    what they have that is dependent on the binlog\n  */\n  ha_binlog_end(current_thd);\n\n  logger.cleanup_base();\n\n  injector::free_instance();\n  mysql_bin_log.cleanup();\n\n#ifdef HAVE_REPLICATION\n  if (use_slave_mask)\n    bitmap_free(&slave_error_mask);\n#endif\n  my_tz_free();\n  my_dboptions_cache_free();\n  ignore_db_dirs_free();\n#ifndef NO_EMBEDDED_ACCESS_CHECKS\n  servers_free(1);\n  acl_free(1);\n  grant_free();\n#endif\n  query_cache_destroy();\n  hostname_cache_free();\n  item_user_lock_free();\n  lex_free();\t\t\t\t/* Free some memory */\n  item_create_cleanup();\n  table_def_start_shutdown();\n  plugin_shutdown();\n  udf_free();\n  ha_end();\n  if (tc_log)\n    tc_log->close();\n  delegates_destroy();\n  xid_cache_free();\n  table_def_free();\n  mdl_destroy();\n  key_caches.delete_elements((void (*)(const char*, uchar*)) free_key_cache);\n  wt_end();\n  multi_keycache_free();\n  sp_cache_end();\n  free_status_vars();\n  end_thr_alarm(1);\t\t\t/* Free allocated memory */\n  my_free_open_file_info();\n  if (defaults_argv)\n    free_defaults(defaults_argv);\n  free_tmpdir(&mysql_tmpdir_list);\n  bitmap_free(&temp_pool);\n  free_max_user_conn();\n  free_global_user_stats();\n  free_global_client_stats();\n  free_global_table_stats();\n  free_global_index_stats();\n  delete_dynamic(&all_options);\n#ifdef HAVE_REPLICATION\n  end_slave_list();\n#endif\n  my_uuid_end();\n  delete binlog_filter;\n  delete rpl_filter;\n  end_ssl();\n#ifndef EMBEDDED_LIBRARY\n  vio_end();\n#endif /*!EMBEDDED_LIBRARY*/\n  my_regex_end();\n#if defined(ENABLED_DEBUG_SYNC)\n  /* End the debug sync facility. See debug_sync.cc. */\n  debug_sync_end();\n#endif /* defined(ENABLED_DEBUG_SYNC) */\n\n  delete_pid_file(MYF(0));\n\n  if (print_message && my_default_lc_messages && server_start_time)\n    sql_print_information(ER_DEFAULT(ER_SHUTDOWN_COMPLETE),my_progname);\n  cleanup_errmsgs();\n  MYSQL_CALLBACK(thread_scheduler, end, ());\n  mysql_library_end();\n  finish_client_errs();\n  (void) my_error_unregister(ER_ERROR_FIRST, ER_ERROR_LAST); // finish server errs\n  DBUG_PRINT(\"quit\", (\"Error messages freed\"));\n  /* Tell main we are ready */\n  logger.cleanup_end();\n  sys_var_end();\n  my_atomic_rwlock_destroy(&global_query_id_lock);\n  my_atomic_rwlock_destroy(&thread_running_lock);\n  free_charsets();\n  mysql_mutex_lock(&LOCK_thread_count);\n  DBUG_PRINT(\"quit\", (\"got thread count lock\"));\n  ready_to_exit=1;\n  /* do the broadcast inside the lock to ensure that my_end() is not called */\n  mysql_cond_broadcast(&COND_thread_count);\n  mysql_mutex_unlock(&LOCK_thread_count);\n\n  /*\n    The following lines may never be executed as the main thread may have\n    killed us\n  */\n  DBUG_PRINT(\"quit\", (\"done with cleanup\"));\n} /* clean_up */\n\n\n#ifndef EMBEDDED_LIBRARY\n\n/**\n  This is mainly needed when running with purify, but it's still nice to\n  know that all child threads have died when mysqld exits.\n*/\nstatic void wait_for_signal_thread_to_end()\n{\n  uint i;\n  /*\n    Wait up to 10 seconds for signal thread to die. We use this mainly to\n    avoid getting warnings that my_thread_end has not been called\n  */\n  for (i= 0 ; i < 100 && signal_thread_in_use; i++)\n  {\n    if (pthread_kill(signal_thread, MYSQL_KILL_SIGNAL) == ESRCH)\n      break;\n    my_sleep(100);\t\t\t\t// Give it time to die\n  }\n}\n#endif /*EMBEDDED_LIBRARY*/\n\nstatic void clean_up_mutexes()\n{\n  DBUG_ENTER(\"clean_up_mutexes\");\n  mysql_rwlock_destroy(&LOCK_grant);\n  mysql_mutex_destroy(&LOCK_thread_count);\n  mysql_mutex_destroy(&LOCK_status);\n  mysql_mutex_destroy(&LOCK_delayed_insert);\n  mysql_mutex_destroy(&LOCK_delayed_status);\n  mysql_mutex_destroy(&LOCK_delayed_create);\n  mysql_mutex_destroy(&LOCK_crypt);\n  mysql_mutex_destroy(&LOCK_user_conn);\n  mysql_mutex_destroy(&LOCK_connection_count);\n  mysql_mutex_destroy(&LOCK_stats);\n  mysql_mutex_destroy(&LOCK_global_user_client_stats);\n  mysql_mutex_destroy(&LOCK_global_table_stats);\n  mysql_mutex_destroy(&LOCK_global_index_stats);\n#ifdef HAVE_OPENSSL\n  mysql_mutex_destroy(&LOCK_des_key_file);\n#ifndef HAVE_YASSL\n  for (int i= 0; i < CRYPTO_num_locks(); ++i)\n    mysql_rwlock_destroy(&openssl_stdlocks[i].lock);\n  OPENSSL_free(openssl_stdlocks);\n#endif /* HAVE_YASSL */\n#endif /* HAVE_OPENSSL */\n#ifdef HAVE_REPLICATION\n  mysql_mutex_destroy(&LOCK_rpl_status);\n  mysql_cond_destroy(&COND_rpl_status);\n#endif /* HAVE_REPLICATION */\n  mysql_mutex_destroy(&LOCK_active_mi);\n  mysql_rwlock_destroy(&LOCK_sys_init_connect);\n  mysql_rwlock_destroy(&LOCK_sys_init_slave);\n  mysql_mutex_destroy(&LOCK_global_system_variables);\n  mysql_rwlock_destroy(&LOCK_system_variables_hash);\n  mysql_mutex_destroy(&LOCK_short_uuid_generator);\n  mysql_mutex_destroy(&LOCK_prepared_stmt_count);\n  mysql_mutex_destroy(&LOCK_error_messages);\n  mysql_cond_destroy(&COND_thread_count);\n  mysql_cond_destroy(&COND_thread_cache);\n  mysql_cond_destroy(&COND_flush_thread_cache);\n  mysql_mutex_destroy(&LOCK_server_started);\n  mysql_cond_destroy(&COND_server_started);\n  mysql_mutex_destroy(&LOCK_prepare_ordered);\n  mysql_mutex_destroy(&LOCK_commit_ordered);\n  DBUG_VOID_RETURN;\n}\n\n\n/****************************************************************************\n** Init IP and UNIX socket\n****************************************************************************/\n\n#ifndef EMBEDDED_LIBRARY\nstatic void set_ports()\n{\n  char\t*env;\n  if (!mysqld_port && !opt_disable_networking)\n  {\t\t\t\t\t// Get port if not from commandline\n    mysqld_port= MYSQL_PORT;\n\n    /*\n      if builder specifically requested a default port, use that\n      (even if it coincides with our factory default).\n      only if they didn't do we check /etc/services (and, failing\n      on that, fall back to the factory default of 3306).\n      either default can be overridden by the environment variable\n      MYSQL_TCP_PORT, which in turn can be overridden with command\n      line options.\n    */\n\n#if MYSQL_PORT_DEFAULT == 0\n    struct  servent *serv_ptr;\n    if ((serv_ptr= getservbyname(\"mysql\", \"tcp\")))\n      mysqld_port= ntohs((u_short) serv_ptr->s_port); /* purecov: inspected */\n#endif\n    if ((env = getenv(\"MYSQL_TCP_PORT\")))\n      mysqld_port= (uint) atoi(env);\t\t/* purecov: inspected */\n  }\n  if (!mysqld_unix_port)\n  {\n#ifdef __WIN__\n    mysqld_unix_port= (char*) MYSQL_NAMEDPIPE;\n#else\n    mysqld_unix_port= (char*) MYSQL_UNIX_ADDR;\n#endif\n    if ((env = getenv(\"MYSQL_UNIX_PORT\")))\n      mysqld_unix_port= env;\t\t\t/* purecov: inspected */\n  }\n}\n\n/* Change to run as another user if started with --user */\n\nstatic struct passwd *check_user(const char *user)\n{\n  myf flags= 0;\n  if (global_system_variables.log_warnings)\n    flags|= MY_WME;\n  if (!opt_bootstrap && !opt_help)\n    flags|= MY_FAE;\n\n  struct passwd *tmp_user_info= my_check_user(user, MYF(flags));\n\n  if (!tmp_user_info && my_errno==EINVAL && (flags & MY_FAE))\n    unireg_abort(1);\n\n  return tmp_user_info;\n}\n\nstatic inline void allow_coredumps()\n{\n#ifdef PR_SET_DUMPABLE\n  if (test_flags & TEST_CORE_ON_SIGNAL)\n  {\n    /* inform kernel that process is dumpable */\n    (void) prctl(PR_SET_DUMPABLE, 1);\n  }\n#endif\n}\n\n\nstatic void set_user(const char *user, struct passwd *user_info_arg)\n{\n  /*\n    We can get a SIGSEGV when calling initgroups() on some systems when NSS\n    is configured to use LDAP and the server is statically linked.  We set\n    calling_initgroups as a flag to the SIGSEGV handler that is then used to\n    output a specific message to help the user resolve this problem.\n  */\n  calling_initgroups= 1;\n  int res= my_set_user(user, user_info_arg, MYF(MY_WME));\n  calling_initgroups= 0;\n  if (res)\n    unireg_abort(1);\n  allow_coredumps();\n}\n\n\nstatic void set_effective_user(struct passwd *user_info_arg)\n{\n#if !defined(__WIN__)\n  DBUG_ASSERT(user_info_arg != 0);\n  if (setregid((gid_t)-1, user_info_arg->pw_gid) == -1)\n  {\n    sql_perror(\"setregid\");\n    unireg_abort(1);\n  }\n  if (setreuid((uid_t)-1, user_info_arg->pw_uid) == -1)\n  {\n    sql_perror(\"setreuid\");\n    unireg_abort(1);\n  }\n  allow_coredumps();\n#endif\n}\n\n\n/** Change root user if started with @c --chroot . */\nstatic void set_root(const char *path)\n{\n#if !defined(__WIN__)\n  if (chroot(path) == -1)\n  {\n    sql_perror(\"chroot\");\n    unireg_abort(1);\n  }\n  my_setwd(\"/\", MYF(0));\n#endif\n}\n\n/**\n   Activate usage of a tcp port\n*/\n\nstatic my_socket activate_tcp_port(uint port)\n{\n  struct addrinfo *ai, *a;\n  struct addrinfo hints;\n  int error;\n  int\targ;\n  char port_buf[NI_MAXSERV];\n  my_socket ip_sock= INVALID_SOCKET;\n  DBUG_ENTER(\"activate_tcp_port\");\n  DBUG_PRINT(\"general\",(\"IP Socket is %d\",port));\n\n  bzero(&hints, sizeof (hints));\n  hints.ai_flags= AI_PASSIVE;\n  hints.ai_socktype= SOCK_STREAM;\n  hints.ai_family= AF_UNSPEC;\n\n  my_snprintf(port_buf, NI_MAXSERV, \"%d\", port);\n  error= getaddrinfo(my_bind_addr_str, port_buf, &hints, &ai);\n  if (error != 0)\n  {\n    DBUG_PRINT(\"error\",(\"Got error: %d from getaddrinfo()\", error));\n    sql_perror(ER_DEFAULT(ER_IPSOCK_ERROR));  /* purecov: tested */\n    unireg_abort(1);\t\t\t\t/* purecov: tested */\n  }\n\n  for (a= ai; a != NULL; a= a->ai_next)\n  {\n    ip_sock= socket(a->ai_family, a->ai_socktype, a->ai_protocol);\n      \n    char ip_addr[INET6_ADDRSTRLEN];\n\n    if (vio_get_normalized_ip_string(a->ai_addr, a->ai_addrlen,\n                                     ip_addr, sizeof (ip_addr)))\n    {\n      ip_addr[0]= 0;\n    }\n\n    if (ip_sock == INVALID_SOCKET)\n    {\n      sql_print_error(\"Failed to create a socket for %s '%s': errno: %d.\",\n                      (a->ai_family == AF_INET) ? \"IPv4\" : \"IPv6\",\n                      (const char *) ip_addr,\n                      (int) socket_errno);\n    }\n    else \n    {\n      sql_print_information(\"Server socket created on IP: '%s'.\",\n                          (const char *) ip_addr);\n      break;\n    }\n  }\n\n  if (ip_sock == INVALID_SOCKET)\n  {\n    DBUG_PRINT(\"error\",(\"Got error: %d from socket()\",socket_errno));\n    sql_perror(ER_DEFAULT(ER_IPSOCK_ERROR));  /* purecov: tested */\n    unireg_abort(1);\t\t\t\t/* purecov: tested */\n  }\n\n#ifndef __WIN__\n  /*\n    We should not use SO_REUSEADDR on windows as this would enable a\n    user to open two mysqld servers with the same TCP/IP port.\n  */\n  arg= 1;\n  (void) setsockopt(ip_sock,SOL_SOCKET,SO_REUSEADDR,(char*)&arg,sizeof(arg));\n#endif /* __WIN__ */\n\n#ifdef IPV6_V6ONLY\n   /*\n     For interoperability with older clients, IPv6 socket should\n     listen on both IPv6 and IPv4 wildcard addresses.\n     Turn off IPV6_V6ONLY option.\n\n     NOTE: this will work starting from Windows Vista only.\n     On Windows XP dual stack is not available, so it will not\n     listen on the corresponding IPv4-address.\n   */\n  if (a->ai_family == AF_INET6)\n  {\n    arg= 0;\n    (void) setsockopt(ip_sock, IPPROTO_IPV6, IPV6_V6ONLY, (char*)&arg,\n              sizeof(arg));\n  }\n#endif\n  /*\n    Sometimes the port is not released fast enough when stopping and\n    restarting the server. This happens quite often with the test suite\n    on busy Linux systems. Retry to bind the address at these intervals:\n    Sleep intervals: 1, 2, 4,  6,  9, 13, 17, 22, ...\n    Retry at second: 1, 3, 7, 13, 22, 35, 52, 74, ...\n    Limit the sequence by mysqld_port_timeout (set --port-open-timeout=#).\n  */\n  int ret;\n  uint waited, retry, this_wait;\n  for (waited= 0, retry= 1; ; retry++, waited+= this_wait)\n  {\n    if (((ret= bind(ip_sock, a->ai_addr, a->ai_addrlen)) >= 0 ) ||\n        (socket_errno != SOCKET_EADDRINUSE) ||\n        (waited >= mysqld_port_timeout))\n      break;\n    sql_print_information(\"Retrying bind on TCP/IP port %u\", port);\n    this_wait= retry * retry / 3 + 1;\n    sleep(this_wait);\n  }\n  freeaddrinfo(ai);\n  if (ret < 0)\n  {\n    char buff[100];\n    sprintf(buff, \"Can't start server: Bind on TCP/IP port. Got error: %d\",\n            (int) socket_errno);\n    sql_perror(buff);\n    sql_print_error(\"Do you already have another mysqld server running on \"\n                    \"port: %u ?\", port);\n    unireg_abort(1);\n  }\n  if (listen(ip_sock,(int) back_log) < 0)\n  {\n    sql_perror(\"Can't start server: listen() on TCP/IP port\");\n    sql_print_error(\"listen() on TCP/IP failed with error %d\",\n                    socket_errno);\n    unireg_abort(1);\n  }\n  DBUG_RETURN(ip_sock);\n}\n\nstatic void network_init(void)\n{\n#ifdef HAVE_SYS_UN_H\n  struct sockaddr_un\tUNIXaddr;\n  int\targ;\n#endif\n  DBUG_ENTER(\"network_init\");\n\n  if (MYSQL_CALLBACK_ELSE(thread_scheduler, init, (), 0))\n    unireg_abort(1);\t\t\t/* purecov: inspected */\n\n  set_ports();\n\n  if (report_port == 0)\n  {\n    report_port= mysqld_port;\n  }\n#ifndef DBUG_OFF\n  if (!opt_disable_networking)\n    DBUG_ASSERT(report_port != 0);\n#endif\n  if (!opt_disable_networking && !opt_bootstrap)\n  {\n    if (mysqld_port)\n      base_ip_sock= activate_tcp_port(mysqld_port);\n    if (mysqld_extra_port)\n      extra_ip_sock= activate_tcp_port(mysqld_extra_port);\n  }\n\n#ifdef _WIN32\n  /* create named pipe */\n  if (Service.IsNT() && mysqld_unix_port[0] && !opt_bootstrap &&\n      opt_enable_named_pipe)\n  {\n\n    strxnmov(pipe_name, sizeof(pipe_name)-1, \"\\\\\\\\.\\\\pipe\\\\\",\n\t     mysqld_unix_port, NullS);\n    bzero((char*) &saPipeSecurity, sizeof(saPipeSecurity));\n    bzero((char*) &sdPipeDescriptor, sizeof(sdPipeDescriptor));\n    if (!InitializeSecurityDescriptor(&sdPipeDescriptor,\n\t\t\t\t      SECURITY_DESCRIPTOR_REVISION))\n    {\n      sql_perror(\"Can't start server : Initialize security descriptor\");\n      unireg_abort(1);\n    }\n    if (!SetSecurityDescriptorDacl(&sdPipeDescriptor, TRUE, NULL, FALSE))\n    {\n      sql_perror(\"Can't start server : Set security descriptor\");\n      unireg_abort(1);\n    }\n    saPipeSecurity.nLength = sizeof(SECURITY_ATTRIBUTES);\n    saPipeSecurity.lpSecurityDescriptor = &sdPipeDescriptor;\n    saPipeSecurity.bInheritHandle = FALSE;\n    if ((hPipe= CreateNamedPipe(pipe_name,\n        PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE,\n        PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT,\n        PIPE_UNLIMITED_INSTANCES,\n        (int) global_system_variables.net_buffer_length,\n        (int) global_system_variables.net_buffer_length,\n        NMPWAIT_USE_DEFAULT_WAIT,\n        &saPipeSecurity)) == INVALID_HANDLE_VALUE)\n    {\n      sql_perror(\"Create named pipe failed\");\n      unireg_abort(1);\n    }\n  }\n#endif\n\n#if defined(HAVE_SYS_UN_H)\n  /*\n  ** Create the UNIX socket\n  */\n  if (mysqld_unix_port[0] && !opt_bootstrap)\n  {\n    DBUG_PRINT(\"general\",(\"UNIX Socket is %s\",mysqld_unix_port));\n\n    if (strlen(mysqld_unix_port) > (sizeof(UNIXaddr.sun_path) - 1))\n    {\n      sql_print_error(\"The socket file path is too long (> %u): %s\",\n                      (uint) sizeof(UNIXaddr.sun_path) - 1, mysqld_unix_port);\n      unireg_abort(1);\n    }\n    if ((unix_sock= socket(AF_UNIX, SOCK_STREAM, 0)) < 0)\n    {\n      sql_perror(\"Can't start server : UNIX Socket \"); /* purecov: inspected */\n      unireg_abort(1);\t\t\t\t/* purecov: inspected */\n    }\n    bzero((char*) &UNIXaddr, sizeof(UNIXaddr));\n    UNIXaddr.sun_family = AF_UNIX;\n    strmov(UNIXaddr.sun_path, mysqld_unix_port);\n    (void) unlink(mysqld_unix_port);\n    arg= 1;\n    (void) setsockopt(unix_sock,SOL_SOCKET,SO_REUSEADDR,(char*)&arg,\n\t\t      sizeof(arg));\n    umask(0);\n    if (bind(unix_sock, reinterpret_cast<struct sockaddr *>(&UNIXaddr),\n\t     sizeof(UNIXaddr)) < 0)\n    {\n      sql_perror(\"Can't start server : Bind on unix socket\"); /* purecov: tested */\n      sql_print_error(\"Do you already have another mysqld server running on socket: %s ?\",mysqld_unix_port);\n      unireg_abort(1);\t\t\t\t\t/* purecov: tested */\n    }\n    umask(((~my_umask) & 0666));\n#if defined(S_IFSOCK) && defined(SECURE_SOCKETS)\n    (void) chmod(mysqld_unix_port,S_IFSOCK);\t/* Fix solaris 2.6 bug */\n#endif\n    if (listen(unix_sock,(int) back_log) < 0)\n      sql_print_warning(\"listen() on Unix socket failed with error %d\",\n\t\t      socket_errno);\n  }\n#endif\n  DBUG_PRINT(\"info\",(\"server started\"));\n  DBUG_VOID_RETURN;\n}\n\n\n/**\n  Close a connection.\n\n  @param thd        Thread handle.\n  @param sql_errno  The error code to send before disconnect.\n\n  @note\n    For the connection that is doing shutdown, this is called twice\n*/\nvoid close_connection(THD *thd, uint sql_errno)\n{\n  DBUG_ENTER(\"close_connection\");\n\n  if (sql_errno)\n    net_send_error(thd, sql_errno, ER_DEFAULT(sql_errno), NULL);\n\n  thd->print_aborted_warning(3, sql_errno ? ER_DEFAULT(sql_errno)\n                                          : \"CLOSE_CONNECTION\");\n\n  thd->disconnect();\n\n  MYSQL_CONNECTION_DONE((int) sql_errno, thd->thread_id);\n\n  if (MYSQL_CONNECTION_DONE_ENABLED())\n  {\n    sleep(0); /* Workaround to avoid tailcall optimisation */\n  }\n  MYSQL_AUDIT_NOTIFY_CONNECTION_DISCONNECT(thd, sql_errno);\n  DBUG_VOID_RETURN;\n}\n#endif /* EMBEDDED_LIBRARY */\n\n\n/** Called when mysqld is aborted with ^C */\n/* ARGSUSED */\nextern \"C\" sig_handler end_mysqld_signal(int sig __attribute__((unused)))\n{\n  DBUG_ENTER(\"end_mysqld_signal\");\n  /* Don't call kill_mysql() if signal thread is not running */\n  if (signal_thread_in_use)\n    kill_mysql();                          // Take down mysqld nicely\n  DBUG_VOID_RETURN;\t\t\t\t/* purecov: deadcode */\n}\n\n\n/*\n  Cleanup THD object\n\n  SYNOPSIS\n    thd_cleanup()\n    thd\t\t Thread handler\n*/\n\nvoid thd_cleanup(THD *thd)\n{\n  thd->cleanup();\n}\n\n/*\n  Decrease number of connections\n\n  SYNOPSIS\n    dec_connection_count()\n*/\n\nvoid dec_connection_count(THD *thd)\n{\n  mysql_mutex_lock(&LOCK_connection_count);\n  (*thd->scheduler->connection_count)--;\n  mysql_mutex_unlock(&LOCK_connection_count);\n}\n\n\n/*\n  Unlink thd from global list of available connections and free thd\n\n  SYNOPSIS\n    unlink_thd()\n    thd\t\t Thread handler\n\n  NOTES\n    LOCK_thread_count is locked and left locked\n*/\n\nvoid unlink_thd(THD *thd)\n{\n  DBUG_ENTER(\"unlink_thd\");\n  DBUG_PRINT(\"enter\", (\"thd: 0x%lx\", (long) thd));\n\n  thd_cleanup(thd);\n  dec_connection_count(thd);\n\n  thd->add_status_to_global();\n\n  mysql_mutex_lock(&LOCK_thread_count);\n  thd->unlink();\n  /*\n    Used by binlog_reset_master.  It would be cleaner to use\n    DEBUG_SYNC here, but that's not possible because the THD's debug\n    sync feature has been shut down at this point.\n  */\n  DBUG_EXECUTE_IF(\"sleep_after_lock_thread_count_before_delete_thd\", sleep(5););\n  if (unlikely(abort_loop))\n  {\n    /*\n      During shutdown, we have to delete thd inside the mutex\n      to not refer to mutexes that may be deleted during shutdown\n    */\n    delete thd;\n    thd= 0;\n  }\n  thread_count--;\n  mysql_mutex_unlock(&LOCK_thread_count);\n\n  delete thd;\n  DBUG_VOID_RETURN;\n}\n\n\n/*\n  Store thread in cache for reuse by new connections\n\n  SYNOPSIS\n    cache_thread()\n\n  NOTES\n    LOCK_thread_count has to be locked\n\n  RETURN\n    0  Thread was not put in cache\n    1  Thread is to be reused by new connection.\n       (ie, caller should return, not abort with pthread_exit())\n*/\n\n\nstatic bool cache_thread()\n{\n  mysql_mutex_assert_owner(&LOCK_thread_count);\n  if (cached_thread_count < thread_cache_size &&\n      ! abort_loop && !kill_cached_threads)\n  {\n    /* Don't kill the thread, just put it in cache for reuse */\n    DBUG_PRINT(\"info\", (\"Adding thread to cache\"));\n    cached_thread_count++;\n\n#ifdef HAVE_PSI_INTERFACE\n    /*\n      Delete the instrumentation for the job that just completed,\n      before parking this pthread in the cache (blocked on COND_thread_cache).\n    */\n    if (likely(PSI_server != NULL))\n      PSI_server->delete_current_thread();\n#endif\n\n    while (!abort_loop && ! wake_thread && ! kill_cached_threads)\n      mysql_cond_wait(&COND_thread_cache, &LOCK_thread_count);\n    cached_thread_count--;\n    if (kill_cached_threads)\n      mysql_cond_signal(&COND_flush_thread_cache);\n    if (wake_thread)\n    {\n      THD *thd;\n      wake_thread--;\n      thd= thread_cache.get();\n      thd->thread_stack= (char*) &thd;          // For store_globals\n      (void) thd->store_globals();\n\n#ifdef HAVE_PSI_INTERFACE\n      /*\n        Create new instrumentation for the new THD job,\n        and attach it to this running pthread.\n      */\n      if (likely(PSI_server != NULL))\n      {\n        PSI_thread *psi= PSI_server->new_thread(key_thread_one_connection,\n                                                thd, thd->thread_id);\n        if (likely(psi != NULL))\n          PSI_server->set_thread(psi);\n      }\n#endif\n\n      /*\n        THD::mysys_var::abort is associated with physical thread rather\n        than with THD object. So we need to reset this flag before using\n        this thread for handling of new THD object/connection.\n      */\n      thd->mysys_var->abort= 0;\n      thd->thr_create_utime= microsecond_interval_timer();\n      thd->start_utime= thd->thr_create_utime;\n      threads.append(thd);\n      return(1);\n    }\n  }\n  return(0);\n}\n\n\n/*\n  End thread for the current connection\n\n  SYNOPSIS\n    one_thread_per_connection_end()\n    thd\t\t  Thread handler\n    put_in_cache  Store thread in cache, if there is room in it\n                  Normally this is true in all cases except when we got\n                  out of resources initializing the current thread\n\n  NOTES\n    If thread is cached, we will wait until thread is scheduled to be\n    reused and then we will return.\n    If thread is not cached, we end the thread.\n\n  RETURN\n    0    Signal to handle_one_connection to reuse connection\n*/\n\nbool one_thread_per_connection_end(THD *thd, bool put_in_cache)\n{\n  DBUG_ENTER(\"one_thread_per_connection_end\");\n  unlink_thd(thd);\n  /* Mark that current_thd is not valid anymore */\n  my_pthread_setspecific_ptr(THR_THD,  0);\n  if (put_in_cache)\n  {\n    mysql_mutex_lock(&LOCK_thread_count);\n    put_in_cache= cache_thread();\n    mysql_mutex_unlock(&LOCK_thread_count);\n    if (put_in_cache)\n      DBUG_RETURN(0);                             // Thread is reused\n  }\n\n  /* It's safe to broadcast outside a lock (COND... is not deleted here) */\n  DBUG_PRINT(\"signal\", (\"Broadcasting COND_thread_count\"));\n  DBUG_LEAVE;                                   // Must match DBUG_ENTER()\n#if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)\n  ERR_remove_state(0);\n#endif\n  my_thread_end();\n  mysql_cond_broadcast(&COND_thread_count);\n\n  pthread_exit(0);\n  return 0;                                     // Avoid compiler warnings\n}\n\n\nvoid flush_thread_cache()\n{\n  mysql_mutex_lock(&LOCK_thread_count);\n  kill_cached_threads++;\n  while (cached_thread_count)\n  {\n    mysql_cond_broadcast(&COND_thread_cache);\n    mysql_cond_wait(&COND_flush_thread_cache, &LOCK_thread_count);\n  }\n  kill_cached_threads--;\n  mysql_mutex_unlock(&LOCK_thread_count);\n}\n\n\n/******************************************************************************\n  Setup a signal thread with handles all signals.\n  Because Linux doesn't support schemas use a mutex to check that\n  the signal thread is ready before continuing\n******************************************************************************/\n\n#if defined(__WIN__)\n\n\n/*\n  On Windows, we use native SetConsoleCtrlHandler for handle events like Ctrl-C\n  with graceful shutdown.\n  Also, we do not use signal(), but SetUnhandledExceptionFilter instead - as it\n  provides possibility to pass the exception to just-in-time debugger, collect\n  dumps and potentially also the exception and thread context used to output\n  callstack.\n*/\n\nstatic BOOL WINAPI console_event_handler( DWORD type ) \n{\n  DBUG_ENTER(\"console_event_handler\");\n#ifndef EMBEDDED_LIBRARY\n  if(type == CTRL_C_EVENT)\n  {\n     /*\n       Do not shutdown before startup is finished and shutdown\n       thread is initialized. Otherwise there is a race condition \n       between main thread doing initialization and CTRL-C thread doing\n       cleanup, which can result into crash.\n     */\n#ifndef EMBEDDED_LIBRARY\n     if(hEventShutdown)\n       kill_mysql();\n     else\n#endif\n       sql_print_warning(\"CTRL-C ignored during startup\");\n     DBUG_RETURN(TRUE);\n  }\n#endif\n  DBUG_RETURN(FALSE);\n}\n\n\n\n\n#ifdef DEBUG_UNHANDLED_EXCEPTION_FILTER\n#define DEBUGGER_ATTACH_TIMEOUT 120\n/*\n  Wait for debugger to attach and break into debugger. If debugger is\n  not attached, resume after timeout.\n*/\nstatic void wait_for_debugger(int timeout_sec)\n{\n   if(!IsDebuggerPresent())\n   {\n     int i;\n     printf(\"Waiting for debugger to attach, pid=%u\\n\",GetCurrentProcessId());\n     fflush(stdout);\n     for(i= 0; i < timeout_sec; i++)\n     {\n       Sleep(1000);\n       if(IsDebuggerPresent())\n       {\n         /* Break into debugger */\n         __debugbreak();\n         return;\n       }\n     }\n     printf(\"pid=%u, debugger not attached after %d seconds, resuming\\n\",GetCurrentProcessId(),\n       timeout_sec);\n     fflush(stdout);\n   }\n}\n#endif /* DEBUG_UNHANDLED_EXCEPTION_FILTER */\n\nLONG WINAPI my_unhandler_exception_filter(EXCEPTION_POINTERS *ex_pointers)\n{\n   static BOOL first_time= TRUE;\n   if(!first_time)\n   {\n     /*\n       This routine can be called twice, typically\n       when detaching in JIT debugger.\n       Return EXCEPTION_EXECUTE_HANDLER to terminate process.\n     */\n     return EXCEPTION_EXECUTE_HANDLER;\n   }\n   first_time= FALSE;\n#ifdef DEBUG_UNHANDLED_EXCEPTION_FILTER\n   /*\n    Unfortunately there is no clean way to debug unhandled exception filters,\n    as debugger does not stop there(also documented in MSDN) \n    To overcome, one could put a MessageBox, but this will not work in service.\n    Better solution is to print error message and sleep some minutes \n    until debugger is attached\n  */\n  wait_for_debugger(DEBUGGER_ATTACH_TIMEOUT);\n#endif /* DEBUG_UNHANDLED_EXCEPTION_FILTER */\n  __try\n  {\n    my_set_exception_pointers(ex_pointers);\n    handle_fatal_signal(ex_pointers->ExceptionRecord->ExceptionCode);\n  }\n  __except(EXCEPTION_EXECUTE_HANDLER)\n  {\n    DWORD written;\n    const char msg[] = \"Got exception in exception handler!\\n\";\n    WriteFile(GetStdHandle(STD_OUTPUT_HANDLE),msg, sizeof(msg)-1, \n      &written,NULL);\n  }\n  /*\n    Return EXCEPTION_CONTINUE_SEARCH to give JIT debugger\n    (drwtsn32 or vsjitdebugger) possibility to attach,\n    if JIT debugger is configured.\n    Windows Error reporting might generate a dump here.\n  */\n  return EXCEPTION_CONTINUE_SEARCH;\n}\n\n\nstatic void init_signals(void)\n{\n  if(opt_console)\n    SetConsoleCtrlHandler(console_event_handler,TRUE);\n\n    /* Avoid MessageBox()es*/\n  _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);\n  _CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);\n  _CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);\n  _CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);\n  _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);\n  _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);\n\n   /*\n     Do not use SEM_NOGPFAULTERRORBOX in the following SetErrorMode (),\n     because it would prevent JIT debugger and Windows error reporting\n     from working. We need WER or JIT-debugging, since our own unhandled\n     exception filter is not guaranteed to work in all situation\n     (like heap corruption or stack overflow)\n   */\n  SetErrorMode(SetErrorMode(0) | SEM_FAILCRITICALERRORS\n                               | SEM_NOOPENFILEERRORBOX);\n  SetUnhandledExceptionFilter(my_unhandler_exception_filter);\n}\n\n\nstatic void start_signal_handler(void)\n{\n#ifndef EMBEDDED_LIBRARY\n  // Save vm id of this process\n  if (!opt_bootstrap)\n    create_pid_file();\n#endif /* EMBEDDED_LIBRARY */\n}\n\n\nstatic void check_data_home(const char *path)\n{}\n\n#endif /* __WIN__ */\n\n\n#if BACKTRACE_DEMANGLE\n#include <cxxabi.h>\nextern \"C\" char *my_demangle(const char *mangled_name, int *status)\n{\n  return abi::__cxa_demangle(mangled_name, NULL, NULL, status);\n}\n#endif\n\n\n/*\n  pthread_attr_setstacksize() without so much platform-dependency\n\n  Return: The actual stack size if possible.\n*/\n\n#ifndef EMBEDDED_LIBRARY\nstatic size_t my_setstacksize(pthread_attr_t *attr, size_t stacksize)\n{\n  size_t guard_size __attribute__((unused))= 0;\n\n#if defined(__ia64__) || defined(__ia64)\n  /*\n    On IA64, half of the requested stack size is used for \"normal stack\"\n    and half for \"register stack\".  The space measured by check_stack_overrun\n    is the \"normal stack\", so double the request to make sure we have the\n    caller-expected amount of normal stack.\n\n    NOTE: there is no guarantee that the register stack can't grow faster\n    than normal stack, so it's very unclear that we won't dump core due to\n    stack overrun despite check_stack_overrun's efforts.  Experimentation\n    shows that in the execution_constants test, the register stack grows\n    less than half as fast as normal stack, but perhaps other scenarios are\n    less forgiving.  If it turns out that more space is needed for the\n    register stack, that could be forced (rather inefficiently) by using a\n    multiplier higher than 2 here.\n  */\n  stacksize *= 2;\n#endif\n\n  /*\n    On many machines, the \"guard space\" is subtracted from the requested\n    stack size, and that space is quite large on some platforms.  So add\n    it to our request, if we can find out what it is.\n  */\n#ifdef HAVE_PTHREAD_ATTR_GETGUARDSIZE\n  if (pthread_attr_getguardsize(attr, &guard_size))\n    guard_size = 0;\t\t/* if can't find it out, treat as 0 */\n#endif\n\n  pthread_attr_setstacksize(attr, stacksize + guard_size);\n\n  /* Retrieve actual stack size if possible */\n#ifdef HAVE_PTHREAD_ATTR_GETSTACKSIZE\n  {\n    size_t real_stack_size= 0;\n    /* We must ignore real_stack_size = 0 as Solaris 2.9 can return 0 here */\n    if (pthread_attr_getstacksize(attr, &real_stack_size) == 0 &&\n\treal_stack_size > guard_size)\n    {\n      real_stack_size -= guard_size;\n      if (real_stack_size < stacksize)\n      {\n\tif (global_system_variables.log_warnings)\n          sql_print_warning(\"Asked for %zu thread stack, but got %zu\",\n                            stacksize, real_stack_size);\n\tstacksize= real_stack_size;\n      }\n    }\n  }\n#endif /* !EMBEDDED_LIBRARY */\n\n#if defined(__ia64__) || defined(__ia64)\n  stacksize /= 2;\n#endif\n  return stacksize;\n}\n#endif\n\n\n#if !defined(__WIN__)\n#ifndef SA_RESETHAND\n#define SA_RESETHAND 0\n#endif /* SA_RESETHAND */\n#ifndef SA_NODEFER\n#define SA_NODEFER 0\n#endif /* SA_NODEFER */\n\n#ifndef EMBEDDED_LIBRARY\n\nstatic void init_signals(void)\n{\n  sigset_t set;\n  struct sigaction sa;\n  DBUG_ENTER(\"init_signals\");\n\n  my_sigset(THR_SERVER_ALARM,print_signal_warning); // Should never be called!\n\n  if (opt_stack_trace || (test_flags & TEST_CORE_ON_SIGNAL))\n  {\n    sa.sa_flags = SA_RESETHAND | SA_NODEFER;\n    sigemptyset(&sa.sa_mask);\n    sigprocmask(SIG_SETMASK,&sa.sa_mask,NULL);\n\n    my_init_stacktrace();\n#if defined(__amiga__)\n    sa.sa_handler=(void(*)())handle_fatal_signal;\n#else\n    sa.sa_handler=handle_fatal_signal;\n#endif\n    sigaction(SIGSEGV, &sa, NULL);\n    sigaction(SIGABRT, &sa, NULL);\n#ifdef SIGBUS\n    sigaction(SIGBUS, &sa, NULL);\n#endif\n    sigaction(SIGILL, &sa, NULL);\n    sigaction(SIGFPE, &sa, NULL);\n  }\n\n#ifdef HAVE_GETRLIMIT\n  if (test_flags & TEST_CORE_ON_SIGNAL)\n  {\n    /* Change limits so that we will get a core file */\n    STRUCT_RLIMIT rl;\n    rl.rlim_cur = rl.rlim_max = (rlim_t) RLIM_INFINITY;\n    if (setrlimit(RLIMIT_CORE, &rl) && global_system_variables.log_warnings)\n      sql_print_warning(\"setrlimit could not change the size of core files to 'infinity';  We may not be able to generate a core file on signals\");\n  }\n#endif\n  (void) sigemptyset(&set);\n  my_sigset(SIGPIPE,SIG_IGN);\n  sigaddset(&set,SIGPIPE);\n#ifndef IGNORE_SIGHUP_SIGQUIT\n  sigaddset(&set,SIGQUIT);\n  sigaddset(&set,SIGHUP);\n#endif\n  sigaddset(&set,SIGTERM);\n\n  /* Fix signals if blocked by parents (can happen on Mac OS X) */\n  sigemptyset(&sa.sa_mask);\n  sa.sa_flags = 0;\n  sa.sa_handler = print_signal_warning;\n  sigaction(SIGTERM, &sa, (struct sigaction*) 0);\n  sa.sa_flags = 0;\n  sa.sa_handler = print_signal_warning;\n  sigaction(SIGHUP, &sa, (struct sigaction*) 0);\n  if (thd_lib_detected != THD_LIB_LT)\n    sigaddset(&set,THR_SERVER_ALARM);\n  if (test_flags & TEST_SIGINT)\n  {\n    /* Allow SIGINT to break mysqld. This is for debugging with --gdb */\n    my_sigset(SIGINT, end_mysqld_signal);\n    sigdelset(&set, SIGINT);\n  }\n  else\n  {\n    sigaddset(&set,SIGINT);\n#ifdef SIGTSTP\n    sigaddset(&set,SIGTSTP);\n#endif\n  }\n\n  sigprocmask(SIG_SETMASK,&set,NULL);\n  pthread_sigmask(SIG_SETMASK,&set,NULL);\n  DBUG_VOID_RETURN;\n}\n\n\nstatic void start_signal_handler(void)\n{\n  int error;\n  pthread_attr_t thr_attr;\n  DBUG_ENTER(\"start_signal_handler\");\n\n  (void) pthread_attr_init(&thr_attr);\n  pthread_attr_setscope(&thr_attr,PTHREAD_SCOPE_SYSTEM);\n  (void) pthread_attr_setdetachstate(&thr_attr,PTHREAD_CREATE_DETACHED);\n  (void) my_setstacksize(&thr_attr,my_thread_stack_size);\n\n  mysql_mutex_lock(&LOCK_thread_count);\n  if ((error= mysql_thread_create(key_thread_signal_hand,\n                                  &signal_thread, &thr_attr, signal_hand, 0)))\n  {\n    sql_print_error(\"Can't create interrupt-thread (error %d, errno: %d)\",\n\t\t    error,errno);\n    exit(1);\n  }\n  mysql_cond_wait(&COND_thread_count, &LOCK_thread_count);\n  mysql_mutex_unlock(&LOCK_thread_count);\n\n  (void) pthread_attr_destroy(&thr_attr);\n  DBUG_VOID_RETURN;\n}\n\n\n/** This threads handles all signals and alarms. */\n/* ARGSUSED */\npthread_handler_t signal_hand(void *arg __attribute__((unused)))\n{\n  sigset_t set;\n  int sig;\n  my_thread_init();\t\t\t\t// Init new thread\n  DBUG_ENTER(\"signal_hand\");\n  signal_thread_in_use= 1;\n\n  /*\n    Setup alarm handler\n    This should actually be '+ max_number_of_slaves' instead of +10,\n    but the +10 should be quite safe.\n  */\n  init_thr_alarm(thread_scheduler->max_threads + extra_max_connections +\n\t\t global_system_variables.max_insert_delayed_threads + 10);\n  if (test_flags & TEST_SIGINT)\n  {\n    /* Allow SIGINT to break mysqld. This is for debugging with --gdb */\n    (void) sigemptyset(&set);\n    (void) sigaddset(&set,SIGINT);\n    (void) pthread_sigmask(SIG_UNBLOCK,&set,NULL);\n  }\n  (void) sigemptyset(&set);\t\t\t// Setup up SIGINT for debug\n#ifdef USE_ONE_SIGNAL_HAND\n  (void) sigaddset(&set,THR_SERVER_ALARM);\t// For alarms\n#endif\n#ifndef IGNORE_SIGHUP_SIGQUIT\n  (void) sigaddset(&set,SIGQUIT);\n  (void) sigaddset(&set,SIGHUP);\n#endif\n  (void) sigaddset(&set,SIGTERM);\n  (void) sigaddset(&set,SIGTSTP);\n\n  /* Save pid to this process (or thread on Linux) */\n  if (!opt_bootstrap)\n    create_pid_file();\n\n  /*\n    signal to start_signal_handler that we are ready\n    This works by waiting for start_signal_handler to free mutex,\n    after which we signal it that we are ready.\n    At this pointer there is no other threads running, so there\n    should not be any other mysql_cond_signal() calls.\n  */\n  mysql_mutex_lock(&LOCK_thread_count);\n  mysql_mutex_unlock(&LOCK_thread_count);\n  mysql_cond_broadcast(&COND_thread_count);\n\n  (void) pthread_sigmask(SIG_BLOCK,&set,NULL);\n  for (;;)\n  {\n    int error;\t\t\t\t\t// Used when debugging\n    if (shutdown_in_progress && !abort_loop)\n    {\n      sig= SIGTERM;\n      error=0;\n    }\n    else\n      while ((error=my_sigwait(&set,&sig)) == EINTR) ;\n    if (cleanup_done)\n    {\n      DBUG_PRINT(\"quit\",(\"signal_handler: calling my_thread_end()\"));\n      my_thread_end();\n      DBUG_LEAVE;                               // Must match DBUG_ENTER()\n      signal_thread_in_use= 0;\n      pthread_exit(0);\t\t\t\t// Safety\n      return 0;                                 // Avoid compiler warnings\n    }\n    switch (sig) {\n    case SIGTERM:\n    case SIGQUIT:\n    case SIGKILL:\n#ifdef EXTRA_DEBUG\n      sql_print_information(\"Got signal %d to shutdown mysqld\",sig);\n#endif\n      /* switch to the old log message processing */\n      logger.set_handlers(LOG_FILE, opt_slow_log ? LOG_FILE:LOG_NONE,\n                          opt_log ? LOG_FILE:LOG_NONE);\n      DBUG_PRINT(\"info\",(\"Got signal: %d  abort_loop: %d\",sig,abort_loop));\n      if (!abort_loop)\n      {\n\tabort_loop=1;\t\t\t\t// mark abort for threads\n#ifdef HAVE_PSI_INTERFACE\n        /* Delete the instrumentation for the signal thread */\n        if (likely(PSI_server != NULL))\n          PSI_server->delete_current_thread();\n#endif\n#ifdef USE_ONE_SIGNAL_HAND\n\tpthread_t tmp;\n        if ((error= mysql_thread_create(0, /* Not instrumented */\n                                        &tmp, &connection_attrib,\n                                        kill_server_thread,\n                                        (void*) &sig)))\n          sql_print_error(\"Can't create thread to kill server (errno= %d)\",\n                          error);\n#else\n\tkill_server((void*) sig);\t// MIT THREAD has a alarm thread\n#endif\n      }\n      break;\n    case SIGHUP:\n      if (!abort_loop)\n      {\n        int not_used;\n\tmysql_print_status();\t\t// Print some debug info\n\treload_acl_and_cache((THD*) 0,\n\t\t\t     (REFRESH_LOG | REFRESH_TABLES | REFRESH_FAST |\n\t\t\t      REFRESH_GRANT |\n\t\t\t      REFRESH_THREADS | REFRESH_HOSTS),\n\t\t\t     (TABLE_LIST*) 0, &not_used); // Flush logs\n      }\n      /* reenable logs after the options were reloaded */\n      if (log_output_options & LOG_NONE)\n      {\n        logger.set_handlers(LOG_FILE,\n                            opt_slow_log ? LOG_TABLE : LOG_NONE,\n                            opt_log ? LOG_TABLE : LOG_NONE);\n      }\n      else\n      {\n        logger.set_handlers(LOG_FILE,\n                            opt_slow_log ? log_output_options : LOG_NONE,\n                            opt_log ? log_output_options : LOG_NONE);\n      }\n      break;\n#ifdef USE_ONE_SIGNAL_HAND\n    case THR_SERVER_ALARM:\n      process_alarm(sig);\t\t\t// Trigger alarms.\n      break;\n#endif\n    default:\n#ifdef EXTRA_DEBUG\n      sql_print_warning(\"Got signal: %d  error: %d\",sig,error); /* purecov: tested */\n#endif\n      break;\t\t\t\t\t/* purecov: tested */\n    }\n  }\n  return(0);\t\t\t\t\t/* purecov: deadcode */\n}\n\nstatic void check_data_home(const char *path)\n{}\n\n#endif /*!EMBEDDED_LIBRARY*/\n#endif\t/* __WIN__*/\n\n\n/**\n  All global error messages are sent here where the first one is stored\n  for the client.\n*/\n/* ARGSUSED */\nextern \"C\" void my_message_sql(uint error, const char *str, myf MyFlags);\n\nvoid my_message_sql(uint error, const char *str, myf MyFlags)\n{\n  THD *thd= current_thd;\n  MYSQL_ERROR::enum_warning_level level;\n  sql_print_message_func func;\n\n  DBUG_ENTER(\"my_message_sql\");\n  DBUG_PRINT(\"error\", (\"error: %u  message: '%s'  Flag: %d\", error, str, MyFlags));\n\n  DBUG_ASSERT(str != NULL);\n  DBUG_ASSERT(error != 0);\n\n  if (MyFlags & ME_JUST_INFO)\n  {\n    level= MYSQL_ERROR::WARN_LEVEL_NOTE;\n    func= sql_print_information;\n  }\n  else if (MyFlags & ME_JUST_WARNING)\n  {\n    level= MYSQL_ERROR::WARN_LEVEL_WARN;\n    func= sql_print_warning;\n  }\n  else\n  {\n    level= MYSQL_ERROR::WARN_LEVEL_ERROR;\n    func= sql_print_error;\n  }\n\n  if (thd)\n  {\n    if (MyFlags & ME_FATALERROR)\n      thd->is_fatal_error= 1;\n    (void) thd->raise_condition(error, NULL, level, str);\n  }\n  else\n    mysql_audit_general(0, MYSQL_AUDIT_GENERAL_ERROR, error, str);\n\n  /* When simulating OOM, skip writing to error log to avoid mtr errors */\n  DBUG_EXECUTE_IF(\"simulate_out_of_memory\", DBUG_VOID_RETURN;);\n\n  if (!thd || thd->log_all_errors || (MyFlags & ME_NOREFRESH))\n    (*func)(\"%s: %s\", my_progname_short, str); /* purecov: inspected */\n  DBUG_VOID_RETURN;\n}\n\n\n#ifndef EMBEDDED_LIBRARY\nextern \"C\" void *my_str_malloc_mysqld(size_t size);\nextern \"C\" void my_str_free_mysqld(void *ptr);\n\nvoid *my_str_malloc_mysqld(size_t size)\n{\n  return my_malloc(size, MYF(MY_FAE));\n}\n\n\nvoid my_str_free_mysqld(void *ptr)\n{\n  my_free(ptr);\n}\n#endif /* EMBEDDED_LIBRARY */\n\n\n#ifdef __WIN__\n\npthread_handler_t handle_shutdown(void *arg)\n{\n  MSG msg;\n  my_thread_init();\n\n  /* this call should create the message queue for this thread */\n  PeekMessage(&msg, NULL, 1, 65534,PM_NOREMOVE);\n#if !defined(EMBEDDED_LIBRARY)\n  if (WaitForSingleObject(hEventShutdown,INFINITE)==WAIT_OBJECT_0)\n#endif /* EMBEDDED_LIBRARY */\n     kill_server(MYSQL_KILL_SIGNAL);\n  return 0;\n}\n#endif\n\n#include <mysqld_default_groups.h>\n\n#if defined(__WIN__) && !defined(EMBEDDED_LIBRARY)\nstatic const int load_default_groups_sz=\nsizeof(load_default_groups)/sizeof(load_default_groups[0]);\n#endif\n\n\n#ifndef EMBEDDED_LIBRARY\n/**\n  This function is used to check for stack overrun for pathological\n  cases of  regular expressions and 'like' expressions.\n  The call to current_thd is  quite expensive, so we try to avoid it\n  for the normal cases.\n  The size of  each stack frame for the wildcmp() routines is ~128 bytes,\n  so checking  *every* recursive call is not necessary.\n */\nextern \"C\" int\ncheck_enough_stack_size(int recurse_level)\n{\n  uchar stack_top;\n  if (recurse_level % 16 != 0)\n    return 0;\n\n  THD *my_thd= current_thd;\n  if (my_thd != NULL)\n    return check_stack_overrun(my_thd, STACK_MIN_SIZE * 2, &stack_top);\n  return 0;\n}\n#endif\n\n\n/**\n  Initialize one of the global date/time format variables.\n\n  @param format_type\t\tWhat kind of format should be supported\n  @param var_ptr\t\tPointer to variable that should be updated\n\n  @retval\n    0 ok\n  @retval\n    1 error\n*/\n\nstatic bool init_global_datetime_format(timestamp_type format_type,\n                                        DATE_TIME_FORMAT *format)\n{\n  /*\n    Get command line option\n    format->format.str is already set by my_getopt\n  */\n  format->format.length= strlen(format->format.str);\n\n  if (parse_date_time_format(format_type, format))\n  {\n    fprintf(stderr, \"Wrong date/time format specifier: %s\\n\",\n            format->format.str);\n    return true;\n  }\n  return false;\n}\n\nSHOW_VAR com_status_vars[]= {\n  {\"admin_commands\",       (char*) offsetof(STATUS_VAR, com_other), SHOW_LONG_STATUS},\n  {\"alter_db\",             (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ALTER_DB]), SHOW_LONG_STATUS},\n  {\"alter_db_upgrade\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ALTER_DB_UPGRADE]), SHOW_LONG_STATUS},\n  {\"alter_event\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ALTER_EVENT]), SHOW_LONG_STATUS},\n  {\"alter_function\",       (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ALTER_FUNCTION]), SHOW_LONG_STATUS},\n  {\"alter_procedure\",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ALTER_PROCEDURE]), SHOW_LONG_STATUS},\n  {\"alter_server\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ALTER_SERVER]), SHOW_LONG_STATUS},\n  {\"alter_table\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ALTER_TABLE]), SHOW_LONG_STATUS},\n  {\"alter_tablespace\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ALTER_TABLESPACE]), SHOW_LONG_STATUS},\n  {\"analyze\",              (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ANALYZE]), SHOW_LONG_STATUS},\n  {\"assign_to_keycache\",   (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ASSIGN_TO_KEYCACHE]), SHOW_LONG_STATUS},\n  {\"begin\",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_BEGIN]), SHOW_LONG_STATUS},\n  {\"binlog\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_BINLOG_BASE64_EVENT]), SHOW_LONG_STATUS},\n  {\"call_procedure\",       (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CALL]), SHOW_LONG_STATUS},\n  {\"change_db\",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CHANGE_DB]), SHOW_LONG_STATUS},\n  {\"change_master\",        (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CHANGE_MASTER]), SHOW_LONG_STATUS},\n  {\"check\",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CHECK]), SHOW_LONG_STATUS},\n  {\"checksum\",             (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CHECKSUM]), SHOW_LONG_STATUS},\n  {\"commit\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_COMMIT]), SHOW_LONG_STATUS},\n  {\"create_db\",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_DB]), SHOW_LONG_STATUS},\n  {\"create_event\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_EVENT]), SHOW_LONG_STATUS},\n  {\"create_function\",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_SPFUNCTION]), SHOW_LONG_STATUS},\n  {\"create_index\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_INDEX]), SHOW_LONG_STATUS},\n  {\"create_procedure\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_PROCEDURE]), SHOW_LONG_STATUS},\n  {\"create_server\",        (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_SERVER]), SHOW_LONG_STATUS},\n  {\"create_table\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_TABLE]), SHOW_LONG_STATUS},\n  {\"create_trigger\",       (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_TRIGGER]), SHOW_LONG_STATUS},\n  {\"create_udf\",           (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_FUNCTION]), SHOW_LONG_STATUS},\n  {\"create_user\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_USER]), SHOW_LONG_STATUS},\n  {\"create_view\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_CREATE_VIEW]), SHOW_LONG_STATUS},\n  {\"dealloc_sql\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DEALLOCATE_PREPARE]), SHOW_LONG_STATUS},\n  {\"delete\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DELETE]), SHOW_LONG_STATUS},\n  {\"delete_multi\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DELETE_MULTI]), SHOW_LONG_STATUS},\n  {\"do\",                   (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DO]), SHOW_LONG_STATUS},\n  {\"drop_db\",              (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_DB]), SHOW_LONG_STATUS},\n  {\"drop_event\",           (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_EVENT]), SHOW_LONG_STATUS},\n  {\"drop_function\",        (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_FUNCTION]), SHOW_LONG_STATUS},\n  {\"drop_index\",           (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_INDEX]), SHOW_LONG_STATUS},\n  {\"drop_procedure\",       (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_PROCEDURE]), SHOW_LONG_STATUS},\n  {\"drop_server\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_SERVER]), SHOW_LONG_STATUS},\n  {\"drop_table\",           (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_TABLE]), SHOW_LONG_STATUS},\n  {\"drop_trigger\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_TRIGGER]), SHOW_LONG_STATUS},\n  {\"drop_user\",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_USER]), SHOW_LONG_STATUS},\n  {\"drop_view\",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_VIEW]), SHOW_LONG_STATUS},\n  {\"empty_query\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EMPTY_QUERY]), SHOW_LONG_STATUS},\n  {\"execute_sql\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EXECUTE]), SHOW_LONG_STATUS},\n  {\"flush\",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_FLUSH]), SHOW_LONG_STATUS},\n  {\"grant\",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_GRANT]), SHOW_LONG_STATUS},\n  {\"ha_close\",             (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_HA_CLOSE]), SHOW_LONG_STATUS},\n  {\"ha_open\",              (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_HA_OPEN]), SHOW_LONG_STATUS},\n  {\"ha_read\",              (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_HA_READ]), SHOW_LONG_STATUS},\n  {\"help\",                 (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_HELP]), SHOW_LONG_STATUS},\n  {\"insert\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_INSERT]), SHOW_LONG_STATUS},\n  {\"insert_select\",        (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_INSERT_SELECT]), SHOW_LONG_STATUS},\n  {\"install_plugin\",       (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_INSTALL_PLUGIN]), SHOW_LONG_STATUS},\n  {\"kill\",                 (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_KILL]), SHOW_LONG_STATUS},\n  {\"load\",                 (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_LOAD]), SHOW_LONG_STATUS},\n  {\"lock_tables\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_LOCK_TABLES]), SHOW_LONG_STATUS},\n  {\"optimize\",             (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_OPTIMIZE]), SHOW_LONG_STATUS},\n  {\"preload_keys\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_PRELOAD_KEYS]), SHOW_LONG_STATUS},\n  {\"prepare_sql\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_PREPARE]), SHOW_LONG_STATUS},\n  {\"purge\",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_PURGE]), SHOW_LONG_STATUS},\n  {\"purge_before_date\",    (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_PURGE_BEFORE]), SHOW_LONG_STATUS},\n  {\"release_savepoint\",    (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_RELEASE_SAVEPOINT]), SHOW_LONG_STATUS},\n  {\"rename_table\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_RENAME_TABLE]), SHOW_LONG_STATUS},\n  {\"rename_user\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_RENAME_USER]), SHOW_LONG_STATUS},\n  {\"repair\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_REPAIR]), SHOW_LONG_STATUS},\n  {\"replace\",              (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_REPLACE]), SHOW_LONG_STATUS},\n  {\"replace_select\",       (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_REPLACE_SELECT]), SHOW_LONG_STATUS},\n  {\"reset\",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_RESET]), SHOW_LONG_STATUS},\n  {\"resignal\",             (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_RESIGNAL]), SHOW_LONG_STATUS},\n  {\"revoke\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_REVOKE]), SHOW_LONG_STATUS},\n  {\"revoke_all\",           (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_REVOKE_ALL]), SHOW_LONG_STATUS},\n  {\"rollback\",             (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ROLLBACK]), SHOW_LONG_STATUS},\n  {\"rollback_to_savepoint\",(char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ROLLBACK_TO_SAVEPOINT]), SHOW_LONG_STATUS},\n  {\"savepoint\",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SAVEPOINT]), SHOW_LONG_STATUS},\n  {\"select\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SELECT]), SHOW_LONG_STATUS},\n  {\"set_option\",           (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SET_OPTION]), SHOW_LONG_STATUS},\n  {\"show_authors\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_AUTHORS]), SHOW_LONG_STATUS},\n  {\"show_binlog_events\",   (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_BINLOG_EVENTS]), SHOW_LONG_STATUS},\n  {\"show_binlogs\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_BINLOGS]), SHOW_LONG_STATUS},\n  {\"show_charsets\",        (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_CHARSETS]), SHOW_LONG_STATUS},\n  {\"show_client_statistics\",    (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_CLIENT_STATS]), SHOW_LONG_STATUS},\n  {\"show_collations\",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_COLLATIONS]), SHOW_LONG_STATUS},\n  {\"show_contributors\",    (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_CONTRIBUTORS]), SHOW_LONG_STATUS},\n  {\"show_create_db\",       (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_CREATE_DB]), SHOW_LONG_STATUS},\n  {\"show_create_event\",    (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_CREATE_EVENT]), SHOW_LONG_STATUS},\n  {\"show_create_func\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_CREATE_FUNC]), SHOW_LONG_STATUS},\n  {\"show_create_proc\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_CREATE_PROC]), SHOW_LONG_STATUS},\n  {\"show_create_table\",    (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_CREATE]), SHOW_LONG_STATUS},\n  {\"show_create_trigger\",  (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_CREATE_TRIGGER]), SHOW_LONG_STATUS},\n  {\"show_databases\",       (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_DATABASES]), SHOW_LONG_STATUS},\n  {\"show_engine_logs\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_ENGINE_LOGS]), SHOW_LONG_STATUS},\n  {\"show_engine_mutex\",    (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_ENGINE_MUTEX]), SHOW_LONG_STATUS},\n  {\"show_engine_status\",   (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_ENGINE_STATUS]), SHOW_LONG_STATUS},\n  {\"show_errors\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_ERRORS]), SHOW_LONG_STATUS},\n  {\"show_events\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_EVENTS]), SHOW_LONG_STATUS},\n  {\"show_fields\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_FIELDS]), SHOW_LONG_STATUS},\n#ifndef DBUG_OFF\n  {\"show_function_code\",   (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_FUNC_CODE]), SHOW_LONG_STATUS},\n#endif\n  {\"show_function_status\", (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_STATUS_FUNC]), SHOW_LONG_STATUS},\n  {\"show_grants\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_GRANTS]), SHOW_LONG_STATUS},\n  {\"show_index_statistics\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_INDEX_STATS]), SHOW_LONG_STATUS},\n  {\"show_keys\",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_KEYS]), SHOW_LONG_STATUS},\n  {\"show_master_status\",   (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_MASTER_STAT]), SHOW_LONG_STATUS},\n  {\"show_open_tables\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_OPEN_TABLES]), SHOW_LONG_STATUS},\n  {\"show_plugins\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_PLUGINS]), SHOW_LONG_STATUS},\n  {\"show_privileges\",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_PRIVILEGES]), SHOW_LONG_STATUS},\n#ifndef DBUG_OFF\n  {\"show_procedure_code\",  (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_PROC_CODE]), SHOW_LONG_STATUS},\n#endif\n  {\"show_procedure_status\",(char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_STATUS_PROC]), SHOW_LONG_STATUS},\n  {\"show_processlist\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_PROCESSLIST]), SHOW_LONG_STATUS},\n  {\"show_profile\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_PROFILE]), SHOW_LONG_STATUS},\n  {\"show_profiles\",        (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_PROFILES]), SHOW_LONG_STATUS},\n  {\"show_relaylog_events\", (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_RELAYLOG_EVENTS]), SHOW_LONG_STATUS},\n  {\"show_slave_hosts\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_SLAVE_HOSTS]), SHOW_LONG_STATUS},\n  {\"show_slave_status\",    (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_SLAVE_STAT]), SHOW_LONG_STATUS},\n  {\"show_status\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_STATUS]), SHOW_LONG_STATUS},\n  {\"show_storage_engines\", (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_STORAGE_ENGINES]), SHOW_LONG_STATUS},\n  {\"show_table_statistics\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_TABLE_STATS]), SHOW_LONG_STATUS},\n  {\"show_table_status\",    (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_TABLE_STATUS]), SHOW_LONG_STATUS},\n  {\"show_tables\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_TABLES]), SHOW_LONG_STATUS},\n  {\"show_triggers\",        (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_TRIGGERS]), SHOW_LONG_STATUS},\n  {\"show_user_statistics\",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_USER_STATS]), SHOW_LONG_STATUS},\n  {\"show_variables\",       (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_VARIABLES]), SHOW_LONG_STATUS},\n  {\"show_warnings\",        (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SHOW_WARNS]), SHOW_LONG_STATUS},\n  {\"signal\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SIGNAL]), SHOW_LONG_STATUS},\n  {\"slave_start\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SLAVE_START]), SHOW_LONG_STATUS},\n  {\"slave_stop\",           (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_SLAVE_STOP]), SHOW_LONG_STATUS},\n  {\"stmt_close\",           (char*) offsetof(STATUS_VAR, com_stmt_close), SHOW_LONG_STATUS},\n  {\"stmt_execute\",         (char*) offsetof(STATUS_VAR, com_stmt_execute), SHOW_LONG_STATUS},\n  {\"stmt_fetch\",           (char*) offsetof(STATUS_VAR, com_stmt_fetch), SHOW_LONG_STATUS},\n  {\"stmt_prepare\",         (char*) offsetof(STATUS_VAR, com_stmt_prepare), SHOW_LONG_STATUS},\n  {\"stmt_reprepare\",       (char*) offsetof(STATUS_VAR, com_stmt_reprepare), SHOW_LONG_STATUS},\n  {\"stmt_reset\",           (char*) offsetof(STATUS_VAR, com_stmt_reset), SHOW_LONG_STATUS},\n  {\"stmt_send_long_data\",  (char*) offsetof(STATUS_VAR, com_stmt_send_long_data), SHOW_LONG_STATUS},\n  {\"truncate\",             (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_TRUNCATE]), SHOW_LONG_STATUS},\n  {\"uninstall_plugin\",     (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_UNINSTALL_PLUGIN]), SHOW_LONG_STATUS},\n  {\"unlock_tables\",        (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_UNLOCK_TABLES]), SHOW_LONG_STATUS},\n  {\"update\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_UPDATE]), SHOW_LONG_STATUS},\n  {\"update_multi\",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_UPDATE_MULTI]), SHOW_LONG_STATUS},\n  {\"xa_commit\",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_XA_COMMIT]),SHOW_LONG_STATUS},\n  {\"xa_end\",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_XA_END]),SHOW_LONG_STATUS},\n  {\"xa_prepare\",           (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_XA_PREPARE]),SHOW_LONG_STATUS},\n  {\"xa_recover\",           (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_XA_RECOVER]),SHOW_LONG_STATUS},\n  {\"xa_rollback\",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_XA_ROLLBACK]),SHOW_LONG_STATUS},\n  {\"xa_start\",             (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_XA_START]),SHOW_LONG_STATUS},\n  {NullS, NullS, SHOW_LONG}\n};\n\nstatic int init_common_variables()\n{\n  umask(((~my_umask) & 0666));\n  my_decimal_set_zero(&decimal_zero); // set decimal_zero constant;\n\n  tzset();\t\t\t// Set tzname\n\n  sf_leaking_memory= 0; // no memory leaks from now on\n\n  max_system_variables.pseudo_thread_id= (ulong)~0;\n  server_start_time= flush_status_time= my_time(0);\n  my_disable_copystat_in_redel= 1;\n\n  rpl_filter= new Rpl_filter;\n  binlog_filter= new Rpl_filter;\n  if (!rpl_filter || !binlog_filter)\n  {\n    sql_perror(\"Could not allocate replication and binlog filters\");\n    return 1;\n  }\n\n  if (init_thread_environment() ||\n      mysql_init_variables())\n    return 1;\n\n  if (ignore_db_dirs_init())\n    return 1;\n\n#ifdef HAVE_TZNAME\n  struct tm tm_tmp;\n  localtime_r(&server_start_time,&tm_tmp);\n  const char *tz_name=  tzname[tm_tmp.tm_isdst != 0 ? 1 : 0];\n#ifdef _WIN32\n  /*\n    Time zone name may be localized and contain non-ASCII characters,\n    Convert from ANSI encoding to UTF8.\n  */\n  wchar_t wtz_name[sizeof(system_time_zone)];\n  mbstowcs(wtz_name, tz_name, sizeof(system_time_zone)-1);\n  WideCharToMultiByte(CP_UTF8,0, wtz_name, -1, system_time_zone, \n    sizeof(system_time_zone) - 1, NULL, NULL);\n#else\n  strmake_buf(system_time_zone, tz_name);\n#endif /* _WIN32 */\n#endif /* HAVE_TZNAME */\n\n  /*\n    We set SYSTEM time zone as reasonable default and\n    also for failure of my_tz_init() and bootstrap mode.\n    If user explicitly set time zone with --default-time-zone\n    option we will change this value in my_tz_init().\n  */\n  global_system_variables.time_zone= my_tz_SYSTEM;\n\n#ifdef HAVE_PSI_INTERFACE\n  /*\n    Complete the mysql_bin_log initialization.\n    Instrumentation keys are known only after the performance schema initialization,\n    and can not be set in the MYSQL_BIN_LOG constructor (called before main()).\n  */\n  mysql_bin_log.set_psi_keys(key_BINLOG_LOCK_index,\n                             key_BINLOG_update_cond,\n                             key_file_binlog,\n                             key_file_binlog_index,\n                             key_BINLOG_COND_queue_busy);\n#endif\n\n  /*\n    Init mutexes for the global MYSQL_BIN_LOG objects.\n    As safe_mutex depends on what MY_INIT() does, we can't init the mutexes of\n    global MYSQL_BIN_LOGs in their constructors, because then they would be\n    inited before MY_INIT(). So we do it here.\n  */\n  mysql_bin_log.init_pthread_objects();\n\n  /* TODO: remove this when my_time_t is 64 bit compatible */\n  if (!IS_TIME_T_VALID_FOR_TIMESTAMP(server_start_time))\n  {\n    sql_print_error(\"This MySQL server doesn't support dates later then 2038\");\n    return 1;\n  }\n\n  if (gethostname(glob_hostname,sizeof(glob_hostname)) < 0)\n  {\n    /*\n      Get hostname of computer (used by 'show variables') and as default\n      basename for the pid file if --log-basename is not given.\n    */\n    strmake(glob_hostname, STRING_WITH_LEN(\"localhost\"));\n    sql_print_warning(\"gethostname failed, using '%s' as hostname\",\n                        glob_hostname);\n    opt_log_basename= const_cast<char *>(\"mysql\");\n  }\n  else\n    opt_log_basename= glob_hostname;\n\n  if (!*pidfile_name)\n  {\n    strmake(pidfile_name, opt_log_basename, sizeof(pidfile_name)-5);\n    strmov(fn_ext(pidfile_name),\".pid\");\t\t// Add proper extension\n  }\n\n  /*\n    The default-storage-engine entry in my_long_options should have a\n    non-null default value. It was earlier intialized as\n    (longlong)\"MyISAM\" in my_long_options but this triggered a\n    compiler error in the Sun Studio 12 compiler. As a work-around we\n    set the def_value member to 0 in my_long_options and initialize it\n    to the correct value here.\n\n    From MySQL 5.5 onwards, the default storage engine is InnoDB\n    (except in the embedded server, where the default continues to\n    be MyISAM)\n  */\n#if defined(WITH_INNOBASE_STORAGE_ENGINE) || defined(WITH_XTRADB_STORAGE_ENGINE)\n  default_storage_engine= const_cast<char *>(\"InnoDB\");\n#else\n  default_storage_engine= const_cast<char *>(\"MyISAM\");\n#endif\n\n  /*\n    Add server status variables to the dynamic list of\n    status variables that is shown by SHOW STATUS.\n    Later, in plugin_init, and mysql_install_plugin\n    new entries could be added to that list.\n  */\n  if (add_status_vars(status_vars))\n    return 1; // an error was already reported\n\n#ifndef DBUG_OFF\n  /*\n    We have few debug-only commands in com_status_vars, only visible in debug\n    builds. for simplicity we enable the assert only in debug builds\n\n    There are 8 Com_ variables which don't have corresponding SQLCOM_ values:\n    (TODO strictly speaking they shouldn't be here, should not have Com_ prefix\n    that is. Perhaps Stmt_ ? Comstmt_ ? Prepstmt_ ?)\n\n      Com_admin_commands       => com_other\n      Com_stmt_close           => com_stmt_close\n      Com_stmt_execute         => com_stmt_execute\n      Com_stmt_fetch           => com_stmt_fetch\n      Com_stmt_prepare         => com_stmt_prepare\n      Com_stmt_reprepare       => com_stmt_reprepare\n      Com_stmt_reset           => com_stmt_reset\n      Com_stmt_send_long_data  => com_stmt_send_long_data\n\n    With this correction the number of Com_ variables (number of elements in\n    the array, excluding the last element - terminator) must match the number\n    of SQLCOM_ constants.\n  */\n  compile_time_assert(sizeof(com_status_vars)/sizeof(com_status_vars[0]) - 1 ==\n                     SQLCOM_END + 8);\n#endif\n\n  if (get_options(&remaining_argc, &remaining_argv))\n    return 1;\n  set_server_version();\n\n  if (!opt_help)\n    sql_print_information(\"%s (mysqld %s) starting as process %lu ...\",\n                          my_progname, server_version, (ulong) getpid());\n\n#ifndef EMBEDDED_LIBRARY\n  if (opt_abort && !opt_verbose)\n    unireg_abort(0);\n#endif /*!EMBEDDED_LIBRARY*/\n\n  DBUG_PRINT(\"info\",(\"%s  Ver %s for %s on %s\\n\",my_progname,\n\t\t     server_version, SYSTEM_TYPE,MACHINE_TYPE));\n\n#ifdef HAVE_LARGE_PAGES\n  /* Initialize large page size */\n  if (opt_large_pages && (opt_large_page_size= my_get_large_page_size()))\n  {\n      DBUG_PRINT(\"info\", (\"Large page set, large_page_size = %d\",\n                 opt_large_page_size));\n      my_use_large_pages= 1;\n      my_large_page_size= opt_large_page_size;\n  }\n  else\n  {\n    opt_large_pages= 0;\n    /* \n       Either not configured to use large pages or Linux haven't\n       been compiled with large page support\n    */\n  }\n#endif /* HAVE_LARGE_PAGES */\n#ifdef HAVE_SOLARIS_LARGE_PAGES\n#define LARGE_PAGESIZE (4*1024*1024)  /* 4MB */\n#define SUPER_LARGE_PAGESIZE (256*1024*1024)  /* 256MB */\n  if (opt_large_pages)\n  {\n  /*\n    tell the kernel that we want to use 4/256MB page for heap storage\n    and also for the stack. We use 4 MByte as default and if the\n    super-large-page is set we increase it to 256 MByte. 256 MByte\n    is for server installations with GBytes of RAM memory where\n    the MySQL Server will have page caches and other memory regions\n    measured in a number of GBytes.\n    We use as big pages as possible which isn't bigger than the above\n    desired page sizes.\n  */\n   int nelem;\n   size_t max_desired_page_size;\n   if (opt_super_large_pages)\n     max_desired_page_size= SUPER_LARGE_PAGESIZE;\n   else\n     max_desired_page_size= LARGE_PAGESIZE;\n   nelem = getpagesizes(NULL, 0);\n   if (nelem > 0)\n   {\n     size_t *pagesize = (size_t *) malloc(sizeof(size_t) * nelem);\n     if (pagesize != NULL && getpagesizes(pagesize, nelem) > 0)\n     {\n       size_t max_page_size= 0;\n       for (int i= 0; i < nelem; i++)\n       {\n         if (pagesize[i] > max_page_size &&\n             pagesize[i] <= max_desired_page_size)\n            max_page_size= pagesize[i];\n       }\n       free(pagesize);\n       if (max_page_size > 0)\n       {\n         struct memcntl_mha mpss;\n\n         mpss.mha_cmd= MHA_MAPSIZE_BSSBRK;\n         mpss.mha_pagesize= max_page_size;\n         mpss.mha_flags= 0;\n         memcntl(NULL, 0, MC_HAT_ADVISE, (caddr_t)&mpss, 0, 0);\n         mpss.mha_cmd= MHA_MAPSIZE_STACK;\n         memcntl(NULL, 0, MC_HAT_ADVISE, (caddr_t)&mpss, 0, 0);\n       }\n     }\n   }\n  }\n#endif /* HAVE_SOLARIS_LARGE_PAGES */\n\n  /* connections and databases needs lots of files */\n  {\n    uint files, wanted_files, max_open_files;\n\n    /* MyISAM requires two file handles per table. */\n    wanted_files= (10 + max_connections + extra_max_connections +\n                   table_cache_size*2);\n    /*\n      We are trying to allocate no less than max_connections*5 file\n      handles (i.e. we are trying to set the limit so that they will\n      be available).  In addition, we allocate no less than how much\n      was already allocated.  However below we report a warning and\n      recompute values only if we got less file handles than were\n      explicitly requested.  No warning and re-computation occur if we\n      can't get max_connections*5 but still got no less than was\n      requested (value of wanted_files).\n    */\n    max_open_files= max(max(wanted_files,\n                            (max_connections + extra_max_connections)*5),\n                        open_files_limit);\n    files= my_set_max_open_files(max_open_files);\n\n    if (files < wanted_files)\n    {\n      if (!open_files_limit)\n      {\n        /*\n          If we have requested too much file handles than we bring\n          max_connections in supported bounds.\n        */\n        max_connections= (ulong) min(files-10-TABLE_OPEN_CACHE_MIN*2,\n                                     max_connections);\n        /*\n          Decrease table_cache_size according to max_connections, but\n          not below TABLE_OPEN_CACHE_MIN.  Outer min() ensures that we\n          never increase table_cache_size automatically (that could\n          happen if max_connections is decreased above).\n        */\n        table_cache_size= (ulong) min(max((files-10-max_connections)/2,\n                                          TABLE_OPEN_CACHE_MIN),\n                                      table_cache_size);\n\tDBUG_PRINT(\"warning\",\n\t\t   (\"Changed limits: max_open_files: %u  max_connections: %ld  table_cache: %ld\",\n\t\t    files, max_connections, table_cache_size));\n\tif (global_system_variables.log_warnings)\n\t  sql_print_warning(\"Changed limits: max_open_files: %u  max_connections: %ld  table_cache: %ld\",\n\t\t\tfiles, max_connections, table_cache_size);\n      }\n      else if (global_system_variables.log_warnings)\n\tsql_print_warning(\"Could not increase number of max_open_files to more than %u (request: %u)\", files, wanted_files);\n    }\n    open_files_limit= files;\n  }\n  unireg_init(opt_specialflag); /* Set up extern variabels */\n  if (!(my_default_lc_messages=\n        my_locale_by_name(lc_messages)))\n  {\n    sql_print_error(\"Unknown locale: '%s'\", lc_messages);\n    return 1;\n  }\n  global_system_variables.lc_messages= my_default_lc_messages;\n  if (init_errmessage())\t/* Read error messages from file */\n    return 1;\n  init_client_errs();\n  mysql_library_init(unused,unused,unused); /* for replication */\n  lex_init();\n  if (item_create_init())\n    return 1;\n  item_init();\n#ifndef EMBEDDED_LIBRARY\n  my_regex_init(&my_charset_latin1, check_enough_stack_size);\n  my_string_stack_guard= check_enough_stack_size;\n#else\n  my_regex_init(&my_charset_latin1, NULL);\n#endif\n  /*\n    Process a comma-separated character set list and choose\n    the first available character set. This is mostly for\n    test purposes, to be able to start \"mysqld\" even if\n    the requested character set is not available (see bug#18743).\n  */\n  for (;;)\n  {\n    char *next_character_set_name= strchr(default_character_set_name, ',');\n    if (next_character_set_name)\n      *next_character_set_name++= '\\0';\n    if (!(default_charset_info=\n          get_charset_by_csname(default_character_set_name,\n                                MY_CS_PRIMARY, MYF(MY_WME))))\n    {\n      if (next_character_set_name)\n      {\n        default_character_set_name= next_character_set_name;\n        default_collation_name= 0;          // Ignore collation\n      }\n      else\n        return 1;                           // Eof of the list\n    }\n    else\n      break;\n  }\n\n  if (default_collation_name)\n  {\n    CHARSET_INFO *default_collation;\n    default_collation= get_charset_by_name(default_collation_name, MYF(0));\n    if (!default_collation)\n    {\n      sql_print_error(ER_DEFAULT(ER_UNKNOWN_COLLATION), default_collation_name);\n      return 1;\n    }\n    if (!my_charset_same(default_charset_info, default_collation))\n    {\n      sql_print_error(ER_DEFAULT(ER_COLLATION_CHARSET_MISMATCH),\n\t\t      default_collation_name,\n\t\t      default_charset_info->csname);\n      return 1;\n    }\n    default_charset_info= default_collation;\n  }\n  /* Set collactions that depends on the default collation */\n  global_system_variables.collation_server=\t default_charset_info;\n  global_system_variables.collation_database=\t default_charset_info;\n\n  if (is_supported_parser_charset(default_charset_info))\n  {\n    global_system_variables.collation_connection= default_charset_info;\n    global_system_variables.character_set_results= default_charset_info;\n    global_system_variables.character_set_client= default_charset_info;\n  }\n  else\n  {\n    sql_print_information(\"'%s' can not be used as client character set. \"\n                          \"'%s' will be used as default client character set.\",\n                          default_charset_info->csname,\n                          my_charset_latin1.csname);\n    global_system_variables.collation_connection= &my_charset_latin1;\n    global_system_variables.character_set_results= &my_charset_latin1;\n    global_system_variables.character_set_client= &my_charset_latin1;\n  }\n\n  if (!(character_set_filesystem=\n        get_charset_by_csname(character_set_filesystem_name,\n                              MY_CS_PRIMARY, MYF(MY_WME))))\n    return 1;\n  global_system_variables.character_set_filesystem= character_set_filesystem;\n\n  if (!(my_default_lc_time_names=\n        my_locale_by_name(lc_time_names_name)))\n  {\n    sql_print_error(\"Unknown locale: '%s'\", lc_time_names_name);\n    return 1;\n  }\n  global_system_variables.lc_time_names= my_default_lc_time_names;\n\n  /* check log options and issue warnings if needed */\n  if (opt_log && opt_logname && *opt_logname &&\n      !(log_output_options & (LOG_FILE | LOG_NONE)))\n    sql_print_warning(\"Although a path was specified for the \"\n                      \"--log option, log tables are used. \"\n                      \"To enable logging to files use the --log-output option.\");\n\n  if (opt_slow_log && opt_slow_logname && *opt_slow_logname &&\n      !(log_output_options & (LOG_FILE | LOG_NONE)))\n    sql_print_warning(\"Although a path was specified for the \"\n                      \"--log-slow-queries option, log tables are used. \"\n                      \"To enable logging to files use the --log-output=file option.\");\n\n  if (!opt_logname || !*opt_logname)\n    make_default_log_name(&opt_logname, \".log\", false);\n  if (!opt_slow_logname || !*opt_slow_logname)\n    make_default_log_name(&opt_slow_logname, \"-slow.log\", false);\n\n#if defined(ENABLED_DEBUG_SYNC)\n  /* Initialize the debug sync facility. See debug_sync.cc. */\n  if (debug_sync_init())\n    return 1; /* purecov: tested */\n#endif /* defined(ENABLED_DEBUG_SYNC) */\n\n#if (ENABLE_TEMP_POOL)\n  if (use_temp_pool && bitmap_init(&temp_pool,0,1024,1))\n    return 1;\n#else\n  use_temp_pool= 0;\n#endif\n\n  if (my_dboptions_cache_init())\n    return 1;\n\n  /*\n    Ensure that lower_case_table_names is set on system where we have case\n    insensitive names.  If this is not done the users MyISAM tables will\n    get corrupted if accesses with names of different case.\n  */\n  DBUG_PRINT(\"info\", (\"lower_case_table_names: %d\", lower_case_table_names));\n  lower_case_file_system= test_if_case_insensitive(mysql_real_data_home);\n  if (!lower_case_table_names && lower_case_file_system == 1)\n  {\n    if (lower_case_table_names_used)\n    {\n#if MYSQL_VERSION_ID < 100100\n      if (global_system_variables.log_warnings)\n        sql_print_warning(\"You have forced lower_case_table_names to 0 through \"\n                          \"a command-line option, even though your file system \"\n                          \"'%s' is case insensitive.  This means that you can \"\n                          \"corrupt your tables if you access them using names \"\n                          \"with different letter case. You should consider \"\n                          \"changing lower_case_table_names to 1 or 2\",\n                          mysql_real_data_home);\n#else\n      sql_print_error(\"The server option 'lower_case_table_names' is \"\n                      \"configured to use case sensitive table names but the \"\n                      \"data directory resides on a case-insensitive file system. \"\n                      \"Please use a case sensitive file system for your data \"\n                      \"directory or switch to a case-insensitive table name \"\n                      \"mode.\");\n#endif\n      return 1;\n    }\n    else\n    {\n      if (global_system_variables.log_warnings)\n\tsql_print_warning(\"Setting lower_case_table_names=2 because file system for %s is case insensitive\", mysql_real_data_home);\n      lower_case_table_names= 2;\n    }\n  }\n  else if (lower_case_table_names == 2 &&\n           !(lower_case_file_system= (lower_case_file_system == 1)))\n  {\n    if (global_system_variables.log_warnings)\n      sql_print_warning(\"lower_case_table_names was set to 2, even though your \"\n                        \"the file system '%s' is case sensitive.  Now setting \"\n                        \"lower_case_table_names to 0 to avoid future problems.\",\n\t\t\tmysql_real_data_home);\n    lower_case_table_names= 0;\n  }\n  else\n  {\n    lower_case_file_system= (lower_case_file_system == 1);\n  }\n\n  /* Reset table_alias_charset, now that lower_case_table_names is set. */\n  table_alias_charset= (lower_case_table_names ?\n\t\t\tfiles_charset_info :\n\t\t\t&my_charset_bin);\n\n  if (ignore_db_dirs_process_additions())\n  {\n    sql_print_error(\"An error occurred while storing ignore_db_dirs to a hash.\");\n    return 1;\n  }\n\n  return 0;\n}\n\n\nstatic int init_thread_environment()\n{\n  mysql_mutex_init(key_LOCK_thread_count, &LOCK_thread_count, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_status, &LOCK_status, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_delayed_insert,\n                   &LOCK_delayed_insert, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_delayed_status,\n                   &LOCK_delayed_status, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_delayed_create,\n                   &LOCK_delayed_create, MY_MUTEX_INIT_SLOW);\n  mysql_mutex_init(key_LOCK_crypt, &LOCK_crypt, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_user_conn, &LOCK_user_conn, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_active_mi, &LOCK_active_mi, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_global_system_variables,\n                   &LOCK_global_system_variables, MY_MUTEX_INIT_FAST);\n  mysql_rwlock_init(key_rwlock_LOCK_system_variables_hash,\n                    &LOCK_system_variables_hash);\n  mysql_mutex_init(key_LOCK_prepared_stmt_count,\n                   &LOCK_prepared_stmt_count, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_error_messages,\n                   &LOCK_error_messages, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_uuid_short_generator,\n                   &LOCK_short_uuid_generator, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_connection_count,\n                   &LOCK_connection_count, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_stats, &LOCK_stats, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_global_user_client_stats,\n                   &LOCK_global_user_client_stats, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_global_table_stats,\n                   &LOCK_global_table_stats, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_global_index_stats,\n                   &LOCK_global_index_stats, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_prepare_ordered, &LOCK_prepare_ordered,\n                   MY_MUTEX_INIT_SLOW);\n  mysql_mutex_init(key_LOCK_commit_ordered, &LOCK_commit_ordered,\n                   MY_MUTEX_INIT_SLOW);\n\n#ifdef HAVE_OPENSSL\n  mysql_mutex_init(key_LOCK_des_key_file,\n                   &LOCK_des_key_file, MY_MUTEX_INIT_FAST);\n#ifndef HAVE_YASSL\n  openssl_stdlocks= (openssl_lock_t*) OPENSSL_malloc(CRYPTO_num_locks() *\n                                                     sizeof(openssl_lock_t));\n  for (int i= 0; i < CRYPTO_num_locks(); ++i)\n    mysql_rwlock_init(key_rwlock_openssl, &openssl_stdlocks[i].lock);\n  CRYPTO_set_dynlock_create_callback(openssl_dynlock_create);\n  CRYPTO_set_dynlock_destroy_callback(openssl_dynlock_destroy);\n  CRYPTO_set_dynlock_lock_callback(openssl_lock);\n  CRYPTO_set_locking_callback(openssl_lock_function);\n#endif\n#endif\n  mysql_rwlock_init(key_rwlock_LOCK_sys_init_connect, &LOCK_sys_init_connect);\n  mysql_rwlock_init(key_rwlock_LOCK_sys_init_slave, &LOCK_sys_init_slave);\n  mysql_rwlock_init(key_rwlock_LOCK_grant, &LOCK_grant);\n  mysql_cond_init(key_COND_thread_count, &COND_thread_count, NULL);\n  mysql_cond_init(key_COND_thread_cache, &COND_thread_cache, NULL);\n  mysql_cond_init(key_COND_flush_thread_cache, &COND_flush_thread_cache, NULL);\n#ifdef HAVE_REPLICATION\n  mysql_mutex_init(key_LOCK_rpl_status, &LOCK_rpl_status, MY_MUTEX_INIT_FAST);\n  mysql_cond_init(key_COND_rpl_status, &COND_rpl_status, NULL);\n#endif\n  mysql_mutex_init(key_LOCK_server_started,\n                   &LOCK_server_started, MY_MUTEX_INIT_FAST);\n  mysql_cond_init(key_COND_server_started, &COND_server_started, NULL);\n  sp_cache_init();\n#ifdef HAVE_EVENT_SCHEDULER\n  Events::init_mutexes();\n#endif\n  /* Parameter for threads created for connections */\n  (void) pthread_attr_init(&connection_attrib);\n  (void) pthread_attr_setdetachstate(&connection_attrib,\n\t\t\t\t     PTHREAD_CREATE_DETACHED);\n  pthread_attr_setscope(&connection_attrib, PTHREAD_SCOPE_SYSTEM);\n\n  if (pthread_key_create(&THR_THD,NULL) ||\n      pthread_key_create(&THR_MALLOC,NULL))\n  {\n    sql_print_error(\"Can't create thread-keys\");\n    return 1;\n  }\n  return 0;\n}\n\n\n#if defined(HAVE_OPENSSL) && !defined(HAVE_YASSL)\nstatic openssl_lock_t *openssl_dynlock_create(const char *file, int line)\n{\n  openssl_lock_t *lock= new openssl_lock_t;\n  mysql_rwlock_init(key_rwlock_openssl, &lock->lock);\n  return lock;\n}\n\n\nstatic void openssl_dynlock_destroy(openssl_lock_t *lock, const char *file,\n\t\t\t\t    int line)\n{\n  mysql_rwlock_destroy(&lock->lock);\n  delete lock;\n}\n\n\nstatic void openssl_lock_function(int mode, int n, const char *file, int line)\n{\n  if (n < 0 || n > CRYPTO_num_locks())\n  {\n    /* Lock number out of bounds. */\n    sql_print_error(\"Fatal: OpenSSL interface problem (n = %d)\", n);\n    abort();\n  }\n  openssl_lock(mode, &openssl_stdlocks[n], file, line);\n}\n\n\nstatic void openssl_lock(int mode, openssl_lock_t *lock, const char *file,\n\t\t\t int line)\n{\n  int err;\n  char const *what;\n\n  switch (mode) {\n  case CRYPTO_LOCK|CRYPTO_READ:\n    what = \"read lock\";\n    err= mysql_rwlock_rdlock(&lock->lock);\n    break;\n  case CRYPTO_LOCK|CRYPTO_WRITE:\n    what = \"write lock\";\n    err= mysql_rwlock_wrlock(&lock->lock);\n    break;\n  case CRYPTO_UNLOCK|CRYPTO_READ:\n  case CRYPTO_UNLOCK|CRYPTO_WRITE:\n    what = \"unlock\";\n    err= mysql_rwlock_unlock(&lock->lock);\n    break;\n  default:\n    /* Unknown locking mode. */\n    sql_print_error(\"Fatal: OpenSSL interface problem (mode=0x%x)\", mode);\n    abort();\n  }\n  if (err)\n  {\n    sql_print_error(\"Fatal: can't %s OpenSSL lock\", what);\n    abort();\n  }\n}\n#endif /* HAVE_OPENSSL */\n\n\nstatic void init_ssl()\n{\n#if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)\n  if (opt_use_ssl)\n  {\n    enum enum_ssl_init_error error= SSL_INITERR_NOERROR;\n\n    /* having ssl_acceptor_fd != 0 signals the use of SSL */\n    ssl_acceptor_fd= new_VioSSLAcceptorFd(opt_ssl_key, opt_ssl_cert,\n\t\t\t\t\t  opt_ssl_ca, opt_ssl_capath,\n\t\t\t\t\t  opt_ssl_cipher, &error);\n    DBUG_PRINT(\"info\",(\"ssl_acceptor_fd: 0x%lx\", (long) ssl_acceptor_fd));\n    ERR_remove_state(0);\n    if (!ssl_acceptor_fd)\n    {\n      sql_print_warning(\"Failed to setup SSL\");\n      sql_print_warning(\"SSL error: %s\", sslGetErrString(error));\n      opt_use_ssl = 0;\n      have_ssl= SHOW_OPTION_DISABLED;\n    }\n  }\n  else\n  {\n    have_ssl= SHOW_OPTION_DISABLED;\n  }\n  if (des_key_file)\n    load_des_key_file(des_key_file);\n#endif /* HAVE_OPENSSL && ! EMBEDDED_LIBRARY */\n}\n\n\nstatic void end_ssl()\n{\n#ifdef HAVE_OPENSSL\n#ifndef EMBEDDED_LIBRARY\n  if (ssl_acceptor_fd)\n  {\n    free_vio_ssl_acceptor_fd(ssl_acceptor_fd);\n    ssl_acceptor_fd= 0;\n  }\n#endif /* ! EMBEDDED_LIBRARY */\n#endif /* HAVE_OPENSSL */\n}\n\n#ifdef _WIN32\n/**\n  Registers a file to be collected when Windows Error Reporting creates a crash \n  report.\n\n  @note only works on Vista and later, since WerRegisterFile() is not available\n  on earlier Windows.\n*/\n#include <werapi.h>\nstatic void add_file_to_crash_report(char *file)\n{\n  /* Load WerRegisterFile function dynamically.*/\n  HRESULT (WINAPI *pWerRegisterFile)(PCWSTR, WER_REGISTER_FILE_TYPE, DWORD)\n    =(HRESULT (WINAPI *) (PCWSTR, WER_REGISTER_FILE_TYPE, DWORD))\n    GetProcAddress(GetModuleHandle(\"kernel32\"),\"WerRegisterFile\");\n\n  if (pWerRegisterFile)\n  {\n    wchar_t wfile[MAX_PATH+1]= {0};\n    if (mbstowcs(wfile, file, MAX_PATH) != (size_t)-1)\n    {\n      pWerRegisterFile(wfile, WerRegFileTypeOther, WER_FILE_ANONYMOUS_DATA);\n    }\n  }\n}\n#endif\n\nstatic int init_server_components()\n{\n  DBUG_ENTER(\"init_server_components\");\n  /*\n    We need to call each of these following functions to ensure that\n    all things are initialized so that unireg_abort() doesn't fail\n  */\n  mdl_init();\n  if (table_def_init() | hostname_cache_init())\n    unireg_abort(1);\n\n  query_cache_set_min_res_unit(query_cache_min_res_unit);\n  query_cache_init();\n  query_cache_resize(query_cache_size);\n  my_rnd_init(&sql_rand,(ulong) server_start_time,(ulong) server_start_time/2);\n  setup_fpu();\n  init_thr_lock();\n  my_uuid_init((ulong) (my_rnd(&sql_rand))*12345,12345);\n#ifdef HAVE_REPLICATION\n  init_slave_list();\n#endif\n  wt_init();\n\n  /* Setup logs */\n\n  /*\n    Enable old-fashioned error log, except when the user has requested\n    help information. Since the implementation of plugin server\n    variables the help output is now written much later.\n  */\n  if (opt_error_log && !opt_abort)\n  {\n    if (!log_error_file_ptr[0])\n      fn_format(log_error_file, pidfile_name, mysql_data_home, \".err\",\n                MY_REPLACE_EXT); /* replace '.<domain>' by '.err', bug#4997 */\n    else\n      fn_format(log_error_file, log_error_file_ptr, mysql_data_home, \".err\",\n                MY_UNPACK_FILENAME | MY_SAFE_PATH);\n    /*\n      _ptr may have been set to my_disabled_option or \"\" if no argument was\n      passed, but we need to show the real name in SHOW VARIABLES:\n    */\n    log_error_file_ptr= log_error_file;\n    if (!log_error_file[0])\n      opt_error_log= 0;                         // Too long file name\n    else\n    {\n      my_bool res;\n#ifndef EMBEDDED_LIBRARY\n      res= reopen_fstreams(log_error_file, stdout, stderr);\n#else\n      res= reopen_fstreams(log_error_file, NULL, stderr);\n#endif\n\n      if (!res)\n        setbuf(stderr, NULL);\n\n#ifdef _WIN32\n      /* Add error log to windows crash reporting. */\n      add_file_to_crash_report(log_error_file);\n#endif\n    }\n  }\n\n  /* set up the hook before initializing plugins which may use it */\n  error_handler_hook= my_message_sql;\n  proc_info_hook= set_thd_proc_info;\n\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n  /*\n    Parsing the performance schema command line option may have reported\n    warnings/information messages.\n    Now that the logger is finally available, and redirected\n    to the proper file when the --log--error option is used,\n    print the buffered messages to the log.\n  */\n  buffered_logs.print();\n  buffered_logs.cleanup();\n#endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */\n\n  if (xid_cache_init())\n  {\n    sql_print_error(\"Out of memory\");\n    unireg_abort(1);\n  }\n\n  /*\n    initialize delegates for extension observers, errors have already\n    been reported in the function\n  */\n  if (delegates_init())\n    unireg_abort(1);\n\n  /* need to configure logging before initializing storage engines */\n  if (!opt_bin_log_used)\n  {\n    if (opt_log_slave_updates)\n      sql_print_warning(\"You need to use --log-bin to make \"\n                        \"--log-slave-updates work.\");\n    if (binlog_format_used)\n      sql_print_warning(\"You need to use --log-bin to make \"\n                        \"--binlog-format work.\");\n  }\n\n  /* Check that we have not let the format to unspecified at this point */\n  DBUG_ASSERT((uint)global_system_variables.binlog_format <=\n              array_elements(binlog_format_names)-1);\n\n#ifdef HAVE_REPLICATION\n  if (opt_log_slave_updates && replicate_same_server_id)\n  {\n    if (opt_bin_log)\n    {\n      sql_print_error(\"using --replicate-same-server-id in conjunction with \\\n--log-slave-updates is impossible, it would lead to infinite loops in this \\\nserver.\");\n      unireg_abort(1);\n    }\n    else\n      sql_print_warning(\"using --replicate-same-server-id in conjunction with \\\n--log-slave-updates would lead to infinite loops in this server. However this \\\nwill be ignored as the --log-bin option is not defined.\");\n  }\n#endif\n\n  DBUG_ASSERT(!opt_bin_log || opt_bin_logname);\n\n  if (opt_bin_log)\n  {\n    /* Reports an error and aborts, if the --log-bin's path \n       is a directory.*/\n    if (opt_bin_logname[0] && \n        opt_bin_logname[strlen(opt_bin_logname) - 1] == FN_LIBCHAR)\n    {\n      sql_print_error(\"Path '%s' is a directory name, please specify \\\na file name for --log-bin option\", opt_bin_logname);\n      unireg_abort(1);\n    }\n\n    /* Reports an error and aborts, if the --log-bin-index's path \n       is a directory.*/\n    if (opt_binlog_index_name && \n        opt_binlog_index_name[strlen(opt_binlog_index_name) - 1] \n        == FN_LIBCHAR)\n    {\n      sql_print_error(\"Path '%s' is a directory name, please specify \\\na file name for --log-bin-index option\", opt_binlog_index_name);\n      unireg_abort(1);\n    }\n\n    char buf[FN_REFLEN];\n    const char *ln;\n    ln= mysql_bin_log.generate_name(opt_bin_logname, \"-bin\", 1, buf);\n    if (!opt_bin_logname[0] && !opt_binlog_index_name)\n    {\n      /*\n        User didn't give us info to name the binlog index file.\n        Picking `hostname`-bin.index like did in 4.x, causes replication to\n        fail if the hostname is changed later. So, we would like to instead\n        require a name. But as we don't want to break many existing setups, we\n        only give warning, not error.\n      */\n      sql_print_warning(\"No argument was provided to --log-bin and \"\n                        \"neither --log-basename or --log-bin-index where \"\n                        \"used;  This may cause repliction to break when this \"\n                        \"server acts as a master and has its hostname \"\n                        \"changed! Please use '--log-basename=%s' or \"\n                        \"'--log-bin=%s' to avoid this problem.\",\n                        opt_log_basename, ln);\n    }\n    if (ln == buf)\n    {\n      opt_bin_logname= my_once_strdup(buf, MYF(MY_WME));\n    }\n    if (mysql_bin_log.open_index_file(opt_binlog_index_name, ln, TRUE))\n    {\n      unireg_abort(1);\n    }\n  }\n\n  /* call ha_init_key_cache() on all key caches to init them */\n  process_key_caches(&ha_init_key_cache, 0);\n\n  init_global_table_stats();\n  init_global_index_stats();\n\n  /* Allow storage engine to give real error messages */\n  if (ha_init_errors())\n    DBUG_RETURN(1);\n\n  tc_log= 0; // ha_initialize_handlerton() needs that\n\n  if (plugin_init(&remaining_argc, remaining_argv,\n                  (opt_noacl ? PLUGIN_INIT_SKIP_PLUGIN_TABLE : 0) |\n                  (opt_abort ? PLUGIN_INIT_SKIP_INITIALIZATION : 0)))\n  {\n    sql_print_error(\"Failed to initialize plugins.\");\n    unireg_abort(1);\n  }\n  plugins_are_initialized= TRUE;  /* Don't separate from init function */\n\n  have_csv= plugin_status(STRING_WITH_LEN(\"csv\"),\n                          MYSQL_STORAGE_ENGINE_PLUGIN);\n  have_ndbcluster= plugin_status(STRING_WITH_LEN(\"ndbcluster\"),\n                                 MYSQL_STORAGE_ENGINE_PLUGIN);\n  have_partitioning= plugin_status(STRING_WITH_LEN(\"partition\"),\n                                   MYSQL_STORAGE_ENGINE_PLUGIN);\n\n  /* we do want to exit if there are any other unknown options */\n  if (remaining_argc > 1)\n  {\n    int ho_error;\n    struct my_option no_opts[]=\n    {\n      {0, 0, 0, 0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0}\n    };\n    /*\n      We need to eat any 'loose' arguments first before we conclude\n      that there are unprocessed options.\n    */\n    my_getopt_skip_unknown= 0;\n\n    if ((ho_error= handle_options(&remaining_argc, &remaining_argv, no_opts,\n                                  mysqld_get_one_option)))\n      unireg_abort(ho_error);\n    /* Add back the program name handle_options removes */\n    remaining_argc++;\n    remaining_argv--;\n    my_getopt_skip_unknown= TRUE;\n\n    if (remaining_argc > 1)\n    {\n      fprintf(stderr, \"%s: Too many arguments (first extra is '%s').\\n\",\n              my_progname, remaining_argv[1]);\n      unireg_abort(1);\n    }\n  }\n\n  if (opt_abort)\n    unireg_abort(0);\n\n  /* if the errmsg.sys is not loaded, terminate to maintain behaviour */\n  if (!DEFAULT_ERRMSGS[0][0])\n    unireg_abort(1);  \n\n  /* We have to initialize the storage engines before CSV logging */\n  if (ha_init())\n  {\n    sql_print_error(\"Can't init databases\");\n    unireg_abort(1);\n  }\n\n  if (opt_bootstrap)\n    log_output_options= LOG_FILE;\n  else\n    logger.init_log_tables();\n\n  if (log_output_options & LOG_NONE)\n  {\n    /*\n      Issue a warining if there were specified additional options to the\n      log-output along with NONE. Probably this wasn't what user wanted.\n    */\n    if ((log_output_options & LOG_NONE) && (log_output_options & ~LOG_NONE))\n      sql_print_warning(\"There were other values specified to \"\n                        \"log-output besides NONE. Disabling slow \"\n                        \"and general logs anyway.\");\n    logger.set_handlers(LOG_FILE, LOG_NONE, LOG_NONE);\n  }\n  else\n  {\n    /* fall back to the log files if tables are not present */\n    LEX_STRING csv_name={C_STRING_WITH_LEN(\"csv\")};\n    if (!plugin_is_ready(&csv_name, MYSQL_STORAGE_ENGINE_PLUGIN))\n    {\n      /* purecov: begin inspected */\n      sql_print_error(\"CSV engine is not present, falling back to the \"\n                      \"log files\");\n      log_output_options= (log_output_options & ~LOG_TABLE) | LOG_FILE;\n      /* purecov: end */\n    }\n\n    logger.set_handlers(LOG_FILE, opt_slow_log ? log_output_options:LOG_NONE,\n                        opt_log ? log_output_options:LOG_NONE);\n  }\n\n  /*\n    Set the default storage engine\n  */\n  LEX_STRING name= { default_storage_engine, strlen(default_storage_engine) };\n  plugin_ref plugin;\n  handlerton *hton;\n  if ((plugin= ha_resolve_by_name(0, &name)))\n    hton= plugin_data(plugin, handlerton*);\n  else\n  {\n    sql_print_error(\"Unknown/unsupported storage engine: %s\",\n                    default_storage_engine);\n    unireg_abort(1);\n  }\n  if (!ha_storage_engine_is_enabled(hton))\n  {\n    if (!opt_bootstrap)\n    {\n      sql_print_error(\"Default storage engine (%s) is not available\",\n                      default_storage_engine);\n      unireg_abort(1);\n    }\n    DBUG_ASSERT(global_system_variables.table_plugin);\n  }\n  else\n  {\n    /*\n      Need to unlock as global_system_variables.table_plugin\n      was acquired during plugin_init()\n    */\n    mysql_mutex_lock(&LOCK_global_system_variables);\n    plugin_unlock(0, global_system_variables.table_plugin);\n    global_system_variables.table_plugin= plugin;\n    mysql_mutex_unlock(&LOCK_global_system_variables);\n  }\n#if defined(WITH_ARIA_STORAGE_ENGINE) && defined(USE_ARIA_FOR_TMP_TABLES)\n  if (!ha_storage_engine_is_enabled(maria_hton) && !opt_bootstrap)\n  {\n    sql_print_error(\"Aria engine is not enabled or did not start. The Aria engine must be enabled to continue as mysqld was configured with --with-aria-tmp-tables\");\n    unireg_abort(1);\n  }\n  internal_tmp_table_max_key_length=   maria_max_key_length();\n  internal_tmp_table_max_key_segments= maria_max_key_segments();\n#else\n  internal_tmp_table_max_key_length=   myisam_max_key_length();\n  internal_tmp_table_max_key_segments= myisam_max_key_segments();\n#endif\n\n  tc_log= get_tc_log_implementation();\n\n  if (tc_log->open(opt_bin_log ? opt_bin_logname : opt_tc_log_file))\n  {\n    sql_print_error(\"Can't init tc log\");\n    unireg_abort(1);\n  }\n\n  if (ha_recover(0))\n  {\n    unireg_abort(1);\n  }\n\n  if (opt_bin_log && mysql_bin_log.open(opt_bin_logname, LOG_BIN, 0,\n                                        WRITE_CACHE, 0, max_binlog_size, 0, TRUE))\n    unireg_abort(1);\n\n#ifdef HAVE_REPLICATION\n  if (opt_bin_log && expire_logs_days)\n  {\n    time_t purge_time= server_start_time - expire_logs_days*24*60*60;\n    if (purge_time >= 0)\n      mysql_bin_log.purge_logs_before_date(purge_time);\n  }\n#endif\n\n  if (opt_myisam_log)\n    (void) mi_log(1);\n\n#if defined(HAVE_MLOCKALL) && defined(MCL_CURRENT) && !defined(EMBEDDED_LIBRARY)\n  if (locked_in_memory && !getuid())\n  {\n    if (setreuid((uid_t)-1, 0) == -1)\n    {                        // this should never happen\n      sql_perror(\"setreuid\");\n      unireg_abort(1);\n    }\n    if (mlockall(MCL_CURRENT))\n    {\n      if (global_system_variables.log_warnings)\n\tsql_print_warning(\"Failed to lock memory. Errno: %d\\n\",errno);\n      locked_in_memory= 0;\n    }\n    if (user_info)\n      set_user(mysqld_user, user_info);\n  }\n  else\n#endif\n    locked_in_memory=0;\n\n  ft_init_stopwords();\n\n  init_max_user_conn();\n  init_update_queries();\n  init_global_user_stats();\n  init_global_client_stats();\n  DBUG_RETURN(0);\n}\n\n\n#ifndef EMBEDDED_LIBRARY\n\nstatic void create_shutdown_thread()\n{\n#ifdef __WIN__\n  hEventShutdown=CreateEvent(0, FALSE, FALSE, shutdown_event_name);\n  pthread_t hThread;\n  int error;\n  if ((error= mysql_thread_create(key_thread_handle_shutdown,\n                                  &hThread, &connection_attrib,\n                                  handle_shutdown, 0)))\n    sql_print_warning(\"Can't create thread to handle shutdown requests\"\n                      \" (errno= %d)\", error);\n\n  // On \"Stop Service\" we have to do regular shutdown\n  Service.SetShutdownEvent(hEventShutdown);\n#endif /* __WIN__ */\n}\n\n#endif /* EMBEDDED_LIBRARY */\n\n\n#if (defined(_WIN32) || defined(HAVE_SMEM)) && !defined(EMBEDDED_LIBRARY)\nstatic void handle_connections_methods()\n{\n  pthread_t hThread;\n  int error;\n  DBUG_ENTER(\"handle_connections_methods\");\n  if (hPipe == INVALID_HANDLE_VALUE &&\n      (!have_tcpip || opt_disable_networking) &&\n      !opt_enable_shared_memory)\n  {\n    sql_print_error(\"TCP/IP, --shared-memory, or --named-pipe should be configured on NT OS\");\n    unireg_abort(1);\t\t\t\t// Will not return\n  }\n\n  mysql_mutex_lock(&LOCK_thread_count);\n  mysql_cond_init(key_COND_handler_count, &COND_handler_count, NULL);\n  handler_count=0;\n  if (hPipe != INVALID_HANDLE_VALUE)\n  {\n    handler_count++;\n    if ((error= mysql_thread_create(key_thread_handle_con_namedpipes,\n                                    &hThread, &connection_attrib,\n                                    handle_connections_namedpipes, 0)))\n    {\n      sql_print_warning(\"Can't create thread to handle named pipes\"\n                        \" (errno= %d)\", error);\n      handler_count--;\n    }\n  }\n  if (have_tcpip && !opt_disable_networking)\n  {\n    handler_count++;\n    if ((error= mysql_thread_create(key_thread_handle_con_sockets,\n                                    &hThread, &connection_attrib,\n                                    handle_connections_sockets_thread, 0)))\n    {\n      sql_print_warning(\"Can't create thread to handle TCP/IP\",\n                        \" (errno= %d)\", error);\n      handler_count--;\n    }\n  }\n#ifdef HAVE_SMEM\n  if (opt_enable_shared_memory)\n  {\n    handler_count++;\n    if ((error= mysql_thread_create(key_thread_handle_con_sharedmem,\n                                    &hThread, &connection_attrib,\n                                    handle_connections_shared_memory, 0)))\n    {\n      sql_print_warning(\"Can't create thread to handle shared memory\",\n                        \" (errno= %d)\", error);\n      handler_count--;\n    }\n  }\n#endif\n\n  while (handler_count > 0)\n    mysql_cond_wait(&COND_handler_count, &LOCK_thread_count);\n  mysql_mutex_unlock(&LOCK_thread_count);\n  DBUG_VOID_RETURN;\n}\n\nvoid decrement_handler_count()\n{\n  mysql_mutex_lock(&LOCK_thread_count);\n  handler_count--;\n  mysql_cond_signal(&COND_handler_count);\n  mysql_mutex_unlock(&LOCK_thread_count);\n  my_thread_end();\n}\n#else\n#define decrement_handler_count()\n#endif /* defined(_WIN32) || defined(HAVE_SMEM) */\n\n\n#ifndef EMBEDDED_LIBRARY\n\nLEX_STRING sql_statement_names[(uint) SQLCOM_END + 1];\n\nstatic void init_sql_statement_names()\n{\n  char *first_com= (char*) offsetof(STATUS_VAR, com_stat[0]);\n  char *last_com= (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_END]);\n  int record_size= (char*) offsetof(STATUS_VAR, com_stat[1])\n                   - (char*) offsetof(STATUS_VAR, com_stat[0]);\n  char *ptr;\n  uint i;\n  uint com_index;\n\n  for (i= 0; i < ((uint) SQLCOM_END + 1); i++)\n    sql_statement_names[i]= empty_lex_str;\n\n  SHOW_VAR *var= &com_status_vars[0];\n  while (var->name != NULL)\n  {\n    ptr= var->value;\n    if ((first_com <= ptr) && (ptr <= last_com))\n    {\n      com_index= ((int)(ptr - first_com))/record_size;\n      DBUG_ASSERT(com_index < (uint) SQLCOM_END);\n      sql_statement_names[com_index].str= const_cast<char *>(var->name);\n      sql_statement_names[com_index].length= strlen(var->name);\n    }\n    var++;\n  }\n\n  DBUG_ASSERT(strcmp(sql_statement_names[(uint) SQLCOM_SELECT].str, \"select\") == 0);\n  DBUG_ASSERT(strcmp(sql_statement_names[(uint) SQLCOM_SIGNAL].str, \"signal\") == 0);\n\n  sql_statement_names[(uint) SQLCOM_END].str= const_cast<char*>(\"error\");\n}\n\n#ifndef DBUG_OFF\n/*\n  Debugging helper function to keep the locale database\n  (see sql_locale.cc) and max_month_name_length and\n  max_day_name_length variable values in consistent state.\n*/\nstatic void test_lc_time_sz()\n{\n  DBUG_ENTER(\"test_lc_time_sz\");\n  for (MY_LOCALE **loc= my_locales; *loc; loc++)\n  {\n    uint max_month_len= 0;\n    uint max_day_len = 0;\n    for (const char **month= (*loc)->month_names->type_names; *month; month++)\n    {\n      set_if_bigger(max_month_len,\n                    my_numchars_mb(&my_charset_utf8_general_ci,\n                                   *month, *month + strlen(*month)));\n    }\n    for (const char **day= (*loc)->day_names->type_names; *day; day++)\n    {\n      set_if_bigger(max_day_len,\n                    my_numchars_mb(&my_charset_utf8_general_ci,\n                                   *day, *day + strlen(*day)));\n    }\n    if ((*loc)->max_month_name_length != max_month_len ||\n        (*loc)->max_day_name_length != max_day_len)\n    {\n      DBUG_PRINT(\"Wrong max day name(or month name) length for locale:\",\n                 (\"%s\", (*loc)->name));\n      DBUG_ASSERT(0);\n    }\n  }\n  DBUG_VOID_RETURN;\n}\n#endif//DBUG_OFF\n\n#ifdef __WIN__\nint win_main(int argc, char **argv)\n#else\nint mysqld_main(int argc, char **argv)\n#endif\n{\n  /*\n    Perform basic thread library and malloc initialization,\n    to be able to read defaults files and parse options.\n  */\n  my_progname= argv[0];\n  sf_leaking_memory= 1; // no safemalloc memory leak reports if we exit early\n#ifdef HAVE_NPTL\n  ld_assume_kernel_is_set= (getenv(\"LD_ASSUME_KERNEL\") != 0);\n#endif\n#ifndef _WIN32\n  // For windows, my_init() is called from the win specific mysqld_main\n  if (my_init())                 // init my_sys library & pthreads\n  {\n    fprintf(stderr, \"my_init() failed.\");\n    return 1;\n  }\n#endif\n\n  orig_argc= argc;\n  orig_argv= argv;\n  my_getopt_use_args_separator= TRUE;\n  if (load_defaults(MYSQL_CONFIG_NAME, load_default_groups, &argc, &argv))\n    return 1;\n  my_getopt_use_args_separator= FALSE;\n  defaults_argc= argc;\n  defaults_argv= argv;\n  remaining_argc= argc;\n  remaining_argv= argv;\n\n  /* Must be initialized early for comparison of options name */\n  system_charset_info= &my_charset_utf8_general_ci;\n\n  init_sql_statement_names();\n  sys_var_init();\n\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n  /*\n    The performance schema needs to be initialized as early as possible,\n    before to-be-instrumented objects of the server are initialized.\n  */\n  int ho_error;\n  DYNAMIC_ARRAY all_early_options;\n\n  my_getopt_register_get_addr(NULL);\n  /* Skip unknown options so that they may be processed later */\n  my_getopt_skip_unknown= TRUE;\n\n  /* prepare all_early_options array */\n  my_init_dynamic_array(&all_early_options, sizeof(my_option), 100, 25);\n  sys_var_add_options(&all_early_options, sys_var::PARSE_EARLY);\n  add_terminator(&all_early_options);\n\n  /*\n    Logs generated while parsing the command line\n    options are buffered and printed later.\n  */\n  buffered_logs.init();\n  my_getopt_error_reporter= buffered_option_error_reporter;\n\n  ho_error= handle_options(&remaining_argc, &remaining_argv,\n                           (my_option*)(all_early_options.buffer), NULL);\n  delete_dynamic(&all_early_options);\n  if (ho_error == 0)\n  {\n    /* Add back the program name handle_options removes */\n    remaining_argc++;\n    remaining_argv--;\n    if (pfs_param.m_enabled)\n    {\n      PSI_hook= initialize_performance_schema(&pfs_param);\n      if (PSI_hook == NULL)\n      {\n        pfs_param.m_enabled= false;\n        buffered_logs.buffer(WARNING_LEVEL,\n                             \"Performance schema disabled (reason: init failed).\");\n      }\n    }\n  }\n#else\n  /*\n    Other provider of the instrumentation interface should\n    initialize PSI_hook here:\n    - HAVE_PSI_INTERFACE is for the instrumentation interface\n    - WITH_PERFSCHEMA_STORAGE_ENGINE is for one implementation\n      of the interface,\n    but there could be alternate implementations, which is why\n    these two defines are kept separate.\n  */\n#endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */\n\n#ifdef HAVE_PSI_INTERFACE\n  /*\n    Obtain the current performance schema instrumentation interface,\n    if available.\n  */\n  if (PSI_hook)\n    PSI_server= (PSI*) PSI_hook->get_interface(PSI_CURRENT_VERSION);\n\n  if (PSI_server)\n  {\n    /*\n      Now that we have parsed the command line arguments, and have initialized\n      the performance schema itself, the next step is to register all the\n      server instruments.\n    */\n    init_server_psi_keys();\n    /* Instrument the main thread */\n    PSI_thread *psi= PSI_server->new_thread(key_thread_main, NULL, 0);\n    if (psi)\n      PSI_server->set_thread(psi);\n\n    /*\n      Now that some instrumentation is in place,\n      recreate objects which were initialised early,\n      so that they are instrumented as well.\n    */\n    my_thread_global_reinit();\n  }\n#endif /* HAVE_PSI_INTERFACE */\n\n  init_error_log_mutex();\n\n  /* Initialize audit interface globals. Audit plugins are inited later. */\n  mysql_audit_initialize();\n\n  /*\n    Perform basic logger initialization logger. Should be called after\n    MY_INIT, as it initializes mutexes. Log tables are inited later.\n  */\n  logger.init_base();\n\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n  if (ho_error)\n  {\n    /*\n      Parsing command line option failed,\n      Since we don't have a workable remaining_argc/remaining_argv\n      to continue the server initialization, this is as far as this\n      code can go.\n      This is the best effort to log meaningful messages:\n      - messages will be printed to stderr, which is not redirected yet,\n      - messages will be printed in the NT event log, for windows.\n    */\n    buffered_logs.print();\n    buffered_logs.cleanup();\n    /*\n      Not enough initializations for unireg_abort()\n      Using exit() for windows.\n    */\n    exit (ho_error);\n  }\n#endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */\n\n#ifdef _CUSTOMSTARTUPCONFIG_\n  if (_cust_check_startup())\n  {\n    / * _cust_check_startup will report startup failure error * /\n    exit(1);\n  }\n#endif\n\n  if (init_common_variables())\n    unireg_abort(1);\t\t\t\t// Will do exit\n\n  init_signals();\n\n  my_thread_stack_size= my_setstacksize(&connection_attrib,\n                                        my_thread_stack_size);\n\n  (void) thr_setconcurrency(concurrency);\t// 10 by default\n\n  select_thread=pthread_self();\n  select_thread_in_use=1;\n\n#ifdef HAVE_LIBWRAP\n  libwrapName= my_progname+dirname_length(my_progname);\n  openlog(libwrapName, LOG_PID, LOG_AUTH);\n#endif\n\n#ifndef DBUG_OFF\n  test_lc_time_sz();\n  srand((uint) time(NULL)); \n#endif\n\n  /*\n    We have enough space for fiddling with the argv, continue\n  */\n  check_data_home(mysql_real_data_home);\n  if (my_setwd(mysql_real_data_home, opt_abort ? 0 : MYF(MY_WME)) && !opt_abort)\n    unireg_abort(1);\t\t\t\t/* purecov: inspected */\n\n  if ((user_info= check_user(mysqld_user)))\n  {\n#if defined(HAVE_MLOCKALL) && defined(MCL_CURRENT)\n    if (locked_in_memory) // getuid() == 0 here\n      set_effective_user(user_info);\n    else\n#endif\n      set_user(mysqld_user, user_info);\n  }\n\n  if (opt_bin_log && !server_id)\n  {\n    server_id= 1;\n#ifdef EXTRA_DEBUG\n    sql_print_warning(\"You have enabled the binary log, but you haven't set \"\n                      \"server-id to a non-zero value: we force server id to 1; \"\n                      \"updates will be logged to the binary log, but \"\n                      \"connections from slaves will not be accepted.\");\n#endif\n  }\n\n  /* \n   The subsequent calls may take a long time : e.g. innodb log read.\n   Thus set the long running service control manager timeout\n  */\n#if defined(_WIN32) && !defined(EMBEDDED_LIBRARY)\n  Service.SetSlowStarting(slow_start_timeout);\n#endif\n\n  if (init_server_components())\n    unireg_abort(1);\n\n  init_ssl();\n  network_init();\n\n#ifdef __WIN__\n  if (!opt_console)\n  {\n    if (reopen_fstreams(log_error_file, stdout, stderr))\n      unireg_abort(1);\n    setbuf(stderr, NULL);\n    FreeConsole();\t\t\t\t// Remove window\n  }\n\n  if (fileno(stdin) >= 0)\n  {\n    /* Disable CRLF translation (MDEV-9409). */\n    _setmode(fileno(stdin), O_BINARY);\n  }\n#endif\n\n  /*\n   Initialize my_str_malloc() and my_str_free()\n  */\n  my_str_malloc= &my_str_malloc_mysqld;\n  my_str_free= &my_str_free_mysqld;\n\n  /*\n    init signals & alarm\n    After this we can't quit by a simple unireg_abort\n  */\n  start_signal_handler();\t\t\t\t// Creates pidfile\n\n  if (mysql_rm_tmp_tables() || acl_init(opt_noacl) ||\n      my_tz_init((THD *)0, default_tz_name, opt_bootstrap))\n  {\n    abort_loop=1;\n    select_thread_in_use=0;\n\n    (void) pthread_kill(signal_thread, MYSQL_KILL_SIGNAL);\n\n    delete_pid_file(MYF(MY_WME));\n\n    if (unix_sock != INVALID_SOCKET)\n      unlink(mysqld_unix_port);\n    exit(1);\n  }\n\n  if (!opt_noacl)\n    (void) grant_init();\n\n  if (!opt_bootstrap)\n    servers_init(0);\n\n  udf_init();\n\n  init_status_vars();\n  if (opt_bootstrap) /* If running with bootstrap, do not start replication. */\n    opt_skip_slave_start= 1;\n\n  binlog_unsafe_map_init();\n  /*\n    init_slave() must be called after the thread keys are created.\n    Some parts of the code (e.g. SHOW STATUS LIKE 'slave_running' and other\n    places) assume that active_mi != 0, so let's fail if it's 0 (out of\n    memory); a message has already been printed.\n  */\n  if (init_slave() && !active_mi)\n  {\n    unireg_abort(1);\n  }\n\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n  initialize_performance_schema_acl(opt_bootstrap);\n  /*\n    Do not check the structure of the performance schema tables\n    during bootstrap:\n    - the tables are not supposed to exist yet, bootstrap will create them\n    - a check would print spurious error messages\n  */\n  if (! opt_bootstrap)\n    check_performance_schema();\n#endif\n\n  initialize_information_schema_acl();\n\n  execute_ddl_log_recovery();\n\n  if (Events::init(opt_noacl || opt_bootstrap))\n    unireg_abort(1);\n\n  if (opt_bootstrap)\n  {\n    select_thread_in_use= 0;                    // Allow 'kill' to work\n    bootstrap(mysql_stdin);\n    if (!kill_in_progress)\n      unireg_abort(bootstrap_error ? 1 : 0);\n    else\n    {\n      sleep(2);                                 // Wait for kill\n      exit(0);\n    }\n  }\n  if (opt_init_file && *opt_init_file)\n  {\n    if (read_init_file(opt_init_file))\n      unireg_abort(1);\n  }\n\n  create_shutdown_thread();\n  start_handle_manager();\n\n  sql_print_information(ER_DEFAULT(ER_STARTUP),my_progname,server_version,\n                        ((unix_sock == INVALID_SOCKET) ? (char*) \"\"\n                                                       : mysqld_unix_port),\n                         mysqld_port,\n                         MYSQL_COMPILATION_COMMENT);\n#if defined(_WIN32) && !defined(EMBEDDED_LIBRARY)\n  Service.SetRunning();\n#endif\n\n\n  /* Signal threads waiting for server to be started */\n  mysql_mutex_lock(&LOCK_server_started);\n  mysqld_server_started= 1;\n  mysql_cond_signal(&COND_server_started);\n  mysql_mutex_unlock(&LOCK_server_started);\n\n#if defined(_WIN32) || defined(HAVE_SMEM)\n  handle_connections_methods();\n#else\n  handle_connections_sockets();\n#endif /* _WIN32 || HAVE_SMEM */\n\n  /* (void) pthread_attr_destroy(&connection_attrib); */\n\n  DBUG_PRINT(\"quit\",(\"Exiting main thread\"));\n\n#ifndef __WIN__\n#ifdef EXTRA_DEBUG2\n  sql_print_error(\"Before Lock_thread_count\");\n#endif\n  mysql_mutex_lock(&LOCK_thread_count);\n  DBUG_PRINT(\"quit\", (\"Got thread_count mutex\"));\n  select_thread_in_use=0;\t\t\t// For close_connections\n  mysql_mutex_unlock(&LOCK_thread_count);\n  mysql_cond_broadcast(&COND_thread_count);\n#ifdef EXTRA_DEBUG2\n  sql_print_error(\"After lock_thread_count\");\n#endif\n#endif /* __WIN__ */\n\n#ifdef HAVE_PSI_INTERFACE\n  /*\n    Disable the main thread instrumentation,\n    to avoid recording events during the shutdown.\n  */\n  if (PSI_server)\n    PSI_server->delete_current_thread();\n#endif\n\n  /* Wait until cleanup is done */\n  mysql_mutex_lock(&LOCK_thread_count);\n  while (!ready_to_exit)\n    mysql_cond_wait(&COND_thread_count, &LOCK_thread_count);\n  mysql_mutex_unlock(&LOCK_thread_count);\n\n#if defined(__WIN__) && !defined(EMBEDDED_LIBRARY)\n  if (Service.IsNT() && start_mode)\n    Service.Stop();\n  else\n  {\n    Service.SetShutdownEvent(0);\n    if (hEventShutdown)\n      CloseHandle(hEventShutdown);\n  }\n#endif\n  mysqld_exit(0);\n  return 0;\n}\n\n#endif /* !EMBEDDED_LIBRARY */\n\n\n/****************************************************************************\n  Main and thread entry function for Win32\n  (all this is needed only to run mysqld as a service on WinNT)\n****************************************************************************/\n\n#if defined(__WIN__) && !defined(EMBEDDED_LIBRARY)\nint mysql_service(void *p)\n{\n  if (my_thread_init())\n    return 1;\n  \n  if (use_opt_args)\n    win_main(opt_argc, opt_argv);\n  else\n    win_main(Service.my_argc, Service.my_argv);\n\n  my_thread_end();\n  return 0;\n}\n\n\n/* Quote string if it contains space, else copy */\n\nstatic char *add_quoted_string(char *to, const char *from, char *to_end)\n{\n  uint length= (uint) (to_end-to);\n\n  if (!strchr(from, ' '))\n    return strmake(to, from, length-1);\n  return strxnmov(to, length-1, \"\\\"\", from, \"\\\"\", NullS);\n}\n\n\n/**\n  Handle basic handling of services, like installation and removal.\n\n  @param argv\t   \t        Pointer to argument list\n  @param servicename\t\tInternal name of service\n  @param displayname\t\tDisplay name of service (in taskbar ?)\n  @param file_path\t\tPath to this program\n  @param startup_option\tStartup option to mysqld\n\n  @retval 0\toption handled\n  @retval 1\tCould not handle option\n*/\n\nstatic bool\ndefault_service_handling(char **argv,\n\t\t\t const char *servicename,\n\t\t\t const char *displayname,\n\t\t\t const char *file_path,\n\t\t\t const char *extra_opt,\n\t\t\t const char *account_name)\n{\n  char path_and_service[FN_REFLEN+FN_REFLEN+32], *pos, *end;\n  const char *opt_delim;\n  end= path_and_service + sizeof(path_and_service)-3;\n\n  /* We have to quote filename if it contains spaces */\n  pos= add_quoted_string(path_and_service, file_path, end);\n  if (extra_opt && *extra_opt)\n  {\n    /* \n     Add option after file_path. There will be zero or one extra option.  It's \n     assumed to be --defaults-file=file but isn't checked.  The variable (not\n     the option name) should be quoted if it contains a string.  \n    */\n    *pos++= ' ';\n    if (opt_delim= strchr(extra_opt, '='))\n    {\n      size_t length= ++opt_delim - extra_opt;\n      pos= strnmov(pos, extra_opt, length);\n    }\n    else\n      opt_delim= extra_opt;\n    \n    pos= add_quoted_string(pos, opt_delim, end);\n  }\n  /* We must have servicename last */\n  *pos++= ' ';\n  (void) add_quoted_string(pos, servicename, end);\n\n  if (Service.got_service_option(argv, \"install\"))\n  {\n    Service.Install(1, servicename, displayname, path_and_service,\n                    account_name);\n    return 0;\n  }\n  if (Service.got_service_option(argv, \"install-manual\"))\n  {\n    Service.Install(0, servicename, displayname, path_and_service,\n                    account_name);\n    return 0;\n  }\n  if (Service.got_service_option(argv, \"remove\"))\n  {\n    Service.Remove(servicename);\n    return 0;\n  }\n  return 1;\n}\n\n\nint mysqld_main(int argc, char **argv)\n{\n  my_progname= argv[0];\n\n  /*\n    When several instances are running on the same machine, we\n    need to have an  unique  named  hEventShudown  through the\n    application PID e.g.: MySQLShutdown1890; MySQLShutdown2342\n  */\n  int10_to_str((int) GetCurrentProcessId(),strmov(shutdown_event_name,\n                                                  \"MySQLShutdown\"), 10);\n\n  /* Must be initialized early for comparison of service name */\n  system_charset_info= &my_charset_utf8_general_ci;\n\n  if (my_init())\n  {\n    fprintf(stderr, \"my_init() failed.\");\n    return 1;\n  }\n\n  if (Service.GetOS())\t/* true NT family */\n  {\n    char file_path[FN_REFLEN];\n    my_path(file_path, argv[0], \"\");\t\t      /* Find name in path */\n    fn_format(file_path,argv[0],file_path,\"\",\n\t      MY_REPLACE_DIR | MY_UNPACK_FILENAME | MY_RESOLVE_SYMLINKS);\n\n    if (argc == 2)\n    {\n      if (!default_service_handling(argv, MYSQL_SERVICENAME, MYSQL_SERVICENAME,\n\t\t\t\t   file_path, \"\", NULL))\n\treturn 0;\n      if (Service.IsService(argv[1]))        /* Start an optional service */\n      {\n\t/*\n\t  Only add the service name to the groups read from the config file\n\t  if it's not \"MySQL\". (The default service name should be 'mysqld'\n\t  but we started a bad tradition by calling it MySQL from the start\n\t  and we are now stuck with it.\n\t*/\n\tif (my_strcasecmp(system_charset_info, argv[1],\"mysql\"))\n\t  load_default_groups[load_default_groups_sz-2]= argv[1];\n        start_mode= 1;\n        Service.Init(argv[1], mysql_service);\n        return 0;\n      }\n    }\n    else if (argc == 3) /* install or remove any optional service */\n    {\n      if (!default_service_handling(argv, argv[2], argv[2], file_path, \"\",\n                                    NULL))\n\treturn 0;\n      if (Service.IsService(argv[2]))\n      {\n\t/*\n\t  mysqld was started as\n\t  mysqld --defaults-file=my_path\\my.ini service-name\n\t*/\n\tuse_opt_args=1;\n\topt_argc= 2;\t\t\t\t// Skip service-name\n\topt_argv=argv;\n\tstart_mode= 1;\n\tif (my_strcasecmp(system_charset_info, argv[2],\"mysql\"))\n\t  load_default_groups[load_default_groups_sz-2]= argv[2];\n\tService.Init(argv[2], mysql_service);\n\treturn 0;\n      }\n    }\n    else if (argc == 4 || argc == 5)\n    {\n      /*\n        This may seem strange, because we handle --local-service while\n        preserving 4.1's behavior of allowing any one other argument that is\n        passed to the service on startup. (The assumption is that this is\n        --defaults-file=file, but that was not enforced in 4.1, so we don't\n        enforce it here.)\n      */\n      const char *extra_opt= NullS;\n      const char *account_name = NullS;\n      int index;\n      for (index = 3; index < argc; index++)\n      {\n        if (!strcmp(argv[index], \"--local-service\"))\n          account_name= \"NT AUTHORITY\\\\LocalService\";\n        else\n          extra_opt= argv[index];\n      }\n\n      if (argc == 4 || account_name)\n        if (!default_service_handling(argv, argv[2], argv[2], file_path,\n                                      extra_opt, account_name))\n          return 0;\n    }\n    else if (argc == 1 && Service.IsService(MYSQL_SERVICENAME))\n    {\n      /* start the default service */\n      start_mode= 1;\n      Service.Init(MYSQL_SERVICENAME, mysql_service);\n      return 0;\n    }\n  }\n  /* Start as standalone server */\n  Service.my_argc=argc;\n  Service.my_argv=argv;\n  mysql_service(NULL);\n  return 0;\n}\n#endif\n\n\n/**\n  Execute all commands from a file. Used by the mysql_install_db script to\n  create MySQL privilege tables without having to start a full MySQL server.\n*/\n\nstatic void bootstrap(MYSQL_FILE *file)\n{\n  DBUG_ENTER(\"bootstrap\");\n\n  THD *thd= new THD;\n  thd->bootstrap=1;\n  my_net_init(&thd->net,(st_vio*) 0);\n  thd->max_client_packet_length= thd->net.max_packet;\n  thd->security_ctx->master_access= ~(ulong)0;\n  thd->thread_id= thd->variables.pseudo_thread_id= thread_id++;\n  thread_count++;\n  in_bootstrap= TRUE;\n\n  bootstrap_file=file;\n#ifndef EMBEDDED_LIBRARY\t\t\t// TODO:  Enable this\n  int error;\n  if ((error= mysql_thread_create(key_thread_bootstrap,\n                                  &thd->real_id, &connection_attrib,\n                                  handle_bootstrap,\n                                  (void*) thd)))\n  {\n    sql_print_warning(\"Can't create thread to handle bootstrap (errno= %d)\",\n                      error);\n    bootstrap_error=-1;\n    DBUG_VOID_RETURN;\n  }\n  /* Wait for thread to die */\n  mysql_mutex_lock(&LOCK_thread_count);\n  while (in_bootstrap)\n  {\n    mysql_cond_wait(&COND_thread_count, &LOCK_thread_count);\n    DBUG_PRINT(\"quit\",(\"One thread died (count=%u)\",thread_count));\n  }\n  mysql_mutex_unlock(&LOCK_thread_count);\n#else\n  thd->mysql= 0;\n  do_handle_bootstrap(thd);\n#endif\n\n  DBUG_VOID_RETURN;\n}\n\n\nstatic bool read_init_file(char *file_name)\n{\n  MYSQL_FILE *file;\n  DBUG_ENTER(\"read_init_file\");\n  DBUG_PRINT(\"enter\",(\"name: %s\",file_name));\n  if (!(file= mysql_file_fopen(key_file_init, file_name,\n                               O_RDONLY, MYF(MY_WME))))\n    DBUG_RETURN(TRUE);\n  bootstrap(file);\n  mysql_file_fclose(file, MYF(MY_WME));\n  DBUG_RETURN(FALSE);\n}\n\n\n/**\n  Increment number of created threads\n*/\nvoid inc_thread_created(void)\n{\n  thread_created++;\n}\n\n#ifndef EMBEDDED_LIBRARY\n\n/*\n   Simple scheduler that use the main thread to handle the request\n\n   NOTES\n     This is only used for debugging, when starting mysqld with\n     --thread-handling=no-threads or --one-thread\n\n     When we enter this function, LOCK_thread_count is hold!\n*/\n\nvoid handle_connection_in_main_thread(THD *thd)\n{\n  mysql_mutex_assert_owner(&LOCK_thread_count);\n  thread_cache_size=0;\t\t\t// Safety\n  threads.append(thd);\n  mysql_mutex_unlock(&LOCK_thread_count);\n  thd->start_utime= microsecond_interval_timer();\n  do_handle_one_connection(thd);\n}\n\n\n/*\n  Scheduler that uses one thread per connection\n*/\n\nvoid create_thread_to_handle_connection(THD *thd)\n{\n  if (cached_thread_count > wake_thread)\n  {\n    /* Get thread from cache */\n    thread_cache.push_back(thd);\n    wake_thread++;\n    mysql_cond_signal(&COND_thread_cache);\n  }\n  else\n  {\n    char error_message_buff[MYSQL_ERRMSG_SIZE];\n    /* Create new thread to handle connection */\n    int error;\n    thread_created++;\n    threads.append(thd);\n    DBUG_PRINT(\"info\",((\"creating thread %lu\"), thd->thread_id));\n    thd->prior_thr_create_utime= microsecond_interval_timer();\n    if ((error= mysql_thread_create(key_thread_one_connection,\n                                    &thd->real_id, &connection_attrib,\n                                    handle_one_connection,\n                                    (void*) thd)))\n    {\n      /* purecov: begin inspected */\n      DBUG_PRINT(\"error\",\n                 (\"Can't create thread to handle request (error %d)\",\n                  error));\n\n      thread_count--;\n      thd->killed= KILL_CONNECTION;             // Safety\n      mysql_mutex_unlock(&LOCK_thread_count);\n\n      mysql_mutex_lock(&LOCK_connection_count);\n      (*thd->scheduler->connection_count)--;\n      mysql_mutex_unlock(&LOCK_connection_count);\n\n      statistic_increment(aborted_connects,&LOCK_status);\n      /* Can't use my_error() since store_globals has not been called. */\n      my_snprintf(error_message_buff, sizeof(error_message_buff),\n                  ER_THD(thd, ER_CANT_CREATE_THREAD), error);\n      net_send_error(thd, ER_CANT_CREATE_THREAD, error_message_buff, NULL);\n      close_connection(thd, ER_OUT_OF_RESOURCES);\n      mysql_mutex_lock(&LOCK_thread_count);\n      delete thd;\n      mysql_mutex_unlock(&LOCK_thread_count);\n      return;\n      /* purecov: end */\n    }\n  }\n  mysql_mutex_unlock(&LOCK_thread_count);\n  DBUG_PRINT(\"info\",(\"Thread created\"));\n}\n\n\n/**\n  Create new thread to handle incoming connection.\n\n    This function will create new thread to handle the incoming\n    connection.  If there are idle cached threads one will be used.\n    'thd' will be pushed into 'threads'.\n\n    In single-threaded mode (\\#define ONE_THREAD) connection will be\n    handled inside this function.\n\n  @param[in,out] thd    Thread handle of future thread.\n*/\n\nstatic void create_new_thread(THD *thd)\n{\n  DBUG_ENTER(\"create_new_thread\");\n\n  /*\n    Don't allow too many connections. We roughly check here that we allow\n    only (max_connections + 1) connections.\n  */\n\n  mysql_mutex_lock(&LOCK_connection_count);\n\n  if (*thd->scheduler->connection_count >=\n      *thd->scheduler->max_connections + 1|| abort_loop)\n  {\n    mysql_mutex_unlock(&LOCK_connection_count);\n\n    DBUG_PRINT(\"error\",(\"Too many connections\"));\n    close_connection(thd, ER_CON_COUNT_ERROR);\n    statistic_increment(denied_connections, &LOCK_status);\n    delete thd;\n    DBUG_VOID_RETURN;\n  }\n\n  ++*thd->scheduler->connection_count;\n\n  if (connection_count + extra_connection_count > max_used_connections)\n    max_used_connections= connection_count + extra_connection_count;\n\n  mysql_mutex_unlock(&LOCK_connection_count);\n\n  /* Start a new thread to handle connection. */\n\n  mysql_mutex_lock(&LOCK_thread_count);\n\n  /*\n    The initialization of thread_id is done in create_embedded_thd() for\n    the embedded library.\n    TODO: refactor this to avoid code duplication there\n  */\n  thd->thread_id= thd->variables.pseudo_thread_id= thread_id++;\n\n  thread_count++;\n\n  MYSQL_CALLBACK(thd->scheduler, add_connection, (thd));\n\n  DBUG_VOID_RETURN;\n}\n#endif /* EMBEDDED_LIBRARY */\n\n\n#ifdef SIGNALS_DONT_BREAK_READ\ninline void kill_broken_server()\n{\n  /* hack to get around signals ignored in syscalls for problem OS's */\n  if (unix_sock == INVALID_SOCKET ||\n      (!opt_disable_networking && base_ip_sock == INVALID_SOCKET))\n  {\n    select_thread_in_use = 0;\n    /* The following call will never return */\n    DBUG_PRINT(\"general\", (\"killing server because socket is closed\"));\n    kill_server((void*) MYSQL_KILL_SIGNAL);\n  }\n}\n#define MAYBE_BROKEN_SYSCALL kill_broken_server();\n#else\n#define MAYBE_BROKEN_SYSCALL\n#endif\n\n\t/* Handle new connections and spawn new process to handle them */\n\n#ifndef EMBEDDED_LIBRARY\n\nvoid handle_connections_sockets()\n{\n  my_socket UNINIT_VAR(sock), UNINIT_VAR(new_sock);\n  uint error_count=0;\n  THD *thd;\n  struct sockaddr_storage cAddr;\n  int ip_flags __attribute__((unused))=0;\n  int socket_flags __attribute__((unused))= 0;\n  int extra_ip_flags __attribute__((unused))=0;\n  int flags=0,retval;\n  st_vio *vio_tmp;\n#ifdef HAVE_POLL\n  int socket_count= 0;\n  struct pollfd fds[3]; // for ip_sock, unix_sock and extra_ip_sock\n#define setup_fds(X)                    \\\n    fds[socket_count].fd= X;            \\\n    fds[socket_count].events= POLLIN;   \\\n    socket_count++\n#else\n  fd_set readFDs,clientFDs;\n  uint max_used_connection= (uint)\n    max(max(base_ip_sock, unix_sock), extra_ip_sock) + 1;\n#define setup_fds(X)    FD_SET(X,&clientFDs)\n  FD_ZERO(&clientFDs);\n#endif\n\n  DBUG_ENTER(\"handle_connections_sockets\");\n\n  if (base_ip_sock != INVALID_SOCKET)\n  {\n    setup_fds(base_ip_sock);\n    ip_flags = fcntl(base_ip_sock, F_GETFL, 0);\n  }\n  if (extra_ip_sock != INVALID_SOCKET)\n  {\n    setup_fds(extra_ip_sock);\n    extra_ip_flags = fcntl(extra_ip_sock, F_GETFL, 0);\n  }\n#ifdef HAVE_SYS_UN_H\n  setup_fds(unix_sock);\n  socket_flags=fcntl(unix_sock, F_GETFL, 0);\n#endif\n\n  DBUG_PRINT(\"general\",(\"Waiting for connections.\"));\n  MAYBE_BROKEN_SYSCALL;\n  while (!abort_loop)\n  {\n#ifdef HAVE_POLL\n    retval= poll(fds, socket_count, -1);\n#else\n    readFDs=clientFDs;\n\n    retval= select((int) max_used_connection,&readFDs,0,0,0);\n#endif\n\n    if (retval < 0)\n    {\n      if (socket_errno != SOCKET_EINTR)\n      {\n\tif (!select_errors++ && !abort_loop)\t/* purecov: inspected */\n\t  sql_print_error(\"mysqld: Got error %d from select\",socket_errno); /* purecov: inspected */\n      }\n      MAYBE_BROKEN_SYSCALL\n      continue;\n    }\n\n    if (abort_loop)\n    {\n      MAYBE_BROKEN_SYSCALL;\n      break;\n    }\n\n    /* Is this a new connection request ? */\n#ifdef HAVE_POLL\n    for (int i= 0; i < socket_count; ++i) \n    {\n      if (fds[i].revents & POLLIN)\n      {\n        sock= fds[i].fd;\n        flags= fcntl(sock, F_GETFL, 0);\n        break;\n      }\n    }\n#else  // HAVE_POLL\n    if (FD_ISSET(base_ip_sock,&readFDs))\n    {\n      sock=  base_ip_sock;\n      flags= ip_flags;\n    }\n    else\n    if (FD_ISSET(extra_ip_sock,&readFDs))\n    {\n      sock=  extra_ip_sock;\n      flags= extra_ip_flags;\n    }\n    else\n    {\n      sock = unix_sock;\n      flags= socket_flags;\n    }\n#endif // HAVE_POLL\n\n#if !defined(NO_FCNTL_NONBLOCK)\n    if (!(test_flags & TEST_BLOCKING))\n    {\n#if defined(O_NONBLOCK)\n      fcntl(sock, F_SETFL, flags | O_NONBLOCK);\n#elif defined(O_NDELAY)\n      fcntl(sock, F_SETFL, flags | O_NDELAY);\n#endif\n    }\n#endif /* NO_FCNTL_NONBLOCK */\n    for (uint retry=0; retry < MAX_ACCEPT_RETRY; retry++)\n    {\n      size_socket length= sizeof(struct sockaddr_storage);\n      new_sock= accept(sock, (struct sockaddr *)(&cAddr),\n                       &length);\n      if (new_sock != INVALID_SOCKET ||\n\t  (socket_errno != SOCKET_EINTR && socket_errno != SOCKET_EAGAIN))\n\tbreak;\n      MAYBE_BROKEN_SYSCALL;\n#if !defined(NO_FCNTL_NONBLOCK)\n      if (!(test_flags & TEST_BLOCKING))\n      {\n\tif (retry == MAX_ACCEPT_RETRY - 1)\n\t  fcntl(sock, F_SETFL, flags);\t\t// Try without O_NONBLOCK\n      }\n#endif\n    }\n#if !defined(NO_FCNTL_NONBLOCK)\n    if (!(test_flags & TEST_BLOCKING))\n      fcntl(sock, F_SETFL, flags);\n#endif\n    if (new_sock == INVALID_SOCKET)\n    {\n      if ((error_count++ & 255) == 0)\t\t// This can happen often\n\tsql_perror(\"Error in accept\");\n      MAYBE_BROKEN_SYSCALL;\n      if (socket_errno == SOCKET_ENFILE || socket_errno == SOCKET_EMFILE)\n\tsleep(1);\t\t\t\t// Give other threads some time\n      continue;\n    }\n\n#ifdef HAVE_LIBWRAP\n    {\n      if (sock == base_ip_sock || sock == extra_ip_sock)\n      {\n\tstruct request_info req;\n\tsignal(SIGCHLD, SIG_DFL);\n\trequest_init(&req, RQ_DAEMON, libwrapName, RQ_FILE, new_sock, NULL);\n\tmy_fromhost(&req);\n\tif (!my_hosts_access(&req))\n\t{\n\t  /*\n\t    This may be stupid but refuse() includes an exit(0)\n\t    which we surely don't want...\n\t    clean_exit() - same stupid thing ...\n\t  */\n\t  syslog(deny_severity, \"refused connect from %s\",\n\t\t my_eval_client(&req));\n\n\t  /*\n\t    C++ sucks (the gibberish in front just translates the supplied\n\t    sink function pointer in the req structure from a void (*sink)();\n\t    to a void(*sink)(int) if you omit the cast, the C++ compiler\n\t    will cry...\n\t  */\n\t  if (req.sink)\n\t    ((void (*)(int))req.sink)(req.fd);\n\n\t  (void) mysql_socket_shutdown(new_sock, SHUT_RDWR);\n\t  (void) closesocket(new_sock);\n\t  continue;\n\t}\n      }\n    }\n#endif /* HAVE_LIBWRAP */\n\n    {\n      size_socket dummyLen;\n      struct sockaddr_storage dummy;\n      dummyLen = sizeof(dummy);\n      if (  getsockname(new_sock,(struct sockaddr *)&dummy, \n                  (SOCKET_SIZE_TYPE *)&dummyLen) < 0  )\n      {\n\tsql_perror(\"Error on new connection socket\");\n\t(void) mysql_socket_shutdown(new_sock, SHUT_RDWR);\n\t(void) closesocket(new_sock);\n\tcontinue;\n      }\n    }\n\n    /*\n    ** Don't allow too many connections\n    */\n\n    if (!(thd= new THD))\n    {\n      (void) mysql_socket_shutdown(new_sock, SHUT_RDWR);\n      (void) closesocket(new_sock);\n      continue;\n    }\n    if (!(vio_tmp=vio_new(new_sock,\n\t\t\t  sock == unix_sock ? VIO_TYPE_SOCKET :\n\t\t\t  VIO_TYPE_TCPIP,\n\t\t\t  sock == unix_sock ? VIO_LOCALHOST: 0)) ||\n\tmy_net_init(&thd->net,vio_tmp))\n    {\n      /*\n        Only delete the temporary vio if we didn't already attach it to the\n        NET object. The destructor in THD will delete any initialized net\n        structure.\n      */\n      if (vio_tmp && thd->net.vio != vio_tmp)\n        vio_delete(vio_tmp);\n      else\n      {\n\t(void) mysql_socket_shutdown(new_sock, SHUT_RDWR);\n\t(void) closesocket(new_sock);\n      }\n      delete thd;\n      continue;\n    }\n    if (sock == unix_sock)\n      thd->security_ctx->host=(char*) my_localhost;\n\n    if (sock == extra_ip_sock)\n    {\n      thd->extra_port= 1;\n      thd->scheduler= extra_thread_scheduler;\n    }\n    create_new_thread(thd);\n  }\n  DBUG_VOID_RETURN;\n}\n\n\n#ifdef _WIN32\npthread_handler_t handle_connections_sockets_thread(void *arg)\n{\n  my_thread_init();\n  handle_connections_sockets();\n  decrement_handler_count();\n  return 0;\n}\n\npthread_handler_t handle_connections_namedpipes(void *arg)\n{\n  HANDLE hConnectedPipe;\n  OVERLAPPED connectOverlapped= {0};\n  THD *thd;\n  my_thread_init();\n  DBUG_ENTER(\"handle_connections_namedpipes\");\n  connectOverlapped.hEvent= CreateEvent(NULL, TRUE, FALSE, NULL);\n  if (!connectOverlapped.hEvent)\n  {\n    sql_print_error(\"Can't create event, last error=%u\", GetLastError());\n    unireg_abort(1);\n  }\n  DBUG_PRINT(\"general\",(\"Waiting for named pipe connections.\"));\n  while (!abort_loop)\n  {\n    /* wait for named pipe connection */\n    BOOL fConnected= ConnectNamedPipe(hPipe, &connectOverlapped);\n    if (!fConnected && (GetLastError() == ERROR_IO_PENDING))\n    {\n        /*\n          ERROR_IO_PENDING says async IO has started but not yet finished.\n          GetOverlappedResult will wait for completion.\n        */\n        DWORD bytes;\n        fConnected= GetOverlappedResult(hPipe, &connectOverlapped,&bytes, TRUE);\n    }\n    if (abort_loop)\n      break;\n    if (!fConnected)\n      fConnected = GetLastError() == ERROR_PIPE_CONNECTED;\n    if (!fConnected)\n    {\n      CloseHandle(hPipe);\n      if ((hPipe= CreateNamedPipe(pipe_name,\n                                  PIPE_ACCESS_DUPLEX |\n                                  FILE_FLAG_OVERLAPPED,\n                                  PIPE_TYPE_BYTE |\n                                  PIPE_READMODE_BYTE |\n                                  PIPE_WAIT,\n                                  PIPE_UNLIMITED_INSTANCES,\n                                  (int) global_system_variables.\n                                  net_buffer_length,\n                                  (int) global_system_variables.\n                                  net_buffer_length,\n                                  NMPWAIT_USE_DEFAULT_WAIT,\n                                  &saPipeSecurity)) ==\n\t  INVALID_HANDLE_VALUE)\n      {\n\tsql_perror(\"Can't create new named pipe!\");\n\tbreak;\t\t\t\t\t// Abort\n      }\n    }\n    hConnectedPipe = hPipe;\n    /* create new pipe for new connection */\n    if ((hPipe = CreateNamedPipe(pipe_name,\n                 PIPE_ACCESS_DUPLEX |\n                 FILE_FLAG_OVERLAPPED,\n\t\t\t\t PIPE_TYPE_BYTE |\n\t\t\t\t PIPE_READMODE_BYTE |\n\t\t\t\t PIPE_WAIT,\n\t\t\t\t PIPE_UNLIMITED_INSTANCES,\n\t\t\t\t (int) global_system_variables.net_buffer_length,\n\t\t\t\t (int) global_system_variables.net_buffer_length,\n\t\t\t\t NMPWAIT_USE_DEFAULT_WAIT,\n\t\t\t\t &saPipeSecurity)) ==\n\tINVALID_HANDLE_VALUE)\n    {\n      sql_perror(\"Can't create new named pipe!\");\n      hPipe=hConnectedPipe;\n      continue;\t\t\t\t\t// We have to try again\n    }\n\n    if (!(thd = new THD))\n    {\n      DisconnectNamedPipe(hConnectedPipe);\n      CloseHandle(hConnectedPipe);\n      continue;\n    }\n    if (!(thd->net.vio= vio_new_win32pipe(hConnectedPipe)) ||\n\tmy_net_init(&thd->net, thd->net.vio))\n    {\n      close_connection(thd, ER_OUT_OF_RESOURCES);\n      delete thd;\n      continue;\n    }\n    /* Host is unknown */\n    thd->security_ctx->host= my_strdup(my_localhost, MYF(0));\n    create_new_thread(thd);\n  }\n  CloseHandle(connectOverlapped.hEvent);\n  DBUG_LEAVE;\n  decrement_handler_count();\n  return 0;\n}\n#endif /* _WIN32 */\n\n\n#ifdef HAVE_SMEM\n\n/**\n  Thread of shared memory's service.\n\n  @param arg                              Arguments of thread\n*/\npthread_handler_t handle_connections_shared_memory(void *arg)\n{\n  /* file-mapping object, use for create shared memory */\n  HANDLE handle_connect_file_map= 0;\n  char  *handle_connect_map= 0;                 // pointer on shared memory\n  HANDLE event_connect_answer= 0;\n  ulong smem_buffer_length= shared_memory_buffer_length + 4;\n  ulong connect_number= 1;\n  char *tmp= NULL;\n  char *suffix_pos;\n  char connect_number_char[22], *p;\n  const char *errmsg= 0;\n  SECURITY_ATTRIBUTES *sa_event= 0, *sa_mapping= 0;\n  my_thread_init();\n  DBUG_ENTER(\"handle_connections_shared_memorys\");\n  DBUG_PRINT(\"general\",(\"Waiting for allocated shared memory.\"));\n\n  /*\n     get enough space base-name + '_' + longest suffix we might ever send\n   */\n  if (!(tmp= (char *)my_malloc(strlen(shared_memory_base_name) + 32L, MYF(MY_FAE))))\n    goto error;\n\n  if (my_security_attr_create(&sa_event, &errmsg,\n                              GENERIC_ALL, SYNCHRONIZE | EVENT_MODIFY_STATE))\n    goto error;\n\n  if (my_security_attr_create(&sa_mapping, &errmsg,\n                             GENERIC_ALL, FILE_MAP_READ | FILE_MAP_WRITE))\n    goto error;\n\n  /*\n    The name of event and file-mapping events create agree next rule:\n      shared_memory_base_name+unique_part\n    Where:\n      shared_memory_base_name is unique value for each server\n      unique_part is unique value for each object (events and file-mapping)\n  */\n  suffix_pos= strxmov(tmp,shared_memory_base_name,\"_\",NullS);\n  strmov(suffix_pos, \"CONNECT_REQUEST\");\n  if ((smem_event_connect_request= CreateEvent(sa_event,\n                                               FALSE, FALSE, tmp)) == 0)\n  {\n    errmsg= \"Could not create request event\";\n    goto error;\n  }\n  strmov(suffix_pos, \"CONNECT_ANSWER\");\n  if ((event_connect_answer= CreateEvent(sa_event, FALSE, FALSE, tmp)) == 0)\n  {\n    errmsg=\"Could not create answer event\";\n    goto error;\n  }\n  strmov(suffix_pos, \"CONNECT_DATA\");\n  if ((handle_connect_file_map=\n       CreateFileMapping(INVALID_HANDLE_VALUE, sa_mapping,\n                         PAGE_READWRITE, 0, sizeof(connect_number), tmp)) == 0)\n  {\n    errmsg= \"Could not create file mapping\";\n    goto error;\n  }\n  if ((handle_connect_map= (char *)MapViewOfFile(handle_connect_file_map,\n\t\t\t\t\t\t  FILE_MAP_WRITE,0,0,\n\t\t\t\t\t\t  sizeof(DWORD))) == 0)\n  {\n    errmsg= \"Could not create shared memory service\";\n    goto error;\n  }\n\n  while (!abort_loop)\n  {\n    /* Wait a request from client */\n    WaitForSingleObject(smem_event_connect_request,INFINITE);\n\n    /*\n       it can be after shutdown command\n    */\n    if (abort_loop)\n      goto error;\n\n    HANDLE handle_client_file_map= 0;\n    char  *handle_client_map= 0;\n    HANDLE event_client_wrote= 0;\n    HANDLE event_client_read= 0;    // for transfer data server <-> client\n    HANDLE event_server_wrote= 0;\n    HANDLE event_server_read= 0;\n    HANDLE event_conn_closed= 0;\n    THD *thd= 0;\n\n    p= int10_to_str(connect_number, connect_number_char, 10);\n    /*\n      The name of event and file-mapping events create agree next rule:\n        shared_memory_base_name+unique_part+number_of_connection\n        Where:\n\t  shared_memory_base_name is uniquel value for each server\n\t  unique_part is unique value for each object (events and file-mapping)\n\t  number_of_connection is connection-number between server and client\n    */\n    suffix_pos= strxmov(tmp,shared_memory_base_name,\"_\",connect_number_char,\n\t\t\t \"_\",NullS);\n    strmov(suffix_pos, \"DATA\");\n    if ((handle_client_file_map=\n         CreateFileMapping(INVALID_HANDLE_VALUE, sa_mapping,\n                           PAGE_READWRITE, 0, smem_buffer_length, tmp)) == 0)\n    {\n      errmsg= \"Could not create file mapping\";\n      goto errorconn;\n    }\n    if ((handle_client_map= (char*)MapViewOfFile(handle_client_file_map,\n\t\t\t\t\t\t  FILE_MAP_WRITE,0,0,\n\t\t\t\t\t\t  smem_buffer_length)) == 0)\n    {\n      errmsg= \"Could not create memory map\";\n      goto errorconn;\n    }\n    strmov(suffix_pos, \"CLIENT_WROTE\");\n    if ((event_client_wrote= CreateEvent(sa_event, FALSE, FALSE, tmp)) == 0)\n    {\n      errmsg= \"Could not create client write event\";\n      goto errorconn;\n    }\n    strmov(suffix_pos, \"CLIENT_READ\");\n    if ((event_client_read= CreateEvent(sa_event, FALSE, FALSE, tmp)) == 0)\n    {\n      errmsg= \"Could not create client read event\";\n      goto errorconn;\n    }\n    strmov(suffix_pos, \"SERVER_READ\");\n    if ((event_server_read= CreateEvent(sa_event, FALSE, FALSE, tmp)) == 0)\n    {\n      errmsg= \"Could not create server read event\";\n      goto errorconn;\n    }\n    strmov(suffix_pos, \"SERVER_WROTE\");\n    if ((event_server_wrote= CreateEvent(sa_event,\n                                         FALSE, FALSE, tmp)) == 0)\n    {\n      errmsg= \"Could not create server write event\";\n      goto errorconn;\n    }\n    strmov(suffix_pos, \"CONNECTION_CLOSED\");\n    if ((event_conn_closed= CreateEvent(sa_event,\n                                        TRUE, FALSE, tmp)) == 0)\n    {\n      errmsg= \"Could not create closed connection event\";\n      goto errorconn;\n    }\n    if (abort_loop)\n      goto errorconn;\n    if (!(thd= new THD))\n      goto errorconn;\n    /* Send number of connection to client */\n    int4store(handle_connect_map, connect_number);\n    if (!SetEvent(event_connect_answer))\n    {\n      errmsg= \"Could not send answer event\";\n      goto errorconn;\n    }\n    /* Set event that client should receive data */\n    if (!SetEvent(event_client_read))\n    {\n      errmsg= \"Could not set client to read mode\";\n      goto errorconn;\n    }\n    if (!(thd->net.vio= vio_new_win32shared_memory(handle_client_file_map,\n                                                   handle_client_map,\n                                                   event_client_wrote,\n                                                   event_client_read,\n                                                   event_server_wrote,\n                                                   event_server_read,\n                                                   event_conn_closed)) ||\n                        my_net_init(&thd->net, thd->net.vio))\n    {\n      close_connection(thd, ER_OUT_OF_RESOURCES);\n      errmsg= 0;\n      goto errorconn;\n    }\n    thd->security_ctx->host= my_strdup(my_localhost, MYF(0)); /* Host is unknown */\n    create_new_thread(thd);\n    connect_number++;\n    continue;\n\nerrorconn:\n    /* Could not form connection;  Free used handlers/memort and retry */\n    if (errmsg)\n    {\n      char buff[180];\n      strxmov(buff, \"Can't create shared memory connection: \", errmsg, \".\",\n\t      NullS);\n      sql_perror(buff);\n    }\n    if (handle_client_file_map)\n      CloseHandle(handle_client_file_map);\n    if (handle_client_map)\n      UnmapViewOfFile(handle_client_map);\n    if (event_server_wrote)\n      CloseHandle(event_server_wrote);\n    if (event_server_read)\n      CloseHandle(event_server_read);\n    if (event_client_wrote)\n      CloseHandle(event_client_wrote);\n    if (event_client_read)\n      CloseHandle(event_client_read);\n    if (event_conn_closed)\n      CloseHandle(event_conn_closed);\n    delete thd;\n  }\n\n  /* End shared memory handling */\nerror:\n  if (tmp)\n    my_free(tmp);\n\n  if (errmsg)\n  {\n    char buff[180];\n    strxmov(buff, \"Can't create shared memory service: \", errmsg, \".\", NullS);\n    sql_perror(buff);\n  }\n  my_security_attr_free(sa_event);\n  my_security_attr_free(sa_mapping);\n  if (handle_connect_map)\tUnmapViewOfFile(handle_connect_map);\n  if (handle_connect_file_map)\tCloseHandle(handle_connect_file_map);\n  if (event_connect_answer)\tCloseHandle(event_connect_answer);\n  if (smem_event_connect_request) CloseHandle(smem_event_connect_request);\n  DBUG_LEAVE;\n  decrement_handler_count();\n  return 0;\n}\n#endif /* HAVE_SMEM */\n#endif /* EMBEDDED_LIBRARY */\n\n\n/****************************************************************************\n  Handle start options\n******************************************************************************/\n\n/**\n  System variables are automatically command-line options (few\n  exceptions are documented in sys_var.h), so don't need\n  to be listed here.\n*/\n\nstruct my_option my_long_options[]=\n{\n  {\"help\", '?', \"Display this help and exit.\", \n   &opt_help, &opt_help, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0,\n   0, 0},\n  {\"allow-suspicious-udfs\", 0,\n   \"Allows use of UDFs consisting of only one symbol xxx() \"\n   \"without corresponding xxx_init() or xxx_deinit(). That also means \"\n   \"that one can load any function from any library, for example exit() \"\n   \"from libc.so\",\n   &opt_allow_suspicious_udfs, &opt_allow_suspicious_udfs,\n   0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"ansi\", 'a', \"Use ANSI SQL syntax instead of MySQL syntax. This mode \"\n   \"will also set transaction isolation level 'serializable'.\", 0, 0, 0,\n   GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},\n  /*\n    Because Sys_var_bit does not support command-line options, we need to\n    explicitely add one for --autocommit\n  */\n  {\"autocommit\", 0, \"Set default value for autocommit (0 or 1)\",\n   &opt_autocommit, &opt_autocommit, 0,\n   GET_BOOL, OPT_ARG, 1, 0, 0, 0, 0, NULL},\n  {\"bind-address\", OPT_BIND_ADDRESS, \"IP address to bind to.\",\n   &my_bind_addr_str, &my_bind_addr_str, 0, GET_STR,\n   REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"binlog-do-db\", OPT_BINLOG_DO_DB,\n   \"Tells the master it should log updates for the specified database, \"\n   \"and exclude all others not explicitly mentioned.\",\n   0, 0, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"binlog-ignore-db\", OPT_BINLOG_IGNORE_DB,\n   \"Tells the master that updates to the given database should not be logged to the binary log.\",\n   0, 0, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"binlog-row-event-max-size\", 0,\n   \"The maximum size of a row-based binary log event in bytes. Rows will be \"\n   \"grouped into events smaller than this size if possible. \"\n   \"The value has to be a multiple of 256.\",\n   &opt_binlog_rows_event_max_size, &opt_binlog_rows_event_max_size,\n   0, GET_ULONG, REQUIRED_ARG,\n   /* def_value */ 1024, /* min_value */  256, /* max_value */ ULONG_MAX, \n   /* sub_size */     0, /* block_size */ 256, \n   /* app_type */ 0\n  },\n#ifndef DISABLE_GRANT_OPTIONS\n  {\"bootstrap\", OPT_BOOTSTRAP, \"Used by mysql installation scripts.\", 0, 0, 0,\n   GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},\n#endif\n  {\"character-set-client-handshake\", 0,\n   \"Don't ignore client side character set value sent during handshake.\",\n   &opt_character_set_client_handshake,\n   &opt_character_set_client_handshake,\n    0, GET_BOOL, NO_ARG, 1, 0, 0, 0, 0, 0},\n  {\"character-set-filesystem\", 0,\n   \"Set the filesystem character set.\",\n   &character_set_filesystem_name,\n   &character_set_filesystem_name,\n   0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0 },\n  {\"character-set-server\", 'C', \"Set the default character set.\",\n   &default_character_set_name, &default_character_set_name,\n   0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0 },\n  {\"chroot\", 'r', \"Chroot mysqld daemon during startup.\",\n   &mysqld_chroot, &mysqld_chroot, 0, GET_STR, REQUIRED_ARG,\n   0, 0, 0, 0, 0, 0},\n  {\"collation-server\", 0, \"Set the default collation.\",\n   &default_collation_name, &default_collation_name,\n   0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0 },\n  {\"console\", OPT_CONSOLE, \"Write error output on screen; don't remove the console window on windows.\",\n   &opt_console, &opt_console, 0, GET_BOOL, NO_ARG, 0, 0, 0,\n   0, 0, 0},\n  {\"core-file\", OPT_WANT_CORE, \"Write core on errors.\", 0, 0, 0, GET_NO_ARG,\n   NO_ARG, 0, 0, 0, 0, 0, 0},\n  /* default-storage-engine should have \"MyISAM\" as def_value. Instead\n     of initializing it here it is done in init_common_variables() due\n     to a compiler bug in Sun Studio compiler. */\n#ifdef DBUG_OFF\n  {\"debug\", '#', \"Built in DBUG debugger. Disabled in this build.\",\n   &current_dbug_option, &current_dbug_option, 0, GET_STR, OPT_ARG,\n   0, 0, 0, 0, 0, 0},\n#endif\n#ifdef HAVE_REPLICATION\n  {\"debug-abort-slave-event-count\", 0,\n   \"Option used by mysql-test for debugging and testing of replication.\",\n   &abort_slave_event_count,  &abort_slave_event_count,\n   0, GET_INT, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n#endif /* HAVE_REPLICATION */\n#ifndef DBUG_OFF\n  {\"debug-assert-on-error\", 0,\n   \"Do an assert in various functions if we get a fatal error\",\n   &my_assert_on_error, &my_assert_on_error,\n   0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"debug-assert-if-crashed-table\", 0,\n   \"Do an assert in handler::print_error() if we get a crashed table\",\n   &debug_assert_if_crashed_table, &debug_assert_if_crashed_table,\n   0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n#endif\n#ifdef HAVE_REPLICATION\n  {\"debug-disconnect-slave-event-count\", 0,\n   \"Option used by mysql-test for debugging and testing of replication.\",\n   &disconnect_slave_event_count, &disconnect_slave_event_count,\n   0, GET_INT, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n#endif /* HAVE_REPLICATION */\n  {\"debug-exit-info\", 'T', \"Used for debugging. Use at your own risk.\",\n   0, 0, 0, GET_LONG, OPT_ARG, 0, 0, 0, 0, 0, 0},\n  {\"debug-gdb\", 0,\n   \"Set up signals usable for debugging.\",\n   &opt_debugging, &opt_debugging,\n   0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n#ifdef HAVE_REPLICATION\n  {\"debug-max-binlog-dump-events\", 0,\n   \"Option used by mysql-test for debugging and testing of replication.\",\n   &max_binlog_dump_events, &max_binlog_dump_events, 0,\n   GET_INT, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n#endif /* HAVE_REPLICATION */\n#ifdef SAFE_MUTEX\n  {\"debug-mutex-deadlock-detector\", 0,\n   \"Enable checking of wrong mutex usage.\",\n   &safe_mutex_deadlock_detector,\n   &safe_mutex_deadlock_detector,\n   0, GET_BOOL, NO_ARG, 1, 0, 0, 0, 0, 0},\n#endif\n  {\"debug-no-sync\", 0,\n   \"Disables system sync calls. Only for running tests or debugging!\",\n   &my_disable_sync, &my_disable_sync, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n#ifdef HAVE_REPLICATION\n  {\"debug-sporadic-binlog-dump-fail\", 0,\n   \"Option used by mysql-test for debugging and testing of replication.\",\n   &opt_sporadic_binlog_dump_fail,\n   &opt_sporadic_binlog_dump_fail, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0,\n   0},\n#endif /* HAVE_REPLICATION */\n  {\"default-storage-engine\", 0, \"The default storage engine for new tables\",\n   &default_storage_engine, 0, 0, GET_STR, REQUIRED_ARG,\n   0, 0, 0, 0, 0, 0 },\n  {\"default-time-zone\", 0, \"Set the default time zone.\",\n   &default_tz_name, &default_tz_name,\n   0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0 },\n#if defined(ENABLED_DEBUG_SYNC)\n  {\"debug-sync-timeout\", OPT_DEBUG_SYNC_TIMEOUT,\n   \"Enable the debug sync facility \"\n   \"and optionally specify a default wait timeout in seconds. \"\n   \"A zero value keeps the facility disabled.\",\n   &opt_debug_sync_timeout, 0,\n   0, GET_UINT, OPT_ARG, 0, 0, UINT_MAX, 0, 0, 0},\n#endif /* defined(ENABLED_DEBUG_SYNC) */\n#ifdef HAVE_OPENSSL\n  {\"des-key-file\", 0,\n   \"Load keys for des_encrypt() and des_encrypt from given file.\",\n   &des_key_file, &des_key_file, 0, GET_STR, REQUIRED_ARG,\n   0, 0, 0, 0, 0, 0},\n#endif /* HAVE_OPENSSL */\n#ifdef HAVE_STACKTRACE\n  {\"stack-trace\", 0 , \"Print a symbolic stack trace on failure\",\n   &opt_stack_trace, &opt_stack_trace, 0, GET_BOOL, NO_ARG, 1, 0, 0, 0, 0, 0},\n#endif /* HAVE_STACKTRACE */\n  {\"external-locking\", 0, \"Use system (external) locking (disabled by \"\n   \"default).  With this option enabled you can run myisamchk to test \"\n   \"(not repair) tables while the MySQL server is running. Disable with \"\n   \"--skip-external-locking.\", &opt_external_locking, &opt_external_locking,\n   0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  /* We must always support the next option to make scripts like mysqltest\n     easier to do */\n  {\"gdb\", 0,\n   \"Set up signals usable for debugging. Deprecated, use --debug-gdb instead.\",\n   &opt_debugging, &opt_debugging,\n   0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n#ifdef HAVE_LARGE_PAGE_OPTION\n  {\"super-large-pages\", 0, \"Enable support for super large pages.\",\n   &opt_super_large_pages, &opt_super_large_pages, 0,\n   GET_BOOL, OPT_ARG, 0, 0, 1, 0, 1, 0},\n#endif\n  {\"language\", 'L',\n   \"Client error messages in given language. May be given as a full path. \"\n   \"Deprecated. Use --lc-messages-dir instead.\",\n   0, 0, 0,\n   GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"lc-messages\", 0,\n   \"Set the language used for the error messages.\",\n   &lc_messages, &lc_messages, 0, GET_STR, REQUIRED_ARG,\n   0, 0, 0, 0, 0, 0 },\n  {\"lc-time-names\", 0,\n   \"Set the language used for the month names and the days of the week.\",\n   &lc_time_names_name, &lc_time_names_name,\n   0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0 },\n  {\"log\", 'l', \"Log connections and queries to file (deprecated option, use \"\n   \"--general-log/--general-log-file instead).\", &opt_logname, &opt_logname,\n   0, GET_STR_ALLOC, OPT_ARG, 0, 0, 0, 0, 0, 0},\n  {\"log-basename\", OPT_LOG_BASENAME,\n   \"Basename for all log files and the .pid file. This sets all log file \"\n   \"names at once (in 'datadir') and is normally the only option you need \"\n   \"for specifying log files. Sets names for --log-bin, --log-bin-index, \"\n   \"--relay-log, --relay-log-index, --general-log-file, \"\n   \"--log-slow-query-log-file, --log-error-file, and --pid-file\",\n   &opt_log_basename, &opt_log_basename, 0, GET_STR, REQUIRED_ARG,\n   0, 0, 0, 0, 0, 0},\n  {\"log-bin\", OPT_BIN_LOG,\n   \"Log update queries in binary format. Optional argument should be name for \"\n   \"binary log. If not given \"\n   \"'datadir'/'log-basename'-bin or 'datadir'/mysql-bin will be used (the later if \"\n   \"--log-basename is not specified). We strongly recommend to use either \"\n   \"--log-basename or specify a filename to ensure that replication doesn't \"\n   \"stop if the real hostname of the computer changes.\",\n   &opt_bin_logname, &opt_bin_logname, 0, GET_STR,\n   OPT_ARG, 0, 0, 0, 0, 0, 0},\n  {\"log-bin-index\", 0,\n   \"File that holds the names for last binary log files.\",\n   &opt_binlog_index_name, &opt_binlog_index_name, 0, GET_STR,\n   REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"log-isam\", OPT_ISAM_LOG, \"Log all MyISAM changes to file.\",\n   &myisam_log_filename, &myisam_log_filename, 0, GET_STR,\n   OPT_ARG, 0, 0, 0, 0, 0, 0},\n  {\"log-short-format\", 0,\n   \"Don't log extra information to update and slow-query logs.\",\n   &opt_short_log_format, &opt_short_log_format,\n   0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"log-slow-admin-statements\", 0,\n   \"Log slow OPTIMIZE, ANALYZE, ALTER and other administrative statements to \"\n   \"the slow log if it is open.\", &opt_log_slow_admin_statements,\n   &opt_log_slow_admin_statements, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n {\"log-slow-slave-statements\", 0,\n  \"Log slow statements executed by slave thread to the slow log if it is open.\",\n  &opt_log_slow_slave_statements, &opt_log_slow_slave_statements,\n  0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"log-slow-queries\", OPT_SLOW_QUERY_LOG,\n   \"Enable logging of slow queries (longer than --long-query-time) to log file \"\n   \"or table. Optional argument is a file name for the slow log. If not given, \"\n   \"'log-basename'-slow.log will be used. Use --log-output=TABLE if you want \"\n   \"to have the log in the table mysql.slow_log. \"\n   \"Deprecated option, use --slow-query-log/--slow-query-log-file instead.\",\n   &opt_slow_logname, &opt_slow_logname, 0, GET_STR_ALLOC, OPT_ARG,\n   0, 0, 0, 0, 0, 0},\n  {\"log-tc\", 0,\n   \"Path to transaction coordinator log (used for transactions that affect \"\n   \"more than one storage engine, when binary log is disabled).\",\n   &opt_tc_log_file, &opt_tc_log_file, 0, GET_STR,\n   REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n#ifdef HAVE_MMAP\n  {\"log-tc-size\", 0, \"Size of transaction coordinator log.\",\n   &opt_tc_log_size, &opt_tc_log_size, 0, GET_ULONG,\n   REQUIRED_ARG, TC_LOG_MIN_SIZE, TC_LOG_MIN_SIZE, (ulonglong) ULONG_MAX, 0,\n   TC_LOG_PAGE_SIZE, 0},\n#endif\n  {\"master-info-file\", 0,\n   \"The location and name of the file that remembers the master and where \"\n   \"the I/O replication thread is in the master's binlogs. Defaults to \"\n   \"master.info\",\n   &master_info_file, &master_info_file, 0, GET_STR,\n   REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"master-retry-count\", 0,\n   \"The number of tries the slave will make to connect to the master before giving up.\",\n   &master_retry_count, &master_retry_count, 0, GET_ULONG,\n   REQUIRED_ARG, 3600*24, 0, 0, 0, 0, 0},\n#ifdef HAVE_REPLICATION\n  {\"init-rpl-role\", 0, \"Set the replication role.\",\n   &rpl_status, &rpl_status, &rpl_role_typelib,\n   GET_ENUM, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n#endif /* HAVE_REPLICATION */\n  {\"memlock\", 0, \"Lock mysqld in memory.\", &locked_in_memory,\n   &locked_in_memory, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"one-thread\", OPT_ONE_THREAD,\n   \"(Deprecated): Only use one thread (for debugging under Linux). Use \"\n   \"thread-handling=no-threads instead.\",\n   0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"old-style-user-limits\", 0,\n   \"Enable old-style user limits (before 5.0.3, user resources were counted \"\n   \"per each user+host vs. per account).\",\n   &opt_old_style_user_limits, &opt_old_style_user_limits,\n   0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"port-open-timeout\", 0,\n   \"Maximum time in seconds to wait for the port to become free. \"\n   \"(Default: No wait).\", &mysqld_port_timeout, &mysqld_port_timeout, 0,\n   GET_UINT, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"replicate-do-db\", OPT_REPLICATE_DO_DB,\n   \"Tells the slave thread to restrict replication to the specified database. \"\n   \"To specify more than one database, use the directive multiple times, \"\n   \"once for each database. Note that this will only work if you do not use \"\n   \"cross-database queries such as UPDATE some_db.some_table SET foo='bar' \"\n   \"while having selected a different or no database. If you need cross \"\n   \"database updates to work, make sure you have 3.23.28 or later, and use \"\n   \"replicate-wild-do-table=db_name.%.\",\n   0, 0, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"replicate-do-table\", OPT_REPLICATE_DO_TABLE,\n   \"Tells the slave thread to restrict replication to the specified table. \"\n   \"To specify more than one table, use the directive multiple times, once \"\n   \"for each table. This will work for cross-database updates, in contrast \"\n   \"to replicate-do-db.\", 0, 0, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"replicate-ignore-db\", OPT_REPLICATE_IGNORE_DB,\n   \"Tells the slave thread to not replicate to the specified database. To \"\n   \"specify more than one database to ignore, use the directive multiple \"\n   \"times, once for each database. This option will not work if you use \"\n   \"cross database updates. If you need cross database updates to work, \"\n   \"make sure you have 3.23.28 or later, and use replicate-wild-ignore-\"\n   \"table=db_name.%. \", 0, 0, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"replicate-ignore-table\", OPT_REPLICATE_IGNORE_TABLE,\n   \"Tells the slave thread to not replicate to the specified table. To specify \"\n   \"more than one table to ignore, use the directive multiple times, once for \"\n   \"each table. This will work for cross-database updates, in contrast to \"\n   \"replicate-ignore-db.\", 0, 0, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"replicate-rewrite-db\", OPT_REPLICATE_REWRITE_DB,\n   \"Updates to a database with a different name than the original. Example: \"\n   \"replicate-rewrite-db=master_db_name->slave_db_name.\",\n   0, 0, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n#ifdef HAVE_REPLICATION\n  {\"replicate-same-server-id\", 0,\n   \"In replication, if set to 1, do not skip events having our server id. \"\n   \"Default value is 0 (to break infinite loops in circular replication). \"\n   \"Can't be set to 1 if --log-slave-updates is used.\",\n   &replicate_same_server_id, &replicate_same_server_id,\n   0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n#endif\n  {\"replicate-wild-do-table\", OPT_REPLICATE_WILD_DO_TABLE,\n   \"Tells the slave thread to restrict replication to the tables that match \"\n   \"the specified wildcard pattern. To specify more than one table, use the \"\n   \"directive multiple times, once for each table. This will work for cross-\"\n   \"database updates. Example: replicate-wild-do-table=foo%.bar% will \"\n   \"replicate only updates to tables in all databases that start with foo \"\n   \"and whose table names start with bar.\",\n   0, 0, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"replicate-wild-ignore-table\", OPT_REPLICATE_WILD_IGNORE_TABLE,\n   \"Tells the slave thread to not replicate to the tables that match the \"\n   \"given wildcard pattern. To specify more than one table to ignore, use \"\n   \"the directive multiple times, once for each table. This will work for \"\n   \"cross-database updates. Example: replicate-wild-ignore-table=foo%.bar% \"\n   \"will not do updates to tables in databases that start with foo and whose \"\n   \"table names start with bar.\",\n   0, 0, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"safe-mode\", OPT_SAFE, \"Skip some optimize stages (for testing). Deprecated.\",\n   0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"safe-user-create\", 0,\n   \"Don't allow new user creation by the user who has no write privileges to the mysql.user table.\",\n   &opt_safe_user_create, &opt_safe_user_create, 0, GET_BOOL,\n   NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"show-slave-auth-info\", 0,\n   \"Show user and password in SHOW SLAVE HOSTS on this master.\",\n   &opt_show_slave_auth_info, &opt_show_slave_auth_info, 0,\n   GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"skip-bdb\", OPT_DEPRECATED_OPTION,\n   \"Deprecated option; Exist only for compatiblity with old my.cnf files\",\n   0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},\n#ifndef DISABLE_GRANT_OPTIONS\n  {\"skip-grant-tables\", 0,\n   \"Start without grant tables. This gives all users FULL ACCESS to all tables.\",\n   &opt_noacl, &opt_noacl, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0,\n   0},\n#endif\n  {\"skip-host-cache\", OPT_SKIP_HOST_CACHE, \"Don't cache host names.\", 0, 0, 0,\n   GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"skip-slave-start\", 0,\n   \"If set, slave is not autostarted.\", &opt_skip_slave_start,\n   &opt_skip_slave_start, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"skip-thread-priority\", OPT_SKIP_PRIOR,\n   \"Don't give threads different priorities. This option is deprecated \"\n   \"because it has no effect; the implied behavior is already the default.\",\n   0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0},\n#if defined(_WIN32) && !defined(EMBEDDED_LIBRARY)\n  {\"slow-start-timeout\", 0,\n   \"Maximum number of milliseconds that the service control manager should wait \"\n   \"before trying to kill the windows service during startup\"\n   \"(Default: 15000).\", &slow_start_timeout, &slow_start_timeout, 0,\n   GET_ULONG, REQUIRED_ARG, 15000, 0, 0, 0, 0, 0},\n#endif\n#ifdef HAVE_OPENSSL\n  {\"ssl\", 0,\n   \"Enable SSL for connection (automatically enabled with other flags).\",\n   &opt_use_ssl, &opt_use_ssl, 0, GET_BOOL, OPT_ARG, 0, 0, 0,\n   0, 0, 0},\n#endif\n#ifdef __WIN__\n  {\"standalone\", 0,\n  \"Dummy option to start as a standalone program (NT).\", 0, 0, 0, GET_NO_ARG,\n   NO_ARG, 0, 0, 0, 0, 0, 0},\n#endif\n  {\"symbolic-links\", 's', \"Enable symbolic link support.\",\n   &my_use_symdir, &my_use_symdir, 0, GET_BOOL, NO_ARG,\n   /*\n     The system call realpath() produces warnings under valgrind and\n     purify. These are not suppressed: instead we disable symlinks\n     option if compiled with valgrind support.\n     Also disable by default on Windows, due to high overhead for checking .sym \n     files.\n   */\n   IF_VALGRIND(0,IF_WIN(0,1)), 0, 0, 0, 0, 0},\n  {\"sysdate-is-now\", 0,\n   \"Non-default option to alias SYSDATE() to NOW() to make it safe-replicable. \"\n   \"Since 5.0, SYSDATE() returns a `dynamic' value different for different \"\n   \"invocations, even within the same statement.\",\n   &global_system_variables.sysdate_is_now,\n   0, 0, GET_BOOL, NO_ARG, 0, 0, 1, 0, 1, 0},\n  {\"tc-heuristic-recover\", 0,\n   \"Decision to use in heuristic recover process. Possible values are COMMIT \"\n   \"or ROLLBACK.\", &tc_heuristic_recover, &tc_heuristic_recover,\n   &tc_heuristic_recover_typelib, GET_ENUM, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"temp-pool\", 0,\n#if (ENABLE_TEMP_POOL)\n   \"Using this option will cause most temporary files created to use a small \"\n   \"set of names, rather than a unique name for each new file.\",\n#else\n   \"This option is ignored on this OS.\",\n#endif\n   &use_temp_pool, &use_temp_pool, 0, GET_BOOL, NO_ARG, 1,\n   0, 0, 0, 0, 0},\n  {\"transaction-isolation\", 0,\n   \"Default transaction isolation level.\",\n   &global_system_variables.tx_isolation,\n   &global_system_variables.tx_isolation, &tx_isolation_typelib,\n   GET_ENUM, REQUIRED_ARG, ISO_REPEATABLE_READ, 0, 0, 0, 0, 0},\n  {\"user\", 'u', \"Run mysqld daemon as user.\", 0, 0, 0, GET_STR, REQUIRED_ARG,\n   0, 0, 0, 0, 0, 0},\n  {\"verbose\", 'v', \"Used with --help option for detailed help.\",\n   &opt_verbose, &opt_verbose, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"version\", 'V', \"Output version information and exit.\", 0, 0, 0, GET_NO_ARG,\n   NO_ARG, 0, 0, 0, 0, 0, 0},\n  {\"plugin-load\", 0,\n   \"Semicolon-separated list of plugins to load, where each plugin is \"\n   \"specified as ether a plugin_name=library_file pair or only a library_file. \"\n   \"If the latter case, all plugins from a given library_file will be loaded.\",\n   &opt_plugin_load, &opt_plugin_load, 0,\n   GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0, 0},\n  {\"table_cache\", 0, \"Deprecated; use --table-open-cache instead.\",\n   &table_cache_size, &table_cache_size, 0, GET_ULONG,\n   REQUIRED_ARG, TABLE_OPEN_CACHE_DEFAULT, 1, 512*1024L, 0, 1, 0},\n  {0, 0, 0, 0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0}\n};\n\n\nstatic int show_queries(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONGLONG;\n  var->value= (char *)&thd->query_id;\n  return 0;\n}\n\n\nstatic int show_net_compression(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_MY_BOOL;\n  var->value= (char *)&thd->net.compress;\n  return 0;\n}\n\nstatic int show_starttime(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (long) (thd->query_start() - server_start_time);\n  return 0;\n}\n\n#ifdef ENABLED_PROFILING\nstatic int show_flushstatustime(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (long) (thd->query_start() - flush_status_time);\n  return 0;\n}\n#endif\n\n#ifdef HAVE_REPLICATION\nstatic int show_rpl_status(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_CHAR;\n  var->value= const_cast<char*>(rpl_status_type[(int)rpl_status]);\n  return 0;\n}\n\nstatic int show_slave_running(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_MY_BOOL;\n  var->value= buff;\n  *((my_bool *)buff)= (my_bool) (active_mi && \n                                 active_mi->slave_running == MYSQL_SLAVE_RUN_CONNECT &&\n                                 active_mi->rli.slave_running);\n  return 0;\n}\n\nstatic int show_slave_retried_trans(THD *thd, SHOW_VAR *var, char *buff)\n{\n  /*\n    TODO: with multimaster, have one such counter per line in\n    SHOW SLAVE STATUS, and have the sum over all lines here.\n  */\n  if (active_mi)\n  {\n    var->type= SHOW_LONG;\n    var->value= buff;\n    *((long *)buff)= (long)active_mi->rli.retried_trans;\n  }\n  else\n    var->type= SHOW_UNDEF;\n  return 0;\n}\n\nstatic int show_slave_received_heartbeats(THD *thd, SHOW_VAR *var, char *buff)\n{\n  if (active_mi)\n  {\n    var->type= SHOW_LONGLONG;\n    var->value= buff;\n    *((longlong *)buff)= active_mi->received_heartbeats;\n  }\n  else\n    var->type= SHOW_UNDEF;\n  return 0;\n}\n\nstatic int show_heartbeat_period(THD *thd, SHOW_VAR *var, char *buff)\n{\n  if (active_mi)\n  {\n    var->type= SHOW_CHAR;\n    var->value= buff;\n    sprintf(buff, \"%.3f\", active_mi->heartbeat_period);\n  }\n  else\n    var->type= SHOW_UNDEF;\n  return 0;\n}\n\n\n#endif /* HAVE_REPLICATION */\n\nstatic int show_open_tables(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (long)cached_open_tables();\n  return 0;\n}\n\nstatic int show_prepared_stmt_count(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  mysql_mutex_lock(&LOCK_prepared_stmt_count);\n  *((long *)buff)= (long)prepared_stmt_count;\n  mysql_mutex_unlock(&LOCK_prepared_stmt_count);\n  return 0;\n}\n\nstatic int show_table_definitions(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (long)cached_table_definitions();\n  return 0;\n}\n\n#if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)\n/* Functions relying on CTX */\nstatic int show_ssl_ctx_sess_accept(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_accept(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_accept_good(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_accept_good(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_connect_good(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_connect_good(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_accept_renegotiate(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_accept_renegotiate(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_connect_renegotiate(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_connect_renegotiate(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_cb_hits(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_cb_hits(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_hits(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_hits(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_cache_full(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_cache_full(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_misses(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_misses(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_timeouts(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_timeouts(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_number(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_number(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_connect(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_connect(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_sess_get_cache_size(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_sess_get_cache_size(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_get_verify_mode(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_get_verify_mode(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_get_verify_depth(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  *((long *)buff)= (!ssl_acceptor_fd ? 0 :\n                     SSL_CTX_get_verify_depth(ssl_acceptor_fd->ssl_context));\n  return 0;\n}\n\nstatic int show_ssl_ctx_get_session_cache_mode(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_CHAR;\n  if (!ssl_acceptor_fd)\n    var->value= const_cast<char*>(\"NONE\");\n  else\n    switch (SSL_CTX_get_session_cache_mode(ssl_acceptor_fd->ssl_context))\n    {\n    case SSL_SESS_CACHE_OFF:\n      var->value= const_cast<char*>(\"OFF\"); break;\n    case SSL_SESS_CACHE_CLIENT:\n      var->value= const_cast<char*>(\"CLIENT\"); break;\n    case SSL_SESS_CACHE_SERVER:\n      var->value= const_cast<char*>(\"SERVER\"); break;\n    case SSL_SESS_CACHE_BOTH:\n      var->value= const_cast<char*>(\"BOTH\"); break;\n    case SSL_SESS_CACHE_NO_AUTO_CLEAR:\n      var->value= const_cast<char*>(\"NO_AUTO_CLEAR\"); break;\n    case SSL_SESS_CACHE_NO_INTERNAL_LOOKUP:\n      var->value= const_cast<char*>(\"NO_INTERNAL_LOOKUP\"); break;\n    default:\n      var->value= const_cast<char*>(\"Unknown\"); break;\n    }\n  return 0;\n}\n\n/*\n   Functions relying on SSL\n   Note: In the show_ssl_* functions, we need to check if we have a\n         valid vio-object since this isn't always true, specifically\n         when session_status or global_status is requested from\n         inside an Event.\n */\nstatic int show_ssl_get_version(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_CHAR;\n  if( thd->vio_ok() && thd->net.vio->ssl_arg )\n    var->value= const_cast<char*>(SSL_get_version((SSL*) thd->net.vio->ssl_arg));\n  else\n    var->value= (char *)\"\";\n  return 0;\n}\n\nstatic int show_ssl_session_reused(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  if( thd->vio_ok() && thd->net.vio->ssl_arg )\n    *((long *)buff)= (long)SSL_session_reused((SSL*) thd->net.vio->ssl_arg);\n  else\n    *((long *)buff)= 0;\n  return 0;\n}\n\nstatic int show_ssl_get_default_timeout(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  if( thd->vio_ok() && thd->net.vio->ssl_arg )\n    *((long *)buff)= (long)SSL_get_default_timeout((SSL*)thd->net.vio->ssl_arg);\n  else\n    *((long *)buff)= 0;\n  return 0;\n}\n\nstatic int show_ssl_get_verify_mode(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  if( thd->net.vio && thd->net.vio->ssl_arg )\n    *((long *)buff)= (long)SSL_get_verify_mode((SSL*)thd->net.vio->ssl_arg);\n  else\n    *((long *)buff)= 0;\n  return 0;\n}\n\nstatic int show_ssl_get_verify_depth(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_LONG;\n  var->value= buff;\n  if( thd->vio_ok() && thd->net.vio->ssl_arg )\n    *((long *)buff)= (long)SSL_get_verify_depth((SSL*)thd->net.vio->ssl_arg);\n  else\n    *((long *)buff)= 0;\n  return 0;\n}\n\nstatic int show_ssl_get_cipher(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_CHAR;\n  if( thd->vio_ok() && thd->net.vio->ssl_arg )\n    var->value= const_cast<char*>(SSL_get_cipher((SSL*) thd->net.vio->ssl_arg));\n  else\n    var->value= (char *)\"\";\n  return 0;\n}\n\nstatic int show_ssl_get_cipher_list(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_CHAR;\n  var->value= buff;\n  if (thd->vio_ok() && thd->net.vio->ssl_arg)\n  {\n    int i;\n    const char *p;\n    char *end= buff + SHOW_VAR_FUNC_BUFF_SIZE;\n    for (i=0; (p= SSL_get_cipher_list((SSL*) thd->net.vio->ssl_arg,i)) &&\n               buff < end; i++)\n    {\n      buff= strnmov(buff, p, end-buff-1);\n      *buff++= ':';\n    }\n    if (i)\n      buff--;\n  }\n  *buff=0;\n  return 0;\n}\n\n#endif /* HAVE_OPENSSL && !EMBEDDED_LIBRARY */\n\nstatic int show_default_keycache(THD *thd, SHOW_VAR *var, char *buff)\n{\n  struct st_data {\n    KEY_CACHE_STATISTICS stats;\n    SHOW_VAR var[8];\n  } *data;\n  SHOW_VAR *v;\n\n  data=(st_data *)buff;\n  v= data->var;\n\n  var->type= SHOW_ARRAY;\n  var->value= (char*)v;\n\n  get_key_cache_statistics(dflt_key_cache, 0, &data->stats);\n\n#define set_one_keycache_var(X,Y)       \\\n  v->name= X;                           \\\n  v->type= SHOW_LONGLONG;               \\\n  v->value= (char*)&data->stats.Y;      \\\n  v++;\n\n  set_one_keycache_var(\"blocks_not_flushed\", blocks_changed);\n  set_one_keycache_var(\"blocks_unused\",      blocks_unused);\n  set_one_keycache_var(\"blocks_used\",        blocks_used);\n  set_one_keycache_var(\"blocks_warm\",        blocks_warm);\n  set_one_keycache_var(\"read_requests\",      read_requests);\n  set_one_keycache_var(\"reads\",              reads);\n  set_one_keycache_var(\"write_requests\",     write_requests);\n  set_one_keycache_var(\"writes\",             writes);\n\n  v->name= 0;\n\n  DBUG_ASSERT((char*)(v+1) <= buff + SHOW_VAR_FUNC_BUFF_SIZE);\n\n#undef set_one_keycache_var\n\n  return 0;\n}\n\n#ifdef HAVE_POOL_OF_THREADS\nint show_threadpool_idle_threads(THD *thd, SHOW_VAR *var, char *buff)\n{\n  var->type= SHOW_INT;\n  var->value= buff;\n  *(int *)buff= tp_get_idle_thread_count(); \n  return 0;\n}\n#endif\n\n/*\n  Variables shown by SHOW STATUS in alphabetical order\n*/\n\nSHOW_VAR status_vars[]= {\n  {\"Aborted_clients\",          (char*) &aborted_threads,        SHOW_LONG},\n  {\"Aborted_connects\",         (char*) &aborted_connects,       SHOW_LONG},\n  {\"Access_denied_errors\",     (char*) offsetof(STATUS_VAR, access_denied_errors), SHOW_LONG_STATUS},\n  {\"Binlog_bytes_written\",     (char*) offsetof(STATUS_VAR, binlog_bytes_written), SHOW_LONGLONG_STATUS},\n  {\"Binlog_cache_disk_use\",    (char*) &binlog_cache_disk_use,  SHOW_LONG},\n  {\"Binlog_cache_use\",         (char*) &binlog_cache_use,       SHOW_LONG},\n  {\"Binlog_stmt_cache_disk_use\",(char*) &binlog_stmt_cache_disk_use,  SHOW_LONG},\n  {\"Binlog_stmt_cache_use\",    (char*) &binlog_stmt_cache_use,       SHOW_LONG},\n  {\"Busy_time\",                (char*) offsetof(STATUS_VAR, busy_time), SHOW_DOUBLE_STATUS},\n  {\"Bytes_received\",           (char*) offsetof(STATUS_VAR, bytes_received), SHOW_LONGLONG_STATUS},\n  {\"Bytes_sent\",               (char*) offsetof(STATUS_VAR, bytes_sent), SHOW_LONGLONG_STATUS},\n  {\"Com\",                      (char*) com_status_vars, SHOW_ARRAY},\n  {\"Compression\",              (char*) &show_net_compression, SHOW_FUNC},\n  {\"Connections\",              (char*) &thread_id,              SHOW_LONG_NOFLUSH},\n  {\"Cpu_time\",                 (char*) offsetof(STATUS_VAR, cpu_time), SHOW_DOUBLE_STATUS},\n  {\"Created_tmp_disk_tables\",  (char*) offsetof(STATUS_VAR, created_tmp_disk_tables), SHOW_LONG_STATUS},\n  {\"Created_tmp_files\",\t       (char*) &my_tmp_file_created,\tSHOW_LONG},\n  {\"Created_tmp_tables\",       (char*) offsetof(STATUS_VAR, created_tmp_tables), SHOW_LONG_STATUS},\n  {\"Delayed_errors\",           (char*) &delayed_insert_errors,  SHOW_LONG},\n  {\"Delayed_insert_threads\",   (char*) &delayed_insert_threads, SHOW_LONG_NOFLUSH},\n  {\"Delayed_writes\",           (char*) &delayed_insert_writes,  SHOW_LONG},\n  {\"Empty_queries\",            (char*) offsetof(STATUS_VAR, empty_queries), SHOW_LONG_STATUS},\n  {\"Executed_events\",          (char*) &executed_events, SHOW_LONG_NOFLUSH },\n  {\"Executed_triggers\",        (char*) offsetof(STATUS_VAR, executed_triggers), SHOW_LONG_STATUS},\n  {\"Feature_dynamic_columns\",  (char*) offsetof(STATUS_VAR, feature_dynamic_columns), SHOW_LONG_STATUS},\n  {\"Feature_fulltext\",         (char*) offsetof(STATUS_VAR, feature_fulltext), SHOW_LONG_STATUS},\n  {\"Feature_gis\",              (char*) offsetof(STATUS_VAR, feature_gis), SHOW_LONG_STATUS},\n  {\"Feature_locale\",           (char*) offsetof(STATUS_VAR, feature_locale), SHOW_LONG_STATUS},\n  {\"Feature_subquery\",         (char*) offsetof(STATUS_VAR, feature_subquery), SHOW_LONG_STATUS},\n  {\"Feature_timezone\",         (char*) offsetof(STATUS_VAR, feature_timezone), SHOW_LONG_STATUS},\n  {\"Feature_trigger\",         (char*) offsetof(STATUS_VAR, feature_trigger), SHOW_LONG_STATUS},\n  {\"Feature_xml\",             (char*) offsetof(STATUS_VAR, feature_xml), SHOW_LONG_STATUS},\n  {\"Flush_commands\",           (char*) &refresh_version,        SHOW_LONG_NOFLUSH},\n  {\"Handler_commit\",           (char*) offsetof(STATUS_VAR, ha_commit_count), SHOW_LONG_STATUS},\n  {\"Handler_delete\",           (char*) offsetof(STATUS_VAR, ha_delete_count), SHOW_LONG_STATUS},\n  {\"Handler_discover\",         (char*) offsetof(STATUS_VAR, ha_discover_count), SHOW_LONG_STATUS},\n  {\"Handler_icp_attempts\",     (char*) offsetof(STATUS_VAR, ha_icp_attempts), SHOW_LONG_STATUS},\n  {\"Handler_icp_match\",        (char*) offsetof(STATUS_VAR, ha_icp_match), SHOW_LONG_STATUS},\n  {\"Handler_mrr_init\",         (char*) offsetof(STATUS_VAR, ha_mrr_init_count),  SHOW_LONG_STATUS},\n  {\"Handler_mrr_key_refills\",   (char*) offsetof(STATUS_VAR, ha_mrr_key_refills_count), SHOW_LONG_STATUS},\n  {\"Handler_mrr_rowid_refills\", (char*) offsetof(STATUS_VAR, ha_mrr_rowid_refills_count), SHOW_LONG_STATUS},\n  {\"Handler_prepare\",          (char*) offsetof(STATUS_VAR, ha_prepare_count),  SHOW_LONG_STATUS},\n  {\"Handler_read_first\",       (char*) offsetof(STATUS_VAR, ha_read_first_count), SHOW_LONG_STATUS},\n  {\"Handler_read_key\",         (char*) offsetof(STATUS_VAR, ha_read_key_count), SHOW_LONG_STATUS},\n  {\"Handler_read_last\",        (char*) offsetof(STATUS_VAR, ha_read_last_count), SHOW_LONG_STATUS},\n  {\"Handler_read_next\",        (char*) offsetof(STATUS_VAR, ha_read_next_count), SHOW_LONG_STATUS},\n  {\"Handler_read_prev\",        (char*) offsetof(STATUS_VAR, ha_read_prev_count), SHOW_LONG_STATUS},\n  {\"Handler_read_rnd\",         (char*) offsetof(STATUS_VAR, ha_read_rnd_count), SHOW_LONG_STATUS},\n  {\"Handler_read_rnd_deleted\", (char*) offsetof(STATUS_VAR, ha_read_rnd_deleted_count), SHOW_LONG_STATUS},\n  {\"Handler_read_rnd_next\",    (char*) offsetof(STATUS_VAR, ha_read_rnd_next_count), SHOW_LONG_STATUS},\n  {\"Handler_rollback\",         (char*) offsetof(STATUS_VAR, ha_rollback_count), SHOW_LONG_STATUS},\n  {\"Handler_savepoint\",        (char*) offsetof(STATUS_VAR, ha_savepoint_count), SHOW_LONG_STATUS},\n  {\"Handler_savepoint_rollback\",(char*) offsetof(STATUS_VAR, ha_savepoint_rollback_count), SHOW_LONG_STATUS},\n  {\"Handler_tmp_update\",       (char*) offsetof(STATUS_VAR, ha_tmp_update_count), SHOW_LONG_STATUS},\n  {\"Handler_tmp_write\",        (char*) offsetof(STATUS_VAR, ha_tmp_write_count), SHOW_LONG_STATUS},\n  {\"Handler_update\",           (char*) offsetof(STATUS_VAR, ha_update_count), SHOW_LONG_STATUS},\n  {\"Handler_write\",            (char*) offsetof(STATUS_VAR, ha_write_count), SHOW_LONG_STATUS},\n  {\"Key\",                      (char*) &show_default_keycache, SHOW_FUNC},\n  {\"Last_query_cost\",          (char*) offsetof(STATUS_VAR, last_query_cost), SHOW_DOUBLE_STATUS},\n  {\"Max_used_connections\",     (char*) &max_used_connections,  SHOW_LONG},\n  {\"Not_flushed_delayed_rows\", (char*) &delayed_rows_in_use,    SHOW_LONG_NOFLUSH},\n  {\"Open_files\",               (char*) &my_file_opened,         SHOW_LONG_NOFLUSH},\n  {\"Open_streams\",             (char*) &my_stream_opened,       SHOW_LONG_NOFLUSH},\n  {\"Open_table_definitions\",   (char*) &show_table_definitions, SHOW_FUNC},\n  {\"Open_tables\",              (char*) &show_open_tables,       SHOW_FUNC},\n  {\"Opened_files\",             (char*) &my_file_total_opened, SHOW_LONG_NOFLUSH},\n  {\"Opened_table_definitions\", (char*) offsetof(STATUS_VAR, opened_shares), SHOW_LONG_STATUS},\n  {\"Opened_tables\",            (char*) offsetof(STATUS_VAR, opened_tables), SHOW_LONG_STATUS},\n  {\"Opened_views\",            (char*) offsetof(STATUS_VAR, opened_views), SHOW_LONG_STATUS},\n  {\"Prepared_stmt_count\",      (char*) &show_prepared_stmt_count, SHOW_FUNC},\n  {\"Rows_read\",                (char*) offsetof(STATUS_VAR, rows_read), SHOW_LONGLONG_STATUS},\n  {\"Rows_sent\",                (char*) offsetof(STATUS_VAR, rows_sent), SHOW_LONGLONG_STATUS},\n  {\"Rows_tmp_read\",            (char*) offsetof(STATUS_VAR, rows_tmp_read), SHOW_LONGLONG_STATUS},\n#ifdef HAVE_QUERY_CACHE\n  {\"Qcache_free_blocks\",       (char*) &query_cache.free_memory_blocks, SHOW_LONG_NOFLUSH},\n  {\"Qcache_free_memory\",       (char*) &query_cache.free_memory, SHOW_LONG_NOFLUSH},\n  {\"Qcache_hits\",              (char*) &query_cache.hits,       SHOW_LONG},\n  {\"Qcache_inserts\",           (char*) &query_cache.inserts,    SHOW_LONG},\n  {\"Qcache_lowmem_prunes\",     (char*) &query_cache.lowmem_prunes, SHOW_LONG},\n  {\"Qcache_not_cached\",        (char*) &query_cache.refused,    SHOW_LONG},\n  {\"Qcache_queries_in_cache\",  (char*) &query_cache.queries_in_cache, SHOW_LONG_NOFLUSH},\n  {\"Qcache_total_blocks\",      (char*) &query_cache.total_blocks, SHOW_LONG_NOFLUSH},\n#endif /*HAVE_QUERY_CACHE*/\n  {\"Queries\",                  (char*) &show_queries,            SHOW_FUNC},\n  {\"Questions\",                (char*) offsetof(STATUS_VAR, questions), SHOW_LONG_STATUS},\n#ifdef HAVE_REPLICATION\n  {\"Rpl_status\",               (char*) &show_rpl_status,          SHOW_FUNC},\n#endif\n  {\"Select_full_join\",         (char*) offsetof(STATUS_VAR, select_full_join_count), SHOW_LONG_STATUS},\n  {\"Select_full_range_join\",   (char*) offsetof(STATUS_VAR, select_full_range_join_count), SHOW_LONG_STATUS},\n  {\"Select_range\",             (char*) offsetof(STATUS_VAR, select_range_count), SHOW_LONG_STATUS},\n  {\"Select_range_check\",       (char*) offsetof(STATUS_VAR, select_range_check_count), SHOW_LONG_STATUS},\n  {\"Select_scan\",\t       (char*) offsetof(STATUS_VAR, select_scan_count), SHOW_LONG_STATUS},\n  {\"Slave_open_temp_tables\",   (char*) &slave_open_temp_tables, SHOW_LONG},\n#ifdef HAVE_REPLICATION\n  {\"Slave_heartbeat_period\",   (char*) &show_heartbeat_period, SHOW_FUNC},\n  {\"Slave_received_heartbeats\",(char*) &show_slave_received_heartbeats, SHOW_FUNC},\n  {\"Slave_retried_transactions\",(char*) &show_slave_retried_trans, SHOW_FUNC},\n  {\"Slave_running\",            (char*) &show_slave_running,     SHOW_FUNC},\n#endif\n  {\"Slow_launch_threads\",      (char*) &slow_launch_threads,    SHOW_LONG},\n  {\"Slow_queries\",             (char*) offsetof(STATUS_VAR, long_query_count), SHOW_LONG_STATUS},\n  {\"Sort_merge_passes\",\t       (char*) offsetof(STATUS_VAR, filesort_merge_passes), SHOW_LONG_STATUS},\n  {\"Sort_range\",\t       (char*) offsetof(STATUS_VAR, filesort_range_count), SHOW_LONG_STATUS},\n  {\"Sort_rows\",\t\t       (char*) offsetof(STATUS_VAR, filesort_rows), SHOW_LONG_STATUS},\n  {\"Sort_scan\",\t\t       (char*) offsetof(STATUS_VAR, filesort_scan_count), SHOW_LONG_STATUS},\n#ifdef HAVE_OPENSSL\n#ifndef EMBEDDED_LIBRARY\n  {\"Ssl_accept_renegotiates\",  (char*) &show_ssl_ctx_sess_accept_renegotiate, SHOW_FUNC},\n  {\"Ssl_accepts\",              (char*) &show_ssl_ctx_sess_accept, SHOW_FUNC},\n  {\"Ssl_callback_cache_hits\",  (char*) &show_ssl_ctx_sess_cb_hits, SHOW_FUNC},\n  {\"Ssl_cipher\",               (char*) &show_ssl_get_cipher, SHOW_FUNC},\n  {\"Ssl_cipher_list\",          (char*) &show_ssl_get_cipher_list, SHOW_FUNC},\n  {\"Ssl_client_connects\",      (char*) &show_ssl_ctx_sess_connect, SHOW_FUNC},\n  {\"Ssl_connect_renegotiates\", (char*) &show_ssl_ctx_sess_connect_renegotiate, SHOW_FUNC},\n  {\"Ssl_ctx_verify_depth\",     (char*) &show_ssl_ctx_get_verify_depth, SHOW_FUNC},\n  {\"Ssl_ctx_verify_mode\",      (char*) &show_ssl_ctx_get_verify_mode, SHOW_FUNC},\n  {\"Ssl_default_timeout\",      (char*) &show_ssl_get_default_timeout, SHOW_FUNC},\n  {\"Ssl_finished_accepts\",     (char*) &show_ssl_ctx_sess_accept_good, SHOW_FUNC},\n  {\"Ssl_finished_connects\",    (char*) &show_ssl_ctx_sess_connect_good, SHOW_FUNC},\n  {\"Ssl_session_cache_hits\",   (char*) &show_ssl_ctx_sess_hits, SHOW_FUNC},\n  {\"Ssl_session_cache_misses\", (char*) &show_ssl_ctx_sess_misses, SHOW_FUNC},\n  {\"Ssl_session_cache_mode\",   (char*) &show_ssl_ctx_get_session_cache_mode, SHOW_FUNC},\n  {\"Ssl_session_cache_overflows\", (char*) &show_ssl_ctx_sess_cache_full, SHOW_FUNC},\n  {\"Ssl_session_cache_size\",   (char*) &show_ssl_ctx_sess_get_cache_size, SHOW_FUNC},\n  {\"Ssl_session_cache_timeouts\", (char*) &show_ssl_ctx_sess_timeouts, SHOW_FUNC},\n  {\"Ssl_sessions_reused\",      (char*) &show_ssl_session_reused, SHOW_FUNC},\n  {\"Ssl_used_session_cache_entries\",(char*) &show_ssl_ctx_sess_number, SHOW_FUNC},\n  {\"Ssl_verify_depth\",         (char*) &show_ssl_get_verify_depth, SHOW_FUNC},\n  {\"Ssl_verify_mode\",          (char*) &show_ssl_get_verify_mode, SHOW_FUNC},\n  {\"Ssl_version\",              (char*) &show_ssl_get_version, SHOW_FUNC},\n#endif\n#endif /* HAVE_OPENSSL */\n  {\"Syncs\",                    (char*) &my_sync_count,          SHOW_LONG_NOFLUSH},\n  /*\n    Expression cache used only for caching subqueries now, so its statistic\n    variables we call subquery_cache*.\n  */\n  {\"Subquery_cache_hit\",       (char*) &subquery_cache_hit,     SHOW_LONG},\n  {\"Subquery_cache_miss\",      (char*) &subquery_cache_miss,    SHOW_LONG},\n  {\"Table_locks_immediate\",    (char*) &locks_immediate,        SHOW_LONG},\n  {\"Table_locks_waited\",       (char*) &locks_waited,           SHOW_LONG},\n#ifdef HAVE_MMAP\n  {\"Tc_log_max_pages_used\",    (char*) &tc_log_max_pages_used,  SHOW_LONG},\n  {\"Tc_log_page_size\",         (char*) &tc_log_page_size,       SHOW_LONG_NOFLUSH},\n  {\"Tc_log_page_waits\",        (char*) &tc_log_page_waits,      SHOW_LONG},\n#endif\n#ifdef HAVE_POOL_OF_THREADS\n  {\"Threadpool_idle_threads\",  (char *) &show_threadpool_idle_threads, SHOW_FUNC},\n  {\"Threadpool_threads\",       (char *) &tp_stats.num_worker_threads, SHOW_INT},\n#endif\n  {\"Threads_cached\",           (char*) &cached_thread_count,    SHOW_LONG_NOFLUSH},\n  {\"Threads_connected\",        (char*) &connection_count,       SHOW_INT},\n  {\"Threads_created\",\t       (char*) &thread_created,\t\tSHOW_LONG_NOFLUSH},\n  {\"Threads_running\",          (char*) &thread_running,         SHOW_INT},\n  {\"Uptime\",                   (char*) &show_starttime,         SHOW_FUNC},\n#ifdef ENABLED_PROFILING\n  {\"Uptime_since_flush_status\",(char*) &show_flushstatustime,   SHOW_FUNC},\n#endif\n  {NullS, NullS, SHOW_LONG}\n};\n\nbool add_terminator(DYNAMIC_ARRAY *options)\n{\n  my_option empty_element= {0, 0, 0, 0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0};\n  return insert_dynamic(options, (uchar *)&empty_element);\n}\n\n#ifndef EMBEDDED_LIBRARY\nstatic void print_version(void)\n{\n  set_server_version();\n\n  printf(\"%s  Ver %s for %s on %s (%s)\\n\",my_progname,\n\t server_version,SYSTEM_TYPE,MACHINE_TYPE, MYSQL_COMPILATION_COMMENT);\n}\n\n/** Compares two options' names, treats - and _ the same */\nstatic int option_cmp(my_option *a, my_option *b)\n{\n  const char *sa= a->name;\n  const char *sb= b->name;\n  for (; *sa || *sb; sa++, sb++)\n  {\n    if (*sa < *sb)\n    {\n      if (*sa == '-' && *sb == '_')\n        continue;\n      else\n        return -1;\n    }\n    if (*sa > *sb)\n    {\n      if (*sa == '_' && *sb == '-')\n        continue;\n      else\n        return 1;\n    }\n  }\n  DBUG_ASSERT(a->name == b->name);\n  return 0;\n}\n\nstatic void print_help()\n{\n  MEM_ROOT mem_root;\n  init_alloc_root(&mem_root, 4096, 4096);\n\n  pop_dynamic(&all_options);\n  sys_var_add_options(&all_options, sys_var::PARSE_EARLY);\n  add_plugin_options(&all_options, &mem_root);\n  sort_dynamic(&all_options, (qsort_cmp) option_cmp);\n  add_terminator(&all_options);\n\n  my_print_help((my_option*) all_options.buffer);\n  my_print_variables((my_option*) all_options.buffer);\n\n  free_root(&mem_root, MYF(0));\n}\n\nstatic void usage(void)\n{\n  DBUG_ENTER(\"usage\");\n  if (!(default_charset_info= get_charset_by_csname(default_character_set_name,\n\t\t\t\t\t           MY_CS_PRIMARY,\n\t\t\t\t\t\t   MYF(MY_WME))))\n    exit(1);\n  if (!default_collation_name)\n    default_collation_name= (char*) default_charset_info->name;\n  print_version();\n  puts(ORACLE_WELCOME_COPYRIGHT_NOTICE(\"2000\"));\n  puts(\"Starts the MariaDB database server.\\n\");\n  printf(\"Usage: %s [OPTIONS]\\n\", my_progname);\n  if (!opt_verbose)\n    puts(\"\\nFor more help options (several pages), use mysqld --verbose --help.\");\n  else\n  {\n#ifdef __WIN__\n  puts(\"NT and Win32 specific options:\\n\\\n  --install                     Install the default service (NT).\\n\\\n  --install-manual              Install the default service started manually (NT).\\n\\\n  --install service_name        Install an optional service (NT).\\n\\\n  --install-manual service_name Install an optional service started manually (NT).\\n\\\n  --remove                      Remove the default service from the service list (NT).\\n\\\n  --remove service_name         Remove the service_name from the service list (NT).\\n\\\n  --enable-named-pipe           Only to be used for the default server (NT).\\n\\\n  --standalone                  Dummy option to start as a standalone server (NT).\\\n\");\n  puts(\"\");\n#endif\n  print_defaults(MYSQL_CONFIG_NAME,load_default_groups);\n  puts(\"\");\n  set_ports();\n\n  /* Print out all the options including plugin supplied options */\n  print_help();\n\n  if (! plugins_are_initialized)\n  {\n    puts(\"\\n\\\nPlugins have parameters that are not reflected in this list\\n\\\nbecause execution stopped before plugins were initialized.\");\n  }\n\n  puts(\"\\n\\\nTo see what values a running MySQL server is using, type\\n\\\n'mysqladmin variables' instead of 'mysqld --verbose --help'.\");\n  }\n  DBUG_VOID_RETURN;\n}\n#endif /*!EMBEDDED_LIBRARY*/\n\n/**\n  Initialize MySQL global variables to default values.\n\n  @note\n    The reason to set a lot of global variables to zero is to allow one to\n    restart the embedded server with a clean environment\n    It's also needed on some exotic platforms where global variables are\n    not set to 0 when a program starts.\n\n    We don't need to set variables refered to in my_long_options\n    as these are initialized by my_getopt.\n*/\n\nstatic int mysql_init_variables(void)\n{\n  /* Things reset to zero */\n  opt_skip_slave_start= opt_reckless_slave = 0;\n  mysql_home[0]= pidfile_name[0]= log_error_file[0]= 0;\n#if defined(HAVE_REALPATH) && !defined(HAVE_valgrind) && !defined(HAVE_BROKEN_REALPATH)\n  /*  We can only test for sub paths if my_symlink.c is using realpath */\n  mysys_test_invalid_symlink= path_starts_from_data_home_dir;\n#endif\n  opt_log= opt_slow_log= 0;\n  opt_bin_log= opt_bin_log_used= 0;\n  opt_disable_networking= opt_skip_show_db=0;\n  opt_skip_name_resolve= 0;\n  opt_ignore_builtin_innodb= 0;\n  opt_logname= opt_binlog_index_name= opt_slow_logname= 0;\n  opt_log_basename= 0;\n  opt_tc_log_file= (char *)\"tc.log\";      // no hostname in tc_log file name !\n  opt_secure_auth= 0;\n  opt_bootstrap= opt_myisam_log= 0;\n  mqh_used= 0;\n  kill_in_progress= 0;\n  cleanup_done= 0;\n  server_id_supplied= 0;\n  test_flags= select_errors= dropping_tables= ha_open_options=0;\n  thread_count= thread_running= kill_cached_threads= wake_thread=0;\n  slave_open_temp_tables= 0;\n  cached_thread_count= 0;\n  opt_endinfo= using_udf_functions= 0;\n  opt_using_transactions= 0;\n  abort_loop= select_thread_in_use= signal_thread_in_use= 0;\n  ready_to_exit= shutdown_in_progress= grant_option= 0;\n  aborted_threads= aborted_connects= 0;\n  subquery_cache_miss= subquery_cache_hit= 0;\n  delayed_insert_threads= delayed_insert_writes= delayed_rows_in_use= 0;\n  delayed_insert_errors= thread_created= 0;\n  specialflag= 0;\n  binlog_cache_use=  binlog_cache_disk_use= 0;\n  max_used_connections= slow_launch_threads = 0;\n  mysqld_user= mysqld_chroot= opt_init_file= opt_bin_logname = 0;\n  prepared_stmt_count= 0;\n  mysqld_unix_port= opt_mysql_tmpdir= my_bind_addr_str= NullS;\n  bzero((uchar*) &mysql_tmpdir_list, sizeof(mysql_tmpdir_list));\n  bzero((char *) &global_status_var, sizeof(global_status_var));\n  opt_large_pages= 0;\n  opt_super_large_pages= 0;\n#if defined(ENABLED_DEBUG_SYNC)\n  opt_debug_sync_timeout= 0;\n#endif /* defined(ENABLED_DEBUG_SYNC) */\n  key_map_full.set_all();\n\n  /* Character sets */\n  system_charset_info= &my_charset_utf8_general_ci;\n  files_charset_info= &my_charset_utf8_general_ci;\n  national_charset_info= &my_charset_utf8_general_ci;\n  table_alias_charset= &my_charset_bin;\n  character_set_filesystem= &my_charset_bin;\n\n  opt_specialflag= SPECIAL_ENGLISH;\n  unix_sock= base_ip_sock= extra_ip_sock= INVALID_SOCKET;\n  mysql_home_ptr= mysql_home;\n  pidfile_name_ptr= pidfile_name;\n  log_error_file_ptr= log_error_file;\n  protocol_version= PROTOCOL_VERSION;\n  what_to_log= ~ (1L << (uint) COM_TIME);\n  refresh_version= 2L;\t/* Increments on each reload. 0 and 1 are reserved */\n  executed_events= 0;\n  global_query_id= thread_id= 1L;\n  my_atomic_rwlock_init(&global_query_id_lock);\n  my_atomic_rwlock_init(&thread_running_lock);\n  strnmov(server_version, MYSQL_SERVER_VERSION, sizeof(server_version)-1);\n  threads.empty();\n  thread_cache.empty();\n  key_caches.empty();\n  if (!(dflt_key_cache= get_or_create_key_cache(default_key_cache_base.str,\n                                                default_key_cache_base.length)))\n  {\n    sql_print_error(\"Cannot allocate the keycache\");\n    return 1;\n  }\n\n  /* set key_cache_hash.default_value = dflt_key_cache */\n  multi_keycache_init();\n\n  /* Set directory paths */\n  mysql_real_data_home_len=\n    strmake_buf(mysql_real_data_home,\n                get_relative_path(MYSQL_DATADIR)) - mysql_real_data_home;\n  /* Replication parameters */\n  master_info_file= (char*) \"master.info\",\n    relay_log_info_file= (char*) \"relay-log.info\";\n  report_user= report_password = report_host= 0;\t/* TO BE DELETED */\n  opt_relay_logname= opt_relaylog_index_name= 0;\n\n  /* Variables in libraries */\n  charsets_dir= 0;\n  default_character_set_name= (char*) MYSQL_DEFAULT_CHARSET_NAME;\n  default_collation_name= compiled_default_collation_name;\n  character_set_filesystem_name= (char*) \"binary\";\n  lc_messages= (char*) \"en_US\";\n  lc_time_names_name= (char*) \"en_US\";\n  \n  /* Variables that depends on compile options */\n#ifndef DBUG_OFF\n  default_dbug_option=IF_WIN(\"d:t:i:O,\\\\mysqld.trace\",\n\t\t\t     \"d:t:i:o,/tmp/mysqld.trace\");\n  current_dbug_option= default_dbug_option;\n#endif\n  opt_error_log= IF_WIN(1,0);\n#ifdef ENABLED_PROFILING\n    have_profiling = SHOW_OPTION_YES;\n#else\n    have_profiling = SHOW_OPTION_NO;\n#endif\n\n#if defined(HAVE_OPENSSL) && !defined(EMBEDDED_LIBRARY)\n  have_ssl=SHOW_OPTION_YES;\n#else\n  have_ssl=SHOW_OPTION_NO;\n#endif\n#ifdef HAVE_BROKEN_REALPATH\n  have_symlink=SHOW_OPTION_NO;\n#else\n  have_symlink=SHOW_OPTION_YES;\n#endif\n#ifdef HAVE_DLOPEN\n  have_dlopen=SHOW_OPTION_YES;\n#else\n  have_dlopen=SHOW_OPTION_NO;\n#endif\n#ifdef HAVE_QUERY_CACHE\n  have_query_cache=SHOW_OPTION_YES;\n#else\n  have_query_cache=SHOW_OPTION_NO;\n#endif\n#ifdef HAVE_SPATIAL\n  have_geometry=SHOW_OPTION_YES;\n#else\n  have_geometry=SHOW_OPTION_NO;\n#endif\n#ifdef HAVE_RTREE_KEYS\n  have_rtree_keys=SHOW_OPTION_YES;\n#else\n  have_rtree_keys=SHOW_OPTION_NO;\n#endif\n#ifdef HAVE_CRYPT\n  have_crypt=SHOW_OPTION_YES;\n#else\n  have_crypt=SHOW_OPTION_NO;\n#endif\n#ifdef HAVE_COMPRESS\n  have_compress= SHOW_OPTION_YES;\n#else\n  have_compress= SHOW_OPTION_NO;\n#endif\n#ifdef HAVE_LIBWRAP\n  libwrapName= NullS;\n#endif\n#ifdef HAVE_OPENSSL\n  des_key_file = 0;\n#ifndef EMBEDDED_LIBRARY\n  ssl_acceptor_fd= 0;\n#endif /* ! EMBEDDED_LIBRARY */\n#endif /* HAVE_OPENSSL */\n#ifdef HAVE_SMEM\n  shared_memory_base_name= default_shared_memory_base_name;\n#endif\n\n#if defined(__WIN__)\n  /* Allow Win32 users to move MySQL anywhere */\n  {\n    char prg_dev[LIBLEN];\n    char executing_path_name[LIBLEN];\n    if (!test_if_hard_path(my_progname))\n    {\n      // we don't want to use GetModuleFileName inside of my_path since\n      // my_path is a generic path dereferencing function and here we care\n      // only about the executing binary.\n      GetModuleFileName(NULL, executing_path_name, sizeof(executing_path_name));\n      my_path(prg_dev, executing_path_name, NULL);\n    }\n    else\n      my_path(prg_dev, my_progname, \"mysql/bin\");\n    strcat(prg_dev,\"/../\");\t\t\t// Remove 'bin' to get base dir\n    cleanup_dirname(mysql_home,prg_dev);\n  }\n#else\n  const char *tmpenv;\n  if (!(tmpenv = getenv(\"MY_BASEDIR_VERSION\")))\n    tmpenv = DEFAULT_MYSQL_HOME;\n  strmake_buf(mysql_home, tmpenv);\n#endif\n  return 0;\n}\n\nmy_bool\nmysqld_get_one_option(int optid,\n                      const struct my_option *opt __attribute__((unused)),\n                      char *argument)\n{\n  switch(optid) {\n  case '#':\n#ifndef DBUG_OFF\n    if (!argument)\n      argument= (char*) default_dbug_option;\n    if (argument[0] == '0' && !argument[1])\n    {\n      DEBUGGER_OFF;\n      break;\n    }\n    DEBUGGER_ON;\n    if (argument[0] == '1' && !argument[1])\n      break;\n    DBUG_SET_INITIAL(argument);\n    opt_endinfo=1;\t\t\t\t/* unireg: memory allocation */\n#else\n    sql_print_warning(\"'%s' is disabled in this build\", opt->name);\n#endif\n    break;\n  case OPT_DEPRECATED_OPTION:\n    sql_print_warning(\"'%s' is deprecated. It does nothing and exists only \"\n                      \"for compatiblity with old my.cnf files.\",\n                      opt->name);\n    break;\n  case 'a':\n    global_system_variables.sql_mode= MODE_ANSI;\n    global_system_variables.tx_isolation= ISO_SERIALIZABLE;\n    break;\n  case 'b':\n    strmake_buf(mysql_home, argument);\n    break;\n  case 'C':\n    if (default_collation_name == compiled_default_collation_name)\n      default_collation_name= 0;\n    break;\n  case 'l':\n    WARN_DEPRECATED(NULL, 7, 0, \"--log\", \"'--general-log'/'--general-log-file'\");\n    opt_log=1;\n    break;\n  case 'h':\n    strmake_buf(mysql_real_data_home, argument);\n    /* Correct pointer set by my_getopt (for embedded library) */\n    mysql_real_data_home_ptr= mysql_real_data_home;\n    break;\n  case 'u':\n    if (!mysqld_user || !strcmp(mysqld_user, argument))\n      mysqld_user= argument;\n    else\n      sql_print_warning(\"Ignoring user change to '%s' because the user was set to '%s' earlier on the command line\\n\", argument, mysqld_user);\n    break;\n  case 'L':\n    strmake_buf(lc_messages_dir, argument);\n    break;\n  case OPT_BINLOG_FORMAT:\n    binlog_format_used= true;\n    break;\n#include <sslopt-case.h>\n#ifndef EMBEDDED_LIBRARY\n  case 'V':\n    print_version();\n    opt_abort= 1;                    // Abort after parsing all options\n    break;\n#endif /*EMBEDDED_LIBRARY*/\n  case 'W':\n    if (!argument)\n      global_system_variables.log_warnings++;\n    else if (argument == disabled_my_option)\n      global_system_variables.log_warnings= 0L;\n    else\n      global_system_variables.log_warnings= atoi(argument);\n    break;\n  case 'T':\n    test_flags= argument ? (uint) atoi(argument) : 0;\n    opt_endinfo=1;\n    break;\n  case OPT_THREAD_CONCURRENCY:\n    WARN_DEPRECATED_NO_REPLACEMENT(NULL, \"THREAD_CONCURRENCY\");\n    break;\n  case (int) OPT_ISAM_LOG:\n    opt_myisam_log=1;\n    break;\n  case (int) OPT_BIN_LOG:\n    opt_bin_log= test(argument != disabled_my_option);\n    opt_bin_log_used= 1;\n    break;\n  case (int) OPT_LOG_BASENAME:\n  {\n    if (opt_log_basename[0] == 0 || strchr(opt_log_basename, FN_EXTCHAR) ||\n        strchr(opt_log_basename,FN_LIBCHAR))\n    {\n      sql_print_error(\"Wrong argument for --log-basename. It can't be empty or contain '.' or '\" FN_DIRSEP \"'\");\n      return 1;\n    }\n    if (log_error_file_ptr != disabled_my_option)\n      log_error_file_ptr= opt_log_basename;\n\n    make_default_log_name(&opt_logname, \".log\", false);\n    make_default_log_name(&opt_slow_logname, \"-slow.log\", false);\n    make_default_log_name(&opt_bin_logname, \"-bin\", true);\n    make_default_log_name(&opt_binlog_index_name, \"-bin.index\", true);\n    make_default_log_name(&opt_relay_logname, \"-relay-bin\", true);\n    make_default_log_name(&opt_relaylog_index_name, \"-relay-bin.index\", true);\n\n    pidfile_name_ptr= pidfile_name;\n    strmake(pidfile_name, argument, sizeof(pidfile_name)-5);\n    strmov(fn_ext(pidfile_name),\".pid\");\n\n    /* check for errors */\n    if (!opt_bin_logname || !opt_relaylog_index_name || ! opt_logname ||\n        ! opt_slow_logname || !pidfile_name_ptr)\n      return 1;                                 // out of memory error\n    break;\n  }\n#ifdef HAVE_REPLICATION\n  case (int)OPT_REPLICATE_IGNORE_DB:\n  {\n    rpl_filter->add_ignore_db(argument);\n    break;\n  }\n  case (int)OPT_REPLICATE_DO_DB:\n  {\n    rpl_filter->add_do_db(argument);\n    break;\n  }\n  case (int)OPT_REPLICATE_REWRITE_DB:\n  {\n    /* See also OPT_REWRITE_DB handling in client/mysqlbinlog.cc */\n    char* key = argument,*p, *val;\n\n    if (!(p= strstr(argument, \"->\")))\n    {\n      sql_print_error(\"Bad syntax in replicate-rewrite-db - missing '->'!\\n\");\n      return 1;\n    }\n    val= p--;\n    while (my_isspace(mysqld_charset, *p) && p > argument)\n      *p-- = 0;\n    if (p == argument)\n    {\n      sql_print_error(\"Bad syntax in replicate-rewrite-db - empty FROM db!\\n\");\n      return 1;\n    }\n    *val= 0;\n    val+= 2;\n    while (*val && my_isspace(mysqld_charset, *val))\n      val++;\n    if (!*val)\n    {\n      sql_print_error(\"Bad syntax in replicate-rewrite-db - empty TO db!\\n\");\n      return 1;\n    }\n\n    rpl_filter->add_db_rewrite(key, val);\n    break;\n  }\n\n  case (int)OPT_BINLOG_IGNORE_DB:\n  {\n    binlog_filter->add_ignore_db(argument);\n    break;\n  }\n  case (int)OPT_BINLOG_DO_DB:\n  {\n    binlog_filter->add_do_db(argument);\n    break;\n  }\n  case (int)OPT_REPLICATE_DO_TABLE:\n  {\n    if (rpl_filter->add_do_table(argument))\n    {\n      sql_print_error(\"Could not add do table rule '%s'!\\n\", argument);\n      return 1;\n    }\n    break;\n  }\n  case (int)OPT_REPLICATE_WILD_DO_TABLE:\n  {\n    if (rpl_filter->add_wild_do_table(argument))\n    {\n      sql_print_error(\"Could not add do table rule '%s'!\\n\", argument);\n      return 1;\n    }\n    break;\n  }\n  case (int)OPT_REPLICATE_WILD_IGNORE_TABLE:\n  {\n    if (rpl_filter->add_wild_ignore_table(argument))\n    {\n      sql_print_error(\"Could not add ignore table rule '%s'!\\n\", argument);\n      return 1;\n    }\n    break;\n  }\n  case (int)OPT_REPLICATE_IGNORE_TABLE:\n  {\n    if (rpl_filter->add_ignore_table(argument))\n    {\n      sql_print_error(\"Could not add ignore table rule '%s'!\\n\", argument);\n      return 1;\n    }\n    break;\n  }\n#endif /* HAVE_REPLICATION */\n  case (int) OPT_SLOW_QUERY_LOG:\n    WARN_DEPRECATED(NULL, 7, 0, \"--log-slow-queries\", \"'--slow-query-log'/'--slow-query-log-file'\");\n    opt_slow_log= 1;\n    break;\n  case (int) OPT_SAFE:\n    opt_specialflag|= SPECIAL_SAFE_MODE | SPECIAL_NO_NEW_FUNC;\n    delay_key_write_options= (uint) DELAY_KEY_WRITE_NONE;\n    myisam_recover_options= HA_RECOVER_DEFAULT;\n    ha_open_options&= ~(HA_OPEN_DELAY_KEY_WRITE);\n#ifdef HAVE_QUERY_CACHE\n    query_cache_size=0;\n#endif\n    sql_print_warning(\"The syntax '--safe-mode' is deprecated and will be \"\n                      \"removed in a future release.\");\n    break;\n  case (int) OPT_SKIP_PRIOR:\n    opt_specialflag|= SPECIAL_NO_PRIOR;\n    sql_print_warning(\"The --skip-thread-priority startup option is deprecated \"\n                      \"and will be removed in MySQL 7.0. This option has no effect \"\n                      \"as the implied behavior is already the default.\");\n    break;\n  case (int) OPT_SKIP_HOST_CACHE:\n    opt_specialflag|= SPECIAL_NO_HOST_CACHE;\n    break;\n  case (int) OPT_SKIP_RESOLVE:\n    opt_skip_name_resolve= 1;\n    opt_specialflag|=SPECIAL_NO_RESOLVE;\n    break;\n  case (int) OPT_WANT_CORE:\n    test_flags |= TEST_CORE_ON_SIGNAL;\n    break;\n  case OPT_CONSOLE:\n    if (opt_console)\n      opt_error_log= 0;\t\t\t// Force logs to stdout\n    break;\n  case OPT_BOOTSTRAP:\n    opt_noacl=opt_bootstrap=1;\n    break;\n  case OPT_SERVER_ID:\n    server_id_supplied = 1;\n    break;\n  case OPT_ONE_THREAD:\n    thread_handling= SCHEDULER_NO_THREADS;\n    break;\n  case OPT_LOWER_CASE_TABLE_NAMES:\n    lower_case_table_names_used= 1;\n    break;\n#if defined(ENABLED_DEBUG_SYNC)\n  case OPT_DEBUG_SYNC_TIMEOUT:\n    /*\n      Debug Sync Facility. See debug_sync.cc.\n      Default timeout for WAIT_FOR action.\n      Default value is zero (facility disabled).\n      If option is given without an argument, supply a non-zero value.\n    */\n    if (!argument)\n    {\n      /* purecov: begin tested */\n      opt_debug_sync_timeout= DEBUG_SYNC_DEFAULT_WAIT_TIMEOUT;\n      /* purecov: end */\n    }\n    break;\n#endif /* defined(ENABLED_DEBUG_SYNC) */\n  case OPT_ENGINE_CONDITION_PUSHDOWN:\n    /*\n      The last of --engine-condition-pushdown and --optimizer_switch on\n      command line wins (see get_options().\n    */\n    if (global_system_variables.engine_condition_pushdown)\n      global_system_variables.optimizer_switch|=\n        OPTIMIZER_SWITCH_ENGINE_CONDITION_PUSHDOWN;\n    else\n      global_system_variables.optimizer_switch&=\n        ~OPTIMIZER_SWITCH_ENGINE_CONDITION_PUSHDOWN;\n    break;\n  case OPT_LOG_ERROR:\n    /*\n      \"No --log-error\" == \"write errors to stderr\",\n      \"--log-error without argument\" == \"write errors to a file\".\n    */\n    if (argument == NULL) /* no argument */\n      log_error_file_ptr= const_cast<char*>(\"\");\n    break;\n  case OPT_MAX_LONG_DATA_SIZE:\n    max_long_data_size_used= true;\n    break;\n\n\n  case OPT_IGNORE_DB_DIRECTORY:\n    opt_ignore_db_dirs= NULL; // will be set in ignore_db_dirs_process_additions\n    if (*argument == 0)\n      ignore_db_dirs_reset();\n    else\n    {\n      if (push_ignored_db_dir(argument))\n      {\n        sql_print_error(\"Can't start server: \"\n                        \"cannot process --ignore-db-dir=%.*s\", \n                        FN_REFLEN, argument);\n        return 1;\n      }\n    }\n    break;\n  }\n  return 0;\n}\n\n\n/** Handle arguments for multiple key caches. */\n\nC_MODE_START\n\nstatic void*\nmysql_getopt_value(const char *keyname, uint key_length,\n\t\t   const struct my_option *option, int *error)\n{\n  if (error)\n    *error= 0;\n  switch (option->id) {\n  case OPT_KEY_BUFFER_SIZE:\n  case OPT_KEY_CACHE_BLOCK_SIZE:\n  case OPT_KEY_CACHE_DIVISION_LIMIT:\n  case OPT_KEY_CACHE_AGE_THRESHOLD:\n  case OPT_KEY_CACHE_PARTITIONS:\n  {\n    KEY_CACHE *key_cache;\n    if (!(key_cache= get_or_create_key_cache(keyname, key_length)))\n    {\n      if (error)\n        *error= EXIT_OUT_OF_MEMORY;\n      return 0;\n    }\n    switch (option->id) {\n    case OPT_KEY_BUFFER_SIZE:\n      return &key_cache->param_buff_size;\n    case OPT_KEY_CACHE_BLOCK_SIZE:\n      return &key_cache->param_block_size;\n    case OPT_KEY_CACHE_DIVISION_LIMIT:\n      return &key_cache->param_division_limit;\n    case OPT_KEY_CACHE_AGE_THRESHOLD:\n      return &key_cache->param_age_threshold;\n    case OPT_KEY_CACHE_PARTITIONS:\n      return (uchar**) &key_cache->param_partitions;\n    }\n  }\n  }\n  return option->value;\n}\n\nstatic void option_error_reporter(enum loglevel level, const char *format, ...)\n{\n  va_list args;\n  va_start(args, format);\n\n  /* Don't print warnings for --loose options during bootstrap */\n  if (level == ERROR_LEVEL || !opt_bootstrap ||\n      global_system_variables.log_warnings)\n  {\n    vprint_msg_to_log(level, format, args);\n  }\n  va_end(args);\n}\n\nC_MODE_END\n\n/**\n  Get server options from the command line,\n  and perform related server initializations.\n  @param [in, out] argc_ptr       command line options (count)\n  @param [in, out] argv_ptr       command line options (values)\n  @return 0 on success\n\n  @todo\n  - FIXME add EXIT_TOO_MANY_ARGUMENTS to \"mysys_err.h\" and return that code?\n*/\nstatic int get_options(int *argc_ptr, char ***argv_ptr)\n{\n  int ho_error;\n\n  my_getopt_register_get_addr(mysql_getopt_value);\n  my_getopt_error_reporter= option_error_reporter;\n\n  /* prepare all_options array */\n  my_init_dynamic_array(&all_options, sizeof(my_option),\n                        array_elements(my_long_options),\n                        array_elements(my_long_options)/4);\n  for (my_option *opt= my_long_options;\n       opt < my_long_options + array_elements(my_long_options) - 1;\n       opt++)\n    insert_dynamic(&all_options, (uchar*) opt);\n  sys_var_add_options(&all_options, 0);\n  add_terminator(&all_options);\n\n  /* Skip unknown options so that they may be processed later by plugins */\n  my_getopt_skip_unknown= TRUE;\n\n  if ((ho_error= handle_options(argc_ptr, argv_ptr, (my_option*)(all_options.buffer),\n                                mysqld_get_one_option)))\n    return ho_error;\n\n  if (!opt_help)\n    delete_dynamic(&all_options);\n  else\n    opt_abort= 1;\n\n  /* Add back the program name handle_options removes */\n  (*argc_ptr)++;\n  (*argv_ptr)--;\n\n  /*\n    Options have been parsed. Now some of them need additional special\n    handling, like custom value checking, checking of incompatibilites\n    between options, setting of multiple variables, etc.\n    Do them here.\n  */\n\n  if ((opt_log_slow_admin_statements || opt_log_queries_not_using_indexes ||\n       opt_log_slow_slave_statements) &&\n      !opt_slow_log)\n    sql_print_warning(\"options --log-slow-admin-statements, --log-queries-not-using-indexes and --log-slow-slave-statements have no effect if --log_slow_queries is not set\");\n  if (global_system_variables.net_buffer_length > \n      global_system_variables.max_allowed_packet)\n  {\n    sql_print_warning(\"net_buffer_length (%lu) is set to be larger \"\n                      \"than max_allowed_packet (%lu). Please rectify.\",\n                      global_system_variables.net_buffer_length, \n                      global_system_variables.max_allowed_packet);\n  }\n\n  if (log_error_file_ptr != disabled_my_option)\n    opt_error_log= 1;\n  else\n    log_error_file_ptr= const_cast<char*>(\"\");\n\n  opt_init_connect.length=strlen(opt_init_connect.str);\n  opt_init_slave.length=strlen(opt_init_slave.str);\n\n  if (global_system_variables.low_priority_updates)\n    thr_upgraded_concurrent_insert_lock= TL_WRITE_LOW_PRIORITY;\n\n  if (ft_boolean_check_syntax_string((uchar*) ft_boolean_syntax))\n  {\n    sql_print_error(\"Invalid ft-boolean-syntax string: %s\\n\",\n                    ft_boolean_syntax);\n    return 1;\n  }\n\n  if (opt_disable_networking)\n    mysqld_port= mysqld_extra_port= 0;\n\n  if (opt_skip_show_db)\n    opt_specialflag|= SPECIAL_SKIP_SHOW_DB;\n\n  if (myisam_flush)\n    flush_time= 0;\n\n#ifdef HAVE_REPLICATION\n  if (opt_slave_skip_errors)\n    init_slave_skip_errors(opt_slave_skip_errors);\n#endif\n\n  if (global_system_variables.max_join_size == HA_POS_ERROR)\n    global_system_variables.option_bits|= OPTION_BIG_SELECTS;\n  else\n    global_system_variables.option_bits&= ~OPTION_BIG_SELECTS;\n\n  // Synchronize @@global.autocommit on --autocommit\n  const ulonglong turn_bit_on= opt_autocommit ?\n    OPTION_AUTOCOMMIT : OPTION_NOT_AUTOCOMMIT;\n  global_system_variables.option_bits=\n    (global_system_variables.option_bits &\n     ~(OPTION_NOT_AUTOCOMMIT | OPTION_AUTOCOMMIT)) | turn_bit_on;\n\n  global_system_variables.sql_mode=\n    expand_sql_mode(global_system_variables.sql_mode);\n#if defined(HAVE_BROKEN_REALPATH)\n  my_use_symdir=0;\n  my_disable_symlinks=1;\n  have_symlink=SHOW_OPTION_NO;\n#else\n  if (!my_use_symdir)\n  {\n    my_disable_symlinks=1;\n    have_symlink=SHOW_OPTION_DISABLED;\n  }\n#endif\n  if (opt_debugging)\n  {\n    /* Allow break with SIGINT, no core or stack trace */\n    test_flags|= TEST_SIGINT;\n    opt_stack_trace= 1;\n    test_flags&= ~TEST_CORE_ON_SIGNAL;\n  }\n  /* Set global MyISAM variables from delay_key_write_options */\n  fix_delay_key_write(0, 0, OPT_GLOBAL);\n\n#ifndef EMBEDDED_LIBRARY\n  if (mysqld_chroot)\n    set_root(mysqld_chroot);\n#else\n  thread_handling = SCHEDULER_NO_THREADS;\n  max_allowed_packet= global_system_variables.max_allowed_packet;\n  net_buffer_length= global_system_variables.net_buffer_length;\n#endif\n  if (fix_paths())\n    return 1;\n\n  /*\n    Set some global variables from the global_system_variables\n    In most cases the global variables will not be used\n  */\n  my_disable_locking= myisam_single_user= test(opt_external_locking == 0);\n  my_default_record_cache_size=global_system_variables.read_buff_size;\n\n  /*\n    Log mysys errors when we don't have a thd or thd->log_all_errors is set\n    (recovery) to the log.  This is mainly useful for debugging strange system\n    errors.\n  */\n  if (global_system_variables.log_warnings >= 10)\n    my_global_flags= MY_WME | ME_JUST_INFO;\n  /* Log all errors not handled by thd->handle_error() to my_message_sql() */\n  if (global_system_variables.log_warnings >= 11)\n    my_global_flags|= ME_NOREFRESH;\n  if (my_assert_on_error)\n    debug_assert_if_crashed_table= 1;\n\n  global_system_variables.long_query_time= (ulonglong)\n    (global_system_variables.long_query_time_double * 1e6);\n\n  if (opt_short_log_format)\n    opt_specialflag|= SPECIAL_SHORT_LOG_FORMAT;\n\n  if (init_global_datetime_format(MYSQL_TIMESTAMP_DATE,\n                                  &global_date_format) ||\n      init_global_datetime_format(MYSQL_TIMESTAMP_TIME,\n                                  &global_time_format) ||\n      init_global_datetime_format(MYSQL_TIMESTAMP_DATETIME,\n                                  &global_datetime_format))\n    return 1;\n\n#ifdef EMBEDDED_LIBRARY\n  one_thread_scheduler(thread_scheduler);\n  one_thread_scheduler(extra_thread_scheduler);\n#else\n\n#ifdef _WIN32\n  /* workaround: disable thread pool on XP */\n  if (GetProcAddress(GetModuleHandle(\"kernel32\"),\"CreateThreadpool\") == 0 &&\n      thread_handling > SCHEDULER_NO_THREADS)\n    thread_handling = SCHEDULER_ONE_THREAD_PER_CONNECTION;\n#endif\n\n  if (thread_handling <= SCHEDULER_ONE_THREAD_PER_CONNECTION)\n    one_thread_per_connection_scheduler(thread_scheduler, &max_connections,\n                                        &connection_count);\n  else if (thread_handling == SCHEDULER_NO_THREADS)\n    one_thread_scheduler(thread_scheduler);\n  else\n    pool_of_threads_scheduler(thread_scheduler,  &max_connections,\n                                        &connection_count); \n\n  one_thread_per_connection_scheduler(extra_thread_scheduler,\n                                      &extra_max_connections,\n                                      &extra_connection_count);\n#endif\n\n  global_system_variables.engine_condition_pushdown=\n    test(global_system_variables.optimizer_switch &\n         OPTIMIZER_SWITCH_ENGINE_CONDITION_PUSHDOWN);\n\n  opt_readonly= read_only;\n\n  /*\n    If max_long_data_size is not specified explicitly use\n    value of max_allowed_packet.\n  */\n  if (!max_long_data_size_used)\n    max_long_data_size= global_system_variables.max_allowed_packet;\n\n  /* Rember if max_user_connections was 0 at startup */\n  max_user_connections_checking= global_system_variables.max_user_connections != 0;\n  return 0;\n}\n\n\n/*\n  Create version name for running mysqld version\n  We automaticly add suffixes -debug, -embedded and -log to the version\n  name to make the version more descriptive.\n  (MYSQL_SERVER_SUFFIX is set by the compilation environment)\n*/\n\nvoid set_server_version(void)\n{\n  char *version_end= server_version+sizeof(server_version)-1;\n  char *end= strxnmov(server_version, sizeof(server_version)-1,\n                      MYSQL_SERVER_VERSION,\n                      MYSQL_SERVER_SUFFIX_STR, NullS);\n#ifdef EMBEDDED_LIBRARY\n  end= strnmov(end, \"-embedded\", (version_end-end));\n#endif\n#ifndef DBUG_OFF\n  if (!strstr(MYSQL_SERVER_SUFFIX_STR, \"-debug\"))\n    end= strnmov(end, \"-debug\", (version_end-end));\n#endif\n  if (opt_log || opt_slow_log || opt_bin_log)\n    strnmov(end, \"-log\", (version_end-end)); // This may slow down system\n  *end= 0;\n}\n\n\nstatic char *get_relative_path(const char *path)\n{\n  if (test_if_hard_path(path) &&\n      is_prefix(path,DEFAULT_MYSQL_HOME) &&\n      strcmp(DEFAULT_MYSQL_HOME,FN_ROOTDIR))\n  {\n    path+=(uint) strlen(DEFAULT_MYSQL_HOME);\n    while (*path == FN_LIBCHAR || *path == FN_LIBCHAR2)\n      path++;\n  }\n  return (char*) path;\n}\n\n\n/**\n  Fix filename and replace extension where 'dir' is relative to\n  mysql_real_data_home.\n  @return\n    1 if len(path) > FN_REFLEN\n*/\n\nbool\nfn_format_relative_to_data_home(char * to, const char *name,\n\t\t\t\tconst char *dir, const char *extension)\n{\n  char tmp_path[FN_REFLEN];\n  if (!test_if_hard_path(dir))\n  {\n    strxnmov(tmp_path,sizeof(tmp_path)-1, mysql_real_data_home,\n\t     dir, NullS);\n    dir=tmp_path;\n  }\n  return !fn_format(to, name, dir, extension,\n\t\t    MY_APPEND_EXT | MY_UNPACK_FILENAME | MY_SAFE_PATH);\n}\n\n\n/**\n  Test a file path to determine if the path is compatible with the secure file\n  path restriction.\n \n  @param path null terminated character string\n\n  @return\n    @retval TRUE The path is secure\n    @retval FALSE The path isn't secure\n*/\n\nbool is_secure_file_path(char *path)\n{\n  char buff1[FN_REFLEN], buff2[FN_REFLEN];\n  size_t opt_secure_file_priv_len;\n  /*\n    All paths are secure if opt_secure_file_path is 0\n  */\n  if (!opt_secure_file_priv)\n    return TRUE;\n\n  opt_secure_file_priv_len= strlen(opt_secure_file_priv);\n\n  if (strlen(path) >= FN_REFLEN)\n    return FALSE;\n\n  if (my_realpath(buff1, path, 0))\n  {\n    /*\n      The supplied file path might have been a file and not a directory.\n    */\n    size_t length= dirname_length(path);        // Guaranteed to be < FN_REFLEN\n    memcpy(buff2, path, length);\n    buff2[length]= '\\0';\n    if (length == 0 || my_realpath(buff1, buff2, 0))\n      return FALSE;\n  }\n  convert_dirname(buff2, buff1, NullS);\n  if (!lower_case_file_system)\n  {\n    if (strncmp(opt_secure_file_priv, buff2, opt_secure_file_priv_len))\n      return FALSE;\n  }\n  else\n  {\n    if (files_charset_info->coll->strnncoll(files_charset_info,\n                                            (uchar *) buff2, strlen(buff2),\n                                            (uchar *) opt_secure_file_priv,\n                                            opt_secure_file_priv_len,\n                                            TRUE))\n      return FALSE;\n  }\n  return TRUE;\n}\n\n\nstatic int fix_paths(void)\n{\n  char buff[FN_REFLEN],*pos;\n  DBUG_ENTER(\"fix_paths\");\n\n  convert_dirname(mysql_home,mysql_home,NullS);\n  /* Resolve symlinks to allow 'mysql_home' to be a relative symlink */\n  my_realpath(mysql_home,mysql_home,MYF(0));\n  /* Ensure that mysql_home ends in FN_LIBCHAR */\n  pos=strend(mysql_home);\n  if (pos[-1] != FN_LIBCHAR)\n  {\n    pos[0]= FN_LIBCHAR;\n    pos[1]= 0;\n  }\n  convert_dirname(lc_messages_dir, lc_messages_dir, NullS);\n  convert_dirname(mysql_real_data_home,mysql_real_data_home,NullS);\n  (void) my_load_path(mysql_home,mysql_home,\"\"); // Resolve current dir\n  (void) my_load_path(mysql_real_data_home,mysql_real_data_home,mysql_home);\n  (void) my_load_path(pidfile_name, pidfile_name_ptr, mysql_real_data_home);\n\n  convert_dirname(opt_plugin_dir, opt_plugin_dir_ptr ? opt_plugin_dir_ptr : \n                                  get_relative_path(PLUGINDIR), NullS);\n  (void) my_load_path(opt_plugin_dir, opt_plugin_dir, mysql_home);\n  opt_plugin_dir_ptr= opt_plugin_dir;\n  pidfile_name_ptr= pidfile_name;\n\n  my_realpath(mysql_unpacked_real_data_home, mysql_real_data_home, MYF(0));\n  mysql_unpacked_real_data_home_len= \n    (int) strlen(mysql_unpacked_real_data_home);\n  if (mysql_unpacked_real_data_home[mysql_unpacked_real_data_home_len-1] == FN_LIBCHAR)\n    --mysql_unpacked_real_data_home_len;\n\n  char *sharedir=get_relative_path(SHAREDIR);\n  if (test_if_hard_path(sharedir))\n    strmake_buf(buff, sharedir);\t\t/* purecov: tested */\n  else\n    strxnmov(buff,sizeof(buff)-1,mysql_home,sharedir,NullS);\n  convert_dirname(buff,buff,NullS);\n  (void) my_load_path(lc_messages_dir, lc_messages_dir, buff);\n\n  /* If --character-sets-dir isn't given, use shared library dir */\n  if (charsets_dir)\n    strmake_buf(mysql_charsets_dir, charsets_dir);\n  else\n    strxnmov(mysql_charsets_dir, sizeof(mysql_charsets_dir)-1, buff,\n\t     CHARSET_DIR, NullS);\n  (void) my_load_path(mysql_charsets_dir, mysql_charsets_dir, buff);\n  convert_dirname(mysql_charsets_dir, mysql_charsets_dir, NullS);\n  charsets_dir=mysql_charsets_dir;\n\n  if (init_tmpdir(&mysql_tmpdir_list, opt_mysql_tmpdir))\n    DBUG_RETURN(1);\n  if (!opt_mysql_tmpdir)\n    opt_mysql_tmpdir= mysql_tmpdir;\n#ifdef HAVE_REPLICATION\n  if (!slave_load_tmpdir)\n    slave_load_tmpdir= mysql_tmpdir;\n#endif /* HAVE_REPLICATION */\n  /*\n    Convert the secure-file-priv option to system format, allowing\n    a quick strcmp to check if read or write is in an allowed dir\n  */\n  if (opt_secure_file_priv)\n  {\n    if (*opt_secure_file_priv == 0)\n    {\n      my_free(opt_secure_file_priv);\n      opt_secure_file_priv= 0;\n    }\n    else\n    {\n      if (strlen(opt_secure_file_priv) >= FN_REFLEN)\n        opt_secure_file_priv[FN_REFLEN-1]= '\\0';\n      if (my_realpath(buff, opt_secure_file_priv, 0))\n      {\n        sql_print_warning(\"Failed to normalize the argument for --secure-file-priv.\");\n        DBUG_RETURN(1);\n      }\n      char *secure_file_real_path= (char *)my_malloc(FN_REFLEN, MYF(MY_FAE));\n      convert_dirname(secure_file_real_path, buff, NullS);\n      my_free(opt_secure_file_priv);\n      opt_secure_file_priv= secure_file_real_path;\n    }\n  }\n  DBUG_RETURN(0);\n}\n\n/**\n  Check if file system used for databases is case insensitive.\n\n  @param dir_name\t\t\tDirectory to test\n\n  @retval -1  Don't know (Test failed)\n  @retval  0   File system is case sensitive\n  @retval  1   File system is case insensitive\n*/\n\nstatic int test_if_case_insensitive(const char *dir_name)\n{\n  int result= 0;\n  File file;\n  char buff[FN_REFLEN], buff2[FN_REFLEN];\n  MY_STAT stat_info;\n  DBUG_ENTER(\"test_if_case_insensitive\");\n\n  fn_format(buff, glob_hostname, dir_name, \".lower-test\",\n\t    MY_UNPACK_FILENAME | MY_REPLACE_EXT | MY_REPLACE_DIR);\n  fn_format(buff2, glob_hostname, dir_name, \".LOWER-TEST\",\n\t    MY_UNPACK_FILENAME | MY_REPLACE_EXT | MY_REPLACE_DIR);\n  mysql_file_delete(key_file_casetest, buff2, MYF(0));\n  if ((file= mysql_file_create(key_file_casetest,\n                               buff, 0666, O_RDWR, MYF(0))) < 0)\n  {\n    if (!opt_abort)\n      sql_print_warning(\"Can't create test file %s\", buff);\n    DBUG_RETURN(-1);\n  }\n  mysql_file_close(file, MYF(0));\n  if (mysql_file_stat(key_file_casetest, buff2, &stat_info, MYF(0)))\n    result= 1;\t\t\t\t\t// Can access file\n  mysql_file_delete(key_file_casetest, buff, MYF(MY_WME));\n  DBUG_PRINT(\"exit\", (\"result: %d\", result));\n  DBUG_RETURN(result);\n}\n\n\n#ifndef EMBEDDED_LIBRARY\n\n/**\n  Create file to store pid number.\n*/\nstatic void create_pid_file()\n{\n  File file;\n  if ((file= mysql_file_create(key_file_pid, pidfile_name, 0664,\n                               O_WRONLY | O_TRUNC, MYF(MY_WME))) >= 0)\n  {\n    char buff[MAX_BIGINT_WIDTH + 1], *end;\n    end= int10_to_str((long) getpid(), buff, 10);\n    *end++= '\\n';\n    if (!mysql_file_write(file, (uchar*) buff, (uint) (end-buff),\n                          MYF(MY_WME | MY_NABP)))\n    {\n      mysql_file_close(file, MYF(0));\n      pid_file_created= true;\n      return;\n    }\n    mysql_file_close(file, MYF(0));\n  }\n  sql_perror(\"Can't start server: can't create PID file\");\n  exit(1);\n}\n#endif /* EMBEDDED_LIBRARY */\n\n\n/**\n  Remove the process' pid file.\n  \n  @param  flags  file operation flags\n*/\n\nstatic void delete_pid_file(myf flags)\n{\n#ifndef EMBEDDED_LIBRARY\n  if (pid_file_created)\n  {\n    mysql_file_delete(key_file_pid, pidfile_name, flags);\n    pid_file_created= false;\n  }\n#endif /* EMBEDDED_LIBRARY */\n  return;\n}\n\n\n/** Clear most status variables. */\nvoid refresh_status(THD *thd)\n{\n  mysql_mutex_lock(&LOCK_status);\n\n  /* Add thread's status variabes to global status */\n  add_to_status(&global_status_var, &thd->status_var);\n\n  /* Reset thread's status variables */\n  bzero((uchar*) &thd->status_var, sizeof(thd->status_var));\n  bzero((uchar*) &thd->org_status_var, sizeof(thd->org_status_var)); \n  thd->start_bytes_received= 0;\n\n  /* Reset some global variables */\n  reset_status_vars();\n\n  /* Reset the counters of all key caches (default and named). */\n  process_key_caches(reset_key_cache_counters, 0);\n  flush_status_time= time((time_t*) 0);\n  mysql_mutex_unlock(&LOCK_status);\n\n  /*\n    Set max_used_connections to the number of currently open\n    connections.  Lock LOCK_thread_count out of LOCK_status to avoid\n    deadlocks.  Status reset becomes not atomic, but status data is\n    not exact anyway.\n  */\n  mysql_mutex_lock(&LOCK_thread_count);\n  max_used_connections= thread_count-delayed_insert_threads;\n  mysql_mutex_unlock(&LOCK_thread_count);\n}\n\n\n/*****************************************************************************\n  Instantiate variables for missing storage engines\n  This section should go away soon\n*****************************************************************************/\n\n/*****************************************************************************\n  Instantiate templates\n*****************************************************************************/\n\n#ifdef HAVE_EXPLICIT_TEMPLATE_INSTANTIATION\n/* Used templates */\ntemplate class I_List<THD>;\ntemplate class I_List_iterator<THD>;\ntemplate class I_List<i_string>;\ntemplate class I_List<i_string_pair>;\ntemplate class I_List<Statement>;\ntemplate class I_List_iterator<Statement>;\n#endif\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql/sql_udf.cc": "/* Copyright (c) 2000, 2012, Oracle and/or its affiliates.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n/* This implements 'user defined functions' */\n\n/*\n   Known bugs:\n  \n   Memory for functions is never freed!\n   Shared libraries are not closed before mysqld exits;\n     - This is because we can't be sure if some threads are using\n       a function.\n  \n   The bugs only affect applications that create and free a lot of\n   dynamic functions, so this shouldn't be a real problem.\n*/\n\n#ifdef USE_PRAGMA_IMPLEMENTATION\n#pragma implementation\t\t\t\t// gcc: Class implementation\n#endif\n\n#include \"sql_priv.h\"\n#include \"unireg.h\"\n#include \"sql_base.h\"                           // close_mysql_tables\n#include \"sql_parse.h\"                        // check_identifier_name\n#include \"sql_table.h\"                        // write_bin_log\n#include \"records.h\"          // init_read_record, end_read_record\n#include <my_pthread.h>\n#include \"lock.h\"                               // MYSQL_LOCK_IGNORE_TIMEOUT\n\n#ifdef HAVE_DLOPEN\nextern \"C\"\n{\n#include <stdarg.h>\n#include <hash.h>\n}\n\nstatic bool initialized = 0;\nstatic MEM_ROOT mem;\nstatic HASH udf_hash;\nstatic mysql_rwlock_t THR_LOCK_udf;\n\n\nstatic udf_func *add_udf(LEX_STRING *name, Item_result ret,\n                         char *dl, Item_udftype typ);\nstatic void del_udf(udf_func *udf);\nstatic void *find_udf_dl(const char *dl);\n\nstatic char *init_syms(udf_func *tmp, char *nm)\n{\n  char *end;\n\n  if (!((tmp->func= (Udf_func_any) dlsym(tmp->dlhandle, tmp->name.str))))\n    return tmp->name.str;\n\n  end=strmov(nm,tmp->name.str);\n\n  if (tmp->type == UDFTYPE_AGGREGATE)\n  {\n    (void)strmov(end, \"_clear\");\n    if (!((tmp->func_clear= (Udf_func_clear) dlsym(tmp->dlhandle, nm))))\n      return nm;\n    (void)strmov(end, \"_add\");\n    if (!((tmp->func_add= (Udf_func_add) dlsym(tmp->dlhandle, nm))))\n      return nm;\n  }\n\n  (void) strmov(end,\"_deinit\");\n  tmp->func_deinit= (Udf_func_deinit) dlsym(tmp->dlhandle, nm);\n\n  (void) strmov(end,\"_init\");\n  tmp->func_init= (Udf_func_init) dlsym(tmp->dlhandle, nm);\n\n  /*\n    to prefent loading \"udf\" from, e.g. libc.so\n    let's ensure that at least one auxiliary symbol is defined\n  */\n  if (!tmp->func_init && !tmp->func_deinit && tmp->type != UDFTYPE_AGGREGATE)\n  {\n    if (!opt_allow_suspicious_udfs)\n      return nm;\n    if (current_thd->variables.log_warnings)\n      sql_print_warning(ER(ER_CANT_FIND_DL_ENTRY), nm);\n  }\n  return 0;\n}\n\n\nextern \"C\" uchar* get_hash_key(const uchar *buff, size_t *length,\n\t\t\t      my_bool not_used __attribute__((unused)))\n{\n  udf_func *udf=(udf_func*) buff;\n  *length=(uint) udf->name.length;\n  return (uchar*) udf->name.str;\n}\n\n#ifdef HAVE_PSI_INTERFACE\nstatic PSI_rwlock_key key_rwlock_THR_LOCK_udf;\n\nstatic PSI_rwlock_info all_udf_rwlocks[]=\n{\n  { &key_rwlock_THR_LOCK_udf, \"THR_LOCK_udf\", PSI_FLAG_GLOBAL}\n};\n\nstatic void init_udf_psi_keys(void)\n{\n  const char* category= \"sql\";\n  int count;\n\n  if (PSI_server == NULL)\n    return;\n\n  count= array_elements(all_udf_rwlocks);\n  PSI_server->register_rwlock(category, all_udf_rwlocks, count);\n}\n#endif\n\n/*\n  Read all predeclared functions from mysql.func and accept all that\n  can be used.\n*/\n\nvoid udf_init()\n{\n  udf_func *tmp;\n  TABLE_LIST tables;\n  READ_RECORD read_record_info;\n  TABLE *table;\n  int error;\n  DBUG_ENTER(\"ufd_init\");\n  char db[]= \"mysql\"; /* A subject to casednstr, can't be constant */\n\n  if (initialized || opt_noacl)\n    DBUG_VOID_RETURN;\n\n#ifdef HAVE_PSI_INTERFACE\n  init_udf_psi_keys();\n#endif\n\n  mysql_rwlock_init(key_rwlock_THR_LOCK_udf, &THR_LOCK_udf);\n\n  init_sql_alloc(&mem, UDF_ALLOC_BLOCK_SIZE, 0);\n  THD *new_thd = new THD;\n  if (!new_thd ||\n      my_hash_init(&udf_hash,system_charset_info,32,0,0,get_hash_key, NULL, 0))\n  {\n    sql_print_error(\"Can't allocate memory for udf structures\");\n    my_hash_free(&udf_hash);\n    free_root(&mem,MYF(0));\n    delete new_thd;\n    DBUG_VOID_RETURN;\n  }\n  initialized = 1;\n  new_thd->thread_stack= (char*) &new_thd;\n  new_thd->store_globals();\n  new_thd->set_db(db, sizeof(db)-1);\n\n  tables.init_one_table(db, sizeof(db)-1, \"func\", 4, \"func\", TL_READ);\n\n  if (open_and_lock_tables(new_thd, &tables, FALSE, MYSQL_LOCK_IGNORE_TIMEOUT))\n  {\n    DBUG_PRINT(\"error\",(\"Can't open udf table\"));\n    sql_print_error(\"Can't open the mysql.func table. Please \"\n                    \"run mysql_upgrade to create it.\");\n    goto end;\n  }\n\n  table= tables.table;\n  if (init_read_record(&read_record_info, new_thd, table, NULL,1,0,FALSE))\n  {\n    sql_print_error(\"Could not initialize init_read_record; udf's not \"\n                    \"loaded\");\n    goto end;\n  }\n\n  table->use_all_columns();\n  while (!(error= read_record_info.read_record(&read_record_info)))\n  {\n    DBUG_PRINT(\"info\",(\"init udf record\"));\n    LEX_STRING name;\n    name.str=get_field(&mem, table->field[0]);\n    name.length = (uint) strlen(name.str);\n    char *dl_name= get_field(&mem, table->field[2]);\n    bool new_dl=0;\n    Item_udftype udftype=UDFTYPE_FUNCTION;\n    if (table->s->fields >= 4)\t\t\t// New func table\n      udftype=(Item_udftype) table->field[3]->val_int();\n\n    /*\n      Ensure that the .dll doesn't have a path\n      This is done to ensure that only approved dll from the system\n      directories are used (to make this even remotely secure).\n\n      On windows we must check both FN_LIBCHAR and '/'.\n    */\n    if (check_valid_path(dl_name, strlen(dl_name)) ||\n        check_string_char_length(&name, \"\", NAME_CHAR_LEN,\n                                 system_charset_info, 1))\n    {\n      sql_print_error(\"Invalid row in mysql.func table for function '%.64s'\",\n                      name.str);\n      continue;\n    }\n\n    if (!(tmp= add_udf(&name,(Item_result) table->field[1]->val_int(),\n                       dl_name, udftype)))\n    {\n      sql_print_error(\"Can't alloc memory for udf function: '%.64s'\", name.str);\n      continue;\n    }\n\n    void *dl = find_udf_dl(tmp->dl);\n    if (dl == NULL)\n    {\n      char dlpath[FN_REFLEN];\n      strxnmov(dlpath, sizeof(dlpath) - 1, opt_plugin_dir, \"/\", tmp->dl,\n               NullS);\n      (void) unpack_filename(dlpath, dlpath);\n      if (!(dl= dlopen(dlpath, RTLD_NOW)))\n      {\n\t/* Print warning to log */\n        sql_print_error(ER(ER_CANT_OPEN_LIBRARY), tmp->dl, errno, dlerror());\n\t/* Keep the udf in the hash so that we can remove it later */\n\tcontinue;\n      }\n      new_dl=1;\n    }\n    tmp->dlhandle = dl;\n    {\n      char buf[SAFE_NAME_LEN+16], *missing;\n      if ((missing= init_syms(tmp, buf)))\n      {\n        sql_print_error(ER(ER_CANT_FIND_DL_ENTRY), missing);\n        del_udf(tmp);\n        if (new_dl)\n          dlclose(dl);\n      }\n    }\n  }\n  if (error > 0)\n    sql_print_error(\"Got unknown error: %d\", my_errno);\n  end_read_record(&read_record_info);\n  table->m_needs_reopen= TRUE;                  // Force close to free memory\n\nend:\n  close_mysql_tables(new_thd);\n  delete new_thd;\n  /* Remember that we don't have a THD */\n  my_pthread_setspecific_ptr(THR_THD,  0);\n  DBUG_VOID_RETURN;\n}\n\n\nvoid udf_free()\n{\n  /* close all shared libraries */\n  DBUG_ENTER(\"udf_free\");\n  if (opt_noacl)\n    DBUG_VOID_RETURN;\n  for (uint idx=0 ; idx < udf_hash.records ; idx++)\n  {\n    udf_func *udf=(udf_func*) my_hash_element(&udf_hash,idx);\n    if (udf->dlhandle)\t\t\t\t// Not closed before\n    {\n      /* Mark all versions using the same handler as closed */\n      for (uint j=idx+1 ;  j < udf_hash.records ; j++)\n      {\n\tudf_func *tmp=(udf_func*) my_hash_element(&udf_hash,j);\n\tif (udf->dlhandle == tmp->dlhandle)\n\t  tmp->dlhandle=0;\t\t\t// Already closed\n      }\n      dlclose(udf->dlhandle);\n    }\n  }\n  my_hash_free(&udf_hash);\n  free_root(&mem,MYF(0));\n  if (initialized)\n  {\n    initialized= 0;\n    mysql_rwlock_destroy(&THR_LOCK_udf);\n  }\n  DBUG_VOID_RETURN;\n}\n\n\nstatic void del_udf(udf_func *udf)\n{\n  DBUG_ENTER(\"del_udf\");\n  if (!--udf->usage_count)\n  {\n    my_hash_delete(&udf_hash,(uchar*) udf);\n    using_udf_functions=udf_hash.records != 0;\n  }\n  else\n  {\n    /*\n      The functions is in use ; Rename the functions instead of removing it.\n      The functions will be automaticly removed when the least threads\n      doesn't use it anymore\n    */\n    char *name= udf->name.str;\n    uint name_length=udf->name.length;\n    udf->name.str=(char*) \"*\";\n    udf->name.length=1;\n    my_hash_update(&udf_hash,(uchar*) udf,(uchar*) name,name_length);\n  }\n  DBUG_VOID_RETURN;\n}\n\n\nvoid free_udf(udf_func *udf)\n{\n  DBUG_ENTER(\"free_udf\");\n  \n  if (!initialized)\n    DBUG_VOID_RETURN;\n\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n  if (!--udf->usage_count)\n  {\n    /*\n      We come here when someone has deleted the udf function\n      while another thread still was using the udf\n    */\n    my_hash_delete(&udf_hash,(uchar*) udf);\n    using_udf_functions=udf_hash.records != 0;\n    if (!find_udf_dl(udf->dl))\n      dlclose(udf->dlhandle);\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  DBUG_VOID_RETURN;\n}\n\n\n/* This is only called if using_udf_functions != 0 */\n\nudf_func *find_udf(const char *name,uint length,bool mark_used)\n{\n  udf_func *udf=0;\n  DBUG_ENTER(\"find_udf\");\n\n  if (!initialized)\n    DBUG_RETURN(NULL);\n\n  DEBUG_SYNC(current_thd, \"find_udf_before_lock\");\n  /* TODO: This should be changed to reader locks someday! */\n  if (mark_used)\n    mysql_rwlock_wrlock(&THR_LOCK_udf);  /* Called during fix_fields */\n  else\n    mysql_rwlock_rdlock(&THR_LOCK_udf);  /* Called during parsing */\n\n  if ((udf=(udf_func*) my_hash_search(&udf_hash,(uchar*) name,\n                                      length ? length : (uint) strlen(name))))\n  {\n    if (!udf->dlhandle)\n      udf=0;\t\t\t\t\t// Could not be opened\n    else if (mark_used)\n      udf->usage_count++;\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  DBUG_RETURN(udf);\n}\n\n\nstatic void *find_udf_dl(const char *dl)\n{\n  DBUG_ENTER(\"find_udf_dl\");\n\n  /*\n    Because only the function name is hashed, we have to search trough\n    all rows to find the dl.\n  */\n  for (uint idx=0 ; idx < udf_hash.records ; idx++)\n  {\n    udf_func *udf=(udf_func*) my_hash_element(&udf_hash,idx);\n    if (!strcmp(dl, udf->dl) && udf->dlhandle != NULL)\n      DBUG_RETURN(udf->dlhandle);\n  }\n  DBUG_RETURN(0);\n}\n\n\n/* Assume that name && dl is already allocated */\n\nstatic udf_func *add_udf(LEX_STRING *name, Item_result ret, char *dl,\n\t\t\t Item_udftype type)\n{\n  if (!name || !dl || !(uint) type || (uint) type > (uint) UDFTYPE_AGGREGATE)\n    return 0;\n  udf_func *tmp= (udf_func*) alloc_root(&mem, sizeof(udf_func));\n  if (!tmp)\n    return 0;\n  bzero((char*) tmp,sizeof(*tmp));\n  tmp->name = *name; //dup !!\n  tmp->dl = dl;\n  tmp->returns = ret;\n  tmp->type = type;\n  tmp->usage_count=1;\n  if (my_hash_insert(&udf_hash,(uchar*)  tmp))\n    return 0;\n  using_udf_functions=1;\n  return tmp;\n}\n\n\n/**\n  Create a user defined function. \n\n  @note Like implementations of other DDL/DML in MySQL, this function\n  relies on the caller to close the thread tables. This is done in the\n  end of dispatch_command().\n*/\n\nint mysql_create_function(THD *thd,udf_func *udf)\n{\n  int error;\n  void *dl=0;\n  bool new_dl=0;\n  TABLE *table;\n  TABLE_LIST tables;\n  udf_func *u_d;\n  bool save_binlog_row_based;\n  DBUG_ENTER(\"mysql_create_function\");\n\n  if (!initialized)\n  {\n    if (opt_noacl)\n      my_error(ER_CANT_INITIALIZE_UDF, MYF(0),\n               udf->name.str,\n               \"UDFs are unavailable with the --skip-grant-tables option\");\n    else\n      my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));\n    DBUG_RETURN(1);\n  }\n\n  /*\n    Ensure that the .dll doesn't have a path\n    This is done to ensure that only approved dll from the system\n    directories are used (to make this even remotely secure).\n  */\n  if (check_valid_path(udf->dl, strlen(udf->dl)))\n  {\n    my_message(ER_UDF_NO_PATHS, ER(ER_UDF_NO_PATHS), MYF(0));\n    DBUG_RETURN(1);\n  }\n  if (check_ident_length(&udf->name))\n    DBUG_RETURN(1);\n\n  /* \n    Turn off row binlogging of this statement and use statement-based \n    so that all supporting tables are updated for CREATE FUNCTION command.\n  */\n  if ((save_binlog_row_based= thd->is_current_stmt_binlog_format_row()))\n    thd->clear_current_stmt_binlog_format_row();\n\n  tables.init_one_table(STRING_WITH_LEN(\"mysql\"), STRING_WITH_LEN(\"func\"),\n                        \"func\", TL_WRITE);\n  table= open_ltable(thd, &tables, TL_WRITE, MYSQL_LOCK_IGNORE_TIMEOUT);\n\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n  DEBUG_SYNC(current_thd, \"mysql_create_function_after_lock\");\n  if ((my_hash_search(&udf_hash,(uchar*) udf->name.str, udf->name.length)))\n  {\n    my_error(ER_UDF_EXISTS, MYF(0), udf->name.str);\n    goto err;\n  }\n  if (!(dl = find_udf_dl(udf->dl)))\n  {\n    char dlpath[FN_REFLEN];\n    strxnmov(dlpath, sizeof(dlpath) - 1, opt_plugin_dir, \"/\", udf->dl, NullS);\n    (void) unpack_filename(dlpath, dlpath);\n\n    if (!(dl = dlopen(dlpath, RTLD_NOW)))\n    {\n      DBUG_PRINT(\"error\",(\"dlopen of %s failed, error: %d (%s)\",\n                          udf->dl, errno, dlerror()));\n      my_error(ER_CANT_OPEN_LIBRARY, MYF(0),\n               udf->dl, errno, dlerror());\n      goto err;\n    }\n    new_dl=1;\n  }\n  udf->dlhandle=dl;\n  {\n    char buf[SAFE_NAME_LEN+16], *missing;\n    if ((missing= init_syms(udf, buf)))\n    {\n      my_error(ER_CANT_FIND_DL_ENTRY, MYF(0), missing);\n      goto err;\n    }\n  }\n  udf->name.str=strdup_root(&mem,udf->name.str);\n  udf->dl=strdup_root(&mem,udf->dl);\n  if (!(u_d=add_udf(&udf->name,udf->returns,udf->dl,udf->type)))\n    goto err;\n  u_d->dlhandle = dl;\n  u_d->func=udf->func;\n  u_d->func_init=udf->func_init;\n  u_d->func_deinit=udf->func_deinit;\n  u_d->func_clear=udf->func_clear;\n  u_d->func_add=udf->func_add;\n\n  /* create entry in mysql.func table */\n\n  /* Allow creation of functions even if we can't open func table */\n  if (!table)\n    goto err;\n  table->use_all_columns();\n  restore_record(table, s->default_values);\t// Default values for fields\n  table->field[0]->store(u_d->name.str, u_d->name.length, system_charset_info);\n  table->field[1]->store((longlong) u_d->returns, TRUE);\n  table->field[2]->store(u_d->dl,(uint) strlen(u_d->dl), system_charset_info);\n  if (table->s->fields >= 4)\t\t\t// If not old func format\n    table->field[3]->store((longlong) u_d->type, TRUE);\n  error = table->file->ha_write_row(table->record[0]);\n\n  if (error)\n  {\n    my_error(ER_ERROR_ON_WRITE, MYF(0), \"mysql.func\", error);\n    del_udf(u_d);\n    goto err;\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n\n  /* Binlog the create function. */\n  if (write_bin_log(thd, TRUE, thd->query(), thd->query_length()))\n  {\n    /* Restore the state of binlog format */\n    DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n    if (save_binlog_row_based)\n      thd->set_current_stmt_binlog_format_row();\n    DBUG_RETURN(1);\n  }\n  /* Restore the state of binlog format */\n  DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n  if (save_binlog_row_based)\n    thd->set_current_stmt_binlog_format_row();\n  DBUG_RETURN(0);\n\n err:\n  if (new_dl)\n    dlclose(dl);\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  /* Restore the state of binlog format */\n  DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n  if (save_binlog_row_based)\n    thd->set_current_stmt_binlog_format_row();\n  DBUG_RETURN(1);\n}\n\n\nint mysql_drop_function(THD *thd,const LEX_STRING *udf_name)\n{\n  TABLE *table;\n  TABLE_LIST tables;\n  udf_func *udf;\n  char *exact_name_str;\n  uint exact_name_len;\n  bool save_binlog_row_based;\n  DBUG_ENTER(\"mysql_drop_function\");\n\n  if (!initialized)\n  {\n    if (opt_noacl)\n      my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), udf_name->str);\n    else\n      my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));\n    DBUG_RETURN(1);\n  }\n\n  /* \n    Turn off row binlogging of this statement and use statement-based\n    so that all supporting tables are updated for DROP FUNCTION command.\n  */\n  if ((save_binlog_row_based= thd->is_current_stmt_binlog_format_row()))\n    thd->clear_current_stmt_binlog_format_row();\n\n  tables.init_one_table(STRING_WITH_LEN(\"mysql\"), STRING_WITH_LEN(\"func\"),\n                        \"func\", TL_WRITE);\n  table= open_ltable(thd, &tables, TL_WRITE, MYSQL_LOCK_IGNORE_TIMEOUT);\n\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n  DEBUG_SYNC(current_thd, \"mysql_drop_function_after_lock\");\n  if (!(udf=(udf_func*) my_hash_search(&udf_hash,(uchar*) udf_name->str,\n                                       (uint) udf_name->length)))\n  {\n    my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), udf_name->str);\n    goto err;\n  }\n  exact_name_str= udf->name.str;\n  exact_name_len= udf->name.length;\n  del_udf(udf);\n  /*\n    Close the handle if this was function that was found during boot or\n    CREATE FUNCTION and it's not in use by any other udf function\n  */\n  if (udf->dlhandle && !find_udf_dl(udf->dl))\n    dlclose(udf->dlhandle);\n\n  if (!table)\n    goto err;\n  table->use_all_columns();\n  table->field[0]->store(exact_name_str, exact_name_len, &my_charset_bin);\n  if (!table->file->ha_index_read_idx_map(table->record[0], 0,\n                                          (uchar*) table->field[0]->ptr,\n                                          HA_WHOLE_KEY,\n                                          HA_READ_KEY_EXACT))\n  {\n    int error;\n    if ((error = table->file->ha_delete_row(table->record[0])))\n      table->file->print_error(error, MYF(0));\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n\n  /*\n    Binlog the drop function. Keep the table open and locked\n    while binlogging, to avoid binlog inconsistency.\n  */\n  if (write_bin_log(thd, TRUE, thd->query(), thd->query_length()))\n  {\n    /* Restore the state of binlog format */\n    DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n    if (save_binlog_row_based)\n      thd->set_current_stmt_binlog_format_row();\n    DBUG_RETURN(1);\n  }\n  /* Restore the state of binlog format */\n  DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n  if (save_binlog_row_based)\n    thd->set_current_stmt_binlog_format_row();\n  DBUG_RETURN(0);\nerr:\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  /* Restore the state of binlog format */\n  DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n  if (save_binlog_row_based)\n    thd->set_current_stmt_binlog_format_row();\n  DBUG_RETURN(1);\n}\n\n#endif /* HAVE_DLOPEN */\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql/set_var.h": "#ifndef SET_VAR_INCLUDED\n#define SET_VAR_INCLUDED\n/* Copyright (c) 2002, 2013, Oracle and/or its affiliates.\n   Copyright (c) 2009, 2014, SkySQL Ab.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA */\n\n/**\n  @file\n  \"public\" interface to sys_var - server configuration variables.\n*/\n\n#ifdef USE_PRAGMA_INTERFACE\n#pragma interface                       /* gcc class implementation */\n#endif\n\n#include <my_getopt.h>\n\nclass sys_var;\nclass set_var;\nclass sys_var_pluginvar;\nclass PolyLock;\nclass Item_func_set_user_var;\n\n// This include needs to be here since item.h requires enum_var_type :-P\n#include \"item.h\"                          /* Item */\n#include \"sql_class.h\"                     /* THD  */\n\nextern TYPELIB bool_typelib;\n\nstruct sys_var_chain\n{\n  sys_var *first;\n  sys_var *last;\n};\n\nint mysql_add_sys_var_chain(sys_var *chain);\nint mysql_del_sys_var_chain(sys_var *chain);\n\n/**\n  A class representing one system variable - that is something\n  that can be accessed as @@global.variable_name or @@session.variable_name,\n  visible in SHOW xxx VARIABLES and in INFORMATION_SCHEMA.xxx_VARIABLES,\n  optionally it can be assigned to, optionally it can have a command-line\n  counterpart with the same name.\n*/\nclass sys_var\n{\npublic:\n  sys_var *next;\n  LEX_CSTRING name;\n  enum flag_enum { GLOBAL, SESSION, ONLY_SESSION, SCOPE_MASK=1023,\n                   READONLY=1024, ALLOCATED=2048, PARSE_EARLY=4096 };\n  /**\n    Enumeration type to indicate for a system variable whether\n    it will be written to the binlog or not.\n  */    \n  enum binlog_status_enum { VARIABLE_NOT_IN_BINLOG,\n                            SESSION_VARIABLE_IN_BINLOG } binlog_status;\n\nprotected:\n  typedef bool (*on_check_function)(sys_var *self, THD *thd, set_var *var);\n  typedef bool (*on_update_function)(sys_var *self, THD *thd, enum_var_type type);\n\n  int flags;            ///< or'ed flag_enum values\n  const SHOW_TYPE show_val_type; ///< what value_ptr() returns for sql_show.cc\n  my_option option;     ///< min, max, default values are stored here\n  PolyLock *guard;      ///< *second* lock that protects the variable\n  ptrdiff_t offset;     ///< offset to the value from global_system_variables\n  on_check_function on_check;\n  on_update_function on_update;\n  const char *const deprecation_substitute;\n  bool is_os_charset; ///< true if the value is in character_set_filesystem\n\npublic:\n  sys_var(sys_var_chain *chain, const char *name_arg, const char *comment,\n          int flag_args, ptrdiff_t off, int getopt_id,\n          enum get_opt_arg_type getopt_arg_type, SHOW_TYPE show_val_type_arg,\n          longlong def_val, PolyLock *lock, enum binlog_status_enum binlog_status_arg,\n          on_check_function on_check_func, on_update_function on_update_func,\n          const char *substitute);\n\n  virtual ~sys_var() {}\n\n  /**\n    All the cleanup procedures should be performed here\n  */\n  virtual void cleanup() {}\n  /**\n    downcast for sys_var_pluginvar. Returns this if it's an instance\n    of sys_var_pluginvar, and 0 otherwise.\n  */\n  virtual sys_var_pluginvar *cast_pluginvar() { return 0; }\n\n  bool check(THD *thd, set_var *var);\n  uchar *value_ptr(THD *thd, enum_var_type type, LEX_STRING *base);\n\n  /**\n     Update the system variable with the default value from either\n     session or global scope.  The default value is stored in the\n     'var' argument. Return false when successful.\n  */\n  bool set_default(THD *thd, set_var *var);\n  bool update(THD *thd, set_var *var);\n\n  SHOW_TYPE show_type() { return show_val_type; }\n  int scope() const { return flags & SCOPE_MASK; }\n  CHARSET_INFO *charset(THD *thd);\n  bool is_readonly() const { return flags & READONLY; }\n  /**\n    the following is only true for keycache variables,\n    that support the syntax @@keycache_name.variable_name\n  */\n  bool is_struct() { return option.var_type & GET_ASK_ADDR; }\n  bool is_written_to_binlog(enum_var_type type)\n  { return type != OPT_GLOBAL && binlog_status == SESSION_VARIABLE_IN_BINLOG; }\n  virtual bool check_update_type(Item_result type) = 0;\n  bool check_type(enum_var_type type)\n  {\n    switch (scope())\n    {\n    case GLOBAL:       return type != OPT_GLOBAL;\n    case SESSION:      return false; // always ok\n    case ONLY_SESSION: return type == OPT_GLOBAL;\n    }\n    return true; // keep gcc happy\n  }\n  bool register_option(DYNAMIC_ARRAY *array, int parse_flags)\n  {\n    return (option.id != -1) && ((flags & PARSE_EARLY) == parse_flags) &&\n           insert_dynamic(array, (uchar*)&option);\n  }\n  void do_deprecated_warning(THD *thd);\n\nprivate:\n  virtual bool do_check(THD *thd, set_var *var) = 0;\n  /**\n    save the session default value of the variable in var\n  */\n  virtual void session_save_default(THD *thd, set_var *var) = 0;\n  /**\n    save the global default value of the variable in var\n  */\n  virtual void global_save_default(THD *thd, set_var *var) = 0;\n  virtual bool session_update(THD *thd, set_var *var) = 0;\n  virtual bool global_update(THD *thd, set_var *var) = 0;\n\nprotected:\n  /**\n    A pointer to a value of the variable for SHOW.\n    It must be of show_val_type type (bool for SHOW_BOOL, int for SHOW_INT,\n    longlong for SHOW_LONGLONG, etc).\n  */\n  virtual uchar *session_value_ptr(THD *thd, LEX_STRING *base);\n  virtual uchar *global_value_ptr(THD *thd, LEX_STRING *base);\n\n  /**\n    A pointer to a storage area of the variable, to the raw data.\n    Typically it's the same as session_value_ptr(), but it's different,\n    for example, for ENUM, that is printed as a string, but stored as a number.\n  */\n  uchar *session_var_ptr(THD *thd)\n  { return ((uchar*)&(thd->variables)) + offset; }\n\n  uchar *global_var_ptr()\n  { return ((uchar*)&global_system_variables) + offset; }\n};\n\n#include \"sql_plugin.h\"                    /* SHOW_HA_ROWS, SHOW_MY_BOOL */\n\n\n/****************************************************************************\n  Classes for parsing of the SET command\n****************************************************************************/\n\n/**\n  A base class for everything that can be set with SET command.\n  It's similar to Items, an instance of this is created by the parser\n  for every assigmnent in SET (or elsewhere, e.g. in SELECT).\n*/\nclass set_var_base :public Sql_alloc\n{\npublic:\n  set_var_base() {}\n  virtual ~set_var_base() {}\n  virtual int check(THD *thd)=0;           /* To check privileges etc. */\n  virtual int update(THD *thd)=0;                  /* To set the value */\n  virtual int light_check(THD *thd) { return check(thd); }   /* for PS */\n};\n\n\n/**\n  set_var_base descendant for assignments to the system variables.\n*/\nclass set_var :public set_var_base\n{\npublic:\n  sys_var *var; ///< system variable to be updated\n  Item *value;  ///< the expression that provides the new value of the variable\n  enum_var_type type;\n  union ///< temp storage to hold a value between sys_var::check and ::update\n  {\n    ulonglong ulonglong_value;          ///< for unsigned integer, set, enum sysvars\n    longlong longlong_value;            ///< for signed integer\n    double double_value;                ///< for Sys_var_double\n    plugin_ref plugin;                  ///< for Sys_var_plugin\n    Time_zone *time_zone;               ///< for Sys_var_tz\n    LEX_STRING string_value;            ///< for Sys_var_charptr and others\n    const void *ptr;                    ///< for Sys_var_struct\n  } save_result;\n  LEX_STRING base; /**< for structured variables, like keycache_name.variable_name */\n\n  set_var(enum_var_type type_arg, sys_var *var_arg,\n          const LEX_STRING *base_name_arg, Item *value_arg)\n    :var(var_arg), type(type_arg), base(*base_name_arg)\n  {\n    /*\n      If the set value is a field, change it to a string to allow things like\n      SET table_type=MYISAM;\n    */\n    if (value_arg && value_arg->type() == Item::FIELD_ITEM)\n    {\n      Item_field *item= (Item_field*) value_arg;\n      if (!(value=new Item_string(item->field_name,\n                                  (uint) strlen(item->field_name),\n                                  system_charset_info))) // names are utf8\n        value=value_arg;                        /* Give error message later */\n    }\n    else\n      value=value_arg;\n  }\n  int check(THD *thd);\n  int update(THD *thd);\n  int light_check(THD *thd);\n};\n\n\n/* User variables like @my_own_variable */\nclass set_var_user: public set_var_base\n{\n  Item_func_set_user_var *user_var_item;\npublic:\n  set_var_user(Item_func_set_user_var *item)\n    :user_var_item(item)\n  {}\n  int check(THD *thd);\n  int update(THD *thd);\n  int light_check(THD *thd);\n};\n\n/* For SET PASSWORD */\n\nclass set_var_password: public set_var_base\n{\n  LEX_USER *user;\n  char *password;\npublic:\n  set_var_password(LEX_USER *user_arg,char *password_arg)\n    :user(user_arg), password(password_arg)\n  {}\n  int check(THD *thd);\n  int update(THD *thd);\n};\n\n\n/* For SET NAMES and SET CHARACTER SET */\n\nclass set_var_collation_client: public set_var_base\n{\n  CHARSET_INFO *character_set_client;\n  CHARSET_INFO *character_set_results;\n  CHARSET_INFO *collation_connection;\npublic:\n  set_var_collation_client(CHARSET_INFO *client_coll_arg,\n                           CHARSET_INFO *connection_coll_arg,\n                           CHARSET_INFO *result_coll_arg)\n    :character_set_client(client_coll_arg),\n     character_set_results(result_coll_arg),\n     collation_connection(connection_coll_arg)\n  {}\n  int check(THD *thd);\n  int update(THD *thd);\n};\n\n\n/* optional things, have_* variables */\nextern SHOW_COMP_OPTION have_csv, have_innodb;\nextern SHOW_COMP_OPTION have_ndbcluster, have_partitioning;\nextern SHOW_COMP_OPTION have_profiling;\n\nextern SHOW_COMP_OPTION have_ssl, have_symlink, have_dlopen;\nextern SHOW_COMP_OPTION have_query_cache;\nextern SHOW_COMP_OPTION have_geometry, have_rtree_keys;\nextern SHOW_COMP_OPTION have_crypt;\nextern SHOW_COMP_OPTION have_compress;\n\n/*\n  Prototypes for helper functions\n*/\n\nSHOW_VAR* enumerate_sys_vars(THD *thd, bool sorted, enum enum_var_type type);\n\nsys_var *find_sys_var(THD *thd, const char *str, uint length=0);\nint sql_set_variables(THD *thd, List<set_var_base> *var_list);\n\nbool fix_delay_key_write(sys_var *self, THD *thd, enum_var_type type);\n\nulonglong expand_sql_mode(ulonglong sql_mode);\nbool sql_mode_string_representation(THD *thd, ulonglong sql_mode, LEX_STRING *ls);\n\nextern sys_var *Sys_autocommit_ptr;\n\nCHARSET_INFO *get_old_charset_by_name(const char *old_name);\n\nint sys_var_init();\nint sys_var_add_options(DYNAMIC_ARRAY *long_options, int parse_flags);\nvoid sys_var_end(void);\n\n#endif\n\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql/sql_plugin.cc": "/*\n   Copyright (c) 2005, 2013, Oracle and/or its affiliates.\n   Copyright (c) 2010, 2014, SkySQL Ab.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA */\n\n#include \"sql_priv.h\"                         // SHOW_MY_BOOL\n#include \"unireg.h\"\n#include \"my_global.h\"                       // REQUIRED by m_string.h\n#include \"sql_class.h\"                          // set_var.h: THD\n#include \"sys_vars_shared.h\"\n#include \"sql_locale.h\"\n#include \"sql_plugin.h\"\n#include \"sql_parse.h\"          // check_table_access\n#include \"sql_base.h\"                           // close_mysql_tables\n#include \"key.h\"                                // key_copy\n#include \"sql_show.h\"           // remove_status_vars, add_status_vars\n#include \"strfunc.h\"            // find_set\n#include \"sql_acl.h\"                       // *_ACL\n#include \"records.h\"          // init_read_record, end_read_record\n#include <my_pthread.h>\n#include <my_getopt.h>\n#include \"sql_audit.h\"\n#include <mysql/plugin_auth.h>\n#include \"lock.h\"                               // MYSQL_LOCK_IGNORE_TIMEOUT\n#include <mysql/plugin_auth.h>\n#include \"sql_plugin_compat.h\"\n\n#define REPORT_TO_LOG  1\n#define REPORT_TO_USER 2\n\nextern struct st_maria_plugin *mysql_optional_plugins[];\nextern struct st_maria_plugin *mysql_mandatory_plugins[];\n\n/**\n  @note The order of the enumeration is critical.\n  @see construct_options\n*/\nconst char *global_plugin_typelib_names[]=\n  { \"OFF\", \"ON\", \"FORCE\", \"FORCE_PLUS_PERMANENT\", NULL };\nstatic TYPELIB global_plugin_typelib=\n  { array_elements(global_plugin_typelib_names)-1,\n    \"\", global_plugin_typelib_names, NULL };\n\n\nchar *opt_plugin_load= NULL;\nchar *opt_plugin_dir_ptr;\nchar opt_plugin_dir[FN_REFLEN];\nulong plugin_maturity;\n\n/*\n  not really needed now, this map will become essential when we add more\n  maturity levels. We cannot change existing maturity constants,\n  so the next value - even if it will be MariaDB_PLUGIN_MATURITY_VERY_BUGGY -\n  will inevitably be larger than MariaDB_PLUGIN_MATURITY_STABLE.\n  To be able to compare them we use this mapping array\n*/\nuint plugin_maturity_map[]=\n{ 0, 1, 2, 3, 4, 5, 6 };\n\n/*\n  When you ad a new plugin type, add both a string and make sure that the\n  init and deinit array are correctly updated.\n*/\nconst LEX_STRING plugin_type_names[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  { C_STRING_WITH_LEN(\"UDF\") },\n  { C_STRING_WITH_LEN(\"STORAGE ENGINE\") },\n  { C_STRING_WITH_LEN(\"FTPARSER\") },\n  { C_STRING_WITH_LEN(\"DAEMON\") },\n  { C_STRING_WITH_LEN(\"INFORMATION SCHEMA\") },\n  { C_STRING_WITH_LEN(\"AUDIT\") },\n  { C_STRING_WITH_LEN(\"REPLICATION\") },\n  { C_STRING_WITH_LEN(\"AUTHENTICATION\") }\n};\n\nextern int initialize_schema_table(st_plugin_int *plugin);\nextern int finalize_schema_table(st_plugin_int *plugin);\n\nextern int initialize_audit_plugin(st_plugin_int *plugin);\nextern int finalize_audit_plugin(st_plugin_int *plugin);\n\n/*\n  The number of elements in both plugin_type_initialize and\n  plugin_type_deinitialize should equal to the number of plugins\n  defined.\n*/\nplugin_type_init plugin_type_initialize[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  0,ha_initialize_handlerton,0,0,initialize_schema_table,\n  initialize_audit_plugin, 0, 0\n};\n\nplugin_type_init plugin_type_deinitialize[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  0,ha_finalize_handlerton,0,0,finalize_schema_table,\n  finalize_audit_plugin, 0, 0\n};\n\n#ifdef HAVE_DLOPEN\nstatic const char *plugin_interface_version_sym=\n                   \"_mysql_plugin_interface_version_\";\nstatic const char *sizeof_st_plugin_sym=\n                   \"_mysql_sizeof_struct_st_plugin_\";\nstatic const char *plugin_declarations_sym= \"_mysql_plugin_declarations_\";\nstatic int min_plugin_interface_version= MYSQL_PLUGIN_INTERFACE_VERSION & ~0xFF;\nstatic const char *maria_plugin_interface_version_sym=\n                   \"_maria_plugin_interface_version_\";\nstatic const char *maria_sizeof_st_plugin_sym=\n                   \"_maria_sizeof_struct_st_plugin_\";\nstatic const char *maria_plugin_declarations_sym=\n                   \"_maria_plugin_declarations_\";\nstatic int min_maria_plugin_interface_version=\n                   MARIA_PLUGIN_INTERFACE_VERSION & ~0xFF;\n#endif\n\n/* Note that 'int version' must be the first field of every plugin\n   sub-structure (plugin->info).\n*/\nstatic int min_plugin_info_interface_version[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  0x0000,\n  MYSQL_HANDLERTON_INTERFACE_VERSION,\n  MYSQL_FTPARSER_INTERFACE_VERSION,\n  MYSQL_DAEMON_INTERFACE_VERSION,\n  MYSQL_INFORMATION_SCHEMA_INTERFACE_VERSION,\n  MYSQL_AUDIT_INTERFACE_VERSION,\n  MYSQL_REPLICATION_INTERFACE_VERSION,\n  MIN_AUTHENTICATION_INTERFACE_VERSION\n};\nstatic int cur_plugin_info_interface_version[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  0x0000, /* UDF: not implemented */\n  MYSQL_HANDLERTON_INTERFACE_VERSION,\n  MYSQL_FTPARSER_INTERFACE_VERSION,\n  MYSQL_DAEMON_INTERFACE_VERSION,\n  MYSQL_INFORMATION_SCHEMA_INTERFACE_VERSION,\n  MYSQL_AUDIT_INTERFACE_VERSION,\n  MYSQL_REPLICATION_INTERFACE_VERSION,\n  MYSQL_AUTHENTICATION_INTERFACE_VERSION\n};\n\nstatic struct\n{\n  const char *plugin_name;\n  enum enum_plugin_load_option override;\n} override_plugin_load_policy[]={\n  /*\n    If the performance schema is compiled in,\n    treat the storage engine plugin as 'mandatory',\n    to suppress any plugin-level options such as '--performance-schema'.\n    This is specific to the performance schema, and is done on purpose:\n    the server-level option '--performance-schema' controls the overall\n    performance schema initialization, which consists of much more that\n    the underlying storage engine initialization.\n    See mysqld.cc, set_vars.cc.\n    Suppressing ways to interfere directly with the storage engine alone\n    prevents awkward situations where:\n    - the user wants the performance schema functionality, by using\n      '--enable-performance-schema' (the server option),\n    - yet disable explicitly a component needed for the functionality\n      to work, by using '--skip-performance-schema' (the plugin)\n  */\n  { \"performance_schema\", PLUGIN_FORCE },\n\n  /* we disable few other plugins by default */\n  { \"ndbcluster\", PLUGIN_OFF },\n  { \"feedback\", PLUGIN_OFF }\n};\n\n/* support for Services */\n\n#include \"sql_plugin_services.h\"\n\n/*\n  A mutex LOCK_plugin must be acquired before accessing the\n  following variables/structures.\n  We are always manipulating ref count, so a rwlock here is unneccessary.\n*/\nmysql_mutex_t LOCK_plugin;\nstatic DYNAMIC_ARRAY plugin_dl_array;\nstatic DYNAMIC_ARRAY plugin_array;\nstatic HASH plugin_hash[MYSQL_MAX_PLUGIN_TYPE_NUM];\nstatic MEM_ROOT plugin_mem_root;\nstatic bool reap_needed= false;\nstatic int plugin_array_version=0;\n\nstatic bool initialized= 0;\n\n/*\n  write-lock on LOCK_system_variables_hash is required before modifying\n  the following variables/structures\n*/\nstatic MEM_ROOT plugin_vars_mem_root;\nstatic uint global_variables_dynamic_size= 0;\nstatic HASH bookmark_hash;\n\n\n/*\n  hidden part of opaque value passed to variable check functions.\n  Used to provide a object-like structure to non C++ consumers.\n*/\nstruct st_item_value_holder : public st_mysql_value\n{\n  Item *item;\n};\n\n\n/*\n  stored in bookmark_hash, this structure is never removed from the\n  hash and is used to mark a single offset for a thd local variable\n  even if plugins have been uninstalled and reinstalled, repeatedly.\n  This structure is allocated from plugin_mem_root.\n\n  The key format is as follows:\n    1 byte         - variable type code\n    name_len bytes - variable name\n    '\\0'           - end of key\n*/\nstruct st_bookmark\n{\n  uint name_len;\n  int offset;\n  uint version;\n  char key[1];\n};\n\n\n/*\n  skeleton of a plugin variable - portion of structure common to all.\n*/\nstruct st_mysql_sys_var\n{\n  MYSQL_PLUGIN_VAR_HEADER;\n};\n\nstatic SHOW_TYPE pluginvar_show_type(st_mysql_sys_var *plugin_var);\n\n\n/*\n  sys_var class for access to all plugin variables visible to the user\n*/\nclass sys_var_pluginvar: public sys_var\n{\npublic:\n  struct st_plugin_int *plugin;\n  struct st_mysql_sys_var *plugin_var;\n  /**\n    variable name from whatever is hard-coded in the plugin source\n    and doesn't have pluginname- prefix is replaced by an allocated name\n    with a plugin prefix. When plugin is uninstalled we need to restore the\n    pointer to point to the hard-coded value, because plugin may be\n    installed/uninstalled many times without reloading the shared object.\n  */\n  const char *orig_pluginvar_name;\n\n  static void *operator new(size_t size, MEM_ROOT *mem_root)\n  { return (void*) alloc_root(mem_root, size); }\n  static void operator delete(void *ptr_arg,size_t size)\n  { TRASH(ptr_arg, size); }\n\n  sys_var_pluginvar(sys_var_chain *chain, const char *name_arg,\n                    struct st_mysql_sys_var *plugin_var_arg,\n                    struct st_plugin_int *plugin_arg)\n    :sys_var(chain, name_arg, plugin_var_arg->comment,\n             (plugin_var_arg->flags & PLUGIN_VAR_THDLOCAL ? SESSION : GLOBAL) |\n             (plugin_var_arg->flags & PLUGIN_VAR_READONLY ? READONLY : 0),\n             0, -1, NO_ARG, pluginvar_show_type(plugin_var_arg), 0, 0,\n             VARIABLE_NOT_IN_BINLOG, NULL, NULL, NULL),\n    plugin(plugin_arg), plugin_var(plugin_var_arg),\n    orig_pluginvar_name(plugin_var_arg->name)\n  { plugin_var->name= name_arg; }\n  sys_var_pluginvar *cast_pluginvar() { return this; }\n  bool check_update_type(Item_result type);\n  SHOW_TYPE show_type();\n  uchar* real_value_ptr(THD *thd, enum_var_type type);\n  TYPELIB* plugin_var_typelib(void);\n  uchar* do_value_ptr(THD *thd, enum_var_type type, LEX_STRING *base);\n  uchar* session_value_ptr(THD *thd, LEX_STRING *base)\n  { return do_value_ptr(thd, OPT_SESSION, base); }\n  uchar* global_value_ptr(THD *thd, LEX_STRING *base)\n  { return do_value_ptr(thd, OPT_GLOBAL, base); }\n  bool do_check(THD *thd, set_var *var);\n  virtual void session_save_default(THD *thd, set_var *var) {}\n  virtual void global_save_default(THD *thd, set_var *var) {}\n  bool session_update(THD *thd, set_var *var);\n  bool global_update(THD *thd, set_var *var);\n};\n\n\n/* prototypes */\nstatic void plugin_load(MEM_ROOT *tmp_root);\nstatic bool plugin_load_list(MEM_ROOT *, const char *);\nstatic int test_plugin_options(MEM_ROOT *, struct st_plugin_int *,\n                               int *, char **);\nstatic bool register_builtin(struct st_maria_plugin *, struct st_plugin_int *,\n                             struct st_plugin_int **);\nstatic void unlock_variables(THD *thd, struct system_variables *vars);\nstatic void cleanup_variables(THD *thd, struct system_variables *vars);\nstatic void plugin_vars_free_values(sys_var *vars);\nstatic void restore_pluginvar_names(sys_var *first);\nstatic void plugin_opt_set_limits(struct my_option *,\n                                  const struct st_mysql_sys_var *);\nstatic plugin_ref intern_plugin_lock(LEX *lex, plugin_ref plugin);\nstatic void intern_plugin_unlock(LEX *lex, plugin_ref plugin);\nstatic void reap_plugins(void);\n\nstatic void report_error(int where_to, uint error, ...)\n{\n  va_list args;\n  DBUG_ASSERT(where_to & (REPORT_TO_USER | REPORT_TO_LOG));\n  if (where_to & REPORT_TO_USER)\n  {\n    va_start(args, error);\n    my_printv_error(error, ER(error), MYF(0), args);\n    va_end(args);\n  }\n  if (where_to & REPORT_TO_LOG)\n  {\n    va_start(args, error);\n    error_log_print(ERROR_LEVEL, ER_DEFAULT(error), args);\n    va_end(args);\n  }\n}\n\n/**\n   Check if the provided path is valid in the sense that it does cause\n   a relative reference outside the directory.\n\n   @note Currently, this function only check if there are any\n   characters in FN_DIRSEP in the string, but it might change in the\n   future.\n\n   @code\n   check_valid_path(\"../foo.so\") -> true\n   check_valid_path(\"foo.so\") -> false\n   @endcode\n */\nbool check_valid_path(const char *path, size_t len)\n{\n  size_t prefix= my_strcspn(files_charset_info, path, path + len, FN_DIRSEP);\n  return  prefix < len;\n}\n\nstatic void fix_dl_name(MEM_ROOT *root, LEX_STRING *dl)\n{\n  const size_t so_ext_len= sizeof(SO_EXT) - 1;\n  if (my_strcasecmp(&my_charset_latin1, dl->str + dl->length - so_ext_len,\n                    SO_EXT))\n  {\n    char *s= (char*)alloc_root(root, dl->length + so_ext_len + 1);\n    memcpy(s, dl->str, dl->length);\n    strcpy(s + dl->length, SO_EXT);\n    dl->str= s;\n    dl->length+= so_ext_len;\n  }\n}\n\n\n/****************************************************************************\n  Value type thunks, allows the C world to play in the C++ world\n****************************************************************************/\n\nstatic int item_value_type(struct st_mysql_value *value)\n{\n  switch (((st_item_value_holder*)value)->item->result_type()) {\n  case INT_RESULT:\n    return MYSQL_VALUE_TYPE_INT;\n  case REAL_RESULT:\n    return MYSQL_VALUE_TYPE_REAL;\n  default:\n    return MYSQL_VALUE_TYPE_STRING;\n  }\n}\n\nstatic const char *item_val_str(struct st_mysql_value *value,\n                                char *buffer, int *length)\n{\n  String str(buffer, *length, system_charset_info), *res;\n  if (!(res= ((st_item_value_holder*)value)->item->val_str(&str)))\n    return NULL;\n  *length= res->length();\n  if (res->c_ptr_quick() == buffer)\n    return buffer;\n\n  /*\n    Lets be nice and create a temporary string since the\n    buffer was too small\n  */\n  return current_thd->strmake(res->ptr(), res->length());\n}\n\n\nstatic int item_val_int(struct st_mysql_value *value, long long *buf)\n{\n  Item *item= ((st_item_value_holder*)value)->item;\n  *buf= item->val_int();\n  if (item->is_null())\n    return 1;\n  return 0;\n}\n\nstatic int item_is_unsigned(struct st_mysql_value *value)\n{\n  Item *item= ((st_item_value_holder*)value)->item;\n  return item->unsigned_flag;\n}\n\nstatic int item_val_real(struct st_mysql_value *value, double *buf)\n{\n  Item *item= ((st_item_value_holder*)value)->item;\n  *buf= item->val_real();\n  if (item->is_null())\n    return 1;\n  return 0;\n}\n\n\n/****************************************************************************\n  Plugin support code\n****************************************************************************/\n\n#ifdef HAVE_DLOPEN\n\nstatic struct st_plugin_dl *plugin_dl_find(const LEX_STRING *dl)\n{\n  uint i;\n  struct st_plugin_dl *tmp;\n  DBUG_ENTER(\"plugin_dl_find\");\n  for (i= 0; i < plugin_dl_array.elements; i++)\n  {\n    tmp= *dynamic_element(&plugin_dl_array, i, struct st_plugin_dl **);\n    if (tmp->ref_count &&\n        ! my_strnncoll(files_charset_info,\n                       (const uchar *)dl->str, dl->length,\n                       (const uchar *)tmp->dl.str, tmp->dl.length))\n      DBUG_RETURN(tmp);\n  }\n  DBUG_RETURN(0);\n}\n\n\nstatic st_plugin_dl *plugin_dl_insert_or_reuse(struct st_plugin_dl *plugin_dl)\n{\n  uint i;\n  struct st_plugin_dl *tmp;\n  DBUG_ENTER(\"plugin_dl_insert_or_reuse\");\n  for (i= 0; i < plugin_dl_array.elements; i++)\n  {\n    tmp= *dynamic_element(&plugin_dl_array, i, struct st_plugin_dl **);\n    if (! tmp->ref_count)\n    {\n      memcpy(tmp, plugin_dl, sizeof(struct st_plugin_dl));\n      DBUG_RETURN(tmp);\n    }\n  }\n  if (insert_dynamic(&plugin_dl_array, (uchar*)&plugin_dl))\n    DBUG_RETURN(0);\n  tmp= *dynamic_element(&plugin_dl_array, plugin_dl_array.elements - 1,\n                        struct st_plugin_dl **)=\n      (struct st_plugin_dl *) memdup_root(&plugin_mem_root, (uchar*)plugin_dl,\n                                           sizeof(struct st_plugin_dl));\n  DBUG_RETURN(tmp);\n}\n#endif /* HAVE_DLOPEN */\n\n\nstatic inline void free_plugin_mem(struct st_plugin_dl *p)\n{\n#ifdef HAVE_DLOPEN\n  if (p->handle)\n    dlclose(p->handle);\n#endif\n  my_free(p->dl.str);\n  if (p->allocated)\n    my_free(p->plugins);\n}\n\n\n/**\n  Reads data from mysql plugin interface\n\n  @param plugin_dl       Structure where the data should be put\n  @param sym             Reverence on version info\n  @param dlpath          Path to the module\n  @param report          What errors should be reported\n\n  @retval FALSE OK\n  @retval TRUE  ERROR\n*/\n\n#ifdef HAVE_DLOPEN\nstatic my_bool read_mysql_plugin_info(struct st_plugin_dl *plugin_dl,\n                                      void *sym, char *dlpath,\n                                      int report)\n{\n  DBUG_ENTER(\"read_maria_plugin_info\");\n  /* Determine interface version */\n  if (!sym)\n  {\n    free_plugin_mem(plugin_dl);\n    report_error(report, ER_CANT_FIND_DL_ENTRY, plugin_interface_version_sym);\n    DBUG_RETURN(TRUE);\n  }\n  plugin_dl->mariaversion= 0;\n  plugin_dl->mysqlversion= *(int *)sym;\n  /* Versioning */\n  if (plugin_dl->mysqlversion < min_plugin_interface_version ||\n      (plugin_dl->mysqlversion >> 8) > (MYSQL_PLUGIN_INTERFACE_VERSION >> 8))\n  {\n    free_plugin_mem(plugin_dl);\n    report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, 0,\n                 \"plugin interface version mismatch\");\n    DBUG_RETURN(TRUE);\n  }\n  /* Find plugin declarations */\n  if (!(sym= dlsym(plugin_dl->handle, plugin_declarations_sym)))\n  {\n    free_plugin_mem(plugin_dl);\n    report_error(report, ER_CANT_FIND_DL_ENTRY, plugin_declarations_sym);\n    DBUG_RETURN(TRUE);\n  }\n\n  /* convert mysql declaration to maria one */\n  {\n    int i;\n    uint sizeof_st_plugin;\n    struct st_mysql_plugin *old;\n    struct st_maria_plugin *cur;\n    char *ptr= (char *)sym;\n\n    if ((sym= dlsym(plugin_dl->handle, sizeof_st_plugin_sym)))\n      sizeof_st_plugin= *(int *)sym;\n    else\n    {\n      DBUG_ASSERT(min_plugin_interface_version == 0);\n      sizeof_st_plugin= (int)offsetof(struct st_mysql_plugin, version);\n    }\n\n    for (i= 0;\n         ((struct st_mysql_plugin *)(ptr + i * sizeof_st_plugin))->info;\n         i++)\n      /* no op */;\n\n    cur= (struct st_maria_plugin*)\n          my_malloc((i + 1) * sizeof(struct st_maria_plugin),\n                    MYF(MY_ZEROFILL|MY_WME));\n    if (!cur)\n    {\n      free_plugin_mem(plugin_dl);\n      report_error(report, ER_OUTOFMEMORY,\n                   static_cast<int>(plugin_dl->dl.length));\n      DBUG_RETURN(TRUE);\n    }\n    /*\n      All st_plugin fields not initialized in the plugin explicitly, are\n      set to 0. It matches C standard behaviour for struct initializers that\n      have less values than the struct definition.\n    */\n    for (i=0;\n         (old= (struct st_mysql_plugin *)(ptr + i * sizeof_st_plugin))->info;\n         i++)\n    {\n\n      cur[i].type= old->type;\n      cur[i].info= old->info;\n      cur[i].name= old->name;\n      cur[i].author= old->author;\n      cur[i].descr= old->descr;\n      cur[i].license= old->license;\n      cur[i].init= old->init;\n      cur[i].deinit= old->deinit;\n      cur[i].version= old->version;\n      cur[i].status_vars= old->status_vars;\n      cur[i].system_vars= old->system_vars;\n      /*\n        Something like this should be added to process\n        new mysql plugin versions:\n        if (plugin_dl->mysqlversion > 0x0101)\n        {\n           cur[i].newfield= CONSTANT_MEANS_UNKNOWN;\n        }\n        else\n        {\n           cur[i].newfield= old->newfield;\n        }\n      */\n      /* Maria only fields */\n      cur[i].version_info= \"Unknown\";\n      cur[i].maturity= MariaDB_PLUGIN_MATURITY_UNKNOWN;\n    }\n    plugin_dl->allocated= true;\n    plugin_dl->plugins= (struct st_maria_plugin *)cur;\n  }\n\n  DBUG_RETURN(FALSE);\n}\n\n\n/**\n  Reads data from maria plugin interface\n\n  @param plugin_dl       Structure where the data should be put\n  @param sym             Reverence on version info\n  @param dlpath          Path to the module\n  @param report          what errors should be reported\n\n  @retval FALSE OK\n  @retval TRUE  ERROR\n*/\n\nstatic my_bool read_maria_plugin_info(struct st_plugin_dl *plugin_dl,\n                                      void *sym, char *dlpath,\n                                      int report)\n{\n  DBUG_ENTER(\"read_maria_plugin_info\");\n\n  /* Determine interface version */\n  if (!(sym))\n  {\n    /*\n      Actually this branch impossible because in case of absence of maria\n      version we try mysql version.\n    */\n    free_plugin_mem(plugin_dl);\n    report_error(report, ER_CANT_FIND_DL_ENTRY,\n                 maria_plugin_interface_version_sym);\n    DBUG_RETURN(TRUE);\n  }\n  plugin_dl->mariaversion= *(int *)sym;\n  plugin_dl->mysqlversion= 0;\n  /* Versioning */\n  if (plugin_dl->mariaversion < min_maria_plugin_interface_version ||\n      (plugin_dl->mariaversion >> 8) > (MARIA_PLUGIN_INTERFACE_VERSION >> 8))\n  {\n    free_plugin_mem(plugin_dl);\n    report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, ENOEXEC,\n                 \"plugin interface version mismatch\");\n    DBUG_RETURN(TRUE);\n  }\n  /* Find plugin declarations */\n  if (!(sym= dlsym(plugin_dl->handle, maria_plugin_declarations_sym)))\n  {\n    free_plugin_mem(plugin_dl);\n    report_error(report, ER_CANT_FIND_DL_ENTRY, maria_plugin_declarations_sym);\n    DBUG_RETURN(TRUE);\n  }\n  if (plugin_dl->mariaversion != MARIA_PLUGIN_INTERFACE_VERSION)\n  {\n    uint sizeof_st_plugin;\n    struct st_maria_plugin *old, *cur;\n    char *ptr= (char *)sym;\n\n    if ((sym= dlsym(plugin_dl->handle, maria_sizeof_st_plugin_sym)))\n      sizeof_st_plugin= *(int *)sym;\n    else\n    {\n      free_plugin_mem(plugin_dl);\n      report_error(report, ER_CANT_FIND_DL_ENTRY, maria_sizeof_st_plugin_sym);\n      DBUG_RETURN(TRUE);\n    }\n\n    if (sizeof_st_plugin != sizeof(st_mysql_plugin))\n    {\n      int i;\n      for (i= 0;\n           ((struct st_maria_plugin *)(ptr + i * sizeof_st_plugin))->info;\n           i++)\n        /* no op */;\n\n      cur= (struct st_maria_plugin*)\n        my_malloc((i + 1) * sizeof(struct st_maria_plugin),\n                  MYF(MY_ZEROFILL|MY_WME));\n      if (!cur)\n      {\n        free_plugin_mem(plugin_dl);\n        report_error(report, ER_OUTOFMEMORY,\n                     static_cast<int>(plugin_dl->dl.length));\n        DBUG_RETURN(TRUE);\n      }\n      /*\n        All st_plugin fields not initialized in the plugin explicitly, are\n        set to 0. It matches C standard behaviour for struct initializers that\n        have less values than the struct definition.\n      */\n      for (i=0;\n           (old= (struct st_maria_plugin *)(ptr + i * sizeof_st_plugin))->info;\n           i++)\n        memcpy(cur + i, old, min(sizeof(cur[i]), sizeof_st_plugin));\n\n      sym= cur;\n      plugin_dl->allocated= true;\n    }\n    else\n      sym= ptr;\n  }\n  plugin_dl->plugins= (struct st_maria_plugin *)sym;\n\n  DBUG_RETURN(FALSE);\n}\n#endif /* HAVE_DLOPEN */\n\nstatic st_plugin_dl *plugin_dl_add(const LEX_STRING *dl, int report)\n{\n#ifdef HAVE_DLOPEN\n  char dlpath[FN_REFLEN];\n  uint plugin_dir_len, dummy_errors, dlpathlen, i;\n  struct st_plugin_dl *tmp, plugin_dl;\n  void *sym;\n  DBUG_ENTER(\"plugin_dl_add\");\n  DBUG_PRINT(\"enter\", (\"dl->str: '%s', dl->length: %d\",\n                       dl->str, (int) dl->length));\n  plugin_dir_len= strlen(opt_plugin_dir);\n  /*\n    Ensure that the dll doesn't have a path.\n    This is done to ensure that only approved libraries from the\n    plugin directory are used (to make this even remotely secure).\n  */\n  if (check_valid_path(dl->str, dl->length) ||\n      check_string_char_length((LEX_STRING *) dl, \"\", NAME_CHAR_LEN,\n                               system_charset_info, 1) ||\n      plugin_dir_len + dl->length + 1 >= FN_REFLEN)\n  {\n    report_error(report, ER_UDF_NO_PATHS);\n    DBUG_RETURN(0);\n  }\n  /* If this dll is already loaded just increase ref_count. */\n  if ((tmp= plugin_dl_find(dl)))\n  {\n    tmp->ref_count++;\n    DBUG_RETURN(tmp);\n  }\n  bzero(&plugin_dl, sizeof(plugin_dl));\n  /* Compile dll path */\n  strxnmov(dlpath, sizeof(dlpath) - 1, opt_plugin_dir, \"/\", dl->str, NullS);\n  (void) unpack_filename(dlpath, dlpath);\n  plugin_dl.ref_count= 1;\n  /* Open new dll handle */\n  if (!(plugin_dl.handle= dlopen(dlpath, RTLD_NOW)))\n  {\n    const char *errmsg=dlerror();\n    dlpathlen= strlen(dlpath);\n    if (!strncmp(dlpath, errmsg, dlpathlen))\n    { // if errmsg starts from dlpath, trim this prefix.\n      errmsg+=dlpathlen;\n      if (*errmsg == ':') errmsg++;\n      if (*errmsg == ' ') errmsg++;\n    }\n    report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, errno, errmsg);\n    DBUG_RETURN(0);\n  }\n\n  /* Checks which plugin interface present and reads info */\n  if (!(sym= dlsym(plugin_dl.handle, maria_plugin_interface_version_sym)))\n  {\n    if (read_mysql_plugin_info(&plugin_dl,\n                               dlsym(plugin_dl.handle,\n                                     plugin_interface_version_sym),\n                               dlpath,\n                               report))\n      DBUG_RETURN(0);\n  }\n  else\n  {\n    if (read_maria_plugin_info(&plugin_dl, sym, dlpath, report))\n      DBUG_RETURN(0);\n  }\n\n  /* link the services in */\n  for (i= 0; i < array_elements(list_of_services); i++)\n  {\n    if ((sym= dlsym(plugin_dl.handle, list_of_services[i].name)))\n    {\n      uint ver= (uint)(intptr)*(void**)sym;\n      if (ver > list_of_services[i].version ||\n        (ver >> 8) < (list_of_services[i].version >> 8))\n      {\n        char buf[MYSQL_ERRMSG_SIZE];\n        my_snprintf(buf, sizeof(buf),\n                    \"service '%s' interface version mismatch\",\n                    list_of_services[i].name);\n        report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, ENOEXEC, buf);\n        DBUG_RETURN(0);\n      }\n      *(void**)sym= list_of_services[i].service;\n    }\n  }\n\n  /* Duplicate and convert dll name */\n  plugin_dl.dl.length= dl->length * files_charset_info->mbmaxlen + 1;\n  if (! (plugin_dl.dl.str= (char*) my_malloc(plugin_dl.dl.length, MYF(0))))\n  {\n    free_plugin_mem(&plugin_dl);\n    report_error(report, ER_OUTOFMEMORY,\n                 static_cast<int>(plugin_dl.dl.length));\n    DBUG_RETURN(0);\n  }\n  plugin_dl.dl.length= copy_and_convert(plugin_dl.dl.str, plugin_dl.dl.length,\n    files_charset_info, dl->str, dl->length, system_charset_info,\n    &dummy_errors);\n  plugin_dl.dl.str[plugin_dl.dl.length]= 0;\n  /* Add this dll to array */\n  if (! (tmp= plugin_dl_insert_or_reuse(&plugin_dl)))\n  {\n    free_plugin_mem(&plugin_dl);\n    report_error(report, ER_OUTOFMEMORY,\n                 static_cast<int>(sizeof(struct st_plugin_dl)));\n    DBUG_RETURN(0);\n  }\n  DBUG_RETURN(tmp);\n#else\n  DBUG_ENTER(\"plugin_dl_add\");\n  report_error(report, ER_FEATURE_DISABLED, \"plugin\", \"HAVE_DLOPEN\");\n  DBUG_RETURN(0);\n#endif\n}\n\n\nstatic void plugin_dl_del(const LEX_STRING *dl)\n{\n#ifdef HAVE_DLOPEN\n  uint i;\n  DBUG_ENTER(\"plugin_dl_del\");\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  for (i= 0; i < plugin_dl_array.elements; i++)\n  {\n    struct st_plugin_dl *tmp= *dynamic_element(&plugin_dl_array, i,\n                                               struct st_plugin_dl **);\n    if (tmp->ref_count &&\n        ! my_strnncoll(files_charset_info,\n                       (const uchar *)dl->str, dl->length,\n                       (const uchar *)tmp->dl.str, tmp->dl.length))\n    {\n      /* Do not remove this element, unless no other plugin uses this dll. */\n      if (! --tmp->ref_count)\n      {\n        free_plugin_mem(tmp);\n        bzero(tmp, sizeof(struct st_plugin_dl));\n      }\n      break;\n    }\n  }\n  DBUG_VOID_RETURN;\n#endif\n}\n\n\nstatic struct st_plugin_int *plugin_find_internal(const LEX_STRING *name, int type)\n{\n  uint i;\n  DBUG_ENTER(\"plugin_find_internal\");\n  if (! initialized)\n    DBUG_RETURN(0);\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (type == MYSQL_ANY_PLUGIN)\n  {\n    for (i= 0; i < MYSQL_MAX_PLUGIN_TYPE_NUM; i++)\n    {\n      struct st_plugin_int *plugin= (st_plugin_int *)\n        my_hash_search(&plugin_hash[i], (const uchar *)name->str, name->length);\n      if (plugin)\n        DBUG_RETURN(plugin);\n    }\n  }\n  else\n    DBUG_RETURN((st_plugin_int *)\n        my_hash_search(&plugin_hash[type], (const uchar *)name->str,\n                       name->length));\n  DBUG_RETURN(0);\n}\n\n\nstatic SHOW_COMP_OPTION plugin_status(const LEX_STRING *name, int type)\n{\n  SHOW_COMP_OPTION rc= SHOW_OPTION_NO;\n  struct st_plugin_int *plugin;\n  DBUG_ENTER(\"plugin_is_ready\");\n  mysql_mutex_lock(&LOCK_plugin);\n  if ((plugin= plugin_find_internal(name, type)))\n  {\n    rc= SHOW_OPTION_DISABLED;\n    if (plugin->state == PLUGIN_IS_READY)\n      rc= SHOW_OPTION_YES;\n  }\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_RETURN(rc);\n}\n\n\nbool plugin_is_ready(const LEX_STRING *name, int type)\n{\n  bool rc= FALSE;\n  if (plugin_status(name, type) == SHOW_OPTION_YES)\n    rc= TRUE;\n  return rc;\n}\n\n\nSHOW_COMP_OPTION plugin_status(const char *name, size_t len, int type)\n{\n  LEX_STRING plugin_name= { (char *) name, len };\n  return plugin_status(&plugin_name, type);\n}\n\n\nstatic plugin_ref intern_plugin_lock(LEX *lex, plugin_ref rc)\n{\n  st_plugin_int *pi= plugin_ref_to_int(rc);\n  DBUG_ENTER(\"intern_plugin_lock\");\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (pi->state & (PLUGIN_IS_READY | PLUGIN_IS_UNINITIALIZED))\n  {\n    plugin_ref plugin;\n#ifdef DBUG_OFF\n    /*\n      In optimized builds we don't do reference counting for built-in\n      (plugin->plugin_dl == 0) plugins.\n    */\n    if (!pi->plugin_dl)\n      DBUG_RETURN(pi);\n\n    plugin= pi;\n#else\n    /*\n      For debugging, we do an additional malloc which allows the\n      memory manager and/or valgrind to track locked references and\n      double unlocks to aid resolving reference counting problems.\n    */\n    if (!(plugin= (plugin_ref) my_malloc(sizeof(pi), MYF(MY_WME))))\n      DBUG_RETURN(NULL);\n\n    *plugin= pi;\n#endif\n    pi->ref_count++;\n    DBUG_PRINT(\"lock\",(\"thd: 0x%lx  plugin: \\\"%s\\\" LOCK ref_count: %d\",\n                       (long) current_thd, pi->name.str, pi->ref_count));\n\n    if (lex)\n      insert_dynamic(&lex->plugins, (uchar*)&plugin);\n    DBUG_RETURN(plugin);\n  }\n  DBUG_RETURN(NULL);\n}\n\n\nplugin_ref plugin_lock(THD *thd, plugin_ref ptr)\n{\n  LEX *lex= thd ? thd->lex : 0;\n  plugin_ref rc;\n  DBUG_ENTER(\"plugin_lock\");\n\n#ifdef DBUG_OFF\n  /*\n    In optimized builds we don't do reference counting for built-in\n    (plugin->plugin_dl == 0) plugins.\n\n    Note that we access plugin->plugin_dl outside of LOCK_plugin, and for\n    dynamic plugins a 'plugin' could correspond to plugin that was unloaded\n    meanwhile!  But because st_plugin_int is always allocated on\n    plugin_mem_root, the pointer can never be invalid - the memory is never\n    freed.\n    Of course, the memory that 'plugin' points to can be overwritten by\n    another plugin being loaded, but plugin->plugin_dl can never change\n    from zero to non-zero or vice versa.\n    That is, it's always safe to check for plugin->plugin_dl==0 even\n    without a mutex.\n  */\n  if (! plugin_dlib(ptr))\n  {\n    plugin_ref_to_int(ptr)->locks_total++;\n    DBUG_RETURN(ptr);\n  }\n#endif\n  mysql_mutex_lock(&LOCK_plugin);\n  plugin_ref_to_int(ptr)->locks_total++;\n  rc= intern_plugin_lock(lex, ptr);\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_RETURN(rc);\n}\n\n\nplugin_ref plugin_lock_by_name(THD *thd, const LEX_STRING *name, int type)\n{\n  LEX *lex= thd ? thd->lex : 0;\n  plugin_ref rc= NULL;\n  st_plugin_int *plugin;\n  DBUG_ENTER(\"plugin_lock_by_name\");\n  mysql_mutex_lock(&LOCK_plugin);\n  if ((plugin= plugin_find_internal(name, type)))\n    rc= intern_plugin_lock(lex, plugin_int_to_ref(plugin));\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_RETURN(rc);\n}\n\n\nstatic st_plugin_int *plugin_insert_or_reuse(struct st_plugin_int *plugin)\n{\n  uint i;\n  struct st_plugin_int *tmp;\n  DBUG_ENTER(\"plugin_insert_or_reuse\");\n  for (i= 0; i < plugin_array.elements; i++)\n  {\n    tmp= *dynamic_element(&plugin_array, i, struct st_plugin_int **);\n    if (tmp->state == PLUGIN_IS_FREED)\n    {\n      memcpy(tmp, plugin, sizeof(struct st_plugin_int));\n      DBUG_RETURN(tmp);\n    }\n  }\n  if (insert_dynamic(&plugin_array, (uchar*)&plugin))\n    DBUG_RETURN(0);\n  tmp= *dynamic_element(&plugin_array, plugin_array.elements - 1,\n                        struct st_plugin_int **)=\n       (struct st_plugin_int *) memdup_root(&plugin_mem_root, (uchar*)plugin,\n                                            sizeof(struct st_plugin_int));\n  DBUG_RETURN(tmp);\n}\n\n\n/*\n  NOTE\n    Requires that a write-lock is held on LOCK_system_variables_hash\n*/\nstatic bool plugin_add(MEM_ROOT *tmp_root,\n                       const LEX_STRING *name, LEX_STRING *dl, int report)\n{\n  struct st_plugin_int tmp;\n  struct st_maria_plugin *plugin;\n  uint oks= 0, errs= 0;\n  DBUG_ENTER(\"plugin_add\");\n  if (name->str && plugin_find_internal(name, MYSQL_ANY_PLUGIN))\n  {\n    report_error(report, ER_UDF_EXISTS, name->str);\n    DBUG_RETURN(TRUE);\n  }\n  /* Clear the whole struct to catch future extensions. */\n  bzero((char*) &tmp, sizeof(tmp));\n  fix_dl_name(tmp_root, dl);\n  if (! (tmp.plugin_dl= plugin_dl_add(dl, report)))\n    DBUG_RETURN(TRUE);\n  /* Find plugin by name */\n  for (plugin= tmp.plugin_dl->plugins; plugin->info; plugin++)\n  {\n    tmp.name.str= (char *)plugin->name;\n    tmp.name.length= strlen(plugin->name);\n\n    if (plugin->type < 0 || plugin->type >= MYSQL_MAX_PLUGIN_TYPE_NUM)\n      continue; // invalid plugin\n\n    if (name->str && my_strnncoll(system_charset_info,\n                                  (const uchar *)name->str, name->length,\n                                  (const uchar *)tmp.name.str, tmp.name.length))\n      continue; // plugin name doesn't match\n\n    if (!name->str && plugin_find_internal(&tmp.name, MYSQL_ANY_PLUGIN))\n      continue; // already installed\n\n      struct st_plugin_int *tmp_plugin_ptr;\n      if (*(int*)plugin->info <\n          min_plugin_info_interface_version[plugin->type] ||\n          ((*(int*)plugin->info) >> 8) >\n          (cur_plugin_info_interface_version[plugin->type] >> 8))\n      {\n        char buf[256];\n        strxnmov(buf, sizeof(buf) - 1, \"API version for \",\n                 plugin_type_names[plugin->type].str,\n                 \" plugin \", tmp.name.str,\n                 \" not supported by this version of the server\", NullS);\n        report_error(report, ER_CANT_OPEN_LIBRARY, dl->str, ENOEXEC, buf);\n        goto err;\n      }\n      if (plugin_maturity_map[plugin->maturity] < plugin_maturity)\n      {\n        char buf[256];\n        strxnmov(buf, sizeof(buf) - 1, \"Loading of \",\n                 plugin_maturity_names[plugin->maturity],\n                 \" plugin \", tmp.name.str,\n                 \" is prohibited by --plugin-maturity=\",\n                 plugin_maturity_names[plugin_maturity],\n                 NullS);\n        report_error(report, ER_CANT_OPEN_LIBRARY, dl->str, EPERM, buf);\n        goto err;\n      }\n      tmp.plugin= plugin;\n      tmp.ref_count= 0;\n      tmp.state= PLUGIN_IS_UNINITIALIZED;\n      tmp.load_option= PLUGIN_ON;\n\n      if (!(tmp_plugin_ptr= plugin_insert_or_reuse(&tmp)))\n        goto err;\n      plugin_array_version++;\n      if (my_hash_insert(&plugin_hash[plugin->type], (uchar*)tmp_plugin_ptr))\n        tmp_plugin_ptr->state= PLUGIN_IS_FREED;\n      init_alloc_root(&tmp_plugin_ptr->mem_root, 4096, 4096);\n\n    if (name->str)\n      DBUG_RETURN(FALSE); // all done\n\n    oks++;\n    tmp.plugin_dl->ref_count++;\n    continue; // otherwise - go on\n\nerr:\n    errs++;\n    if (name->str)\n      break;\n  }\n\n  if (errs == 0 && oks == 0) // no plugin was found\n    report_error(report, ER_CANT_FIND_DL_ENTRY, name->str);\n\n  plugin_dl_del(dl);\n  DBUG_RETURN(errs > 0 || oks == 0);\n}\n\n\nstatic void plugin_deinitialize(struct st_plugin_int *plugin, bool ref_check)\n{\n  /*\n    we don't want to hold the LOCK_plugin mutex as it may cause\n    deinitialization to deadlock if plugins have worker threads\n    with plugin locks\n  */\n  mysql_mutex_assert_not_owner(&LOCK_plugin);\n\n  if (plugin->plugin->status_vars)\n  {\n#ifdef FIX_LATER\n    /**\n      @todo\n      unfortunately, status variables were introduced without a\n      pluginname_ namespace, that is pluginname_ was not added automatically\n      to status variable names. It should be fixed together with the next\n      incompatible API change.\n    */\n    SHOW_VAR array[2]= {\n      {plugin->plugin->name, (char*)plugin->plugin->status_vars, SHOW_ARRAY},\n      {0, 0, SHOW_UNDEF}\n    };\n    remove_status_vars(array);\n#else\n    remove_status_vars(plugin->plugin->status_vars);\n#endif /* FIX_LATER */\n  }\n\n  if (plugin_type_deinitialize[plugin->plugin->type])\n  {\n    if ((*plugin_type_deinitialize[plugin->plugin->type])(plugin))\n    {\n      sql_print_error(\"Plugin '%s' of type %s failed deinitialization\",\n                      plugin->name.str, plugin_type_names[plugin->plugin->type].str);\n    }\n  }\n  else if (plugin->plugin->deinit)\n  {\n    DBUG_PRINT(\"info\", (\"Deinitializing plugin: '%s'\", plugin->name.str));\n    if (plugin->plugin->deinit(plugin))\n    {\n      DBUG_PRINT(\"warning\", (\"Plugin '%s' deinit function returned error.\",\n                             plugin->name.str));\n    }\n  }\n  plugin->state= PLUGIN_IS_UNINITIALIZED;\n\n  /* maintain the obsolete @@have_innodb variable */\n  if (!my_strcasecmp(&my_charset_latin1, plugin->name.str, \"InnoDB\"))\n    have_innodb= SHOW_OPTION_DISABLED;\n\n  /*\n    We do the check here because NDB has a worker THD which doesn't\n    exit until NDB is shut down.\n  */\n  if (ref_check && plugin->ref_count)\n    sql_print_error(\"Plugin '%s' has ref_count=%d after deinitialization.\",\n                    plugin->name.str, plugin->ref_count);\n\n  restore_pluginvar_names(plugin->system_vars);\n}\n\nstatic void plugin_del(struct st_plugin_int *plugin)\n{\n  DBUG_ENTER(\"plugin_del\");\n  mysql_mutex_assert_owner(&LOCK_plugin);\n  /* Free allocated strings before deleting the plugin. */\n  plugin_vars_free_values(plugin->system_vars);\n  my_hash_delete(&plugin_hash[plugin->plugin->type], (uchar*)plugin);\n  if (plugin->plugin_dl)\n    plugin_dl_del(&plugin->plugin_dl->dl);\n  plugin->state= PLUGIN_IS_FREED;\n  plugin_array_version++;\n  free_root(&plugin->mem_root, MYF(0));\n  DBUG_VOID_RETURN;\n}\n\nstatic void reap_plugins(void)\n{\n  uint count, idx;\n  struct st_plugin_int *plugin, **reap, **list;\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (!reap_needed)\n    return;\n\n  reap_needed= false;\n  count= plugin_array.elements;\n  reap= (struct st_plugin_int **)my_alloca(sizeof(plugin)*(count+1));\n  *(reap++)= NULL;\n\n  for (idx= 0; idx < count; idx++)\n  {\n    plugin= *dynamic_element(&plugin_array, idx, struct st_plugin_int **);\n    if (plugin->state == PLUGIN_IS_DELETED && !plugin->ref_count)\n    {\n      /* change the status flag to prevent reaping by another thread */\n      plugin->state= PLUGIN_IS_DYING;\n      *(reap++)= plugin;\n    }\n  }\n\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  list= reap;\n  while ((plugin= *(--list)))\n    plugin_deinitialize(plugin, true);\n\n  mysql_mutex_lock(&LOCK_plugin);\n\n  while ((plugin= *(--reap)))\n    plugin_del(plugin);\n\n  my_afree(reap);\n}\n\nstatic void intern_plugin_unlock(LEX *lex, plugin_ref plugin)\n{\n  int i;\n  st_plugin_int *pi;\n  DBUG_ENTER(\"intern_plugin_unlock\");\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (!plugin)\n    DBUG_VOID_RETURN;\n\n  pi= plugin_ref_to_int(plugin);\n\n#ifdef DBUG_OFF\n  if (!pi->plugin_dl)\n    DBUG_VOID_RETURN;\n#else\n  my_free(plugin);\n#endif\n\n  if (lex)\n  {\n    /*\n      Remove one instance of this plugin from the use list.\n      We are searching backwards so that plugins locked last\n      could be unlocked faster - optimizing for LIFO semantics.\n    */\n    for (i= lex->plugins.elements - 1; i >= 0; i--)\n      if (plugin == *dynamic_element(&lex->plugins, i, plugin_ref*))\n      {\n        delete_dynamic_element(&lex->plugins, i);\n        break;\n      }\n    DBUG_ASSERT(i >= 0);\n  }\n\n  DBUG_ASSERT(pi->ref_count);\n  pi->ref_count--;\n\n  DBUG_PRINT(\"lock\",(\"thd: 0x%lx  plugin: \\\"%s\\\" UNLOCK ref_count: %d\",\n                     (long) current_thd, pi->name.str, pi->ref_count));\n\n  if (pi->state == PLUGIN_IS_DELETED && !pi->ref_count)\n    reap_needed= true;\n\n  DBUG_VOID_RETURN;\n}\n\n\nvoid plugin_unlock(THD *thd, plugin_ref plugin)\n{\n  LEX *lex= thd ? thd->lex : 0;\n  DBUG_ENTER(\"plugin_unlock\");\n  if (!plugin)\n    DBUG_VOID_RETURN;\n#ifdef DBUG_OFF\n  /* built-in plugins don't need ref counting */\n  if (!plugin_dlib(plugin))\n    DBUG_VOID_RETURN;\n#endif\n  mysql_mutex_lock(&LOCK_plugin);\n  intern_plugin_unlock(lex, plugin);\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_VOID_RETURN;\n}\n\n\nvoid plugin_unlock_list(THD *thd, plugin_ref *list, uint count)\n{\n  LEX *lex= thd ? thd->lex : 0;\n  DBUG_ENTER(\"plugin_unlock_list\");\n  if (count == 0)\n    DBUG_VOID_RETURN;\n\n  DBUG_ASSERT(list);\n  mysql_mutex_lock(&LOCK_plugin);\n  while (count--)\n    intern_plugin_unlock(lex, *list++);\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_VOID_RETURN;\n}\n\n\nstatic int plugin_initialize(MEM_ROOT *tmp_root, struct st_plugin_int *plugin,\n                             int *argc, char **argv, bool options_only)\n{\n  int ret= 1;\n  DBUG_ENTER(\"plugin_initialize\");\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n  uint state= plugin->state;\n  DBUG_ASSERT(state == PLUGIN_IS_UNINITIALIZED);\n\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  mysql_rwlock_wrlock(&LOCK_system_variables_hash);\n  if (test_plugin_options(tmp_root, plugin, argc, argv))\n    state= PLUGIN_IS_DISABLED;\n  mysql_rwlock_unlock(&LOCK_system_variables_hash);\n\n  if (options_only || state == PLUGIN_IS_DISABLED)\n  {\n    ret= 0;\n    goto err;\n  }\n\n  if (plugin->plugin_dl && global_system_variables.log_warnings >= 9)\n  {\n    void *sym= dlsym(plugin->plugin_dl->handle,\n                     plugin->plugin_dl->mariaversion ?\n                       maria_plugin_declarations_sym : plugin_declarations_sym);\n    DBUG_ASSERT(sym);\n    sql_print_information(\"Plugin %s loaded at %p\",\n                          plugin->name.str, sym);\n  }\n\n  if (plugin_type_initialize[plugin->plugin->type])\n  {\n    if ((*plugin_type_initialize[plugin->plugin->type])(plugin))\n    {\n      sql_print_error(\"Plugin '%s' registration as a %s failed.\",\n                      plugin->name.str, plugin_type_names[plugin->plugin->type].str);\n      goto err;\n    }\n  }\n  else if (plugin->plugin->init)\n  {\n    if (plugin->plugin->init(plugin))\n    {\n      sql_print_error(\"Plugin '%s' init function returned error.\",\n                      plugin->name.str);\n      goto err;\n    }\n  }\n  state= PLUGIN_IS_READY; // plugin->init() succeeded\n\n  if (plugin->plugin->status_vars)\n  {\n#ifdef FIX_LATER\n    /*\n      We have a problem right now where we can not prepend without\n      breaking backwards compatibility. We will fix this shortly so\n      that engines have \"use names\" and we wil use those for\n      CREATE TABLE, and use the plugin name then for adding automatic\n      variable names.\n    */\n    SHOW_VAR array[2]= {\n      {plugin->plugin->name, (char*)plugin->plugin->status_vars, SHOW_ARRAY},\n      {0, 0, SHOW_UNDEF}\n    };\n    if (add_status_vars(array)) // add_status_vars makes a copy\n      goto err;\n#else\n    if (add_status_vars(plugin->plugin->status_vars))\n      goto err;\n#endif /* FIX_LATER */\n  }\n\n  ret= 0;\n\nerr:\n  if (ret)\n    restore_pluginvar_names(plugin->system_vars);\n\n  mysql_mutex_lock(&LOCK_plugin);\n  plugin->state= state;\n\n  /* maintain the obsolete @@have_innodb variable */\n  if (!my_strcasecmp(&my_charset_latin1, plugin->name.str, \"InnoDB\"))\n    have_innodb= state & PLUGIN_IS_READY ? SHOW_OPTION_YES\n                                         : SHOW_OPTION_DISABLED;\n\n  DBUG_RETURN(ret);\n}\n\n\nextern \"C\" uchar *get_plugin_hash_key(const uchar *, size_t *, my_bool);\nextern \"C\" uchar *get_bookmark_hash_key(const uchar *, size_t *, my_bool);\n\n\nuchar *get_plugin_hash_key(const uchar *buff, size_t *length,\n                           my_bool not_used __attribute__((unused)))\n{\n  struct st_plugin_int *plugin= (st_plugin_int *)buff;\n  *length= (uint)plugin->name.length;\n  return((uchar *)plugin->name.str);\n}\n\n\nuchar *get_bookmark_hash_key(const uchar *buff, size_t *length,\n                             my_bool not_used __attribute__((unused)))\n{\n  struct st_bookmark *var= (st_bookmark *)buff;\n  *length= var->name_len + 1;\n  return (uchar*) var->key;\n}\n\nstatic inline void convert_dash_to_underscore(char *str, int len)\n{\n  for (char *p= str; p <= str+len; p++)\n    if (*p == '-')\n      *p= '_';\n}\n\nstatic inline void convert_underscore_to_dash(char *str, int len)\n{\n  for (char *p= str; p <= str+len; p++)\n    if (*p == '_')\n      *p= '-';\n}\n\n#ifdef HAVE_PSI_INTERFACE\nstatic PSI_mutex_key key_LOCK_plugin;\n\nstatic PSI_mutex_info all_plugin_mutexes[]=\n{\n  { &key_LOCK_plugin, \"LOCK_plugin\", PSI_FLAG_GLOBAL}\n};\n\nstatic void init_plugin_psi_keys(void)\n{\n  const char* category= \"sql\";\n  int count;\n\n  if (PSI_server == NULL)\n    return;\n\n  count= array_elements(all_plugin_mutexes);\n  PSI_server->register_mutex(category, all_plugin_mutexes, count);\n}\n#endif /* HAVE_PSI_INTERFACE */\n\n/*\n  The logic is that we first load and initialize all compiled in plugins.\n  From there we load up the dynamic types (assuming we have not been told to\n  skip this part).\n\n  Finally we initialize everything, aka the dynamic that have yet to initialize.\n*/\nint plugin_init(int *argc, char **argv, int flags)\n{\n  uint i;\n  bool is_myisam;\n  struct st_maria_plugin **builtins;\n  struct st_maria_plugin *plugin;\n  struct st_plugin_int tmp, *plugin_ptr, **reap;\n  MEM_ROOT tmp_root;\n  bool reaped_mandatory_plugin= false;\n  bool mandatory= true;\n  DBUG_ENTER(\"plugin_init\");\n\n  if (initialized)\n    DBUG_RETURN(0);\n\n#ifdef HAVE_PSI_INTERFACE\n  init_plugin_psi_keys();\n#endif\n\n  init_alloc_root(&plugin_mem_root, 4096, 4096);\n  init_alloc_root(&plugin_vars_mem_root, 4096, 4096);\n  init_alloc_root(&tmp_root, 4096, 4096);\n\n  if (my_hash_init(&bookmark_hash, &my_charset_bin, 16, 0, 0,\n                   get_bookmark_hash_key, NULL, HASH_UNIQUE))\n      goto err;\n\n\n  mysql_mutex_init(key_LOCK_plugin, &LOCK_plugin, MY_MUTEX_INIT_FAST);\n\n  if (my_init_dynamic_array(&plugin_dl_array,\n                            sizeof(struct st_plugin_dl *),16,16) ||\n      my_init_dynamic_array(&plugin_array,\n                            sizeof(struct st_plugin_int *),16,16))\n    goto err;\n\n  for (i= 0; i < MYSQL_MAX_PLUGIN_TYPE_NUM; i++)\n  {\n    if (my_hash_init(&plugin_hash[i], system_charset_info, 16, 0, 0,\n                     get_plugin_hash_key, NULL, HASH_UNIQUE))\n      goto err;\n  }\n\n  /* prepare debug_sync service */\n  DBUG_ASSERT(strcmp(list_of_services[5].name, \"debug_sync_service\") == 0);\n  list_of_services[5].service= *(void**)&debug_sync_C_callback_ptr;\n\n  mysql_mutex_lock(&LOCK_plugin);\n\n  initialized= 1;\n\n  /*\n    First we register builtin plugins\n  */\n  for (builtins= mysql_mandatory_plugins; *builtins || mandatory; builtins++)\n  {\n    if (!*builtins)\n    {\n      builtins= mysql_optional_plugins;\n      mandatory= false;\n      if (!*builtins)\n        break;\n    }\n    for (plugin= *builtins; plugin->info; plugin++)\n    {\n      if (opt_ignore_builtin_innodb &&\n          !my_strnncoll(&my_charset_latin1, (const uchar*) plugin->name,\n                        6, (const uchar*) \"InnoDB\", 6))\n        continue;\n\n      bzero(&tmp, sizeof(tmp));\n      tmp.plugin= plugin;\n      tmp.name.str= (char *)plugin->name;\n      tmp.name.length= strlen(plugin->name);\n      tmp.state= 0;\n      tmp.load_option= mandatory ? PLUGIN_FORCE : PLUGIN_ON;\n\n      for (i=0; i < array_elements(override_plugin_load_policy); i++)\n      {\n        if (!my_strcasecmp(&my_charset_latin1, plugin->name,\n                           override_plugin_load_policy[i].plugin_name))\n        {\n          tmp.load_option= override_plugin_load_policy[i].override;\n          break;\n        }\n      }\n\n      free_root(&tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n      tmp.state= PLUGIN_IS_UNINITIALIZED;\n      if (register_builtin(plugin, &tmp, &plugin_ptr))\n        goto err_unlock;\n\n      is_myisam= !my_strcasecmp(&my_charset_latin1, plugin->name, \"MyISAM\");\n\n      /*\n        strictly speaking, we should to initialize all plugins,\n        even for mysqld --help, because important subsystems\n        may be disabled otherwise, and the help will be incomplete.\n        For example, if the mysql.plugin table is not MyISAM.\n        But for now it's an unlikely corner case, and to optimize\n        mysqld --help for all other users, we will only initialize\n        MyISAM here.\n      */\n      if (plugin_initialize(&tmp_root, plugin_ptr, argc, argv, !is_myisam &&\n                            (flags & PLUGIN_INIT_SKIP_INITIALIZATION)))\n      {\n        if (plugin_ptr->load_option == PLUGIN_FORCE)\n          goto err_unlock;\n        plugin_ptr->state= PLUGIN_IS_DISABLED;\n      }\n\n      /*\n        initialize the global default storage engine so that it may\n        not be null in any child thread.\n      */\n      if (is_myisam)\n      {\n        DBUG_ASSERT(!global_system_variables.table_plugin);\n        global_system_variables.table_plugin=\n          intern_plugin_lock(NULL, plugin_int_to_ref(plugin_ptr));\n        DBUG_ASSERT(plugin_ptr->ref_count == 1);\n      }\n    }\n  }\n\n  /* should now be set to MyISAM storage engine */\n  DBUG_ASSERT(global_system_variables.table_plugin);\n\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  /* Register all dynamic plugins */\n  if (!(flags & PLUGIN_INIT_SKIP_DYNAMIC_LOADING))\n  {\n    if (opt_plugin_load)\n      plugin_load_list(&tmp_root, opt_plugin_load);\n    if (!(flags & PLUGIN_INIT_SKIP_PLUGIN_TABLE))\n      plugin_load(&tmp_root);\n  }\n\n  /*\n    Now we initialize all remaining plugins\n  */\n\n  mysql_mutex_lock(&LOCK_plugin);\n  reap= (st_plugin_int **) my_alloca((plugin_array.elements+1) * sizeof(void*));\n  *(reap++)= NULL;\n\n  for (i= 0; i < plugin_array.elements; i++)\n  {\n    plugin_ptr= *dynamic_element(&plugin_array, i, struct st_plugin_int **);\n    if (plugin_ptr->plugin_dl && plugin_ptr->state == PLUGIN_IS_UNINITIALIZED)\n    {\n      if (plugin_initialize(&tmp_root, plugin_ptr, argc, argv,\n                            (flags & PLUGIN_INIT_SKIP_INITIALIZATION)))\n      {\n        plugin_ptr->state= PLUGIN_IS_DYING;\n        *(reap++)= plugin_ptr;\n      }\n    }\n  }\n\n  /*\n    Check if any plugins have to be reaped\n  */\n  while ((plugin_ptr= *(--reap)))\n  {\n    mysql_mutex_unlock(&LOCK_plugin);\n    if (plugin_ptr->load_option == PLUGIN_FORCE ||\n        plugin_ptr->load_option == PLUGIN_FORCE_PLUS_PERMANENT)\n      reaped_mandatory_plugin= TRUE;\n    plugin_deinitialize(plugin_ptr, true);\n    mysql_mutex_lock(&LOCK_plugin);\n    plugin_del(plugin_ptr);\n  }\n\n  mysql_mutex_unlock(&LOCK_plugin);\n  my_afree(reap);\n  if (reaped_mandatory_plugin)\n    goto err;\n\n  free_root(&tmp_root, MYF(0));\n\n  DBUG_RETURN(0);\n\nerr_unlock:\n  mysql_mutex_unlock(&LOCK_plugin);\nerr:\n  free_root(&tmp_root, MYF(0));\n  DBUG_RETURN(1);\n}\n\n\nstatic bool register_builtin(struct st_maria_plugin *plugin,\n                             struct st_plugin_int *tmp,\n                             struct st_plugin_int **ptr)\n{\n  DBUG_ENTER(\"register_builtin\");\n  tmp->ref_count= 0;\n  tmp->plugin_dl= 0;\n\n  if (insert_dynamic(&plugin_array, (uchar*)&tmp))\n    DBUG_RETURN(1);\n\n  *ptr= *dynamic_element(&plugin_array, plugin_array.elements - 1,\n                         struct st_plugin_int **)=\n        (struct st_plugin_int *) memdup_root(&plugin_mem_root, (uchar*)tmp,\n                                             sizeof(struct st_plugin_int));\n\n  if (my_hash_insert(&plugin_hash[plugin->type],(uchar*) *ptr))\n    DBUG_RETURN(1);\n\n  DBUG_RETURN(0);\n}\n\n\n/*\n  called only by plugin_init()\n*/\nstatic void plugin_load(MEM_ROOT *tmp_root)\n{\n  THD thd;\n  TABLE_LIST tables;\n  TABLE *table;\n  READ_RECORD read_record_info;\n  int error;\n  THD *new_thd= &thd;\n  bool result;\n#ifdef EMBEDDED_LIBRARY\n  No_such_table_error_handler error_handler;\n#endif /* EMBEDDED_LIBRARY */\n  DBUG_ENTER(\"plugin_load\");\n\n  new_thd->thread_stack= (char*) &tables;\n  new_thd->store_globals();\n  new_thd->db= my_strdup(\"mysql\", MYF(0));\n  new_thd->db_length= 5;\n  bzero((char*) &thd.net, sizeof(thd.net));\n  tables.init_one_table(\"mysql\", 5, \"plugin\", 6, \"plugin\", TL_READ);\n\n#ifdef EMBEDDED_LIBRARY\n  /*\n    When building an embedded library, if the mysql.plugin table\n    does not exist, we silently ignore the missing table\n  */\n  new_thd->push_internal_handler(&error_handler);\n#endif /* EMBEDDED_LIBRARY */\n\n  result= open_and_lock_tables(new_thd, &tables, FALSE, MYSQL_LOCK_IGNORE_TIMEOUT);\n\n#ifdef EMBEDDED_LIBRARY\n  new_thd->pop_internal_handler();\n  if (error_handler.safely_trapped_errors())\n    goto end;\n#endif /* EMBEDDED_LIBRARY */\n\n  if (result)\n  {\n    DBUG_PRINT(\"error\",(\"Can't open plugin table\"));\n    if (!opt_help)\n      sql_print_error(\"Can't open the mysql.plugin table. Please \"\n                      \"run mysql_upgrade to create it.\");\n    else\n      sql_print_warning(\"Could not open mysql.plugin table. Some options may be missing from the help text\");\n    goto end;\n  }\n  table= tables.table;\n  if (init_read_record(&read_record_info, new_thd, table, NULL, 1, 0, FALSE))\n  {\n    sql_print_error(\"Could not initialize init_read_record; Plugins not \"\n                    \"loaded\");\n    goto end;\n  }\n  table->use_all_columns();\n  while (!(error= read_record_info.read_record(&read_record_info)))\n  {\n    DBUG_PRINT(\"info\", (\"init plugin record\"));\n    String str_name, str_dl;\n    get_field(tmp_root, table->field[0], &str_name);\n    get_field(tmp_root, table->field[1], &str_dl);\n\n    LEX_STRING name= {(char *)str_name.ptr(), str_name.length()};\n    LEX_STRING dl= {(char *)str_dl.ptr(), str_dl.length()};\n\n    /*\n      there're no other threads running yet, so we don't need a mutex.\n      but plugin_add() before is designed to work in multi-threaded\n      environment, and it uses mysql_mutex_assert_owner(), so we lock\n      the mutex here to satisfy the assert\n    */\n    mysql_mutex_lock(&LOCK_plugin);\n    if (plugin_add(tmp_root, &name, &dl, REPORT_TO_LOG))\n      sql_print_warning(\"Couldn't load plugin named '%s' with soname '%s'.\",\n                        str_name.c_ptr(), str_dl.c_ptr());\n    free_root(tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n    mysql_mutex_unlock(&LOCK_plugin);\n  }\n  if (error > 0)\n    sql_print_error(ER(ER_GET_ERRNO), my_errno);\n  end_read_record(&read_record_info);\n  table->m_needs_reopen= TRUE;                  // Force close to free memory\n  close_mysql_tables(new_thd);\nend:\n  /* Remember that we don't have a THD */\n  my_pthread_setspecific_ptr(THR_THD, 0);\n  DBUG_VOID_RETURN;\n}\n\n\n/*\n  called only by plugin_init()\n*/\nstatic bool plugin_load_list(MEM_ROOT *tmp_root, const char *list)\n{\n  char buffer[FN_REFLEN];\n  LEX_STRING name= {buffer, 0}, dl= {NULL, 0}, *str= &name;\n  char *p= buffer;\n  DBUG_ENTER(\"plugin_load_list\");\n  while (list)\n  {\n    if (p == buffer + sizeof(buffer) - 1)\n    {\n      sql_print_error(\"plugin-load parameter too long\");\n      DBUG_RETURN(TRUE);\n    }\n\n    switch ((*(p++)= *(list++))) {\n    case '\\0':\n      list= NULL; /* terminate the loop */\n      /* fall through */\n#ifndef __WIN__\n    case ':':     /* can't use this as delimiter as it may be drive letter */\n#endif\n    case ';':\n      str->str[str->length]= '\\0';\n      if (str == &name)  // load all plugins in named module\n      {\n        if (!name.length)\n        {\n          p--;    /* reset pointer */\n          continue;\n        }\n\n        dl= name;\n        mysql_mutex_lock(&LOCK_plugin);\n        free_root(tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n        name.str= 0; // load everything\n        if (plugin_add(tmp_root, &name, &dl, REPORT_TO_LOG))\n          goto error;\n      }\n      else\n      {\n        free_root(tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n        mysql_mutex_lock(&LOCK_plugin);\n        if (plugin_add(tmp_root, &name, &dl, REPORT_TO_LOG))\n          goto error;\n      }\n      mysql_mutex_unlock(&LOCK_plugin);\n      name.length= dl.length= 0;\n      dl.str= NULL; name.str= p= buffer;\n      str= &name;\n      continue;\n    case '=':\n    case '#':\n      if (str == &name)\n      {\n        name.str[name.length]= '\\0';\n        str= &dl;\n        str->str= p;\n        continue;\n      }\n    default:\n      str->length++;\n      continue;\n    }\n  }\n  DBUG_RETURN(FALSE);\nerror:\n  mysql_mutex_unlock(&LOCK_plugin);\n  if (name.str)\n    sql_print_error(\"Couldn't load plugin '%s' from '%s'.\",\n                    name.str, dl.str);\n  else\n    sql_print_error(\"Couldn't load plugins from '%s'.\", dl.str);\n  DBUG_RETURN(TRUE);\n}\n\n\nvoid plugin_shutdown(void)\n{\n  uint i, count= plugin_array.elements;\n  struct st_plugin_int **plugins, *plugin;\n  struct st_plugin_dl **dl;\n  DBUG_ENTER(\"plugin_shutdown\");\n\n  if (initialized)\n  {\n    mysql_mutex_lock(&LOCK_plugin);\n\n    reap_needed= true;\n\n    /*\n      We want to shut down plugins in a reasonable order, this will\n      become important when we have plugins which depend upon each other.\n      Circular references cannot be reaped so they are forced afterwards.\n      TODO: Have an additional step here to notify all active plugins that\n      shutdown is requested to allow plugins to deinitialize in parallel.\n    */\n    while (reap_needed && (count= plugin_array.elements))\n    {\n      reap_plugins();\n      for (i= 0; i < count; i++)\n      {\n        plugin= *dynamic_element(&plugin_array, i, struct st_plugin_int **);\n        if (plugin->state == PLUGIN_IS_READY)\n        {\n          plugin->state= PLUGIN_IS_DELETED;\n          reap_needed= true;\n        }\n      }\n      if (!reap_needed)\n      {\n        /*\n          release any plugin references held.\n        */\n        unlock_variables(NULL, &global_system_variables);\n        unlock_variables(NULL, &max_system_variables);\n      }\n    }\n\n    plugins= (struct st_plugin_int **) my_alloca(sizeof(void*) * (count+1));\n\n    /*\n      If we have any plugins which did not die cleanly, we force shutdown\n    */\n    for (i= 0; i < count; i++)\n    {\n      plugins[i]= *dynamic_element(&plugin_array, i, struct st_plugin_int **);\n      /* change the state to ensure no reaping races */\n      if (plugins[i]->state == PLUGIN_IS_DELETED)\n        plugins[i]->state= PLUGIN_IS_DYING;\n    }\n    mysql_mutex_unlock(&LOCK_plugin);\n\n    /*\n      We loop through all plugins and call deinit() if they have one.\n    */\n    for (i= 0; i < count; i++)\n      if (!(plugins[i]->state & (PLUGIN_IS_UNINITIALIZED | PLUGIN_IS_FREED |\n                                 PLUGIN_IS_DISABLED)))\n      {\n        sql_print_warning(\"Plugin '%s' will be forced to shutdown\",\n                          plugins[i]->name.str);\n        /*\n          We are forcing deinit on plugins so we don't want to do a ref_count\n          check until we have processed all the plugins.\n        */\n        plugin_deinitialize(plugins[i], false);\n      }\n\n    /*\n      It's perfectly safe not to lock LOCK_plugin, as there're no\n      concurrent threads anymore. But some functions called from here\n      use mysql_mutex_assert_owner(), so we lock the mutex to satisfy it\n    */\n    mysql_mutex_lock(&LOCK_plugin);\n\n    /*\n      We defer checking ref_counts until after all plugins are deinitialized\n      as some may have worker threads holding on to plugin references.\n    */\n    for (i= 0; i < count; i++)\n    {\n      if (plugins[i]->ref_count)\n        sql_print_error(\"Plugin '%s' has ref_count=%d after shutdown.\",\n                        plugins[i]->name.str, plugins[i]->ref_count);\n      if (plugins[i]->state & PLUGIN_IS_UNINITIALIZED ||\n          plugins[i]->state & PLUGIN_IS_DISABLED)\n        plugin_del(plugins[i]);\n    }\n\n    /*\n      Now we can deallocate all memory.\n    */\n\n    cleanup_variables(NULL, &global_system_variables);\n    cleanup_variables(NULL, &max_system_variables);\n    mysql_mutex_unlock(&LOCK_plugin);\n\n    initialized= 0;\n    mysql_mutex_destroy(&LOCK_plugin);\n\n    my_afree(plugins);\n  }\n\n  /* Dispose of the memory */\n\n  for (i= 0; i < MYSQL_MAX_PLUGIN_TYPE_NUM; i++)\n    my_hash_free(&plugin_hash[i]);\n  delete_dynamic(&plugin_array);\n\n  count= plugin_dl_array.elements;\n  dl= (struct st_plugin_dl **)my_alloca(sizeof(void*) * count);\n  for (i= 0; i < count; i++)\n    dl[i]= *dynamic_element(&plugin_dl_array, i, struct st_plugin_dl **);\n  for (i= 0; i < plugin_dl_array.elements; i++)\n    free_plugin_mem(dl[i]);\n  my_afree(dl);\n  delete_dynamic(&plugin_dl_array);\n\n  my_hash_free(&bookmark_hash);\n  free_root(&plugin_mem_root, MYF(0));\n  free_root(&plugin_vars_mem_root, MYF(0));\n\n  global_variables_dynamic_size= 0;\n\n  DBUG_VOID_RETURN;\n}\n\n/**\n  complete plugin installation (after plugin_add).\n\n  That is, initialize it, and update mysql.plugin table\n*/\nstatic bool finalize_install(THD *thd, TABLE *table, const LEX_STRING *name,\n                             int *argc, char **argv)\n{\n  struct st_plugin_int *tmp= plugin_find_internal(name, MYSQL_ANY_PLUGIN);\n  int error;\n  DBUG_ASSERT(tmp);\n  mysql_mutex_assert_owner(&LOCK_plugin); // because of tmp->state\n\n  if (tmp->state != PLUGIN_IS_UNINITIALIZED)\n  {\n    /* already installed */\n    return 0;\n  }\n  else\n  {\n    if (plugin_initialize(thd->mem_root, tmp, argc, argv, false))\n    {\n      report_error(REPORT_TO_USER, ER_CANT_INITIALIZE_UDF, name->str,\n                   \"Plugin initialization function failed.\");\n      tmp->state= PLUGIN_IS_DELETED;\n      return 1;\n    }\n  }\n  if (tmp->state == PLUGIN_IS_DISABLED)\n  {\n    if (global_system_variables.log_warnings)\n      push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,\n                          ER_CANT_INITIALIZE_UDF, ER(ER_CANT_INITIALIZE_UDF),\n                          name->str, \"Plugin is disabled\");\n  }\n\n  /*\n    We do not replicate the INSTALL PLUGIN statement. Disable binlogging\n    of the insert into the plugin table, so that it is not replicated in\n    row based mode.\n  */\n  tmp_disable_binlog(thd);\n  table->use_all_columns();\n  restore_record(table, s->default_values);\n  table->field[0]->store(name->str, name->length, system_charset_info);\n  table->field[1]->store(tmp->plugin_dl->dl.str, tmp->plugin_dl->dl.length,\n                         files_charset_info);\n  error= table->file->ha_write_row(table->record[0]);\n  reenable_binlog(thd);\n  if (error)\n  {\n    table->file->print_error(error, MYF(0));\n    tmp->state= PLUGIN_IS_DELETED;\n    return 1;\n  }\n  return 0;\n}\n\nbool mysql_install_plugin(THD *thd, const LEX_STRING *name,\n                          const LEX_STRING *dl_arg)\n{\n  TABLE_LIST tables;\n  TABLE *table;\n  LEX_STRING dl= *dl_arg;\n  bool error;\n  int argc=orig_argc;\n  char **argv=orig_argv;\n  DBUG_ENTER(\"mysql_install_plugin\");\n\n  if (opt_noacl)\n  {\n    my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0), \"--skip-grant-tables\");\n    DBUG_RETURN(TRUE);\n  }\n\n  tables.init_one_table(\"mysql\", 5, \"plugin\", 6, \"plugin\", TL_WRITE);\n  if (check_table_access(thd, INSERT_ACL, &tables, FALSE, 1, FALSE))\n    DBUG_RETURN(TRUE);\n\n  /* need to open before acquiring LOCK_plugin or it will deadlock */\n  if (! (table = open_ltable(thd, &tables, TL_WRITE,\n                             MYSQL_LOCK_IGNORE_TIMEOUT)))\n    DBUG_RETURN(TRUE);\n\n  if (my_load_defaults(MYSQL_CONFIG_NAME, load_default_groups, &argc, &argv, NULL))\n  {\n    report_error(REPORT_TO_USER, ER_PLUGIN_IS_NOT_LOADED, name->str);\n    DBUG_RETURN(TRUE);\n  }\n\n  /*\n    Pre-acquire audit plugins for events that may potentially occur\n    during [UN]INSTALL PLUGIN.\n\n    When audit event is triggered, audit subsystem acquires interested\n    plugins by walking through plugin list. Evidently plugin list\n    iterator protects plugin list by acquiring LOCK_plugin, see\n    plugin_foreach_with_mask().\n\n    On the other hand [UN]INSTALL PLUGIN is acquiring LOCK_plugin\n    rather for a long time.\n\n    When audit event is triggered during [UN]INSTALL PLUGIN, plugin\n    list iterator acquires the same lock (within the same thread)\n    second time.\n\n    This hack should be removed when LOCK_plugin is fixed so it\n    protects only what it supposed to protect.\n\n    See also mysql_uninstall_plugin() and initialize_audit_plugin()\n  */\n  unsigned long event_class_mask[MYSQL_AUDIT_CLASS_MASK_SIZE] =\n  { MYSQL_AUDIT_GENERAL_CLASSMASK };\n  mysql_audit_acquire_plugins(thd, event_class_mask);\n\n  mysql_mutex_lock(&LOCK_plugin);\n  error= plugin_add(thd->mem_root, name, &dl, REPORT_TO_USER);\n  if (error)\n    goto err;\n\n  if (name->str)\n    error= finalize_install(thd, table, name, &argc, argv);\n  else\n  {\n    st_plugin_dl *plugin_dl= plugin_dl_find(&dl);\n    struct st_maria_plugin *plugin;\n    for (plugin= plugin_dl->plugins; plugin->info; plugin++)\n    {\n      LEX_STRING str= { const_cast<char*>(plugin->name), strlen(plugin->name) };\n      error|= finalize_install(thd, table, &str, &argc, argv);\n    }\n  }\n\n  if (error)\n  {\n    reap_needed= true;\n    reap_plugins();\n  }\nerr:\n  mysql_mutex_unlock(&LOCK_plugin);\n  if (argv)\n    free_defaults(argv);\n  DBUG_RETURN(error);\n}\n\n\nstatic bool do_uninstall(THD *thd, TABLE *table, const LEX_STRING *name)\n{\n  struct st_plugin_int *plugin;\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (!(plugin= plugin_find_internal(name, MYSQL_ANY_PLUGIN)) ||\n      plugin->state & (PLUGIN_IS_UNINITIALIZED | PLUGIN_IS_DYING))\n  {\n    my_error(ER_SP_DOES_NOT_EXIST, MYF(0), \"PLUGIN\", name->str);\n    return 1;\n  }\n  if (!plugin->plugin_dl)\n  {\n    my_error(ER_PLUGIN_DELETE_BUILTIN, MYF(0));\n    return 1;\n  }\n  if (plugin->load_option == PLUGIN_FORCE_PLUS_PERMANENT)\n  {\n    my_error(ER_PLUGIN_IS_PERMANENT, MYF(0), name->str);\n    return 1;\n  }\n\n  plugin->state= PLUGIN_IS_DELETED;\n  if (plugin->ref_count)\n    push_warning(thd, MYSQL_ERROR::WARN_LEVEL_WARN,\n                 WARN_PLUGIN_BUSY, ER(WARN_PLUGIN_BUSY));\n  else\n    reap_needed= true;\n\n  uchar user_key[MAX_KEY_LENGTH];\n  table->use_all_columns();\n  table->field[0]->store(name->str, name->length, system_charset_info);\n  key_copy(user_key, table->record[0], table->key_info,\n           table->key_info->key_length);\n  if (! table->file->ha_index_read_idx_map(table->record[0], 0, user_key,\n                                           HA_WHOLE_KEY, HA_READ_KEY_EXACT))\n  {\n    int error;\n    /*\n      We do not replicate the UNINSTALL PLUGIN statement. Disable binlogging\n      of the delete from the plugin table, so that it is not replicated in\n      row based mode.\n    */\n    tmp_disable_binlog(thd);\n    error= table->file->ha_delete_row(table->record[0]);\n    reenable_binlog(thd);\n    if (error)\n    {\n      table->file->print_error(error, MYF(0));\n      return 1;\n    }\n  }\n  return 0;\n}\n\n\nbool mysql_uninstall_plugin(THD *thd, const LEX_STRING *name,\n                            const LEX_STRING *dl_arg)\n{\n  TABLE *table;\n  TABLE_LIST tables;\n  LEX_STRING dl= *dl_arg;\n  bool error= false;\n  DBUG_ENTER(\"mysql_uninstall_plugin\");\n\n  if (opt_noacl)\n  {\n    my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0), \"--skip-grant-tables\");\n    DBUG_RETURN(TRUE);\n  }\n\n  tables.init_one_table(\"mysql\", 5, \"plugin\", 6, \"plugin\", TL_WRITE);\n\n  if (check_table_access(thd, DELETE_ACL, &tables, FALSE, 1, FALSE))\n    DBUG_RETURN(TRUE);\n\n  /* need to open before acquiring LOCK_plugin or it will deadlock */\n  if (! (table= open_ltable(thd, &tables, TL_WRITE, MYSQL_LOCK_IGNORE_TIMEOUT)))\n    DBUG_RETURN(TRUE);\n\n  /*\n    Pre-acquire audit plugins for events that may potentially occur\n    during [UN]INSTALL PLUGIN.\n\n    When audit event is triggered, audit subsystem acquires interested\n    plugins by walking through plugin list. Evidently plugin list\n    iterator protects plugin list by acquiring LOCK_plugin, see\n    plugin_foreach_with_mask().\n\n    On the other hand [UN]INSTALL PLUGIN is acquiring LOCK_plugin\n    rather for a long time.\n\n    When audit event is triggered during [UN]INSTALL PLUGIN, plugin\n    list iterator acquires the same lock (within the same thread)\n    second time.\n\n    This hack should be removed when LOCK_plugin is fixed so it\n    protects only what it supposed to protect.\n\n    See also mysql_install_plugin() and initialize_audit_plugin()\n  */\n  unsigned long event_class_mask[MYSQL_AUDIT_CLASS_MASK_SIZE] =\n  { MYSQL_AUDIT_GENERAL_CLASSMASK };\n  mysql_audit_acquire_plugins(thd, event_class_mask);\n\n  mysql_mutex_lock(&LOCK_plugin);\n\n  if (name->str)\n    error= do_uninstall(thd, table, name);\n  else\n  {\n    fix_dl_name(thd->mem_root, &dl);\n    st_plugin_dl *plugin_dl= plugin_dl_find(&dl);\n    if (plugin_dl)\n    {\n      for (struct st_maria_plugin *plugin= plugin_dl->plugins;\n           plugin->info; plugin++)\n      {\n        LEX_STRING str= { const_cast<char*>(plugin->name), strlen(plugin->name) };\n        error|= do_uninstall(thd, table, &str);\n      }\n    }\n    else\n    {\n      my_error(ER_SP_DOES_NOT_EXIST, MYF(0), \"SONAME\", dl.str);\n      error= true;\n    }\n  }\n  reap_plugins();\n\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_RETURN(error);\n}\n\n\nbool plugin_foreach_with_mask(THD *thd, plugin_foreach_func *func,\n                       int type, uint state_mask, void *arg)\n{\n  uint idx, total;\n  struct st_plugin_int *plugin, **plugins;\n  int version=plugin_array_version;\n  DBUG_ENTER(\"plugin_foreach_with_mask\");\n\n  if (!initialized)\n    DBUG_RETURN(FALSE);\n\n  state_mask= ~state_mask; // do it only once\n\n  mysql_mutex_lock(&LOCK_plugin);\n  total= type == MYSQL_ANY_PLUGIN ? plugin_array.elements\n                                  : plugin_hash[type].records;\n  /*\n    Do the alloca out here in case we do have a working alloca:\n        leaving the nested stack frame invalidates alloca allocation.\n  */\n  plugins=(struct st_plugin_int **)my_alloca(total*sizeof(plugin));\n  if (type == MYSQL_ANY_PLUGIN)\n  {\n    for (idx= 0; idx < total; idx++)\n    {\n      plugin= *dynamic_element(&plugin_array, idx, struct st_plugin_int **);\n      plugins[idx]= !(plugin->state & state_mask) ? plugin : NULL;\n    }\n  }\n  else\n  {\n    HASH *hash= plugin_hash + type;\n    for (idx= 0; idx < total; idx++)\n    {\n      plugin= (struct st_plugin_int *) my_hash_element(hash, idx);\n      plugins[idx]= !(plugin->state & state_mask) ? plugin : NULL;\n    }\n  }\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  for (idx= 0; idx < total; idx++)\n  {\n    if (unlikely(version != plugin_array_version))\n    {\n      mysql_mutex_lock(&LOCK_plugin);\n      for (uint i=idx; i < total; i++)\n        if (plugins[i] && plugins[i]->state & state_mask)\n          plugins[i]=0;\n      mysql_mutex_unlock(&LOCK_plugin);\n    }\n    plugin= plugins[idx];\n    /* It will stop iterating on first engine error when \"func\" returns TRUE */\n    if (plugin && func(thd, plugin_int_to_ref(plugin), arg))\n        goto err;\n  }\n\n  my_afree(plugins);\n  DBUG_RETURN(FALSE);\nerr:\n  my_afree(plugins);\n  DBUG_RETURN(TRUE);\n}\n\n\n/****************************************************************************\n  Internal type declarations for variables support\n****************************************************************************/\n\n#undef MYSQL_SYSVAR_NAME\n#define MYSQL_SYSVAR_NAME(name) name\n#define PLUGIN_VAR_TYPEMASK 0x7f\n#define BOOKMARK_MEMALLOC   0x80\n\nstatic inline char plugin_var_bookmark_key(uint flags)\n{\n  return (flags & PLUGIN_VAR_TYPEMASK) |\n         (flags & PLUGIN_VAR_MEMALLOC ? BOOKMARK_MEMALLOC : 0);\n}\n\n#define EXTRA_OPTIONS 3 /* options for: 'foo', 'plugin-foo' and NULL */\n\ntypedef DECLARE_MYSQL_SYSVAR_BASIC(sysvar_bool_t, my_bool);\ntypedef DECLARE_MYSQL_THDVAR_BASIC(thdvar_bool_t, my_bool);\ntypedef DECLARE_MYSQL_SYSVAR_BASIC(sysvar_str_t, char *);\ntypedef DECLARE_MYSQL_THDVAR_BASIC(thdvar_str_t, char *);\n\ntypedef DECLARE_MYSQL_SYSVAR_TYPELIB(sysvar_enum_t, unsigned long);\ntypedef DECLARE_MYSQL_THDVAR_TYPELIB(thdvar_enum_t, unsigned long);\ntypedef DECLARE_MYSQL_SYSVAR_TYPELIB(sysvar_set_t, ulonglong);\ntypedef DECLARE_MYSQL_THDVAR_TYPELIB(thdvar_set_t, ulonglong);\n\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_int_t, int);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_long_t, long);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_longlong_t, longlong);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_uint_t, uint);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_ulong_t, ulong);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_ulonglong_t, ulonglong);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_double_t, double);\n\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_int_t, int);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_long_t, long);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_longlong_t, longlong);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_uint_t, uint);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_ulong_t, ulong);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_ulonglong_t, ulonglong);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_double_t, double);\n\n\n/****************************************************************************\n  default variable data check and update functions\n****************************************************************************/\n\nstatic int check_func_bool(THD *thd, struct st_mysql_sys_var *var,\n                           void *save, st_mysql_value *value)\n{\n  char buff[STRING_BUFFER_USUAL_SIZE];\n  const char *str;\n  int result, length;\n  long long tmp;\n\n  if (value->value_type(value) == MYSQL_VALUE_TYPE_STRING)\n  {\n    length= sizeof(buff);\n    if (!(str= value->val_str(value, buff, &length)) ||\n        (result= find_type(&bool_typelib, str, length, 1)-1) < 0)\n      goto err;\n  }\n  else\n  {\n    if (value->val_int(value, &tmp) < 0)\n      goto err;\n    if (tmp != 0 && tmp != 1)\n      goto err;\n    result= (int) tmp;\n  }\n  *(my_bool *) save= result ? 1 : 0;\n  return 0;\nerr:\n  return 1;\n}\n\n\nstatic int check_func_int(THD *thd, struct st_mysql_sys_var *var,\n                          void *save, st_mysql_value *value)\n{\n  my_bool fixed1, fixed2;\n  long long orig, val;\n  struct my_option options;\n  value->val_int(value, &orig);\n  val= orig;\n  plugin_opt_set_limits(&options, var);\n\n  if (var->flags & PLUGIN_VAR_UNSIGNED)\n  {\n    if ((fixed1= (!value->is_unsigned(value) && val < 0)))\n      val=0;\n    *(uint *)save= (uint) getopt_ull_limit_value((ulonglong) val, &options,\n                                                   &fixed2);\n  }\n  else\n  {\n    if ((fixed1= (value->is_unsigned(value) && val < 0)))\n      val=LONGLONG_MAX;\n    *(int *)save= (int) getopt_ll_limit_value(val, &options, &fixed2);\n  }\n\n  return throw_bounds_warning(thd, var->name, fixed1 || fixed2,\n                              value->is_unsigned(value), (longlong) orig);\n}\n\n\nstatic int check_func_long(THD *thd, struct st_mysql_sys_var *var,\n                          void *save, st_mysql_value *value)\n{\n  my_bool fixed1, fixed2;\n  long long orig, val;\n  struct my_option options;\n  value->val_int(value, &orig);\n  val= orig;\n  plugin_opt_set_limits(&options, var);\n\n  if (var->flags & PLUGIN_VAR_UNSIGNED)\n  {\n    if ((fixed1= (!value->is_unsigned(value) && val < 0)))\n      val=0;\n    *(ulong *)save= (ulong) getopt_ull_limit_value((ulonglong) val, &options,\n                                                   &fixed2);\n  }\n  else\n  {\n    if ((fixed1= (value->is_unsigned(value) && val < 0)))\n      val=LONGLONG_MAX;\n    *(long *)save= (long) getopt_ll_limit_value(val, &options, &fixed2);\n  }\n\n  return throw_bounds_warning(thd, var->name, fixed1 || fixed2,\n                              value->is_unsigned(value), (longlong) orig);\n}\n\n\nstatic int check_func_longlong(THD *thd, struct st_mysql_sys_var *var,\n                               void *save, st_mysql_value *value)\n{\n  my_bool fixed1, fixed2;\n  long long orig, val;\n  struct my_option options;\n  value->val_int(value, &orig);\n  val= orig;\n  plugin_opt_set_limits(&options, var);\n\n  if (var->flags & PLUGIN_VAR_UNSIGNED)\n  {\n    if ((fixed1= (!value->is_unsigned(value) && val < 0)))\n      val=0;\n    *(ulonglong *)save= getopt_ull_limit_value((ulonglong) val, &options,\n                                               &fixed2);\n  }\n  else\n  {\n    if ((fixed1= (value->is_unsigned(value) && val < 0)))\n      val=LONGLONG_MAX;\n    *(longlong *)save= getopt_ll_limit_value(val, &options, &fixed2);\n  }\n\n  return throw_bounds_warning(thd, var->name, fixed1 || fixed2,\n                              value->is_unsigned(value), (longlong) orig);\n}\n\nstatic int check_func_str(THD *thd, struct st_mysql_sys_var *var,\n                          void *save, st_mysql_value *value)\n{\n  char buff[STRING_BUFFER_USUAL_SIZE];\n  const char *str;\n  int length;\n\n  length= sizeof(buff);\n  if ((str= value->val_str(value, buff, &length)))\n    str= thd->strmake(str, length);\n  *(const char**)save= str;\n  return 0;\n}\n\n\nstatic int check_func_enum(THD *thd, struct st_mysql_sys_var *var,\n                           void *save, st_mysql_value *value)\n{\n  char buff[STRING_BUFFER_USUAL_SIZE];\n  const char *str;\n  TYPELIB *typelib;\n  long long tmp;\n  long result;\n  int length;\n\n  if (var->flags & PLUGIN_VAR_THDLOCAL)\n    typelib= ((thdvar_enum_t*) var)->typelib;\n  else\n    typelib= ((sysvar_enum_t*) var)->typelib;\n\n  if (value->value_type(value) == MYSQL_VALUE_TYPE_STRING)\n  {\n    length= sizeof(buff);\n    if (!(str= value->val_str(value, buff, &length)))\n      goto err;\n    if ((result= (long)find_type(typelib, str, length, 0) - 1) < 0)\n      goto err;\n  }\n  else\n  {\n    if (value->val_int(value, &tmp))\n      goto err;\n    if (tmp < 0 || tmp >= typelib->count)\n      goto err;\n    result= (long) tmp;\n  }\n  *(long*)save= result;\n  return 0;\nerr:\n  return 1;\n}\n\n\nstatic int check_func_set(THD *thd, struct st_mysql_sys_var *var,\n                          void *save, st_mysql_value *value)\n{\n  char buff[STRING_BUFFER_USUAL_SIZE], *error= 0;\n  const char *str;\n  TYPELIB *typelib;\n  ulonglong result;\n  uint error_len= 0;                            // init as only set on error\n  bool not_used;\n  int length;\n\n  if (var->flags & PLUGIN_VAR_THDLOCAL)\n    typelib= ((thdvar_set_t*) var)->typelib;\n  else\n    typelib= ((sysvar_set_t*)var)->typelib;\n\n  if (value->value_type(value) == MYSQL_VALUE_TYPE_STRING)\n  {\n    length= sizeof(buff);\n    if (!(str= value->val_str(value, buff, &length)))\n      goto err;\n    result= find_set(typelib, str, length, NULL,\n                     &error, &error_len, &not_used);\n    if (error_len)\n      goto err;\n  }\n  else\n  {\n    if (value->val_int(value, (long long *)&result))\n      goto err;\n    if (unlikely((result >= (1ULL << typelib->count)) &&\n                 (typelib->count < sizeof(long)*8)))\n      goto err;\n  }\n  *(ulonglong*)save= result;\n  return 0;\nerr:\n  return 1;\n}\n\nstatic int check_func_double(THD *thd, struct st_mysql_sys_var *var,\n                             void *save, st_mysql_value *value)\n{\n  double v;\n  my_bool fixed;\n  struct my_option option;\n\n  value->val_real(value, &v);\n  plugin_opt_set_limits(&option, var);\n  *(double *) save= getopt_double_limit_value(v, &option, &fixed);\n\n  return throw_bounds_warning(thd, var->name, fixed, v);\n}\n\n\nstatic void update_func_bool(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  *(my_bool *) tgt= *(my_bool *) save ? 1 : 0;\n}\n\n\nstatic void update_func_int(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  *(int *)tgt= *(int *) save;\n}\n\n\nstatic void update_func_long(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  *(long *)tgt= *(long *) save;\n}\n\n\nstatic void update_func_longlong(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  *(longlong *)tgt= *(ulonglong *) save;\n}\n\n\nstatic void update_func_str(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  char *value= *(char**) save;\n  if (var->flags & PLUGIN_VAR_MEMALLOC)\n  {\n    char *old= *(char**) tgt;\n    if (value)\n      *(char**) tgt= my_strdup(value, MYF(0));\n    else\n      *(char**) tgt= 0;\n    my_free(old);\n  }\n  else\n    *(char**) tgt= value;\n}\n\nstatic void update_func_double(THD *thd, struct st_mysql_sys_var *var,\n                               void *tgt, const void *save)\n{\n  *(double *) tgt= *(double *) save;\n}\n\n/****************************************************************************\n  System Variables support\n****************************************************************************/\n\n\nsys_var *find_sys_var(THD *thd, const char *str, uint length)\n{\n  sys_var *var;\n  sys_var_pluginvar *pi= NULL;\n  plugin_ref plugin;\n  DBUG_ENTER(\"find_sys_var\");\n\n  mysql_mutex_lock(&LOCK_plugin);\n  mysql_rwlock_rdlock(&LOCK_system_variables_hash);\n  if ((var= intern_find_sys_var(str, length)) &&\n      (pi= var->cast_pluginvar()))\n  {\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    LEX *lex= thd ? thd->lex : 0;\n    if (!(plugin= intern_plugin_lock(lex, plugin_int_to_ref(pi->plugin))))\n      var= NULL; /* failed to lock it, it must be uninstalling */\n    else\n    if (!(plugin_state(plugin) & PLUGIN_IS_READY))\n    {\n      /* initialization not completed */\n      var= NULL;\n      intern_plugin_unlock(lex, plugin);\n    }\n  }\n  else\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  if (!var)\n    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), (char*) str);\n  DBUG_RETURN(var);\n}\n\n\n/*\n  called by register_var, construct_options and test_plugin_options.\n  Returns the 'bookmark' for the named variable.\n  LOCK_system_variables_hash should be at least read locked\n*/\nstatic st_bookmark *find_bookmark(const char *plugin, const char *name,\n                                  int flags)\n{\n  st_bookmark *result= NULL;\n  uint namelen, length, pluginlen= 0;\n  char *varname, *p;\n\n  if (!(flags & PLUGIN_VAR_THDLOCAL))\n    return NULL;\n\n  namelen= strlen(name);\n  if (plugin)\n    pluginlen= strlen(plugin) + 1;\n  length= namelen + pluginlen + 2;\n  varname= (char*) my_alloca(length);\n\n  if (plugin)\n  {\n    strxmov(varname + 1, plugin, \"_\", name, NullS);\n    for (p= varname + 1; *p; p++)\n      if (*p == '-')\n        *p= '_';\n  }\n  else\n    memcpy(varname + 1, name, namelen + 1);\n\n  varname[0]= plugin_var_bookmark_key(flags);\n\n  result= (st_bookmark*) my_hash_search(&bookmark_hash,\n                                        (const uchar*) varname, length - 1);\n\n  my_afree(varname);\n  return result;\n}\n\n\nstatic size_t var_storage_size(int flags)\n{\n  switch (flags & PLUGIN_VAR_TYPEMASK) {\n  case PLUGIN_VAR_BOOL:         return sizeof(my_bool);\n  case PLUGIN_VAR_INT:          return sizeof(int);\n  case PLUGIN_VAR_LONG:         return sizeof(long);\n  case PLUGIN_VAR_ENUM:         return sizeof(long);\n  case PLUGIN_VAR_LONGLONG:     return sizeof(ulonglong);\n  case PLUGIN_VAR_SET:          return sizeof(ulonglong);\n  case PLUGIN_VAR_STR:          return sizeof(char*);\n  case PLUGIN_VAR_DOUBLE:       return sizeof(double);\n  default: DBUG_ASSERT(0);      return 0;\n  }\n}\n\n\n/*\n  returns a bookmark for thd-local variables, creating if neccessary.\n  returns null for non thd-local variables.\n  Requires that a write lock is obtained on LOCK_system_variables_hash\n*/\nstatic st_bookmark *register_var(const char *plugin, const char *name,\n                                 int flags)\n{\n  uint length= strlen(plugin) + strlen(name) + 3, size, offset, new_size;\n  st_bookmark *result;\n  char *varname, *p;\n\n  DBUG_ASSERT(flags & PLUGIN_VAR_THDLOCAL);\n\n  size= var_storage_size(flags);\n  varname= ((char*) my_alloca(length));\n  strxmov(varname + 1, plugin, \"_\", name, NullS);\n  for (p= varname + 1; *p; p++)\n    if (*p == '-')\n      *p= '_';\n\n  if (!(result= find_bookmark(NULL, varname + 1, flags)))\n  {\n    result= (st_bookmark*) alloc_root(&plugin_vars_mem_root,\n                                      sizeof(struct st_bookmark) + length-1);\n    varname[0]= plugin_var_bookmark_key(flags);\n    memcpy(result->key, varname, length);\n    result->name_len= length - 2;\n    result->offset= -1;\n\n    DBUG_ASSERT(size && !(size & (size-1))); /* must be power of 2 */\n\n    offset= global_system_variables.dynamic_variables_size;\n    offset= (offset + size - 1) & ~(size - 1);\n    result->offset= (int) offset;\n\n    new_size= (offset + size + 63) & ~63;\n\n    if (new_size > global_variables_dynamic_size)\n    {\n      global_system_variables.dynamic_variables_ptr= (char*)\n        my_realloc(global_system_variables.dynamic_variables_ptr, new_size,\n                   MYF(MY_WME | MY_FAE | MY_ALLOW_ZERO_PTR));\n      max_system_variables.dynamic_variables_ptr= (char*)\n        my_realloc(max_system_variables.dynamic_variables_ptr, new_size,\n                   MYF(MY_WME | MY_FAE | MY_ALLOW_ZERO_PTR));\n      /*\n        Clear the new variable value space. This is required for string\n        variables. If their value is non-NULL, it must point to a valid\n        string.\n      */\n      bzero(global_system_variables.dynamic_variables_ptr +\n            global_variables_dynamic_size,\n            new_size - global_variables_dynamic_size);\n      bzero(max_system_variables.dynamic_variables_ptr +\n            global_variables_dynamic_size,\n            new_size - global_variables_dynamic_size);\n      global_variables_dynamic_size= new_size;\n    }\n\n    global_system_variables.dynamic_variables_head= offset;\n    max_system_variables.dynamic_variables_head= offset;\n    global_system_variables.dynamic_variables_size= offset + size;\n    max_system_variables.dynamic_variables_size= offset + size;\n    global_system_variables.dynamic_variables_version++;\n    max_system_variables.dynamic_variables_version++;\n\n    result->version= global_system_variables.dynamic_variables_version;\n\n    /* this should succeed because we have already checked if a dup exists */\n    if (my_hash_insert(&bookmark_hash, (uchar*) result))\n    {\n      fprintf(stderr, \"failed to add placeholder to hash\");\n      DBUG_ASSERT(0);\n    }\n  }\n  my_afree(varname);\n  return result;\n}\n\nstatic void restore_pluginvar_names(sys_var *first)\n{\n  mysql_del_sys_var_chain(first);\n  for (sys_var *var= first; var; var= var->next)\n  {\n    sys_var_pluginvar *pv= var->cast_pluginvar();\n    pv->plugin_var->name= pv->orig_pluginvar_name;\n  }\n}\n\n\n/*\n  returns a pointer to the memory which holds the thd-local variable or\n  a pointer to the global variable if thd==null.\n  If required, will sync with global variables if the requested variable\n  has not yet been allocated in the current thread.\n*/\nstatic uchar *intern_sys_var_ptr(THD* thd, int offset, bool global_lock)\n{\n  DBUG_ENTER(\"intern_sys_var_ptr\");\n  DBUG_ASSERT(offset >= 0);\n  DBUG_ASSERT((uint)offset <= global_system_variables.dynamic_variables_head);\n\n  if (!thd)\n    DBUG_RETURN((uchar*) global_system_variables.dynamic_variables_ptr + offset);\n\n  mysql_mutex_assert_not_owner(&LOCK_open);\n\n  /*\n    dynamic_variables_head points to the largest valid offset\n  */\n  if (!thd->variables.dynamic_variables_ptr ||\n      (uint)offset > thd->variables.dynamic_variables_head)\n  {\n    mysql_rwlock_rdlock(&LOCK_system_variables_hash);\n    sync_dynamic_session_variables(thd, global_lock);\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n  }\n  DBUG_RETURN((uchar*)thd->variables.dynamic_variables_ptr + offset);\n}\n\n\n/**\n  For correctness and simplicity's sake, a pointer to a function\n  must be compatible with pointed-to type, that is, the return and\n  parameters types must be the same. Thus, a callback function is\n  defined for each scalar type. The functions are assigned in\n  construct_options to their respective types.\n*/\n\nstatic char *mysql_sys_var_char(THD* thd, int offset)\n{\n  return (char *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic int *mysql_sys_var_int(THD* thd, int offset)\n{\n  return (int *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic long *mysql_sys_var_long(THD* thd, int offset)\n{\n  return (long *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic unsigned long *mysql_sys_var_ulong(THD* thd, int offset)\n{\n  return (unsigned long *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic long long *mysql_sys_var_longlong(THD* thd, int offset)\n{\n  return (long long *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic unsigned long long *mysql_sys_var_ulonglong(THD* thd, int offset)\n{\n  return (unsigned long long *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic char **mysql_sys_var_str(THD* thd, int offset)\n{\n  return (char **) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic double *mysql_sys_var_double(THD* thd, int offset)\n{\n  return (double *) intern_sys_var_ptr(thd, offset, true);\n}\n\nvoid plugin_thdvar_init(THD *thd)\n{\n  plugin_ref old_table_plugin= thd->variables.table_plugin;\n  DBUG_ENTER(\"plugin_thdvar_init\");\n  \n  thd->variables.table_plugin= NULL;\n  cleanup_variables(thd, &thd->variables);\n  \n  thd->variables= global_system_variables;\n  thd->variables.table_plugin= NULL;\n\n  /* we are going to allocate these lazily */\n  thd->variables.dynamic_variables_version= 0;\n  thd->variables.dynamic_variables_size= 0;\n  thd->variables.dynamic_variables_ptr= 0;\n\n  mysql_mutex_lock(&LOCK_plugin);\n  thd->variables.table_plugin=\n        intern_plugin_lock(NULL, global_system_variables.table_plugin);\n  intern_plugin_unlock(NULL, old_table_plugin);\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_VOID_RETURN;\n}\n\n\n\nvoid sync_dynamic_session_variables(THD* thd, bool global_lock)\n{\n  uint idx;\n\n  thd->variables.dynamic_variables_ptr= (char*)\n    my_realloc(thd->variables.dynamic_variables_ptr,\n               global_variables_dynamic_size,\n               MYF(MY_WME | MY_FAE | MY_ALLOW_ZERO_PTR));\n\n  if (global_lock)\n    mysql_mutex_lock(&LOCK_global_system_variables);\n\n  mysql_mutex_assert_owner(&LOCK_global_system_variables);\n\n  memcpy(thd->variables.dynamic_variables_ptr +\n           thd->variables.dynamic_variables_size,\n         global_system_variables.dynamic_variables_ptr +\n           thd->variables.dynamic_variables_size,\n         global_system_variables.dynamic_variables_size -\n           thd->variables.dynamic_variables_size);\n\n  /*\n    now we need to iterate through any newly copied 'defaults'\n    and if it is a string type with MEMALLOC flag, we need to strdup\n  */\n  for (idx= 0; idx < bookmark_hash.records; idx++)\n  {\n    st_bookmark *v= (st_bookmark*) my_hash_element(&bookmark_hash,idx);\n\n    if (v->version <= thd->variables.dynamic_variables_version)\n      continue; /* already in thd->variables */\n\n    /* Here we do anything special that may be required of the data types */\n\n    if ((v->key[0] & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR &&\n         v->key[0] & BOOKMARK_MEMALLOC)\n    {\n      char **pp= (char**) (thd->variables.dynamic_variables_ptr + v->offset);\n      if (*pp)\n        *pp= my_strdup(*pp, MYF(MY_WME|MY_FAE));\n    }\n  }\n\n  if (global_lock)\n    mysql_mutex_unlock(&LOCK_global_system_variables);\n\n  thd->variables.dynamic_variables_version=\n         global_system_variables.dynamic_variables_version;\n  thd->variables.dynamic_variables_head=\n         global_system_variables.dynamic_variables_head;\n  thd->variables.dynamic_variables_size=\n         global_system_variables.dynamic_variables_size;\n}\n\n\n/*\n  Unlocks all system variables which hold a reference\n*/\nstatic void unlock_variables(THD *thd, struct system_variables *vars)\n{\n  intern_plugin_unlock(NULL, vars->table_plugin);\n  vars->table_plugin= NULL;\n}\n\n\n/*\n  Frees memory used by system variables\n\n  Unlike plugin_vars_free_values() it frees all variables of all plugins,\n  it's used on shutdown.\n*/\nstatic void cleanup_variables(THD *thd, struct system_variables *vars)\n{\n  st_bookmark *v;\n  uint idx;\n\n  mysql_rwlock_rdlock(&LOCK_system_variables_hash);\n  for (idx= 0; idx < bookmark_hash.records; idx++)\n  {\n    v= (st_bookmark*) my_hash_element(&bookmark_hash, idx);\n\n    if (v->version > vars->dynamic_variables_version)\n      continue; /* not in vars */\n\n    DBUG_ASSERT((uint)v->offset <= vars->dynamic_variables_head);\n\n    if ((v->key[0] & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR &&\n         v->key[0] & BOOKMARK_MEMALLOC)\n    {\n      char **ptr= (char**)(vars->dynamic_variables_ptr + v->offset);\n      my_free(*ptr);\n      *ptr= NULL;\n    }\n  }\n  mysql_rwlock_unlock(&LOCK_system_variables_hash);\n\n  DBUG_ASSERT(vars->table_plugin == NULL);\n\n  my_free(vars->dynamic_variables_ptr);\n  vars->dynamic_variables_ptr= NULL;\n  vars->dynamic_variables_size= 0;\n  vars->dynamic_variables_version= 0;\n}\n\n\nvoid plugin_thdvar_cleanup(THD *thd)\n{\n  uint idx;\n  plugin_ref *list;\n  DBUG_ENTER(\"plugin_thdvar_cleanup\");\n\n  mysql_mutex_lock(&LOCK_plugin);\n\n  unlock_variables(thd, &thd->variables);\n  cleanup_variables(thd, &thd->variables);\n\n  if ((idx= thd->lex->plugins.elements))\n  {\n    list= ((plugin_ref*) thd->lex->plugins.buffer) + idx - 1;\n    DBUG_PRINT(\"info\",(\"unlocking %d plugins\", idx));\n    while ((uchar*) list >= thd->lex->plugins.buffer)\n      intern_plugin_unlock(NULL, *list--);\n  }\n\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  reset_dynamic(&thd->lex->plugins);\n\n  DBUG_VOID_RETURN;\n}\n\n\n/**\n  @brief Free values of thread variables of a plugin.\n\n  This must be called before a plugin is deleted. Otherwise its\n  variables are no longer accessible and the value space is lost. Note\n  that only string values with PLUGIN_VAR_MEMALLOC are allocated and\n  must be freed.\n\n  @param[in]        vars        Chain of system variables of a plugin\n*/\n\nstatic void plugin_vars_free_values(sys_var *vars)\n{\n  DBUG_ENTER(\"plugin_vars_free_values\");\n\n  for (sys_var *var= vars; var; var= var->next)\n  {\n    sys_var_pluginvar *piv= var->cast_pluginvar();\n    if (piv &&\n        ((piv->plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR) &&\n        (piv->plugin_var->flags & PLUGIN_VAR_MEMALLOC))\n    {\n      /* Free the string from global_system_variables. */\n      char **valptr= (char**) piv->real_value_ptr(NULL, OPT_GLOBAL);\n      DBUG_PRINT(\"plugin\", (\"freeing value for: '%s'  addr: 0x%lx\",\n                            var->name.str, (long) valptr));\n      my_free(*valptr);\n      *valptr= NULL;\n    }\n  }\n  DBUG_VOID_RETURN;\n}\n\nstatic SHOW_TYPE pluginvar_show_type(st_mysql_sys_var *plugin_var)\n{\n  switch (plugin_var->flags & (PLUGIN_VAR_TYPEMASK | PLUGIN_VAR_UNSIGNED)) {\n  case PLUGIN_VAR_BOOL:\n    return SHOW_MY_BOOL;\n  case PLUGIN_VAR_INT:\n    return SHOW_SINT;\n  case PLUGIN_VAR_INT | PLUGIN_VAR_UNSIGNED:\n    return SHOW_UINT;\n  case PLUGIN_VAR_LONG:\n    return SHOW_SLONG;\n  case PLUGIN_VAR_LONG | PLUGIN_VAR_UNSIGNED:\n    return SHOW_ULONG;\n  case PLUGIN_VAR_LONGLONG:\n    return SHOW_SLONGLONG;\n  case PLUGIN_VAR_LONGLONG | PLUGIN_VAR_UNSIGNED:\n    return SHOW_ULONGLONG;\n  case PLUGIN_VAR_STR:\n    return SHOW_CHAR_PTR;\n  case PLUGIN_VAR_ENUM:\n  case PLUGIN_VAR_SET:\n    return SHOW_CHAR;\n  case PLUGIN_VAR_DOUBLE:\n    return SHOW_DOUBLE;\n  default:\n    DBUG_ASSERT(0);\n    return SHOW_UNDEF;\n  }\n}\n\n\nbool sys_var_pluginvar::check_update_type(Item_result type)\n{\n  switch (plugin_var->flags & PLUGIN_VAR_TYPEMASK) {\n  case PLUGIN_VAR_INT:\n  case PLUGIN_VAR_LONG:\n  case PLUGIN_VAR_LONGLONG:\n    return type != INT_RESULT;\n  case PLUGIN_VAR_STR:\n    return type != STRING_RESULT;\n  case PLUGIN_VAR_ENUM:\n  case PLUGIN_VAR_BOOL:\n  case PLUGIN_VAR_SET:\n    return type != STRING_RESULT && type != INT_RESULT;\n  case PLUGIN_VAR_DOUBLE:\n    return type != INT_RESULT && type != REAL_RESULT && type != DECIMAL_RESULT;\n  default:\n    return true;\n  }\n}\n\n\nuchar* sys_var_pluginvar::real_value_ptr(THD *thd, enum_var_type type)\n{\n  DBUG_ASSERT(thd || (type == OPT_GLOBAL));\n  if (plugin_var->flags & PLUGIN_VAR_THDLOCAL)\n  {\n    if (type == OPT_GLOBAL)\n      thd= NULL;\n\n    return intern_sys_var_ptr(thd, *(int*) (plugin_var+1), false);\n  }\n  return *(uchar**) (plugin_var+1);\n}\n\n\nTYPELIB* sys_var_pluginvar::plugin_var_typelib(void)\n{\n  switch (plugin_var->flags & (PLUGIN_VAR_TYPEMASK | PLUGIN_VAR_THDLOCAL)) {\n  case PLUGIN_VAR_ENUM:\n    return ((sysvar_enum_t *)plugin_var)->typelib;\n  case PLUGIN_VAR_SET:\n    return ((sysvar_set_t *)plugin_var)->typelib;\n  case PLUGIN_VAR_ENUM | PLUGIN_VAR_THDLOCAL:\n    return ((thdvar_enum_t *)plugin_var)->typelib;\n  case PLUGIN_VAR_SET | PLUGIN_VAR_THDLOCAL:\n    return ((thdvar_set_t *)plugin_var)->typelib;\n  default:\n    return NULL;\n  }\n  return NULL;\t/* Keep compiler happy */\n}\n\n\nuchar* sys_var_pluginvar::do_value_ptr(THD *thd, enum_var_type type,\n                                       LEX_STRING *base)\n{\n  uchar* result;\n\n  result= real_value_ptr(thd, type);\n\n  if ((plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_ENUM)\n    result= (uchar*) get_type(plugin_var_typelib(), *(ulong*)result);\n  else if ((plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_SET)\n    result= (uchar*) set_to_string(thd, 0, *(ulonglong*) result,\n                                   plugin_var_typelib()->type_names);\n  return result;\n}\n\nbool sys_var_pluginvar::do_check(THD *thd, set_var *var)\n{\n  st_item_value_holder value;\n  DBUG_ASSERT(!is_readonly());\n  DBUG_ASSERT(plugin_var->check);\n\n  value.value_type= item_value_type;\n  value.val_str= item_val_str;\n  value.val_int= item_val_int;\n  value.val_real= item_val_real;\n  value.is_unsigned= item_is_unsigned;\n  value.item= var->value;\n\n  return plugin_var->check(thd, plugin_var, &var->save_result, &value);\n}\n\nbool sys_var_pluginvar::session_update(THD *thd, set_var *var)\n{\n  DBUG_ASSERT(!is_readonly());\n  DBUG_ASSERT(plugin_var->flags & PLUGIN_VAR_THDLOCAL);\n  DBUG_ASSERT(thd == current_thd);\n\n  mysql_mutex_lock(&LOCK_global_system_variables);\n  void *tgt= real_value_ptr(thd, var->type);\n  const void *src= var->value ? (void*)&var->save_result\n                              : (void*)real_value_ptr(thd, OPT_GLOBAL);\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n\n  plugin_var->update(thd, plugin_var, tgt, src);\n \n  return false;\n}\n\nstatic const void *var_def_ptr(st_mysql_sys_var *pv)\n{\n    switch (pv->flags & (PLUGIN_VAR_TYPEMASK | PLUGIN_VAR_THDLOCAL)) {\n    case PLUGIN_VAR_INT:\n      return &((sysvar_uint_t*) pv)->def_val;\n    case PLUGIN_VAR_LONG:\n      return &((sysvar_ulong_t*) pv)->def_val;\n    case PLUGIN_VAR_LONGLONG:\n      return &((sysvar_ulonglong_t*) pv)->def_val;\n    case PLUGIN_VAR_ENUM:\n      return &((sysvar_enum_t*) pv)->def_val;\n    case PLUGIN_VAR_SET:\n      return &((sysvar_set_t*) pv)->def_val;\n    case PLUGIN_VAR_BOOL:\n      return &((sysvar_bool_t*) pv)->def_val;\n    case PLUGIN_VAR_STR:\n      return &((sysvar_str_t*) pv)->def_val;\n    case PLUGIN_VAR_DOUBLE:\n      return &((sysvar_double_t*) pv)->def_val;\n    case PLUGIN_VAR_INT | PLUGIN_VAR_THDLOCAL:\n      return &((thdvar_uint_t*) pv)->def_val;\n    case PLUGIN_VAR_LONG | PLUGIN_VAR_THDLOCAL:\n      return &((thdvar_ulong_t*) pv)->def_val;\n    case PLUGIN_VAR_LONGLONG | PLUGIN_VAR_THDLOCAL:\n      return &((thdvar_ulonglong_t*) pv)->def_val;\n    case PLUGIN_VAR_ENUM | PLUGIN_VAR_THDLOCAL:\n      return &((thdvar_enum_t*) pv)->def_val;\n    case PLUGIN_VAR_SET | PLUGIN_VAR_THDLOCAL:\n      return &((thdvar_set_t*) pv)->def_val;\n    case PLUGIN_VAR_BOOL | PLUGIN_VAR_THDLOCAL:\n      return &((thdvar_bool_t*) pv)->def_val;\n    case PLUGIN_VAR_STR | PLUGIN_VAR_THDLOCAL:\n      return &((thdvar_str_t*) pv)->def_val;\n    case PLUGIN_VAR_DOUBLE | PLUGIN_VAR_THDLOCAL:\n      return &((thdvar_double_t*) pv)->def_val;\n    default:\n      DBUG_ASSERT(0);\n      return NULL;\n    }\n}\n\n\nbool sys_var_pluginvar::global_update(THD *thd, set_var *var)\n{\n  DBUG_ASSERT(!is_readonly());\n  mysql_mutex_assert_owner(&LOCK_global_system_variables);\n\n  void *tgt= real_value_ptr(thd, var->type);\n  const void *src= &var->save_result;\n\n  if (!var->value)\n    src= var_def_ptr(plugin_var);\n\n  plugin_var->update(thd, plugin_var, tgt, src);\n  return false;\n}\n\n\n#define OPTION_SET_LIMITS(type, options, opt) \\\n  options->var_type= type; \\\n  options->def_value= (opt)->def_val; \\\n  options->min_value= (opt)->min_val; \\\n  options->max_value= (opt)->max_val; \\\n  options->block_size= (long) (opt)->blk_sz\n\n#define OPTION_SET_LIMITS_DOUBLE(options, opt) \\\n  options->var_type= GET_DOUBLE; \\\n  options->def_value= (longlong) getopt_double2ulonglong((opt)->def_val); \\\n  options->min_value= (longlong) getopt_double2ulonglong((opt)->min_val); \\\n  options->max_value= getopt_double2ulonglong((opt)->max_val); \\\n  options->block_size= (long) (opt)->blk_sz;\n\n\nstatic void plugin_opt_set_limits(struct my_option *options,\n                                  const struct st_mysql_sys_var *opt)\n{\n  options->sub_size= 0;\n\n  switch (opt->flags & (PLUGIN_VAR_TYPEMASK |\n                        PLUGIN_VAR_UNSIGNED | PLUGIN_VAR_THDLOCAL)) {\n  /* global system variables */\n  case PLUGIN_VAR_INT:\n    OPTION_SET_LIMITS(GET_INT, options, (sysvar_int_t*) opt);\n    break;\n  case PLUGIN_VAR_INT | PLUGIN_VAR_UNSIGNED:\n    OPTION_SET_LIMITS(GET_UINT, options, (sysvar_uint_t*) opt);\n    break;\n  case PLUGIN_VAR_LONG:\n    OPTION_SET_LIMITS(GET_LONG, options, (sysvar_long_t*) opt);\n    break;\n  case PLUGIN_VAR_LONG | PLUGIN_VAR_UNSIGNED:\n    OPTION_SET_LIMITS(GET_ULONG, options, (sysvar_ulong_t*) opt);\n    break;\n  case PLUGIN_VAR_LONGLONG:\n    OPTION_SET_LIMITS(GET_LL, options, (sysvar_longlong_t*) opt);\n    break;\n  case PLUGIN_VAR_LONGLONG | PLUGIN_VAR_UNSIGNED:\n    OPTION_SET_LIMITS(GET_ULL, options, (sysvar_ulonglong_t*) opt);\n    break;\n  case PLUGIN_VAR_ENUM:\n    options->var_type= GET_ENUM;\n    options->typelib= ((sysvar_enum_t*) opt)->typelib;\n    options->def_value= ((sysvar_enum_t*) opt)->def_val;\n    options->min_value= options->block_size= 0;\n    options->max_value= options->typelib->count - 1;\n    break;\n  case PLUGIN_VAR_SET:\n    options->var_type= GET_SET;\n    options->typelib= ((sysvar_set_t*) opt)->typelib;\n    options->def_value= ((sysvar_set_t*) opt)->def_val;\n    options->min_value= options->block_size= 0;\n    options->max_value= (1ULL << options->typelib->count) - 1;\n    break;\n  case PLUGIN_VAR_BOOL:\n    options->var_type= GET_BOOL;\n    options->def_value= ((sysvar_bool_t*) opt)->def_val;\n    break;\n  case PLUGIN_VAR_STR:\n    options->var_type= ((opt->flags & PLUGIN_VAR_MEMALLOC) ?\n                        GET_STR_ALLOC : GET_STR);\n    options->def_value= (intptr) ((sysvar_str_t*) opt)->def_val;\n    break;\n  case PLUGIN_VAR_DOUBLE:\n    OPTION_SET_LIMITS_DOUBLE(options, (sysvar_double_t*) opt);\n    break;\n  /* threadlocal variables */\n  case PLUGIN_VAR_INT | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_INT, options, (thdvar_int_t*) opt);\n    break;\n  case PLUGIN_VAR_INT | PLUGIN_VAR_UNSIGNED | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_UINT, options, (thdvar_uint_t*) opt);\n    break;\n  case PLUGIN_VAR_LONG | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_LONG, options, (thdvar_long_t*) opt);\n    break;\n  case PLUGIN_VAR_LONG | PLUGIN_VAR_UNSIGNED | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_ULONG, options, (thdvar_ulong_t*) opt);\n    break;\n  case PLUGIN_VAR_LONGLONG | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_LL, options, (thdvar_longlong_t*) opt);\n    break;\n  case PLUGIN_VAR_LONGLONG | PLUGIN_VAR_UNSIGNED | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_ULL, options, (thdvar_ulonglong_t*) opt);\n    break;\n  case PLUGIN_VAR_DOUBLE | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS_DOUBLE(options, (thdvar_double_t*) opt);\n    break;\n  case PLUGIN_VAR_ENUM | PLUGIN_VAR_THDLOCAL:\n    options->var_type= GET_ENUM;\n    options->typelib= ((thdvar_enum_t*) opt)->typelib;\n    options->def_value= ((thdvar_enum_t*) opt)->def_val;\n    options->min_value= options->block_size= 0;\n    options->max_value= options->typelib->count - 1;\n    break;\n  case PLUGIN_VAR_SET | PLUGIN_VAR_THDLOCAL:\n    options->var_type= GET_SET;\n    options->typelib= ((thdvar_set_t*) opt)->typelib;\n    options->def_value= ((thdvar_set_t*) opt)->def_val;\n    options->min_value= options->block_size= 0;\n    options->max_value= (1ULL << options->typelib->count) - 1;\n    break;\n  case PLUGIN_VAR_BOOL | PLUGIN_VAR_THDLOCAL:\n    options->var_type= GET_BOOL;\n    options->def_value= ((thdvar_bool_t*) opt)->def_val;\n    break;\n  case PLUGIN_VAR_STR | PLUGIN_VAR_THDLOCAL:\n    options->var_type= ((opt->flags & PLUGIN_VAR_MEMALLOC) ?\n                        GET_STR_ALLOC : GET_STR);\n    options->def_value= (intptr) ((thdvar_str_t*) opt)->def_val;\n    break;\n  default:\n    DBUG_ASSERT(0);\n  }\n  options->arg_type= REQUIRED_ARG;\n  if (opt->flags & PLUGIN_VAR_NOCMDARG)\n    options->arg_type= NO_ARG;\n  if (opt->flags & PLUGIN_VAR_OPCMDARG)\n    options->arg_type= OPT_ARG;\n}\n\nextern \"C\" my_bool get_one_plugin_option(int optid, const struct my_option *,\n                                         char *);\n\nmy_bool get_one_plugin_option(int optid __attribute__((unused)),\n                              const struct my_option *opt,\n                              char *argument)\n{\n  return 0;\n}\n\n\n/**\n  Creates a set of my_option objects associated with a specified plugin-\n  handle.\n\n  @param mem_root Memory allocator to be used.\n  @param tmp A pointer to a plugin handle\n  @param[out] options A pointer to a pre-allocated static array\n\n  The set is stored in the pre-allocated static array supplied to the function.\n  The size of the array is calculated as (number_of_plugin_varaibles*2+3). The\n  reason is that each option can have a prefix '--plugin-' in addtion to the\n  shorter form '--&lt;plugin-name&gt;'. There is also space allocated for\n  terminating NULL pointers.\n\n  @return\n    @retval -1 An error occurred\n    @retval 0 Success\n*/\n\nstatic int construct_options(MEM_ROOT *mem_root, struct st_plugin_int *tmp,\n                             my_option *options)\n{\n  const char *plugin_name= tmp->plugin->name;\n  const LEX_STRING plugin_dash = { C_STRING_WITH_LEN(\"plugin-\") };\n  uint plugin_name_len= strlen(plugin_name);\n  uint optnamelen;\n  const int max_comment_len= 180;\n  char *comment= (char *) alloc_root(mem_root, max_comment_len + 1);\n  char *optname;\n\n  int index= 0, offset= 0;\n  st_mysql_sys_var *opt, **plugin_option;\n  st_bookmark *v;\n\n  /** Used to circumvent the const attribute on my_option::name */\n  char *plugin_name_ptr, *plugin_name_with_prefix_ptr;\n\n  DBUG_ENTER(\"construct_options\");\n\n  plugin_name_ptr= (char*) alloc_root(mem_root, plugin_name_len + 1);\n  strcpy(plugin_name_ptr, plugin_name);\n  my_casedn_str(&my_charset_latin1, plugin_name_ptr);\n  convert_underscore_to_dash(plugin_name_ptr, plugin_name_len);\n  plugin_name_with_prefix_ptr= (char*) alloc_root(mem_root,\n                                                  plugin_name_len +\n                                                  plugin_dash.length + 1);\n  strxmov(plugin_name_with_prefix_ptr, plugin_dash.str, plugin_name_ptr, NullS);\n\n  if (tmp->load_option != PLUGIN_FORCE &&\n      tmp->load_option != PLUGIN_FORCE_PLUS_PERMANENT)\n  {\n    /* support --skip-plugin-foo syntax */\n    options[0].name= plugin_name_ptr;\n    options[1].name= plugin_name_with_prefix_ptr;\n    options[0].id= options[1].id= 0;\n    options[0].var_type= options[1].var_type= GET_ENUM;\n    options[0].arg_type= options[1].arg_type= OPT_ARG;\n    options[0].def_value= options[1].def_value= 1; /* ON */\n    options[0].typelib= options[1].typelib= &global_plugin_typelib;\n\n    strxnmov(comment, max_comment_len, \"Enable or disable \", plugin_name,\n            \" plugin. Possible values are ON, OFF, FORCE (don't start \"\n            \"if the plugin fails to load).\", NullS);\n    options[0].comment= comment;\n    /*\n      Allocate temporary space for the value of the tristate.\n      This option will have a limited lifetime and is not used beyond\n      server initialization.\n      GET_ENUM value is an unsigned long integer.\n    */\n    options[0].value= options[1].value=\n                      (uchar **)alloc_root(mem_root, sizeof(ulong));\n    *((ulong*) options[0].value)= (ulong) options[0].def_value;\n\n    options+= 2;\n  }\n\n  if (!my_strcasecmp(&my_charset_latin1, plugin_name_ptr, \"NDBCLUSTER\"))\n  {\n    plugin_name_ptr= const_cast<char*>(\"ndb\"); // Use legacy \"ndb\" prefix\n    plugin_name_len= 3;\n  }\n\n  /*\n    Two passes as the 2nd pass will take pointer addresses for use\n    by my_getopt and register_var() in the first pass uses realloc\n  */\n\n  for (plugin_option= tmp->plugin->system_vars;\n       plugin_option && *plugin_option; plugin_option++, index++)\n  {\n    opt= *plugin_option;\n    if (!(opt->flags & PLUGIN_VAR_THDLOCAL))\n      continue;\n    if (!(register_var(plugin_name_ptr, opt->name, opt->flags)))\n      continue;\n    switch (opt->flags & PLUGIN_VAR_TYPEMASK) {\n    case PLUGIN_VAR_BOOL:\n      ((thdvar_bool_t *) opt)->resolve= mysql_sys_var_char;\n      break;\n    case PLUGIN_VAR_INT:\n      ((thdvar_int_t *) opt)->resolve= mysql_sys_var_int;\n      break;\n    case PLUGIN_VAR_LONG:\n      ((thdvar_long_t *) opt)->resolve= mysql_sys_var_long;\n      break;\n    case PLUGIN_VAR_LONGLONG:\n      ((thdvar_longlong_t *) opt)->resolve= mysql_sys_var_longlong;\n      break;\n    case PLUGIN_VAR_STR:\n      ((thdvar_str_t *) opt)->resolve= mysql_sys_var_str;\n      break;\n    case PLUGIN_VAR_ENUM:\n      ((thdvar_enum_t *) opt)->resolve= mysql_sys_var_ulong;\n      break;\n    case PLUGIN_VAR_SET:\n      ((thdvar_set_t *) opt)->resolve= mysql_sys_var_ulonglong;\n      break;\n    case PLUGIN_VAR_DOUBLE:\n      ((thdvar_double_t *) opt)->resolve= mysql_sys_var_double;\n      break;\n    default:\n      sql_print_error(\"Unknown variable type code 0x%x in plugin '%s'.\",\n                      opt->flags, plugin_name);\n      DBUG_RETURN(-1);\n    };\n  }\n\n  for (plugin_option= tmp->plugin->system_vars;\n       plugin_option && *plugin_option; plugin_option++, index++)\n  {\n    switch ((opt= *plugin_option)->flags & PLUGIN_VAR_TYPEMASK) {\n    case PLUGIN_VAR_BOOL:\n      if (!opt->check)\n        opt->check= check_func_bool;\n      if (!opt->update)\n        opt->update= update_func_bool;\n      break;\n    case PLUGIN_VAR_INT:\n      if (!opt->check)\n        opt->check= check_func_int;\n      if (!opt->update)\n        opt->update= update_func_int;\n      break;\n    case PLUGIN_VAR_LONG:\n      if (!opt->check)\n        opt->check= check_func_long;\n      if (!opt->update)\n        opt->update= update_func_long;\n      break;\n    case PLUGIN_VAR_LONGLONG:\n      if (!opt->check)\n        opt->check= check_func_longlong;\n      if (!opt->update)\n        opt->update= update_func_longlong;\n      break;\n    case PLUGIN_VAR_STR:\n      if (!opt->check)\n        opt->check= check_func_str;\n      if (!opt->update)\n      {\n        opt->update= update_func_str;\n        if (!(opt->flags & (PLUGIN_VAR_MEMALLOC | PLUGIN_VAR_READONLY)))\n        {\n          opt->flags|= PLUGIN_VAR_READONLY;\n          sql_print_warning(\"Server variable %s of plugin %s was forced \"\n                            \"to be read-only: string variable without \"\n                            \"update_func and PLUGIN_VAR_MEMALLOC flag\",\n                            opt->name, plugin_name);\n        }\n      }\n      break;\n    case PLUGIN_VAR_ENUM:\n      if (!opt->check)\n        opt->check= check_func_enum;\n      if (!opt->update)\n        opt->update= update_func_long;\n      break;\n    case PLUGIN_VAR_SET:\n      if (!opt->check)\n        opt->check= check_func_set;\n      if (!opt->update)\n        opt->update= update_func_longlong;\n      break;\n    case PLUGIN_VAR_DOUBLE:\n      if (!opt->check)\n        opt->check= check_func_double;\n      if (!opt->update)\n        opt->update= update_func_double;\n      break;\n    default:\n      sql_print_error(\"Unknown variable type code 0x%x in plugin '%s'.\",\n                      opt->flags, plugin_name);\n      DBUG_RETURN(-1);\n    }\n\n    if ((opt->flags & (PLUGIN_VAR_NOCMDOPT | PLUGIN_VAR_THDLOCAL))\n                    == PLUGIN_VAR_NOCMDOPT)\n      continue;\n\n    if (!opt->name)\n    {\n      sql_print_error(\"Missing variable name in plugin '%s'.\",\n                      plugin_name);\n      DBUG_RETURN(-1);\n    }\n\n    if (!(opt->flags & PLUGIN_VAR_THDLOCAL))\n    {\n      optnamelen= strlen(opt->name);\n      optname= (char*) alloc_root(mem_root, plugin_name_len + optnamelen + 2);\n      strxmov(optname, plugin_name_ptr, \"-\", opt->name, NullS);\n      optnamelen= plugin_name_len + optnamelen + 1;\n    }\n    else\n    {\n      /* this should not fail because register_var should create entry */\n      if (!(v= find_bookmark(plugin_name_ptr, opt->name, opt->flags)))\n      {\n        sql_print_error(\"Thread local variable '%s' not allocated \"\n                        \"in plugin '%s'.\", opt->name, plugin_name);\n        DBUG_RETURN(-1);\n      }\n\n      *(int*)(opt + 1)= offset= v->offset;\n\n      if (opt->flags & PLUGIN_VAR_NOCMDOPT)\n      {\n        char *val= global_system_variables.dynamic_variables_ptr + offset;\n        if (((opt->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR) &&\n             (opt->flags & PLUGIN_VAR_MEMALLOC))\n        {\n          char *def_val= *(char**)var_def_ptr(opt);\n          *(char**)val= def_val ? my_strdup(def_val, MYF(0)) : NULL;\n        }\n        else\n          memcpy(val, var_def_ptr(opt), var_storage_size(opt->flags));\n        continue;\n      }\n\n      optname= (char*) memdup_root(mem_root, v->key + 1, \n                                   (optnamelen= v->name_len) + 1);\n    }\n\n    convert_underscore_to_dash(optname, optnamelen);\n\n    options->name= optname;\n    options->comment= opt->comment;\n    options->app_type= opt;\n    options->id= 0;\n\n    plugin_opt_set_limits(options, opt);\n\n    if (opt->flags & PLUGIN_VAR_THDLOCAL)\n      options->value= options->u_max_value= (uchar**)\n        (global_system_variables.dynamic_variables_ptr + offset);\n    else\n      options->value= options->u_max_value= *(uchar***) (opt + 1);\n\n    char *option_name_ptr;\n    options[1]= options[0];\n    options[1].name= option_name_ptr= (char*) alloc_root(mem_root,\n                                                        plugin_dash.length +\n                                                        optnamelen + 1);\n    options[1].comment= 0; /* Hidden from the help text */\n    strxmov(option_name_ptr, plugin_dash.str, optname, NullS);\n\n    options+= 2;\n  }\n\n  DBUG_RETURN(0);\n}\n\n\nstatic my_option *construct_help_options(MEM_ROOT *mem_root,\n                                         struct st_plugin_int *p)\n{\n  st_mysql_sys_var **opt;\n  my_option *opts;\n  uint count= EXTRA_OPTIONS;\n  DBUG_ENTER(\"construct_help_options\");\n\n  for (opt= p->plugin->system_vars; opt && *opt; opt++, count+= 2)\n    ;\n\n  if (!(opts= (my_option*) alloc_root(mem_root, sizeof(my_option) * count)))\n    DBUG_RETURN(NULL);\n\n  bzero(opts, sizeof(my_option) * count);\n\n  /**\n    some plugin variables (those that don't have PLUGIN_VAR_NOSYSVAR flag)\n    have their names prefixed with the plugin name. Restore the names here\n    to get the correct (not double-prefixed) help text.\n    We won't need @@sysvars anymore and don't care about their proper names.\n  */\n  restore_pluginvar_names(p->system_vars);\n\n  if (construct_options(mem_root, p, opts))\n    DBUG_RETURN(NULL);\n\n  DBUG_RETURN(opts);\n}\n\n/**\n  Create and register system variables supplied from the plugin and\n  assigns initial values from corresponding command line arguments.\n\n  @param tmp_root Temporary scratch space\n  @param[out] plugin Internal plugin structure\n  @param argc Number of command line arguments\n  @param argv Command line argument vector\n\n  The plugin will be updated with a policy on how to handle errors during\n  initialization.\n\n  @note Requires that a write-lock is held on LOCK_system_variables_hash\n\n  @return How initialization of the plugin should be handled.\n    @retval  0 Initialization should proceed.\n    @retval  1 Plugin is disabled.\n    @retval -1 An error has occurred.\n*/\n\nstatic int test_plugin_options(MEM_ROOT *tmp_root, struct st_plugin_int *tmp,\n                               int *argc, char **argv)\n{\n  struct sys_var_chain chain= { NULL, NULL };\n  bool disable_plugin;\n  enum_plugin_load_option plugin_load_option= tmp->load_option;\n\n  MEM_ROOT *mem_root= alloc_root_inited(&tmp->mem_root) ?\n                      &tmp->mem_root : &plugin_vars_mem_root;\n  st_mysql_sys_var **opt;\n  my_option *opts= NULL;\n  LEX_STRING plugin_name;\n  char *varname;\n  int error;\n  sys_var *v __attribute__((unused));\n  struct st_bookmark *var;\n  uint len, count= EXTRA_OPTIONS;\n  DBUG_ENTER(\"test_plugin_options\");\n  DBUG_ASSERT(tmp->plugin && tmp->name.str);\n\n  for (opt= tmp->plugin->system_vars; opt && *opt; opt++)\n    count+= 2; /* --{plugin}-{optname} and --plugin-{plugin}-{optname} */\n\n  if (count > EXTRA_OPTIONS || (*argc > 1))\n  {\n    if (!(opts= (my_option*) alloc_root(tmp_root, sizeof(my_option) * count)))\n    {\n      sql_print_error(\"Out of memory for plugin '%s'.\", tmp->name.str);\n      DBUG_RETURN(-1);\n    }\n    bzero(opts, sizeof(my_option) * count);\n\n    if (construct_options(tmp_root, tmp, opts))\n    {\n      sql_print_error(\"Bad options for plugin '%s'.\", tmp->name.str);\n      DBUG_RETURN(-1);\n    }\n\n    /*\n      We adjust the default value to account for the hardcoded exceptions\n      we have set for the federated and ndbcluster storage engines.\n    */\n    if (tmp->load_option != PLUGIN_FORCE &&\n        tmp->load_option != PLUGIN_FORCE_PLUS_PERMANENT)\n      opts[0].def_value= opts[1].def_value= plugin_load_option;\n\n    error= handle_options(argc, &argv, opts, NULL);\n    (*argc)++; /* add back one for the program name */\n\n    if (error)\n    {\n       sql_print_error(\"Parsing options for plugin '%s' failed.\",\n                       tmp->name.str);\n       goto err;\n    }\n    /*\n     Set plugin loading policy from option value. First element in the option\n     list is always the <plugin name> option value.\n    */\n    if (tmp->load_option != PLUGIN_FORCE &&\n        tmp->load_option != PLUGIN_FORCE_PLUS_PERMANENT)\n      plugin_load_option= (enum_plugin_load_option) *(ulong*) opts[0].value;\n  }\n\n  disable_plugin= (plugin_load_option == PLUGIN_OFF);\n  tmp->load_option= plugin_load_option;\n\n  /*\n    If the plugin is disabled it should not be initialized.\n  */\n  if (disable_plugin)\n  {\n    if (global_system_variables.log_warnings)\n      sql_print_information(\"Plugin '%s' is disabled.\",\n                            tmp->name.str);\n    if (opts)\n      my_cleanup_options(opts);\n    DBUG_RETURN(1);\n  }\n\n  if (!my_strcasecmp(&my_charset_latin1, tmp->name.str, \"NDBCLUSTER\"))\n  {\n    plugin_name.str= const_cast<char*>(\"ndb\"); // Use legacy \"ndb\" prefix\n    plugin_name.length= 3;\n  }\n  else\n    plugin_name= tmp->name;\n\n  error= 1;\n  for (opt= tmp->plugin->system_vars; opt && *opt; opt++)\n  {\n    st_mysql_sys_var *o= *opt;\n\n    /*\n      PLUGIN_VAR_STR command-line options without PLUGIN_VAR_MEMALLOC, point\n      directly to values in the argv[] array. For plugins started at the\n      server startup, argv[] array is allocated with load_defaults(), and\n      freed when the server is shut down.  But for plugins loaded with\n      INSTALL PLUGIN, the memory allocated with load_defaults() is freed with\n      freed() at the end of mysql_install_plugin(). Which means we cannot\n      allow any pointers into that area.\n      Thus, for all plugins loaded after the server was started,\n      we copy string values to a plugin's memroot.\n    */\n    if (mysqld_server_started &&\n        ((o->flags & (PLUGIN_VAR_TYPEMASK | PLUGIN_VAR_NOCMDOPT |\n                       PLUGIN_VAR_MEMALLOC)) == PLUGIN_VAR_STR))\n    {\n      sysvar_str_t* str= (sysvar_str_t *)o;\n      if (*str->value)\n        *str->value= strdup_root(mem_root, *str->value);\n    }\n\n    var= find_bookmark(plugin_name.str, o->name, o->flags);\n    if (o->flags & PLUGIN_VAR_NOSYSVAR)\n      continue;\n    if (var)\n      v= new (mem_root) sys_var_pluginvar(&chain, var->key + 1, o, tmp);\n    else\n    {\n      len= plugin_name.length + strlen(o->name) + 2;\n      varname= (char*) alloc_root(mem_root, len);\n      strxmov(varname, plugin_name.str, \"-\", o->name, NullS);\n      my_casedn_str(&my_charset_latin1, varname);\n      convert_dash_to_underscore(varname, len-1);\n      v= new (mem_root) sys_var_pluginvar(&chain, varname, o, tmp);\n    }\n    DBUG_ASSERT(v); /* check that an object was actually constructed */\n  } /* end for */\n  if (chain.first)\n  {\n    chain.last->next = NULL;\n    if (mysql_add_sys_var_chain(chain.first))\n    {\n      sql_print_error(\"Plugin '%s' has conflicting system variables\",\n                      tmp->name.str);\n      goto err;\n    }\n    tmp->system_vars= chain.first;\n  }\n  DBUG_RETURN(0);\n  \nerr:\n  if (opts)\n    my_cleanup_options(opts);\n  DBUG_RETURN(error);\n}\n\n\n/****************************************************************************\n  Help Verbose text with Plugin System Variables\n****************************************************************************/\n\n\nvoid add_plugin_options(DYNAMIC_ARRAY *options, MEM_ROOT *mem_root)\n{\n  struct st_plugin_int *p;\n  my_option *opt;\n\n  if (!initialized)\n    return;\n\n  for (uint idx= 0; idx < plugin_array.elements; idx++)\n  {\n    p= *dynamic_element(&plugin_array, idx, struct st_plugin_int **);\n\n    if (!(opt= construct_help_options(mem_root, p)))\n      continue;\n\n    /* Only options with a non-NULL comment are displayed in help text */\n    for (;opt->name; opt++)\n      if (opt->comment)\n        insert_dynamic(options, (uchar*) opt);\n  }\n}\n\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/valgrind.supp": "# Copyright (c) 2005, 2015, Oracle and/or its affiliates.\n# Copyright (c) 2008, 2017, MariaDB\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Library General Public\n# License as published by the Free Software Foundation; version 2\n# of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Library General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n#\n# Suppress some common (not fatal) errors in system libraries found by valgrind\n#\n\n{\n   pthead_exit memory loss 1\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n}\n\n{\n   pthread_exit memory loss 2\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object\n   fun:dl_open_worker\n}\n\n{\n   pthread_exit memory loss 3\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n}\n\n{\n   pthread_exit memory loss 4\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_check_map_versions\n   fun:dl_open_worker\n}\n\n{\n   pthread_exit memory loss 5\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n}\n\n{\n   pthread pthread_key_create\n   Memcheck:Leak\n   fun:malloc\n   fun:*\n   fun:*\n   fun:pthread_key_create\n   fun:my_thread_global_init\n}\n\n{\n   pthread strstr uninit\n   Memcheck:Cond\n   fun:strstr\n   obj:/lib/tls/libpthread.so.*\n   obj:/lib/tls/libpthread.so.*\n   fun:call_init\n   fun:_dl_init\n   obj:/lib/ld-*.so\n}\n\n{\n   pthread strstr uninit\n   Memcheck:Cond\n   fun:strstr\n   obj:/lib/tls/libpthread.so.*\n   obj:/lib/tls/libpthread.so.*\n   fun:call_init\n   fun:_dl_init\n   obj:/lib/ld-*.so\n}\n\n{  \n   somewhere in ld.so, when loading mysqld\n   Memcheck:Cond\n   ...\n   fun:dl_main\n   fun:_dl_sysdep_start\n   fun:_dl_start\n}\n\n#\n# Warnings in libz becasue it works with aligned memory(?)\n#\n\n{\n   libz tr_flush_block\n   Memcheck:Cond\n   fun:_tr_flush_block\n   fun:deflate_slow\n   fun:deflate\n   fun:do_flush\n   fun:gzclose\n}\n\n{\n   libz tr_flush_block2\n   Memcheck:Cond\n   fun:_tr_flush_block\n   fun:deflate_slow\n   fun:deflate\n   fun:compress2\n}\n\n{\n   libz longest_match\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:do_flush\n}\n\n{\n   libz longest_match called from btr_store_big_rec_extern_fields\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:btr_store_big_rec_extern_fields\n}\n\n{\n   libz longest_match called from page_zip_compress\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:page_zip_compress\n}\n\n{\n   libz longest_match2\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:compress2\n}\n\n{\n   libz longest_match 3\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:gzclose\n}\n\n{\n   libz longest_match 4 \n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:gzflush\n}\n\n{\n   libz longest_match3\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:azflush\n}\n\n{\n   libz longest_match3\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:azclose\n}\n\n{\n   libz deflate\n   Memcheck:Cond\n   obj:*/libz.so.*\n   obj:*/libz.so.*\n   fun:deflate\n   fun:compress2\n}\n\n{\n   libz deflate2\n   Memcheck:Cond\n   obj:*/libz.so.*\n   obj:*/libz.so.*\n   fun:deflate\n   obj:*/libz.so.*\n   fun:gzflush\n}\n\n{\n   libz deflate3\n   Memcheck:Cond\n   obj:*/libz.so.*\n   obj:*/libz.so.*\n   fun:deflate\n   fun:do_flush\n}\n\n{\n   libz inflatereset2\n   Memcheck:Cond\n   fun:inflateReset2\n   fun:inflateInit2_\n   fun:uncompress\n}\n\n\n#\n# Warning from my_thread_init becasue mysqld dies before kill thread exists\n#\n\n{\n   my_thread_init kill thread memory loss second\n   Memcheck:Leak\n   fun:calloc\n   fun:my_thread_init\n   fun:kill_server_thread\n}\n\n\n# Red Hat AS 4 32 bit\n{\n   dl_relocate_object\n   Memcheck:Cond\n   fun:_dl_relocate_object\n}\n\n#\n# Leaks reported in _dl_* internal functions on Linux amd64 / glibc2.3.2.\n#\n\n{\n   _dl_start invalid write8\n   Memcheck:Addr8\n   fun:_dl_start\n}\n\n{\n   _dl_start invalid write4\n   Memcheck:Addr4\n   fun:_dl_start\n}\n\n{\n   _dl_start/_dl_setup_hash invalid read8\n   Memcheck:Addr8\n   fun:_dl_setup_hash\n   fun:_dl_start\n}\n\n{\n   _dl_sysdep_start invalid write8\n   Memcheck:Addr8\n   fun:_dl_sysdep_start\n}\n\n{\n   _dl_init invalid write8\n   Memcheck:Addr8\n   fun:_dl_init\n}\n\n{\n   _dl_init invalid write4\n   Memcheck:Addr4\n   fun:_dl_init\n}\n\n{\n   _dl_init/_dl_init invalid read8\n   Memcheck:Addr8\n   fun:_dl_debug_initialize\n   fun:_dl_init\n}\n\n{\n   _dl_init/_dl_debug_state invalid read8\n   Memcheck:Addr8\n   fun:_dl_debug_state\n   fun:_dl_init\n}\n\n{\n   init invalid write8\n   Memcheck:Addr8\n   fun:init\n}\n\n{\n   fixup invalid write8\n   Memcheck:Addr8\n   fun:fixup\n}\n\n{\n   fixup/_dl_lookup_versioned_symbol invalid read8\n   Memcheck:Addr8\n   fun:_dl_lookup_versioned_symbol\n   fun:fixup\n}\n\n{\n   _dl_runtime_resolve invalid read8\n   Memcheck:Addr8\n   fun:_dl_runtime_resolve\n}\n\n{\n   __libc_start_main invalid write8\n   Memcheck:Addr8\n   fun:__libc_start_main\n}\n\n{\n   __libc_start_main/__sigjmp_save invalid write4\n   Memcheck:Addr4\n   fun:__sigjmp_save\n   fun:__libc_start_main\n}\n\n\n#\n#  dlclose can allocate memory for error message, the memory will be\n#  freed by dlerror or other dl* function.\n#\n{\n   memory \"loss\" from dlclose error messages\n   Memcheck:Leak\n   fun:*alloc\n   ...\n   fun:dlclose\n}\n\n\n#\n#  dlsym can allocate memory for error message, the memory will be\n#  freed by dlerror or other dl* function.\n#\n{\n   memory \"loss\" from dlclose error messages\n   Memcheck:Leak\n   fun:*alloc\n   ...\n   fun:dlsym\n}\n\n\n{\n   dlopen / ptread_cancel_init memory loss on Suse Linux 10.3 32/64 bit ver 1\n   Memcheck:Leak\n   fun:*alloc\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/libc-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/libc-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n}\n\n{\n   dlopen / ptread_cancel_init memory loss on Suse Linux 10.3 32/64 bit ver 2\n   Memcheck:Leak\n   fun:*alloc\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/libc-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/libc-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n}\n\n{\n   dlopen / ptread_cancel_init memory loss on Suse Linux 10.3 32/64 bit\n   Memcheck:Leak\n   fun:*alloc\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/libc-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/libc-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n}\n\n\n#\n# Reading wrong addresses on SuSe Linux 10.3 32 bit\n#\n\n{\n   Reading wrong data in libc_dlopen\n   Memcheck:Addr4\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/libc-*.so\n   obj:/lib*/ld-*.so\n   obj:/lib*/libc-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n}\n\n#\n# These seem to be libc threading stuff, not related to MySQL code (allocations\n# during pthread_exit()). Googling shows other projects also using these\n# suppressions.\n#\n# Note that these all stem from pthread_exit() deeper in the call stack, but\n# Valgrind only allows the top four calls in the suppressions.\n#\n\n{\n   libc pthread_exit 1\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n}\n\n{\n   libc pthread_exit 2\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object\n   fun:dl_open_worker\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 3\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 4\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_check_map_versions\n   fun:dl_open_worker\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 5\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n}\n\n{\n   libc pthread_exit 6\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object\n   fun:openaux\n   fun:_dl_catch_error \n}\n\n{\n   libc pthread_exit 7\n   Memcheck:Leak\n   fun:malloc\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n}\n\n{\n   libc pthread_exit 8\n   Memcheck:Leak\n   fun:malloc\n   fun:local_strdup\n   fun:_dl_map_object\n   fun:dl_open_worker\n}\n\n{\n   libc pthread_exit 9\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_close_worker\n   fun:_dl_close\n   fun:_dl_catch_error\n}\n\n#\n# This is seen internally in the system libraries on 64-bit RHAS3.\n#\n\n{\n   __lll_mutex_unlock_wake uninitialized\n   Memcheck:Param\n   futex(utime)\n   fun:__lll_mutex_unlock_wake\n}\n\n#\n# BUG#19940: NDB sends uninitialized parts of field buffers across the wire.\n# This is \"works as designed\"; the uninitialized part is not used at the\n# other end (but Valgrind cannot see this).\n#\n{\n   bug19940\n   Memcheck:Param\n   socketcall.sendto(msg)\n   fun:send\n   fun:_ZN15TCP_Transporter6doSendEv\n   fun:_ZN19TransporterRegistry11performSendEv\n   fun:_ZN19TransporterRegistry14forceSendCheckEi\n}\n\n#\n# Warning when printing stack trace (to suppress some not needed warnings)\n#\n\n{\n   vprintf on stacktrace\n   Memcheck:Cond\n   fun:vfprintf\n   fun:uffered_vfprintf\n   fun:vfprintf\n   fun:fprintf\n   fun:print_stacktrace\n}\n\n#\n# Safe warnings, that may happen because of thread scheduling\n#\n\n{\n   dbug initialization by kill_server\n   Memcheck:Leak\n   fun:malloc\n   fun:DbugMalloc\n   fun:code_state\n   fun:_db_enter_\n   fun:kill_server\n}\n\n{\n   Aria checkpoint background thread not dying fast enough\n   Memcheck:Leak\n   fun:calloc\n   fun:my_thread_init\n   fun:ma_checkpoint_background\n}\n\n#\n# Warning caused by small memory leak in threaded dlopen\n#\n\n{\n   dlopen threaded memory leak\n   Memcheck:Leak\n   fun:calloc\n   obj:*/libdl-*.so\n   fun:dlopen*\n}\n\n#\n# In glibc (checked version 2.7), inet_ntoa allocates an 18-byte\n# per-thread static buffer for the return value. That memory is freed\n# at thread exit, however if called from the main thread, Valgrind\n# does not see the free (test main.no-threads).\n#\n# Since inet_ntoa() does not allocate memory dynamically per-call, this\n# suppression is safe.\n#\n\n{\n   inet_ntoa thread local storage\n   Memcheck:Leak\n   fun:malloc\n   fun:inet_ntoa\n}\n\n\n#\n# Some problem inside glibc on Ubuntu 9.04, x86 (but not amd64):\n# \n# ==5985== 19 bytes in 1 blocks are still reachable in loss record 1 of 6\n# ==5985==    at 0x7AF3FDE: malloc (vg_replace_malloc.c:207) \n#               ... 11,12, or 13 functions w/o symbols ...\n# ==5985==    by 0x8717185: nptl_pthread_exit_hack_handler (my_thr_init.c:55)\n#\n# Since valgrind 3.3.0 doesn't support '...' multi-function pattern, using\n# multiple suppressions:\n#\n{\n   Mem loss inside nptl_pthread_exit_hack_handler\n   Memcheck:Leak\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:nptl_pthread_exit_hack_handler \n}\n\n{\n   Mem loss inside nptl_pthread_exit_hack_handler\n   Memcheck:Leak\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:nptl_pthread_exit_hack_handler \n}\n\n{\n   Mem loss inside nptl_pthread_exit_hack_handler\n   Memcheck:Leak\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n   fun:nptl_pthread_exit_hack_handler \n}\n\n#\n# BUG#45630\n# Suppress valgrind failures within nptl_pthread_exit_hack_handler on Ubuntu 9.04, x86 (but not amd64)\n#\n\n{\n   Mem loss within nptl_pthread_exit_hack_handler 1\n   Memcheck:Leak\n   fun:malloc\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n   fun:start_thread\n   fun:clone\n}\n\n{\n   Mem loss within nptl_pthread_exit_hack_handler 2\n   Memcheck:Leak\n   fun:malloc\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n   fun:start_thread\n   fun:clone\n}\n\n{\n   Mem loss within nptl_pthread_exit_hack_handler 3\n   Memcheck:Leak\n   fun:calloc\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n   fun:start_thread\n   fun:clone\n}\n\n{\n   Mem loss within nptl_pthread_exit_hack_handler 4\n   Memcheck:Leak\n   fun:malloc\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n   fun:start_thread\n}\n\n{\n   Mem loss within nptl_pthread_exit_hack_handler 5\n   Memcheck:Leak\n   fun:calloc\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n   fun:start_thread\n}\n\n#\n# Problem with glibc and gethostbyaddr_r\n#\n\n{\n   libc_res_nsend: Conditional jump or move depends on uninitialised value\n   Memcheck:Cond\n   fun: __libc_res_nsend\n   fun: __libc_res_nquery\n   obj: /lib64/libnss_dns-*so)\n   obj: /lib64/libnss_dns-*so)\n   fun: gethostbyaddr_r\n}\n\n# suppressions for glibc 2.6.1 64 bit\n\n{\n   Mem loss within nptl_pthread_exit_hack_handler 6\n   Memcheck:Leak\n   fun:malloc\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n}\n\n{\n   Mem loss within nptl_pthread_exit_hack_handler 7\n   Memcheck:Leak\n   fun:malloc\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n   fun:start_thread\n   fun:clone\n}\n\n{\n   Mem loss within nptl_pthread_exit_hack_handler 8\n   Memcheck:Leak\n   fun:calloc\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n   fun:start_thread\n   fun:clone\n}\n\n{\n   Mem loss within nptl_pthread_exit_hack_handler 8\n   Memcheck:Leak\n   fun:calloc\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n}\n\n{\n   Invalid read within nptl_pthread_exit_hack_handler\n   Memcheck:Addr8\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   obj:*/ld-*.so\n   obj:*/libc-*.so\n   fun:__libc_dlopen_mode\n   fun:pthread_cancel_init\n   fun:_Unwind_ForcedUnwind\n   fun:__pthread_unwind\n   fun:pthread_exit\n   fun:nptl_pthread_exit_hack_handler\n}\n\n{\n   memory \"leak\" in backtrace() of glibc 2.9 (not present in 2.13)\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:pthread_once\n   fun:backtrace\n}\n\n{\n   memory leak in mysqld_exit\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_close_worker\n   fun:_dl_close\n}\n\n#\n# Bug in Glibc 2.9: http://sourceware.org/bugzilla/show_bug.cgi?id=10391\n# Fixed in latest Glibc, but suppressed here for running tests on hosts\n# with older Glibc version.\n#\n{\n   Glibc bug in __libc_res_nsend\n   Memcheck:Cond\n   fun:__libc_res_nsend\n   fun:__libc_res_nquery\n}\n\n{\n   buf_buddy_relocate peeking (space,page) in potentially free blocks\n   Memcheck:Addr1\n   fun:buf_buddy_relocate\n}\n\n{\n   Bug 59874 Valgrind warning in InnoDB compression code\n   Memcheck:Cond\n   fun:*\n   fun:*\n   fun:deflate\n   fun:btr_store_big_rec_extern_fields_func\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   fun:*\n   fun:*\n   fun:deflate\n   fun:page_zip_compress\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   fun:*\n   fun:*\n   fun:deflate\n   fun:page_zip_compress_deflate\n}\n\n{\n   Bug 59875 Valgrind warning in buf0buddy.c\n   Memcheck:Addr1\n   fun:mach_read_from_4\n   fun:buf_buddy_relocate\n   fun:buf_buddy_free_low\n   fun:buf_buddy_free\n}\n\n# Note the wildcard in the (mangled) function signatures of\n# write_keys() and find_all_keys().\n# They both return ha_rows, which is platform dependent.\n#\n# The '...' wildcards are for 'fun:inline_mysql_file_write' and\n# 'fun:find_all_keys' which *may* be inlined.\n{\n   Bug#12856915 VALGRIND FAILURE IN FILESORT/CREATE_SORT_INDEX / one\n   Memcheck:Param\n   write(buf)\n   obj:*/libpthread*.so\n   fun:my_write\n   ...\n   fun:my_b_flush_io_cache\n   fun:_my_b_write\n   fun:_Z*10write_keysP13st_sort_paramPPhjP11st_io_cacheS4_\n   ...\n   fun:_Z8filesortP3THDP5TABLEP13st_sort_fieldjP10SQL_SELECTybPy\n}\n\n{\n   Bug#12856915 VALGRIND FAILURE IN FILESORT/CREATE_SORT_INDEX / two\n   Memcheck:Param\n   write(buf)\n   obj:*/libpthread*.so\n   fun:my_write\n   ...\n   fun:my_b_flush_io_cache\n   fun:_Z15merge_many_buffP13st_sort_paramPhP10st_buffpekPjP11st_io_cache\n   fun:_Z8filesortP3THDP5TABLEP13st_sort_fieldjP10SQL_SELECTybPy\n}\n\n{\n   Bug#12856915 VALGRIND FAILURE IN FILESORT/CREATE_SORT_INDEX / three\n   Memcheck:Param\n   write(buf)\n   obj:*/libpthread*.so\n   fun:my_write\n   ...\n   fun:my_b_flush_io_cache\n   fun:_Z8filesortP3THDP5TABLEP13st_sort_fieldjP10SQL_SELECTybPy\n}\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   fun:*alloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   obj:*libssl*\n   fun:SSL_COMP_get_compression_methods\n   fun:SSL_library_init\n}\n\n\n{\n  Problem with udf and libresolve\n  Memcheck:Cond\n   obj:*/libresolv*.so\n   fun:__libc_res_nquery\n   fun:_nss_dns_gethostbyaddr2_r\n   fun:_nss_dns_gethostbyaddr_r\n   fun:gethostbyaddr_r\n}\n\n\n#\n# Detached threads may not complete deiniitialization by the time shutdown\n# thread calls exit. This is unfortunate property of detached threads, which\n# we currently can only ignore. Unfortunately there is no way to distinguish\n# between false positives generated by detached threads and real memory leaks\n# generated by not joined joinable threads. So we hide both cases.\n#\n# To avoid enumeration of the whole variety of possible traces we ignore all\n# \"possibly lost\" blocks allocated by pthread_create (and it's callees).\n#\n{\n   Detached threads memory loss\n   Memcheck:Leak\n   match-leak-kinds:possible\n   ...\n   fun:pthread_create*\n}\n\n{\n   Memory Leak in loader and valgrind malloc\n   Memcheck:Leak\n   match-leak-kinds:reachable\n   obj:*/vgpreload_memcheck*.so\n   ...\n   obj:*/ld-*.so\n   ...\n}\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/sp-error.test": "#\n# Stored PROCEDURE error tests\n#\n\n--disable_warnings\ndrop table if exists t1, t2;\n--enable_warnings\n\n# Backup the mysql.proc table\n--replace_result $MYSQLTEST_VARDIR MYSQLTEST_VARDIR\neval SELECT * FROM mysql.proc INTO OUTFILE '$MYSQLTEST_VARDIR/tmp/proc.txt';\n\n# Make sure we don't have any procedures left.\ndelete from mysql.proc;\n\ndelimiter |;\n\n# This should give three syntax errors (sometimes crashed; bug #643)\n# (Unfortunately, this is not a 100% test, on some platforms this\n#  passed despite the bug.)\n--error 1064\ncreate procedure syntaxerror(t int)|\n--error 1064\ncreate procedure syntaxerror(t int)|\n--error 1064\ncreate procedure syntaxerror(t int)|\n\n# Check that we get the right error, i.e. UDF declaration parses correctly,\n# but foo.so doesn't exist.\n#    This generates an error message containing a misleading errno which\n#    might vary between systems (it usually doesn't have anything to do with\n#    the actual failing dlopen()).\n#--error 1126\n#create function foo returns real soname \"foo.so\"|\n\n\n--disable_warnings\ndrop table if exists t3|\n--enable_warnings\ncreate table t3 ( x int )|\ninsert into t3 values (2), (3)|\n\ncreate procedure bad_into(out param int)\n  select x from t3 into param|\n\n--error 1172\ncall bad_into(@x)|\n\ndrop procedure bad_into|\ndrop table t3|\n\n\ncreate procedure proc1()\n  set @x = 42|\n\ncreate function func1() returns int\n  return 42|\n\n# Can't create recursively\n--error 1303\ncreate procedure foo()\n  create procedure bar() set @x=3|\n--error 1303\ncreate procedure foo()\n  create function bar() returns double return 2.3|\n\n# Already exists\n--error 1304\ncreate procedure proc1()\n  set @x = 42|\n--error 1304\ncreate function func1() returns int\n  return 42|\n\ndrop procedure proc1|\ndrop function func1|\n\n# Does not exist\n--error 1305\nalter procedure foo|\n--error 1305\nalter function foo|\n--error 1305\ndrop procedure foo|\n--error 1305\ndrop function foo|\n--error 1305\ncall foo()|\ndrop procedure if exists foo|\n--error 1305\nshow create procedure foo|\n--error 1305\nshow create function foo|\n\n# LEAVE/ITERATE with no match\n--error 1308\ncreate procedure foo()\nfoo: loop\n  leave bar;\nend loop|\n--error 1308\ncreate procedure foo()\nfoo: loop\n  iterate bar;\nend loop|\n--error 1308\ncreate procedure foo()\nfoo: begin\n  iterate foo;\nend|\n\n# Redefining label\n--error 1309\ncreate procedure foo()\nfoo: loop\n  foo: loop\n    set @x=2;\n  end loop foo;\nend loop foo|\n\n# End label mismatch\n--error 1310\ncreate procedure foo()\nfoo: loop\n  set @x=2;\nend loop bar|\n\n# RETURN in FUNCTION only\n--error 1313\ncreate procedure foo()\n  return 42|\n\n# Wrong number of arguments\ncreate procedure p(x int)\n  set @x = x|\ncreate function f(x int) returns int\n  return x+42|\n\n--error 1318\ncall p()|\n--error 1318\ncall p(1, 2)|\n--error 1318\nselect f()|\n--error 1318\nselect f(1, 2)|\n\ndrop procedure p|\ndrop function f|\n\n--error 1319 \ncreate procedure p(val int, out res int)\nbegin\n  declare x int default 0;\n  declare continue handler for foo set x = 1;\n\n  insert into test.t1 values (val);\n  if (x) then\n    set res = 0;\n  else\n    set res = 1;\n  end if;\nend|\n\n--error 1319 \ncreate procedure p(val int, out res int)\nbegin\n  declare x int default 0;\n  declare foo condition for 1146;\n  declare continue handler for bar set x = 1;\n\n  insert into test.t1 values (val);\n  if (x) then\n    set res = 0;\n  else\n    set res = 1;\n  end if;\nend|\n\n--error 1320\ncreate function f(val int) returns int\nbegin\n  declare x int;\n\n  set x = val+3;\nend|\n\ncreate function f(val int) returns int\nbegin\n  declare x int;\n\n  set x = val+3;\n  if x < 4 then\n    return x;\n  end if;\nend|\n\n--error 1321\nselect f(10)|\n\ndrop function f|\n\n--error ER_PARSE_ERROR\ncreate procedure p()\nbegin\n  declare c cursor for insert into test.t1 values (\"foo\", 42);\n\n  open c;\n  close c;\nend|\n\n--error 1323\ncreate procedure p()\nbegin\n  declare x int;\n  declare c cursor for select * into x from test.t limit 1;\n\n  open c;\n  close c;\nend|\n\n--error 1324\ncreate procedure p()\nbegin\n  declare c cursor for select * from test.t;\n\n  open cc;\n  close c;\nend|\n\n--disable_warnings\ndrop table if exists t1|\n--enable_warnings\ncreate table t1 (val int)|\n\ncreate procedure p()\nbegin\n  declare c cursor for select * from test.t1;\n\n  open c;\n  open c;\n  close c;\nend|\n--error 1325\ncall p()|\ndrop procedure p|\n\ncreate procedure p()\nbegin\n  declare c cursor for select * from test.t1;\n\n  open c;\n  close c;\n  close c;\nend|\n--error 1326\ncall p()|\ndrop procedure p|\n\n--error 1305\nalter procedure bar3 sql security invoker|\n\ndrop table t1|\n\n--disable_warnings\ndrop table if exists t1|\n--enable_warnings\ncreate table t1 (val int, x float)|\ninsert into t1 values (42, 3.1), (19, 1.2)|\n\n--error 1327\ncreate procedure p()\nbegin\n  declare x int;\n  declare c cursor for select * from t1;\n\n  open c;\n  fetch c into x, y;\n  close c;\nend|\n\ncreate procedure p()\nbegin\n  declare x int;\n  declare c cursor for select * from t1;\n\n  open c;\n  fetch c into x;\n  close c;\nend|\n--error 1328\ncall p()|\ndrop procedure p|\n\ncreate procedure p()\nbegin\n  declare x int;\n  declare y float;\n  declare z int;\n  declare c cursor for select * from t1;\n\n  open c;\n  fetch c into x, y, z;\n  close c;\nend|\n--error 1328\ncall p()|\ndrop procedure p|\n\n--error 1330\ncreate procedure p(in x int, x char(10))\nbegin\nend|\n--error 1330\ncreate function p(x int, x char(10))\nbegin\nend|\n\n--error 1331\ncreate procedure p()\nbegin\n  declare x float;\n  declare x int;\nend|\n\n--error 1332\ncreate procedure p()\nbegin\n  declare c condition for 1064;\n  declare c condition for 1065;\nend|\n\n--error 1333\ncreate procedure p()\nbegin\n  declare c cursor for select * from t1;\n  declare c cursor for select field from t1;\nend|\n\n# USE is not allowed\n--error ER_SP_BADSTATEMENT \ncreate procedure u()\n  use sptmp|\n\n# Enforced standard order of declarations\n--error 1337\ncreate procedure p()\nbegin\n  declare c cursor for select * from t1;\n  declare x int;\nend|\n--error 1337\ncreate procedure p()\nbegin\n  declare x int;\n  declare continue handler for sqlstate '42S99' set x = 1;\n  declare foo condition for sqlstate '42S99';\nend|\n\n--error 1338\ncreate procedure p()\nbegin\n  declare x int;\n  declare continue handler for sqlstate '42S99' set x = 1;\n  declare c cursor for select * from t1;\nend|\n\n# Check in and inout arguments.\n--disable_warnings\ndrop procedure if exists p|\n--enable_warnings\ncreate procedure p(in x int, inout y int, out z int)\nbegin\n  set y = x+y;\n  set z = x+y;\nend|\n\nset @tmp_x = 42|\nset @tmp_y = 3|\nset @tmp_z = 0|\n# For reference: this is ok\ncall p(@tmp_x, @tmp_y, @tmp_z)|\nselect @tmp_x, @tmp_y, @tmp_z|\n\n--error ER_SP_NOT_VAR_ARG\ncall p(42, 43, @tmp_z)|\n--error ER_SP_NOT_VAR_ARG\ncall p(42, @tmp_y, 43)|\n\ndrop procedure p|\n\n\n#\n# Let us test that we can access mysql.proc table for routines\n# definitions lookup without locking it explicitly.\n#\ncreate procedure p() begin end|\nlock table t1 read|\n# This should succeed\ncall p()|\nunlock tables|\ndrop procedure p|\n# Let us check restrictions which this ability puts on mysql.proc locking.\n--error ER_WRONG_LOCK_OF_SYSTEM_TABLE\nlock tables t1 read, mysql.proc write|\n--error ER_WRONG_LOCK_OF_SYSTEM_TABLE\nlock tables mysql.proc write, mysql.user write|\n# Locking for read should be OK\nlock tables t1 read, mysql.proc read|\nunlock tables|\n# You also should be able lock only mysql.proc for write\nlock tables mysql.proc write|\nunlock tables|\n\n\n#\n# Check that in functions we don't allow to update tables which\n# are used by statements which invoke these functions.\n#\n--disable_warnings\ndrop function if exists f1|\n--enable_warnings\ncreate function f1(i int) returns int\nbegin\n  insert into t1 (val) values (i);\n  return 0;\nend|\n--error ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG\nselect val, f1(val) from t1|\n# Table alias should not matter\n--error ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG\nselect val, f1(val) from t1 as tab|\nselect * from t1|\n--error ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG\nupdate t1 set val= f1(val)|\nselect * from t1|\n# But this should be OK\nselect f1(17)|\nselect * from t1|\n# Cleanup\ndelete from t1 where val= 17|\ndrop function f1|\n\n\n#\n# BUG#1965\n#\ncreate procedure bug1965()\nbegin\n  declare c cursor for select val from t1 order by valname;\n  open c;\n  close c;\nend|\n\n--error 1054\ncall bug1965()|\ndrop procedure bug1965|\n\n#\n# BUG#1966\n#\n--error 1327\nselect 1 into a|\n\n#\n# BUG#1653\n#\n--disable_warnings\ndrop table if exists t3|\n--enable_warnings\ncreate table t3 (column_1_0 int)|\n\ncreate procedure bug1653()\n  update t3 set column_1 = 0|\n\n--error 1054\ncall bug1653()|\ndrop table t3|\ncreate table t3 (column_1 int)|\ncall bug1653()|\n\ndrop procedure bug1653|\ndrop table t3|\n\n#\n# BUG#2259\n#\n# Note: When this bug existed, it did not necessarily cause a crash\n#       in all builds, but valgrind did give warnings.\ncreate procedure bug2259()\nbegin\n  declare v1 int;\n  declare c1 cursor for select s1 from t1;\n\n  fetch c1 into v1;\nend|\n\n--error 1326\ncall bug2259()|\ndrop procedure bug2259|\n\n#\n# BUG#2272\n#\ncreate procedure bug2272()\nbegin\n  declare v int;\n\n  update t1 set v = 42;\nend|\n\ninsert into t1 values (666, 51.3)|\n--error 1054\ncall bug2272()|\ntruncate table t1|\ndrop procedure bug2272|\n\n#\n# BUG#2329\n#\ncreate procedure bug2329_1()\nbegin\n  declare v int;\n\n  insert into t1 (v) values (5);\nend|\n\ncreate procedure bug2329_2()\nbegin\n  declare v int;\n\n  replace t1 set v = 5;\nend|\n\n--error 1054\ncall bug2329_1()|\n--error 1054\ncall bug2329_2()|\ndrop procedure bug2329_1|\ndrop procedure bug2329_2|\n\n#\n# BUG#3287\n#\ncreate function bug3287() returns int\nbegin\n  declare v int default null;\n\n  case\n    when v is not null then return 1;\n  end case;\n  return 2;\nend|\n--error 1339\nselect bug3287()|\ndrop function bug3287|\n\ncreate procedure bug3287(x int)\ncase x\nwhen 0 then\n  insert into test.t1 values (x, 0.1);\nwhen 1 then\n  insert into test.t1 values (x, 1.1);\nend case|\n--error 1339\ncall bug3287(2)|\ndrop procedure bug3287|\n\n#\n# BUG#3297\n#\n--disable_warnings\ndrop table if exists t3|\n--enable_warnings\ncreate table t3 (s1 int, primary key (s1))|\ninsert into t3 values (5),(6)|\n\ncreate procedure bug3279(out y int) \nbegin\n  declare x int default 0;\n  begin\n    declare exit handler for sqlexception set x = x+1;\n    insert into t3 values (5);\n  end;\n  if x < 2 then\n    set x = x+1;\n    insert into t3 values (6);\n  end if;\n  set y = x;\nend|\n\nset @x = 0|\n--error ER_DUP_ENTRY\ncall bug3279(@x)|\nselect @x|\ndrop procedure bug3279|\ndrop table t3|\n\n#\n# BUG#3339\n#\n--error 1049\ncreate procedure nodb.bug3339() begin end|\n\n#\n# BUG#2653\n#\ncreate procedure bug2653_1(a int, out b int)\n  set b = aa|\n\ncreate procedure bug2653_2(a int, out b int)\nbegin\n  if aa < 0 then\n    set b = - a;\n  else\n    set b = a;\n  end if;\nend|\n\n--error 1054\ncall bug2653_1(1, @b)|\n--error 1054\ncall bug2653_2(2, @b)|\n\ndrop procedure bug2653_1|\ndrop procedure bug2653_2|\n\n#\n# BUG#4344\n#\n--error 1357\ncreate procedure bug4344() drop procedure bug4344|\n--error 1357\ncreate procedure bug4344() drop function bug4344|\n\n#\n# BUG#3294: Stored procedure crash if table dropped before use\n# (Actually, when an error occurs within an error handler.)\n--disable_warnings\ndrop procedure if exists bug3294|\n--enable_warnings\ncreate procedure bug3294()\nbegin\n  declare continue handler for sqlexception drop table t5;\n  drop table t5;\n  drop table t5;\nend|\n\ncreate table t5 (x int)|\n--error 1051\ncall bug3294()|\ndrop procedure bug3294|\n\n#\n# BUG#876: Stored Procedures: Invalid SQLSTATE is allowed in \n#          a DECLARE ? HANDLER FOR stmt.\n#\n--disable_warnings\ndrop procedure if exists bug8776_1|\ndrop procedure if exists bug8776_2|\ndrop procedure if exists bug8776_3|\ndrop procedure if exists bug8776_4|\n--enable_warnings\n--error ER_SP_BAD_SQLSTATE\ncreate procedure bug8776_1()\nbegin\n  declare continue handler for sqlstate '42S0200test' begin end;\n  begin end;\nend|\n\n--error ER_SP_BAD_SQLSTATE\ncreate procedure bug8776_2()\nbegin\n  declare continue handler for sqlstate '4200' begin end;\n  begin end;\nend|\n\n--error ER_SP_BAD_SQLSTATE\ncreate procedure bug8776_3()\nbegin\n  declare continue handler for sqlstate '420000' begin end;\n  begin end;\nend|\n\n--error ER_SP_BAD_SQLSTATE\ncreate procedure bug8776_4()\nbegin\n  declare continue handler for sqlstate '42x00' begin end;\n  begin end;\nend|\n\n\n#\n# BUG#6600: Stored procedure crash after repeated calls with check table\n#\n--error ER_SP_BADSTATEMENT\ncreate procedure bug6600()\n  check table t1|\n\n# Check these two as well, while we're at it. (Although it isn't really\n# related to the bug report, but to the fix.)\n--error ER_SP_BADSTATEMENT\ncreate procedure bug6600()\n  lock table t1 read|\n--error ER_SP_BADSTATEMENT\ncreate procedure bug6600()\n  unlock table t1|\n\n#\n# BUG#9566: explicit LOCK TABLE and store procedures result in illegal state\n#\n# We should not think that mysql.proc table does not exist if we are unable\n# to open it under LOCK TABLE or in prelocked mode.\n#\n--disable_warnings\ndrop procedure if exists bug9566|\n--enable_warnings\ncreate procedure bug9566()\nbegin\n  select * from t1;\nend|\nlock table t1 read|\n# This should fail since we forgot to lock mysql.proc for writing\n# explicitly, and we can't open mysql.proc for _writing_ if there\n# are locked tables.\n--error ER_LOCK_OR_ACTIVE_TRANSACTION\nalter procedure bug9566 comment 'Some comment'|\nunlock tables|\n# This should succeed\ndrop procedure bug9566|\n\n\n#\n# BUG#7299: Stored procedures: exception handler catches not-found conditions\n#\n--disable_warnings\ndrop procedure if exists bug7299|\n--enable_warnings\ncreate procedure bug7299()\nbegin\n  declare v int;\n  declare c cursor for select val from t1;\n  declare exit handler for sqlexception select 'Error!'; \n\n  open c;\n  fetch c into v;\nend|\n\ntruncate table t1|\n--error ER_SP_FETCH_NO_DATA\ncall bug7299()|\ndrop procedure bug7299|\n\n\n#\n# BUG#9073: Able to declare two handlers for same condition in same scope\n#\n--error ER_SP_DUP_HANDLER\ncreate procedure bug9073()\nbegin\n  declare continue handler for sqlexception select 1;\n  declare continue handler for sqlexception select 2;\nend|\n--error ER_SP_DUP_HANDLER\ncreate procedure bug9073()\nbegin\n  declare condname1 condition for 1234;\n  declare continue handler for condname1 select 1;\n  declare exit handler for condname1 select 2;\nend|\n--error ER_SP_DUP_HANDLER\ncreate procedure bug9073()\nbegin\n  declare condname1 condition for sqlstate '42000';\n  declare condname2 condition for sqlstate '42000';\n  declare exit handler for condname1 select 1;\n  declare continue handler for condname2 select 2;\nend|\n--error ER_SP_DUP_HANDLER\ncreate procedure bug9073()\nbegin\n  declare condname1 condition for sqlstate '42000';\n  declare exit handler for condname1 select 1;\n  declare exit handler for sqlstate '42000' select 2;\nend|\n\n# This should still work.\n--disable_warnings\ndrop procedure if exists bug9073|\n--enable_warnings\ncreate procedure bug9073()\nbegin\n  declare condname1 condition for sqlstate '42000';\n  declare continue handler for condname1 select 1;\n  begin\n    declare exit handler for sqlstate '42000' select 2;\n    begin\n      declare continue handler for sqlstate '42000' select 3;\n    end;\n  end;\nend|\ndrop procedure bug9073|\n\n\n#\n# BUG#7047: Stored procedure crash if alter procedure\n#\n--error ER_SP_NO_DROP_SP\ncreate procedure bug7047()\n  alter procedure bug7047|\n--error ER_SP_NO_DROP_SP\ncreate function bug7047() returns int\nbegin\n  alter function bug7047;\n  return 0;\nend|\n\n\n#\n# BUG#8408: Stored procedure crash if function contains SHOW\n# BUG#9058: Stored Procedures: Crash if function included SELECT\n#\n\n# Some things are caught when parsing\n--error ER_SP_NO_RETSET\ncreate function bug8408() returns int\nbegin\n  select * from t1;\n  return 0;\nend|\n--error ER_SP_NO_RETSET\ncreate function bug8408() returns int\nbegin\n  show warnings;\n  return 0;\nend|\n--error ER_SP_NO_RETSET\ncreate function bug8408(a int) returns int\nbegin\n  declare b int;\n  select b;\n  return b;\nend|\n\n--disable_warnings\ndrop function if exists bug8408_f|\ndrop procedure if exists bug8408_p|\n--enable_warnings\n\n# Some things must be caught at invokation time\ncreate function bug8408_f() returns int\nbegin\n  call bug8408_p();\n  return 0;\nend|\ncreate procedure bug8408_p()\n  select * from t1|\n\ncall bug8408_p()|\n--error ER_SP_NO_RETSET\nselect bug8408_f()|\n\ndrop procedure bug8408_p|\ndrop function bug8408_f|\n\n# But this is ok\ncreate function bug8408() returns int\nbegin\n  declare n int default 0;\n  select count(*) into n from t1;\n  return n;\nend|\n\ninsert into t1 value (2, 2.7), (3, 3.14), (7, 7.0)|\nselect *,bug8408() from t1|\n\ndrop function bug8408|\ntruncate table t1|\n\n\n#\n# BUG#10537: Server crashes while loading data file into table through\n#            procedure.\n# Disable load until it's PS and SP safe\n--disable_warnings\ndrop procedure if exists bug10537|\n--enable_warnings\n--error ER_SP_BADSTATEMENT\ncreate procedure bug10537()\n  load data local infile '/tmp/somefile' into table t1|\n\n\n#\n# BUG#8409: Stored procedure crash if function contains FLUSH\n#\n--disable_warnings\ndrop function if exists bug8409|\n--enable_warnings\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409()\n  returns int\nbegin\n  flush tables;\n  return 5;\nend|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin reset query cache;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin reset master;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin reset slave;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush hosts;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush privileges;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush tables with read lock;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush tables;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush logs;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush status;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush slave;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush master;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush des_key_file;\nreturn 1; end|\n--error ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\ncreate function bug8409() returns int begin flush user_resources;\nreturn 1; end|\n\n\n#\n# BUG#9529: Stored Procedures: No Warning on truncation of procedure name\n#           during creation.\n# BUG#17015: Routine name truncation not an error\n#            When we started using utf8 for mysql.proc, this limit appeared\n#            to be higher, but in reality the names were truncated.\n--error ER_TOO_LONG_IDENT\ncreate procedure bug9529_901234567890123456789012345678901234567890123456789012345()\nbegin\nend|\n\n--disable_warnings\ndrop procedure if exists bug17015_0123456789012345678901234567890123456789012345678901234|\n--enable_warnings\n# Check the upper limit, just to make sure.\ncreate procedure bug17015_0123456789012345678901234567890123456789012345678901234()\nbegin\nend|\n\n--replace_column 5 '0000-00-00 00:00:00' 6 '0000-00-00 00:00:00'\nshow procedure status like 'bug17015%'|\ndrop procedure bug17015_0123456789012345678901234567890123456789012345678901234|\n\n\n#\n# BUG#10969: Stored procedures: crash if default() function\n#\n--disable_warnings\ndrop procedure if exists bug10969|\n--enable_warnings\n--error ER_WRONG_COLUMN_NAME\ncreate procedure bug10969()\nbegin\n  declare s1 int default 0;\n  select default(s1) from t30;\nend|\n\n# This should work\ncreate procedure bug10969()\nbegin\n  declare s1 int default 0;\n  select default(t30.s1) from t30;\nend|\n\ndrop procedure bug10969|\n\n\ndrop table t1|\n\ndelimiter ;|\n\n# BUG#9814: Closing a cursor that is not open \ncreate table t1(f1 int);\ncreate table t2(f1 int);\n \ndelimiter |;\nCREATE PROCEDURE SP001()\nP1: BEGIN\n  DECLARE ENDTABLE INT DEFAULT 0;\n  DECLARE TEMP_NUM INT;\n  DECLARE TEMP_SUM INT;\n  DECLARE C1 CURSOR FOR SELECT F1 FROM t1;\n  DECLARE C2 CURSOR FOR SELECT F1 FROM t2;\n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET ENDTABLE = 1;\n\n  SET ENDTABLE=0;\n  SET TEMP_SUM=0;\n  SET TEMP_NUM=0;\n  \n  OPEN C1;\n\n  FETCH C1 INTO TEMP_NUM;\n  WHILE ENDTABLE = 0 DO\n          SET TEMP_SUM=TEMP_NUM+TEMP_SUM;\n          FETCH C1 INTO TEMP_NUM;\n  END WHILE;\n  SELECT TEMP_SUM;\n  CLOSE C1;\n  CLOSE C1;\n  SELECT 'end of proc';\nEND P1|\ndelimiter ;|\n--error 1326\ncall SP001();\ndrop procedure SP001;\ndrop table t1, t2;\n\n# Bug #11394 \"Recursion in SP crash server\" and bug #11600 \"Stored\n# procedures: crash with function calling itself\".\n# We have to disable recursion since in many cases LEX and many\n# Item's can't be used in reentrant way nowdays.\ndelimiter |;\n--disable_warnings\ndrop function if exists bug11394|\ndrop function if exists bug11394_1|\ndrop function if exists bug11394_2|\ndrop procedure if exists bug11394|\n--enable_warnings\ncreate function bug11394(i int) returns int\nbegin\n  if i <= 0 then\n    return 0;\n  else\n    return (i in (100, 200, bug11394(i-1), 400));\n  end if;\nend|\n# If we allow recursive functions without additional modifications\n# this will crash server since Item for \"IN\" is not reenterable.\n--error 1424\nselect bug11394(2)|\ndrop function bug11394|\ncreate function bug11394_1(i int) returns int\nbegin\n  if i <= 0 then\n    return 0;\n  else\n    return (select bug11394_1(i-1));\n  end if;\nend|\n# The following statement will crash because some LEX members responsible\n# for selects cannot be used in reentrant fashion.\n--error 1424\nselect bug11394_1(2)|\ndrop function bug11394_1|\n# Note that the following should be allowed since it does not contains\n# recursion\ncreate function bug11394_2(i int) returns int return i|\nselect bug11394_2(bug11394_2(10))|\ndrop function bug11394_2|\ncreate procedure bug11394(i int, j int)\nbegin\n  if i > 0 then\n    call bug11394(i - 1,(select 1));\n  end if;\nend|\n--error ER_SP_RECURSION_LIMIT\ncall bug11394(2, 1)|\nset @@max_sp_recursion_depth=10|\ncall bug11394(2, 1)|\nset @@max_sp_recursion_depth=default|\ndrop procedure bug11394|\ndelimiter ;|\n\n\n#\n# BUG 12490 (Packets out of order if calling HELP CONTENTS from Stored Procedure)\n#\n--error ER_SP_BADSTATEMENT\nCREATE PROCEDURE BUG_12490() HELP CONTENTS;\n--error ER_SP_BADSTATEMENT\nCREATE FUNCTION BUG_12490() RETURNS INT HELP CONTENTS;\nCREATE TABLE t_bug_12490(a int);\n--error ER_SP_BADSTATEMENT\nCREATE TRIGGER BUG_12490 BEFORE UPDATE ON t_bug_12490 FOR EACH ROW HELP CONTENTS;\nDROP TABLE t_bug_12490;\n\n#\n# Bug#11834 \"Re-execution of prepared statement with dropped function\n# crashes server\". Also tests handling of prepared stmts which use\n# stored functions but does not require prelocking.\n#\n--disable_warnings\ndrop function if exists bug11834_1;\ndrop function if exists bug11834_2;\n--enable_warnings\ncreate function bug11834_1() returns int return 10;\ncreate function bug11834_2() returns int return bug11834_1();\nprepare stmt from \"select bug11834_2()\";\nexecute stmt;\n# Re-execution of statement should not crash server.\nexecute stmt;\ndrop function bug11834_1;\n# Attempt to execute statement should return proper error and \n# should not crash server.\n\n# NOTE! The error we get from the below query indicates that the sp bug11834_2\n# does not exist(this is wrong but can be accepted)\n# This behaviour has been reported as bug#21294\n--error ER_SP_DOES_NOT_EXIST\nexecute stmt;\ndeallocate prepare stmt;\ndrop function bug11834_2;\n\n#\n# Bug#12953 \"Stored procedures: crash if OPTIMIZE TABLE in function\"\n#\ndelimiter |;\n--disable_warnings\nDROP FUNCTION IF EXISTS bug12953|\n--enable_warnings\n--error ER_SP_NO_RETSET\nCREATE FUNCTION bug12953() RETURNS INT\nBEGIN\n  OPTIMIZE TABLE t1;\n  RETURN 1;\nEND|\ndelimiter ;|\n\n#\n# Bug##12995 \"Inside function \"Table 't4' was not locked with LOCK TABLES\"\n#\ndelimiter |;\n--disable_warnings\nDROP FUNCTION IF EXISTS bug12995|\n--enable_warnings\n--error ER_SP_BADSTATEMENT\nCREATE FUNCTION bug12995() RETURNS INT\nBEGIN\n  HANDLER t1 OPEN;\n  RETURN 1;\nEND|\n--error ER_SP_BADSTATEMENT\nCREATE FUNCTION bug12995() RETURNS INT\nBEGIN\n  HANDLER t1 READ FIRST;\n  RETURN 1;\nEND|\n--error ER_SP_BADSTATEMENT\nCREATE FUNCTION bug12995() RETURNS INT\nBEGIN\n  HANDLER t1 CLOSE;\n  RETURN 1;\nEND|\n--error 1305\nSELECT bug12995()|\ndelimiter ;|\n\n\n#\n# BUG#12712: SET AUTOCOMMIT should fail within SP/functions/triggers\n#\n--disable_warnings\ndrop procedure if exists bug12712;\ndrop function if exists bug12712;\n--enable_warnings\n# Can...\ncreate procedure bug12712()\n  set session autocommit = 0;\n\nselect @@autocommit;\nset @au = @@autocommit;\ncall bug12712();\nselect @@autocommit;\nset session autocommit = @au;\n\ndelimiter |;\ncreate function bug12712()\n  returns int\nbegin\n  call bug12712();\n  return 0;\nend|\n\n# Can't...\n--error ER_SP_CANT_SET_AUTOCOMMIT\nset @x = bug12712()|\ndrop procedure bug12712|\ndrop function bug12712|\n--error ER_SP_CANT_SET_AUTOCOMMIT\ncreate function bug12712()\n    returns int\nbegin\n  set session autocommit = 0;\n  return 0;\nend|\n--error ER_SP_CANT_SET_AUTOCOMMIT\ncreate function bug12712()\n    returns int\nbegin\n  set @@autocommit = 0;\n  return 0;\nend|\n--error ER_SP_CANT_SET_AUTOCOMMIT\ncreate function bug12712()\n    returns int\nbegin\n  set local autocommit = 0;\n  return 0;\nend|\ndelimiter ;|\n--error ER_SP_CANT_SET_AUTOCOMMIT\ncreate trigger bug12712\n  before insert on t1 for each row set session autocommit = 0;\n\n#\n# BUG#9367: Stored procedures: client hang after \"show warnings\"\n#\n--disable_parsing\n--disable_warnings\ndrop procedure if exists bug9367;\n--enable_warnings\ncreate table t1 (s1 int);\nselect s1 from t1;\ndelimiter |;\ncreate procedure bug9367()\nbegin\n  declare v int;\n  declare c cursor for select s1 from t1;\n  open c;\n  show warnings;\n  fetch c into v;\n  select v;\nend|\ndelimiter ;|\ncall bug9367();\ndrop procedure bug9367;\ndrop table t1;\n--enable_parsing\n\n#\n# BUG#13510: Setting password local variable changes current password\n#\ndelimiter |;\n--disable_warnings\ndrop procedure if exists bug13510_1|\ndrop procedure if exists bug13510_2|\ndrop procedure if exists bug13510_3|\ndrop procedure if exists bug13510_4|\n--enable_warnings\n\n--error ER_SP_BAD_VAR_SHADOW\ncreate procedure bug13510_1()\nbegin\n  declare password varchar(10);\n\n  set password = 'foo1';\n  select password;\nend|\n\n# Check that an error message is sent\n--error ER_PARSE_ERROR\nset names='foo2'|\n\n--error ER_SP_BAD_VAR_SHADOW\ncreate procedure bug13510_2()\nbegin\n  declare names varchar(10);\n\n  set names = 'foo2';\n  select names;\nend|\n\ncreate procedure bug13510_3()\nbegin\n  declare password varchar(10);\n\n  set `password` = 'foo3';\n  select password;\nend|\n\ncreate procedure bug13510_4()\nbegin\n  declare names varchar(10);\n\n  set `names` = 'foo4';\n  select names;\nend|\n\ncall bug13510_3()|\ncall bug13510_4()|\n\ndrop procedure bug13510_3|\ndrop procedure bug13510_4|\n\n\n#\n# Test that statements which implicitly commit transaction are prohibited\n# in stored function and triggers. Attempt to create function or trigger\n# containing such statement should produce error (includes test for\n# bug #13627).\n#\n--disable_warnings\ndrop function if exists bug_13627_f|\n--enable_warnings\n\nCREATE TABLE t1 (a int)|\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN DROP TRIGGER test1; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN DROP TRIGGER test1; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create table t2 (a int); END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN create table t2 (a int); return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create index t1_i on t1 (a); END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN create index t1_i on t1 (a); return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN alter table t1 add column  b int; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN alter table t1 add column  b int; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN rename table t1 to t2; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN rename table t1 to t2; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN truncate table t1; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN truncate table t1; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop table t1; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN drop table t1; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop index t1_i on t1; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN drop index t1_i on t1; return 1; END |\n\n-- error ER_SP_BADSTATEMENT\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN unlock tables; END |\n-- error ER_SP_BADSTATEMENT\nCREATE FUNCTION bug_13627_f() returns int BEGIN unlock tables; return 1; END |\n\n-- error ER_SP_BADSTATEMENT\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN LOCK TABLE t1 READ; END |\n-- error ER_SP_BADSTATEMENT\nCREATE FUNCTION bug_13627_f() returns int BEGIN LOCK TABLE t1 READ; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create database mysqltest; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN create database mysqltest; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop database mysqltest; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN drop database mysqltest; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create user 'mysqltest_1'; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN create user 'mysqltest_1'; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER bug21975 BEFORE INSERT ON t1 FOR EACH ROW BEGIN grant select on t1 to 'mysqltest_1'; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug21975() returns int BEGIN grant select on t1 to 'mysqltest_1'; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER bug21975 BEFORE INSERT ON t1 FOR EACH ROW BEGIN revoke select on t1 from 'mysqltest_1'; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug21975() returns int BEGIN revoke select on t1 from 'mysqltest_1'; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER bug21975 BEFORE INSERT ON t1 FOR EACH ROW BEGIN revoke all privileges on *.* from 'mysqltest_1'; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug21975() returns int BEGIN revoke all privileges on *.* from 'mysqltest_1'; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop user 'mysqltest_1'; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN drop user 'mysqltest_1'; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN rename user 'mysqltest_2' to 'mysqltest_1'; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN rename user 'mysqltest_2' to 'mysqltest_1'; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create view v1 as select 1; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN create view v1 as select 1; return 1; END |\n\n-- error ER_SP_BADSTATEMENT\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN alter view v1 as select 1; END |\n-- error ER_SP_BADSTATEMENT\nCREATE FUNCTION bug_13627_f() returns int BEGIN alter view v1 as select 1; return 1; END |\n\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop view v1; END |\n-- error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nCREATE FUNCTION bug_13627_f() returns int BEGIN drop view v1; return 1; END |\n\n-- error ER_SP_NO_RECURSIVE_CREATE\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create trigger tr2 before insert on t1 for each row do select 1; END |\n-- error ER_SP_NO_RECURSIVE_CREATE\nCREATE FUNCTION bug_13627_f() returns int BEGIN create trigger tr2 before insert on t1 for each row do select 1; return 1; END |\n\n-- error ER_SP_NO_DROP_SP\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop function bug_13627_f; END |\n-- error ER_SP_NO_DROP_SP\nCREATE FUNCTION bug_13627_f() returns int BEGIN drop function bug_13627_f; return 1; END |\n\n-- error ER_SP_NO_RECURSIVE_CREATE\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create function f2 () returns int return 1; END |\n-- error ER_SP_NO_RECURSIVE_CREATE\nCREATE FUNCTION bug_13627_f() returns int BEGIN create function f2 () returns int return 1; return 1; END |\n\nCREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW\n  BEGIN\n    CREATE TEMPORARY TABLE t2 (a int);\n    DROP TEMPORARY TABLE t2;\n  END |\nCREATE FUNCTION bug_13627_f() returns int\n  BEGIN\n    CREATE TEMPORARY TABLE t2 (a int);\n    DROP TEMPORARY TABLE t2;\n    return 1;\n  END |\n\ndrop table t1|\ndrop function bug_13627_f|\n\ndelimiter ;|\n\n# BUG#12329: \"Bogus error msg when executing PS with stored procedure after\n# SP was re-created\". See also test for related bug#13399 in trigger.test\ndrop function if exists bug12329;\n--enable_warnings\ncreate table t1 as select 1 a;\ncreate table t2 as select 1 a;\ncreate function bug12329() returns int return (select a from t1);\nprepare stmt1 from 'select bug12329()';\nexecute stmt1;\ndrop function bug12329;\ncreate function bug12329() returns int return (select a+100 from t2);\nselect bug12329();\nexecute stmt1;\ndeallocate prepare stmt1;\ndrop function bug12329; \ndrop table t1, t2;\n\n#\n# Bug#13514 \"server crash when create a stored procedure before choose a\n# database\" and\n# Bug#13587 \"Server crash when SP is created without database\n# selected\"\n#\ncreate database mysqltest1;\nuse mysqltest1;\ndrop database mysqltest1;\n--error ER_NO_DB_ERROR \ncreate function f1() returns int return 1;\ndelimiter |;\n--error ER_NO_DB_ERROR \ncreate procedure p1(out param1 int)\nbegin\n  select count(*) into param1 from t3;\nend|\ndelimiter ;|\nuse test;\n\n\n#\n# BUG#13037: undefined variable in IF cause erroneous error-message\n#\n\n--disable_warnings\nDROP PROCEDURE IF EXISTS bug13037_p1;\nDROP PROCEDURE IF EXISTS bug13037_p2;\nDROP PROCEDURE IF EXISTS bug13037_p3;\n--enable_warnings\n\ndelimiter |;\n\nCREATE PROCEDURE bug13037_p1()\nBEGIN\n  IF bug13037_foo THEN\n    SELECT 1;\n  END IF;\nEND|\n\nCREATE PROCEDURE bug13037_p2()\nBEGIN\n  SET @bug13037_foo = bug13037_bar;\nEND|\n\nCREATE PROCEDURE bug13037_p3()\nBEGIN\n  SELECT bug13037_foo;\nEND|\n\ndelimiter ;|\n\n--echo\n\n--error 1054\nCALL bug13037_p1();\n--error 1054\nCALL bug13037_p2();\n--error 1054\nCALL bug13037_p3();\n\n--error 1054\nCALL bug13037_p1();\n--error 1054\nCALL bug13037_p2();\n--error 1054\nCALL bug13037_p3();\n\nDROP PROCEDURE bug13037_p1;\nDROP PROCEDURE bug13037_p2;\nDROP PROCEDURE bug13037_p3;\n\n#\n# Bug#14569 \"editing a stored procedure kills mysqld-nt\"\n#\ncreate database mysqltest1;\ncreate database mysqltest2;\nuse mysqltest1;\ndrop database mysqltest1;\ncreate procedure mysqltest2.p1() select version();\n--error ER_NO_DB_ERROR \ncreate procedure p2() select version();\nuse mysqltest2;\n--replace_column 5 '0000-00-00 00:00:00' 6 '0000-00-00 00:00:00'\nshow procedure status;\ndrop database mysqltest2;\nuse test;\n\n#\n# Bug#13012 \"SP: REPAIR/BACKUP/RESTORE TABLE crashes the server\"\n#\ndelimiter |;\n--disable_warnings\nDROP FUNCTION IF EXISTS bug13012|\n--enable_warnings\n--error ER_SP_NO_RETSET\nCREATE FUNCTION bug13012() RETURNS INT\nBEGIN\n  REPAIR TABLE t1;\n  RETURN 1;\nEND|\ncreate table t1 (a int)|\nCREATE PROCEDURE bug13012_1() REPAIR TABLE t1|\nCREATE FUNCTION bug13012_2() RETURNS INT\nBEGIN\n  CALL bug13012_1();\n  RETURN 1;\nEND|\n--error ER_SP_NO_RETSET\nSELECT bug13012_2()|\ndrop table t1|\ndrop procedure bug13012_1|\ndrop function bug13012_2|\ndelimiter ;|\n\n#\n# BUG#11555 \"Stored procedures: current SP tables locking make \n# impossible view security\". We should not expose names of tables\n# which are implicitly used by view (via stored routines/triggers).\n#\n# Note that SQL standard assumes that you simply won't be able drop table\n# and leave some objects (routines/views/triggers) which were depending on\n# it. Such objects should be dropped in advance (by default) or will be\n# dropped simultaneously with table (DROP TABLE with CASCADE clause).\n# So these tests probably should go away once we will implement standard\n# behavior.\n--disable_warnings\ndrop function if exists bug11555_1;\ndrop function if exists bug11555_2;\ndrop view if exists v1, v2, v3, v4;\n--enable_warnings\ncreate function bug11555_1() returns int return (select max(i) from t1);\ncreate function bug11555_2() returns int return bug11555_1();\n# It is OK to report name of implicitly used table which is missing\n# when we create view.\n# For stored functions however, because of exceptions handlers, there is\n# no easy way to find out if a missing table makes the view invalid.\ncreate view v1 as select bug11555_1();\ndrop view v1;\ncreate view v2 as select bug11555_2();\ndrop view v2;\n# But we should hide name of missing implicitly used table when we use view\ncreate table t1 (i int);\ncreate view v1 as select bug11555_1();\ncreate view v2 as select bug11555_2();\ncreate view v3 as select * from v1;\ndrop table t1;\n--error ER_VIEW_INVALID\nselect * from v1;\n--error ER_VIEW_INVALID\nselect * from v2;\n--error ER_VIEW_INVALID\nselect * from v3;\n# Note that creation of view which depends on broken view is yet \n# another form of view usage.\ncreate view v4 as select * from v1;\ndrop view v1, v2, v3, v4;\n# We also should hide details about broken triggers which are\n# invoked for view.\ndrop function bug11555_1;\ndrop function bug11555_2;\ncreate table t1 (i int);\ncreate table t2 (i int);\ncreate trigger t1_ai after insert on t1 for each row insert into t2 values (new.i);\ncreate view v1 as select * from t1;\ndrop table t2;\n# Limitation, the desired error is ER_VIEW_INVALID\n--error ER_NO_SUCH_TABLE\ninsert into v1 values (1);\ndrop trigger t1_ai;\ncreate function bug11555_1() returns int return (select max(i) from t2);\ncreate trigger t1_ai after insert on t1 for each row set @a:=bug11555_1();\n# Limitation, the desired error is ER_VIEW_INVALID\n--error ER_NO_SUCH_TABLE \ninsert into v1 values (2);\ndrop function bug11555_1;\ndrop table t1;\ndrop view v1;\n\n#\n# BUG#15658: Server crashes after creating function as empty string\n#\n--disable_warnings\ndrop procedure if exists ` bug15658`;\n--enable_warnings\n\n--error ER_SP_WRONG_NAME\ncreate procedure ``() select 1;\n--error ER_SP_WRONG_NAME\ncreate procedure ` `() select 1;\n--error ER_SP_WRONG_NAME\ncreate procedure `bug15658 `() select 1;\n--error ER_WRONG_DB_NAME\ncreate procedure ``.bug15658() select 1;\n--error ER_WRONG_DB_NAME\ncreate procedure `x `.bug15658() select 1;\n\n# This should work\ncreate procedure ` bug15658`() select 1;\ncall ` bug15658`();\n--replace_column 5 '0000-00-00 00:00:00' 6 '0000-00-00 00:00:00'\nshow procedure status;\ndrop procedure ` bug15658`;\n\n\n#\n# BUG#14270: Stored procedures: crash if load index\n#\n--disable_warnings\ndrop function if exists bug14270;\ndrop table if exists t1;\n--enable_warnings\n\ncreate table t1 (s1 int primary key);\n\ndelimiter |;\n--error ER_SP_NO_RETSET\ncreate function bug14270() returns int\nbegin\n  load index into cache t1;\n  return 1;\nend|\n\n--error ER_SP_NO_RETSET\ncreate function bug14270() returns int\nbegin\n  cache index t1 key (`primary`) in keycache1;\n  return 1;\nend|\ndelimiter ;|\n\ndrop table t1;\n\n\n#\n# BUG#15091: Sp Returns Unknown error in order clause....and \n#            there is no order by clause\n#\n--disable_warnings\ndrop procedure if exists bug15091;\n--enable_warnings\n\ndelimiter |;\ncreate procedure bug15091()\nbegin\n  declare selectstr varchar(6000) default ' ';\n  declare conditionstr varchar(5000)  default '';\n\n  set selectstr = concat(selectstr,\n                         ' and ',\n                         c.operatorid,\n                         'in (',conditionstr, ')');\nend|\ndelimiter ;|\n\n# The error message used to be:\n#   ERROR 1109 (42S02): Unknown table 'c' in order clause\n# but is now rephrased to something less misleading:\n#   ERROR 1109 (42S02): Unknown table 'c' in field list\n--error ER_UNKNOWN_TABLE\ncall bug15091();\n\ndrop procedure bug15091;\n\n\n#\n# BUG#16896: Stored function: unused AGGREGATE-clause in CREATE FUNCTION\n#\n--disable_warnings\ndrop function if exists bug16896;\n--enable_warnings\n\n--error ER_PARSE_ERROR\ncreate aggregate function bug16896() returns int return 1;\n\n#\n#\n# BUG#14702: misleading error message when syntax error in CREATE\n# PROCEDURE\n#\n# Misleading error message was given when IF NOT EXISTS was used in\n# CREATE PROCEDURE.\n#\n--disable_warnings\nDROP PROCEDURE IF EXISTS bug14702;\n--enable_warnings\n\n--error ER_PARSE_ERROR\nCREATE IF NOT EXISTS PROCEDURE bug14702()\nBEGIN\nEND;\n\n--error ER_PARSE_ERROR\nCREATE PROCEDURE IF NOT EXISTS bug14702()\nBEGIN\nEND;\n\n\n#\n# BUG#20953: create proc with a create view that uses local\n# vars/params should fail to create\n#\n# See test case for what syntax is forbidden in a view.\n#\n--disable_warnings\nDROP TABLE IF EXISTS t1;\n--enable_warnings\n\nCREATE TABLE t1 (i INT);\n\n# We do not have to drop this procedure and view because they won't be\n# created.\n--error ER_VIEW_SELECT_CLAUSE\nCREATE PROCEDURE bug20953() CREATE VIEW v AS SELECT 1 INTO @a;\n--error ER_VIEW_SELECT_CLAUSE\nCREATE PROCEDURE bug20953() CREATE VIEW v AS SELECT 1 INTO DUMPFILE \"file\";\n--error ER_VIEW_SELECT_CLAUSE\nCREATE PROCEDURE bug20953() CREATE VIEW v AS SELECT 1 INTO OUTFILE \"file\";\n--error ER_VIEW_SELECT_CLAUSE\nCREATE PROCEDURE bug20953()\n  CREATE VIEW v AS SELECT i FROM t1 PROCEDURE ANALYSE();\n--error ER_VIEW_SELECT_DERIVED\nCREATE PROCEDURE bug20953() CREATE VIEW v AS SELECT 1 FROM (SELECT 1) AS d1;\n--error ER_VIEW_SELECT_VARIABLE\nCREATE PROCEDURE bug20953(i INT) CREATE VIEW v AS SELECT i;\ndelimiter |;\n--error ER_VIEW_SELECT_VARIABLE\nCREATE PROCEDURE bug20953()\nBEGIN\n  DECLARE i INT;\n  CREATE VIEW v AS SELECT i;\nEND |\ndelimiter ;|\n--error ER_VIEW_SELECT_VARIABLE\nPREPARE stmt FROM \"CREATE VIEW v AS SELECT ?\";\n\nDROP TABLE t1;\n\n\n#\n# BUG#24491 \"using alias from source table in insert ... on duplicate key\"\n#\n--disable_warnings\ndrop tables if exists t1;\ndrop procedure if exists bug24491;\n--enable_warnings\ncreate table t1 (id int primary key auto_increment, value varchar(10));\ninsert into t1 (id, value) values (1, 'FIRST'), (2, 'SECOND'), (3, 'THIRD');\n# Let us create routine with INSERT ... SELECT ... ON DUPLICATE KEY UPDATE \n# statement which in its ON DUPLICATE KEY clause erroneously tries to assign\n# value to a column which is mentioned only in SELECT part.\ncreate procedure bug24491()\n  insert into t1 (id, value) select * from (select 4 as i, 'FOURTH' as v) as y on duplicate key update v = 'DUP';\n# Both first and second calls to it should fail\n--error ER_BAD_FIELD_ERROR \ncall bug24491();\n--error ER_BAD_FIELD_ERROR\ncall bug24491();\ndrop procedure bug24491;\n# And now the same test for more complex case which is more close\n# to the one that was reported originally.\ncreate procedure bug24491()\n  insert into t1 (id, value) select * from (select 4 as id, 'FOURTH' as value) as y on duplicate key update y.value = 'DUP';\n--error ER_BAD_FIELD_ERROR \ncall bug24491();\n--error ER_BAD_FIELD_ERROR\ncall bug24491();\ndrop procedure bug24491;\ndrop tables t1;\n\n#\n# BUG#18914: Calling certain SPs from triggers fail\n#\n# Failing to call a procedure that does implicit commit from a trigger\n# is a correct behaviour, however the error message was misleading.\n#\n# DROP TABLE IF EXISTS is also fixed to give correct error instead of\n# \"Table doesn't exist\". \n#\n--disable_warnings\nDROP FUNCTION IF EXISTS bug18914_f1;\nDROP FUNCTION IF EXISTS bug18914_f2;\nDROP PROCEDURE IF EXISTS bug18914_p1;\nDROP PROCEDURE IF EXISTS bug18914_p2;\nDROP TABLE IF EXISTS t1, t2;\n--enable_warnings\n\nCREATE TABLE t1 (i INT);\n\nCREATE PROCEDURE bug18914_p1() CREATE TABLE t2 (i INT);\nCREATE PROCEDURE bug18914_p2() DROP TABLE IF EXISTS no_such_table;\n\ndelimiter |;\nCREATE FUNCTION bug18914_f1() RETURNS INT\nBEGIN\n  CALL bug18914_p1();\n  RETURN 1;\nEND |\n\nCREATE FUNCTION bug18914_f2() RETURNS INT\nBEGIN\n  CALL bug18914_p2();\n  RETURN 1;\nEND |\ndelimiter ;|\n\nCREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW\n  CALL bug18914_p1();\n\n--error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nINSERT INTO t1 VALUES (1);\n\n--error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nSELECT bug18914_f1();\n\n--error ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\nSELECT bug18914_f2();\n\n--error ER_NO_SUCH_TABLE\nSELECT * FROM t2;\n\nDROP FUNCTION bug18914_f1;\nDROP FUNCTION bug18914_f2;\nDROP PROCEDURE bug18914_p1;\nDROP PROCEDURE bug18914_p2;\nDROP TABLE t1;\n\n#\n# Bug#20713 (Functions will not not continue for SQLSTATE VALUE '42S02')\n#\n\n--disable_warnings\ndrop table if exists bogus_table_20713;\ndrop function if exists func_20713_a;\ndrop function if exists func_20713_b;\n--enable_warnings\n\ncreate table bogus_table_20713( id int(10) not null primary key);\ninsert into bogus_table_20713 values (1), (2), (3);\n\ndelimiter //;\n\ncreate function func_20713_a() returns int(11)\nbegin\n  declare id int;\n\n  declare continue handler for sqlexception set id=null;\n\n  set @in_func := 1;\n  set id = (select id from bogus_table_20713 where id = 3);\n  set @in_func := 2;\n\n  return id;\nend//\n\ncreate function func_20713_b() returns int(11)\nbegin\n  declare id int;\n\n  declare continue handler for sqlstate value '42S02' set id=null;\n\n  set @in_func := 1;\n  set id = (select id from bogus_table_20713 where id = 3);\n  set @in_func := 2;\n\n  return id;\nend//\n\ndelimiter ;//\n\nset @in_func := 0;\nselect func_20713_a();\nselect @in_func;\n\nset @in_func := 0;\nselect func_20713_b();\nselect @in_func;\n\ndrop table bogus_table_20713;\n\nset @in_func := 0;\nselect func_20713_a();\nselect @in_func;\n\nset @in_func := 0;\nselect func_20713_b();\nselect @in_func;\n\ndrop function if exists func_20713_a;\ndrop function if exists func_20713_b;\n\n#\n# Bug#25345 (Cursors from Functions)\n#\n\n--disable_warnings\ndrop table if exists table_25345_a;\ndrop table if exists table_25345_b;\ndrop procedure if exists proc_25345;\ndrop function if exists func_25345;\ndrop function if exists func_25345_b;\n--enable_warnings\n\ncreate table table_25345_a (a int);\ncreate table table_25345_b (b int);\n\ndelimiter ||;\n\ncreate procedure proc_25345()\nbegin\n  declare c1 cursor for select a from table_25345_a;\n  declare c2 cursor for select b from table_25345_b;\n\n  select 1 as result;\nend ||\n\ncreate function func_25345() returns int(11)\nbegin\n  call proc_25345();\n  return 1;\nend ||\n\ncreate function func_25345_b() returns int(11)\nbegin\n  declare c1 cursor for select a from table_25345_a;\n  declare c2 cursor for select b from table_25345_b;\n\n  return 1;\nend ||\n\ndelimiter ;||\n\ncall proc_25345();\n--error ER_SP_NO_RETSET\nselect func_25345();\nselect func_25345_b();\n\ndrop table table_25345_a;\n\ncall proc_25345();\n--error ER_SP_NO_RETSET\nselect func_25345();\nselect func_25345_b();\n\ndrop table table_25345_b;\ndrop procedure proc_25345;\ndrop function func_25345;\ndrop function func_25345_b;\n\n#\n# End of 5.0 tests\n#\n--echo End of 5.0 tests\n\n#\n# Bug#16164 \"Easter egg\": check that SHOW AUTHORS is disabled in\n# stored functions/triggers\n#\n--disable_warnings\ndrop function if exists bug16164;\n--enable_warnings\ndelimiter |;\n--error ER_SP_NO_RETSET\ncreate function bug16164() returns int\nbegin\n  show authors;\n  return 42;\nend|\ndelimiter ;|\n\n\n#\n# BUG#20701: BINARY keyword should be forbidden in stored routines\n#\n--disable_warnings\ndrop function if exists bug20701;\n--enable_warnings\n#\n# This was disabled in 5.1.12. See bug #20701\n# When collation support in SP is implemented, then this test should\n# be removed.\n#\n--error ER_NOT_SUPPORTED_YET\ncreate function bug20701() returns varchar(25) binary return \"test\";\ncreate function bug20701() returns varchar(25) return \"test\";\ndrop function bug20701;\n\n#\n# Bug#26503 (Illegal SQL exception handler code causes the server to crash)\n#\n\ndelimiter //;\n\n--error ER_SP_LILABEL_MISMATCH\ncreate procedure proc_26503_error_1()\nbegin\nretry:\n  repeat\n    begin\n      declare continue handler for sqlexception\n      begin\n        iterate retry;\n      end\n\n      select \"do something\";\n    end\n  until true end repeat retry;\nend//\n\n--error ER_SP_LILABEL_MISMATCH\ncreate procedure proc_26503_error_2()\nbegin\nretry:\n  repeat\n    begin\n      declare continue handler for sqlexception\n        iterate retry;\n\n      select \"do something\";\n    end\n  until true end repeat retry;\nend//\n\n--error ER_SP_LILABEL_MISMATCH\ncreate procedure proc_26503_error_3()\nbegin\nretry:\n  repeat\n    begin\n      declare continue handler for sqlexception\n      begin\n        leave retry;\n      end\n\n      select \"do something\";\n    end\n  until true end repeat retry;\nend//\n\n--error ER_SP_LILABEL_MISMATCH\ncreate procedure proc_26503_error_4()\nbegin\nretry:\n  repeat\n    begin\n      declare continue handler for sqlexception\n        leave retry;\n\n      select \"do something\";\n    end\n  until true end repeat retry;\nend//\n\ndelimiter ;//\n\n\n#\n# Bug#28360 (RENAME DATABASE destroys routines)\n#\n\n--disable_warnings\ndrop procedure if exists proc_28360;\ndrop function if exists func_28360;\n--enable_warnings\n\ndelimiter //;\n\n--error ER_SP_NO_DROP_SP\nCREATE PROCEDURE proc_28360()\nBEGIN\n  ALTER DATABASE `#mysql50#upgrade-me` UPGRADE DATA DIRECTORY NAME;\nEND//\n\n--error ER_SP_NO_DROP_SP\nCREATE FUNCTION func_28360() RETURNS int\nBEGIN\n  ALTER DATABASE `#mysql50#upgrade-me` UPGRADE DATA DIRECTORY NAME;\n  RETURN 0;\nEND//\n\ndelimiter ;//\n\n\n#\n# Bug#29223 declare cursor c for SHOW .....\n#\n\n--disable_warnings\nDROP PROCEDURE IF EXISTS p1;\n--enable_warnings\n--delimiter |\n--error ER_PARSE_ERROR\nCREATE PROCEDURE p1()\nBEGIN\n  DECLARE c char(100);\n  DECLARE cur1 CURSOR FOR SHOW TABLES;\n\n  OPEN cur1;\n  FETCH cur1 INTO c;\n  select c;\n  CLOSE cur1;\nEND|\n--delimiter ;\n\n#\n# Bug#29816 Syntactically wrong query fails with misleading error message\n#\n\n--disable_warnings\nDROP DATABASE IF EXISTS mysqltest;\n--enable_warnings\nCREATE DATABASE mysqltest;\nUSE mysqltest;\nDROP DATABASE mysqltest;\n# Both ER_SP_DOES_NOT_EXIST and ER_PARSE_ERROR are valid here,\n# the result is implementation dependent:\n# See Bug#29816 for details\n--error ER_SP_DOES_NOT_EXIST\nSELECT inexistent(), 1 + ,;\n--error ER_SP_DOES_NOT_EXIST\nSELECT inexistent();\n--error ER_PARSE_ERROR\nSELECT .inexistent();\n--error ER_PARSE_ERROR\nSELECT ..inexistent();\nUSE test;\n\n#\n# Bug#30904 SET PASSWORD statement is non-transactional\n#\n\ndelimiter |;\n\n--error ER_SP_CANT_SET_AUTOCOMMIT\ncreate function f1() returns int\nbegin\n  set @test = 1, password = password('foo');\n  return 1;\nend|\n\n--error ER_SP_CANT_SET_AUTOCOMMIT\ncreate trigger t1\n  before insert on t2 for each row set password = password('foo');|\n\ndelimiter ;|\n\n#\n# Bug#30882 Dropping a temporary table inside a stored function may cause a server crash\n#\n\n--disable_warnings\ndrop function if exists f1;\ndrop function if exists f2;\ndrop table if exists t1, t2;\n--enable_warnings\n\ndelimiter |;\ncreate function f1() returns int\nbegin\n drop temporary table t1;\n return 1;\nend|\ndelimiter ;|\n--error ER_CANT_REOPEN_TABLE\ncreate temporary table t1 as select f1();\n\ndelimiter |;\ncreate function f2() returns int\nbegin\n create temporary table t2 as select f1();\n return 1;\nend|\ndelimiter ;|\n--error ER_CANT_REOPEN_TABLE\ncreate temporary table t1 as select f2();\n\ndrop function f1;\ndrop function f2;\n\ndelimiter |;\ncreate function f1() returns int\nbegin\n drop temporary table t2,t1;\n return 1;\nend|\ncreate function f2() returns int\nbegin\n create temporary table t2 as select f1();\n return 1;\nend|\ndelimiter ;|\n--error ER_CANT_REOPEN_TABLE\ncreate temporary table t1 as select f2();\n\ndrop function f1;\ndrop function f2;\n\ncreate temporary table t2(a int);\nselect * from t2;\ndelimiter |;\ncreate function f2() returns int\nbegin\n drop temporary table t2;\n return 1;\nend|\ndelimiter ;|\nselect f2();\n\ndrop function f2;\n--error ER_BAD_TABLE_ERROR\ndrop table t2;\n\n--echo End of 5.1 tests\n\n#\n# Bug#33983 (Stored Procedures: wrong end <label> syntax is accepted)\n#\n\n--disable_warnings\ndrop procedure if exists proc_33983_a;\ndrop procedure if exists proc_33983_b;\ndrop procedure if exists proc_33983_c;\ndrop procedure if exists proc_33983_d;\n--enable_warnings\n\ndelimiter |;\n\n--error ER_SP_LABEL_MISMATCH\ncreate procedure proc_33983_a()\nbegin\n  label1:\n    begin\n      label2:\n      begin\n        select 1;\n      end label1;\n    end;\nend|\n\n--error ER_SP_LABEL_MISMATCH\ncreate procedure proc_33983_b()\nbegin\n  label1:\n    repeat\n      label2:\n      repeat\n        select 1;\n      until FALSE end repeat label1;\n    until FALSE end repeat;\nend|\n\n--error ER_SP_LABEL_MISMATCH\ncreate procedure proc_33983_c()\nbegin\n  label1:\n    while TRUE do\n      label2:\n      while TRUE do\n        select 1;\n      end while label1;\n    end while;\nend|\n\n--error ER_SP_LABEL_MISMATCH\ncreate procedure proc_33983_d()\nbegin\n  label1:\n    loop\n      label2:\n      loop\n        select 1;\n      end loop label1;\n    end loop;\nend|\n\nCREATE TABLE t1 (a INT)|\nINSERT INTO t1 VALUES (1),(2)|\nCREATE PROCEDURE p1(a INT) BEGIN END|\n--error ER_SUBQUERY_NO_1_ROW\nCALL p1((SELECT * FROM t1))|\nDROP PROCEDURE IF EXISTS p1|\nDROP TABLE t1|\n\ndelimiter ;|\n\n#\n# Bug#21801: SQL exception handlers and warnings\n#\n\n--disable_warnings\ndrop procedure if exists p1;\n--enable_warnings\ndelimiter |;\ncreate procedure p1()\nbegin\n  create table t1 (a int) engine=MyISAM;\n  drop table t1;\nend|\ndelimiter ;|\ncall p1();\ncall p1();\ndrop procedure p1;\n\n#\n# Bug#8759 (Stored Procedures: SQLSTATE '00000' should be illegal)\n#\n\n--disable_warnings\ndrop procedure if exists proc_8759;\n--enable_warnings\n\ndelimiter $$;\n\n--error ER_SP_BAD_SQLSTATE\ncreate procedure proc_8759()\nbegin\n  declare should_be_illegal condition for sqlstate '00000';\n  declare continue handler for should_be_illegal set @x=0;\nend$$\n\n--error ER_SP_BAD_SQLSTATE\ncreate procedure proc_8759()\nbegin\n  declare continue handler for sqlstate '00000' set @x=0;\nend$$\n\ndelimiter ;$$\n\n#\n# Bug#36510 (Stored Procedures: mysql_error_code 0 should be illegal)\n#\n\n--disable_warnings\ndrop procedure if exists proc_36510;\n--enable_warnings\n\ndelimiter $$;\n\n--error ER_SP_BAD_SQLSTATE\ncreate procedure proc_36510()\nbegin\n  declare should_be_illegal condition for sqlstate '00123';\n  declare continue handler for should_be_illegal set @x=0;\nend$$\n\n--error ER_SP_BAD_SQLSTATE\ncreate procedure proc_36510()\nbegin\n  declare continue handler for sqlstate '00123' set @x=0;\nend$$\n\n--error ER_WRONG_VALUE\ncreate procedure proc_36510()\nbegin\n  declare should_be_illegal condition for 0;\n  declare continue handler for should_be_illegal set @x=0;\nend$$\n\n--error ER_WRONG_VALUE\ncreate procedure proc_36510()\nbegin\n  declare continue handler for 0 set @x=0;\nend$$\ndelimiter ;$$\n\n#\n# Bug#15192: \"fatal errors\" are caught by handlers in stored procedures\n#\n\n--disable_warnings\ndrop procedure if exists p1;\n--enable_warnings\nset @old_recursion_depth = @@max_sp_recursion_depth;\nset @@max_sp_recursion_depth = 255;\ndelimiter |;\ncreate procedure p1(a int)\nbegin\n  declare continue handler for 1436 -- ER_STACK_OVERRUN_NEED_MORE\n    select 'exception';\n  call p1(a+1);\nend|\ndelimiter ;|\n--error 0,ER_STACK_OVERRUN_NEED_MORE,ER_SP_RECURSION_LIMIT\ncall p1(1);\nset @@max_sp_recursion_depth = @old_recursion_depth;\ndrop procedure p1;\n\n#\n# BUG#NNNN: New bug synopsis\n#\n#--disable_warnings\n#drop procedure if exists bugNNNN;\n#drop function if exists bugNNNN;\n#--enable_warnings\n#create procedure bugNNNN...\n#create function bugNNNN...\n\n#\n# CLEANUP and RESTORE\n#\nLOAD DATA INFILE '../../tmp/proc.txt' INTO TABLE mysql.proc;\nremove_file $MYSQLTEST_VARDIR/tmp/proc.txt;\n\n#\n# Bug #38159: Function parsing problem generates misleading error message\n#\n\nCREATE TABLE t1 (a INT, b INT);\nINSERT INTO t1 VALUES (1,1), (2,2);\n--error ER_FUNC_INEXISTENT_NAME_COLLISION\nSELECT MAX (a) FROM t1 WHERE b = 999999;\nSELECT AVG (a) FROM t1 WHERE b = 999999;\n--error ER_SP_DOES_NOT_EXIST\nSELECT non_existent (a) FROM t1 WHERE b = 999999;\nDROP TABLE t1;\n\n\n#\n# Bug #46374 crash, INSERT INTO t1 uses function, function modifies t1\n#\nCREATE TABLE t1 ( f2 INTEGER, f3 INTEGER );\nINSERT INTO t1 VALUES  ( 1, 1 );\n\ndelimiter |;\n\nCREATE FUNCTION func_1 () RETURNS INTEGER\nBEGIN\n  INSERT INTO t1 SELECT * FROM t1 ;\n  RETURN 1 ;\nEND|\n\ndelimiter ;|\n\n# The bug caused the following INSERT statement to trigger\n# an assertion.   Error 1442 is the correct response\n#\n--error 1442\nINSERT INTO t1 SELECT * FROM (SELECT 2 AS f1, 2 AS f2) AS A WHERE func_1() = 5;\n\n# Cleanup\nDROP FUNCTION func_1;\nDROP TABLE t1;\n\n\n\n--echo #\n--echo # Bug #47788: Crash in TABLE_LIST::hide_view_error on UPDATE + VIEW + \n--echo #   SP + MERGE + ALTER\n--echo #\n\nCREATE TABLE t1 (pk INT, b INT, KEY (b));\nCREATE ALGORITHM = TEMPTABLE VIEW v1 AS SELECT * FROM t1;\n\nCREATE PROCEDURE p1 (a int) UPDATE IGNORE v1 SET b = a; \n\n--error ER_NON_UPDATABLE_TABLE\nCALL p1(5);\n\nALTER TABLE t1 CHANGE COLUMN b b2 INT;\n\n--error ER_VIEW_INVALID\nCALL p1(7);\n\nDROP PROCEDURE p1;\nDROP VIEW v1;\nDROP TABLE t1;\n\n--echo #\n--echo # Bug#12428824 - PARSER STACK OVERFLOW AND CRASH IN SP_ADD_USED_ROUTINE\n--echo #                WITH OBSCURE QUERY\n--echo #\n\n--error ER_TOO_LONG_IDENT\nSELECT very_long_fn_name_1111111111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222225555555555555555555555555577777777777777777777777777777777777777777777777777777777777777777777777788888888999999999999999999999();\n\n--error ER_TOO_LONG_IDENT\nCALL very_long_pr_name_1111111111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222225555555555555555555555555577777777777777777777777777777777777777777777777777777777777777777777777788888888999999999999999999999();\n\n--error ER_WRONG_DB_NAME\nSELECT very_long_db_name_1111111111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222225555555555555555555555555577777777777777777777777777777777777777777777777777777777777777777777777788888888999999999999999999999.simple_func();\n\n--error ER_WRONG_DB_NAME\nCALL very_long_db_name_1111111111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222225555555555555555555555555577777777777777777777777777777777777777777777777777777777777777777777777788888888999999999999999999999.simple_proc();\n\n--error ER_TOO_LONG_IDENT\nSELECT db_name.very_long_fn_name_111111111111111111111111111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999999999999999999();\n\n--error ER_TOO_LONG_IDENT\nCALL db_name.very_long_pr_name_111111111111111111111111111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999999999999999999();\n--echo End of 5.1 tests\n\n--echo #\n--echo # Bug#23032: Handlers declared in a SP do not handle warnings generated in sub-SP\n--echo #\n\n--echo\n--echo # - Case 1\n--echo\n\n--disable_warnings\nDROP PROCEDURE IF EXISTS p1;\nDROP PROCEDURE IF EXISTS p2;\nDROP PROCEDURE IF EXISTS p3;\nDROP PROCEDURE IF EXISTS p4;\nDROP PROCEDURE IF EXISTS p5;\nDROP PROCEDURE IF EXISTS p6;\n--enable_warnings\n\ndelimiter |;\n\nCREATE PROCEDURE p1()\n  BEGIN\n    SELECT CAST('10 ' as unsigned integer);\n    SELECT 1;\n    CALL p2();\n  END|\n\nCREATE PROCEDURE p2()\n  BEGIN\n    SELECT CAST('10 ' as unsigned integer);\n  END|\n\ndelimiter ;|\n\nCALL p1();\n\nDROP PROCEDURE p1;\nDROP PROCEDURE p2;\n\n--echo\n--echo # - Case 2\n--echo\n\ndelimiter |;\n\nCREATE PROCEDURE p1()\n  BEGIN\n    DECLARE c INT DEFAULT 0;\n    DECLARE CONTINUE HANDLER FOR SQLWARNING SET c = c + 1;\n    CALL p2();\n    CALL p3();\n    CALL p4();\n    SELECT c;\n    SELECT @@warning_count;\n    SHOW WARNINGS;\n  END|\n\nCREATE PROCEDURE p2()\n  BEGIN\n    SELECT CAST('10 ' as unsigned integer);\n  END|\n\nCREATE PROCEDURE p3()\n  BEGIN\n    SELECT CAST('10 ' as unsigned integer);\n    SELECT 1;\n  END|\n\nCREATE PROCEDURE p4()\n  BEGIN\n    SELECT CAST('10 ' as unsigned integer);\n    CALL p2();\n  END|\n\nCREATE PROCEDURE p5()\n  BEGIN\n    SELECT CAST('10 ' as unsigned integer);\n    SHOW WARNINGS;\n  END|\n\nCREATE PROCEDURE P6()\n  BEGIN\n    DECLARE c INT DEFAULT 0;\n    DECLARE CONTINUE HANDLER FOR SQLWARNING SET c = c + 1;\n    CALL p5();\n    SELECT c;\n  END|\n\ndelimiter ;|\n\nCALL p1();\nCALL p6();\n\nDROP PROCEDURE p1;\nDROP PROCEDURE p2;\nDROP PROCEDURE p3;\nDROP PROCEDURE p4;\nDROP PROCEDURE p5;\nDROP PROCEDURE p6;\n\n--echo\n--echo # - Case 3: check that \"Exception trumps No Data\".\n--echo\n\n--disable_warnings\nDROP TABLE IF EXISTS t1;\n--enable_warnings\n\nCREATE TABLE t1(a INT);\nINSERT INTO t1 VALUES (1), (2), (3);\n\ndelimiter |;\n\nCREATE PROCEDURE p1()\nBEGIN\n  DECLARE c CURSOR FOR SELECT a FROM t1;\n\n  OPEN c;\n  \n  BEGIN\n    DECLARE v1 INT;\n    DECLARE v2 INT;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n      SELECT \"Error caught (expected)\";\n\n    DECLARE EXIT HANDLER FOR NOT FOUND\n      SELECT \"End of Result Set found!\";\n\n    WHILE TRUE DO\n      FETCH c INTO v1, v2;\n    END WHILE;\n  END;\n\n  CLOSE c;\n\n  SELECT a INTO @foo FROM t1 LIMIT 1; # Clear warning stack\nEND|\n\ndelimiter ;|\n\nCALL p1();\n\nDROP PROCEDURE p1;\nDROP TABLE t1;\n\n--echo #\n--echo # Bug#36185: Incorrect precedence for warning and exception handlers\n--echo #\n\n--disable_warnings\nDROP TABLE IF EXISTS t1;\nDROP PROCEDURE IF EXISTS p1;\n--enable_warnings\n\nCREATE TABLE t1 (a INT, b INT NOT NULL);\n\ndelimiter |;\n\nCREATE PROCEDURE p1()\nBEGIN\n  DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'warning';\n  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'exception';\n  INSERT INTO t1 VALUES (CAST('10 ' AS SIGNED), NULL);\nEND|\n\ndelimiter ;|\n\nCALL p1();\n\nDROP TABLE t1;\nDROP PROCEDURE p1;\n\n--echo #\n--echo # Bug#5889: Exit handler for a warning doesn't hide the warning in trigger\n--echo #\n\nCREATE TABLE t1(a INT, b INT);\nINSERT INTO t1 VALUES (1, 2);\n\ndelimiter |;\n\nCREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW\nBEGIN\n  DECLARE EXIT HANDLER FOR SQLWARNING\n    SET NEW.a = 10;\n\n  SET NEW.a = 99999999999;\nEND|\n\ndelimiter ;|\n\nUPDATE t1 SET b = 20;\n\nSHOW WARNINGS;\n\nSELECT * FROM t1;\n\nDROP TRIGGER t1_bu;\nDROP TABLE t1;\n\n--echo #\n--echo # Bug#9857: Stored procedures: handler for sqlwarning ignored\n--echo #\n\nSET @sql_mode_saved = @@sql_mode;\nSET sql_mode = traditional;\n\ndelimiter |;\n\nCREATE PROCEDURE p1()\nBEGIN\n  DECLARE CONTINUE HANDLER FOR SQLWARNING\n    SELECT 'warning caught (expected)';\n  \n  SELECT 5 / 0;\nEND|\n\nCREATE PROCEDURE p2()\nBEGIN\n  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION\n    SELECT 'error caught (unexpected)';\n  \n  SELECT 5 / 0;\nEND|\n\ndelimiter ;|\n\nCALL p1();\nSHOW WARNINGS;\n\nCALL p2();\nSHOW WARNINGS;\n\nDROP PROCEDURE p1;\nDROP PROCEDURE p2;\nSET sql_mode = @sql_mode_saved;\n\n--echo #\n--echo # Bug#55850: Trigger warnings not cleared.\n--echo #\n\n--disable_warnings\nDROP TABLE IF EXISTS t1;\nDROP TABLE IF EXISTS t2;\nDROP PROCEDURE IF EXISTS p1;\n--enable_warnings\n\nCREATE TABLE t1(x SMALLINT, y SMALLINT, z SMALLINT);\nCREATE TABLE t2(a SMALLINT, b SMALLINT, c SMALLINT,\n                d SMALLINT, e SMALLINT, f SMALLINT);\n\nCREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW\n  INSERT INTO t2(a, b, c) VALUES(99999, 99999, 99999);\n\nCREATE TRIGGER t1_ai AFTER INSERT ON t1 FOR EACH ROW\n  INSERT INTO t2(d, e, f) VALUES(99999, 99999, 99999);\n\nCREATE PROCEDURE p1()\n  INSERT INTO t1 VALUES(99999, 99999, 99999);\n\n# What happened before the patch was:\n#  - INSERT INTO t1 added 3 warnings about overflow in 'x', 'y' and 'z' columns;\n#  - t1_bi run and added 3 warnings about overflow in 'a', 'b' and 'c' columns;\n#  - t1_ai run and added 3 warnings about overflow in 'd', 'e' and 'f' columns;\n# => we had 9 warnings.\n#\n# Now what happens is:\n#  - INSERT INTO t1 adds 3 warnings about overflow in 'x', 'y' and 'z' columns;\n#  - t1_bi adds 3 warnings about overflow in 'a', 'b' and 'c' columns;\n#  - The warnings added by triggers are cleared;\n#  - t1_ai run and added 3 warnings about overflow in 'd', 'e' and 'f' columns;\n#  - The warnings added by triggers are cleared;\n# => we have 3 warnings.\n\n--echo\nCALL p1();\n\n--echo\nSHOW WARNINGS;\n\n--echo\nDROP TABLE t1;\nDROP TABLE t2;\nDROP PROCEDURE p1;\n\n--echo # ----------------------------------------------------------------------\n\nCREATE TABLE t1(x SMALLINT, y SMALLINT, z SMALLINT);\nCREATE TABLE t2(a SMALLINT, b SMALLINT, c SMALLINT NOT NULL);\n\ndelimiter |;\n\nCREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW\nBEGIN\n  INSERT INTO t2 VALUES(\n    CAST('111111 ' AS SIGNED),\n    CAST('222222 ' AS SIGNED),\n    NULL);\nEND|\n\ndelimiter ;|\n\nCREATE PROCEDURE p1()\n  INSERT INTO t1 VALUES(99999, 99999, 99999);\n\n--echo\n--error ER_BAD_NULL_ERROR\nCALL p1();\n\n--echo\nSHOW WARNINGS;\n\n--echo\nDROP TABLE t1;\nDROP TABLE t2;\nDROP PROCEDURE p1;\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/include/my_global.h": "/*\n   Copyright (c) 2001, 2013, Oracle and/or its affiliates.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA */\n\n/* This is the include file that should be included 'first' in every C file. */\n\n#ifndef _global_h\n#define _global_h\n\n/* Client library users on Windows need this macro defined here. */\n#if !defined(__WIN__) && defined(_WIN32)\n#define __WIN__\n#endif\n\n/*\n  InnoDB depends on some MySQL internals which other plugins should not\n  need.  This is because of InnoDB's foreign key support, \"safe\" binlog\n  truncation, and other similar legacy features.\n\n  We define accessors for these internals unconditionally, but do not\n  expose them in mysql/plugin.h.  They are declared in ha_innodb.h for\n  InnoDB's use.\n*/\n#define INNODB_COMPATIBILITY_HOOKS\n\n#ifdef __CYGWIN__\n/* We use a Unix API, so pretend it's not Windows */\n#undef WIN\n#undef WIN32\n#undef _WIN\n#undef _WIN32\n#undef _WIN64\n#undef __WIN__\n#undef __WIN32__\n#define HAVE_ERRNO_AS_DEFINE\n#define _POSIX_MONOTONIC_CLOCK\n#define _POSIX_THREAD_CPUTIME\n#endif /* __CYGWIN__ */\n\n/* to make command line shorter we'll define USE_PRAGMA_INTERFACE here */\n#ifdef USE_PRAGMA_IMPLEMENTATION\n#define USE_PRAGMA_INTERFACE\n#endif\n\n#if defined(__OpenBSD__) && (OpenBSD >= 200411)\n#define HAVE_ERRNO_AS_DEFINE\n#endif\n\n#if defined(i386) && !defined(__i386__)\n#define __i386__\n#endif\n\n/* Macros to make switching between C and C++ mode easier */\n#ifdef __cplusplus\n#define C_MODE_START    extern \"C\" {\n#define C_MODE_END\t}\n#else\n#define C_MODE_START\n#define C_MODE_END\n#endif\n\n#ifdef __cplusplus\n#define CPP_UNNAMED_NS_START  namespace {\n#define CPP_UNNAMED_NS_END    }\n#endif\n\n#include <my_config.h>\n\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n#define HAVE_PSI_INTERFACE\n#endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */\n\n/* Make it easier to add conditional code in _expressions_ */\n#ifdef __WIN__\n#define IF_WIN(A,B) A\n#else\n#define IF_WIN(A,B) B\n#endif\n\n#ifdef WITH_PARTITION_STORAGE_ENGINE\n#define IF_PARTITIONING(A,B) A\n#else\n#define IF_PARTITIONING(A,B) B\n#endif\n\n#ifndef EMBEDDED_LIBRARY\n#ifdef WITH_NDB_BINLOG\n#define HAVE_NDB_BINLOG 1\n#endif\n#endif /* !EMBEDDED_LIBRARY */\n\n#ifndef EMBEDDED_LIBRARY\n#define HAVE_REPLICATION\n#define HAVE_EXTERNAL_CLIENT\n#endif\n\n#if defined (_WIN32)\n/*\n off_t is 32 bit long. We do not use C runtime functions\n with off_t but native Win32 file IO APIs, that work with\n 64 bit offsets.\n*/\n#undef SIZEOF_OFF_T\n#define SIZEOF_OFF_T 8\n\n/*\n Prevent inclusion of  Windows GDI headers - they define symbol\n ERROR that conflicts with mysql headers.\n*/\n#ifndef NOGDI\n#define NOGDI\n#endif\n\n/* Include common headers.*/\n#include <winsock2.h>\n#include <ws2tcpip.h> /* SOCKET */\n#include <io.h>       /* access(), chmod() */\n#include <process.h>  /* getpid() */\n\n#define sleep(a) Sleep((a)*1000)\n\n/* Define missing access() modes. */\n#define F_OK 0\n#define W_OK 2\n\n/* Define missing file locking constants. */\n#define F_RDLCK 1\n#define F_WRLCK 2\n#define F_UNLCK 3\n#define F_TO_EOF 0x3FFFFFFF\n\n/* Shared memory and named pipe connections are supported. */\n#define HAVE_SMEM 1\n#define HAVE_NAMED_PIPE 1\n#define shared_memory_buffer_length 16000\n#define default_shared_memory_base_name \"MYSQL\"\n#endif /* _WIN32*/\n\n\n/* Workaround for _LARGE_FILES and _LARGE_FILE_API incompatibility on AIX */\n#if defined(_AIX) && defined(_LARGE_FILE_API)\n#undef _LARGE_FILE_API\n#endif\n\n/*\n  The macros below are used to allow build of Universal/fat binaries of\n  MySQL and MySQL applications under darwin. \n*/\n#if defined(__APPLE__) && defined(__MACH__)\n#  undef SIZEOF_CHARP \n#  undef SIZEOF_SHORT \n#  undef SIZEOF_INT \n#  undef SIZEOF_LONG \n#  undef SIZEOF_LONG_LONG \n#  undef SIZEOF_OFF_T \n#  undef WORDS_BIGENDIAN\n#  define SIZEOF_SHORT 2\n#  define SIZEOF_INT 4\n#  define SIZEOF_LONG_LONG 8\n#  define SIZEOF_OFF_T 8\n#  if defined(__i386__) || defined(__ppc__)\n#    define SIZEOF_CHARP 4\n#    define SIZEOF_LONG 4\n#  elif defined(__x86_64__) || defined(__ppc64__)\n#    define SIZEOF_CHARP 8\n#    define SIZEOF_LONG 8\n#  else\n#    error Building FAT binary for an unknown architecture.\n#  endif\n#  if defined(__ppc__) || defined(__ppc64__)\n#    define WORDS_BIGENDIAN\n#  endif\n#endif /* defined(__APPLE__) && defined(__MACH__) */\n\n\n/*\n  The macros below are borrowed from include/linux/compiler.h in the\n  Linux kernel. Use them to indicate the likelyhood of the truthfulness\n  of a condition. This serves two purposes - newer versions of gcc will be\n  able to optimize for branch predication, which could yield siginficant\n  performance gains in frequently executed sections of the code, and the\n  other reason to use them is for documentation\n*/\n\n#if !defined(__GNUC__) || (__GNUC__ == 2 && __GNUC_MINOR__ < 96)\n#define __builtin_expect(x, expected_value) (x)\n#endif\n\n/**\n  The semantics of builtin_expect() are that\n  1) its two arguments are long\n  2) it's likely that they are ==\n  Those of our likely(x) are that x can be bool/int/longlong/pointer.\n*/\n#define likely(x)\t__builtin_expect(((x) != 0),1)\n#define unlikely(x)\t__builtin_expect(((x) != 0),0)\n\n/* Fix problem with S_ISLNK() on Linux */\n#if defined(TARGET_OS_LINUX) || defined(__GLIBC__)\n#undef  _GNU_SOURCE\n#define _GNU_SOURCE 1\n#endif\n\n/*\n  Temporary solution to solve bug#7156. Include \"sys/types.h\" before\n  the thread headers, else the function madvise() will not be defined\n*/\n#if defined(HAVE_SYS_TYPES_H) && ( defined(sun) || defined(__sun) )\n#include <sys/types.h>\n#endif\n\n#define __EXTENSIONS__ 1\t/* We want some extension */\n#ifndef __STDC_EXT__\n#define __STDC_EXT__ 1          /* To get large file support on hpux */\n#endif\n\n/*\n  Solaris 9 include file <sys/feature_tests.h> refers to X/Open document\n\n    System Interfaces and Headers, Issue 5\n\n  saying we should define _XOPEN_SOURCE=500 to get POSIX.1c prototypes,\n  but apparently other systems (namely FreeBSD) don't agree.\n\n  On a newer Solaris 10, the above file recognizes also _XOPEN_SOURCE=600.\n  Furthermore, it tests that if a program requires older standard\n  (_XOPEN_SOURCE<600 or _POSIX_C_SOURCE<200112L) it cannot be\n  run on a new compiler (that defines _STDC_C99) and issues an #error.\n  It's also an #error if a program requires new standard (_XOPEN_SOURCE=600\n  or _POSIX_C_SOURCE=200112L) and a compiler does not define _STDC_C99.\n\n  To add more to this mess, Sun Studio C compiler defines _STDC_C99 while\n  C++ compiler does not!\n\n  So, in a desperate attempt to get correct prototypes for both\n  C and C++ code, we define either _XOPEN_SOURCE=600 or _XOPEN_SOURCE=500\n  depending on the compiler's announced C standard support.\n\n  Cleaner solutions are welcome.\n*/\n#ifdef __sun\n#if __STDC_VERSION__ - 0 >= 199901L\n#define _XOPEN_SOURCE 600\n#else\n#define _XOPEN_SOURCE 500\n#endif\n#endif\n\n#if !defined(__WIN__)\n#ifndef _POSIX_PTHREAD_SEMANTICS\n#define _POSIX_PTHREAD_SEMANTICS /* We want posix threads */\n#endif\n\n#if !defined(SCO)\n#define _REENTRANT\t1\t/* Some thread libraries require this */\n#endif\n#if !defined(_THREAD_SAFE) && !defined(_AIX)\n#define _THREAD_SAFE            /* Required for OSF1 */\n#endif\n#if defined(HPUX10) || defined(HPUX11)\nC_MODE_START\t\t\t/* HPUX needs this, signal.h bug */\n#include <pthread.h>\nC_MODE_END\n#else\n#include <pthread.h>\t\t/* AIX must have this included first */\n#endif\n#if !defined(SCO) && !defined(_REENTRANT)\n#define _REENTRANT\t1\t/* Threads requires reentrant code */\n#endif\n#endif /* !defined(__WIN__) */\n\n/* Go around some bugs in different OS and compilers */\n#ifdef _AIX\t\t\t/* By soren@t.dk */\n#define _H_STRINGS\n#define _SYS_STREAM_H\n/* #define _AIX32_CURSES */\t/* XXX: this breaks AIX 4.3.3 (others?). */\n#define ulonglong2double(A) my_ulonglong2double(A)\n#define my_off_t2double(A)  my_ulonglong2double(A)\nC_MODE_START\ninline double my_ulonglong2double(unsigned long long A) { return (double)A; }\nC_MODE_END\n#endif /* _AIX */\n\n#ifdef UNDEF_HAVE_INITGROUPS\t\t\t/* For AIX 4.3 */\n#undef HAVE_INITGROUPS\n#endif\n\n/* gcc/egcs issues */\n\n#if defined(__GNUC) && defined(__EXCEPTIONS)\n#error \"Please add -fno-exceptions to CXXFLAGS and reconfigure/recompile\"\n#endif\n\n#if defined(_lint) && !defined(lint)\n#define lint\n#endif\n#if SIZEOF_LONG_LONG > 4 && !defined(_LONG_LONG)\n#define _LONG_LONG 1\t\t/* For AIX string library */\n#endif\n\n#ifndef stdin\n#include <stdio.h>\n#endif\n#include <stdarg.h>\n#ifdef HAVE_STDLIB_H\n#include <stdlib.h>\n#endif\n#ifdef HAVE_STDDEF_H\n#include <stddef.h>\n#endif\n\n#include <math.h>\n#ifdef HAVE_LIMITS_H\n#include <limits.h>\n#endif\n#ifdef HAVE_FLOAT_H\n#include <float.h>\n#endif\n#ifdef HAVE_FENV_H\n#include <fenv.h> /* For fesetround() */\n#endif\n\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_FCNTL_H\n#include <fcntl.h>\n#endif\n#ifdef HAVE_SYS_STAT_H\n#include <sys/stat.h>\n#endif\n#if TIME_WITH_SYS_TIME\n# include <sys/time.h>\n# include <time.h>\n#else\n# if HAVE_SYS_TIME_H\n#  include <sys/time.h>\n# else\n#  include <time.h>\n# endif\n#endif /* TIME_WITH_SYS_TIME */\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n#if defined(__cplusplus) && defined(NO_CPLUSPLUS_ALLOCA)\n#undef HAVE_ALLOCA\n#undef HAVE_ALLOCA_H\n#endif\n#ifdef HAVE_ALLOCA_H\n#include <alloca.h>\n#endif\n\n#include <errno.h>\t\t\t\t/* Recommended by debian */\n/* We need the following to go around a problem with openssl on solaris */\n#if defined(HAVE_CRYPT_H)\n#include <crypt.h>\n#endif\n\n/*\n  A lot of our programs uses asserts, so better to always include it\n  This also fixes a problem when people uses DBUG_ASSERT without including\n  assert.h\n*/\n#include <assert.h>\n\n/* an assert that works at compile-time. only for constant expression */\n#ifdef _some_old_compiler_that_does_not_understand_the_construct_below_\n#define compile_time_assert(X)  do { } while(0)\n#else\n#define compile_time_assert(X)                                  \\\n  do                                                            \\\n  {                                                             \\\n    typedef char compile_time_assert[(X) ? 1 : -1] __attribute__((unused)); \\\n  } while(0)\n#endif\n\n/* Go around some bugs in different OS and compilers */\n#if defined (HPUX11) && defined(_LARGEFILE_SOURCE)\n#ifndef _LARGEFILE64_SOURCE\n#define _LARGEFILE64_SOURCE\n#endif\n#endif\n\n#if defined(_HPUX_SOURCE) && defined(HAVE_SYS_STREAM_H)\n#include <sys/stream.h>\t\t/* HPUX 10.20 defines ulong here. UGLY !!! */\n#define HAVE_ULONG\n#endif\n#if defined(HPUX10) && defined(_LARGEFILE64_SOURCE)\n/* Fix bug in setrlimit */\n#undef setrlimit\n#define setrlimit cma_setrlimit64\n#endif\n/* Declare madvise where it is not declared for C++, like Solaris */\n#if HAVE_MADVISE && !HAVE_DECL_MADVISE && defined(__cplusplus)\nextern \"C\" int madvise(void *addr, size_t len, int behav);\n#endif\n\n#define QUOTE_ARG(x)\t\t#x\t/* Quote argument (before cpp) */\n#define STRINGIFY_ARG(x) QUOTE_ARG(x)\t/* Quote argument, after cpp */\n\n/* Paranoid settings. Define I_AM_PARANOID if you are paranoid */\n#ifdef I_AM_PARANOID\n#define DONT_ALLOW_USER_CHANGE 1\n#define DONT_USE_MYSQL_PWD 1\n#endif\n\n/* Does the system remember a signal handler after a signal ? */\n#if !defined(HAVE_BSD_SIGNALS) && !defined(HAVE_SIGACTION)\n#define SIGNAL_HANDLER_RESET_ON_DELIVERY\n#endif\n\n#ifndef STDERR_FILENO\n#define STDERR_FILENO fileno(stderr)\n#endif\n\n/*\n  Deprecated workaround for false-positive uninitialized variables\n  warnings. Those should be silenced using tool-specific heuristics.\n\n  Enabled by default for g++ due to the bug referenced below.\n*/\n#if defined(_lint) || defined(FORCE_INIT_OF_VARS) || \\\n    (defined(__GNUC__) && defined(__cplusplus))\n#define LINT_INIT(var) var= 0\n#else\n#define LINT_INIT(var)\n#endif\n\n#ifndef SO_EXT\n#ifdef _WIN32\n#define SO_EXT \".dll\"\n#else\n#define SO_EXT \".so\"\n#endif\n#endif\n\n/*\n   Suppress uninitialized variable warning without generating code.\n\n   The _cplusplus is a temporary workaround for C++ code pending a fix\n   for a g++ bug (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=34772).\n*/\n#if defined(_lint) || defined(FORCE_INIT_OF_VARS) || \\\n    defined(__cplusplus) || !defined(__GNUC__)\n#define UNINIT_VAR(x) x= 0\n#else\n/* GCC specific self-initialization which inhibits the warning. */\n#define UNINIT_VAR(x) x= x\n#endif\n\n#if !defined(HAVE_UINT)\n#undef HAVE_UINT\n#define HAVE_UINT\ntypedef unsigned int uint;\ntypedef unsigned short ushort;\n#endif\n\n#define swap_variables(t, a, b) { t dummy; dummy= a; a= b; b= dummy; }\n#define test(a)\t\t((a) ? 1 : 0)\n#define MY_TEST(a) ((a) ? 1 : 0)\n#define set_if_bigger(a,b)  do { if ((a) < (b)) (a)=(b); } while(0)\n#define set_if_smaller(a,b) do { if ((a) > (b)) (a)=(b); } while(0)\n#define set_bits(type, bit_count) (sizeof(type)*8 <= (bit_count) ? ~(type) 0 : ((((type) 1) << (bit_count)) - (type) 1))\n#define test_all_bits(a,b) (((a) & (b)) == (b))\n#define array_elements(A) ((uint) (sizeof(A)/sizeof(A[0])))\n\n/* Define some general constants */\n#ifndef TRUE\n#define TRUE\t\t(1)\t/* Logical true */\n#define FALSE\t\t(0)\t/* Logical false */\n#endif\n\n#include <my_compiler.h>\n\n/*\n  Wen using the embedded library, users might run into link problems,\n  duplicate declaration of __cxa_pure_virtual, solved by declaring it a\n  weak symbol.\n*/\n#if defined(USE_MYSYS_NEW) && ! defined(DONT_DECLARE_CXA_PURE_VIRTUAL)\nC_MODE_START\nint __cxa_pure_virtual () __attribute__ ((weak));\nC_MODE_END\n#endif\n\n/* The DBUG_ON flag always takes precedence over default DBUG_OFF */\n#if defined(DBUG_ON) && defined(DBUG_OFF)\n#undef DBUG_OFF\n#endif\n\n/* We might be forced to turn debug off, if not turned off already */\n#if (defined(FORCE_DBUG_OFF) || defined(_lint)) && !defined(DBUG_OFF)\n#  define DBUG_OFF\n#  ifdef DBUG_ON\n#    undef DBUG_ON\n#  endif\n#endif\n\n#ifdef DBUG_OFF\n#undef EXTRA_DEBUG\n#endif\n\n/* Some types that is different between systems */\n\ntypedef int\tFile;\t\t/* File descriptor */\n#ifdef _WIN32\ntypedef SOCKET my_socket;\n#else\ntypedef int\tmy_socket;\t/* File descriptor for sockets */\n#define INVALID_SOCKET -1\n#endif\n/* Type for fuctions that handles signals */\n#define sig_handler RETSIGTYPE\nC_MODE_START\ntypedef void\t(*sig_return)();/* Returns type from signal */\nC_MODE_END\n#if defined(__GNUC__) && !defined(_lint)\ntypedef char\tpchar;\t\t/* Mixed prototypes can take char */\ntypedef char\tpuchar;\t\t/* Mixed prototypes can take char */\ntypedef char\tpbool;\t\t/* Mixed prototypes can take char */\ntypedef short\tpshort;\t\t/* Mixed prototypes can take short int */\ntypedef float\tpfloat;\t\t/* Mixed prototypes can take float */\n#else\ntypedef int\tpchar;\t\t/* Mixed prototypes can't take char */\ntypedef uint\tpuchar;\t\t/* Mixed prototypes can't take char */\ntypedef int\tpbool;\t\t/* Mixed prototypes can't take char */\ntypedef int\tpshort;\t\t/* Mixed prototypes can't take short int */\ntypedef double\tpfloat;\t\t/* Mixed prototypes can't take float */\n#endif\nC_MODE_START\ntypedef int\t(*qsort_cmp)(const void *,const void *);\ntypedef int\t(*qsort_cmp2)(void*, const void *,const void *);\nC_MODE_END\n#define qsort_t RETQSORTTYPE\t/* Broken GCC cant handle typedef !!!! */\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\ntypedef SOCKET_SIZE_TYPE size_socket;\n\n#ifndef SOCKOPT_OPTLEN_TYPE\n#define SOCKOPT_OPTLEN_TYPE size_socket\n#endif\n\n/* file create flags */\n\n#ifndef O_SHARE\t\t\t/* Probably not windows */\n#define O_SHARE\t\t0\t/* Flag to my_open for shared files */\n#ifndef O_BINARY\n#define O_BINARY\t0\t/* Flag to my_open for binary files */\n#endif\n#ifndef FILE_BINARY\n#define FILE_BINARY\tO_BINARY /* Flag to my_fopen for binary streams */\n#endif\n#ifdef HAVE_FCNTL\n#define HAVE_FCNTL_LOCK\n#define F_TO_EOF\t0L\t/* Param to lockf() to lock rest of file */\n#endif\n#endif /* O_SHARE */\n\n#ifndef O_TEMPORARY\n#define O_TEMPORARY\t0\n#endif\n#ifndef O_SHORT_LIVED\n#define O_SHORT_LIVED\t0\n#endif\n#ifndef O_NOFOLLOW\n#define O_NOFOLLOW      0\n#endif\n\n/* additional file share flags for win32 */\n#ifdef __WIN__\n#define _SH_DENYRWD     0x110    /* deny read/write mode & delete */\n#define _SH_DENYWRD     0x120    /* deny write mode & delete      */\n#define _SH_DENYRDD     0x130    /* deny read mode & delete       */\n#define _SH_DENYDEL     0x140    /* deny delete only              */\n#endif /* __WIN__ */\n\n\n/* General constants */\n#define FN_LEN\t\t256\t/* Max file name len */\n#define FN_HEADLEN\t253\t/* Max length of filepart of file name */\n#define FN_EXTLEN\t20\t/* Max length of extension (part of FN_LEN) */\n#define FN_REFLEN\t512\t/* Max length of full path-name */\n#define FN_EXTCHAR\t'.'\n#define FN_HOMELIB\t'~'\t/* ~/ is used as abbrev for home dir */\n#define FN_CURLIB\t'.'\t/* ./ is used as abbrev for current dir */\n#define FN_PARENTDIR\t\"..\"\t/* Parent directory; Must be a string */\n\n#ifdef _WIN32\n#define FN_LIBCHAR\t'\\\\'\n#define FN_LIBCHAR2\t'/'\n#define FN_DIRSEP       \"/\\\\\"               /* Valid directory separators */\n#define FN_EXEEXT   \".exe\"\n#define FN_SOEXT    \".dll\"\n#define FN_ROOTDIR\t\"\\\\\"\n#define FN_DEVCHAR\t':'\n#define FN_NETWORK_DRIVES\t/* Uses \\\\ to indicate network drives */\n#define FN_NO_CASE_SENCE\t/* Files are not case-sensitive */\n#else\n#define FN_LIBCHAR\t'/'\n#define FN_LIBCHAR2\t'/'\n#define FN_DIRSEP       \"/\"     /* Valid directory separators */\n#define FN_EXEEXT   \"\"\n#define FN_SOEXT    \".so\"\n#define FN_ROOTDIR\t\"/\"\n#endif\n\n/* \n  MY_FILE_MIN is  Windows speciality and is used to quickly detect\n  the mismatch of CRT and mysys file IO usage on Windows at runtime.\n  CRT file descriptors can be in the range 0-2047, whereas descriptors returned\n  by my_open() will start with 2048. If a file descriptor with value less then\n  MY_FILE_MIN is passed to mysys IO function, chances are it stemms from\n  open()/fileno() and not my_open()/my_fileno.\n\n  For Posix,  mysys functions are light wrappers around libc, and MY_FILE_MIN\n  is logically 0.\n*/\n\n#ifdef _WIN32\n#define MY_FILE_MIN  2048\n#else\n#define MY_FILE_MIN  0\n#endif\n\n/* \n  MY_NFILE is the default size of my_file_info array.\n\n  It is larger on Windows, because it all file handles are stored in my_file_info\n  Default size is 16384 and this should be enough for most cases.If it is not \n  enough, --max-open-files with larger value can be used.\n\n  For Posix , my_file_info array is only used to store filenames for\n  error reporting and its size is not a limitation for number of open files.\n*/ \n#ifdef _WIN32\n#define MY_NFILE (16384 + MY_FILE_MIN)\n#else\n#define MY_NFILE 64\n#endif\n\n#ifndef OS_FILE_LIMIT\n#define OS_FILE_LIMIT\tUINT_MAX\n#endif\n\n/*\n  Io buffer size; Must be a power of 2 and a multiple of 512. May be\n  smaller what the disk page size. This influences the speed of the\n  isam btree library. eg to big to slow.\n*/\n#define IO_SIZE\t\t\t4096\n/*\n  How much overhead does malloc have. The code often allocates\n  something like 1024-MALLOC_OVERHEAD bytes\n*/\n#define MALLOC_OVERHEAD 8\n\n\t/* get memory in huncs */\n#define ONCE_ALLOC_INIT\t\t(uint) 4096\n\t/* Typical record cache */\n#define RECORD_CACHE_SIZE\t(uint) (128*1024)\n\t/* Typical key cache */\n#define KEY_CACHE_SIZE\t\t(uint) (128L*1024L*1024L)\n\t/* Default size of a key cache block  */\n#define KEY_CACHE_BLOCK_SIZE\t(uint) 1024\n\n\t/* Some things that this system doesn't have */\n\n#ifdef _WIN32\n#define NO_DIR_LIBRARY\t\t/* Not standard dir-library */\n#endif\n\n/* Some defines of functions for portability */\n\n#undef remove\t\t/* Crashes MySQL on SCO 5.0.0 */\n#ifndef __WIN__\n#define closesocket(A)\tclose(A)\n#endif\n\n#if (_MSC_VER)\n#if !defined(_WIN64)\ninline double my_ulonglong2double(unsigned long long value)\n{\n  long long nr=(long long) value;\n  if (nr >= 0)\n    return (double) nr;\n  return (18446744073709551616.0 + (double) nr);\n}\n#define ulonglong2double my_ulonglong2double\n#define my_off_t2double  my_ulonglong2double\n#endif /* _WIN64 */\ninline unsigned long long my_double2ulonglong(double d)\n{\n  double t= d - (double) 0x8000000000000000ULL;\n\n  if (t >= 0)\n    return  ((unsigned long long) t) + 0x8000000000000000ULL;\n  return (unsigned long long) d;\n}\n#define double2ulonglong my_double2ulonglong\n#endif\n\n#ifndef ulonglong2double\n#define ulonglong2double(A) ((double) (ulonglong) (A))\n#define my_off_t2double(A)  ((double) (my_off_t) (A))\n#endif\n#ifndef double2ulonglong\n#define double2ulonglong(A) ((ulonglong) (double) (A))\n#endif\n\n#ifndef offsetof\n#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)\n#endif\n#define ulong_to_double(X) ((double) (ulong) (X))\n\n#ifndef STACK_DIRECTION\n#error \"please add -DSTACK_DIRECTION=1 or -1 to your CPPFLAGS\"\n#endif\n\n#if !defined(HAVE_STRTOK_R)\n#define strtok_r(A,B,C) strtok((A),(B))\n#endif\n\n#if SIZEOF_LONG_LONG >= 8\n#define HAVE_LONG_LONG 1\n#else\n#error WHAT? sizeof(long long) < 8 ???\n#endif\n\n/*\n  Some pre-ANSI-C99 systems like AIX 5.1 and Linux/GCC 2.95 define\n  ULONGLONG_MAX, LONGLONG_MIN, LONGLONG_MAX; we use them if they're defined.\n*/\n\n#if defined(HAVE_LONG_LONG) && !defined(LONGLONG_MIN)\n#define LONGLONG_MIN\t((long long) 0x8000000000000000LL)\n#define LONGLONG_MAX\t((long long) 0x7FFFFFFFFFFFFFFFLL)\n#endif\n\n#if defined(HAVE_LONG_LONG) && !defined(ULONGLONG_MAX)\n/* First check for ANSI C99 definition: */\n#ifdef ULLONG_MAX\n#define ULONGLONG_MAX  ULLONG_MAX\n#else\n#define ULONGLONG_MAX ((unsigned long long)(~0ULL))\n#endif\n#endif /* defined (HAVE_LONG_LONG) && !defined(ULONGLONG_MAX)*/\n\n#define INT_MIN64       (~0x7FFFFFFFFFFFFFFFLL)\n#define INT_MAX64       0x7FFFFFFFFFFFFFFFLL\n#define INT_MIN32       (~0x7FFFFFFFL)\n#define INT_MAX32       0x7FFFFFFFL\n#define UINT_MAX32      0xFFFFFFFFL\n#define INT_MIN24       (~0x007FFFFF)\n#define INT_MAX24       0x007FFFFF\n#define UINT_MAX24      0x00FFFFFF\n#define INT_MIN16       (~0x7FFF)\n#define INT_MAX16       0x7FFF\n#define UINT_MAX16      0xFFFF\n#define INT_MIN8        (~0x7F)\n#define INT_MAX8        0x7F\n#define UINT_MAX8       0xFF\n\n/* From limits.h instead */\n#ifndef DBL_MIN\n#define DBL_MIN\t\t4.94065645841246544e-324\n#define FLT_MIN\t\t((float)1.40129846432481707e-45)\n#endif\n#ifndef DBL_MAX\n#define DBL_MAX\t\t1.79769313486231470e+308\n#define FLT_MAX\t\t((float)3.40282346638528860e+38)\n#endif\n#ifndef SIZE_T_MAX\n#define SIZE_T_MAX      (~((size_t) 0))\n#endif\n\n#ifndef isfinite\n#ifdef HAVE_FINITE\n#define isfinite(x) finite(x)\n#else\n#define finite(x) (1.0 / fabs(x) > 0.0)\n#endif /* HAVE_FINITE */\n#endif /* isfinite */\n\n#ifndef HAVE_ISNAN\n#define isnan(x) ((x) != (x))\n#endif\n\n#ifdef HAVE_ISINF\n#define my_isinf(X) isinf(X)\n#else /* !HAVE_ISINF */\n#define my_isinf(X) (!finite(X) && !isnan(X))\n#endif\n\n/* Define missing math constants. */\n#ifndef M_PI\n#define M_PI 3.14159265358979323846\n#endif\n#ifndef M_E\n#define M_E 2.7182818284590452354\n#endif\n#ifndef M_LN2\n#define M_LN2 0.69314718055994530942\n#endif\n\n#ifndef HAVE_LOG2\n/*\n  This will be slightly slower and perhaps a tiny bit less accurate than\n  doing it the IEEE754 way but log2() should be available on C99 systems.\n*/\nstatic inline double log2(double x)\n{\n  return (log(x) / M_LN2);\n}\n#endif\n\n/*\n  Max size that must be added to a so that we know Size to make\n  adressable obj.\n*/\n#if SIZEOF_CHARP == 4\ntypedef long\t\tmy_ptrdiff_t;\n#else\ntypedef long long\tmy_ptrdiff_t;\n#endif\n\n#define MY_ALIGN(A,L)\t(((A) + (L) - 1) & ~((L) - 1))\n#define ALIGN_SIZE(A)\tMY_ALIGN((A),sizeof(double))\n#define ALIGN_MAX_UNIT  (sizeof(double))\n/* Size to make adressable obj. */\n#define ALIGN_PTR(A, t) ((t*) MY_ALIGN((A), sizeof(double)))\n#define ADD_TO_PTR(ptr,size,type) (type) ((uchar*) (ptr)+size)\n#define PTR_BYTE_DIFF(A,B) (my_ptrdiff_t) ((uchar*) (A) - (uchar*) (B))\n#define PREV_BITS(type,A)\t((type) (((type) 1 << (A)) -1))\n\n/*\n  Custom version of standard offsetof() macro which can be used to get\n  offsets of members in class for non-POD types (according to the current\n  version of C++ standard offsetof() macro can't be used in such cases and\n  attempt to do so causes warnings to be emitted, OTOH in many cases it is\n  still OK to assume that all instances of the class has the same offsets\n  for the same members).\n\n  This is temporary solution which should be removed once File_parser class\n  and related routines are refactored.\n*/\n\n#define my_offsetof(TYPE, MEMBER) PTR_BYTE_DIFF(&((TYPE *)0x10)->MEMBER, 0x10)\n\n#define NullS\t\t(char *) 0\n\n#ifdef STDCALL\n#undef STDCALL\n#endif\n\n#ifdef _WIN32\n#define STDCALL __stdcall\n#else\n#define STDCALL\n#endif\n\n/* Typdefs for easyier portability */\n\n#ifndef HAVE_UCHAR\ntypedef unsigned char\tuchar;\t/* Short for unsigned char */\n#endif\n\n#ifndef HAVE_INT8\ntypedef signed char int8;       /* Signed integer >= 8  bits */\n#endif\n#ifndef HAVE_UINT8\ntypedef unsigned char uint8;    /* Unsigned integer >= 8  bits */\n#endif\n#ifndef HAVE_INT16\ntypedef short int16;\n#endif\n#ifndef HAVE_UINT16\ntypedef unsigned short uint16;\n#endif\n#if SIZEOF_INT == 4\n#ifndef HAVE_INT32\ntypedef int int32;\n#endif\n#ifndef HAVE_UINT32\ntypedef unsigned int uint32;\n#endif\n#elif SIZEOF_LONG == 4\n#ifndef HAVE_INT32\ntypedef long int32;\n#endif\n#ifndef HAVE_UINT32\ntypedef unsigned long uint32;\n#endif\n#else\n#error Neither int or long is of 4 bytes width\n#endif\n\n#if !defined(HAVE_ULONG) && !defined(__USE_MISC)\ntypedef unsigned long\tulong;\t\t  /* Short for unsigned long */\n#endif\n#ifndef longlong_defined\n/* \n  Using [unsigned] long long is preferable as [u]longlong because we use \n  [unsigned] long long unconditionally in many places, \n  for example in constants with [U]LL suffix.\n*/\n#if defined(HAVE_LONG_LONG) && SIZEOF_LONG_LONG == 8\ntypedef unsigned long long int ulonglong; /* ulong or unsigned long long */\ntypedef long long int\tlonglong;\n#else\ntypedef unsigned long\tulonglong;\t  /* ulong or unsigned long long */\ntypedef long\t\tlonglong;\n#endif\n#endif\n#ifndef HAVE_INT64\ntypedef longlong int64;\n#endif\n#ifndef HAVE_UINT64\ntypedef ulonglong uint64;\n#endif\n\n#if defined(NO_CLIENT_LONG_LONG)\ntypedef unsigned long my_ulonglong;\n#elif defined (__WIN__)\ntypedef unsigned __int64 my_ulonglong;\n#else\ntypedef unsigned long long my_ulonglong;\n#endif\n\n#if SIZEOF_CHARP == SIZEOF_INT\ntypedef unsigned int intptr;\n#elif SIZEOF_CHARP == SIZEOF_LONG\ntypedef unsigned long intptr;\n#elif SIZEOF_CHARP == SIZEOF_LONG_LONG\ntypedef unsigned long long intptr;\n#else\n#error sizeof(void *) is neither sizeof(int) nor sizeof(long) nor sizeof(long long)\n#endif\n\n#define MY_ERRPTR ((void*)(intptr)1)\n\n#if defined(_WIN32)\ntypedef unsigned long long my_off_t;\ntypedef unsigned long long os_off_t;\n#else\ntypedef off_t os_off_t;\n#if SIZEOF_OFF_T > 4\ntypedef ulonglong my_off_t;\n#else\ntypedef unsigned long my_off_t;\n#endif\n#endif /*_WIN32*/\n#define MY_FILEPOS_ERROR\t(~(my_off_t) 0)\n\n/*\n  TODO Convert these to use Bitmap class.\n */\ntypedef ulonglong table_map;          /* Used for table bits in join */\ntypedef ulong nesting_map;  /* Used for flags of nesting constructs */\n\n/* often used type names - opaque declarations */\ntypedef const struct charset_info_st CHARSET_INFO;\ntypedef struct st_mysql_lex_string LEX_STRING;\n\n#if defined(__WIN__)\n#define socket_errno\tWSAGetLastError()\n#define SOCKET_EINTR\tWSAEINTR\n#define SOCKET_EAGAIN\tWSAEINPROGRESS\n#define SOCKET_ETIMEDOUT WSAETIMEDOUT\n#define SOCKET_EWOULDBLOCK WSAEWOULDBLOCK\n#define SOCKET_EADDRINUSE WSAEADDRINUSE\n#define SOCKET_ENFILE\tENFILE\n#define SOCKET_EMFILE\tEMFILE\n#else /* Unix */\n#define socket_errno\terrno\n#define closesocket(A)\tclose(A)\n#define SOCKET_EINTR\tEINTR\n#define SOCKET_EAGAIN\tEAGAIN\n#define SOCKET_ETIMEDOUT SOCKET_EINTR\n#define SOCKET_EWOULDBLOCK EWOULDBLOCK\n#define SOCKET_EADDRINUSE EADDRINUSE\n#define SOCKET_ENFILE\tENFILE\n#define SOCKET_EMFILE\tEMFILE\n#endif\n\ntypedef int\t\tmyf;\t/* Type of MyFlags in my_funcs */\ntypedef char\t\tmy_bool; /* Small bool */\n\n/* Macros for converting *constants* to the right type */\n#define MYF(v)\t\t(myf) (v)\n\n#ifndef LL\n#ifdef HAVE_LONG_LONG\n#define LL(A) A ## LL\n#else\n#define LL(A) A ## L\n#endif\n#endif\n\n#ifndef ULL\n#ifdef HAVE_LONG_LONG\n#define ULL(A) A ## ULL\n#else\n#define ULL(A) A ## UL\n#endif\n#endif\n\n/*\n  Defines to make it possible to prioritize register assignments. No\n  longer that important with modern compilers.\n*/\n#ifndef USING_X\n#define reg1 register\n#define reg2 register\n#define reg3 register\n#define reg4 register\n#define reg5 register\n#define reg6 register\n#define reg7 register\n#define reg8 register\n#define reg9 register\n#define reg10 register\n#define reg11 register\n#define reg12 register\n#define reg13 register\n#define reg14 register\n#define reg15 register\n#define reg16 register\n#endif\n\n#include <my_dbug.h>\n\n/* Some helper macros */\n#define YESNO(X) ((X) ? \"yes\" : \"no\")\n\n#define MY_HOW_OFTEN_TO_ALARM\t2\t/* How often we want info on screen */\n#define MY_HOW_OFTEN_TO_WRITE\t10000\t/* How often we want info on screen */\n\n/*\n  Define-funktions for reading and storing in machine independent format\n  (low byte first)\n*/\n\n/* Optimized store functions for Intel x86 */\n#if defined(__i386__) || defined(_WIN32)\n#define sint2korr(A)\t(*((const int16 *) (A)))\n#define sint3korr(A)\t((int32) ((((uchar) (A)[2]) & 128) ? \\\n\t\t\t\t  (((uint32) 255L << 24) | \\\n\t\t\t\t   (((uint32) (uchar) (A)[2]) << 16) |\\\n\t\t\t\t   (((uint32) (uchar) (A)[1]) << 8) | \\\n\t\t\t\t   ((uint32) (uchar) (A)[0])) : \\\n\t\t\t\t  (((uint32) (uchar) (A)[2]) << 16) |\\\n\t\t\t\t  (((uint32) (uchar) (A)[1]) << 8) | \\\n\t\t\t\t  ((uint32) (uchar) (A)[0])))\n#define sint4korr(A)\t(*((const long *) (A)))\n#define uint2korr(A)\t(*((const uint16 *) (A)))\n#if defined(HAVE_valgrind) && !defined(_WIN32)\n#define uint3korr(A)\t(uint32) (((uint32) ((uchar) (A)[0])) +\\\n\t\t\t\t  (((uint32) ((uchar) (A)[1])) << 8) +\\\n\t\t\t\t  (((uint32) ((uchar) (A)[2])) << 16))\n#else\n/*\n   ATTENTION !\n   \n    Please, note, uint3korr reads 4 bytes (not 3) !\n    It means, that you have to provide enough allocated space !\n*/\n#define uint3korr(A)\t(long) (*((const unsigned int *) (A)) & 0xFFFFFF)\n#endif /* HAVE_valgrind && !_WIN32 */\n#define uint4korr(A)\t(*((const uint32 *) (A)))\n#define uint5korr(A)\t((ulonglong)(((uint32) ((uchar) (A)[0])) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[1])) << 8) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[2])) << 16) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[3])) << 24)) +\\\n\t\t\t\t    (((ulonglong) ((uchar) (A)[4])) << 32))\n#define uint6korr(A)\t((ulonglong)(((uint32)    ((uchar) (A)[0]))          + \\\n                                     (((uint32)    ((uchar) (A)[1])) << 8)   + \\\n                                     (((uint32)    ((uchar) (A)[2])) << 16)  + \\\n                                     (((uint32)    ((uchar) (A)[3])) << 24)) + \\\n                         (((ulonglong) ((uchar) (A)[4])) << 32) +       \\\n                         (((ulonglong) ((uchar) (A)[5])) << 40))\n#define uint8korr(A)\t(*((const ulonglong *) (A)))\n#define sint8korr(A)\t(*((const longlong *) (A)))\n#define int2store(T,A)\t*((uint16*) (T))= (uint16) (A)\n#define int3store(T,A)  do { *(T)=  (uchar) ((A));\\\n                            *(T+1)=(uchar) (((uint) (A) >> 8));\\\n                            *(T+2)=(uchar) (((A) >> 16)); } while (0)\n#define int4store(T,A)\t*((long *) (T))= (long) (A)\n#define int5store(T,A)  do { *(T)= (uchar)((A));\\\n                             *((T)+1)=(uchar) (((A) >> 8));\\\n                             *((T)+2)=(uchar) (((A) >> 16));\\\n                             *((T)+3)=(uchar) (((A) >> 24)); \\\n                             *((T)+4)=(uchar) (((A) >> 32)); } while(0)\n#define int6store(T,A)  do { *(T)=    (uchar)((A));          \\\n                             *((T)+1)=(uchar) (((A) >> 8));  \\\n                             *((T)+2)=(uchar) (((A) >> 16)); \\\n                             *((T)+3)=(uchar) (((A) >> 24)); \\\n                             *((T)+4)=(uchar) (((A) >> 32)); \\\n                             *((T)+5)=(uchar) (((A) >> 40)); } while(0)\n#define int8store(T,A)\t*((ulonglong *) (T))= (ulonglong) (A)\n\ntypedef union {\n  double v;\n  long m[2];\n} doubleget_union;\n#define doubleget(V,M)\t\\\ndo { doubleget_union _tmp; \\\n     _tmp.m[0] = *((const long*)(M)); \\\n     _tmp.m[1] = *(((const long*) (M))+1); \\\n     (V) = _tmp.v; } while(0)\n#define doublestore(T,V) do { *((long *) T) = ((const doubleget_union *)&V)->m[0]; \\\n\t\t\t     *(((long *) T)+1) = ((const doubleget_union *)&V)->m[1]; \\\n                         } while (0)\n#define float4get(V,M)   do { *((float *) &(V)) = *((const float*) (M)); } while(0)\n#define float8get(V,M)   doubleget((V),(M))\n#define float4store(V,M) memcpy((uchar*) V,(uchar*) (&M),sizeof(float))\n#define floatstore(T,V)  memcpy((uchar*)(T), (uchar*)(&V),sizeof(float))\n#define floatget(V,M)    memcpy((uchar*) &V,(uchar*) (M),sizeof(float))\n#define float8store(V,M) doublestore((V),(M))\n#else\n\n/*\n  We're here if it's not a IA-32 architecture (Win32 and UNIX IA-32 defines\n  were done before)\n*/\n#define sint2korr(A)\t(int16) (((int16) ((uchar) (A)[0])) +\\\n\t\t\t\t ((int16) ((int16) (A)[1]) << 8))\n#define sint3korr(A)\t((int32) ((((uchar) (A)[2]) & 128) ? \\\n\t\t\t\t  (((uint32) 255L << 24) | \\\n\t\t\t\t   (((uint32) (uchar) (A)[2]) << 16) |\\\n\t\t\t\t   (((uint32) (uchar) (A)[1]) << 8) | \\\n\t\t\t\t   ((uint32) (uchar) (A)[0])) : \\\n\t\t\t\t  (((uint32) (uchar) (A)[2]) << 16) |\\\n\t\t\t\t  (((uint32) (uchar) (A)[1]) << 8) | \\\n\t\t\t\t  ((uint32) (uchar) (A)[0])))\n#define sint4korr(A)\t(int32) (((int32) ((uchar) (A)[0])) +\\\n\t\t\t\t(((int32) ((uchar) (A)[1]) << 8)) +\\\n\t\t\t\t(((int32) ((uchar) (A)[2]) << 16)) +\\\n\t\t\t\t(((int32) ((int16) (A)[3]) << 24)))\n#define sint8korr(A)\t(longlong) uint8korr(A)\n#define uint2korr(A)\t(uint16) (((uint16) ((uchar) (A)[0])) +\\\n\t\t\t\t  ((uint16) ((uchar) (A)[1]) << 8))\n#define uint3korr(A)\t(uint32) (((uint32) ((uchar) (A)[0])) +\\\n\t\t\t\t  (((uint32) ((uchar) (A)[1])) << 8) +\\\n\t\t\t\t  (((uint32) ((uchar) (A)[2])) << 16))\n#define uint4korr(A)\t(uint32) (((uint32) ((uchar) (A)[0])) +\\\n\t\t\t\t  (((uint32) ((uchar) (A)[1])) << 8) +\\\n\t\t\t\t  (((uint32) ((uchar) (A)[2])) << 16) +\\\n\t\t\t\t  (((uint32) ((uchar) (A)[3])) << 24))\n#define uint5korr(A)\t((ulonglong)(((uint32) ((uchar) (A)[0])) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[1])) << 8) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[2])) << 16) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[3])) << 24)) +\\\n\t\t\t\t    (((ulonglong) ((uchar) (A)[4])) << 32))\n#define uint6korr(A)\t((ulonglong)(((uint32)    ((uchar) (A)[0]))          + \\\n                                     (((uint32)    ((uchar) (A)[1])) << 8)   + \\\n                                     (((uint32)    ((uchar) (A)[2])) << 16)  + \\\n                                     (((uint32)    ((uchar) (A)[3])) << 24)) + \\\n                         (((ulonglong) ((uchar) (A)[4])) << 32) +       \\\n                         (((ulonglong) ((uchar) (A)[5])) << 40))\n#define uint8korr(A)\t((ulonglong)(((uint32) ((uchar) (A)[0])) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[1])) << 8) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[2])) << 16) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[3])) << 24)) +\\\n\t\t\t(((ulonglong) (((uint32) ((uchar) (A)[4])) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[5])) << 8) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[6])) << 16) +\\\n\t\t\t\t    (((uint32) ((uchar) (A)[7])) << 24))) <<\\\n\t\t\t\t    32))\n#define int2store(T,A)       do { uint def_temp= (uint) (A) ;\\\n                                  *((uchar*) (T))=  (uchar)(def_temp); \\\n                                   *((uchar*) (T)+1)=(uchar)((def_temp >> 8)); \\\n                             } while(0)\n#define int3store(T,A)       do { /*lint -save -e734 */\\\n                                  *((uchar*)(T))=(uchar) ((A));\\\n                                  *((uchar*) (T)+1)=(uchar) (((A) >> 8));\\\n                                  *((uchar*)(T)+2)=(uchar) (((A) >> 16)); \\\n                                  /*lint -restore */} while(0)\n#define int4store(T,A)       do { *((char *)(T))=(char) ((A));\\\n                                  *(((char *)(T))+1)=(char) (((A) >> 8));\\\n                                  *(((char *)(T))+2)=(char) (((A) >> 16));\\\n                                  *(((char *)(T))+3)=(char) (((A) >> 24)); } while(0)\n#define int5store(T,A)       do { *((char *)(T))=     (char)((A));  \\\n                                  *(((char *)(T))+1)= (char)(((A) >> 8)); \\\n                                  *(((char *)(T))+2)= (char)(((A) >> 16)); \\\n                                  *(((char *)(T))+3)= (char)(((A) >> 24)); \\\n                                  *(((char *)(T))+4)= (char)(((A) >> 32)); \\\n\t\t                } while(0)\n#define int6store(T,A)       do { *((char *)(T))=     (char)((A)); \\\n                                  *(((char *)(T))+1)= (char)(((A) >> 8)); \\\n                                  *(((char *)(T))+2)= (char)(((A) >> 16)); \\\n                                  *(((char *)(T))+3)= (char)(((A) >> 24)); \\\n                                  *(((char *)(T))+4)= (char)(((A) >> 32)); \\\n                                  *(((char *)(T))+5)= (char)(((A) >> 40)); \\\n                                } while(0)\n#define int8store(T,A)       do { uint def_temp= (uint) (A), def_temp2= (uint) ((A) >> 32); \\\n                                  int4store((T),def_temp); \\\n                                  int4store((T+4),def_temp2); } while(0)\n#ifdef WORDS_BIGENDIAN\n#define float4store(T,A) do { *(T)= ((uchar *) &A)[3];\\\n                              *((T)+1)=(char) ((uchar *) &A)[2];\\\n                              *((T)+2)=(char) ((uchar *) &A)[1];\\\n                              *((T)+3)=(char) ((uchar *) &A)[0]; } while(0)\n\n#define float4get(V,M)   do { float def_temp;\\\n                              ((uchar*) &def_temp)[0]=(M)[3];\\\n                              ((uchar*) &def_temp)[1]=(M)[2];\\\n                              ((uchar*) &def_temp)[2]=(M)[1];\\\n                              ((uchar*) &def_temp)[3]=(M)[0];\\\n                              (V)=def_temp; } while(0)\n#define float8store(T,V) do { *(T)= ((uchar *) &V)[7];\\\n                              *((T)+1)=(char) ((uchar *) &V)[6];\\\n                              *((T)+2)=(char) ((uchar *) &V)[5];\\\n                              *((T)+3)=(char) ((uchar *) &V)[4];\\\n                              *((T)+4)=(char) ((uchar *) &V)[3];\\\n                              *((T)+5)=(char) ((uchar *) &V)[2];\\\n                              *((T)+6)=(char) ((uchar *) &V)[1];\\\n                              *((T)+7)=(char) ((uchar *) &V)[0]; } while(0)\n\n#define float8get(V,M)   do { double def_temp;\\\n                              ((uchar*) &def_temp)[0]=(M)[7];\\\n                              ((uchar*) &def_temp)[1]=(M)[6];\\\n                              ((uchar*) &def_temp)[2]=(M)[5];\\\n                              ((uchar*) &def_temp)[3]=(M)[4];\\\n                              ((uchar*) &def_temp)[4]=(M)[3];\\\n                              ((uchar*) &def_temp)[5]=(M)[2];\\\n                              ((uchar*) &def_temp)[6]=(M)[1];\\\n                              ((uchar*) &def_temp)[7]=(M)[0];\\\n                              (V) = def_temp; } while(0)\n#else\n#define float4get(V,M)   memcpy(&V, (M), sizeof(float))\n#define float4store(V,M) memcpy(V, (&M), sizeof(float))\n\n#if defined(__FLOAT_WORD_ORDER) && (__FLOAT_WORD_ORDER == __BIG_ENDIAN)\n#define doublestore(T,V) do { *(((char*)T)+0)=(char) ((uchar *) &V)[4];\\\n                              *(((char*)T)+1)=(char) ((uchar *) &V)[5];\\\n                              *(((char*)T)+2)=(char) ((uchar *) &V)[6];\\\n                              *(((char*)T)+3)=(char) ((uchar *) &V)[7];\\\n                              *(((char*)T)+4)=(char) ((uchar *) &V)[0];\\\n                              *(((char*)T)+5)=(char) ((uchar *) &V)[1];\\\n                              *(((char*)T)+6)=(char) ((uchar *) &V)[2];\\\n                              *(((char*)T)+7)=(char) ((uchar *) &V)[3]; }\\\n                         while(0)\n#define doubleget(V,M)   do { double def_temp;\\\n                              ((uchar*) &def_temp)[0]=(M)[4];\\\n                              ((uchar*) &def_temp)[1]=(M)[5];\\\n                              ((uchar*) &def_temp)[2]=(M)[6];\\\n                              ((uchar*) &def_temp)[3]=(M)[7];\\\n                              ((uchar*) &def_temp)[4]=(M)[0];\\\n                              ((uchar*) &def_temp)[5]=(M)[1];\\\n                              ((uchar*) &def_temp)[6]=(M)[2];\\\n                              ((uchar*) &def_temp)[7]=(M)[3];\\\n                              (V) = def_temp; } while(0)\n#endif /* __FLOAT_WORD_ORDER */\n\n#define float8get(V,M)   doubleget((V),(M))\n#define float8store(V,M) doublestore((V),(M))\n#endif /* WORDS_BIGENDIAN */\n\n#endif /* __i386__ OR _WIN32 */\n\n/*\n  Macro for reading 32-bit integer from network byte order (big-endian)\n  from unaligned memory location.\n*/\n#define int4net(A)        (int32) (((uint32) ((uchar) (A)[3]))        |\\\n\t\t\t\t  (((uint32) ((uchar) (A)[2])) << 8)  |\\\n\t\t\t\t  (((uint32) ((uchar) (A)[1])) << 16) |\\\n\t\t\t\t  (((uint32) ((uchar) (A)[0])) << 24))\n/*\n  Define-funktions for reading and storing in machine format from/to\n  short/long to/from some place in memory V should be a (not\n  register) variable, M is a pointer to byte\n*/\n\n#ifdef WORDS_BIGENDIAN\n\n#define ushortget(V,M)  do { V = (uint16) (((uint16) ((uchar) (M)[1]))+\\\n                                 ((uint16) ((uint16) (M)[0]) << 8)); } while(0)\n#define shortget(V,M)   do { V = (short) (((short) ((uchar) (M)[1]))+\\\n                                 ((short) ((short) (M)[0]) << 8)); } while(0)\n#define longget(V,M)    do { int32 def_temp;\\\n                             ((uchar*) &def_temp)[0]=(M)[0];\\\n                             ((uchar*) &def_temp)[1]=(M)[1];\\\n                             ((uchar*) &def_temp)[2]=(M)[2];\\\n                             ((uchar*) &def_temp)[3]=(M)[3];\\\n                             (V)=def_temp; } while(0)\n#define ulongget(V,M)   do { uint32 def_temp;\\\n                            ((uchar*) &def_temp)[0]=(M)[0];\\\n                            ((uchar*) &def_temp)[1]=(M)[1];\\\n                            ((uchar*) &def_temp)[2]=(M)[2];\\\n                            ((uchar*) &def_temp)[3]=(M)[3];\\\n                            (V)=def_temp; } while(0)\n#define shortstore(T,A) do { uint def_temp=(uint) (A) ;\\\n                             *(((char*)T)+1)=(char)(def_temp); \\\n                             *(((char*)T)+0)=(char)(def_temp >> 8); } while(0)\n#define longstore(T,A)  do { *(((char*)T)+3)=((A));\\\n                             *(((char*)T)+2)=(((A) >> 8));\\\n                             *(((char*)T)+1)=(((A) >> 16));\\\n                             *(((char*)T)+0)=(((A) >> 24)); } while(0)\n\n#define floatget(V,M)    memcpy(&V, (M), sizeof(float))\n#define floatstore(T,V)  memcpy((T), (void*) (&V), sizeof(float))\n#define doubleget(V,M)\t memcpy(&V, (M), sizeof(double))\n#define doublestore(T,V) memcpy((T), (void *) &V, sizeof(double))\n#define longlongget(V,M) memcpy(&V, (M), sizeof(ulonglong))\n#define longlongstore(T,V) memcpy((T), &V, sizeof(ulonglong))\n\n#else\n\n#define ushortget(V,M)\tdo { V = uint2korr(M); } while(0)\n#define shortget(V,M)\tdo { V = sint2korr(M); } while(0)\n#define longget(V,M)\tdo { V = sint4korr(M); } while(0)\n#define ulongget(V,M)   do { V = uint4korr(M); } while(0)\n#define shortstore(T,V) int2store(T,V)\n#define longstore(T,V)\tint4store(T,V)\n#ifndef floatstore\n#define floatstore(T,V)  memcpy((T), (void *) (&V), sizeof(float))\n#define floatget(V,M)    memcpy(&V, (M), sizeof(float))\n#endif\n#ifndef doubleget\n#define doubleget(V,M)\t memcpy(&V, (M), sizeof(double))\n#define doublestore(T,V) memcpy((T), (void *) &V, sizeof(double))\n#endif /* doubleget */\n#define longlongget(V,M) memcpy(&V, (M), sizeof(ulonglong))\n#define longlongstore(T,V) memcpy((T), &V, sizeof(ulonglong))\n\n#endif /* WORDS_BIGENDIAN */\n\n#ifdef HAVE_CHARSET_utf8\n#define MYSQL_UNIVERSAL_CLIENT_CHARSET \"utf8\"\n#else\n#define MYSQL_UNIVERSAL_CLIENT_CHARSET MYSQL_DEFAULT_CHARSET_NAME\n#endif\n\n#if defined(EMBEDDED_LIBRARY) && !defined(HAVE_EMBEDDED_PRIVILEGE_CONTROL)\n#define NO_EMBEDDED_ACCESS_CHECKS\n#endif\n\n#ifdef _WIN32\n#define dlsym(lib, name) (void*)GetProcAddress((HMODULE)lib, name)\n#define dlopen(libname, unused) LoadLibraryEx(libname, NULL, 0)\n#define dlclose(lib) FreeLibrary((HMODULE)lib)\nstatic inline char *dlerror(void)\n{\n  static char win_errormsg[2048];\n  if(FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,\n                   0, GetLastError(), 0, win_errormsg, 2048, NULL))\n    return win_errormsg;\n  return \"\";\n}\n#define HAVE_DLOPEN 1\n#define HAVE_DLERROR 1\n#endif\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#ifdef HAVE_DLOPEN\n#ifndef HAVE_DLERROR\n#define dlerror() \"\"\n#endif\n#else\n#define dlerror() \"No support for dynamic loading (static build?)\"\n#define dlopen(A,B) 0\n#define dlsym(A,B) 0\n#define dlclose(A) 0\n#endif\n\n/*\n *  Include standard definitions of operator new and delete.\n */\n#ifdef __cplusplus\n#include <new>\n#endif\n\n/* Length of decimal number represented by INT32. */\n#define MY_INT32_NUM_DECIMAL_DIGITS 11\n\n/* Length of decimal number represented by INT64. */\n#define MY_INT64_NUM_DECIMAL_DIGITS 21\n\n#ifdef __cplusplus\n#include <limits> /* should be included before min/max macros */\n#endif\n\n/* Define some useful general macros (should be done after all headers). */\n#if !defined(max)\n#define max(a, b)\t((a) > (b) ? (a) : (b))\n#define min(a, b)\t((a) < (b) ? (a) : (b))\n#endif  \n\n#define CMP_NUM(a,b)    (((a) < (b)) ? -1 : ((a) == (b)) ? 0 : 1)\n\n/*\n  Only Linux is known to need an explicit sync of the directory to make sure a\n  file creation/deletion/renaming in(from,to) this directory durable.\n*/\n#ifdef TARGET_OS_LINUX\n#define NEED_EXPLICIT_SYNC_DIR 1\n#else\n/*\n  On linux default rwlock scheduling policy is good enough for\n  waiting_threads.c, on other systems use our special implementation\n  (which is slower).\n\n  QQ perhaps this should be tested in configure ? how ?\n*/\n#define WT_RWLOCKS_USE_MUTEXES 1\n#endif\n\n#if !defined(__cplusplus) && !defined(bool)\n#define bool In_C_you_should_use_my_bool_instead()\n#endif\n\n/* Provide __func__ macro definition for platforms that miss it. */\n#if !defined (__func__)\n#if __STDC_VERSION__ < 199901L\n#  if __GNUC__ >= 2\n#    define __func__ __FUNCTION__\n#  else\n#    define __func__ \"<unknown>\"\n#  endif\n#elif defined(_MSC_VER)\n#  if _MSC_VER < 1300\n#    define __func__ \"<unknown>\"\n#  else\n#    define __func__ __FUNCTION__\n#  endif\n#elif defined(__BORLANDC__)\n#  define __func__ __FUNC__\n#else\n#  define __func__ \"<unknown>\"\n#endif\n#endif /* !defined(__func__) */\n\n#ifndef HAVE_RINT\n/**\n   All integers up to this number can be represented exactly as double precision\n   values (DBL_MANT_DIG == 53 for IEEE 754 hardware).\n*/\n#define MAX_EXACT_INTEGER ((1LL << DBL_MANT_DIG) - 1)\n\n/**\n   rint(3) implementation for platforms that do not have it.\n   Always rounds to the nearest integer with ties being rounded to the nearest\n   even integer to mimic glibc's rint() behavior in the \"round-to-nearest\"\n   FPU mode. Hardware-specific optimizations are possible (frndint on x86).\n   Unlike this implementation, hardware will also honor the FPU rounding mode.\n*/\n\nstatic inline double rint(double x)\n{\n  double f, i;\n  f = modf(x, &i);\n  /*\n    All doubles with absolute values > MAX_EXACT_INTEGER are even anyway,\n    no need to check it.\n  */\n  if (x > 0.0)\n    i += (double) ((f > 0.5) || (f == 0.5 &&\n                                 i <= (double) MAX_EXACT_INTEGER &&\n                                 (longlong) i % 2));\n  else\n    i -= (double) ((f < -0.5) || (f == -0.5 &&\n                                  i >= (double) -MAX_EXACT_INTEGER &&\n                                  (longlong) i % 2));\n  return i;\n}\n#endif /* HAVE_RINT */\n\n/* \n  MYSQL_PLUGIN_IMPORT macro is used to export mysqld data\n  (i.e variables) for usage in storage engine loadable plugins.\n  Outside of Windows, it is dummy.\n*/\n#ifndef MYSQL_PLUGIN_IMPORT\n#if (defined(_WIN32) && defined(MYSQL_DYNAMIC_PLUGIN))\n#define MYSQL_PLUGIN_IMPORT __declspec(dllimport)\n#else\n#define MYSQL_PLUGIN_IMPORT\n#endif\n#endif\n\n/* Defines that are unique to the embedded version of MySQL */\n\n#ifdef EMBEDDED_LIBRARY\n\n/* Things we don't need in the embedded version of MySQL */\n/* TODO HF add #undef HAVE_VIO if we don't want client in embedded library */\n\n#undef HAVE_SMEM\t\t\t\t/* No shared memory */\n\n#endif /* EMBEDDED_LIBRARY */\n\n#endif /* my_global_h */\n"
    },
    "skipped": [
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/maria/ma_page.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/doc2/sysbench.update.ma55.tokudb753.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/doc2/sysbench.update.ma55.tokudb753.binlog.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/doc2/sysbench.update.ps56.tokudb754.loglog.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/doc2/sysbench.update.ma10.tokudb754.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/doc2/sysbench.update.ps56.tokudb754.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/doc2/sysbench.update.my55.tokudb753.loglog.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/doc2/sysbench.update.ma10.tokudb754.loglog.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/doc2/sysbench.update.ma55.tokudb753.loglog.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb_bugs/std_data/leak172_t2.data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/r/type_enum.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/r/type_decimal.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/r/ctype_collate.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/r/ctype_cp1250_ch.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/r/type_set.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/t/type_decimal.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/t/type_set.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/t/ctype_cp1250_ch.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/t/ctype_collate.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/mysql-test/tokudb/t/type_enum.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-a4/xz-a4.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-a4/xzdiff-a4.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-a4/xzmore-a4.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-a4/xzgrep-a4.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-a4/xzdec-a4.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-a4/xzless-a4.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-letter/xzdiff-letter.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-letter/xzdec-letter.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-letter/xzless-letter.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-letter/xz-letter.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-letter/xzmore-letter.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/doc/man/pdf-letter/xzgrep-letter.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-0catpad-empty.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-lzma2-2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-2-index-1.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-block_header-1.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/unsupported-filter_flags-2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-block_header-3.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-2-index-4.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-check-crc64.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-stream_flags-2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-check-sha256.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-2-index-3.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-x86-lzma2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-2-index-5.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-block_header-3.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-lzma2-7.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-3delta-lzma2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-0pad-empty.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-delta-lzma2.tiff.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-check-sha256.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-block_header-1.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-block_header-4.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-2-compressed_data_padding.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-lzma2-5.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-lzma2-4.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-0pad-empty.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-lzma2-6.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-0-footer_magic.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-stream_flags-1.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-lzma2-1.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-stream_flags-3.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-0catpad-empty.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-lzma2-1.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-2-index-2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-lzma2-2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-check-none.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-0cat-alone.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-0-header_magic.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-lzma2-8.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-check-crc32.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/unsupported-filter_flags-3.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-block_header-5.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-lzma2-3.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-check-crc32.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-vli-1.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-0-nonempty_index.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-0cat-header_magic.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-0-empty-truncated.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-lzma2-3.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-block_header-2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/unsupported-block_header.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-2-lzma2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/unsupported-filter_flags-1.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-0cat-empty.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-0-backward_size.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-0-empty.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-block_header-2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/bad-1-vli-2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-sparc-lzma2.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-lzma2-4.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/unsupported-check.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/tokudb/ft-index/third_party/xz-4.999.9beta/tests/files/good-1-check-crc64.xz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/xtradb/include/ut0mem.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/xtradb/include/os0file.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/xtradb/os/os0file.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/innobase/include/ut0mem.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/innobase/include/os0file.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/innobase/os/os0file.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/test/src/getarg.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/test/src/NDBT_Tables.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/test/odbc/client/SQLPrepareTest.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/test/odbc/driver/testOdbcDriver.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/test/ndbapi/bank/BankLoad.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/test/run-test/atrt-example.tgz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/test/include/getarg.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/C++/CPC_GUI.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/C++/toolbar.bmp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/C++/CPC_GUI.suo",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/C++/Closed.ICO",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/C++/small.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/C++/Open.ICO",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/C++/bmp00001.bmp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/csharp/App.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/csharp/NDB_CPC.ncb",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/cw/cpcc-win32/csharp/DATABASE.ICO",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/kernel/blocks/new-block.tar.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/kernel/blocks/dbtc/Dbtc.hpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/kernel/blocks/dbdict/Slave_AddTable.sfl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/kernel/blocks/dbdict/Dbdict.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/kernel/blocks/dbdih/Dbdih.hpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/common/util/getarg.cat3",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/ndbapi/NdbUtil.hpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/ndbapi/NdbUtil.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/external/WIN32.x86/sci/lib/scilib.lib",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/external/WIN32.x86/sci/lib/sisci_api_mt.lib",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/external/WIN32.x86/sci/lib/sisci_api.lib",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/external/WIN32.x86/sci/lib/sisci_api_md.lib",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/external/WIN32.x86/sci/lib/scilib_md.lib",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/external/WIN32.x86/sci/lib/SISCI_LIBRARY_WIN32.TXT",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/src/external/WIN32.x86/sci/lib/scilib_mt.lib",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/include/transporter/TransporterCallback.hpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/storage/ndb/include/ndbapi/NdbScanFilter.hpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql/winservice.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql/MSG00001.bin",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql/item_xmlfunc.cc",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/plugin/handler_socket/regtest/test_01_lib/test04.expected",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/win/upgrade_wizard/res/upgrade.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/win/packaging/WixUIBannerBmp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/win/packaging/WixUIDialogBmp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql-bench/server-cfg.sh",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql-bench/crash-me.sh",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql-bench/Comments/postgres.benchmark",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql-bench/limits/mysql-4.1.cfg",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/sql-bench/limits/mysql-4.0.cfg",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/tests/function.res",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/tests/fork2_test.pl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/tests/function.tst",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/debian/mariadb-server-5.5.preinst",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/debian/po/da.po",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/debian/po/ca.po",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/packaging/WiX/AdminBackground.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/packaging/WiX/MySQLServer.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/packaging/WiX/AdminHeader.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/libmysqld/libmysqld.rc",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/libmysqld/examples/builder-sample/snapshot.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/libmysqld/examples/builder-sample/emb_samples.dfm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/libmysqld/examples/builder-sample/images/logo.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/libmysqld/examples/builder-sample/images/db.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/libmysqld/examples/builder-sample/images/mysql.bmp",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/libmysqld/examples/builder-sample/images/find.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/libmysqld/examples/builder-sample/images/net.ico",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/mysqldump.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/warnings.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/alter_table.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/type_enum.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/explain.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/outfile_loaddata.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/alias.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/func_in.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/type_decimal.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_utf8mb4_heap.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_collate.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_latin2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/events_bugs.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/sp.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/rowid_order_innodb.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_tis620.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/query_cache.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ddl_i18n_utf8.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_utf8mb4_innodb.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/subselect2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/errors.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_cp1250_ch.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/func_like.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_recoding.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_utf8.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_latin1.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/union.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/events_1.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_ucs.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/fulltext.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/func_gconcat.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/func_test.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_big5.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_cp1251.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_utf8mb4.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_latin1_de.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/binary.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/signal.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/mysql_cp932.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_many.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/cast.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/type_set.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/show_check.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/mysqltest.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/date_formats.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/func_des_encrypt.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ddl_i18n_koi8r.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/grant.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_utf8mb4_myisam.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/ctype_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/r/log_tables.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/type_decimal.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_ucs.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/explain.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/bug13633383.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/sp.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/func_in.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/union.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/fulltext.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/events_bugs.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_utf8.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/mysql_cp932.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/binary.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/type_set.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_cp1250_ch.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/log_tables.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/cast.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_tis620.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/grant.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/func_test.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/show_check.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/alias.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/mysqlbinlog.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ddl_i18n_utf8.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_latin1.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_recoding.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/subselect2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_latin1_de.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/errors.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/mysqldump.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_cp1251.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_collate.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/type_enum.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ddl_i18n_koi8r.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/alter_table.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_many.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_filesystem-master.opt",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/func_like.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/fulltext_left_join.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/events_1.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/mysqltest.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_utf8mb4.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/func_gconcat.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/warnings.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/ctype_big5.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/t/query_cache.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug19371.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/long_table_name.MYD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bad_row_type.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/host_old.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/old_table-323.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug47012.ARZ",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug33029-slave-relay-bin.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/corrupt_t1#P#p1.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/cluster_7022_table.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/t917689.ARZ",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/trunc_binlog.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug47012.ARM",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug49823.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/mdev5029_2.MAD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug37631.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug47142_master-bin.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/mdev5029_2.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/corrupt-relay-bin.000624",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug49823.CSM",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/long_table_name.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug36055.MYD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug19371.MYD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/long_table_name.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug46565.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug16266.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/host_old.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug37631.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug47205.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/14897.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug36055.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug11747416_32228_binlog.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/mdev5029_2.MAI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/mdev5029_1.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug40482-bin.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bad_row_type.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/master-bin.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug19371.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug46565.ARZ",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/cluster_7022_table.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug48265.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/binlog_transaction.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/binlog_savepoint.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/vchar.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug47012.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/bug36055.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/loaddata6.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/corrupt_t1.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/loaddata/mdev-11079.txt",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-2.2.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-2.1.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-2.1.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-1.2.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-2-0.1.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-2-0.2.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-2.2.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-1.1.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-1-0.2.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-1.2.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-1-0.1.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup50/BACKUP-1.1.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_le/BACKUP-1.2.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_le/BACKUP-1.1.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_le/BACKUP-1-0.2.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_le/BACKUP-1.2.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_le/BACKUP-1-0.1.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_le/BACKUP-1.1.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/mysql_upgrade/event.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/mysql_upgrade/event.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_be/BACKUP-1.2.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_be/BACKUP-1.1.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_be/BACKUP-1-0.2.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_be/BACKUP-1.2.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_be/BACKUP-1-0.1.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51_data_be/BACKUP-1.1.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/old_decimal/t1dec102.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/old_decimal/t1dec102.MYD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/old_decimal/t1dec102.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51/BACKUP-1.2.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51/BACKUP-1.1.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51/BACKUP-1-0.2.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51/BACKUP-1.2.log",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51/BACKUP-1-0.1.Data",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/ndb_backup51/BACKUP-1.1.ctl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p2.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p1_first_1024.MYD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p3.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1TIMESTAMP.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p4.MYI",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1_blackhole.frm",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p2.MYD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p6_2.MYD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p6.MYD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p6_3.MYD",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/include/ctype_utf8mb4.inc",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/maria/locking.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/maria/locking.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/funcs_1/r/memory_func_view.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/funcs_1/r/myisam_func_view.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/funcs_1/r/innodb_func_view.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/funcs_1/lib/DataGen_local.pl",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/iuds/r/type_bit_iuds.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/iuds/r/strings_charsets_update_delete.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_table.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_index.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_older_compatibility1.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_column.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_column.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_table.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/funcs/t/rpl_temporary.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_older_compatibility1.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_index.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/rpl/r/rpl_charset.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/rpl/r/rpl_row_annotate_do.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/rpl/r/rpl_row_annotate_dont.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/rpl/r/rpl_set_charset.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/rpl/r/rpl_charset_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/rpl/t/rpl_temporary.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/rpl/t/rpl_row_mysqlbinlog.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/rpl/t/rpl_charset_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/rpl/t/rpl_set_charset.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_log_bin_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_quote_show_create_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_notes_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_safe_updates_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/engine_condition_pushdown_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/collation_server_func.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/character_set_results_func.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/collation_database_func.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/foreign_key_checks_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_warnings_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_buffer_result_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_big_selects_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/innodb_table_locks_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/character_set_client_func.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/character_set_client_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/collation_connection_func.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/query_cache_wlock_invalidate_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_big_tables_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/pseudo_slave_mode_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_log_off_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/character_set_connection_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/sql_low_priority_updates_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/r/innodb_support_xa_basic.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_warnings_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/collation_server_func.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/innodb_support_xa_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/collation_database_func.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/character_set_results_func.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_big_selects_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_low_priority_updates_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/character_set_client_func.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_notes_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_safe_updates_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/innodb_table_locks_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_buffer_result_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/query_cache_wlock_invalidate_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_log_bin_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/character_set_connection_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_quote_show_create_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/collation_connection_func.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/foreign_key_checks_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/engine_condition_pushdown_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_log_off_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/pseudo_slave_mode_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/sys_vars/t/sql_big_tables_basic.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_join_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_like_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_charset_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_length_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_left_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_like_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_insert_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_substring_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_locate_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_length_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_substring_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_reverse_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_lpad_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_insert_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_replace_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_left_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_convert_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_ltrim_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_where_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_update_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_convert_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_right_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_update_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_rpad_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_charset_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_ps_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_convert_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_charlength_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_instr_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_locate_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_trim_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_ltrim_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_update_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_alter_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_create_tbl_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_instr_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_alter_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_insert_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_lpad_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_select_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_replace_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_rtrim_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_union_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_ps_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_where_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_select_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_create_tbl_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_enum_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_create_db_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_like_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_rpad_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_alter_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_subquery_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_length_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_subquery_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_where_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_replace_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_create_tbl_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_ltrim_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_charlength_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_instr_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_rtrim_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_lpad_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_select_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_enum_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_locate_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_trim_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_charlength_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_right_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_trim_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_substring_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_create_db_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_rpad_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_rtrim_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_join_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_subquery_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_charset_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_reverse_ucs2.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_left_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_reverse_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_right_ujis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_create_db_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_join_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/r/jp_enum_sjis.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_right_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_rtrim_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_alter_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_join_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_enum_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_create_tbl_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_update_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_reverse_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_create_db_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_subquery_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_convert_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_insert_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_charset_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_substring_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_lpad_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_charlength_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_rpad_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_lpad_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_length_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_ps_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_alter_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_update_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_insert_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_select_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_like_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_left_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_join_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_locate_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_like_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_locate_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_substring_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_lpad_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_like_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_charlength_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_create_db_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_join_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_reverse_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_charset_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_charset_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_length_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_left_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_reverse_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_replace_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_substring_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_right_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_rpad_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_charlength_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_trim_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_create_tbl_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_union_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_instr_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_rpad_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_right_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_insert_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_subquery_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_select_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_locate_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_ps_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_alter_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_ltrim_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_subquery_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_where_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_create_tbl_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_instr_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_replace_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_length_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_replace_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_rtrim_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_convert_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_where_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_where_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_enum_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_trim_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_left_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_rtrim_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_create_db_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_instr_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_select_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_update_ujis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_convert_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_ltrim_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_ltrim_ucs2.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/t/jp_enum_sjis.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0212_ujis.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0212_ucs2.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0208_sjis.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0201_sjis.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0208_ucs2.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0208_sjis2.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0201_ucs2.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0208_sjis3.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0201_ujis.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/std_data/jisx0208_ujis.dat",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/jp/include/trim_sjis.inc",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/r/binlog_mysqlbinlog_row.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/r/binlog_mysqlbinlog_row_innodb.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/r/binlog_row_ctype_cp932.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/r/binlog_stm_ctype_cp932.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/r/binlog_mysqlbinlog_row_myisam.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/t/binlog_mysqlbinlog-cp932.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/ver_5_1-wl2325_r.001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/update-full-row.binlog",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/bug32407.001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/ver_5_1_23.001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/binlog_old_version_4_1.000001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/write-full-row.binlog",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/ver_5_1_17.001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/write-partial-row.binlog",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/ver_5_1-telco.001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/update-partial-row.binlog",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/binlog/std_data/ver_5_1-wl2325_s.001",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/suite/csv/csv.result",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/extra/binlog_tests/ctype_cp932.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/extra/rpl_tests/rpl_charset.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/mysql-test/extra/rpl_tests/rpl_row_annotate.test",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/extra/yassl/certs/dsa1024.der",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/extra/yassl/certs/client-key.der",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/extra/yassl/certs/client-cert.der",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/extra/yassl/taocrypt/certs/dsa512.der",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/extra/yassl/taocrypt/certs/client-key.der",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/extra/yassl/taocrypt/certs/client-cert.der",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/extra/yassl/taocrypt/benchmark/dh1024.der",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/extra/yassl/taocrypt/benchmark/dsa1024.der",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/extra/yassl/taocrypt/benchmark/rsa1024.der",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/strings/ctype-latin1.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/strings/ctype-czech.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-mariadb-5.5.56-kd43t2ksawzurt7frqzyjbg7wxv2i3ad/spack-src/strings/string.doc"
    ],
    "total_files": 14473
}