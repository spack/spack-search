{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-at-spi2-core-2.38.0-xgypfbzpqtzt34cfajwa2ra4n36u2d3y/spack-src/meson.build": "project('at-spi2-core', 'c',\n        version: '2.38.0',\n        license: 'LGPLv2.1+',\n        default_options: [\n          'buildtype=debugoptimized',\n          'warning_level=1',\n          'c_std=c99',\n        ],\n        meson_version: '>= 0.46.0')\n\nadd_project_arguments([ '-D_POSIX_C_SOURCE=200809L', '-D_DEFAULT_SOURCE' ], language: 'c')\n\natspi_gir_ns = 'Atspi'\n\ncc = meson.get_compiler('c')\nhost_system = host_machine.system()\n\nsoversion = '0.0.1'\n\nat_spi_conf = configuration_data()\nat_spi_conf.set('GETTEXT_PACKAGE', meson.project_name())\n\nroot_inc = include_directories('.')\nregistryd_inc = include_directories('registryd')\n\natspi_prefix = get_option('prefix')\natspi_datadir = join_paths(atspi_prefix, get_option('datadir'))\natspi_libexecdir = join_paths(atspi_prefix, get_option('libexecdir'))\natspi_sysconfdir = join_paths(atspi_prefix, get_option('sysconfdir'))\natspi_libdir = join_paths(atspi_prefix, get_option('libdir'))\natspi_includedir = join_paths(atspi_prefix, get_option('includedir'))\n\nif get_option('dbus_services_dir') != 'default'\n  dbus_services_dir = get_option('dbus_services_dir')\nelse\n  dbus_services_dir = join_paths(get_option('datadir'), 'dbus-1/services')\nendif\n\nif get_option('systemd_user_dir') != 'default'\n  systemd_user_dir = get_option('systemd_user_dir')\nelse\n  systemd_user_dir = join_paths(get_option('prefix'), 'lib/systemd/user')\nendif\n\n# Dependencies\nlibdbus_req_version = '>= 1.5'\nglib_req_version = '>= 2.32.0'\ngobject_req_version = '>= 2.0.0'\ngio_req_version = '>= 2.28.0'\n\nlibdbus_dep = dependency('dbus-1', version: libdbus_req_version)\nglib_dep = dependency('glib-2.0', version: glib_req_version)\ngobject_dep = dependency('gobject-2.0', version: gobject_req_version)\ngio_dep = dependency('gio-2.0', version: gio_req_version)\nif cc.has_function('dlopen')\n  dl_dep = []\nelif cc.has_function('dlopen', args: '-ldl')\n  dl_dep = cc.find_library('dl')\nelse\n  error('Could not find a library with the dlopen function')\nendif\n\nx11_deps = []\nx11_option = get_option('x11')\nif x11_option != 'no'\n  x11_dep = dependency('x11', required: false)\n\n  if x11_dep.found()\n    x11_deps += x11_dep\n    at_spi_conf.set('HAVE_X11', 1)\n    xtest_dep = dependency('xtst')\n    x11_deps += xtest_dep\n\n    if cc.has_function('XkbGetMap', dependencies: x11_deps)\n      at_spi_conf.set('HAVE_XKB', 1)\n    endif\n\n    xinput_dep = dependency('xi')\n    x11_deps += xinput_dep\n  endif\nendif\n\n# Alignments\nat_spi_conf.set('ALIGNOF_CHAR', cc.alignment('char'))\nat_spi_conf.set('ALIGNOF_DOUBLE', cc.alignment('double'))\n\ndbus_alignments = [\n  'dbus_bool_t',\n  'dbus_int16_t',\n  'dbus_int32_t',\n  'dbus_int64_t',\n]\n\nforeach a: dbus_alignments\n  at_spi_conf.set('ALIGNOF_' + a.underscorify().to_upper(),\n                  cc.alignment(a, prefix: '#include <dbus/dbus.h>', dependencies: libdbus_dep))\nendforeach\n\nat_spi_conf.set('ALIGNOF_DBIND_POINTER', cc.alignment('dbind_pointer', prefix: 'typedef void *dbind_pointer;'))\nat_spi_conf.set('ALIGNOF_DBIND_STRUCT', cc.alignment('dbind_struct', prefix: 'typedef struct { char s1; } dbind_struct;'))\n\n# introspection support\nhave_gir = false\n\nintrospection_option = get_option('introspection')\nif introspection_option != 'no'\n  gir_dep = dependency('gobject-introspection-1.0', version: '>= 0.6.7', required: false)\n\n  if gir_dep.found()\n    have_gir = true\n  endif\nendif\n\nxgettext = find_program('xgettext', required : false)\n\nconfigure_file(output: 'config.h', configuration: at_spi_conf)\n\ngnome = import('gnome')\n\nsubdir('dbind')\nsubdir('atspi')\nsubdir('bus')\nsubdir('registryd')\nsubdir('test')\n\nif get_option('docs')\n  subdir('doc/libatspi')\nendif\n\nif xgettext.found()\n  subdir('po')\nendif\n"
    },
    "skipped": [],
    "total_files": 238
}