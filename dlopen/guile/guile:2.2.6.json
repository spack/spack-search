{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/configure.ac": "dnl   configuration script for Guile\ndnl   Process this file with autoconf to produce configure.\ndnl\n\ndefine(GUILE_CONFIGURE_COPYRIGHT,[[\n\nCopyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n  2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,\n  2018, 2019 Free Software Foundation, Inc.\n\nThis file is part of GUILE\n\nGUILE is free software; you can redistribute it and/or modify it under\nthe terms of the GNU Lesser General Public License as published by the\nFree Software Foundation; either version 3, or (at your option) any\nlater version.\n\nGUILE is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\nLicense for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with GUILE; see the file COPYING.LESSER.  If not, write\nto the Free Software Foundation, Inc., 51 Franklin Street, Fifth\nFloor, Boston, MA 02110-1301, USA.\n\n]])\n\nAC_PREREQ(2.61)\n\nAC_INIT([GNU Guile],\n        m4_esyscmd([build-aux/git-version-gen --match  v2.\\[12\\].\\* .tarball-version]),\n        [bug-guile@gnu.org])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_SRCDIR(GUILE-VERSION)\n\ndnl Use `serial-tests' so the output `check-guile' is not hidden\ndnl (`parallel-tests' is the default in Automake 1.13.)\ndnl `serial-tests' was introduced in Automake 1.12.\nAM_INIT_AUTOMAKE([1.12 gnu no-define -Wall -Wno-override \\\n  serial-tests color-tests dist-lzip dist-xz])\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])], [AC_SUBST([AM_DEFAULT_VERBOSITY],1)])\n\nAC_COPYRIGHT(GUILE_CONFIGURE_COPYRIGHT)\nAC_CONFIG_SRCDIR([GUILE-VERSION])\n\n. $srcdir/GUILE-VERSION\nGUILE_VERSION=\"$PACKAGE_VERSION\"\n\nAC_CONFIG_HEADERS([config.h])\nAH_TOP(/*GUILE_CONFIGURE_COPYRIGHT*/)\n\ndnl We require the pkg.m4 set of macros from pkg-config.\ndnl Make sure it's available.\nm4_pattern_forbid([PKG_CHECK_MODULES])\n\n#--------------------------------------------------------------------\n\nAC_LANG([C])\n\ndnl Some more checks for Win32\nAC_CANONICAL_HOST\n\nAC_LIBTOOL_WIN32_DLL\n\nAC_PROG_INSTALL\nAC_PROG_CC\n\n# Sadly, there is no released version of Autoconf with a nice\n# C11-ensuring macro.  This should work for gcc/clang within the last 5\n# years though.\nAC_MSG_CHECKING([how to enable C11 support])\nif test \"$GCC\" = yes; then\n  AC_MSG_RESULT([-std=gnu11])\n  CC=\"$CC -std=gnu11\"\nelse\n  AC_MSG_RESULT([assuming $CC supports C11 by default])\nfi\n\ngl_EARLY\nAC_PROG_CPP\nAC_PROG_SED\nAC_PROG_AWK\nAC_PROG_LN_S\nAM_PROG_AR\n\ndnl Gnulib.\ngl_INIT\n\ndnl We provide our own lib/glthread/lock.h, so let other Gnulib modules\ndnl know that we have it.  This allows them to be compiled with adequate\ndnl locking support.  See <http://bugs.gnu.org/14404>.\nAC_DEFINE([GNULIB_LOCK], [1],\n  [Define to allow Gnulib modules to use Guile's locks.])\n\n\ndnl Guile needs C99 or later.\ngl_PROG_CC_C99\n\n# for per-target cflags in the libguile subdir\nAM_PROG_CC_C_O\n\nAC_LIBTOOL_DLOPEN\nAC_PROG_LIBTOOL\n\nAM_CONDITIONAL([HAVE_SHARED_LIBRARIES], [test \"x$enable_shared\" = \"xyes\"])\n\ndnl Check for libltdl.\nAC_LIB_HAVE_LINKFLAGS([ltdl], [], [#include <ltdl.h>],\n  [lt_dlopenext (\"foo\");])\nif test \"x$HAVE_LIBLTDL\" != \"xyes\"; then\n  AC_MSG_ERROR([GNU libltdl (Libtool) not found, see README.])\nfi\n\nAC_CHECK_PROG(have_makeinfo, makeinfo, yes, no)\nAM_CONDITIONAL(HAVE_MAKEINFO, test \"$have_makeinfo\" = yes)\n\nAM_PATH_LISPDIR\n\nAC_DEFINE_UNQUOTED([HOST_TYPE], [\"$host\"],\n  [Define to the host's GNU triplet.])\n\n#--------------------------------------------------------------------\n#\n# User options (after above tests that may set default CFLAGS etc.)\n#\n#--------------------------------------------------------------------\n\nGUILE_ERROR_ON_WARNING=\"no\"\n\nAC_ARG_ENABLE(error-on-warning,\n  [  --enable-error-on-warning    treat compile warnings as errors],\n  [case \"${enableval}\" in\n     yes | y) GUILE_ERROR_ON_WARNING=\"yes\" ;;\n     no | n)  GUILE_ERROR_ON_WARNING=\"no\" ;;\n     *) AC_MSG_ERROR(bad value ${enableval} for --enable-error-on-warning) ;;\n   esac])\n\nAC_ARG_ENABLE(debug-malloc,\n  [  --enable-debug-malloc   include malloc debugging code],\n  if test \"$enable_debug_malloc\" = y || test \"$enable_debug_malloc\" = yes; then\n    AC_DEFINE([GUILE_DEBUG_MALLOC], 1,\n      [Define this if you want to debug scm_must_malloc/realloc/free calls.])\n  fi)\n\nSCM_I_GSC_GUILE_DEBUG=0\nAC_ARG_ENABLE(guile-debug,\n  [AS_HELP_STRING([--enable-guile-debug],\n                  [include internal debugging functions])],\n  if test \"$enable_guile_debug\" = y || test \"$enable_guile_debug\" = yes; then\n    SCM_I_GSC_GUILE_DEBUG=1\n  fi)\n\nAC_ARG_ENABLE(posix,\n  [  --disable-posix         omit non-essential POSIX interfaces],,\n  enable_posix=yes)\n\nAC_ARG_ENABLE(networking,\n  [  --disable-networking    omit networking interfaces],,\n  enable_networking=yes)\n\nAC_ARG_ENABLE(regex,\n  [  --disable-regex         omit regular expression interfaces],,\n  enable_regex=yes)\n\nAC_ARG_ENABLE([deprecated],\n  AS_HELP_STRING([--disable-deprecated],[omit deprecated features]))\n\nif test \"$enable_deprecated\" = no; then\n  SCM_I_GSC_ENABLE_DEPRECATED=0\n  warn_default=no\nelse\n  if test \"$enable_deprecated\" = yes || test \"$enable_deprecated\" = \"\"; then\n    warn_default=summary\n  elif test \"$enable_deprecated\" = shutup; then\n    warn_default=no\n  else\n    warn_default=$enable_deprecated\n  fi\n  SCM_I_GSC_ENABLE_DEPRECATED=1\nfi\nAC_DEFINE_UNQUOTED([SCM_WARN_DEPRECATED_DEFAULT], \"$warn_default\",\n[Define this to control the default warning level for deprecated features.])\n\ndnl  Added the following configure option in January 2008 following\ndnl  investigation of problems with \"64\" system and library calls on\ndnl  Darwin (MacOS X).  The libguile code (_scm.h) assumes that if a\ndnl  system has stat64, it will have all the other 64 APIs too; but on\ndnl  Darwin, stat64 is there but other APIs are missing.\ndnl \ndnl  It also appears, from the Darwin docs, that most system call APIs\ndnl  there (i.e. the traditional ones _without_ \"64\" in their names) have\ndnl  been 64-bit-capable for a long time now, so it isn't necessary to\ndnl  use \"64\" versions anyway.  For example, Darwin's off_t is 64-bit.\ndnl \ndnl  A similar problem has been reported for HP-UX:\ndnl  http://www.nabble.com/Building-guile-1.8.2-on-hpux-td13106681.html\ndnl \ndnl  Therefore, and also because a Guile without LARGEFILE64 support is\ndnl  better than no Guile at all, we provide this option to suppress\ndnl  trying to use \"64\" calls.\ndnl \ndnl  It may be that for some 64-bit function on Darwin/HP-UX we do need\ndnl  to use a \"64\" call, and hence that by using --without-64-calls we're\ndnl  missing out on that.  If so, someone can work on that in the future.\ndnl  For now, --without-64-calls allows Guile to build on OSs where it\ndnl  wasn't building before.\nAC_MSG_CHECKING([whether to use system and library \"64\" calls])\nAC_ARG_WITH([64-calls],\n  AS_HELP_STRING([--without-64-calls],\n                 [don't attempt to use system and library calls with \"64\" in their names]),\n  [use_64_calls=$withval],\n  [use_64_calls=yes\n   case $host in\n     *-apple-darwin* )\n       use_64_calls=no\n       ;;\n     powerpc-ibm-aix* )\n       use_64_calls=no\n       ;;\n   esac])\nAC_MSG_RESULT($use_64_calls)\ncase \"$use_64_calls\" in\n  y* )\n    AC_DEFINE([GUILE_USE_64_CALLS], 1,\n      [Define to 1 in order to try to use \"64\" versions of system and library calls.])\n    ;;\nesac\n\n#--------------------------------------------------------------------\n\ndnl Check for dynamic linking\n\nuse_modules=yes\nAC_ARG_WITH(modules,\n[  --with-modules[=FILES]  Add support for dynamic modules],\nuse_modules=\"$withval\")\ntest -z \"$use_modules\" && use_modules=yes\nDLPREOPEN=\nif test \"$use_modules\" != no; then\n  if test \"$use_modules\" = yes; then\n    DLPREOPEN=\"-dlpreopen force\"\n  else\n    DLPREOPEN=\"-export-dynamic\"\n    for module in $use_modules; do\n      DLPREOPEN=\"$DLPREOPEN -dlopen $module\"\n    done\n  fi\nfi\n\ndnl files which are destined for separate modules.\n\nif test \"$use_modules\" != no; then\n   AC_LIBOBJ([dynl])\n   AC_DEFINE([HAVE_MODULES], 1,\n     [Define this if you want support for dynamically loaded modules in Guile.])\nfi\n\nif test \"$enable_posix\" = yes; then\n   AC_LIBOBJ([posix])\n   AC_DEFINE([HAVE_POSIX], 1,\n     [Define this if you want support for non-essential POSIX system calls in Guile.])\nfi\n\nif test \"$enable_networking\" = yes; then\n   AC_LIBOBJ([net_db])\n   AC_LIBOBJ([socket])\n   AC_DEFINE([HAVE_NETWORKING], 1,\n     [Define this if you want support for networking in Guile.])\nfi\n\nif test \"$enable_debug_malloc\" = yes; then\n   AC_LIBOBJ([debug-malloc])\nfi\n\nAC_CHECK_LIB(uca, __uc_get_ar_bsp)\n\nAC_C_CONST\n\n# \"volatile\" is used in a couple of tests below.\nAC_C_VOLATILE\n\nAC_C_INLINE\nif test \"$ac_cv_c_inline\" != no; then\n  SCM_I_GSC_C_INLINE=\"\\\"${ac_cv_c_inline}\\\"\"\nelse\n  SCM_I_GSC_C_INLINE=NULL\nfi\nAC_CHECK_LIB(uca, __uc_get_ar_bsp)\n\nAC_C_BIGENDIAN\n\nAC_C_LABELS_AS_VALUES\n\nAC_CHECK_SIZEOF(char)\nAC_CHECK_SIZEOF(unsigned char)\nAC_CHECK_SIZEOF(short)\nAC_CHECK_SIZEOF(unsigned short)\nAC_CHECK_SIZEOF(int)\nAC_CHECK_SIZEOF(unsigned int)\nAC_CHECK_SIZEOF(long)\nAC_CHECK_SIZEOF(unsigned long)\nAC_CHECK_SIZEOF(size_t)\nAC_CHECK_SIZEOF(long long)\nAC_CHECK_SIZEOF(unsigned long long)\nAC_CHECK_SIZEOF(__int64)\nAC_CHECK_SIZEOF(unsigned __int64)\nAC_CHECK_SIZEOF(void *)\nAC_CHECK_SIZEOF(intptr_t)\nAC_CHECK_SIZEOF(uintptr_t)\nAC_CHECK_SIZEOF(ptrdiff_t)\nAC_CHECK_SIZEOF(size_t)\nAC_CHECK_SIZEOF(off_t)\n\nif test \"$ac_cv_sizeof_long\" -gt \"$ac_cv_sizeof_void_p\"; then\n  AC_MSG_ERROR(long does not fit into a void*)\nfi\n\nif test \"$ac_cv_sizeof_ptrdiff_t\" -ne 0; then\n  SCM_I_GSC_T_PTRDIFF='\"ptrdiff_t\"'\nelse\n  SCM_I_GSC_T_PTRDIFF='\"long\"'\nfi\nAC_SUBST([SCM_I_GSC_T_PTRDIFF])\n\nAC_CHECK_HEADERS([stdint.h])\nAC_CHECK_HEADERS([inttypes.h])\nAC_CHECK_HEADERS([stdatomic.h])\n\nAC_CHECK_SIZEOF(intmax_t)\n\nSCM_I_GSC_NEEDS_STDINT_H=0\nSCM_I_GSC_NEEDS_INTTYPES_H=0\n\n### intptr and uintptr (try not to use inttypes if we don't have to)\nif test \"$ac_cv_header_inttypes_h\" = yes; then\n  if test \"$ac_cv_sizeof_intptr_t\" -eq 0; then\n    AC_CHECK_SIZEOF([intptr_t],,[#include <inttypes.h>\n#include <stdio.h>])\n    if test \"$ac_cv_sizeof_intptr_t\" -ne 0; then\n      SCM_I_GSC_NEEDS_INTTYPES_H=1\n    fi\n  fi\n  if test \"$ac_cv_sizeof_uintptr_t\" -eq 0; then\n    AC_CHECK_SIZEOF([uintptr_t],,[#include <inttypes.h>\n#include <stdio.h>])\n    if test \"$ac_cv_sizeof_uintptr_t\" -ne 0; then\n      SCM_I_GSC_NEEDS_INTTYPES_H=1\n    fi\n  fi\nfi\n\n### See what's provided by stdint.h\nif test \"$ac_cv_header_stdint_h\" = yes; then\n   AC_CHECK_TYPE([int8_t],[scm_stdint_has_int8=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([uint8_t],[scm_stdint_has_uint8=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([int16_t],[scm_stdint_has_int16=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([uint16_t],[scm_stdint_has_uint16=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([int32_t],[scm_stdint_has_int32=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([uint32_t],[scm_stdint_has_uint32=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([int64_t],[scm_stdint_has_int64=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([uint64_t],[scm_stdint_has_uint64=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([intmax_t],[scm_stdint_has_intmax=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([uintmax_t],[scm_stdint_has_uintmax=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([intptr_t],[scm_stdint_has_intptr=1],,[#include <stdint.h>])\n   AC_CHECK_TYPE([uintptr_t],[scm_stdint_has_uintptr=1],,[#include <stdint.h>])\nfi\n\n# so we don't get confused by the cache (wish there was a better way\n# to check particular headers for the same type...)\n\nunset ac_cv_type_int8_t\nunset ac_cv_type_uint8_t\nunset ac_cv_type_int16_t\nunset ac_cv_type_uint16_t\nunset ac_cv_type_int32_t\nunset ac_cv_type_uint32_t\nunset ac_cv_type_int64_t\nunset ac_cv_type_uint64_t\nunset ac_cv_type_intmax_t\nunset ac_cv_type_uintmax_t\n\n### See what's provided by inttypes.h\nif test \"$ac_cv_header_inttypes_h\" = yes; then\n  AC_CHECK_TYPE([int8_t],[scm_inttypes_has_int8=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([uint8_t],[scm_inttypes_has_uint8=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([int16_t],[scm_inttypes_has_int16=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([uint16_t],[scm_inttypes_has_uint16=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([int32_t],[scm_inttypes_has_int32=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([uint32_t],[scm_inttypes_has_uint32=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([int64_t],[scm_inttypes_has_int64=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([uint64_t],[scm_inttypes_has_uint64=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([intmax_t],[scm_inttypes_has_intmax=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([uintmax_t],[scm_inttypes_has_uintmax=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([intptr_t],[scm_inttypes_has_intptr=1],,[#include <inttypes.h>])\n  AC_CHECK_TYPE([uintptr_t],[scm_inttypes_has_uintptr=1],,[#include <inttypes.h>])\nfi\n\n# Try hard to find definitions for some required scm_t_*int* types.\n\n### Required type scm_t_int8\nif test \"$scm_stdint_has_int8\"; then\n  SCM_I_GSC_T_INT8='\"int8_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_int8\"; then\n  SCM_I_GSC_T_INT8='\"int8_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_char\" -eq 1; then\n  SCM_I_GSC_T_INT8='\"signed char\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for scm_t_int8.])\nfi\nAC_SUBST([SCM_I_GSC_T_INT8])\n\n### Required type scm_t_uint8\nif test \"$scm_stdint_has_uint8\"; then\n  SCM_I_GSC_T_UINT8='\"uint8_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_uint8\"; then\n  SCM_I_GSC_T_UINT8='\"uint8_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_unsigned_char\" -eq 1; then\n  SCM_I_GSC_T_UINT8='\"unsigned char\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for scm_t_uint8.])\nfi\nAC_SUBST([SCM_I_GSC_T_UINT8])\n\n### Required type scm_t_int16 (ANSI C says int or short might work)\nif test \"$scm_stdint_has_int16\"; then\n  SCM_I_GSC_T_INT16='\"int16_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_int16\"; then\n  SCM_I_GSC_T_INT16='\"int16_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_int\" -eq 2; then\n  SCM_I_GSC_T_INT16='\"int\"'\nelif test \"$ac_cv_sizeof_short\" -eq 2; then\n  SCM_I_GSC_T_INT16='\"short\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for scm_t_int16.])\nfi\nAC_SUBST([SCM_I_GSC_T_INT16])\n\n### Required type scm_t_uint16 (ANSI C says int or short might work)\nif test \"$scm_stdint_has_uint16\"; then\n  SCM_I_GSC_T_UINT16='\"uint16_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_uint16\"; then\n  SCM_I_GSC_T_UINT16='\"uint16_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_unsigned_int\" -eq 2; then\n  SCM_I_GSC_T_UINT16='\"unsigned int\"'\nelif test \"$ac_cv_sizeof_unsigned_short\" -eq 2; then\n  SCM_I_GSC_T_UINT16='\"unsigned short\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for scm_t_uint16.])\nfi\nAC_SUBST([SCM_I_GSC_T_UINT16])\n\n\n### Required type scm_t_int32 (ANSI C says int, short, or long might work)\nif test \"$scm_stdint_has_int32\"; then\n  SCM_I_GSC_T_INT32='\"int32_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_int32\"; then\n  SCM_I_GSC_T_INT32='\"int32_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_int\" -eq 4; then\n  SCM_I_GSC_T_INT32='\"int\"'\nelif test \"$ac_cv_sizeof_long\" -eq 4; then\n  SCM_I_GSC_T_INT32='\"long\"'\nelif test \"$ac_cv_sizeof_short\" -eq 4; then\n  SCM_I_GSC_T_INT32='\"short\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for scm_t_int32.])\nfi\nAC_SUBST([SCM_I_GSC_T_INT32])\n\n### Required type scm_t_uint32 (ANSI C says int, short, or long might work)\nif test \"$scm_stdint_has_uint32\"; then\n  SCM_I_GSC_T_UINT32='\"uint32_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_uint32\"; then\n  SCM_I_GSC_T_UINT32='\"uint32_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_unsigned_int\" -eq 4; then\n  SCM_I_GSC_T_UINT32='\"unsigned int\"'\nelif test \"$ac_cv_sizeof_unsigned_long\" -eq 4; then\n  SCM_I_GSC_T_UINT32='\"unsigned long\"'\nelif test \"$ac_cv_sizeof_unsigned_short\" -eq 4; then\n  SCM_I_GSC_T_UINT32='\"unsigned short\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for scm_t_uint32.])\nfi\nAC_SUBST([SCM_I_GSC_T_UINT32])\n\n### Optional type scm_t_int64 (ANSI C says int, short, or long might work)\n### Also try 'long long' and '__int64' if we have it.\nSCM_I_GSC_T_INT64=0\nif test \"$scm_stdint_has_int64\"; then\n  SCM_I_GSC_T_INT64='\"int64_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_int64\"; then\n  SCM_I_GSC_T_INT64='\"int64_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_int\" -eq 8; then\n  SCM_I_GSC_T_INT64='\"int\"'\nelif test \"$ac_cv_sizeof_long\" -eq 8; then\n  SCM_I_GSC_T_INT64='\"long\"'\nelif test \"$ac_cv_sizeof_short\" -eq 8; then\n  SCM_I_GSC_T_INT64='\"short\"'\nelif test \"$ac_cv_sizeof_long_long\" -eq 8; then\n  SCM_I_GSC_T_INT64='\"long long\"'\nelif test \"$ac_cv_sizeof___int64\" -eq 8; then\n  SCM_I_GSC_T_INT64='\"__int64\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for scm_t_int64.])\nfi\nAC_SUBST([SCM_I_GSC_T_INT64])\n\n\n### Optional type scm_t_uint64 (ANSI C says int, short, or long might work)\n### Also try 'long long' and '__int64' if we have it.\nSCM_I_GSC_T_UINT64=0\nif test \"$scm_stdint_has_uint64\"; then\n  SCM_I_GSC_T_UINT64='\"uint64_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_uint64\"; then\n  SCM_I_GSC_T_UINT64='\"uint64_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_unsigned_int\" -eq 8; then\n  SCM_I_GSC_T_UINT64='\"unsigned int\"'\nelif test \"$ac_cv_sizeof_unsigned_long\" -eq 8; then\n  SCM_I_GSC_T_UINT64='\"unsigned long\"'\nelif test \"$ac_cv_sizeof_unsigned_short\" -eq 8; then\n  SCM_I_GSC_T_UINT64='\"unsigned short\"'\nelif test \"$ac_cv_sizeof_unsigned_long_long\" -eq 8; then\n  SCM_I_GSC_T_UINT64='\"unsigned long long\"'\nelif test \"$ac_cv_sizeof_unsigned___int64\" -eq 8; then\n  SCM_I_GSC_T_UINT64='\"unsigned __int64\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for scm_t_uint64.])\nfi\nAC_SUBST([SCM_I_GSC_T_UINT64])\n\n### Required type scm_t_intmax\n###\n### We try 'intmax_t', '__int64', 'long long' in this order.  When\n### none of them is available, we use 'long'.\n###\nSCM_I_GSC_T_INTMAX=0\nif test \"$scm_stdint_has_intmax\"; then\n  SCM_I_GSC_T_INTMAX='\"intmax_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_intmax\"; then\n  SCM_I_GSC_T_INTMAX='\"intmax_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof___int64\" -ne 0; then\n  SCM_I_GSC_T_INTMAX='\"__int64\"'\nelif test \"$ac_cv_sizeof_long_long\" -ne 0; then\n  SCM_I_GSC_T_INTMAX='\"long long\"'\nelse\n  SCM_I_GSC_T_INTMAX='\"long\"'\nfi\nAC_SUBST([SCM_I_GSC_T_INTMAX])\n\n### Required type scm_t_uintmax\n###\n### We try 'uintmax_t', 'unsigned __int64', 'unsigned long long' in\n### this order.  When none of them is available, we use 'unsigned long'.\n###\nSCM_I_GSC_T_UINTMAX=0\nif test \"$scm_stdint_has_uintmax\"; then\n  SCM_I_GSC_T_UINTMAX='\"uintmax_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_uintmax\"; then\n  SCM_I_GSC_T_UINTMAX='\"uintmax_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_unsigned___int64\" -ne 0; then\n  SCM_I_GSC_T_UINTMAX='\"unsigned __int64\"'\nelif test \"$ac_cv_sizeof_unsigned_long_long\" -ne 0; then\n  SCM_I_GSC_T_UINTMAX='\"unsigned long long\"'\nelse\n  SCM_I_GSC_T_UINTMAX='\"unsigned long\"'\nfi\nAC_SUBST([SCM_I_GSC_T_UINTMAX])\n\n### Required type scm_t_intptr\n###\nSCM_I_GSC_T_INTPTR=0\nif test \"$scm_stdint_has_intptr\"; then\n  SCM_I_GSC_T_INTPTR='\"intptr_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_intptr\"; then\n  SCM_I_GSC_T_INTPTR='\"intptr_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_int\" = \"$ac_cv_sizeof_void_p\"; then\n  SCM_I_GSC_T_INTPTR='\"int\"'\nelif test \"$ac_cv_sizeof_long\" = \"$ac_cv_sizeof_void_p\"; then\n  SCM_I_GSC_T_INTPTR='\"long\"'\nelif test \"$ac_cv_sizeof_long_long\" = \"$ac_cv_sizeof_void_p\"; then\n  SCM_I_GSC_T_INTPTR='\"long long\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for `scm_t_intptr'.])\nfi\nAC_SUBST([SCM_I_GSC_T_INTPTR])\n\n### Required type scm_t_uintptr\n###\nSCM_I_GSC_T_UINTPTR=0\nif test \"$scm_stdint_has_uintptr\"; then\n  SCM_I_GSC_T_UINTPTR='\"uintptr_t\"'\n  SCM_I_GSC_NEEDS_STDINT_H=1\nelif test \"$scm_inttypes_has_uintptr\"; then\n  SCM_I_GSC_T_UINTPTR='\"uintptr_t\"'\n  SCM_I_GSC_NEEDS_INTTYPES_H=1\nelif test \"$ac_cv_sizeof_int\" = \"$ac_cv_sizeof_void_p\"; then\n  SCM_I_GSC_T_UINTPTR='\"unsigned int\"'\nelif test \"$ac_cv_sizeof_long\" = \"$ac_cv_sizeof_void_p\"; then\n  SCM_I_GSC_T_UINTPTR='\"unsigned long\"'\nelif test \"$ac_cv_sizeof_long_long\" = \"$ac_cv_sizeof_void_p\"; then\n  SCM_I_GSC_T_UINTPTR='\"unsigned long long\"'\nelse\n  AC_MSG_ERROR([Can't find appropriate type for `scm_t_uintptr'.])\nfi\nAC_SUBST([SCM_I_GSC_T_UINTPTR])\n\n\nAC_SUBST([SCM_I_GSC_NEEDS_STDINT_H])\nAC_SUBST([SCM_I_GSC_NEEDS_INTTYPES_H])\n\nAC_MSG_CHECKING([for which prebuilt binary set to use during bootstrap])\nSCM_PREBUILT_BINARIES=\ncase \"$ac_cv_c_bigendian-$ac_cv_sizeof_void_p\" in\n  yes-8) SCM_PREBUILT_BINARIES=64-bit-big-endian;;\n  yes-4) SCM_PREBUILT_BINARIES=32-bit-big-endian;;\n  no-8) SCM_PREBUILT_BINARIES=64-bit-little-endian;;\n  no-4) SCM_PREBUILT_BINARIES=32-bit-little-endian;;\n  *) AC_MSG_ERROR([Unexpected endianness+pointer size combination.])\nesac\nAC_MSG_RESULT($SCM_PREBUILT_BINARIES)\nAC_SUBST([SCM_PREBUILT_BINARIES])\n\nAC_HEADER_STDC\nAC_HEADER_TIME\nAC_HEADER_SYS_WAIT\nAC_HEADER_DIRENT\n\n# Reason for checking:\n#\n#   HP-UX 11.11 (at least) doesn't provide `struct dirent64', even\n#   with `_LARGEFILE64_SOURCE', so check whether it's available.\n#\nAC_CHECK_MEMBER([struct dirent64.d_name],\n  [SCM_I_GSC_HAVE_STRUCT_DIRENT64=1], [SCM_I_GSC_HAVE_STRUCT_DIRENT64=0],\n  [ #ifndef _LARGEFILE64_SOURCE\n    # define _LARGEFILE64_SOURCE\n    #endif\n\n    /* Per Autoconf manual.  */\n    #include <sys/types.h>\n    #ifdef HAVE_DIRENT_H\n    # include <dirent.h>\n    #else\n    # define dirent direct\n    # ifdef HAVE_SYS_NDIR_H\n    #  include <sys/ndir.h>\n    # endif\n    # ifdef HAVE_SYS_DIR_H\n    #  include <sys/dir.h>\n    # endif\n    # ifdef HAVE_NDIR_H\n    #  include <ndir.h>\n    # endif\n    #endif ])\nAC_SUBST([SCM_I_GSC_HAVE_STRUCT_DIRENT64])\n\n# Reasons for testing:\n#   complex.h - new in C99\n#   fenv.h - available in C99, but not older systems\n#   machine/fpu.h - on Tru64 5.1b, the declaration of fesetround(3) is in\n#     this file instead of <fenv.h>\n#   process.h - mingw specific\n#   sched.h - missing on MinGW\n#   sys/sendfile.h - non-POSIX, found in glibc\n#\nAC_CHECK_HEADERS([complex.h fenv.h io.h libc.h limits.h memory.h process.h string.h \\\nsys/dir.h sys/ioctl.h sys/select.h \\\nsys/time.h sys/timeb.h sys/times.h sys/stdtypes.h sys/types.h \\\nsys/utime.h time.h unistd.h utime.h pwd.h grp.h sys/utsname.h \\\ndirect.h machine/fpu.h sched.h sys/sendfile.h])\n\n# \"complex double\" is new in C99, and \"complex\" is only a keyword if\n# <complex.h> is included\nAC_CHECK_TYPES(complex double,,,\n[#if HAVE_COMPLEX_H\n#include <complex.h>\n#endif])\n\n# On MacOS X <sys/socklen.h> contains socklen_t, so must include that\n# when testing.\nAC_CHECK_TYPE(socklen_t, ,\n  [AC_DEFINE_UNQUOTED([socklen_t], int,\n                      [Define to `int' if <sys/socket.h> does not define.])],\n  [#if HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#include <sys/socket.h>\n])\n\nAC_CHECK_TYPES([struct ip_mreq], , , [#include <netinet/in.h>])\n\nGUILE_HEADER_LIBC_WITH_UNISTD\n\nAC_TYPE_GETGROUPS\nAC_TYPE_SIGNAL\nAC_TYPE_MODE_T\n\ndnl Check whether we need -lm.\nLT_LIB_M\nLIBS=\"$LIBS $LIBM\"\n\nAC_CHECK_FUNCS(gethostbyname)\nif test $ac_cv_func_gethostbyname = no; then\n    AC_CHECK_LIB(nsl, gethostbyname)\nfi\n\nAC_CHECK_FUNCS(connect)\nif test $ac_cv_func_connect = no; then\n    AC_CHECK_LIB(socket, connect)\nfi\n\ndnl\ndnl Check for Winsock and other functionality on Win32 (*not* CygWin)\ndnl\nEXTRA_DEFS=\"\"\ncase $host in\n  *-*-mingw*)\n    AC_CHECK_HEADER(winsock2.h, [AC_DEFINE([HAVE_WINSOCK2_H], 1,\n      [Define if you have the <winsock2.h> header file.])])\n    AC_CHECK_LIB(ws2_32, main)\n    AC_LIBOBJ([posix-w32])\n    if test \"$enable_shared\" = yes ; then\n      EXTRA_DEFS=\"-DSCM_IMPORT\"\n      AC_DEFINE([USE_DLL_IMPORT], 1,\n        [Define if you need additional CPP macros on Win32 platforms.])\n    fi\n    ;;\nesac\nAC_SUBST(EXTRA_DEFS)\n\n# Reasons for testing:\n#   crt_externs.h - Darwin specific\n#\nAC_CHECK_HEADERS([assert.h crt_externs.h])\n\n# Reasons for testing:\n#   DINFINITY - OSF specific\n#   DQNAN - OSF specific\n#       (DINFINITY and DQNAN are actually global variables, not functions)\n#   chsize - an MS-DOS-ism, found in mingw\n#   cexp, clog - not in various pre-c99 systems, and note that it's possible\n#       for gcc to provide the \"complex double\" type but the system to not\n#       have functions like cexp and clog\n#   clog10 - not in mingw (though others like clog and csqrt are)\n#   fesetround - available in C99, but not older systems\n#   ftruncate - posix, but probably not older systems (current mingw\n#               has it as an inline for chsize)\n#   ioctl - not in mingw.\n#   gmtime_r - recent posix, not on old systems\n#   readdir_r - recent posix, not on old systems\n#   readdir64_r - not available on HP-UX 11.11\n#   stat64 - SuS largefile stuff, not on old systems\n#   sysconf - not on old systems\n#   truncate - not in mingw\n#   isblank - available as a GNU extension or in C99\n#   _NSGetEnviron - Darwin specific\n#   strcoll_l, newlocale, uselocale, utimensat - POSIX.1-2008\n#   strtol_l - non-POSIX, found in glibc\n#   fork - unavailable on Windows\n#   sched_getaffinity, sched_setaffinity - GNU extensions (glibc)\n#   sendfile - non-POSIX, found in glibc\n#\nAC_CHECK_FUNCS([DINFINITY DQNAN cexp chsize clog clog10 ctermid\t\t\\\n  fesetround ftime ftruncate fchown fchmod getcwd geteuid getsid\t\\\n  gettimeofday getuid getgid gmtime_r ioctl lstat mkdir mknod nice\t\\\n  readlink rename rmdir setegid seteuid\t\t                        \\\n  setlocale setuid setgid setpgid setsid sigaction siginterrupt stat64\t\\\n  strptime symlink sync sysconf tcgetpgrp tcsetpgrp uname waitpid\t\\\n  strdup system usleep atexit on_exit chown link fcntl ttyname getpwent\t\\\n  getgrent kill getppid getpgrp fork setitimer getitimer strchr strcmp\t\\\n  index bcopy memcpy rindex truncate isblank _NSGetEnviron\t\t\\\n  strcoll strcoll_l strtod_l strtol_l newlocale uselocale utimensat\t\\\n  sched_getaffinity sched_setaffinity sendfile])\n\n# The newlib C library uses _NL_ prefixed locale langinfo constants.\nAC_CHECK_DECLS([_NL_NUMERIC_GROUPING], [], [], [[#include <langinfo.h>]])\n\n# Reasons for testing:\n#   netdb.h - not in mingw\n#   sys/param.h - not in mingw\n#   pthread.h - only available with pthreads.  ACX_PTHREAD doesn't\n#       check this specifically, we need it for the timespec test below.\n#   pthread_np.h - available on FreeBSD\n#   sethostname - the function itself check because it's not in mingw,\n#       the DECL is checked because Solaris 10 doens't have in any header\n#   hstrerror - on Tru64 5.1b the symbol is available in libc but the\n#       declaration isn't anywhere.\n#   cuserid - on Tru64 5.1b the declaration is documented to be available\n#       only with `_XOPEN_SOURCE' or some such.\n#\nAC_CHECK_HEADERS([crypt.h netdb.h pthread.h pthread_np.h sys/param.h sys/resource.h sys/file.h sys/mman.h])\nAC_CHECK_FUNCS(chroot flock getlogin cuserid getpriority setpriority getpass sethostname gethostname)\nAC_CHECK_DECLS([sethostname, hstrerror, cuserid])\n\n# crypt() may or may not be available, for instance in some countries there\n# are restrictions on cryptography.\n#\n# crypt() might be in libc (eg. OpenBSD), or it might be in a separate\n# -lcrypt library (eg. Debian GNU/Linux).\n#\n# On HP-UX 11, crypt() is in libc and there's a dummy libcrypt.a.  We must\n# be careful to avoid -lcrypt in this case, since libtool will see there's\n# only a static libcrypt and decide to build only a static libguile.\n#\n# AC_SEARCH_LIBS lets us add -lcrypt to LIBS only if crypt() is not in the\n# libraries already in that list.\n#\nAC_SEARCH_LIBS(crypt, crypt,\n  [AC_DEFINE([HAVE_CRYPT],1,\n             [Define to 1 if you have the `crypt' function.])])\n\n# When compiling with GCC on some OSs (Solaris, AIX), _Complex_I doesn't\n# work; in the reported cases so far, 1.0fi works well instead.  According\n# to the C99 spec, the complex.h header must provide a working definition\n# of _Complex_I, so we always try _Complex_I first.  The 1.0fi fallback\n# is a workaround for the failure of some systems to conform to C99.\nif test \"$ac_cv_type_complex_double\" = yes; then\n  AC_MSG_CHECKING([for i])\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#if HAVE_COMPLEX_H\n#include <complex.h>\n#endif\ncomplex double z;\n]], [[\nz = _Complex_I;\n]])],\n    [AC_DEFINE([GUILE_I],_Complex_I,[The imaginary unit (positive square root of -1).])\n     AC_MSG_RESULT([_Complex_I])],\n    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#if HAVE_COMPLEX_H\n#include <complex.h>\n#endif\ncomplex double z;\n]],[[\nz = 1.0fi;\n]])],\n  [AC_DEFINE([GUILE_I],1.0fi)\n   AC_MSG_RESULT([1.0fi])],\n  [ac_cv_type_complex_double=no\n   AC_MSG_RESULT([not available])])])\nfi\n\n# glibc 2.3.6 (circa 2006) and various prior versions had a bug where\n# csqrt(-i) returned a negative real part, when it should be positive\n# for the principal root.\n#\nif test \"$ac_cv_type_complex_double\" = yes; then\n\n  AC_CACHE_CHECK([whether csqrt is usable],\n    guile_cv_use_csqrt,\n    [AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <complex.h>\n/* \"volatile\" is meant to prevent gcc from calculating the sqrt as a\n   constant, we want to test libc. */\nvolatile complex double z = - _Complex_I;\nint\nmain (void)\n{\n  z = csqrt (z);\t\n  if (creal (z) > 0.0)\n    return 0;  /* good */\n  else\n    return 1;  /* bad */\n}]])],\n    [guile_cv_use_csqrt=yes],\n    [guile_cv_use_csqrt=\"no, glibc 2.3 bug\"],\n    [guile_cv_use_csqrt=\"yes, hopefully (cross-compiling)\"])])\n  case $guile_cv_use_csqrt in\n    yes*)\n      AC_DEFINE([HAVE_USABLE_CSQRT], 1, [Define to 1 if csqrt is bug-free])\n      ;;\n  esac\nfi\n\n# Cygwin and Hurd (circa 2017) and various prior versions defined stub\n# versions of the virtual and profiling itimers that would always fail\n# when called.\nif test \"$ac_cv_func_getitimer\" = yes; then\n\n  AC_CACHE_CHECK([whether getitimer(ITIMER_PROF) is usable],\n    guile_cv_use_getitimer_prof,\n    [AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <sys/time.h>\nint\nmain (void)\n{\n  struct itimerval I;\n  if (getitimer (ITIMER_PROF, &I) == 0)\n    return 0;  /* good */\n  else\n    return 1;  /* bad */\n}]])],\n    [guile_cv_use_getitimer_prof=yes],\n    [guile_cv_use_getitimer_prof=no],\n    [guile_cv_use_getitimer_prof=\"yes, hopefully (cross-compiling)\"])])\n  case $guile_cv_use_getitimer_prof in\n    yes*)\n      AC_DEFINE([HAVE_USABLE_GETITIMER_PROF], 1, [Define to 1 if getitimer(ITIMER_PROF, ...) is functional])\n      ;;\n  esac\n\n  AC_CACHE_CHECK([whether getitimer(ITIMER_VIRTUAL) is usable],\n    guile_cv_use_getitimer_virtual,\n    [AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <sys/time.h>\nint\nmain (void)\n{\n  struct itimerval I;\n  if (getitimer (ITIMER_VIRTUAL, &I) == 0)\n    return 0;  /* good */\n  else\n    return 1;  /* bad */\n}]])],\n    [guile_cv_use_getitimer_virtual=yes],\n    [guile_cv_use_getitimer_virtual=no],\n    [guile_cv_use_getitimer_virtual=\"yes, hopefully (cross-compiling)\"])])\n  case $guile_cv_use_getitimer_virtual in\n    yes*)\n      AC_DEFINE([HAVE_USABLE_GETITIMER_VIRTUAL], 1, [Define to 1 if getitimer(ITIMER_VIRTUAL, ...) is functional])\n      ;;\n  esac\nfi\n\n\nAC_CACHE_SAVE\n\ndnl GMP tests\nAC_LIB_HAVE_LINKFLAGS([gmp],\n  [],\n  [#include <gmp.h>],\n  [mpz_import (0, 0, 0, 0, 0, 0, 0);])\n\nif test \"x$HAVE_LIBGMP\" != \"xyes\"; then\n  AC_MSG_ERROR([GNU MP 4.1 or greater not found, see README])\nfi\n\ndnl `mpz_inits' and `mpz_clears' appeared in GMP 5.0.0.\nsave_CPPFLAGS=\"$CPPFLAGS\"\nif test \"x$LIBGMP_PREFIX\" != \"x\"; then\n   CPPFLAGS=\"-I$LIBGMP_PREFIX $CPPFLAGS\"\nfi\nAC_CHECK_DECLS([mpz_inits], [], [], [[#include <gmp.h>]])\nCPPFLAGS=\"$save_CPPFLAGS\"\n\ndnl GNU libunistring is checked for by Gnulib's `libunistring' module.\nif test \"x$LTLIBUNISTRING\" = \"x\"; then\n  AC_MSG_ERROR([GNU libunistring is required, please install it.])\nfi\n\ndnl Sloppy check to make sure people aren't trying to use too-old libunistring.\ncase \"$LIBUNISTRING_VERSION\" in\n  0.9.0 | 0.9.1 | 0.9.2 )\n  AC_MSG_ERROR([libunistring too old.  Please install a recent libunistring (>= 0.9.3).])\n  ;;\nesac\n\nGUILE_LIBUNISTRING_WITH_ICONV_SUPPORT\nif test \"x$ac_cv_libunistring_with_iconv_support\" != \"xyes\"; then\n  AC_MSG_ERROR([No iconv support.  Please recompile libunistring with iconv enabled.])\nfi\n\ndnl Libffi is needed to compile Guile's foreign function interface, but its\ndnl interface isn't exposed in Guile's API.\nPKG_CHECK_MODULES(LIBFFI, libffi)\nAC_SUBST(LIBFFI_CFLAGS)\nAC_SUBST(LIBFFI_LIBS)\n\ndnl figure out approriate ffi type for size_t\nAC_CHECK_SIZEOF(size_t)\nAC_CHECK_SIZEOF(ssize_t)\nffi_size_type=uint$(($ac_cv_sizeof_size_t*8))\nffi_ssize_type=sint$(($ac_cv_sizeof_ssize_t*8))\nAC_DEFINE_UNQUOTED([ffi_type_size_t], ffi_type_${ffi_size_type}, \n\t\t   [ffi type for size_t])\nAC_DEFINE_UNQUOTED([ffi_type_ssize_t], ffi_type_${ffi_ssize_type}, \n\t\t   [ffi type for ssize_t])\n\ndnl i18n tests\n#AC_CHECK_HEADERS([libintl.h])\n#AC_CHECK_FUNCS(gettext)\n#if test $ac_cv_func_gettext = no; then\n#   AC_CHECK_LIB(intl, gettext)\n#fi\n#AC_CHECK_FUNCS([bindtextdomain textdomain])\nAM_GNU_GETTEXT([external], [need-ngettext])\n\n### Some systems don't declare some functions.  On such systems, we\n### need to at least provide our own K&R-style declarations.\n\n### GUILE_FUNC_DECLARED(function, headerfile)\n\n### Check for a declaration of FUNCTION in HEADERFILE; if it is\n### not there, #define MISSING_FUNCTION_DECL.\nAC_DEFUN([GUILE_FUNC_DECLARED], [\n  AC_CACHE_CHECK(for $1 declaration, guile_cv_func_$1_declared,\n    AC_EGREP_HEADER($1, $2,\n\t\t    guile_cv_func_$1_declared=yes,\n\t\t    guile_cv_func_$1_declared=no))\n  if test [x$guile_cv_func_]$1[_declared] = xno; then\n    AC_DEFINE([MISSING_]translit($1, [a-z], [A-Z])[_DECL], 1,\n      [Define if the operating system supplies $1 without declaring it.])\n  fi\n])\n\nGUILE_FUNC_DECLARED(sleep, unistd.h)\nGUILE_FUNC_DECLARED(usleep, unistd.h)\n\nAC_CHECK_DECLS([getlogin, alarm])\n\nAC_CHECK_DECLS([strptime],,,\n[#define _GNU_SOURCE /* ask glibc to give strptime prototype */\n#include <time.h>])\n\n### On some systems usleep has no return value.  If it does have one,\n### we'd like to return it; otherwise, we'll fake it.\nAC_CACHE_CHECK([return type of usleep], guile_cv_func_usleep_return_type,\n  [AC_EGREP_HEADER(changequote(<, >)<void[ \t]+usleep>changequote([, ]),\n                   unistd.h,\n\t\t   [guile_cv_func_usleep_return_type=void],\n\t\t   [guile_cv_func_usleep_return_type=int])])\ncase \"$guile_cv_func_usleep_return_type\" in\n  \"void\" )\n    AC_DEFINE([USLEEP_RETURNS_VOID], 1,\n      [Define if the system headers declare usleep to return void.])\n  ;;\nesac\n\nAC_CHECK_HEADER(sys/un.h, have_sys_un_h=1)\nif test -n \"$have_sys_un_h\" ; then\n  AC_DEFINE([HAVE_UNIX_DOMAIN_SOCKETS], 1,\n    [Define if the system supports Unix-domain (file-domain) sockets.])\nfi\n\nAC_CHECK_FUNCS(getrlimit setrlimit)\n\nAC_CHECK_FUNCS(socketpair getgroups setgroups setpwent pause tzset)\n\nAC_CHECK_FUNCS(sethostent   gethostent   endhostent   dnl\n               setnetent    getnetent    endnetent    dnl\n               setprotoent  getprotoent  endprotoent  dnl\n               setservent   getservent   endservent   dnl\n               getnetbyaddr getnetbyname dnl\n\t       inet_lnaof inet_makeaddr inet_netof hstrerror)\n\nAC_CHECK_MEMBERS([struct sockaddr_in.sin_len],,,\n[#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#include <netinet/in.h>])\n\nAC_MSG_CHECKING(for __libc_stack_end)\nAC_CACHE_VAL(guile_cv_have_libc_stack_end,\n[AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <stdio.h>\nextern char *__libc_stack_end;]],\n   [[printf(\"%p\", (char*) __libc_stack_end);]])],\n   [guile_cv_have_libc_stack_end=yes],\n   [guile_cv_have_libc_stack_end=no])])\nAC_MSG_RESULT($guile_cv_have_libc_stack_end)\n\nif test $guile_cv_have_libc_stack_end = yes; then\n  AC_DEFINE([HAVE_LIBC_STACK_END], 1,\n           [Define if you have the __libc_stack_end variable.])\nfi\n\ndnl Some systems do not declare this.  Some systems do declare it, as a\ndnl macro.  With cygwin it may be in a DLL.\n\nAC_MSG_CHECKING(whether netdb.h declares h_errno)\nAC_CACHE_VAL(guile_cv_have_h_errno,\n  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <netdb.h>]],\n                                      [[int a = h_errno;]])],\n  [guile_cv_have_h_errno=yes],\n  [guile_cv_have_h_errno=no])])\nAC_MSG_RESULT($guile_cv_have_h_errno)\nif test $guile_cv_have_h_errno = yes; then\n  AC_DEFINE([HAVE_H_ERRNO], 1, [Define if h_errno is declared in netdb.h.])\nfi\n\nAC_MSG_CHECKING(whether uint32_t is defined)\nAC_CACHE_VAL(guile_cv_have_uint32_t,\n  [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n\t\t   #if HAVE_STDINT_H\n\t\t   #include <stdint.h>\n                   #endif\n\t\t   #ifndef HAVE_NETDB_H\n\t           #include <netdb.h>\n\t\t   #endif]],\n\t\t   [[uint32_t a;]])],\n\t\t   [guile_cv_have_uint32_t=yes],\n\t\t   [guile_cv_have_uint32_t=no])])\nAC_MSG_RESULT($guile_cv_have_uint32_t)\nif test $guile_cv_have_uint32_t = yes; then\n  AC_DEFINE([HAVE_UINT32_T], 1,\n    [Define if uint32_t typedef is defined when netdb.h is include.])\nfi\n\nAC_MSG_CHECKING(for working IPv6 support)\nAC_CACHE_VAL(guile_cv_have_ipv6,\n[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#include <netinet/in.h>\n#include <sys/socket.h>]],\n[[struct sockaddr_in6 a;  a.sin6_family = AF_INET6;]])],\n[guile_cv_have_ipv6=yes],\n[guile_cv_have_ipv6=no])])\nAC_MSG_RESULT($guile_cv_have_ipv6)\nif test $guile_cv_have_ipv6 = yes; then\n  AC_DEFINE([HAVE_IPV6], 1, [Define if you want support for IPv6.])\nfi\n\n# included in rfc2553 but not in older implementations, e.g., glibc 2.1.3.\nAC_MSG_CHECKING(whether sockaddr_in6 has sin6_scope_id)\nAC_CACHE_VAL(guile_cv_have_sin6_scope_id,\n[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#include <netinet/in.h>]],\n[[struct sockaddr_in6 sok;  sok.sin6_scope_id = 0;]])],\n[guile_cv_have_sin6_scope_id=yes],\n[guile_cv_have_sin6_scope_id=no])])\nAC_MSG_RESULT($guile_cv_have_sin6_scope_id)\nif test $guile_cv_have_sin6_scope_id = yes; then\n  AC_DEFINE([HAVE_SIN6_SCOPE_ID], 1,\n    [Define this if your IPv6 has sin6_scope_id in sockaddr_in6 struct.])\nfi\n\n# struct sockaddr_in6 field sin_len is only present on BSD systems\nAC_CHECK_MEMBERS([struct sockaddr_in6.sin6_len],,,\n[#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#include <netinet/in.h>])\n\nAC_MSG_CHECKING(whether localtime caches TZ)\nAC_CACHE_VAL(guile_cv_localtime_cache,\n[if test x$ac_cv_func_tzset = xyes; then\nAC_RUN_IFELSE([AC_LANG_SOURCE([[#include <time.h>\n#if STDC_HEADERS\n# include <stdlib.h>\n#endif\nextern char **environ;\nunset_TZ ()\n{\n  char **from, **to;\n  for (to = from = environ; (*to = *from); from++)\n    if (! (to[0][0] == 'T' && to[0][1] == 'Z' && to[0][2] == '='))\n      to++;\n}\nchar TZ_GMT0[] = \"TZ=GMT0\";\nchar TZ_PST8[] = \"TZ=PST8\";\nmain()\n{\n  time_t now = time ((time_t *) 0);\n  int hour_GMT0, hour_unset;\n  if (putenv (TZ_GMT0) != 0)\n    exit (1);\n  hour_GMT0 = localtime (&now)->tm_hour;\n  unset_TZ ();\n  hour_unset = localtime (&now)->tm_hour;\n  if (putenv (TZ_PST8) != 0)\n    exit (1);\n  if (localtime (&now)->tm_hour == hour_GMT0)\n    exit (1);\n  unset_TZ ();\n  if (localtime (&now)->tm_hour != hour_unset)\n    exit (1);\n  exit (0);\n}]])],\n[guile_cv_localtime_cache=no],\n[guile_cv_localtime_cache=yes],\n[# If we have tzset, assume the worst when cross-compiling.\nguile_cv_localtime_cache=yes])\nelse\n        # If we lack tzset, report that localtime does not cache TZ,\n        # since we can't invalidate the cache if we don't have tzset.\n        guile_cv_localtime_cache=no\nfi])dnl\nAC_MSG_RESULT($guile_cv_localtime_cache)\nif test $guile_cv_localtime_cache = yes; then\n  AC_DEFINE([LOCALTIME_CACHE], 1, [Define if localtime caches the TZ setting.])\nfi\n\nif test \"$enable_regex\" = yes; then\n   AC_LIBOBJ([regex-posix])\n   AC_DEFINE([ENABLE_REGEX], 1, [Define when regex support is enabled.])\nfi\n\nAC_REPLACE_FUNCS([strerror memmove])\n\n# Reasons for testing:\n#   asinh, acosh, atanh, trunc - C99 standard, generally not available on\n#                                older systems\n#   sincos - GLIBC extension\n#   __sincos - APPLE extension\n#\nAC_CHECK_FUNCS(asinh acosh atanh copysign finite sincos __sincos trunc)\n\n# C99 specifies isinf and isnan as macros.\n# HP-UX provides only macros, no functions.\n# glibc 2.3.2 provides both macros and functions.\n# IRIX 6.5 and Solaris 8 only provide functions.\n#\n# The following tests detect isinf and isnan either as functions or as\n# macros from <math.h>.  Plain AC_CHECK_FUNCS is insufficient, it doesn't\n# use <math.h> so doesn't detect on macro-only systems like HP-UX.\n#\nAC_MSG_CHECKING([for isinf])\nAC_LINK_IFELSE([AC_LANG_SOURCE(\n[[#include <math.h>\nvolatile double x = 0.0;\nint main () { return (isinf(x) != 0); }]])],\n  [AC_MSG_RESULT([yes])\n   AC_DEFINE([HAVE_ISINF], 1,\n             [Define to 1 if you have the `isinf' macro or function.])],\n  [AC_MSG_RESULT([no])])\nAC_MSG_CHECKING([for isnan])\nAC_LINK_IFELSE([AC_LANG_SOURCE([[\n#include <math.h>\nvolatile double x = 0.0;\nint main () { return (isnan(x) != 0); }]])],\n  [AC_MSG_RESULT([yes])\n   AC_DEFINE([HAVE_ISNAN], 1,\n             [Define to 1 if you have the `isnan' macro or function.])],\n  [AC_MSG_RESULT([no])])\n\n# Reasons for checking:\n#\n#     st_rdev\n#     st_blksize\n#     st_blocks   not in mingw\n#     tm_gmtoff   BSD+GNU, not in C99\n#\n# Note AC_STRUCT_ST_BLOCKS is not used here because we don't want the\n# AC_LIBOBJ(fileblocks) replacement which that macro gives.\n#\nAC_CHECK_MEMBERS([struct stat.st_rdev, struct stat.st_blksize, struct stat.st_blocks, struct stat.st_atim, struct stat.st_mtim, struct stat.st_ctim],,,\n                 [#define _GNU_SOURCE\nAC_INCLUDES_DEFAULT\n])\n\nAC_STRUCT_TIMEZONE\nAC_CHECK_MEMBERS([struct tm.tm_gmtoff],,,\n[#include <time.h>\n#ifdef TIME_WITH_SYS_TIME\n# include <sys/time.h>\n# include <time.h>\n#else\n# if HAVE_SYS_TIME_H\n#  include <sys/time.h>\n# else\n#  include <time.h>\n# endif\n#endif\n])\nGUILE_STRUCT_UTIMBUF\n\n\n#--------------------------------------------------------------------\n#\n# What values do the iconv error handlers have?\n#\n# The only place that we need iconv in our public interfaces is for\n# the error handlers, which are just ints.  So we weaken our\n# dependency by looking up those values at configure-time.\n#--------------------------------------------------------------------\nGUILE_UNISTRING_ICONVEH_VALUES\n\n#--------------------------------------------------------------------\n#\n# Which way does the stack grow?\n#\n# Following code comes from Autoconf 2.69's internal _AC_LIBOBJ_ALLOCA\n# macro (/usr/share/autoconf/autoconf/functions.m4).  Gnulib has\n# very similar code, so in future we could look at using that.\n#\n# An important detail is that the code involves find_stack_direction\n# calling _itself_ - which means that find_stack_direction (or at\n# least the second find_stack_direction() call) cannot be inlined.\n# If the code could be inlined, that might cause the test to give\n# an incorrect answer.\n#--------------------------------------------------------------------\n\nSCM_I_GSC_STACK_GROWS_UP=0\nAC_RUN_IFELSE([AC_LANG_SOURCE(\n[AC_INCLUDES_DEFAULT\nint\nfind_stack_direction (int *addr, int depth)\n{\n  int dir, dummy = 0;\n  if (! addr)\n    addr = &dummy;\n  *addr = addr < &dummy ? 1 : addr == &dummy ? 0 : -1;\n  dir = depth ? find_stack_direction (addr, depth - 1) : 0;\n  return dir + dummy;\n}\n\nint\nmain (int argc, char **argv)\n{\n  return find_stack_direction (0, argc + !argv + 20) < 0;\n}])],\n\t       [SCM_I_GSC_STACK_GROWS_UP=1],\n\t       [],\n\t       [AC_MSG_WARN(Guessing that stack grows down -- see scmconfig.h)])\n\n#--------------------------------------------------------------------\n#\n# Boehm's GC library\n#\n#--------------------------------------------------------------------\nAC_MSG_CHECKING(for which bdw-gc pkg-config file to use)\nAC_ARG_WITH(bdw_gc, [  --with-bdw-gc=PKG       name of BDW-GC pkg-config file],\n            [bdw_gc=\"$withval\"], [bdw_gc=bdw-gc])\nAC_MSG_RESULT($bdw_gc)\nPKG_CHECK_MODULES([BDW_GC], [$bdw_gc >= 7.2])\n\nsave_LIBS=\"$LIBS\"\nLIBS=\"$BDW_GC_LIBS $LIBS\"\nCFLAGS=\"$BDW_GC_CFLAGS $CFLAGS\"\n\n# Functions that might not be defined, depending on configuration.\nAC_CHECK_FUNCS([GC_pthread_exit GC_pthread_cancel GC_pthread_sigmask])\n\n# Functions from GC 7.3.\nAC_CHECK_FUNCS([GC_move_disappearing_link GC_is_heap_ptr])\n\nLIBS=\"$save_LIBS\"\n\n\nAC_CHECK_SIZEOF(float)\nif test \"$ac_cv_sizeof_float\" -le \"$ac_cv_sizeof_long\"; then\n    AC_DEFINE([SCM_SINGLES], 1, \n              [Define this if floats are the same size as longs.])\nfi\n\nAC_MSG_CHECKING(for struct linger)\nAC_CACHE_VAL(scm_cv_struct_linger,\n\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/socket.h>]],\n\t                  [[struct linger lgr;  lgr.l_linger = 100]])],\n\t\t\t  [scm_cv_struct_linger=\"yes\"],\n\t\t\t  [scm_cv_struct_linger=\"no\"]))\nAC_MSG_RESULT($scm_cv_struct_linger)\nif test $scm_cv_struct_linger = yes; then\n\tAC_DEFINE([HAVE_STRUCT_LINGER], 1,\n          [Define this if your system defines struct linger, for use with the\n           getsockopt and setsockopt system calls.])\nfi\n\n\ndnl Check for `struct timespec', for the sake of `gen-scmconfig'.  When\ndnl building Guile, we always have it, thanks to Gnulib; but scmconfig.h\ndnl must tell whether the system has it.\ndnl\ndnl On MinGW, struct timespec is in <pthread.h>.\nAC_MSG_CHECKING(for struct timespec)\nAC_CACHE_VAL(scm_cv_struct_timespec,\n\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <time.h>\n#if HAVE_PTHREAD_H\n#include <pthread.h>\n#endif]], [[struct timespec t;  t.tv_nsec = 100]])],\n          [scm_cv_struct_timespec=\"yes\"],\n          [scm_cv_struct_timespec=\"no\"]))\nAC_MSG_RESULT($scm_cv_struct_timespec)\nif test $scm_cv_struct_timespec = yes; then\n  dnl Don't call it `HAVE_STRUCT_TIMESPEC' because pthread-win32's\n  dnl <pthread.h> checks whether that macro is defined.\n  AC_DEFINE([HAVE_SYSTEM_STRUCT_TIMESPEC], 1,\n    [Define this if your system defines struct timespec via either <time.h> or <pthread.h>.])\nfi\n\n#--------------------------------------------------------------------\n#\n# Flags for thread support\n#\n#--------------------------------------------------------------------\n\nSCM_I_GSC_USE_PTHREAD_THREADS=0\nSCM_I_GSC_USE_NULL_THREADS=0\nAC_SUBST([SCM_I_GSC_USE_PTHREAD_THREADS])\nAC_SUBST([SCM_I_GSC_USE_NULL_THREADS])\n\n### What thread package has the user asked for?\nAC_ARG_WITH(threads, [  --with-threads          thread interface],\n            , with_threads=yes)\n\nAC_SUBST(SCM_I_GSC_NEED_BRACES_ON_PTHREAD_ONCE_INIT, 0)\nAC_SUBST(SCM_I_GSC_NEED_BRACES_ON_PTHREAD_MUTEX_INITIALIZER, 0)\n\ncase \"$with_threads\" in\n  \"yes\" | \"pthread\" | \"pthreads\" | \"pthread-threads\" | \"\")\n\n    build_pthread_support=\"yes\"\n\n    ACX_PTHREAD([CC=\"$PTHREAD_CC\"\n       LIBS=\"$PTHREAD_LIBS $LIBS\"\n       SCM_I_GSC_USE_PTHREAD_THREADS=1\n       with_threads=\"pthreads\"],\n      [with_threads=\"null\"\n       build_pthread_support=\"no\"])\n\n    old_CFLAGS=\"$CFLAGS\"\n    CFLAGS=\"$PTHREAD_CFLAGS $CFLAGS\"\n\n    # Reasons for testing:\n    #     pthread_getattr_np - \"np\" meaning \"non portable\" says it\n    #         all; not present on MacOS X or Solaris 10\n    #     pthread_get_stackaddr_np - \"np\" meaning \"non portable\" says it\n    #         all; specific to MacOS X\n    #     pthread_attr_get_np - \"np\" meaning \"non portable\" says it\n    #         all; specific to FreeBSD\n    #     pthread_sigmask - not available on mingw\n    #     pthread_cancel - not available on Android (Bionic libc)\n    #\n    AC_CHECK_FUNCS([pthread_attr_getstack pthread_getattr_np\t\t\\\n      pthread_get_stackaddr_np pthread_attr_get_np pthread_sigmask\t\\\n      pthread_cancel])\n\n    # On past versions of Solaris, believe 8 through 10 at least, you\n    # had to write \"pthread_once_t foo = { PTHREAD_ONCE_INIT };\".\n    # This is contrary to POSIX:\n    # http://www.opengroup.org/onlinepubs/000095399/functions/pthread_once.html\n    # Check here if this style is required.\n    #\n    # glibc (2.3.6 at least) works both with or without braces, so the\n    # test checks whether it works without.\n    #\n\n    if test \"$GCC\" = \"yes\"; then\n      # Since GCC only issues a warning for missing braces, so we need\n      # `-Werror' to catch it.\n      CFLAGS=\"-Werror -Wmissing-braces $CFLAGS\"\n    fi\n\n    AC_CACHE_CHECK([whether PTHREAD_ONCE_INIT needs braces],\n      guile_cv_need_braces_on_pthread_once_init,\n      [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>\n         pthread_once_t foo = PTHREAD_ONCE_INIT;]])],\n        [guile_cv_need_braces_on_pthread_once_init=no],\n        [guile_cv_need_braces_on_pthread_once_init=yes])])\n    if test \"$guile_cv_need_braces_on_pthread_once_init\" = yes; then\n      SCM_I_GSC_NEED_BRACES_ON_PTHREAD_ONCE_INIT=1\n    fi\n\n    # Same problem with `PTHREAD_MUTEX_INITIALIZER', e.g., on IRIX\n    # 6.5.30m with GCC 3.3.\n    AC_CACHE_CHECK([whether PTHREAD_MUTEX_INITIALIZER needs braces],\n      guile_cv_need_braces_on_pthread_mutex_initializer,\n      [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>\n         pthread_mutex_t foo = PTHREAD_MUTEX_INITIALIZER;]])],\n        [guile_cv_need_braces_on_pthread_mutex_initializer=no],\n        [guile_cv_need_braces_on_pthread_mutex_initializer=yes])])\n    if test \"$guile_cv_need_braces_on_pthread_mutex_initializer\" = yes; then\n      SCM_I_GSC_NEED_BRACES_ON_PTHREAD_MUTEX_INITIALIZER=1\n    fi\n\n    CFLAGS=\"$old_CFLAGS\"\n\n    # On Solaris, sched_yield lives in -lrt.\n    AC_SEARCH_LIBS(sched_yield, rt)\n    \n  ;;\nesac\n\ncase \"$with_threads\" in\n  \"pthreads\")\n  ;;\n  \"no\" | \"null\")\n    SCM_I_GSC_USE_NULL_THREADS=1\n    SCM_I_GSC_HAVE_THREAD_STORAGE_CLASS=0\n    with_threads=\"null-threads\"\n  ;;\n  * )\n    AC_MSG_ERROR(invalid value for --with-threads: $with_threads)\n  ;;\nesac\n\nAC_MSG_CHECKING(what kind of threads to support)\nAC_MSG_RESULT($with_threads)\n\nAM_CONDITIONAL([BUILD_PTHREAD_SUPPORT],\n  [test \"x$build_pthread_support\" = \"xyes\"])\n\n\nif test \"$with_threads\" = pthreads; then\n\ndnl Normally Gnulib's 'threadlib' module would define this macro, but\ndnl since we don't use it, define it by ourselves.\nAC_DEFINE([USE_POSIX_THREADS], [1],\n  [Define to let Gnulib modules know that we use POSIX threads.])\n\nAC_MSG_CHECKING([whether pthread_attr_getstack works for the main thread])\nold_CFLAGS=\"$CFLAGS\"\nCFLAGS=\"$PTHREAD_CFLAGS $CFLAGS\"\nif test \"$cross_compiling\" = \"no\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[\n  #if HAVE_PTHREAD_ATTR_GETSTACK\n  #include <pthread.h>\n\n  int main ()\n  {\n    pthread_attr_t attr;\n    void *start, *end;\n    size_t size;\n\n    pthread_getattr_np (pthread_self (), &attr);\n    pthread_attr_getstack (&attr, &start, &size);\n    end = (char *)start + size;\n\n    if ((void *)&attr < start || (void *)&attr >= end)\n      return 1;\n    else\n      return 0;\n  }\n  #else\n  int main ()\n  {\n    return 1;\n  }\n  #endif\n  ]])],\n  [works=yes\n   AC_DEFINE([PTHREAD_ATTR_GETSTACK_WORKS], [1], [Define when pthread_att_get_stack works for the main thread])],\n  [works=no],\n  [])\nelse\n  works=\"assuming it doesn't\"\nfi\nCFLAGS=\"$old_CFLAGS\"\nAC_MSG_RESULT($works)\n\nGUILE_THREAD_LOCAL_STORAGE\n\nfi # with_threads=pthreads\n\n\n## Cross building\t\nif test \"$cross_compiling\" = \"yes\"; then\n  AC_MSG_CHECKING(cc for build)\n  ## /usr/bin/cc still uses wrong assembler\n  ## CC_FOR_BUILD=\"${CC_FOR_BUILD-/usr/bincc}\"\n  CC_FOR_BUILD=\"${CC_FOR_BUILD-PATH=/usr/bin:$PATH cc}\"\nelse\n  CC_FOR_BUILD=\"${CC_FOR_BUILD-$CC}\"\nfi   \n     \n## AC_MSG_CHECKING(\"if we are cross compiling\")\n## AC_MSG_RESULT($cross_compiling)\nif test \"$cross_compiling\" = \"yes\"; then\n   AC_MSG_RESULT($CC_FOR_BUILD)\nfi\n\n## No need as yet to be more elaborate\nCCLD_FOR_BUILD=\"$CC_FOR_BUILD\"\n\nAC_SUBST(cross_compiling)\nAC_ARG_VAR(CC_FOR_BUILD,[build system C compiler])\nAC_SUBST(CCLD_FOR_BUILD)\n\t\n## libtool erroneously calls CC_FOR_BUILD HOST_CC;\n## --HOST is the platform that PACKAGE is compiled for.\nHOST_CC=\"$CC_FOR_BUILD\"\nAC_SUBST(HOST_CC)\n\nGUILE_CHECK_GUILE_FOR_BUILD\n  \t\t\t\n## If we're using GCC, add flags to reduce strictness of undefined\n## behavior, and ask for aggressive warnings.\nGCC_CFLAGS=\"\"\ncase \"$GCC\" in\n  yes )\n    ## We had -Wstrict-prototypes in here for a bit, but Guile does too\n    ## much stuff with generic function pointers for that to really be\n    ## less than exasperating.\n    ## -Wundef was removed because Gnulib prevented it (see\n    ## <http://thread.gmane.org/gmane.lisp.guile.bugs/5329>.)\n\n    ## Build with `-fno-strict-aliasing' and `-fwrapv' to prevent\n    ## miscompilation on some platforms.  See\n    ## <http://lists.gnu.org/archive/html/guile-devel/2012-01/msg00487.html>.\n\n    POTENTIAL_GCC_CFLAGS=\"-Wall -Wmissing-prototypes \\\n      -Wdeclaration-after-statement -Wpointer-arith \\\n      -Wswitch-enum -fno-strict-aliasing -fwrapv\"\n    # Do this here so we don't screw up any of the tests above that might\n    # not be \"warning free\"\n    if test \"${GUILE_ERROR_ON_WARNING}\" = yes\n    then\n\tPOTENTIAL_GCC_CFLAGS=\"${POTENTIAL_GCC_CFLAGS} -Werror\"\n\tenable_compile_warnings=no\n    fi\n\n    for flag in $POTENTIAL_GCC_CFLAGS\n    do\n\tgl_WARN_ADD([$flag], [GCC_CFLAGS])\n    done\n    ;;\nesac\n\nAC_SUBST(GCC_CFLAGS)\n\n# Check for GNU ld's \"-z relro\".\nGUILE_GNU_LD_RELRO\n\n\nLIBLOBJS=\"\"\nfor file in $LIBOBJS; do\n  file=`echo \"$file\" | sed 's,\\.[[^.]]*$,.lo,'`\n  LIBLOBJS=\"$LIBLOBJS libguile_${GUILE_EFFECTIVE_VERSION}_la-$file\"\ndone\n\n## We also need to create corresponding .doc and .x files\nEXTRA_DOT_DOC_FILES=\"`echo ${LIB@&t@OBJS} | sed 's,\\.[[^.]]* ,.doc ,g;s,\\.[[^.]]*$,.doc,'`\"\nEXTRA_DOT_X_FILES=\"`echo ${LIB@&t@OBJS} | sed 's,\\.[[^.]]* ,.x ,g;s,\\.[[^.]]*$,.x,'`\"\n\n# GNU Readline bindings.\nGUILE_READLINE\n\nAC_SUBST(GUILE_MAJOR_VERSION)\nAC_SUBST(GUILE_MINOR_VERSION)\nAC_SUBST(GUILE_MICRO_VERSION)\nAC_SUBST(GUILE_EFFECTIVE_VERSION)\nAC_SUBST(GUILE_VERSION)\n\n#######################################################################\n# library versioning\n\nAC_SUBST(LIBGUILE_INTERFACE_CURRENT)\nAC_SUBST(LIBGUILE_INTERFACE_REVISION)\nAC_SUBST(LIBGUILE_INTERFACE_AGE)\nAC_SUBST(LIBGUILE_INTERFACE)\n\nAC_SUBST(LIBGUILE_I18N_MAJOR)\nAC_SUBST(LIBGUILE_I18N_INTERFACE_CURRENT)\nAC_SUBST(LIBGUILE_I18N_INTERFACE_REVISION)\nAC_SUBST(LIBGUILE_I18N_INTERFACE_AGE)\nAC_SUBST(LIBGUILE_I18N_INTERFACE)\n\n\n#######################################################################\n\ndnl Tell guile-config what flags guile users should compile and link\ndnl with, keeping only `-I' flags from $CPPFLAGS.\nGUILE_CFLAGS=\"\"\nnext_is_includedir=false\nfor flag in $CPPFLAGS\ndo\n  if $next_is_includedir; then\n    GUILE_CFLAGS=\"$GUILE_CFLAGS -I $flag\"\n    next_is_includedir=false\n  else\n    case \"$flag\" in\n      -I)  next_is_includedir=true;;\n      -I*) GUILE_CFLAGS=\"$GUILE_CFLAGS $flag\";;\n      *)   ;;\n    esac\n  fi\ndone\n\nGUILE_CFLAGS=\"$GUILE_CFLAGS $PTHREAD_CFLAGS\"\nGUILE_LIBS=\"$LDFLAGS $LIBS\"\n\nAC_SUBST(GUILE_LIBS)\nAC_SUBST(GUILE_CFLAGS)\n\nAC_SUBST(AWK)\nAC_SUBST(LIBLOBJS)\nAC_SUBST(EXTRA_DOT_DOC_FILES)\nAC_SUBST(EXTRA_DOT_X_FILES)\n\ndnl See also top_builddir in info node: (libtool)AC_PROG_LIBTOOL\ntop_builddir_absolute=`pwd`\nAC_SUBST(top_builddir_absolute)\ntop_srcdir_absolute=`(cd $srcdir && pwd)`\nAC_SUBST(top_srcdir_absolute)\n\ndnl Add -I flag so that lib/glthread/lock.h finds <libguile/threads.h>.\nCPPFLAGS=\"-I$top_srcdir_absolute $CPPFLAGS\"\n\ndnl `sitedir' goes into libpath.h and the pkg-config file.\npkgdatadir=\"$datadir/$PACKAGE_TARNAME\"\nsitedir=\"$pkgdatadir/site/$GUILE_EFFECTIVE_VERSION\"\nAC_SUBST([sitedir])\n\n# Additional SCM_I_GSC definitions are above.\nAC_SUBST([SCM_I_GSC_GUILE_DEBUG])\nAC_SUBST([SCM_I_GSC_ENABLE_DEPRECATED])\nAC_SUBST([SCM_I_GSC_STACK_GROWS_UP])\nAC_SUBST([SCM_I_GSC_C_INLINE])\nAC_CONFIG_FILES([libguile/gen-scmconfig.h])\n\nAC_CONFIG_FILES([\n  Makefile\n  am/Makefile\n  lib/Makefile\n  benchmark-suite/Makefile\n  gc-benchmarks/Makefile\n  doc/Makefile\n  doc/r5rs/Makefile\n  doc/ref/Makefile\n  emacs/Makefile\n  examples/Makefile\n  libguile/Makefile\n  libguile/version.h\n  guile-readline/Makefile\n  test-suite/Makefile\n  test-suite/standalone/Makefile\n  test-suite/vm/Makefile\n  meta/Makefile\n  bootstrap/Makefile\n  module/Makefile\n  prebuilt/Makefile\n  prebuilt/x86_64-unknown-linux-gnu/Makefile\n  prebuilt/i686-pc-linux-gnu/Makefile\n  prebuilt/mips-unknown-linux-gnu/Makefile\n])\n\n\nGUILE_CONFIG_SCRIPT([check-guile])\nGUILE_CONFIG_SCRIPT([benchmark-guile])\nGUILE_CONFIG_SCRIPT([meta/guile])\nGUILE_CONFIG_SCRIPT([meta/build-env])\nGUILE_CONFIG_SCRIPT([meta/uninstalled-env])\nGUILE_CONFIG_SCRIPT([meta/gdb-uninstalled-guile])\nGUILE_CONFIG_SCRIPT([libguile/guile-snarf])\nGUILE_CONFIG_SCRIPT([libguile/guile-snarf-docs])\nGUILE_CONFIG_SCRIPT([test-suite/standalone/test-use-srfi])\nGUILE_CONFIG_SCRIPT([test-suite/standalone/test-fast-slot-ref])\n\nAC_OUTPUT\n\ndnl Local Variables:\ndnl comment-start: \"dnl \"\ndnl comment-end: \"\"\ndnl comment-start-skip: \"\\\\bdnl\\\\b\\\\s *\"\ndnl End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/meta/build-env.in": "#!/bin/sh\n\n#\tCopyright (C) 2003, 2006, 2008-2012, 2016, 2017 Free Software Foundation\n#\n#   This file is part of GNU Guile.\n#\n# This script is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as\n# published by the Free Software Foundation; either version 3 of the\n# License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n# 02110-1301 USA\n\n# Usage: build-env [ARGS]\n\n# This script arranges for the environment to support running Guile from\n# the build tree.  Unlike uninstalled-env, we clobber the environment so\n# as to avoid inheriting environment variables that could make Guile\n# load .scm, .go, or .so files from installed directories.\n\n# Example: build-env guile -c '(display \"hello\\n\")'\n# Example: ../../build-env ./guile-test-foo\n\ntop_srcdir=\"@top_srcdir_absolute@\"\ntop_builddir=\"@top_builddir_absolute@\"\n\n[ x\"$top_srcdir\"   = x -o ! -d \"$top_srcdir\" -o \\\n  x\"$top_builddir\" = x -o ! -d \"$top_builddir\" ] && {\n    echo $0: bad environment\n    echo top_srcdir=$top_srcdir\n    echo top_builddir=$top_builddir\n    exit 1\n}\n\n# When cross-compiling, let $GUILE_FOR_BUILD use its own .go files since\n# the ones that are being built may be incompatible ($GUILE_FOR_BUILD is\n# typically used to run `guild compile --target=$host'.)  Likewise,\n# $GUILE_FOR_BUILD must use its own source files when booting; for\n# instance, $srcdir/module/ice-9/boot-9.scm must not be in its search\n# path, because it would then end up using its C evaluator to run the\n# compiler.\nif test \"@cross_compiling@\" = \"no\"\nthen\n    GUILE_LOAD_PATH=\"${top_srcdir}/module:${top_srcdir}/guile-readline\"\n    if test \"${top_srcdir}\" != \"${top_builddir}\"; then\n        GUILE_LOAD_PATH=\"$GUILE_LOAD_PATH:${top_builddir}/module:${top_builddir}/guile-readline\"\n    fi\n    export GUILE_LOAD_PATH\n    GUILE_LOAD_COMPILED_PATH=\"${top_builddir}/module:${top_builddir}/bootstrap:${top_srcdir}/prebuilt/@SCM_PREBUILT_BINARIES@:${top_builddir}/guile-readline\"\n    export GUILE_LOAD_COMPILED_PATH\n\n    # Don't look in installed dirs for guile modules\n    if ( env | grep -v '^GUILE_SYSTEM_PATH=' > /dev/null ); then\n\tGUILE_SYSTEM_PATH=\n\texport GUILE_SYSTEM_PATH\n    fi\n    # Don't look in installed dirs for compiled guile modules\n    if ( env | grep -v '^GUILE_SYSTEM_COMPILED_PATH=' > /dev/null ); then\n\tGUILE_SYSTEM_COMPILED_PATH=\n\texport GUILE_SYSTEM_COMPILED_PATH\n    fi\n    # Don't look in installed dirs for dlopen-able modules\n    if ( env | grep -v '^GUILE_SYSTEM_EXTENSIONS_PATH=' > /dev/null ); then\n\tGUILE_SYSTEM_EXTENSIONS_PATH=\n\texport GUILE_SYSTEM_EXTENSIONS_PATH\n    fi\nfi\n\n# handle LTDL_LIBRARY_PATH (no clobber)\nfor dir in guile-readline libguile ; do\n    if test -z \"$LTDL_LIBRARY_PATH\"; then\n      LTDL_LIBRARY_PATH=\"${top_builddir}/${dir}\"\n    else\n      LTDL_LIBRARY_PATH=\"${top_builddir}/${dir}:${LTDL_LIBRARY_PATH}\"\n    fi\n    if test -z \"$DYLD_LIBRARY_PATH\"; then\n      DYLD_LIBRARY_PATH=\"${top_builddir}/${dir}/.libs\"\n    else\n      DYLD_LIBRARY_PATH=\"${top_builddir}/${dir}/.libs:${DYLD_LIBRARY_PATH}\"\n    fi\ndone\nexport LTDL_LIBRARY_PATH\nexport DYLD_LIBRARY_PATH\n\nif [ x\"$PKG_CONFIG_PATH\" = x ]\nthen\n    PKG_CONFIG_PATH=\"${top_builddir}/meta\"\nelse\n    PKG_CONFIG_PATH=\"${top_builddir}/meta:$PKG_CONFIG_PATH\"\nfi\nexport PKG_CONFIG_PATH\n\n# handle PATH (no clobber)\nPATH=\"${top_builddir}/libguile:${PATH}\"\nPATH=\"${top_srcdir}/meta:${PATH}\"\nif test \"x${top_srcdir}\" != \"x${top_builddir}\"; then\n  PATH=\"${top_builddir}/meta:${PATH}\"\nfi\nexport PATH\n\n# Define $GUILE, used by `guild'.\nif test \"@cross_compiling@\" = \"no\"\nthen\n  GUILE=${top_builddir}/libguile/guile@EXEEXT@\nelse\n  GUILE=\"@GUILE_FOR_BUILD@\"\nfi    \nexport GUILE\n  \nXDG_CACHE_HOME=${top_builddir}/cache\nexport XDG_CACHE_HOME\n\nexec \"$@\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/meta/uninstalled-env.in": "#!/bin/sh\n\n#\tCopyright (C) 2003, 2006, 2008, 2009, 2010, 2011, 2012, 2015, 2017 Free Software Foundation\n#\n#   This file is part of GUILE.\n#\n# This script is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as\n# published by the Free Software Foundation; either version 3 of the\n# License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n# 02110-1301 USA\n\n# NOTE: If you update this file, please update uninstalled.in as\n# well, if appropriate.\n\n# Usage: uninstalled-env [ARGS]\n\n# This script arranges for the environment to support running Guile\n# from the build tree.  The following env vars are modified (but not\n# clobbered): GUILE_LOAD_PATH, LTDL_LIBRARY_PATH, and PATH.\n\n# Example: uninstalled-env guile -c '(display \"hello\\n\")'\n# Example: ../../uninstalled-env ./guile-test-foo\n\n# config\nsubdirs_with_ltlibs=\"guile-readline libguile\"       # maintain me\n\n# env (set by configure)\ntop_srcdir=\"@top_srcdir_absolute@\"\ntop_builddir=\"@top_builddir_absolute@\"\n\n[ x\"$top_srcdir\"   = x -o ! -d \"$top_srcdir\" -o \\\n  x\"$top_builddir\" = x -o ! -d \"$top_builddir\" ] && {\n    echo $0: bad environment\n    echo top_srcdir=$top_srcdir\n    echo top_builddir=$top_builddir\n    exit 1\n}\n\n# When cross-compiling, let $GUILE_FOR_BUILD use its own .go files since\n# the ones that are being built may be incompatible ($GUILE_FOR_BUILD is\n# typically used to run `guild compile --target=$host'.)  Likewise,\n# $GUILE_FOR_BUILD must use its own source files when booting; for\n# instance, $srcdir/module/ice-9/boot-9.scm must not be in its search\n# path, because it would then end up using its C evaluator to run the\n# compiler.\nif test \"@cross_compiling@\" = \"no\"\nthen\n    if [ x\"$GUILE_LOAD_PATH\" = x ]\n    then\n\tGUILE_LOAD_PATH=\"${top_srcdir}/module:${top_srcdir}/guile-readline\"\n\tif test \"${top_srcdir}\" != \"${top_builddir}\"; then\n            GUILE_LOAD_PATH=\"$GUILE_LOAD_PATH:${top_builddir}/module:${top_builddir}/guile-readline\"\n\tfi\n    else\n\tfor d in \"/module\" \"/guile-readline\"\n\tdo\n            # This hair prevents double inclusion.\n            # The \":\" prevents prefix aliasing.\n\t    case x\"$GUILE_LOAD_PATH\" in\n\t\tx*${top_srcdir}${d}:*) ;;\n\t\tx*${top_srcdir}${d}) ;;\n\t\t*) GUILE_LOAD_PATH=\"${top_srcdir}${d}:$GUILE_LOAD_PATH\" ;;\n\t    esac\n\t    case x\"$GUILE_LOAD_PATH\" in\n\t\tx*${top_builddir}${d}:*) ;;\n\t\tx*${top_builddir}${d}) ;;\n\t\t*) GUILE_LOAD_PATH=\"${top_builddir}${d}:$GUILE_LOAD_PATH\" ;;\n\t    esac\n\tdone\n    fi\n    export GUILE_LOAD_PATH\n\n    for d in \"/prebuilt/@SCM_PREBUILT_BINARIES@\" \"/bootstrap\" \"/module\" \"/guile-readline\"\n    do\n        # This hair prevents double inclusion.\n        # The \":\" prevents prefix aliasing.\n        case x\"$GUILE_LOAD_COMPILED_PATH\" in\n            x) GUILE_LOAD_COMPILED_PATH=\"${top_builddir}${d}\" ;;\n     \t    x*${top_builddir}${d}:*) ;;\n     \t    x*${top_builddir}${d}) ;;\n\t    *) GUILE_LOAD_COMPILED_PATH=\"${top_builddir}${d}:$GUILE_LOAD_COMPILED_PATH\" ;;\n\tesac\n    done\n    export GUILE_LOAD_COMPILED_PATH\n\n    # Don't look in installed dirs for guile modules\n    if ( env | grep -v '^GUILE_SYSTEM_PATH=' > /dev/null ); then\n\tGUILE_SYSTEM_PATH=\n\texport GUILE_SYSTEM_PATH\n    fi\n    # Don't look in installed dirs for compiled guile modules\n    if ( env | grep -v '^GUILE_SYSTEM_COMPILED_PATH=' > /dev/null ); then\n\tGUILE_SYSTEM_COMPILED_PATH=\n\texport GUILE_SYSTEM_COMPILED_PATH\n    fi\n    # Don't look in installed dirs for dlopen-able modules\n    if ( env | grep -v '^GUILE_SYSTEM_EXTENSIONS_PATH=' > /dev/null ); then\n\tGUILE_SYSTEM_EXTENSIONS_PATH=\n\texport GUILE_SYSTEM_EXTENSIONS_PATH\n    fi\nfi\n\n# handle LTDL_LIBRARY_PATH (no clobber)\nfor dir in $subdirs_with_ltlibs ; do\n    if test -z \"$LTDL_LIBRARY_PATH\"; then\n      LTDL_LIBRARY_PATH=\"${top_builddir}/${dir}\"\n    else\n      LTDL_LIBRARY_PATH=\"${top_builddir}/${dir}:${LTDL_LIBRARY_PATH}\"\n    fi\n    if test -z \"$DYLD_LIBRARY_PATH\"; then\n      DYLD_LIBRARY_PATH=\"${top_builddir}/${dir}/.libs\"\n    else\n      DYLD_LIBRARY_PATH=\"${top_builddir}/${dir}/.libs:${DYLD_LIBRARY_PATH}\"\n    fi\ndone\nexport LTDL_LIBRARY_PATH\nexport DYLD_LIBRARY_PATH\n\nif [ x\"$PKG_CONFIG_PATH\" = x ]\nthen\n    PKG_CONFIG_PATH=\"${top_builddir}/meta\"\nelse\n    PKG_CONFIG_PATH=\"${top_builddir}/meta:$PKG_CONFIG_PATH\"\nfi\nexport PKG_CONFIG_PATH\n\n# handle PATH (no clobber)\nPATH=\"${top_builddir}/libguile:${PATH}\"\nPATH=\"${top_srcdir}/meta:${PATH}\"\nif test \"x${top_srcdir}\" != \"x${top_builddir}\"; then\n  PATH=\"${top_builddir}/meta:${PATH}\"\nfi\nexport PATH\n\n# Define $GUILE, used by `guild'.\nGUILE=\"${top_builddir}/meta/guile\"\nexport GUILE\n\nexec \"$@\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/m4/lib-link.m4": "# lib-link.m4 serial 26 (gettext-0.18.2)\ndnl Copyright (C) 2001-2017 Free Software Foundation, Inc.\ndnl This file is free software; the Free Software Foundation\ndnl gives unlimited permission to copy and/or distribute it,\ndnl with or without modifications, as long as this notice is preserved.\n\ndnl From Bruno Haible.\n\nAC_PREREQ([2.54])\n\ndnl AC_LIB_LINKFLAGS(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets and AC_SUBSTs the LIB${NAME} and LTLIB${NAME} variables and\ndnl augments the CPPFLAGS variable.\ndnl Sets and AC_SUBSTs the LIB${NAME}_PREFIX variable to nonempty if libname\ndnl was found in ${LIB${NAME}_PREFIX}/$acl_libdirstem.\nAC_DEFUN([AC_LIB_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  pushdef([Name],[m4_translit([$1],[./+-], [____])])\n  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],\n                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  AC_CACHE_CHECK([how to link with lib[]$1], [ac_cv_lib[]Name[]_libs], [\n    AC_LIB_LINKFLAGS_BODY([$1], [$2])\n    ac_cv_lib[]Name[]_libs=\"$LIB[]NAME\"\n    ac_cv_lib[]Name[]_ltlibs=\"$LTLIB[]NAME\"\n    ac_cv_lib[]Name[]_cppflags=\"$INC[]NAME\"\n    ac_cv_lib[]Name[]_prefix=\"$LIB[]NAME[]_PREFIX\"\n  ])\n  LIB[]NAME=\"$ac_cv_lib[]Name[]_libs\"\n  LTLIB[]NAME=\"$ac_cv_lib[]Name[]_ltlibs\"\n  INC[]NAME=\"$ac_cv_lib[]Name[]_cppflags\"\n  LIB[]NAME[]_PREFIX=\"$ac_cv_lib[]Name[]_prefix\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  AC_SUBST([LIB]NAME[_PREFIX])\n  dnl Also set HAVE_LIB[]NAME so that AC_LIB_HAVE_LINKFLAGS can reuse the\n  dnl results of this search when this library appears as a dependency.\n  HAVE_LIB[]NAME=yes\n  popdef([NAME])\n  popdef([Name])\n])\n\ndnl AC_LIB_HAVE_LINKFLAGS(name, dependencies, includes, testcode, [missing-message])\ndnl searches for libname and the libraries corresponding to explicit and\ndnl implicit dependencies, together with the specified include files and\ndnl the ability to compile and link the specified testcode. The missing-message\ndnl defaults to 'no' and may contain additional hints for the user.\ndnl If found, it sets and AC_SUBSTs HAVE_LIB${NAME}=yes and the LIB${NAME}\ndnl and LTLIB${NAME} variables and augments the CPPFLAGS variable, and\ndnl #defines HAVE_LIB${NAME} to 1. Otherwise, it sets and AC_SUBSTs\ndnl HAVE_LIB${NAME}=no and LIB${NAME} and LTLIB${NAME} to empty.\ndnl Sets and AC_SUBSTs the LIB${NAME}_PREFIX variable to nonempty if libname\ndnl was found in ${LIB${NAME}_PREFIX}/$acl_libdirstem.\nAC_DEFUN([AC_LIB_HAVE_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  pushdef([Name],[m4_translit([$1],[./+-], [____])])\n  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],\n                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n\n  dnl Search for lib[]Name and define LIB[]NAME, LTLIB[]NAME and INC[]NAME\n  dnl accordingly.\n  AC_LIB_LINKFLAGS_BODY([$1], [$2])\n\n  dnl Add $INC[]NAME to CPPFLAGS before performing the following checks,\n  dnl because if the user has installed lib[]Name and not disabled its use\n  dnl via --without-lib[]Name-prefix, he wants to use it.\n  ac_save_CPPFLAGS=\"$CPPFLAGS\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n\n  AC_CACHE_CHECK([for lib[]$1], [ac_cv_lib[]Name], [\n    ac_save_LIBS=\"$LIBS\"\n    dnl If $LIB[]NAME contains some -l options, add it to the end of LIBS,\n    dnl because these -l options might require -L options that are present in\n    dnl LIBS. -l options benefit only from the -L options listed before it.\n    dnl Otherwise, add it to the front of LIBS, because it may be a static\n    dnl library that depends on another static library that is present in LIBS.\n    dnl Static libraries benefit only from the static libraries listed after\n    dnl it.\n    case \" $LIB[]NAME\" in\n      *\" -l\"*) LIBS=\"$LIBS $LIB[]NAME\" ;;\n      *)       LIBS=\"$LIB[]NAME $LIBS\" ;;\n    esac\n    AC_LINK_IFELSE(\n      [AC_LANG_PROGRAM([[$3]], [[$4]])],\n      [ac_cv_lib[]Name=yes],\n      [ac_cv_lib[]Name='m4_if([$5], [], [no], [[$5]])'])\n    LIBS=\"$ac_save_LIBS\"\n  ])\n  if test \"$ac_cv_lib[]Name\" = yes; then\n    HAVE_LIB[]NAME=yes\n    AC_DEFINE([HAVE_LIB]NAME, 1, [Define if you have the lib][$1 library.])\n    AC_MSG_CHECKING([how to link with lib[]$1])\n    AC_MSG_RESULT([$LIB[]NAME])\n  else\n    HAVE_LIB[]NAME=no\n    dnl If $LIB[]NAME didn't lead to a usable library, we don't need\n    dnl $INC[]NAME either.\n    CPPFLAGS=\"$ac_save_CPPFLAGS\"\n    LIB[]NAME=\n    LTLIB[]NAME=\n    LIB[]NAME[]_PREFIX=\n  fi\n  AC_SUBST([HAVE_LIB]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  AC_SUBST([LIB]NAME[_PREFIX])\n  popdef([NAME])\n  popdef([Name])\n])\n\ndnl Determine the platform dependent parameters needed to use rpath:\ndnl   acl_libext,\ndnl   acl_shlibext,\ndnl   acl_libname_spec,\ndnl   acl_library_names_spec,\ndnl   acl_hardcode_libdir_flag_spec,\ndnl   acl_hardcode_libdir_separator,\ndnl   acl_hardcode_direct,\ndnl   acl_hardcode_minus_L.\nAC_DEFUN([AC_LIB_RPATH],\n[\n  dnl Tell automake >= 1.10 to complain if config.rpath is missing.\n  m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([config.rpath])])\n  AC_REQUIRE([AC_PROG_CC])                dnl we use $CC, $GCC, $LDFLAGS\n  AC_REQUIRE([AC_LIB_PROG_LD])            dnl we use $LD, $with_gnu_ld\n  AC_REQUIRE([AC_CANONICAL_HOST])         dnl we use $host\n  AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT]) dnl we use $ac_aux_dir\n  AC_CACHE_CHECK([for shared library run path origin], [acl_cv_rpath], [\n    CC=\"$CC\" GCC=\"$GCC\" LDFLAGS=\"$LDFLAGS\" LD=\"$LD\" with_gnu_ld=\"$with_gnu_ld\" \\\n    ${CONFIG_SHELL-/bin/sh} \"$ac_aux_dir/config.rpath\" \"$host\" > conftest.sh\n    . ./conftest.sh\n    rm -f ./conftest.sh\n    acl_cv_rpath=done\n  ])\n  wl=\"$acl_cv_wl\"\n  acl_libext=\"$acl_cv_libext\"\n  acl_shlibext=\"$acl_cv_shlibext\"\n  acl_libname_spec=\"$acl_cv_libname_spec\"\n  acl_library_names_spec=\"$acl_cv_library_names_spec\"\n  acl_hardcode_libdir_flag_spec=\"$acl_cv_hardcode_libdir_flag_spec\"\n  acl_hardcode_libdir_separator=\"$acl_cv_hardcode_libdir_separator\"\n  acl_hardcode_direct=\"$acl_cv_hardcode_direct\"\n  acl_hardcode_minus_L=\"$acl_cv_hardcode_minus_L\"\n  dnl Determine whether the user wants rpath handling at all.\n  AC_ARG_ENABLE([rpath],\n    [  --disable-rpath         do not hardcode runtime library paths],\n    :, enable_rpath=yes)\n])\n\ndnl AC_LIB_FROMPACKAGE(name, package)\ndnl declares that libname comes from the given package. The configure file\ndnl will then not have a --with-libname-prefix option but a\ndnl --with-package-prefix option. Several libraries can come from the same\ndnl package. This declaration must occur before an AC_LIB_LINKFLAGS or similar\ndnl macro call that searches for libname.\nAC_DEFUN([AC_LIB_FROMPACKAGE],\n[\n  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],\n                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  define([acl_frompackage_]NAME, [$2])\n  popdef([NAME])\n  pushdef([PACK],[$2])\n  pushdef([PACKUP],[m4_translit(PACK,[abcdefghijklmnopqrstuvwxyz./+-],\n                                     [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  define([acl_libsinpackage_]PACKUP,\n    m4_ifdef([acl_libsinpackage_]PACKUP, [m4_defn([acl_libsinpackage_]PACKUP)[, ]],)[lib$1])\n  popdef([PACKUP])\n  popdef([PACK])\n])\n\ndnl AC_LIB_LINKFLAGS_BODY(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets the LIB${NAME}, LTLIB${NAME} and INC${NAME} variables.\ndnl Also, sets the LIB${NAME}_PREFIX variable to nonempty if libname was found\ndnl in ${LIB${NAME}_PREFIX}/$acl_libdirstem.\nAC_DEFUN([AC_LIB_LINKFLAGS_BODY],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])\n  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],\n                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  pushdef([PACK],[m4_ifdef([acl_frompackage_]NAME, [acl_frompackage_]NAME, lib[$1])])\n  pushdef([PACKUP],[m4_translit(PACK,[abcdefghijklmnopqrstuvwxyz./+-],\n                                     [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  pushdef([PACKLIBS],[m4_ifdef([acl_frompackage_]NAME, [acl_libsinpackage_]PACKUP, lib[$1])])\n  dnl Autoconf >= 2.61 supports dots in --with options.\n  pushdef([P_A_C_K],[m4_if(m4_version_compare(m4_defn([m4_PACKAGE_VERSION]),[2.61]),[-1],[m4_translit(PACK,[.],[_])],PACK)])\n  dnl By default, look in $includedir and $libdir.\n  use_additional=yes\n  AC_LIB_WITH_FINAL_PREFIX([\n    eval additional_includedir=\\\"$includedir\\\"\n    eval additional_libdir=\\\"$libdir\\\"\n  ])\n  AC_ARG_WITH(P_A_C_K[-prefix],\n[[  --with-]]P_A_C_K[[-prefix[=DIR]  search for ]PACKLIBS[ in DIR/include and DIR/lib\n  --without-]]P_A_C_K[[-prefix     don't search for ]PACKLIBS[ in includedir and libdir]],\n[\n    if test \"X$withval\" = \"Xno\"; then\n      use_additional=no\n    else\n      if test \"X$withval\" = \"X\"; then\n        AC_LIB_WITH_FINAL_PREFIX([\n          eval additional_includedir=\\\"$includedir\\\"\n          eval additional_libdir=\\\"$libdir\\\"\n        ])\n      else\n        additional_includedir=\"$withval/include\"\n        additional_libdir=\"$withval/$acl_libdirstem\"\n        if test \"$acl_libdirstem2\" != \"$acl_libdirstem\" \\\n           && ! test -d \"$withval/$acl_libdirstem\"; then\n          additional_libdir=\"$withval/$acl_libdirstem2\"\n        fi\n      fi\n    fi\n])\n  dnl Search the library and its dependencies in $additional_libdir and\n  dnl $LDFLAGS. Using breadth-first-seach.\n  LIB[]NAME=\n  LTLIB[]NAME=\n  INC[]NAME=\n  LIB[]NAME[]_PREFIX=\n  dnl HAVE_LIB${NAME} is an indicator that LIB${NAME}, LTLIB${NAME} have been\n  dnl computed. So it has to be reset here.\n  HAVE_LIB[]NAME=\n  rpathdirs=\n  ltrpathdirs=\n  names_already_handled=\n  names_next_round='$1 $2'\n  while test -n \"$names_next_round\"; do\n    names_this_round=\"$names_next_round\"\n    names_next_round=\n    for name in $names_this_round; do\n      already_handled=\n      for n in $names_already_handled; do\n        if test \"$n\" = \"$name\"; then\n          already_handled=yes\n          break\n        fi\n      done\n      if test -z \"$already_handled\"; then\n        names_already_handled=\"$names_already_handled $name\"\n        dnl See if it was already located by an earlier AC_LIB_LINKFLAGS\n        dnl or AC_LIB_HAVE_LINKFLAGS call.\n        uppername=`echo \"$name\" | sed -e 'y|abcdefghijklmnopqrstuvwxyz./+-|ABCDEFGHIJKLMNOPQRSTUVWXYZ____|'`\n        eval value=\\\"\\$HAVE_LIB$uppername\\\"\n        if test -n \"$value\"; then\n          if test \"$value\" = yes; then\n            eval value=\\\"\\$LIB$uppername\\\"\n            test -z \"$value\" || LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$value\"\n            eval value=\\\"\\$LTLIB$uppername\\\"\n            test -z \"$value\" || LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$value\"\n          else\n            dnl An earlier call to AC_LIB_HAVE_LINKFLAGS has determined\n            dnl that this library doesn't exist. So just drop it.\n            :\n          fi\n        else\n          dnl Search the library lib$name in $additional_libdir and $LDFLAGS\n          dnl and the already constructed $LIBNAME/$LTLIBNAME.\n          found_dir=\n          found_la=\n          found_so=\n          found_a=\n          eval libname=\\\"$acl_libname_spec\\\"    # typically: libname=lib$name\n          if test -n \"$acl_shlibext\"; then\n            shrext=\".$acl_shlibext\"             # typically: shrext=.so\n          else\n            shrext=\n          fi\n          if test $use_additional = yes; then\n            dir=\"$additional_libdir\"\n            dnl The same code as in the loop below:\n            dnl First look for a shared library.\n            if test -n \"$acl_shlibext\"; then\n              if test -f \"$dir/$libname$shrext\"; then\n                found_dir=\"$dir\"\n                found_so=\"$dir/$libname$shrext\"\n              else\n                if test \"$acl_library_names_spec\" = '$libname$shrext$versuffix'; then\n                  ver=`(cd \"$dir\" && \\\n                        for f in \"$libname$shrext\".*; do echo \"$f\"; done \\\n                        | sed -e \"s,^$libname$shrext\\\\\\\\.,,\" \\\n                        | sort -t '.' -n -r -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 \\\n                        | sed 1q ) 2>/dev/null`\n                  if test -n \"$ver\" && test -f \"$dir/$libname$shrext.$ver\"; then\n                    found_dir=\"$dir\"\n                    found_so=\"$dir/$libname$shrext.$ver\"\n                  fi\n                else\n                  eval library_names=\\\"$acl_library_names_spec\\\"\n                  for f in $library_names; do\n                    if test -f \"$dir/$f\"; then\n                      found_dir=\"$dir\"\n                      found_so=\"$dir/$f\"\n                      break\n                    fi\n                  done\n                fi\n              fi\n            fi\n            dnl Then look for a static library.\n            if test \"X$found_dir\" = \"X\"; then\n              if test -f \"$dir/$libname.$acl_libext\"; then\n                found_dir=\"$dir\"\n                found_a=\"$dir/$libname.$acl_libext\"\n              fi\n            fi\n            if test \"X$found_dir\" != \"X\"; then\n              if test -f \"$dir/$libname.la\"; then\n                found_la=\"$dir/$libname.la\"\n              fi\n            fi\n          fi\n          if test \"X$found_dir\" = \"X\"; then\n            for x in $LDFLAGS $LTLIB[]NAME; do\n              AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n              case \"$x\" in\n                -L*)\n                  dir=`echo \"X$x\" | sed -e 's/^X-L//'`\n                  dnl First look for a shared library.\n                  if test -n \"$acl_shlibext\"; then\n                    if test -f \"$dir/$libname$shrext\"; then\n                      found_dir=\"$dir\"\n                      found_so=\"$dir/$libname$shrext\"\n                    else\n                      if test \"$acl_library_names_spec\" = '$libname$shrext$versuffix'; then\n                        ver=`(cd \"$dir\" && \\\n                              for f in \"$libname$shrext\".*; do echo \"$f\"; done \\\n                              | sed -e \"s,^$libname$shrext\\\\\\\\.,,\" \\\n                              | sort -t '.' -n -r -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 \\\n                              | sed 1q ) 2>/dev/null`\n                        if test -n \"$ver\" && test -f \"$dir/$libname$shrext.$ver\"; then\n                          found_dir=\"$dir\"\n                          found_so=\"$dir/$libname$shrext.$ver\"\n                        fi\n                      else\n                        eval library_names=\\\"$acl_library_names_spec\\\"\n                        for f in $library_names; do\n                          if test -f \"$dir/$f\"; then\n                            found_dir=\"$dir\"\n                            found_so=\"$dir/$f\"\n                            break\n                          fi\n                        done\n                      fi\n                    fi\n                  fi\n                  dnl Then look for a static library.\n                  if test \"X$found_dir\" = \"X\"; then\n                    if test -f \"$dir/$libname.$acl_libext\"; then\n                      found_dir=\"$dir\"\n                      found_a=\"$dir/$libname.$acl_libext\"\n                    fi\n                  fi\n                  if test \"X$found_dir\" != \"X\"; then\n                    if test -f \"$dir/$libname.la\"; then\n                      found_la=\"$dir/$libname.la\"\n                    fi\n                  fi\n                  ;;\n              esac\n              if test \"X$found_dir\" != \"X\"; then\n                break\n              fi\n            done\n          fi\n          if test \"X$found_dir\" != \"X\"; then\n            dnl Found the library.\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$found_dir -l$name\"\n            if test \"X$found_so\" != \"X\"; then\n              dnl Linking with a shared library. We attempt to hardcode its\n              dnl directory into the executable's runpath, unless it's the\n              dnl standard /usr/lib.\n              if test \"$enable_rpath\" = no \\\n                 || test \"X$found_dir\" = \"X/usr/$acl_libdirstem\" \\\n                 || test \"X$found_dir\" = \"X/usr/$acl_libdirstem2\"; then\n                dnl No hardcoding is needed.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n              else\n                dnl Use an explicit option to hardcode DIR into the resulting\n                dnl binary.\n                dnl Potentially add DIR to ltrpathdirs.\n                dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                haveit=\n                for x in $ltrpathdirs; do\n                  if test \"X$x\" = \"X$found_dir\"; then\n                    haveit=yes\n                    break\n                  fi\n                done\n                if test -z \"$haveit\"; then\n                  ltrpathdirs=\"$ltrpathdirs $found_dir\"\n                fi\n                dnl The hardcoding into $LIBNAME is system dependent.\n                if test \"$acl_hardcode_direct\" = yes; then\n                  dnl Using DIR/libNAME.so during linking hardcodes DIR into the\n                  dnl resulting binary.\n                  LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                else\n                  if test -n \"$acl_hardcode_libdir_flag_spec\" && test \"$acl_hardcode_minus_L\" = no; then\n                    dnl Use an explicit option to hardcode DIR into the resulting\n                    dnl binary.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    dnl Potentially add DIR to rpathdirs.\n                    dnl The rpathdirs will be appended to $LIBNAME at the end.\n                    haveit=\n                    for x in $rpathdirs; do\n                      if test \"X$x\" = \"X$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      rpathdirs=\"$rpathdirs $found_dir\"\n                    fi\n                  else\n                    dnl Rely on \"-L$found_dir\".\n                    dnl But don't add it if it's already contained in the LDFLAGS\n                    dnl or the already constructed $LIBNAME\n                    haveit=\n                    for x in $LDFLAGS $LIB[]NAME; do\n                      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                      if test \"X$x\" = \"X-L$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir\"\n                    fi\n                    if test \"$acl_hardcode_minus_L\" != no; then\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    else\n                      dnl We cannot use $acl_hardcode_runpath_var and LD_RUN_PATH\n                      dnl here, because this doesn't fit in flags passed to the\n                      dnl compiler. So give up. No hardcoding. This affects only\n                      dnl very old systems.\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n                    fi\n                  fi\n                fi\n              fi\n            else\n              if test \"X$found_a\" != \"X\"; then\n                dnl Linking with a static library.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_a\"\n              else\n                dnl We shouldn't come here, but anyway it's good to have a\n                dnl fallback.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir -l$name\"\n              fi\n            fi\n            dnl Assume the include files are nearby.\n            additional_includedir=\n            case \"$found_dir\" in\n              */$acl_libdirstem | */$acl_libdirstem/)\n                basedir=`echo \"X$found_dir\" | sed -e 's,^X,,' -e \"s,/$acl_libdirstem/\"'*$,,'`\n                if test \"$name\" = '$1'; then\n                  LIB[]NAME[]_PREFIX=\"$basedir\"\n                fi\n                additional_includedir=\"$basedir/include\"\n                ;;\n              */$acl_libdirstem2 | */$acl_libdirstem2/)\n                basedir=`echo \"X$found_dir\" | sed -e 's,^X,,' -e \"s,/$acl_libdirstem2/\"'*$,,'`\n                if test \"$name\" = '$1'; then\n                  LIB[]NAME[]_PREFIX=\"$basedir\"\n                fi\n                additional_includedir=\"$basedir/include\"\n                ;;\n            esac\n            if test \"X$additional_includedir\" != \"X\"; then\n              dnl Potentially add $additional_includedir to $INCNAME.\n              dnl But don't add it\n              dnl   1. if it's the standard /usr/include,\n              dnl   2. if it's /usr/local/include and we are using GCC on Linux,\n              dnl   3. if it's already present in $CPPFLAGS or the already\n              dnl      constructed $INCNAME,\n              dnl   4. if it doesn't exist as a directory.\n              if test \"X$additional_includedir\" != \"X/usr/include\"; then\n                haveit=\n                if test \"X$additional_includedir\" = \"X/usr/local/include\"; then\n                  if test -n \"$GCC\"; then\n                    case $host_os in\n                      linux* | gnu* | k*bsd*-gnu) haveit=yes;;\n                    esac\n                  fi\n                fi\n                if test -z \"$haveit\"; then\n                  for x in $CPPFLAGS $INC[]NAME; do\n                    AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                    if test \"X$x\" = \"X-I$additional_includedir\"; then\n                      haveit=yes\n                      break\n                    fi\n                  done\n                  if test -z \"$haveit\"; then\n                    if test -d \"$additional_includedir\"; then\n                      dnl Really add $additional_includedir to $INCNAME.\n                      INC[]NAME=\"${INC[]NAME}${INC[]NAME:+ }-I$additional_includedir\"\n                    fi\n                  fi\n                fi\n              fi\n            fi\n            dnl Look for dependencies.\n            if test -n \"$found_la\"; then\n              dnl Read the .la file. It defines the variables\n              dnl dlname, library_names, old_library, dependency_libs, current,\n              dnl age, revision, installed, dlopen, dlpreopen, libdir.\n              save_libdir=\"$libdir\"\n              case \"$found_la\" in\n                */* | *\\\\*) . \"$found_la\" ;;\n                *) . \"./$found_la\" ;;\n              esac\n              libdir=\"$save_libdir\"\n              dnl We use only dependency_libs.\n              for dep in $dependency_libs; do\n                case \"$dep\" in\n                  -L*)\n                    additional_libdir=`echo \"X$dep\" | sed -e 's/^X-L//'`\n                    dnl Potentially add $additional_libdir to $LIBNAME and $LTLIBNAME.\n                    dnl But don't add it\n                    dnl   1. if it's the standard /usr/lib,\n                    dnl   2. if it's /usr/local/lib and we are using GCC on Linux,\n                    dnl   3. if it's already present in $LDFLAGS or the already\n                    dnl      constructed $LIBNAME,\n                    dnl   4. if it doesn't exist as a directory.\n                    if test \"X$additional_libdir\" != \"X/usr/$acl_libdirstem\" \\\n                       && test \"X$additional_libdir\" != \"X/usr/$acl_libdirstem2\"; then\n                      haveit=\n                      if test \"X$additional_libdir\" = \"X/usr/local/$acl_libdirstem\" \\\n                         || test \"X$additional_libdir\" = \"X/usr/local/$acl_libdirstem2\"; then\n                        if test -n \"$GCC\"; then\n                          case $host_os in\n                            linux* | gnu* | k*bsd*-gnu) haveit=yes;;\n                          esac\n                        fi\n                      fi\n                      if test -z \"$haveit\"; then\n                        haveit=\n                        for x in $LDFLAGS $LIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LIBNAME.\n                            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                        haveit=\n                        for x in $LDFLAGS $LTLIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LTLIBNAME.\n                            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                      fi\n                    fi\n                    ;;\n                  -R*)\n                    dir=`echo \"X$dep\" | sed -e 's/^X-R//'`\n                    if test \"$enable_rpath\" != no; then\n                      dnl Potentially add DIR to rpathdirs.\n                      dnl The rpathdirs will be appended to $LIBNAME at the end.\n                      haveit=\n                      for x in $rpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        rpathdirs=\"$rpathdirs $dir\"\n                      fi\n                      dnl Potentially add DIR to ltrpathdirs.\n                      dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                      haveit=\n                      for x in $ltrpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        ltrpathdirs=\"$ltrpathdirs $dir\"\n                      fi\n                    fi\n                    ;;\n                  -l*)\n                    dnl Handle this in the next round.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's/^X-l//'`\n                    ;;\n                  *.la)\n                    dnl Handle this in the next round. Throw away the .la's\n                    dnl directory; it is already contained in a preceding -L\n                    dnl option.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's,^X.*/,,' -e 's,^lib,,' -e 's,\\.la$,,'`\n                    ;;\n                  *)\n                    dnl Most likely an immediate library name.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$dep\"\n                    LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$dep\"\n                    ;;\n                esac\n              done\n            fi\n          else\n            dnl Didn't find the library; assume it is in the system directories\n            dnl known to the linker and runtime loader. (All the system\n            dnl directories known to the linker should also be known to the\n            dnl runtime loader, otherwise the system is severely misconfigured.)\n            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-l$name\"\n          fi\n        fi\n      fi\n    done\n  done\n  if test \"X$rpathdirs\" != \"X\"; then\n    if test -n \"$acl_hardcode_libdir_separator\"; then\n      dnl Weird platform: only the last -rpath option counts, the user must\n      dnl pass all path elements in one option. We can arrange that for a\n      dnl single library, but not when more than one $LIBNAMEs are used.\n      alldirs=\n      for found_dir in $rpathdirs; do\n        alldirs=\"${alldirs}${alldirs:+$acl_hardcode_libdir_separator}$found_dir\"\n      done\n      dnl Note: acl_hardcode_libdir_flag_spec uses $libdir and $wl.\n      acl_save_libdir=\"$libdir\"\n      libdir=\"$alldirs\"\n      eval flag=\\\"$acl_hardcode_libdir_flag_spec\\\"\n      libdir=\"$acl_save_libdir\"\n      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n    else\n      dnl The -rpath options are cumulative.\n      for found_dir in $rpathdirs; do\n        acl_save_libdir=\"$libdir\"\n        libdir=\"$found_dir\"\n        eval flag=\\\"$acl_hardcode_libdir_flag_spec\\\"\n        libdir=\"$acl_save_libdir\"\n        LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n      done\n    fi\n  fi\n  if test \"X$ltrpathdirs\" != \"X\"; then\n    dnl When using libtool, the option that works for both libraries and\n    dnl executables is -R. The -R options are cumulative.\n    for found_dir in $ltrpathdirs; do\n      LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-R$found_dir\"\n    done\n  fi\n  popdef([P_A_C_K])\n  popdef([PACKLIBS])\n  popdef([PACKUP])\n  popdef([PACK])\n  popdef([NAME])\n])\n\ndnl AC_LIB_APPENDTOVAR(VAR, CONTENTS) appends the elements of CONTENTS to VAR,\ndnl unless already present in VAR.\ndnl Works only for CPPFLAGS, not for LIB* variables because that sometimes\ndnl contains two or three consecutive elements that belong together.\nAC_DEFUN([AC_LIB_APPENDTOVAR],\n[\n  for element in [$2]; do\n    haveit=\n    for x in $[$1]; do\n      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n      if test \"X$x\" = \"X$element\"; then\n        haveit=yes\n        break\n      fi\n    done\n    if test -z \"$haveit\"; then\n      [$1]=\"${[$1]}${[$1]:+ }$element\"\n    fi\n  done\n])\n\ndnl For those cases where a variable contains several -L and -l options\ndnl referring to unknown libraries and directories, this macro determines the\ndnl necessary additional linker options for the runtime path.\ndnl AC_LIB_LINKFLAGS_FROM_LIBS([LDADDVAR], [LIBSVALUE], [USE-LIBTOOL])\ndnl sets LDADDVAR to linker options needed together with LIBSVALUE.\ndnl If USE-LIBTOOL evaluates to non-empty, linking with libtool is assumed,\ndnl otherwise linking without libtool is assumed.\nAC_DEFUN([AC_LIB_LINKFLAGS_FROM_LIBS],\n[\n  AC_REQUIRE([AC_LIB_RPATH])\n  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])\n  $1=\n  if test \"$enable_rpath\" != no; then\n    if test -n \"$acl_hardcode_libdir_flag_spec\" && test \"$acl_hardcode_minus_L\" = no; then\n      dnl Use an explicit option to hardcode directories into the resulting\n      dnl binary.\n      rpathdirs=\n      next=\n      for opt in $2; do\n        if test -n \"$next\"; then\n          dir=\"$next\"\n          dnl No need to hardcode the standard /usr/lib.\n          if test \"X$dir\" != \"X/usr/$acl_libdirstem\" \\\n             && test \"X$dir\" != \"X/usr/$acl_libdirstem2\"; then\n            rpathdirs=\"$rpathdirs $dir\"\n          fi\n          next=\n        else\n          case $opt in\n            -L) next=yes ;;\n            -L*) dir=`echo \"X$opt\" | sed -e 's,^X-L,,'`\n                 dnl No need to hardcode the standard /usr/lib.\n                 if test \"X$dir\" != \"X/usr/$acl_libdirstem\" \\\n                    && test \"X$dir\" != \"X/usr/$acl_libdirstem2\"; then\n                   rpathdirs=\"$rpathdirs $dir\"\n                 fi\n                 next= ;;\n            *) next= ;;\n          esac\n        fi\n      done\n      if test \"X$rpathdirs\" != \"X\"; then\n        if test -n \"\"$3\"\"; then\n          dnl libtool is used for linking. Use -R options.\n          for dir in $rpathdirs; do\n            $1=\"${$1}${$1:+ }-R$dir\"\n          done\n        else\n          dnl The linker is used for linking directly.\n          if test -n \"$acl_hardcode_libdir_separator\"; then\n            dnl Weird platform: only the last -rpath option counts, the user\n            dnl must pass all path elements in one option.\n            alldirs=\n            for dir in $rpathdirs; do\n              alldirs=\"${alldirs}${alldirs:+$acl_hardcode_libdir_separator}$dir\"\n            done\n            acl_save_libdir=\"$libdir\"\n            libdir=\"$alldirs\"\n            eval flag=\\\"$acl_hardcode_libdir_flag_spec\\\"\n            libdir=\"$acl_save_libdir\"\n            $1=\"$flag\"\n          else\n            dnl The -rpath options are cumulative.\n            for dir in $rpathdirs; do\n              acl_save_libdir=\"$libdir\"\n              libdir=\"$dir\"\n              eval flag=\\\"$acl_hardcode_libdir_flag_spec\\\"\n              libdir=\"$acl_save_libdir\"\n              $1=\"${$1}${$1:+ }$flag\"\n            done\n          fi\n        fi\n      fi\n    fi\n  fi\n  AC_SUBST([$1])\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/build-aux/ltmain.sh": "#!/bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#!/bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/libguile/elf.h": "/* This file defines standard ELF types, structures, and macros.\n   Copyright (C) 1995-2003,2004,2005,2006,2007,2008,2009,2010\n\tFree Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, write to the Free\n   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n   02111-1307 USA.  */\n\n#ifndef _ELF_H\n#define\t_ELF_H 1\n\n/* Standard ELF types.  */\n\n#include <stdint.h>\n\n/* Type for a 16-bit quantity.  */\ntypedef uint16_t Elf32_Half;\ntypedef uint16_t Elf64_Half;\n\n/* Types for signed and unsigned 32-bit quantities.  */\ntypedef uint32_t Elf32_Word;\ntypedef\tint32_t  Elf32_Sword;\ntypedef uint32_t Elf64_Word;\ntypedef\tint32_t  Elf64_Sword;\n\n/* Types for signed and unsigned 64-bit quantities.  */\ntypedef uint64_t Elf32_Xword;\ntypedef\tint64_t  Elf32_Sxword;\ntypedef uint64_t Elf64_Xword;\ntypedef\tint64_t  Elf64_Sxword;\n\n/* Type of addresses.  */\ntypedef uint32_t Elf32_Addr;\ntypedef uint64_t Elf64_Addr;\n\n/* Type of file offsets.  */\ntypedef uint32_t Elf32_Off;\ntypedef uint64_t Elf64_Off;\n\n/* Type for section indices, which are 16-bit quantities.  */\ntypedef uint16_t Elf32_Section;\ntypedef uint16_t Elf64_Section;\n\n/* Type for version symbol information.  */\ntypedef Elf32_Half Elf32_Versym;\ntypedef Elf64_Half Elf64_Versym;\n\n\n/* The ELF file header.  This appears at the start of every ELF file.  */\n\n#define EI_NIDENT (16)\n\ntypedef struct\n{\n  unsigned char\te_ident[EI_NIDENT];\t/* Magic number and other info */\n  Elf32_Half\te_type;\t\t\t/* Object file type */\n  Elf32_Half\te_machine;\t\t/* Architecture */\n  Elf32_Word\te_version;\t\t/* Object file version */\n  Elf32_Addr\te_entry;\t\t/* Entry point virtual address */\n  Elf32_Off\te_phoff;\t\t/* Program header table file offset */\n  Elf32_Off\te_shoff;\t\t/* Section header table file offset */\n  Elf32_Word\te_flags;\t\t/* Processor-specific flags */\n  Elf32_Half\te_ehsize;\t\t/* ELF header size in bytes */\n  Elf32_Half\te_phentsize;\t\t/* Program header table entry size */\n  Elf32_Half\te_phnum;\t\t/* Program header table entry count */\n  Elf32_Half\te_shentsize;\t\t/* Section header table entry size */\n  Elf32_Half\te_shnum;\t\t/* Section header table entry count */\n  Elf32_Half\te_shstrndx;\t\t/* Section header string table index */\n} Elf32_Ehdr;\n\ntypedef struct\n{\n  unsigned char\te_ident[EI_NIDENT];\t/* Magic number and other info */\n  Elf64_Half\te_type;\t\t\t/* Object file type */\n  Elf64_Half\te_machine;\t\t/* Architecture */\n  Elf64_Word\te_version;\t\t/* Object file version */\n  Elf64_Addr\te_entry;\t\t/* Entry point virtual address */\n  Elf64_Off\te_phoff;\t\t/* Program header table file offset */\n  Elf64_Off\te_shoff;\t\t/* Section header table file offset */\n  Elf64_Word\te_flags;\t\t/* Processor-specific flags */\n  Elf64_Half\te_ehsize;\t\t/* ELF header size in bytes */\n  Elf64_Half\te_phentsize;\t\t/* Program header table entry size */\n  Elf64_Half\te_phnum;\t\t/* Program header table entry count */\n  Elf64_Half\te_shentsize;\t\t/* Section header table entry size */\n  Elf64_Half\te_shnum;\t\t/* Section header table entry count */\n  Elf64_Half\te_shstrndx;\t\t/* Section header string table index */\n} Elf64_Ehdr;\n\n/* Fields in the e_ident array.  The EI_* macros are indices into the\n   array.  The macros under each EI_* macro are the values the byte\n   may have.  */\n\n#define EI_MAG0\t\t0\t\t/* File identification byte 0 index */\n#define ELFMAG0\t\t0x7f\t\t/* Magic number byte 0 */\n\n#define EI_MAG1\t\t1\t\t/* File identification byte 1 index */\n#define ELFMAG1\t\t'E'\t\t/* Magic number byte 1 */\n\n#define EI_MAG2\t\t2\t\t/* File identification byte 2 index */\n#define ELFMAG2\t\t'L'\t\t/* Magic number byte 2 */\n\n#define EI_MAG3\t\t3\t\t/* File identification byte 3 index */\n#define ELFMAG3\t\t'F'\t\t/* Magic number byte 3 */\n\n/* Conglomeration of the identification bytes, for easy testing as a word.  */\n#define\tELFMAG\t\t\"\\177ELF\"\n#define\tSELFMAG\t\t4\n\n#define EI_CLASS\t4\t\t/* File class byte index */\n#define ELFCLASSNONE\t0\t\t/* Invalid class */\n#define ELFCLASS32\t1\t\t/* 32-bit objects */\n#define ELFCLASS64\t2\t\t/* 64-bit objects */\n#define ELFCLASSNUM\t3\n\n#define EI_DATA\t\t5\t\t/* Data encoding byte index */\n#define ELFDATANONE\t0\t\t/* Invalid data encoding */\n#define ELFDATA2LSB\t1\t\t/* 2's complement, little endian */\n#define ELFDATA2MSB\t2\t\t/* 2's complement, big endian */\n#define ELFDATANUM\t3\n\n#define EI_VERSION\t6\t\t/* File version byte index */\n\t\t\t\t\t/* Value must be EV_CURRENT */\n\n#define EI_OSABI\t7\t\t/* OS ABI identification */\n#define ELFOSABI_NONE\t\t0\t/* UNIX System V ABI */\n#define ELFOSABI_SYSV\t\t0\t/* Alias.  */\n#define ELFOSABI_HPUX\t\t1\t/* HP-UX */\n#define ELFOSABI_NETBSD\t\t2\t/* NetBSD.  */\n#define ELFOSABI_GNU\t\t3\t/* GNU.  */\n#define ELFOSABI_LINUX\t\t3\t/* Alias for ELFOSABI_GNU.  */\n#define ELFOSABI_SOLARIS\t6\t/* Sun Solaris.  */\n#define ELFOSABI_AIX\t\t7\t/* IBM AIX.  */\n#define ELFOSABI_IRIX\t\t8\t/* SGI Irix.  */\n#define ELFOSABI_FREEBSD\t9\t/* FreeBSD.  */\n#define ELFOSABI_TRU64\t\t10\t/* Compaq TRU64 UNIX.  */\n#define ELFOSABI_MODESTO\t11\t/* Novell Modesto.  */\n#define ELFOSABI_OPENBSD\t12\t/* OpenBSD.  */\n#define ELFOSABI_ARM_AEABI\t64\t/* ARM EABI */\n#define ELFOSABI_ARM\t\t97\t/* ARM */\n#define ELFOSABI_STANDALONE\t255\t/* Standalone (embedded) application */\n\n#define EI_ABIVERSION\t8\t\t/* ABI version */\n\n#define EI_PAD\t\t9\t\t/* Byte index of padding bytes */\n\n/* Legal values for e_type (object file type).  */\n\n#define ET_NONE\t\t0\t\t/* No file type */\n#define ET_REL\t\t1\t\t/* Relocatable file */\n#define ET_EXEC\t\t2\t\t/* Executable file */\n#define ET_DYN\t\t3\t\t/* Shared object file */\n#define ET_CORE\t\t4\t\t/* Core file */\n#define\tET_NUM\t\t5\t\t/* Number of defined types */\n#define ET_LOOS\t\t0xfe00\t\t/* OS-specific range start */\n#define ET_HIOS\t\t0xfeff\t\t/* OS-specific range end */\n#define ET_LOPROC\t0xff00\t\t/* Processor-specific range start */\n#define ET_HIPROC\t0xffff\t\t/* Processor-specific range end */\n\n/* Legal values for e_machine (architecture).  */\n\n#define EM_NONE\t\t 0\t\t/* No machine */\n#define EM_M32\t\t 1\t\t/* AT&T WE 32100 */\n#define EM_SPARC\t 2\t\t/* SUN SPARC */\n#define EM_386\t\t 3\t\t/* Intel 80386 */\n#define EM_68K\t\t 4\t\t/* Motorola m68k family */\n#define EM_88K\t\t 5\t\t/* Motorola m88k family */\n#define EM_860\t\t 7\t\t/* Intel 80860 */\n#define EM_MIPS\t\t 8\t\t/* MIPS R3000 big-endian */\n#define EM_S370\t\t 9\t\t/* IBM System/370 */\n#define EM_MIPS_RS3_LE\t10\t\t/* MIPS R3000 little-endian */\n\n#define EM_PARISC\t15\t\t/* HPPA */\n#define EM_VPP500\t17\t\t/* Fujitsu VPP500 */\n#define EM_SPARC32PLUS\t18\t\t/* Sun's \"v8plus\" */\n#define EM_960\t\t19\t\t/* Intel 80960 */\n#define EM_PPC\t\t20\t\t/* PowerPC */\n#define EM_PPC64\t21\t\t/* PowerPC 64-bit */\n#define EM_S390\t\t22\t\t/* IBM S390 */\n\n#define EM_V800\t\t36\t\t/* NEC V800 series */\n#define EM_FR20\t\t37\t\t/* Fujitsu FR20 */\n#define EM_RH32\t\t38\t\t/* TRW RH-32 */\n#define EM_RCE\t\t39\t\t/* Motorola RCE */\n#define EM_ARM\t\t40\t\t/* ARM */\n#define EM_FAKE_ALPHA\t41\t\t/* Digital Alpha */\n#define EM_SH\t\t42\t\t/* Hitachi SH */\n#define EM_SPARCV9\t43\t\t/* SPARC v9 64-bit */\n#define EM_TRICORE\t44\t\t/* Siemens Tricore */\n#define EM_ARC\t\t45\t\t/* Argonaut RISC Core */\n#define EM_H8_300\t46\t\t/* Hitachi H8/300 */\n#define EM_H8_300H\t47\t\t/* Hitachi H8/300H */\n#define EM_H8S\t\t48\t\t/* Hitachi H8S */\n#define EM_H8_500\t49\t\t/* Hitachi H8/500 */\n#define EM_IA_64\t50\t\t/* Intel Merced */\n#define EM_MIPS_X\t51\t\t/* Stanford MIPS-X */\n#define EM_COLDFIRE\t52\t\t/* Motorola Coldfire */\n#define EM_68HC12\t53\t\t/* Motorola M68HC12 */\n#define EM_MMA\t\t54\t\t/* Fujitsu MMA Multimedia Accelerator*/\n#define EM_PCP\t\t55\t\t/* Siemens PCP */\n#define EM_NCPU\t\t56\t\t/* Sony nCPU embeeded RISC */\n#define EM_NDR1\t\t57\t\t/* Denso NDR1 microprocessor */\n#define EM_STARCORE\t58\t\t/* Motorola Start*Core processor */\n#define EM_ME16\t\t59\t\t/* Toyota ME16 processor */\n#define EM_ST100\t60\t\t/* STMicroelectronic ST100 processor */\n#define EM_TINYJ\t61\t\t/* Advanced Logic Corp. Tinyj emb.fam*/\n#define EM_X86_64\t62\t\t/* AMD x86-64 architecture */\n#define EM_PDSP\t\t63\t\t/* Sony DSP Processor */\n\n#define EM_FX66\t\t66\t\t/* Siemens FX66 microcontroller */\n#define EM_ST9PLUS\t67\t\t/* STMicroelectronics ST9+ 8/16 mc */\n#define EM_ST7\t\t68\t\t/* STmicroelectronics ST7 8 bit mc */\n#define EM_68HC16\t69\t\t/* Motorola MC68HC16 microcontroller */\n#define EM_68HC11\t70\t\t/* Motorola MC68HC11 microcontroller */\n#define EM_68HC08\t71\t\t/* Motorola MC68HC08 microcontroller */\n#define EM_68HC05\t72\t\t/* Motorola MC68HC05 microcontroller */\n#define EM_SVX\t\t73\t\t/* Silicon Graphics SVx */\n#define EM_ST19\t\t74\t\t/* STMicroelectronics ST19 8 bit mc */\n#define EM_VAX\t\t75\t\t/* Digital VAX */\n#define EM_CRIS\t\t76\t\t/* Axis Communications 32-bit embedded processor */\n#define EM_JAVELIN\t77\t\t/* Infineon Technologies 32-bit embedded processor */\n#define EM_FIREPATH\t78\t\t/* Element 14 64-bit DSP Processor */\n#define EM_ZSP\t\t79\t\t/* LSI Logic 16-bit DSP Processor */\n#define EM_MMIX\t\t80\t\t/* Donald Knuth's educational 64-bit processor */\n#define EM_HUANY\t81\t\t/* Harvard University machine-independent object files */\n#define EM_PRISM\t82\t\t/* SiTera Prism */\n#define EM_AVR\t\t83\t\t/* Atmel AVR 8-bit microcontroller */\n#define EM_FR30\t\t84\t\t/* Fujitsu FR30 */\n#define EM_D10V\t\t85\t\t/* Mitsubishi D10V */\n#define EM_D30V\t\t86\t\t/* Mitsubishi D30V */\n#define EM_V850\t\t87\t\t/* NEC v850 */\n#define EM_M32R\t\t88\t\t/* Mitsubishi M32R */\n#define EM_MN10300\t89\t\t/* Matsushita MN10300 */\n#define EM_MN10200\t90\t\t/* Matsushita MN10200 */\n#define EM_PJ\t\t91\t\t/* picoJava */\n#define EM_OPENRISC\t92\t\t/* OpenRISC 32-bit embedded processor */\n#define EM_ARC_A5\t93\t\t/* ARC Cores Tangent-A5 */\n#define EM_XTENSA\t94\t\t/* Tensilica Xtensa Architecture */\n#define EM_NUM\t\t95\n\n/* If it is necessary to assign new unofficial EM_* values, please\n   pick large random numbers (0x8523, 0xa7f2, etc.) to minimize the\n   chances of collision with official or non-GNU unofficial values.  */\n\n#define EM_ALPHA\t0x9026\n\n/* Legal values for e_version (version).  */\n\n#define EV_NONE\t\t0\t\t/* Invalid ELF version */\n#define EV_CURRENT\t1\t\t/* Current version */\n#define EV_NUM\t\t2\n\n/* Section header.  */\n\ntypedef struct\n{\n  Elf32_Word\tsh_name;\t\t/* Section name (string tbl index) */\n  Elf32_Word\tsh_type;\t\t/* Section type */\n  Elf32_Word\tsh_flags;\t\t/* Section flags */\n  Elf32_Addr\tsh_addr;\t\t/* Section virtual addr at execution */\n  Elf32_Off\tsh_offset;\t\t/* Section file offset */\n  Elf32_Word\tsh_size;\t\t/* Section size in bytes */\n  Elf32_Word\tsh_link;\t\t/* Link to another section */\n  Elf32_Word\tsh_info;\t\t/* Additional section information */\n  Elf32_Word\tsh_addralign;\t\t/* Section alignment */\n  Elf32_Word\tsh_entsize;\t\t/* Entry size if section holds table */\n} Elf32_Shdr;\n\ntypedef struct\n{\n  Elf64_Word\tsh_name;\t\t/* Section name (string tbl index) */\n  Elf64_Word\tsh_type;\t\t/* Section type */\n  Elf64_Xword\tsh_flags;\t\t/* Section flags */\n  Elf64_Addr\tsh_addr;\t\t/* Section virtual addr at execution */\n  Elf64_Off\tsh_offset;\t\t/* Section file offset */\n  Elf64_Xword\tsh_size;\t\t/* Section size in bytes */\n  Elf64_Word\tsh_link;\t\t/* Link to another section */\n  Elf64_Word\tsh_info;\t\t/* Additional section information */\n  Elf64_Xword\tsh_addralign;\t\t/* Section alignment */\n  Elf64_Xword\tsh_entsize;\t\t/* Entry size if section holds table */\n} Elf64_Shdr;\n\n/* Special section indices.  */\n\n#define SHN_UNDEF\t0\t\t/* Undefined section */\n#define SHN_LORESERVE\t0xff00\t\t/* Start of reserved indices */\n#define SHN_LOPROC\t0xff00\t\t/* Start of processor-specific */\n#define SHN_BEFORE\t0xff00\t\t/* Order section before all others\n\t\t\t\t\t   (Solaris).  */\n#define SHN_AFTER\t0xff01\t\t/* Order section after all others\n\t\t\t\t\t   (Solaris).  */\n#define SHN_HIPROC\t0xff1f\t\t/* End of processor-specific */\n#define SHN_LOOS\t0xff20\t\t/* Start of OS-specific */\n#define SHN_HIOS\t0xff3f\t\t/* End of OS-specific */\n#define SHN_ABS\t\t0xfff1\t\t/* Associated symbol is absolute */\n#define SHN_COMMON\t0xfff2\t\t/* Associated symbol is common */\n#define SHN_XINDEX\t0xffff\t\t/* Index is in extra table.  */\n#define SHN_HIRESERVE\t0xffff\t\t/* End of reserved indices */\n\n/* Legal values for sh_type (section type).  */\n\n#define SHT_NULL\t  0\t\t/* Section header table entry unused */\n#define SHT_PROGBITS\t  1\t\t/* Program data */\n#define SHT_SYMTAB\t  2\t\t/* Symbol table */\n#define SHT_STRTAB\t  3\t\t/* String table */\n#define SHT_RELA\t  4\t\t/* Relocation entries with addends */\n#define SHT_HASH\t  5\t\t/* Symbol hash table */\n#define SHT_DYNAMIC\t  6\t\t/* Dynamic linking information */\n#define SHT_NOTE\t  7\t\t/* Notes */\n#define SHT_NOBITS\t  8\t\t/* Program space with no data (bss) */\n#define SHT_REL\t\t  9\t\t/* Relocation entries, no addends */\n#define SHT_SHLIB\t  10\t\t/* Reserved */\n#define SHT_DYNSYM\t  11\t\t/* Dynamic linker symbol table */\n#define SHT_INIT_ARRAY\t  14\t\t/* Array of constructors */\n#define SHT_FINI_ARRAY\t  15\t\t/* Array of destructors */\n#define SHT_PREINIT_ARRAY 16\t\t/* Array of pre-constructors */\n#define SHT_GROUP\t  17\t\t/* Section group */\n#define SHT_SYMTAB_SHNDX  18\t\t/* Extended section indeces */\n#define\tSHT_NUM\t\t  19\t\t/* Number of defined types.  */\n#define SHT_LOOS\t  0x60000000\t/* Start OS-specific.  */\n#define SHT_GNU_ATTRIBUTES 0x6ffffff5\t/* Object attributes.  */\n#define SHT_GNU_HASH\t  0x6ffffff6\t/* GNU-style hash table.  */\n#define SHT_GNU_LIBLIST\t  0x6ffffff7\t/* Prelink library list */\n#define SHT_CHECKSUM\t  0x6ffffff8\t/* Checksum for DSO content.  */\n#define SHT_LOSUNW\t  0x6ffffffa\t/* Sun-specific low bound.  */\n#define SHT_SUNW_move\t  0x6ffffffa\n#define SHT_SUNW_COMDAT   0x6ffffffb\n#define SHT_SUNW_syminfo  0x6ffffffc\n#define SHT_GNU_verdef\t  0x6ffffffd\t/* Version definition section.  */\n#define SHT_GNU_verneed\t  0x6ffffffe\t/* Version needs section.  */\n#define SHT_GNU_versym\t  0x6fffffff\t/* Version symbol table.  */\n#define SHT_HISUNW\t  0x6fffffff\t/* Sun-specific high bound.  */\n#define SHT_HIOS\t  0x6fffffff\t/* End OS-specific type */\n#define SHT_LOPROC\t  0x70000000\t/* Start of processor-specific */\n#define SHT_HIPROC\t  0x7fffffff\t/* End of processor-specific */\n#define SHT_LOUSER\t  0x80000000\t/* Start of application-specific */\n#define SHT_HIUSER\t  0x8fffffff\t/* End of application-specific */\n\n/* Legal values for sh_flags (section flags).  */\n\n#define SHF_WRITE\t     (1 << 0)\t/* Writable */\n#define SHF_ALLOC\t     (1 << 1)\t/* Occupies memory during execution */\n#define SHF_EXECINSTR\t     (1 << 2)\t/* Executable */\n#define SHF_MERGE\t     (1 << 4)\t/* Might be merged */\n#define SHF_STRINGS\t     (1 << 5)\t/* Contains nul-terminated strings */\n#define SHF_INFO_LINK\t     (1 << 6)\t/* `sh_info' contains SHT index */\n#define SHF_LINK_ORDER\t     (1 << 7)\t/* Preserve order after combining */\n#define SHF_OS_NONCONFORMING (1 << 8)\t/* Non-standard OS specific handling\n\t\t\t\t\t   required */\n#define SHF_GROUP\t     (1 << 9)\t/* Section is member of a group.  */\n#define SHF_TLS\t\t     (1 << 10)\t/* Section hold thread-local data.  */\n#define SHF_MASKOS\t     0x0ff00000\t/* OS-specific.  */\n#define SHF_MASKPROC\t     0xf0000000\t/* Processor-specific */\n#define SHF_ORDERED\t     (1 << 30)\t/* Special ordering requirement\n\t\t\t\t\t   (Solaris).  */\n#define SHF_EXCLUDE\t     (1 << 31)\t/* Section is excluded unless\n\t\t\t\t\t   referenced or allocated (Solaris).*/\n\n/* Section group handling.  */\n#define GRP_COMDAT\t0x1\t\t/* Mark group as COMDAT.  */\n\n/* Symbol table entry.  */\n\ntypedef struct\n{\n  Elf32_Word\tst_name;\t\t/* Symbol name (string tbl index) */\n  Elf32_Addr\tst_value;\t\t/* Symbol value */\n  Elf32_Word\tst_size;\t\t/* Symbol size */\n  unsigned char\tst_info;\t\t/* Symbol type and binding */\n  unsigned char\tst_other;\t\t/* Symbol visibility */\n  Elf32_Section\tst_shndx;\t\t/* Section index */\n} Elf32_Sym;\n\ntypedef struct\n{\n  Elf64_Word\tst_name;\t\t/* Symbol name (string tbl index) */\n  unsigned char\tst_info;\t\t/* Symbol type and binding */\n  unsigned char st_other;\t\t/* Symbol visibility */\n  Elf64_Section\tst_shndx;\t\t/* Section index */\n  Elf64_Addr\tst_value;\t\t/* Symbol value */\n  Elf64_Xword\tst_size;\t\t/* Symbol size */\n} Elf64_Sym;\n\n/* The syminfo section if available contains additional information about\n   every dynamic symbol.  */\n\ntypedef struct\n{\n  Elf32_Half si_boundto;\t\t/* Direct bindings, symbol bound to */\n  Elf32_Half si_flags;\t\t\t/* Per symbol flags */\n} Elf32_Syminfo;\n\ntypedef struct\n{\n  Elf64_Half si_boundto;\t\t/* Direct bindings, symbol bound to */\n  Elf64_Half si_flags;\t\t\t/* Per symbol flags */\n} Elf64_Syminfo;\n\n/* Possible values for si_boundto.  */\n#define SYMINFO_BT_SELF\t\t0xffff\t/* Symbol bound to self */\n#define SYMINFO_BT_PARENT\t0xfffe\t/* Symbol bound to parent */\n#define SYMINFO_BT_LOWRESERVE\t0xff00\t/* Beginning of reserved entries */\n\n/* Possible bitmasks for si_flags.  */\n#define SYMINFO_FLG_DIRECT\t0x0001\t/* Direct bound symbol */\n#define SYMINFO_FLG_PASSTHRU\t0x0002\t/* Pass-thru symbol for translator */\n#define SYMINFO_FLG_COPY\t0x0004\t/* Symbol is a copy-reloc */\n#define SYMINFO_FLG_LAZYLOAD\t0x0008\t/* Symbol bound to object to be lazy\n\t\t\t\t\t   loaded */\n/* Syminfo version values.  */\n#define SYMINFO_NONE\t\t0\n#define SYMINFO_CURRENT\t\t1\n#define SYMINFO_NUM\t\t2\n\n\n/* How to extract and insert information held in the st_info field.  */\n\n#define ELF32_ST_BIND(val)\t\t(((unsigned char) (val)) >> 4)\n#define ELF32_ST_TYPE(val)\t\t((val) & 0xf)\n#define ELF32_ST_INFO(bind, type)\t(((bind) << 4) + ((type) & 0xf))\n\n/* Both Elf32_Sym and Elf64_Sym use the same one-byte st_info field.  */\n#define ELF64_ST_BIND(val)\t\tELF32_ST_BIND (val)\n#define ELF64_ST_TYPE(val)\t\tELF32_ST_TYPE (val)\n#define ELF64_ST_INFO(bind, type)\tELF32_ST_INFO ((bind), (type))\n\n/* Legal values for ST_BIND subfield of st_info (symbol binding).  */\n\n#define STB_LOCAL\t0\t\t/* Local symbol */\n#define STB_GLOBAL\t1\t\t/* Global symbol */\n#define STB_WEAK\t2\t\t/* Weak symbol */\n#define\tSTB_NUM\t\t3\t\t/* Number of defined types.  */\n#define STB_LOOS\t10\t\t/* Start of OS-specific */\n#define STB_GNU_UNIQUE\t10\t\t/* Unique symbol.  */\n#define STB_HIOS\t12\t\t/* End of OS-specific */\n#define STB_LOPROC\t13\t\t/* Start of processor-specific */\n#define STB_HIPROC\t15\t\t/* End of processor-specific */\n\n/* Legal values for ST_TYPE subfield of st_info (symbol type).  */\n\n#define STT_NOTYPE\t0\t\t/* Symbol type is unspecified */\n#define STT_OBJECT\t1\t\t/* Symbol is a data object */\n#define STT_FUNC\t2\t\t/* Symbol is a code object */\n#define STT_SECTION\t3\t\t/* Symbol associated with a section */\n#define STT_FILE\t4\t\t/* Symbol's name is file name */\n#define STT_COMMON\t5\t\t/* Symbol is a common data object */\n#define STT_TLS\t\t6\t\t/* Symbol is thread-local data object*/\n#define\tSTT_NUM\t\t7\t\t/* Number of defined types.  */\n#define STT_LOOS\t10\t\t/* Start of OS-specific */\n#define STT_GNU_IFUNC\t10\t\t/* Symbol is indirect code object */\n#define STT_HIOS\t12\t\t/* End of OS-specific */\n#define STT_LOPROC\t13\t\t/* Start of processor-specific */\n#define STT_HIPROC\t15\t\t/* End of processor-specific */\n\n\n/* Symbol table indices are found in the hash buckets and chain table\n   of a symbol hash table section.  This special index value indicates\n   the end of a chain, meaning no further symbols are found in that bucket.  */\n\n#define STN_UNDEF\t0\t\t/* End of a chain.  */\n\n\n/* How to extract and insert information held in the st_other field.  */\n\n#define ELF32_ST_VISIBILITY(o)\t((o) & 0x03)\n\n/* For ELF64 the definitions are the same.  */\n#define ELF64_ST_VISIBILITY(o)\tELF32_ST_VISIBILITY (o)\n\n/* Symbol visibility specification encoded in the st_other field.  */\n#define STV_DEFAULT\t0\t\t/* Default symbol visibility rules */\n#define STV_INTERNAL\t1\t\t/* Processor specific hidden class */\n#define STV_HIDDEN\t2\t\t/* Sym unavailable in other modules */\n#define STV_PROTECTED\t3\t\t/* Not preemptible, not exported */\n\n\n/* Relocation table entry without addend (in section of type SHT_REL).  */\n\ntypedef struct\n{\n  Elf32_Addr\tr_offset;\t\t/* Address */\n  Elf32_Word\tr_info;\t\t\t/* Relocation type and symbol index */\n} Elf32_Rel;\n\n/* I have seen two different definitions of the Elf64_Rel and\n   Elf64_Rela structures, so we'll leave them out until Novell (or\n   whoever) gets their act together.  */\n/* The following, at least, is used on Sparc v9, MIPS, and Alpha.  */\n\ntypedef struct\n{\n  Elf64_Addr\tr_offset;\t\t/* Address */\n  Elf64_Xword\tr_info;\t\t\t/* Relocation type and symbol index */\n} Elf64_Rel;\n\n/* Relocation table entry with addend (in section of type SHT_RELA).  */\n\ntypedef struct\n{\n  Elf32_Addr\tr_offset;\t\t/* Address */\n  Elf32_Word\tr_info;\t\t\t/* Relocation type and symbol index */\n  Elf32_Sword\tr_addend;\t\t/* Addend */\n} Elf32_Rela;\n\ntypedef struct\n{\n  Elf64_Addr\tr_offset;\t\t/* Address */\n  Elf64_Xword\tr_info;\t\t\t/* Relocation type and symbol index */\n  Elf64_Sxword\tr_addend;\t\t/* Addend */\n} Elf64_Rela;\n\n/* How to extract and insert information held in the r_info field.  */\n\n#define ELF32_R_SYM(val)\t\t((val) >> 8)\n#define ELF32_R_TYPE(val)\t\t((val) & 0xff)\n#define ELF32_R_INFO(sym, type)\t\t(((sym) << 8) + ((type) & 0xff))\n\n#define ELF64_R_SYM(i)\t\t\t((i) >> 32)\n#define ELF64_R_TYPE(i)\t\t\t((i) & 0xffffffff)\n#define ELF64_R_INFO(sym,type)\t\t((((Elf64_Xword) (sym)) << 32) + (type))\n\n/* Program segment header.  */\n\ntypedef struct\n{\n  Elf32_Word\tp_type;\t\t\t/* Segment type */\n  Elf32_Off\tp_offset;\t\t/* Segment file offset */\n  Elf32_Addr\tp_vaddr;\t\t/* Segment virtual address */\n  Elf32_Addr\tp_paddr;\t\t/* Segment physical address */\n  Elf32_Word\tp_filesz;\t\t/* Segment size in file */\n  Elf32_Word\tp_memsz;\t\t/* Segment size in memory */\n  Elf32_Word\tp_flags;\t\t/* Segment flags */\n  Elf32_Word\tp_align;\t\t/* Segment alignment */\n} Elf32_Phdr;\n\ntypedef struct\n{\n  Elf64_Word\tp_type;\t\t\t/* Segment type */\n  Elf64_Word\tp_flags;\t\t/* Segment flags */\n  Elf64_Off\tp_offset;\t\t/* Segment file offset */\n  Elf64_Addr\tp_vaddr;\t\t/* Segment virtual address */\n  Elf64_Addr\tp_paddr;\t\t/* Segment physical address */\n  Elf64_Xword\tp_filesz;\t\t/* Segment size in file */\n  Elf64_Xword\tp_memsz;\t\t/* Segment size in memory */\n  Elf64_Xword\tp_align;\t\t/* Segment alignment */\n} Elf64_Phdr;\n\n/* Special value for e_phnum.  This indicates that the real number of\n   program headers is too large to fit into e_phnum.  Instead the real\n   value is in the field sh_info of section 0.  */\n\n#define PN_XNUM\t\t0xffff\n\n/* Legal values for p_type (segment type).  */\n\n#define\tPT_NULL\t\t0\t\t/* Program header table entry unused */\n#define PT_LOAD\t\t1\t\t/* Loadable program segment */\n#define PT_DYNAMIC\t2\t\t/* Dynamic linking information */\n#define PT_INTERP\t3\t\t/* Program interpreter */\n#define PT_NOTE\t\t4\t\t/* Auxiliary information */\n#define PT_SHLIB\t5\t\t/* Reserved */\n#define PT_PHDR\t\t6\t\t/* Entry for header table itself */\n#define PT_TLS\t\t7\t\t/* Thread-local storage segment */\n#define\tPT_NUM\t\t8\t\t/* Number of defined types */\n#define PT_LOOS\t\t0x60000000\t/* Start of OS-specific */\n#define PT_GNU_EH_FRAME\t0x6474e550\t/* GCC .eh_frame_hdr segment */\n#define PT_GNU_STACK\t0x6474e551\t/* Indicates stack executability */\n#define PT_GNU_RELRO\t0x6474e552\t/* Read-only after relocation */\n#define PT_LOSUNW\t0x6ffffffa\n#define PT_SUNWBSS\t0x6ffffffa\t/* Sun Specific segment */\n#define PT_SUNWSTACK\t0x6ffffffb\t/* Stack segment */\n#define PT_HISUNW\t0x6fffffff\n#define PT_HIOS\t\t0x6fffffff\t/* End of OS-specific */\n#define PT_LOPROC\t0x70000000\t/* Start of processor-specific */\n#define PT_HIPROC\t0x7fffffff\t/* End of processor-specific */\n\n/* Legal values for p_flags (segment flags).  */\n\n#define PF_X\t\t(1 << 0)\t/* Segment is executable */\n#define PF_W\t\t(1 << 1)\t/* Segment is writable */\n#define PF_R\t\t(1 << 2)\t/* Segment is readable */\n#define PF_MASKOS\t0x0ff00000\t/* OS-specific */\n#define PF_MASKPROC\t0xf0000000\t/* Processor-specific */\n\n/* Legal values for note segment descriptor types for core files. */\n\n#define NT_PRSTATUS\t1\t\t/* Contains copy of prstatus struct */\n#define NT_FPREGSET\t2\t\t/* Contains copy of fpregset struct */\n#define NT_PRPSINFO\t3\t\t/* Contains copy of prpsinfo struct */\n#define NT_PRXREG\t4\t\t/* Contains copy of prxregset struct */\n#define NT_TASKSTRUCT\t4\t\t/* Contains copy of task structure */\n#define NT_PLATFORM\t5\t\t/* String from sysinfo(SI_PLATFORM) */\n#define NT_AUXV\t\t6\t\t/* Contains copy of auxv array */\n#define NT_GWINDOWS\t7\t\t/* Contains copy of gwindows struct */\n#define NT_ASRS\t\t8\t\t/* Contains copy of asrset struct */\n#define NT_PSTATUS\t10\t\t/* Contains copy of pstatus struct */\n#define NT_PSINFO\t13\t\t/* Contains copy of psinfo struct */\n#define NT_PRCRED\t14\t\t/* Contains copy of prcred struct */\n#define NT_UTSNAME\t15\t\t/* Contains copy of utsname struct */\n#define NT_LWPSTATUS\t16\t\t/* Contains copy of lwpstatus struct */\n#define NT_LWPSINFO\t17\t\t/* Contains copy of lwpinfo struct */\n#define NT_PRFPXREG\t20\t\t/* Contains copy of fprxregset struct */\n#define NT_PRXFPREG\t0x46e62b7f\t/* Contains copy of user_fxsr_struct */\n#define NT_PPC_VMX\t0x100\t\t/* PowerPC Altivec/VMX registers */\n#define NT_PPC_SPE\t0x101\t\t/* PowerPC SPE/EVR registers */\n#define NT_PPC_VSX\t0x102\t\t/* PowerPC VSX registers */\n#define NT_386_TLS\t0x200\t\t/* i386 TLS slots (struct user_desc) */\n#define NT_386_IOPERM\t0x201\t\t/* x86 io permission bitmap (1=deny) */\n#define NT_X86_XSTATE\t0x202\t\t/* x86 extended state using xsave */\n\n/* Legal values for the note segment descriptor types for object files.  */\n\n#define NT_VERSION\t1\t\t/* Contains a version string.  */\n\n\n/* Dynamic section entry.  */\n\ntypedef struct\n{\n  Elf32_Sword\td_tag;\t\t\t/* Dynamic entry type */\n  union\n    {\n      Elf32_Word d_val;\t\t\t/* Integer value */\n      Elf32_Addr d_ptr;\t\t\t/* Address value */\n    } d_un;\n} Elf32_Dyn;\n\ntypedef struct\n{\n  Elf64_Sxword\td_tag;\t\t\t/* Dynamic entry type */\n  union\n    {\n      Elf64_Xword d_val;\t\t/* Integer value */\n      Elf64_Addr d_ptr;\t\t\t/* Address value */\n    } d_un;\n} Elf64_Dyn;\n\n/* Legal values for d_tag (dynamic entry type).  */\n\n#define DT_NULL\t\t0\t\t/* Marks end of dynamic section */\n#define DT_NEEDED\t1\t\t/* Name of needed library */\n#define DT_PLTRELSZ\t2\t\t/* Size in bytes of PLT relocs */\n#define DT_PLTGOT\t3\t\t/* Processor defined value */\n#define DT_HASH\t\t4\t\t/* Address of symbol hash table */\n#define DT_STRTAB\t5\t\t/* Address of string table */\n#define DT_SYMTAB\t6\t\t/* Address of symbol table */\n#define DT_RELA\t\t7\t\t/* Address of Rela relocs */\n#define DT_RELASZ\t8\t\t/* Total size of Rela relocs */\n#define DT_RELAENT\t9\t\t/* Size of one Rela reloc */\n#define DT_STRSZ\t10\t\t/* Size of string table */\n#define DT_SYMENT\t11\t\t/* Size of one symbol table entry */\n#define DT_INIT\t\t12\t\t/* Address of init function */\n#define DT_FINI\t\t13\t\t/* Address of termination function */\n#define DT_SONAME\t14\t\t/* Name of shared object */\n#define DT_RPATH\t15\t\t/* Library search path (deprecated) */\n#define DT_SYMBOLIC\t16\t\t/* Start symbol search here */\n#define DT_REL\t\t17\t\t/* Address of Rel relocs */\n#define DT_RELSZ\t18\t\t/* Total size of Rel relocs */\n#define DT_RELENT\t19\t\t/* Size of one Rel reloc */\n#define DT_PLTREL\t20\t\t/* Type of reloc in PLT */\n#define DT_DEBUG\t21\t\t/* For debugging; unspecified */\n#define DT_TEXTREL\t22\t\t/* Reloc might modify .text */\n#define DT_JMPREL\t23\t\t/* Address of PLT relocs */\n#define\tDT_BIND_NOW\t24\t\t/* Process relocations of object */\n#define\tDT_INIT_ARRAY\t25\t\t/* Array with addresses of init fct */\n#define\tDT_FINI_ARRAY\t26\t\t/* Array with addresses of fini fct */\n#define\tDT_INIT_ARRAYSZ\t27\t\t/* Size in bytes of DT_INIT_ARRAY */\n#define\tDT_FINI_ARRAYSZ\t28\t\t/* Size in bytes of DT_FINI_ARRAY */\n#define DT_RUNPATH\t29\t\t/* Library search path */\n#define DT_FLAGS\t30\t\t/* Flags for the object being loaded */\n#define DT_ENCODING\t32\t\t/* Start of encoded range */\n#define DT_PREINIT_ARRAY 32\t\t/* Array with addresses of preinit fct*/\n#define DT_PREINIT_ARRAYSZ 33\t\t/* size in bytes of DT_PREINIT_ARRAY */\n#define\tDT_NUM\t\t34\t\t/* Number used */\n#define DT_LOOS\t\t0x6000000d\t/* Start of OS-specific */\n#define DT_HIOS\t\t0x6ffff000\t/* End of OS-specific */\n#define DT_LOPROC\t0x70000000\t/* Start of processor-specific */\n#define DT_HIPROC\t0x7fffffff\t/* End of processor-specific */\n#define\tDT_PROCNUM\tDT_MIPS_NUM\t/* Most used by any processor */\n\n/* DT_* entries which fall between DT_VALRNGHI & DT_VALRNGLO use the\n   Dyn.d_un.d_val field of the Elf*_Dyn structure.  This follows Sun's\n   approach.  */\n#define DT_VALRNGLO\t0x6ffffd00\n#define DT_GNU_PRELINKED 0x6ffffdf5\t/* Prelinking timestamp */\n#define DT_GNU_CONFLICTSZ 0x6ffffdf6\t/* Size of conflict section */\n#define DT_GNU_LIBLISTSZ 0x6ffffdf7\t/* Size of library list */\n#define DT_CHECKSUM\t0x6ffffdf8\n#define DT_PLTPADSZ\t0x6ffffdf9\n#define DT_MOVEENT\t0x6ffffdfa\n#define DT_MOVESZ\t0x6ffffdfb\n#define DT_FEATURE_1\t0x6ffffdfc\t/* Feature selection (DTF_*).  */\n#define DT_POSFLAG_1\t0x6ffffdfd\t/* Flags for DT_* entries, effecting\n\t\t\t\t\t   the following DT_* entry.  */\n#define DT_SYMINSZ\t0x6ffffdfe\t/* Size of syminfo table (in bytes) */\n#define DT_SYMINENT\t0x6ffffdff\t/* Entry size of syminfo */\n#define DT_VALRNGHI\t0x6ffffdff\n#define DT_VALTAGIDX(tag)\t(DT_VALRNGHI - (tag))\t/* Reverse order! */\n#define DT_VALNUM 12\n\n/* DT_* entries which fall between DT_ADDRRNGHI & DT_ADDRRNGLO use the\n   Dyn.d_un.d_ptr field of the Elf*_Dyn structure.\n\n   If any adjustment is made to the ELF object after it has been\n   built these entries will need to be adjusted.  */\n#define DT_ADDRRNGLO\t0x6ffffe00\n#define DT_GNU_HASH\t0x6ffffef5\t/* GNU-style hash table.  */\n#define DT_TLSDESC_PLT\t0x6ffffef6\n#define DT_TLSDESC_GOT\t0x6ffffef7\n#define DT_GNU_CONFLICT\t0x6ffffef8\t/* Start of conflict section */\n#define DT_GNU_LIBLIST\t0x6ffffef9\t/* Library list */\n#define DT_CONFIG\t0x6ffffefa\t/* Configuration information.  */\n#define DT_DEPAUDIT\t0x6ffffefb\t/* Dependency auditing.  */\n#define DT_AUDIT\t0x6ffffefc\t/* Object auditing.  */\n#define\tDT_PLTPAD\t0x6ffffefd\t/* PLT padding.  */\n#define\tDT_MOVETAB\t0x6ffffefe\t/* Move table.  */\n#define DT_SYMINFO\t0x6ffffeff\t/* Syminfo table.  */\n#define DT_ADDRRNGHI\t0x6ffffeff\n#define DT_ADDRTAGIDX(tag)\t(DT_ADDRRNGHI - (tag))\t/* Reverse order! */\n#define DT_ADDRNUM 11\n\n/* The versioning entry types.  The next are defined as part of the\n   GNU extension.  */\n#define DT_VERSYM\t0x6ffffff0\n\n#define DT_RELACOUNT\t0x6ffffff9\n#define DT_RELCOUNT\t0x6ffffffa\n\n/* These were chosen by Sun.  */\n#define DT_FLAGS_1\t0x6ffffffb\t/* State flags, see DF_1_* below.  */\n#define\tDT_VERDEF\t0x6ffffffc\t/* Address of version definition\n\t\t\t\t\t   table */\n#define\tDT_VERDEFNUM\t0x6ffffffd\t/* Number of version definitions */\n#define\tDT_VERNEED\t0x6ffffffe\t/* Address of table with needed\n\t\t\t\t\t   versions */\n#define\tDT_VERNEEDNUM\t0x6fffffff\t/* Number of needed versions */\n#define DT_VERSIONTAGIDX(tag)\t(DT_VERNEEDNUM - (tag))\t/* Reverse order! */\n#define DT_VERSIONTAGNUM 16\n\n/* Sun added these machine-independent extensions in the \"processor-specific\"\n   range.  Be compatible.  */\n#define DT_AUXILIARY    0x7ffffffd      /* Shared object to load before self */\n#define DT_FILTER       0x7fffffff      /* Shared object to get values from */\n#define DT_EXTRATAGIDX(tag)\t((Elf32_Word)-((Elf32_Sword) (tag) <<1>>1)-1)\n#define DT_EXTRANUM\t3\n\n/* Values of `d_un.d_val' in the DT_FLAGS entry.  */\n#define DF_ORIGIN\t0x00000001\t/* Object may use DF_ORIGIN */\n#define DF_SYMBOLIC\t0x00000002\t/* Symbol resolutions starts here */\n#define DF_TEXTREL\t0x00000004\t/* Object contains text relocations */\n#define DF_BIND_NOW\t0x00000008\t/* No lazy binding for this object */\n#define DF_STATIC_TLS\t0x00000010\t/* Module uses the static TLS model */\n\n/* State flags selectable in the `d_un.d_val' element of the DT_FLAGS_1\n   entry in the dynamic section.  */\n#define DF_1_NOW\t0x00000001\t/* Set RTLD_NOW for this object.  */\n#define DF_1_GLOBAL\t0x00000002\t/* Set RTLD_GLOBAL for this object.  */\n#define DF_1_GROUP\t0x00000004\t/* Set RTLD_GROUP for this object.  */\n#define DF_1_NODELETE\t0x00000008\t/* Set RTLD_NODELETE for this object.*/\n#define DF_1_LOADFLTR\t0x00000010\t/* Trigger filtee loading at runtime.*/\n#define DF_1_INITFIRST\t0x00000020\t/* Set RTLD_INITFIRST for this object*/\n#define DF_1_NOOPEN\t0x00000040\t/* Set RTLD_NOOPEN for this object.  */\n#define DF_1_ORIGIN\t0x00000080\t/* $ORIGIN must be handled.  */\n#define DF_1_DIRECT\t0x00000100\t/* Direct binding enabled.  */\n#define DF_1_TRANS\t0x00000200\n#define DF_1_INTERPOSE\t0x00000400\t/* Object is used to interpose.  */\n#define DF_1_NODEFLIB\t0x00000800\t/* Ignore default lib search path.  */\n#define DF_1_NODUMP\t0x00001000\t/* Object can't be dldump'ed.  */\n#define DF_1_CONFALT\t0x00002000\t/* Configuration alternative created.*/\n#define DF_1_ENDFILTEE\t0x00004000\t/* Filtee terminates filters search. */\n#define\tDF_1_DISPRELDNE\t0x00008000\t/* Disp reloc applied at build time. */\n#define\tDF_1_DISPRELPND\t0x00010000\t/* Disp reloc applied at run-time.  */\n\n/* Flags for the feature selection in DT_FEATURE_1.  */\n#define DTF_1_PARINIT\t0x00000001\n#define DTF_1_CONFEXP\t0x00000002\n\n/* Flags in the DT_POSFLAG_1 entry effecting only the next DT_* entry.  */\n#define DF_P1_LAZYLOAD\t0x00000001\t/* Lazyload following object.  */\n#define DF_P1_GROUPPERM\t0x00000002\t/* Symbols from next object are not\n\t\t\t\t\t   generally available.  */\n\n/* Version definition sections.  */\n\ntypedef struct\n{\n  Elf32_Half\tvd_version;\t\t/* Version revision */\n  Elf32_Half\tvd_flags;\t\t/* Version information */\n  Elf32_Half\tvd_ndx;\t\t\t/* Version Index */\n  Elf32_Half\tvd_cnt;\t\t\t/* Number of associated aux entries */\n  Elf32_Word\tvd_hash;\t\t/* Version name hash value */\n  Elf32_Word\tvd_aux;\t\t\t/* Offset in bytes to verdaux array */\n  Elf32_Word\tvd_next;\t\t/* Offset in bytes to next verdef\n\t\t\t\t\t   entry */\n} Elf32_Verdef;\n\ntypedef struct\n{\n  Elf64_Half\tvd_version;\t\t/* Version revision */\n  Elf64_Half\tvd_flags;\t\t/* Version information */\n  Elf64_Half\tvd_ndx;\t\t\t/* Version Index */\n  Elf64_Half\tvd_cnt;\t\t\t/* Number of associated aux entries */\n  Elf64_Word\tvd_hash;\t\t/* Version name hash value */\n  Elf64_Word\tvd_aux;\t\t\t/* Offset in bytes to verdaux array */\n  Elf64_Word\tvd_next;\t\t/* Offset in bytes to next verdef\n\t\t\t\t\t   entry */\n} Elf64_Verdef;\n\n\n/* Legal values for vd_version (version revision).  */\n#define VER_DEF_NONE\t0\t\t/* No version */\n#define VER_DEF_CURRENT\t1\t\t/* Current version */\n#define VER_DEF_NUM\t2\t\t/* Given version number */\n\n/* Legal values for vd_flags (version information flags).  */\n#define VER_FLG_BASE\t0x1\t\t/* Version definition of file itself */\n#define VER_FLG_WEAK\t0x2\t\t/* Weak version identifier */\n\n/* Versym symbol index values.  */\n#define\tVER_NDX_LOCAL\t\t0\t/* Symbol is local.  */\n#define\tVER_NDX_GLOBAL\t\t1\t/* Symbol is global.  */\n#define\tVER_NDX_LORESERVE\t0xff00\t/* Beginning of reserved entries.  */\n#define\tVER_NDX_ELIMINATE\t0xff01\t/* Symbol is to be eliminated.  */\n\n/* Auxialiary version information.  */\n\ntypedef struct\n{\n  Elf32_Word\tvda_name;\t\t/* Version or dependency names */\n  Elf32_Word\tvda_next;\t\t/* Offset in bytes to next verdaux\n\t\t\t\t\t   entry */\n} Elf32_Verdaux;\n\ntypedef struct\n{\n  Elf64_Word\tvda_name;\t\t/* Version or dependency names */\n  Elf64_Word\tvda_next;\t\t/* Offset in bytes to next verdaux\n\t\t\t\t\t   entry */\n} Elf64_Verdaux;\n\n\n/* Version dependency section.  */\n\ntypedef struct\n{\n  Elf32_Half\tvn_version;\t\t/* Version of structure */\n  Elf32_Half\tvn_cnt;\t\t\t/* Number of associated aux entries */\n  Elf32_Word\tvn_file;\t\t/* Offset of filename for this\n\t\t\t\t\t   dependency */\n  Elf32_Word\tvn_aux;\t\t\t/* Offset in bytes to vernaux array */\n  Elf32_Word\tvn_next;\t\t/* Offset in bytes to next verneed\n\t\t\t\t\t   entry */\n} Elf32_Verneed;\n\ntypedef struct\n{\n  Elf64_Half\tvn_version;\t\t/* Version of structure */\n  Elf64_Half\tvn_cnt;\t\t\t/* Number of associated aux entries */\n  Elf64_Word\tvn_file;\t\t/* Offset of filename for this\n\t\t\t\t\t   dependency */\n  Elf64_Word\tvn_aux;\t\t\t/* Offset in bytes to vernaux array */\n  Elf64_Word\tvn_next;\t\t/* Offset in bytes to next verneed\n\t\t\t\t\t   entry */\n} Elf64_Verneed;\n\n\n/* Legal values for vn_version (version revision).  */\n#define VER_NEED_NONE\t 0\t\t/* No version */\n#define VER_NEED_CURRENT 1\t\t/* Current version */\n#define VER_NEED_NUM\t 2\t\t/* Given version number */\n\n/* Auxiliary needed version information.  */\n\ntypedef struct\n{\n  Elf32_Word\tvna_hash;\t\t/* Hash value of dependency name */\n  Elf32_Half\tvna_flags;\t\t/* Dependency specific information */\n  Elf32_Half\tvna_other;\t\t/* Unused */\n  Elf32_Word\tvna_name;\t\t/* Dependency name string offset */\n  Elf32_Word\tvna_next;\t\t/* Offset in bytes to next vernaux\n\t\t\t\t\t   entry */\n} Elf32_Vernaux;\n\ntypedef struct\n{\n  Elf64_Word\tvna_hash;\t\t/* Hash value of dependency name */\n  Elf64_Half\tvna_flags;\t\t/* Dependency specific information */\n  Elf64_Half\tvna_other;\t\t/* Unused */\n  Elf64_Word\tvna_name;\t\t/* Dependency name string offset */\n  Elf64_Word\tvna_next;\t\t/* Offset in bytes to next vernaux\n\t\t\t\t\t   entry */\n} Elf64_Vernaux;\n\n\n/* Legal values for vna_flags.  */\n#define VER_FLG_WEAK\t0x2\t\t/* Weak version identifier */\n\n\n/* Auxiliary vector.  */\n\n/* This vector is normally only used by the program interpreter.  The\n   usual definition in an ABI supplement uses the name auxv_t.  The\n   vector is not usually defined in a standard <elf.h> file, but it\n   can't hurt.  We rename it to avoid conflicts.  The sizes of these\n   types are an arrangement between the exec server and the program\n   interpreter, so we don't fully specify them here.  */\n\ntypedef struct\n{\n  uint32_t a_type;\t\t/* Entry type */\n  union\n    {\n      uint32_t a_val;\t\t/* Integer value */\n      /* We use to have pointer elements added here.  We cannot do that,\n\t though, since it does not work when using 32-bit definitions\n\t on 64-bit platforms and vice versa.  */\n    } a_un;\n} Elf32_auxv_t;\n\ntypedef struct\n{\n  uint64_t a_type;\t\t/* Entry type */\n  union\n    {\n      uint64_t a_val;\t\t/* Integer value */\n      /* We use to have pointer elements added here.  We cannot do that,\n\t though, since it does not work when using 32-bit definitions\n\t on 64-bit platforms and vice versa.  */\n    } a_un;\n} Elf64_auxv_t;\n\n/* Legal values for a_type (entry type).  */\n\n#define AT_NULL\t\t0\t\t/* End of vector */\n#define AT_IGNORE\t1\t\t/* Entry should be ignored */\n#define AT_EXECFD\t2\t\t/* File descriptor of program */\n#define AT_PHDR\t\t3\t\t/* Program headers for program */\n#define AT_PHENT\t4\t\t/* Size of program header entry */\n#define AT_PHNUM\t5\t\t/* Number of program headers */\n#define AT_PAGESZ\t6\t\t/* System page size */\n#define AT_BASE\t\t7\t\t/* Base address of interpreter */\n#define AT_FLAGS\t8\t\t/* Flags */\n#define AT_ENTRY\t9\t\t/* Entry point of program */\n#define AT_NOTELF\t10\t\t/* Program is not ELF */\n#define AT_UID\t\t11\t\t/* Real uid */\n#define AT_EUID\t\t12\t\t/* Effective uid */\n#define AT_GID\t\t13\t\t/* Real gid */\n#define AT_EGID\t\t14\t\t/* Effective gid */\n#define AT_CLKTCK\t17\t\t/* Frequency of times() */\n\n/* Some more special a_type values describing the hardware.  */\n#define AT_PLATFORM\t15\t\t/* String identifying platform.  */\n#define AT_HWCAP\t16\t\t/* Machine dependent hints about\n\t\t\t\t\t   processor capabilities.  */\n\n/* This entry gives some information about the FPU initialization\n   performed by the kernel.  */\n#define AT_FPUCW\t18\t\t/* Used FPU control word.  */\n\n/* Cache block sizes.  */\n#define AT_DCACHEBSIZE\t19\t\t/* Data cache block size.  */\n#define AT_ICACHEBSIZE\t20\t\t/* Instruction cache block size.  */\n#define AT_UCACHEBSIZE\t21\t\t/* Unified cache block size.  */\n\n/* A special ignored value for PPC, used by the kernel to control the\n   interpretation of the AUXV. Must be > 16.  */\n#define AT_IGNOREPPC\t22\t\t/* Entry should be ignored.  */\n\n#define\tAT_SECURE\t23\t\t/* Boolean, was exec setuid-like?  */\n\n#define AT_BASE_PLATFORM 24\t\t/* String identifying real platforms.*/\n\n#define AT_RANDOM\t25\t\t/* Address of 16 random bytes.  */\n\n#define AT_EXECFN\t31\t\t/* Filename of executable.  */\n\n/* Pointer to the global system page used for system calls and other\n   nice things.  */\n#define AT_SYSINFO\t32\n#define AT_SYSINFO_EHDR\t33\n\n/* Shapes of the caches.  Bits 0-3 contains associativity; bits 4-7 contains\n   log2 of line size; mask those to get cache size.  */\n#define AT_L1I_CACHESHAPE\t34\n#define AT_L1D_CACHESHAPE\t35\n#define AT_L2_CACHESHAPE\t36\n#define AT_L3_CACHESHAPE\t37\n\n/* Note section contents.  Each entry in the note section begins with\n   a header of a fixed form.  */\n\ntypedef struct\n{\n  Elf32_Word n_namesz;\t\t\t/* Length of the note's name.  */\n  Elf32_Word n_descsz;\t\t\t/* Length of the note's descriptor.  */\n  Elf32_Word n_type;\t\t\t/* Type of the note.  */\n} Elf32_Nhdr;\n\ntypedef struct\n{\n  Elf64_Word n_namesz;\t\t\t/* Length of the note's name.  */\n  Elf64_Word n_descsz;\t\t\t/* Length of the note's descriptor.  */\n  Elf64_Word n_type;\t\t\t/* Type of the note.  */\n} Elf64_Nhdr;\n\n/* Known names of notes.  */\n\n/* Solaris entries in the note section have this name.  */\n#define ELF_NOTE_SOLARIS\t\"SUNW Solaris\"\n\n/* Note entries for GNU systems have this name.  */\n#define ELF_NOTE_GNU\t\t\"GNU\"\n\n\n/* Defined types of notes for Solaris.  */\n\n/* Value of descriptor (one word) is desired pagesize for the binary.  */\n#define ELF_NOTE_PAGESIZE_HINT\t1\n\n\n/* Defined note types for GNU systems.  */\n\n/* ABI information.  The descriptor consists of words:\n   word 0: OS descriptor\n   word 1: major version of the ABI\n   word 2: minor version of the ABI\n   word 3: subminor version of the ABI\n*/\n#define NT_GNU_ABI_TAG\t1\n#define ELF_NOTE_ABI\tNT_GNU_ABI_TAG /* Old name.  */\n\n/* Known OSes.  These values can appear in word 0 of an\n   NT_GNU_ABI_TAG note section entry.  */\n#define ELF_NOTE_OS_LINUX\t0\n#define ELF_NOTE_OS_GNU\t\t1\n#define ELF_NOTE_OS_SOLARIS2\t2\n#define ELF_NOTE_OS_FREEBSD\t3\n\n/* Synthetic hwcap information.  The descriptor begins with two words:\n   word 0: number of entries\n   word 1: bitmask of enabled entries\n   Then follow variable-length entries, one byte followed by a\n   '\\0'-terminated hwcap name string.  The byte gives the bit\n   number to test if enabled, (1U << bit) & bitmask.  */\n#define NT_GNU_HWCAP\t2\n\n/* Build ID bits as generated by ld --build-id.\n   The descriptor consists of any nonzero number of bytes.  */\n#define NT_GNU_BUILD_ID\t3\n\n/* Version note generated by GNU gold containing a version string.  */\n#define NT_GNU_GOLD_VERSION\t4\n\n\n/* Move records.  */\ntypedef struct\n{\n  Elf32_Xword m_value;\t\t/* Symbol value.  */\n  Elf32_Word m_info;\t\t/* Size and index.  */\n  Elf32_Word m_poffset;\t\t/* Symbol offset.  */\n  Elf32_Half m_repeat;\t\t/* Repeat count.  */\n  Elf32_Half m_stride;\t\t/* Stride info.  */\n} Elf32_Move;\n\ntypedef struct\n{\n  Elf64_Xword m_value;\t\t/* Symbol value.  */\n  Elf64_Xword m_info;\t\t/* Size and index.  */\n  Elf64_Xword m_poffset;\t/* Symbol offset.  */\n  Elf64_Half m_repeat;\t\t/* Repeat count.  */\n  Elf64_Half m_stride;\t\t/* Stride info.  */\n} Elf64_Move;\n\n/* Macro to construct move records.  */\n#define ELF32_M_SYM(info)\t((info) >> 8)\n#define ELF32_M_SIZE(info)\t((unsigned char) (info))\n#define ELF32_M_INFO(sym, size)\t(((sym) << 8) + (unsigned char) (size))\n\n#define ELF64_M_SYM(info)\tELF32_M_SYM (info)\n#define ELF64_M_SIZE(info)\tELF32_M_SIZE (info)\n#define ELF64_M_INFO(sym, size)\tELF32_M_INFO (sym, size)\n\n\n/* Motorola 68k specific definitions.  */\n\n/* Values for Elf32_Ehdr.e_flags.  */\n#define EF_CPU32\t0x00810000\n\n/* m68k relocs.  */\n\n#define R_68K_NONE\t0\t\t/* No reloc */\n#define R_68K_32\t1\t\t/* Direct 32 bit  */\n#define R_68K_16\t2\t\t/* Direct 16 bit  */\n#define R_68K_8\t\t3\t\t/* Direct 8 bit  */\n#define R_68K_PC32\t4\t\t/* PC relative 32 bit */\n#define R_68K_PC16\t5\t\t/* PC relative 16 bit */\n#define R_68K_PC8\t6\t\t/* PC relative 8 bit */\n#define R_68K_GOT32\t7\t\t/* 32 bit PC relative GOT entry */\n#define R_68K_GOT16\t8\t\t/* 16 bit PC relative GOT entry */\n#define R_68K_GOT8\t9\t\t/* 8 bit PC relative GOT entry */\n#define R_68K_GOT32O\t10\t\t/* 32 bit GOT offset */\n#define R_68K_GOT16O\t11\t\t/* 16 bit GOT offset */\n#define R_68K_GOT8O\t12\t\t/* 8 bit GOT offset */\n#define R_68K_PLT32\t13\t\t/* 32 bit PC relative PLT address */\n#define R_68K_PLT16\t14\t\t/* 16 bit PC relative PLT address */\n#define R_68K_PLT8\t15\t\t/* 8 bit PC relative PLT address */\n#define R_68K_PLT32O\t16\t\t/* 32 bit PLT offset */\n#define R_68K_PLT16O\t17\t\t/* 16 bit PLT offset */\n#define R_68K_PLT8O\t18\t\t/* 8 bit PLT offset */\n#define R_68K_COPY\t19\t\t/* Copy symbol at runtime */\n#define R_68K_GLOB_DAT\t20\t\t/* Create GOT entry */\n#define R_68K_JMP_SLOT\t21\t\t/* Create PLT entry */\n#define R_68K_RELATIVE\t22\t\t/* Adjust by program base */\n#define R_68K_TLS_GD32      25          /* 32 bit GOT offset for GD */\n#define R_68K_TLS_GD16      26          /* 16 bit GOT offset for GD */\n#define R_68K_TLS_GD8       27          /* 8 bit GOT offset for GD */\n#define R_68K_TLS_LDM32     28          /* 32 bit GOT offset for LDM */\n#define R_68K_TLS_LDM16     29          /* 16 bit GOT offset for LDM */\n#define R_68K_TLS_LDM8      30          /* 8 bit GOT offset for LDM */\n#define R_68K_TLS_LDO32     31          /* 32 bit module-relative offset */\n#define R_68K_TLS_LDO16     32          /* 16 bit module-relative offset */\n#define R_68K_TLS_LDO8      33          /* 8 bit module-relative offset */\n#define R_68K_TLS_IE32      34          /* 32 bit GOT offset for IE */\n#define R_68K_TLS_IE16      35          /* 16 bit GOT offset for IE */\n#define R_68K_TLS_IE8       36          /* 8 bit GOT offset for IE */\n#define R_68K_TLS_LE32      37          /* 32 bit offset relative to\n\t\t\t\t\t   static TLS block */\n#define R_68K_TLS_LE16      38          /* 16 bit offset relative to\n\t\t\t\t\t   static TLS block */\n#define R_68K_TLS_LE8       39          /* 8 bit offset relative to\n\t\t\t\t\t   static TLS block */\n#define R_68K_TLS_DTPMOD32  40          /* 32 bit module number */\n#define R_68K_TLS_DTPREL32  41          /* 32 bit module-relative offset */\n#define R_68K_TLS_TPREL32   42          /* 32 bit TP-relative offset */\n/* Keep this the last entry.  */\n#define R_68K_NUM\t43\n\n/* Intel 80386 specific definitions.  */\n\n/* i386 relocs.  */\n\n#define R_386_NONE\t   0\t\t/* No reloc */\n#define R_386_32\t   1\t\t/* Direct 32 bit  */\n#define R_386_PC32\t   2\t\t/* PC relative 32 bit */\n#define R_386_GOT32\t   3\t\t/* 32 bit GOT entry */\n#define R_386_PLT32\t   4\t\t/* 32 bit PLT address */\n#define R_386_COPY\t   5\t\t/* Copy symbol at runtime */\n#define R_386_GLOB_DAT\t   6\t\t/* Create GOT entry */\n#define R_386_JMP_SLOT\t   7\t\t/* Create PLT entry */\n#define R_386_RELATIVE\t   8\t\t/* Adjust by program base */\n#define R_386_GOTOFF\t   9\t\t/* 32 bit offset to GOT */\n#define R_386_GOTPC\t   10\t\t/* 32 bit PC relative offset to GOT */\n#define R_386_32PLT\t   11\n#define R_386_TLS_TPOFF\t   14\t\t/* Offset in static TLS block */\n#define R_386_TLS_IE\t   15\t\t/* Address of GOT entry for static TLS\n\t\t\t\t\t   block offset */\n#define R_386_TLS_GOTIE\t   16\t\t/* GOT entry for static TLS block\n\t\t\t\t\t   offset */\n#define R_386_TLS_LE\t   17\t\t/* Offset relative to static TLS\n\t\t\t\t\t   block */\n#define R_386_TLS_GD\t   18\t\t/* Direct 32 bit for GNU version of\n\t\t\t\t\t   general dynamic thread local data */\n#define R_386_TLS_LDM\t   19\t\t/* Direct 32 bit for GNU version of\n\t\t\t\t\t   local dynamic thread local data\n\t\t\t\t\t   in LE code */\n#define R_386_16\t   20\n#define R_386_PC16\t   21\n#define R_386_8\t\t   22\n#define R_386_PC8\t   23\n#define R_386_TLS_GD_32\t   24\t\t/* Direct 32 bit for general dynamic\n\t\t\t\t\t   thread local data */\n#define R_386_TLS_GD_PUSH  25\t\t/* Tag for pushl in GD TLS code */\n#define R_386_TLS_GD_CALL  26\t\t/* Relocation for call to\n\t\t\t\t\t   __tls_get_addr() */\n#define R_386_TLS_GD_POP   27\t\t/* Tag for popl in GD TLS code */\n#define R_386_TLS_LDM_32   28\t\t/* Direct 32 bit for local dynamic\n\t\t\t\t\t   thread local data in LE code */\n#define R_386_TLS_LDM_PUSH 29\t\t/* Tag for pushl in LDM TLS code */\n#define R_386_TLS_LDM_CALL 30\t\t/* Relocation for call to\n\t\t\t\t\t   __tls_get_addr() in LDM code */\n#define R_386_TLS_LDM_POP  31\t\t/* Tag for popl in LDM TLS code */\n#define R_386_TLS_LDO_32   32\t\t/* Offset relative to TLS block */\n#define R_386_TLS_IE_32\t   33\t\t/* GOT entry for negated static TLS\n\t\t\t\t\t   block offset */\n#define R_386_TLS_LE_32\t   34\t\t/* Negated offset relative to static\n\t\t\t\t\t   TLS block */\n#define R_386_TLS_DTPMOD32 35\t\t/* ID of module containing symbol */\n#define R_386_TLS_DTPOFF32 36\t\t/* Offset in TLS block */\n#define R_386_TLS_TPOFF32  37\t\t/* Negated offset in static TLS block */\n/* 38? */\n#define R_386_TLS_GOTDESC  39\t\t/* GOT offset for TLS descriptor.  */\n#define R_386_TLS_DESC_CALL 40\t\t/* Marker of call through TLS\n\t\t\t\t\t   descriptor for\n\t\t\t\t\t   relaxation.  */\n#define R_386_TLS_DESC     41\t\t/* TLS descriptor containing\n\t\t\t\t\t   pointer to code and to\n\t\t\t\t\t   argument, returning the TLS\n\t\t\t\t\t   offset for the symbol.  */\n#define R_386_IRELATIVE\t   42\t\t/* Adjust indirectly by program base */\n/* Keep this the last entry.  */\n#define R_386_NUM\t   43\n\n/* SUN SPARC specific definitions.  */\n\n/* Legal values for ST_TYPE subfield of st_info (symbol type).  */\n\n#define STT_SPARC_REGISTER\t13\t/* Global register reserved to app. */\n\n/* Values for Elf64_Ehdr.e_flags.  */\n\n#define EF_SPARCV9_MM\t\t3\n#define EF_SPARCV9_TSO\t\t0\n#define EF_SPARCV9_PSO\t\t1\n#define EF_SPARCV9_RMO\t\t2\n#define EF_SPARC_LEDATA\t\t0x800000 /* little endian data */\n#define EF_SPARC_EXT_MASK\t0xFFFF00\n#define EF_SPARC_32PLUS\t\t0x000100 /* generic V8+ features */\n#define EF_SPARC_SUN_US1\t0x000200 /* Sun UltraSPARC1 extensions */\n#define EF_SPARC_HAL_R1\t\t0x000400 /* HAL R1 extensions */\n#define EF_SPARC_SUN_US3\t0x000800 /* Sun UltraSPARCIII extensions */\n\n/* SPARC relocs.  */\n\n#define R_SPARC_NONE\t\t0\t/* No reloc */\n#define R_SPARC_8\t\t1\t/* Direct 8 bit */\n#define R_SPARC_16\t\t2\t/* Direct 16 bit */\n#define R_SPARC_32\t\t3\t/* Direct 32 bit */\n#define R_SPARC_DISP8\t\t4\t/* PC relative 8 bit */\n#define R_SPARC_DISP16\t\t5\t/* PC relative 16 bit */\n#define R_SPARC_DISP32\t\t6\t/* PC relative 32 bit */\n#define R_SPARC_WDISP30\t\t7\t/* PC relative 30 bit shifted */\n#define R_SPARC_WDISP22\t\t8\t/* PC relative 22 bit shifted */\n#define R_SPARC_HI22\t\t9\t/* High 22 bit */\n#define R_SPARC_22\t\t10\t/* Direct 22 bit */\n#define R_SPARC_13\t\t11\t/* Direct 13 bit */\n#define R_SPARC_LO10\t\t12\t/* Truncated 10 bit */\n#define R_SPARC_GOT10\t\t13\t/* Truncated 10 bit GOT entry */\n#define R_SPARC_GOT13\t\t14\t/* 13 bit GOT entry */\n#define R_SPARC_GOT22\t\t15\t/* 22 bit GOT entry shifted */\n#define R_SPARC_PC10\t\t16\t/* PC relative 10 bit truncated */\n#define R_SPARC_PC22\t\t17\t/* PC relative 22 bit shifted */\n#define R_SPARC_WPLT30\t\t18\t/* 30 bit PC relative PLT address */\n#define R_SPARC_COPY\t\t19\t/* Copy symbol at runtime */\n#define R_SPARC_GLOB_DAT\t20\t/* Create GOT entry */\n#define R_SPARC_JMP_SLOT\t21\t/* Create PLT entry */\n#define R_SPARC_RELATIVE\t22\t/* Adjust by program base */\n#define R_SPARC_UA32\t\t23\t/* Direct 32 bit unaligned */\n\n/* Additional Sparc64 relocs.  */\n\n#define R_SPARC_PLT32\t\t24\t/* Direct 32 bit ref to PLT entry */\n#define R_SPARC_HIPLT22\t\t25\t/* High 22 bit PLT entry */\n#define R_SPARC_LOPLT10\t\t26\t/* Truncated 10 bit PLT entry */\n#define R_SPARC_PCPLT32\t\t27\t/* PC rel 32 bit ref to PLT entry */\n#define R_SPARC_PCPLT22\t\t28\t/* PC rel high 22 bit PLT entry */\n#define R_SPARC_PCPLT10\t\t29\t/* PC rel trunc 10 bit PLT entry */\n#define R_SPARC_10\t\t30\t/* Direct 10 bit */\n#define R_SPARC_11\t\t31\t/* Direct 11 bit */\n#define R_SPARC_64\t\t32\t/* Direct 64 bit */\n#define R_SPARC_OLO10\t\t33\t/* 10bit with secondary 13bit addend */\n#define R_SPARC_HH22\t\t34\t/* Top 22 bits of direct 64 bit */\n#define R_SPARC_HM10\t\t35\t/* High middle 10 bits of ... */\n#define R_SPARC_LM22\t\t36\t/* Low middle 22 bits of ... */\n#define R_SPARC_PC_HH22\t\t37\t/* Top 22 bits of pc rel 64 bit */\n#define R_SPARC_PC_HM10\t\t38\t/* High middle 10 bit of ... */\n#define R_SPARC_PC_LM22\t\t39\t/* Low miggle 22 bits of ... */\n#define R_SPARC_WDISP16\t\t40\t/* PC relative 16 bit shifted */\n#define R_SPARC_WDISP19\t\t41\t/* PC relative 19 bit shifted */\n#define R_SPARC_GLOB_JMP\t42\t/* was part of v9 ABI but was removed */\n#define R_SPARC_7\t\t43\t/* Direct 7 bit */\n#define R_SPARC_5\t\t44\t/* Direct 5 bit */\n#define R_SPARC_6\t\t45\t/* Direct 6 bit */\n#define R_SPARC_DISP64\t\t46\t/* PC relative 64 bit */\n#define R_SPARC_PLT64\t\t47\t/* Direct 64 bit ref to PLT entry */\n#define R_SPARC_HIX22\t\t48\t/* High 22 bit complemented */\n#define R_SPARC_LOX10\t\t49\t/* Truncated 11 bit complemented */\n#define R_SPARC_H44\t\t50\t/* Direct high 12 of 44 bit */\n#define R_SPARC_M44\t\t51\t/* Direct mid 22 of 44 bit */\n#define R_SPARC_L44\t\t52\t/* Direct low 10 of 44 bit */\n#define R_SPARC_REGISTER\t53\t/* Global register usage */\n#define R_SPARC_UA64\t\t54\t/* Direct 64 bit unaligned */\n#define R_SPARC_UA16\t\t55\t/* Direct 16 bit unaligned */\n#define R_SPARC_TLS_GD_HI22\t56\n#define R_SPARC_TLS_GD_LO10\t57\n#define R_SPARC_TLS_GD_ADD\t58\n#define R_SPARC_TLS_GD_CALL\t59\n#define R_SPARC_TLS_LDM_HI22\t60\n#define R_SPARC_TLS_LDM_LO10\t61\n#define R_SPARC_TLS_LDM_ADD\t62\n#define R_SPARC_TLS_LDM_CALL\t63\n#define R_SPARC_TLS_LDO_HIX22\t64\n#define R_SPARC_TLS_LDO_LOX10\t65\n#define R_SPARC_TLS_LDO_ADD\t66\n#define R_SPARC_TLS_IE_HI22\t67\n#define R_SPARC_TLS_IE_LO10\t68\n#define R_SPARC_TLS_IE_LD\t69\n#define R_SPARC_TLS_IE_LDX\t70\n#define R_SPARC_TLS_IE_ADD\t71\n#define R_SPARC_TLS_LE_HIX22\t72\n#define R_SPARC_TLS_LE_LOX10\t73\n#define R_SPARC_TLS_DTPMOD32\t74\n#define R_SPARC_TLS_DTPMOD64\t75\n#define R_SPARC_TLS_DTPOFF32\t76\n#define R_SPARC_TLS_DTPOFF64\t77\n#define R_SPARC_TLS_TPOFF32\t78\n#define R_SPARC_TLS_TPOFF64\t79\n#define R_SPARC_GOTDATA_HIX22\t80\n#define R_SPARC_GOTDATA_LOX10\t81\n#define R_SPARC_GOTDATA_OP_HIX22\t82\n#define R_SPARC_GOTDATA_OP_LOX10\t83\n#define R_SPARC_GOTDATA_OP\t84\n#define R_SPARC_H34\t\t85\n#define R_SPARC_SIZE32\t\t86\n#define R_SPARC_SIZE64\t\t87\n#define R_SPARC_JMP_IREL\t248\n#define R_SPARC_IRELATIVE\t249\n#define R_SPARC_GNU_VTINHERIT\t250\n#define R_SPARC_GNU_VTENTRY\t251\n#define R_SPARC_REV32\t\t252\n/* Keep this the last entry.  */\n#define R_SPARC_NUM\t\t253\n\n/* For Sparc64, legal values for d_tag of Elf64_Dyn.  */\n\n#define DT_SPARC_REGISTER 0x70000001\n#define DT_SPARC_NUM\t2\n\n/* Bits present in AT_HWCAP on SPARC.  */\n\n#define HWCAP_SPARC_FLUSH\t1\t/* The CPU supports flush insn.  */\n#define HWCAP_SPARC_STBAR\t2\n#define HWCAP_SPARC_SWAP\t4\n#define HWCAP_SPARC_MULDIV\t8\n#define HWCAP_SPARC_V9\t\t16\t/* The CPU is v9, so v8plus is ok.  */\n#define HWCAP_SPARC_ULTRA3\t32\n#define HWCAP_SPARC_BLKINIT\t64\t/* Sun4v with block-init/load-twin.  */\n#define HWCAP_SPARC_N2\t\t128\n\n/* MIPS R3000 specific definitions.  */\n\n/* Legal values for e_flags field of Elf32_Ehdr.  */\n\n#define EF_MIPS_NOREORDER   1\t\t/* A .noreorder directive was used */\n#define EF_MIPS_PIC\t    2\t\t/* Contains PIC code */\n#define EF_MIPS_CPIC\t    4\t\t/* Uses PIC calling sequence */\n#define EF_MIPS_XGOT\t    8\n#define EF_MIPS_64BIT_WHIRL 16\n#define EF_MIPS_ABI2\t    32\n#define EF_MIPS_ABI_ON32    64\n#define EF_MIPS_ARCH\t    0xf0000000\t/* MIPS architecture level */\n\n/* Legal values for MIPS architecture level.  */\n\n#define EF_MIPS_ARCH_1\t    0x00000000\t/* -mips1 code.  */\n#define EF_MIPS_ARCH_2\t    0x10000000\t/* -mips2 code.  */\n#define EF_MIPS_ARCH_3\t    0x20000000\t/* -mips3 code.  */\n#define EF_MIPS_ARCH_4\t    0x30000000\t/* -mips4 code.  */\n#define EF_MIPS_ARCH_5\t    0x40000000\t/* -mips5 code.  */\n#define EF_MIPS_ARCH_32\t    0x60000000\t/* MIPS32 code.  */\n#define EF_MIPS_ARCH_64\t    0x70000000\t/* MIPS64 code.  */\n\n/* The following are non-official names and should not be used.  */\n\n#define E_MIPS_ARCH_1\t  0x00000000\t/* -mips1 code.  */\n#define E_MIPS_ARCH_2\t  0x10000000\t/* -mips2 code.  */\n#define E_MIPS_ARCH_3\t  0x20000000\t/* -mips3 code.  */\n#define E_MIPS_ARCH_4\t  0x30000000\t/* -mips4 code.  */\n#define E_MIPS_ARCH_5\t  0x40000000\t/* -mips5 code.  */\n#define E_MIPS_ARCH_32\t  0x60000000\t/* MIPS32 code.  */\n#define E_MIPS_ARCH_64\t  0x70000000\t/* MIPS64 code.  */\n\n/* Special section indices.  */\n\n#define SHN_MIPS_ACOMMON    0xff00\t/* Allocated common symbols */\n#define SHN_MIPS_TEXT\t    0xff01\t/* Allocated test symbols.  */\n#define SHN_MIPS_DATA\t    0xff02\t/* Allocated data symbols.  */\n#define SHN_MIPS_SCOMMON    0xff03\t/* Small common symbols */\n#define SHN_MIPS_SUNDEFINED 0xff04\t/* Small undefined symbols */\n\n/* Legal values for sh_type field of Elf32_Shdr.  */\n\n#define SHT_MIPS_LIBLIST       0x70000000 /* Shared objects used in link */\n#define SHT_MIPS_MSYM\t       0x70000001\n#define SHT_MIPS_CONFLICT      0x70000002 /* Conflicting symbols */\n#define SHT_MIPS_GPTAB\t       0x70000003 /* Global data area sizes */\n#define SHT_MIPS_UCODE\t       0x70000004 /* Reserved for SGI/MIPS compilers */\n#define SHT_MIPS_DEBUG\t       0x70000005 /* MIPS ECOFF debugging information*/\n#define SHT_MIPS_REGINFO       0x70000006 /* Register usage information */\n#define SHT_MIPS_PACKAGE       0x70000007\n#define SHT_MIPS_PACKSYM       0x70000008\n#define SHT_MIPS_RELD\t       0x70000009\n#define SHT_MIPS_IFACE         0x7000000b\n#define SHT_MIPS_CONTENT       0x7000000c\n#define SHT_MIPS_OPTIONS       0x7000000d /* Miscellaneous options.  */\n#define SHT_MIPS_SHDR\t       0x70000010\n#define SHT_MIPS_FDESC\t       0x70000011\n#define SHT_MIPS_EXTSYM\t       0x70000012\n#define SHT_MIPS_DENSE\t       0x70000013\n#define SHT_MIPS_PDESC\t       0x70000014\n#define SHT_MIPS_LOCSYM\t       0x70000015\n#define SHT_MIPS_AUXSYM\t       0x70000016\n#define SHT_MIPS_OPTSYM\t       0x70000017\n#define SHT_MIPS_LOCSTR\t       0x70000018\n#define SHT_MIPS_LINE\t       0x70000019\n#define SHT_MIPS_RFDESC\t       0x7000001a\n#define SHT_MIPS_DELTASYM      0x7000001b\n#define SHT_MIPS_DELTAINST     0x7000001c\n#define SHT_MIPS_DELTACLASS    0x7000001d\n#define SHT_MIPS_DWARF         0x7000001e /* DWARF debugging information.  */\n#define SHT_MIPS_DELTADECL     0x7000001f\n#define SHT_MIPS_SYMBOL_LIB    0x70000020\n#define SHT_MIPS_EVENTS\t       0x70000021 /* Event section.  */\n#define SHT_MIPS_TRANSLATE     0x70000022\n#define SHT_MIPS_PIXIE\t       0x70000023\n#define SHT_MIPS_XLATE\t       0x70000024\n#define SHT_MIPS_XLATE_DEBUG   0x70000025\n#define SHT_MIPS_WHIRL\t       0x70000026\n#define SHT_MIPS_EH_REGION     0x70000027\n#define SHT_MIPS_XLATE_OLD     0x70000028\n#define SHT_MIPS_PDR_EXCEPTION 0x70000029\n\n/* Legal values for sh_flags field of Elf32_Shdr.  */\n\n#define SHF_MIPS_GPREL\t 0x10000000\t/* Must be part of global data area */\n#define SHF_MIPS_MERGE\t 0x20000000\n#define SHF_MIPS_ADDR\t 0x40000000\n#define SHF_MIPS_STRINGS 0x80000000\n#define SHF_MIPS_NOSTRIP 0x08000000\n#define SHF_MIPS_LOCAL\t 0x04000000\n#define SHF_MIPS_NAMES\t 0x02000000\n#define SHF_MIPS_NODUPE\t 0x01000000\n\n\n/* Symbol tables.  */\n\n/* MIPS specific values for `st_other'.  */\n#define STO_MIPS_DEFAULT\t\t0x0\n#define STO_MIPS_INTERNAL\t\t0x1\n#define STO_MIPS_HIDDEN\t\t\t0x2\n#define STO_MIPS_PROTECTED\t\t0x3\n#define STO_MIPS_PLT\t\t\t0x8\n#define STO_MIPS_SC_ALIGN_UNUSED\t0xff\n\n/* MIPS specific values for `st_info'.  */\n#define STB_MIPS_SPLIT_COMMON\t\t13\n\n/* Entries found in sections of type SHT_MIPS_GPTAB.  */\n\ntypedef union\n{\n  struct\n    {\n      Elf32_Word gt_current_g_value;\t/* -G value used for compilation */\n      Elf32_Word gt_unused;\t\t/* Not used */\n    } gt_header;\t\t\t/* First entry in section */\n  struct\n    {\n      Elf32_Word gt_g_value;\t\t/* If this value were used for -G */\n      Elf32_Word gt_bytes;\t\t/* This many bytes would be used */\n    } gt_entry;\t\t\t\t/* Subsequent entries in section */\n} Elf32_gptab;\n\n/* Entry found in sections of type SHT_MIPS_REGINFO.  */\n\ntypedef struct\n{\n  Elf32_Word\tri_gprmask;\t\t/* General registers used */\n  Elf32_Word\tri_cprmask[4];\t\t/* Coprocessor registers used */\n  Elf32_Sword\tri_gp_value;\t\t/* $gp register value */\n} Elf32_RegInfo;\n\n/* Entries found in sections of type SHT_MIPS_OPTIONS.  */\n\ntypedef struct\n{\n  unsigned char kind;\t\t/* Determines interpretation of the\n\t\t\t\t   variable part of descriptor.  */\n  unsigned char size;\t\t/* Size of descriptor, including header.  */\n  Elf32_Section section;\t/* Section header index of section affected,\n\t\t\t\t   0 for global options.  */\n  Elf32_Word info;\t\t/* Kind-specific information.  */\n} Elf_Options;\n\n/* Values for `kind' field in Elf_Options.  */\n\n#define ODK_NULL\t0\t/* Undefined.  */\n#define ODK_REGINFO\t1\t/* Register usage information.  */\n#define ODK_EXCEPTIONS\t2\t/* Exception processing options.  */\n#define ODK_PAD\t\t3\t/* Section padding options.  */\n#define ODK_HWPATCH\t4\t/* Hardware workarounds performed */\n#define ODK_FILL\t5\t/* record the fill value used by the linker. */\n#define ODK_TAGS\t6\t/* reserve space for desktop tools to write. */\n#define ODK_HWAND\t7\t/* HW workarounds.  'AND' bits when merging. */\n#define ODK_HWOR\t8\t/* HW workarounds.  'OR' bits when merging.  */\n\n/* Values for `info' in Elf_Options for ODK_EXCEPTIONS entries.  */\n\n#define OEX_FPU_MIN\t0x1f\t/* FPE's which MUST be enabled.  */\n#define OEX_FPU_MAX\t0x1f00\t/* FPE's which MAY be enabled.  */\n#define OEX_PAGE0\t0x10000\t/* page zero must be mapped.  */\n#define OEX_SMM\t\t0x20000\t/* Force sequential memory mode?  */\n#define OEX_FPDBUG\t0x40000\t/* Force floating point debug mode?  */\n#define OEX_PRECISEFP\tOEX_FPDBUG\n#define OEX_DISMISS\t0x80000\t/* Dismiss invalid address faults?  */\n\n#define OEX_FPU_INVAL\t0x10\n#define OEX_FPU_DIV0\t0x08\n#define OEX_FPU_OFLO\t0x04\n#define OEX_FPU_UFLO\t0x02\n#define OEX_FPU_INEX\t0x01\n\n/* Masks for `info' in Elf_Options for an ODK_HWPATCH entry.  */\n\n#define OHW_R4KEOP\t0x1\t/* R4000 end-of-page patch.  */\n#define OHW_R8KPFETCH\t0x2\t/* may need R8000 prefetch patch.  */\n#define OHW_R5KEOP\t0x4\t/* R5000 end-of-page patch.  */\n#define OHW_R5KCVTL\t0x8\t/* R5000 cvt.[ds].l bug.  clean=1.  */\n\n#define OPAD_PREFIX\t0x1\n#define OPAD_POSTFIX\t0x2\n#define OPAD_SYMBOL\t0x4\n\n/* Entry found in `.options' section.  */\n\ntypedef struct\n{\n  Elf32_Word hwp_flags1;\t/* Extra flags.  */\n  Elf32_Word hwp_flags2;\t/* Extra flags.  */\n} Elf_Options_Hw;\n\n/* Masks for `info' in ElfOptions for ODK_HWAND and ODK_HWOR entries.  */\n\n#define OHWA0_R4KEOP_CHECKED\t0x00000001\n#define OHWA1_R4KEOP_CLEAN\t0x00000002\n\n/* MIPS relocs.  */\n\n#define R_MIPS_NONE\t\t0\t/* No reloc */\n#define R_MIPS_16\t\t1\t/* Direct 16 bit */\n#define R_MIPS_32\t\t2\t/* Direct 32 bit */\n#define R_MIPS_REL32\t\t3\t/* PC relative 32 bit */\n#define R_MIPS_26\t\t4\t/* Direct 26 bit shifted */\n#define R_MIPS_HI16\t\t5\t/* High 16 bit */\n#define R_MIPS_LO16\t\t6\t/* Low 16 bit */\n#define R_MIPS_GPREL16\t\t7\t/* GP relative 16 bit */\n#define R_MIPS_LITERAL\t\t8\t/* 16 bit literal entry */\n#define R_MIPS_GOT16\t\t9\t/* 16 bit GOT entry */\n#define R_MIPS_PC16\t\t10\t/* PC relative 16 bit */\n#define R_MIPS_CALL16\t\t11\t/* 16 bit GOT entry for function */\n#define R_MIPS_GPREL32\t\t12\t/* GP relative 32 bit */\n\n#define R_MIPS_SHIFT5\t\t16\n#define R_MIPS_SHIFT6\t\t17\n#define R_MIPS_64\t\t18\n#define R_MIPS_GOT_DISP\t\t19\n#define R_MIPS_GOT_PAGE\t\t20\n#define R_MIPS_GOT_OFST\t\t21\n#define R_MIPS_GOT_HI16\t\t22\n#define R_MIPS_GOT_LO16\t\t23\n#define R_MIPS_SUB\t\t24\n#define R_MIPS_INSERT_A\t\t25\n#define R_MIPS_INSERT_B\t\t26\n#define R_MIPS_DELETE\t\t27\n#define R_MIPS_HIGHER\t\t28\n#define R_MIPS_HIGHEST\t\t29\n#define R_MIPS_CALL_HI16\t30\n#define R_MIPS_CALL_LO16\t31\n#define R_MIPS_SCN_DISP\t\t32\n#define R_MIPS_REL16\t\t33\n#define R_MIPS_ADD_IMMEDIATE\t34\n#define R_MIPS_PJUMP\t\t35\n#define R_MIPS_RELGOT\t\t36\n#define R_MIPS_JALR\t\t37\n#define R_MIPS_TLS_DTPMOD32\t38\t/* Module number 32 bit */\n#define R_MIPS_TLS_DTPREL32\t39\t/* Module-relative offset 32 bit */\n#define R_MIPS_TLS_DTPMOD64\t40\t/* Module number 64 bit */\n#define R_MIPS_TLS_DTPREL64\t41\t/* Module-relative offset 64 bit */\n#define R_MIPS_TLS_GD\t\t42\t/* 16 bit GOT offset for GD */\n#define R_MIPS_TLS_LDM\t\t43\t/* 16 bit GOT offset for LDM */\n#define R_MIPS_TLS_DTPREL_HI16\t44\t/* Module-relative offset, high 16 bits */\n#define R_MIPS_TLS_DTPREL_LO16\t45\t/* Module-relative offset, low 16 bits */\n#define R_MIPS_TLS_GOTTPREL\t46\t/* 16 bit GOT offset for IE */\n#define R_MIPS_TLS_TPREL32\t47\t/* TP-relative offset, 32 bit */\n#define R_MIPS_TLS_TPREL64\t48\t/* TP-relative offset, 64 bit */\n#define R_MIPS_TLS_TPREL_HI16\t49\t/* TP-relative offset, high 16 bits */\n#define R_MIPS_TLS_TPREL_LO16\t50\t/* TP-relative offset, low 16 bits */\n#define R_MIPS_GLOB_DAT\t\t51\n#define R_MIPS_COPY\t\t126\n#define R_MIPS_JUMP_SLOT        127\n/* Keep this the last entry.  */\n#define R_MIPS_NUM\t\t128\n\n/* Legal values for p_type field of Elf32_Phdr.  */\n\n#define PT_MIPS_REGINFO\t0x70000000\t/* Register usage information */\n#define PT_MIPS_RTPROC  0x70000001\t/* Runtime procedure table. */\n#define PT_MIPS_OPTIONS 0x70000002\n\n/* Special program header types.  */\n\n#define PF_MIPS_LOCAL\t0x10000000\n\n/* Legal values for d_tag field of Elf32_Dyn.  */\n\n#define DT_MIPS_RLD_VERSION  0x70000001\t/* Runtime linker interface version */\n#define DT_MIPS_TIME_STAMP   0x70000002\t/* Timestamp */\n#define DT_MIPS_ICHECKSUM    0x70000003\t/* Checksum */\n#define DT_MIPS_IVERSION     0x70000004\t/* Version string (string tbl index) */\n#define DT_MIPS_FLAGS\t     0x70000005\t/* Flags */\n#define DT_MIPS_BASE_ADDRESS 0x70000006\t/* Base address */\n#define DT_MIPS_MSYM\t     0x70000007\n#define DT_MIPS_CONFLICT     0x70000008\t/* Address of CONFLICT section */\n#define DT_MIPS_LIBLIST\t     0x70000009\t/* Address of LIBLIST section */\n#define DT_MIPS_LOCAL_GOTNO  0x7000000a\t/* Number of local GOT entries */\n#define DT_MIPS_CONFLICTNO   0x7000000b\t/* Number of CONFLICT entries */\n#define DT_MIPS_LIBLISTNO    0x70000010\t/* Number of LIBLIST entries */\n#define DT_MIPS_SYMTABNO     0x70000011\t/* Number of DYNSYM entries */\n#define DT_MIPS_UNREFEXTNO   0x70000012\t/* First external DYNSYM */\n#define DT_MIPS_GOTSYM\t     0x70000013\t/* First GOT entry in DYNSYM */\n#define DT_MIPS_HIPAGENO     0x70000014\t/* Number of GOT page table entries */\n#define DT_MIPS_RLD_MAP\t     0x70000016\t/* Address of run time loader map.  */\n#define DT_MIPS_DELTA_CLASS  0x70000017\t/* Delta C++ class definition.  */\n#define DT_MIPS_DELTA_CLASS_NO    0x70000018 /* Number of entries in\n\t\t\t\t\t\tDT_MIPS_DELTA_CLASS.  */\n#define DT_MIPS_DELTA_INSTANCE    0x70000019 /* Delta C++ class instances.  */\n#define DT_MIPS_DELTA_INSTANCE_NO 0x7000001a /* Number of entries in\n\t\t\t\t\t\tDT_MIPS_DELTA_INSTANCE.  */\n#define DT_MIPS_DELTA_RELOC  0x7000001b /* Delta relocations.  */\n#define DT_MIPS_DELTA_RELOC_NO 0x7000001c /* Number of entries in\n\t\t\t\t\t     DT_MIPS_DELTA_RELOC.  */\n#define DT_MIPS_DELTA_SYM    0x7000001d /* Delta symbols that Delta\n\t\t\t\t\t   relocations refer to.  */\n#define DT_MIPS_DELTA_SYM_NO 0x7000001e /* Number of entries in\n\t\t\t\t\t   DT_MIPS_DELTA_SYM.  */\n#define DT_MIPS_DELTA_CLASSSYM 0x70000020 /* Delta symbols that hold the\n\t\t\t\t\t     class declaration.  */\n#define DT_MIPS_DELTA_CLASSSYM_NO 0x70000021 /* Number of entries in\n\t\t\t\t\t\tDT_MIPS_DELTA_CLASSSYM.  */\n#define DT_MIPS_CXX_FLAGS    0x70000022 /* Flags indicating for C++ flavor.  */\n#define DT_MIPS_PIXIE_INIT   0x70000023\n#define DT_MIPS_SYMBOL_LIB   0x70000024\n#define DT_MIPS_LOCALPAGE_GOTIDX 0x70000025\n#define DT_MIPS_LOCAL_GOTIDX 0x70000026\n#define DT_MIPS_HIDDEN_GOTIDX 0x70000027\n#define DT_MIPS_PROTECTED_GOTIDX 0x70000028\n#define DT_MIPS_OPTIONS\t     0x70000029 /* Address of .options.  */\n#define DT_MIPS_INTERFACE    0x7000002a /* Address of .interface.  */\n#define DT_MIPS_DYNSTR_ALIGN 0x7000002b\n#define DT_MIPS_INTERFACE_SIZE 0x7000002c /* Size of the .interface section. */\n#define DT_MIPS_RLD_TEXT_RESOLVE_ADDR 0x7000002d /* Address of rld_text_rsolve\n\t\t\t\t\t\t    function stored in GOT.  */\n#define DT_MIPS_PERF_SUFFIX  0x7000002e /* Default suffix of dso to be added\n\t\t\t\t\t   by rld on dlopen() calls.  */\n#define DT_MIPS_COMPACT_SIZE 0x7000002f /* (O32)Size of compact rel section. */\n#define DT_MIPS_GP_VALUE     0x70000030 /* GP value for aux GOTs.  */\n#define DT_MIPS_AUX_DYNAMIC  0x70000031 /* Address of aux .dynamic.  */\n/* The address of .got.plt in an executable using the new non-PIC ABI.  */\n#define DT_MIPS_PLTGOT\t     0x70000032\n/* The base of the PLT in an executable using the new non-PIC ABI if that\n   PLT is writable.  For a non-writable PLT, this is omitted or has a zero\n   value.  */\n#define DT_MIPS_RWPLT        0x70000034\n#define DT_MIPS_NUM\t     0x35\n\n/* Legal values for DT_MIPS_FLAGS Elf32_Dyn entry.  */\n\n#define RHF_NONE\t\t   0\t\t/* No flags */\n#define RHF_QUICKSTART\t\t   (1 << 0)\t/* Use quickstart */\n#define RHF_NOTPOT\t\t   (1 << 1)\t/* Hash size not power of 2 */\n#define RHF_NO_LIBRARY_REPLACEMENT (1 << 2)\t/* Ignore LD_LIBRARY_PATH */\n#define RHF_NO_MOVE\t\t   (1 << 3)\n#define RHF_SGI_ONLY\t\t   (1 << 4)\n#define RHF_GUARANTEE_INIT\t   (1 << 5)\n#define RHF_DELTA_C_PLUS_PLUS\t   (1 << 6)\n#define RHF_GUARANTEE_START_INIT   (1 << 7)\n#define RHF_PIXIE\t\t   (1 << 8)\n#define RHF_DEFAULT_DELAY_LOAD\t   (1 << 9)\n#define RHF_REQUICKSTART\t   (1 << 10)\n#define RHF_REQUICKSTARTED\t   (1 << 11)\n#define RHF_CORD\t\t   (1 << 12)\n#define RHF_NO_UNRES_UNDEF\t   (1 << 13)\n#define RHF_RLD_ORDER_SAFE\t   (1 << 14)\n\n/* Entries found in sections of type SHT_MIPS_LIBLIST.  */\n\ntypedef struct\n{\n  Elf32_Word l_name;\t\t/* Name (string table index) */\n  Elf32_Word l_time_stamp;\t/* Timestamp */\n  Elf32_Word l_checksum;\t/* Checksum */\n  Elf32_Word l_version;\t\t/* Interface version */\n  Elf32_Word l_flags;\t\t/* Flags */\n} Elf32_Lib;\n\ntypedef struct\n{\n  Elf64_Word l_name;\t\t/* Name (string table index) */\n  Elf64_Word l_time_stamp;\t/* Timestamp */\n  Elf64_Word l_checksum;\t/* Checksum */\n  Elf64_Word l_version;\t\t/* Interface version */\n  Elf64_Word l_flags;\t\t/* Flags */\n} Elf64_Lib;\n\n\n/* Legal values for l_flags.  */\n\n#define LL_NONE\t\t  0\n#define LL_EXACT_MATCH\t  (1 << 0)\t/* Require exact match */\n#define LL_IGNORE_INT_VER (1 << 1)\t/* Ignore interface version */\n#define LL_REQUIRE_MINOR  (1 << 2)\n#define LL_EXPORTS\t  (1 << 3)\n#define LL_DELAY_LOAD\t  (1 << 4)\n#define LL_DELTA\t  (1 << 5)\n\n/* Entries found in sections of type SHT_MIPS_CONFLICT.  */\n\ntypedef Elf32_Addr Elf32_Conflict;\n\n\n/* HPPA specific definitions.  */\n\n/* Legal values for e_flags field of Elf32_Ehdr.  */\n\n#define EF_PARISC_TRAPNIL\t0x00010000 /* Trap nil pointer dereference.  */\n#define EF_PARISC_EXT\t\t0x00020000 /* Program uses arch. extensions. */\n#define EF_PARISC_LSB\t\t0x00040000 /* Program expects little endian. */\n#define EF_PARISC_WIDE\t\t0x00080000 /* Program expects wide mode.  */\n#define EF_PARISC_NO_KABP\t0x00100000 /* No kernel assisted branch\n\t\t\t\t\t      prediction.  */\n#define EF_PARISC_LAZYSWAP\t0x00400000 /* Allow lazy swapping.  */\n#define EF_PARISC_ARCH\t\t0x0000ffff /* Architecture version.  */\n\n/* Defined values for `e_flags & EF_PARISC_ARCH' are:  */\n\n#define EFA_PARISC_1_0\t\t    0x020b /* PA-RISC 1.0 big-endian.  */\n#define EFA_PARISC_1_1\t\t    0x0210 /* PA-RISC 1.1 big-endian.  */\n#define EFA_PARISC_2_0\t\t    0x0214 /* PA-RISC 2.0 big-endian.  */\n\n/* Additional section indeces.  */\n\n#define SHN_PARISC_ANSI_COMMON\t0xff00\t   /* Section for tenatively declared\n\t\t\t\t\t      symbols in ANSI C.  */\n#define SHN_PARISC_HUGE_COMMON\t0xff01\t   /* Common blocks in huge model.  */\n\n/* Legal values for sh_type field of Elf32_Shdr.  */\n\n#define SHT_PARISC_EXT\t\t0x70000000 /* Contains product specific ext. */\n#define SHT_PARISC_UNWIND\t0x70000001 /* Unwind information.  */\n#define SHT_PARISC_DOC\t\t0x70000002 /* Debug info for optimized code. */\n\n/* Legal values for sh_flags field of Elf32_Shdr.  */\n\n#define SHF_PARISC_SHORT\t0x20000000 /* Section with short addressing. */\n#define SHF_PARISC_HUGE\t\t0x40000000 /* Section far from gp.  */\n#define SHF_PARISC_SBP\t\t0x80000000 /* Static branch prediction code. */\n\n/* Legal values for ST_TYPE subfield of st_info (symbol type).  */\n\n#define STT_PARISC_MILLICODE\t13\t/* Millicode function entry point.  */\n\n#define STT_HP_OPAQUE\t\t(STT_LOOS + 0x1)\n#define STT_HP_STUB\t\t(STT_LOOS + 0x2)\n\n/* HPPA relocs.  */\n\n#define R_PARISC_NONE\t\t0\t/* No reloc.  */\n#define R_PARISC_DIR32\t\t1\t/* Direct 32-bit reference.  */\n#define R_PARISC_DIR21L\t\t2\t/* Left 21 bits of eff. address.  */\n#define R_PARISC_DIR17R\t\t3\t/* Right 17 bits of eff. address.  */\n#define R_PARISC_DIR17F\t\t4\t/* 17 bits of eff. address.  */\n#define R_PARISC_DIR14R\t\t6\t/* Right 14 bits of eff. address.  */\n#define R_PARISC_PCREL32\t9\t/* 32-bit rel. address.  */\n#define R_PARISC_PCREL21L\t10\t/* Left 21 bits of rel. address.  */\n#define R_PARISC_PCREL17R\t11\t/* Right 17 bits of rel. address.  */\n#define R_PARISC_PCREL17F\t12\t/* 17 bits of rel. address.  */\n#define R_PARISC_PCREL14R\t14\t/* Right 14 bits of rel. address.  */\n#define R_PARISC_DPREL21L\t18\t/* Left 21 bits of rel. address.  */\n#define R_PARISC_DPREL14R\t22\t/* Right 14 bits of rel. address.  */\n#define R_PARISC_GPREL21L\t26\t/* GP-relative, left 21 bits.  */\n#define R_PARISC_GPREL14R\t30\t/* GP-relative, right 14 bits.  */\n#define R_PARISC_LTOFF21L\t34\t/* LT-relative, left 21 bits.  */\n#define R_PARISC_LTOFF14R\t38\t/* LT-relative, right 14 bits.  */\n#define R_PARISC_SECREL32\t41\t/* 32 bits section rel. address.  */\n#define R_PARISC_SEGBASE\t48\t/* No relocation, set segment base.  */\n#define R_PARISC_SEGREL32\t49\t/* 32 bits segment rel. address.  */\n#define R_PARISC_PLTOFF21L\t50\t/* PLT rel. address, left 21 bits.  */\n#define R_PARISC_PLTOFF14R\t54\t/* PLT rel. address, right 14 bits.  */\n#define R_PARISC_LTOFF_FPTR32\t57\t/* 32 bits LT-rel. function pointer. */\n#define R_PARISC_LTOFF_FPTR21L\t58\t/* LT-rel. fct ptr, left 21 bits. */\n#define R_PARISC_LTOFF_FPTR14R\t62\t/* LT-rel. fct ptr, right 14 bits. */\n#define R_PARISC_FPTR64\t\t64\t/* 64 bits function address.  */\n#define R_PARISC_PLABEL32\t65\t/* 32 bits function address.  */\n#define R_PARISC_PLABEL21L\t66\t/* Left 21 bits of fdesc address.  */\n#define R_PARISC_PLABEL14R\t70\t/* Right 14 bits of fdesc address.  */\n#define R_PARISC_PCREL64\t72\t/* 64 bits PC-rel. address.  */\n#define R_PARISC_PCREL22F\t74\t/* 22 bits PC-rel. address.  */\n#define R_PARISC_PCREL14WR\t75\t/* PC-rel. address, right 14 bits.  */\n#define R_PARISC_PCREL14DR\t76\t/* PC rel. address, right 14 bits.  */\n#define R_PARISC_PCREL16F\t77\t/* 16 bits PC-rel. address.  */\n#define R_PARISC_PCREL16WF\t78\t/* 16 bits PC-rel. address.  */\n#define R_PARISC_PCREL16DF\t79\t/* 16 bits PC-rel. address.  */\n#define R_PARISC_DIR64\t\t80\t/* 64 bits of eff. address.  */\n#define R_PARISC_DIR14WR\t83\t/* 14 bits of eff. address.  */\n#define R_PARISC_DIR14DR\t84\t/* 14 bits of eff. address.  */\n#define R_PARISC_DIR16F\t\t85\t/* 16 bits of eff. address.  */\n#define R_PARISC_DIR16WF\t86\t/* 16 bits of eff. address.  */\n#define R_PARISC_DIR16DF\t87\t/* 16 bits of eff. address.  */\n#define R_PARISC_GPREL64\t88\t/* 64 bits of GP-rel. address.  */\n#define R_PARISC_GPREL14WR\t91\t/* GP-rel. address, right 14 bits.  */\n#define R_PARISC_GPREL14DR\t92\t/* GP-rel. address, right 14 bits.  */\n#define R_PARISC_GPREL16F\t93\t/* 16 bits GP-rel. address.  */\n#define R_PARISC_GPREL16WF\t94\t/* 16 bits GP-rel. address.  */\n#define R_PARISC_GPREL16DF\t95\t/* 16 bits GP-rel. address.  */\n#define R_PARISC_LTOFF64\t96\t/* 64 bits LT-rel. address.  */\n#define R_PARISC_LTOFF14WR\t99\t/* LT-rel. address, right 14 bits.  */\n#define R_PARISC_LTOFF14DR\t100\t/* LT-rel. address, right 14 bits.  */\n#define R_PARISC_LTOFF16F\t101\t/* 16 bits LT-rel. address.  */\n#define R_PARISC_LTOFF16WF\t102\t/* 16 bits LT-rel. address.  */\n#define R_PARISC_LTOFF16DF\t103\t/* 16 bits LT-rel. address.  */\n#define R_PARISC_SECREL64\t104\t/* 64 bits section rel. address.  */\n#define R_PARISC_SEGREL64\t112\t/* 64 bits segment rel. address.  */\n#define R_PARISC_PLTOFF14WR\t115\t/* PLT-rel. address, right 14 bits.  */\n#define R_PARISC_PLTOFF14DR\t116\t/* PLT-rel. address, right 14 bits.  */\n#define R_PARISC_PLTOFF16F\t117\t/* 16 bits LT-rel. address.  */\n#define R_PARISC_PLTOFF16WF\t118\t/* 16 bits PLT-rel. address.  */\n#define R_PARISC_PLTOFF16DF\t119\t/* 16 bits PLT-rel. address.  */\n#define R_PARISC_LTOFF_FPTR64\t120\t/* 64 bits LT-rel. function ptr.  */\n#define R_PARISC_LTOFF_FPTR14WR\t123\t/* LT-rel. fct. ptr., right 14 bits. */\n#define R_PARISC_LTOFF_FPTR14DR\t124\t/* LT-rel. fct. ptr., right 14 bits. */\n#define R_PARISC_LTOFF_FPTR16F\t125\t/* 16 bits LT-rel. function ptr.  */\n#define R_PARISC_LTOFF_FPTR16WF\t126\t/* 16 bits LT-rel. function ptr.  */\n#define R_PARISC_LTOFF_FPTR16DF\t127\t/* 16 bits LT-rel. function ptr.  */\n#define R_PARISC_LORESERVE\t128\n#define R_PARISC_COPY\t\t128\t/* Copy relocation.  */\n#define R_PARISC_IPLT\t\t129\t/* Dynamic reloc, imported PLT */\n#define R_PARISC_EPLT\t\t130\t/* Dynamic reloc, exported PLT */\n#define R_PARISC_TPREL32\t153\t/* 32 bits TP-rel. address.  */\n#define R_PARISC_TPREL21L\t154\t/* TP-rel. address, left 21 bits.  */\n#define R_PARISC_TPREL14R\t158\t/* TP-rel. address, right 14 bits.  */\n#define R_PARISC_LTOFF_TP21L\t162\t/* LT-TP-rel. address, left 21 bits. */\n#define R_PARISC_LTOFF_TP14R\t166\t/* LT-TP-rel. address, right 14 bits.*/\n#define R_PARISC_LTOFF_TP14F\t167\t/* 14 bits LT-TP-rel. address.  */\n#define R_PARISC_TPREL64\t216\t/* 64 bits TP-rel. address.  */\n#define R_PARISC_TPREL14WR\t219\t/* TP-rel. address, right 14 bits.  */\n#define R_PARISC_TPREL14DR\t220\t/* TP-rel. address, right 14 bits.  */\n#define R_PARISC_TPREL16F\t221\t/* 16 bits TP-rel. address.  */\n#define R_PARISC_TPREL16WF\t222\t/* 16 bits TP-rel. address.  */\n#define R_PARISC_TPREL16DF\t223\t/* 16 bits TP-rel. address.  */\n#define R_PARISC_LTOFF_TP64\t224\t/* 64 bits LT-TP-rel. address.  */\n#define R_PARISC_LTOFF_TP14WR\t227\t/* LT-TP-rel. address, right 14 bits.*/\n#define R_PARISC_LTOFF_TP14DR\t228\t/* LT-TP-rel. address, right 14 bits.*/\n#define R_PARISC_LTOFF_TP16F\t229\t/* 16 bits LT-TP-rel. address.  */\n#define R_PARISC_LTOFF_TP16WF\t230\t/* 16 bits LT-TP-rel. address.  */\n#define R_PARISC_LTOFF_TP16DF\t231\t/* 16 bits LT-TP-rel. address.  */\n#define R_PARISC_GNU_VTENTRY\t232\n#define R_PARISC_GNU_VTINHERIT\t233\n#define R_PARISC_TLS_GD21L\t234\t/* GD 21-bit left.  */\n#define R_PARISC_TLS_GD14R\t235\t/* GD 14-bit right.  */\n#define R_PARISC_TLS_GDCALL\t236\t/* GD call to __t_g_a.  */\n#define R_PARISC_TLS_LDM21L\t237\t/* LD module 21-bit left.  */\n#define R_PARISC_TLS_LDM14R\t238\t/* LD module 14-bit right.  */\n#define R_PARISC_TLS_LDMCALL\t239\t/* LD module call to __t_g_a.  */\n#define R_PARISC_TLS_LDO21L\t240\t/* LD offset 21-bit left.  */\n#define R_PARISC_TLS_LDO14R\t241\t/* LD offset 14-bit right.  */\n#define R_PARISC_TLS_DTPMOD32\t242\t/* DTP module 32-bit.  */\n#define R_PARISC_TLS_DTPMOD64\t243\t/* DTP module 64-bit.  */\n#define R_PARISC_TLS_DTPOFF32\t244\t/* DTP offset 32-bit.  */\n#define R_PARISC_TLS_DTPOFF64\t245\t/* DTP offset 32-bit.  */\n#define R_PARISC_TLS_LE21L\tR_PARISC_TPREL21L\n#define R_PARISC_TLS_LE14R\tR_PARISC_TPREL14R\n#define R_PARISC_TLS_IE21L\tR_PARISC_LTOFF_TP21L\n#define R_PARISC_TLS_IE14R\tR_PARISC_LTOFF_TP14R\n#define R_PARISC_TLS_TPREL32\tR_PARISC_TPREL32\n#define R_PARISC_TLS_TPREL64\tR_PARISC_TPREL64\n#define R_PARISC_HIRESERVE\t255\n\n/* Legal values for p_type field of Elf32_Phdr/Elf64_Phdr.  */\n\n#define PT_HP_TLS\t\t(PT_LOOS + 0x0)\n#define PT_HP_CORE_NONE\t\t(PT_LOOS + 0x1)\n#define PT_HP_CORE_VERSION\t(PT_LOOS + 0x2)\n#define PT_HP_CORE_KERNEL\t(PT_LOOS + 0x3)\n#define PT_HP_CORE_COMM\t\t(PT_LOOS + 0x4)\n#define PT_HP_CORE_PROC\t\t(PT_LOOS + 0x5)\n#define PT_HP_CORE_LOADABLE\t(PT_LOOS + 0x6)\n#define PT_HP_CORE_STACK\t(PT_LOOS + 0x7)\n#define PT_HP_CORE_SHM\t\t(PT_LOOS + 0x8)\n#define PT_HP_CORE_MMF\t\t(PT_LOOS + 0x9)\n#define PT_HP_PARALLEL\t\t(PT_LOOS + 0x10)\n#define PT_HP_FASTBIND\t\t(PT_LOOS + 0x11)\n#define PT_HP_OPT_ANNOT\t\t(PT_LOOS + 0x12)\n#define PT_HP_HSL_ANNOT\t\t(PT_LOOS + 0x13)\n#define PT_HP_STACK\t\t(PT_LOOS + 0x14)\n\n#define PT_PARISC_ARCHEXT\t0x70000000\n#define PT_PARISC_UNWIND\t0x70000001\n\n/* Legal values for p_flags field of Elf32_Phdr/Elf64_Phdr.  */\n\n#define PF_PARISC_SBP\t\t0x08000000\n\n#define PF_HP_PAGE_SIZE\t\t0x00100000\n#define PF_HP_FAR_SHARED\t0x00200000\n#define PF_HP_NEAR_SHARED\t0x00400000\n#define PF_HP_CODE\t\t0x01000000\n#define PF_HP_MODIFY\t\t0x02000000\n#define PF_HP_LAZYSWAP\t\t0x04000000\n#define PF_HP_SBP\t\t0x08000000\n\n\n/* Alpha specific definitions.  */\n\n/* Legal values for e_flags field of Elf64_Ehdr.  */\n\n#define EF_ALPHA_32BIT\t\t1\t/* All addresses must be < 2GB.  */\n#define EF_ALPHA_CANRELAX\t2\t/* Relocations for relaxing exist.  */\n\n/* Legal values for sh_type field of Elf64_Shdr.  */\n\n/* These two are primerily concerned with ECOFF debugging info.  */\n#define SHT_ALPHA_DEBUG\t\t0x70000001\n#define SHT_ALPHA_REGINFO\t0x70000002\n\n/* Legal values for sh_flags field of Elf64_Shdr.  */\n\n#define SHF_ALPHA_GPREL\t\t0x10000000\n\n/* Legal values for st_other field of Elf64_Sym.  */\n#define STO_ALPHA_NOPV\t\t0x80\t/* No PV required.  */\n#define STO_ALPHA_STD_GPLOAD\t0x88\t/* PV only used for initial ldgp.  */\n\n/* Alpha relocs.  */\n\n#define R_ALPHA_NONE\t\t0\t/* No reloc */\n#define R_ALPHA_REFLONG\t\t1\t/* Direct 32 bit */\n#define R_ALPHA_REFQUAD\t\t2\t/* Direct 64 bit */\n#define R_ALPHA_GPREL32\t\t3\t/* GP relative 32 bit */\n#define R_ALPHA_LITERAL\t\t4\t/* GP relative 16 bit w/optimization */\n#define R_ALPHA_LITUSE\t\t5\t/* Optimization hint for LITERAL */\n#define R_ALPHA_GPDISP\t\t6\t/* Add displacement to GP */\n#define R_ALPHA_BRADDR\t\t7\t/* PC+4 relative 23 bit shifted */\n#define R_ALPHA_HINT\t\t8\t/* PC+4 relative 16 bit shifted */\n#define R_ALPHA_SREL16\t\t9\t/* PC relative 16 bit */\n#define R_ALPHA_SREL32\t\t10\t/* PC relative 32 bit */\n#define R_ALPHA_SREL64\t\t11\t/* PC relative 64 bit */\n#define R_ALPHA_GPRELHIGH\t17\t/* GP relative 32 bit, high 16 bits */\n#define R_ALPHA_GPRELLOW\t18\t/* GP relative 32 bit, low 16 bits */\n#define R_ALPHA_GPREL16\t\t19\t/* GP relative 16 bit */\n#define R_ALPHA_COPY\t\t24\t/* Copy symbol at runtime */\n#define R_ALPHA_GLOB_DAT\t25\t/* Create GOT entry */\n#define R_ALPHA_JMP_SLOT\t26\t/* Create PLT entry */\n#define R_ALPHA_RELATIVE\t27\t/* Adjust by program base */\n#define R_ALPHA_TLS_GD_HI\t28\n#define R_ALPHA_TLSGD\t\t29\n#define R_ALPHA_TLS_LDM\t\t30\n#define R_ALPHA_DTPMOD64\t31\n#define R_ALPHA_GOTDTPREL\t32\n#define R_ALPHA_DTPREL64\t33\n#define R_ALPHA_DTPRELHI\t34\n#define R_ALPHA_DTPRELLO\t35\n#define R_ALPHA_DTPREL16\t36\n#define R_ALPHA_GOTTPREL\t37\n#define R_ALPHA_TPREL64\t\t38\n#define R_ALPHA_TPRELHI\t\t39\n#define R_ALPHA_TPRELLO\t\t40\n#define R_ALPHA_TPREL16\t\t41\n/* Keep this the last entry.  */\n#define R_ALPHA_NUM\t\t46\n\n/* Magic values of the LITUSE relocation addend.  */\n#define LITUSE_ALPHA_ADDR\t0\n#define LITUSE_ALPHA_BASE\t1\n#define LITUSE_ALPHA_BYTOFF\t2\n#define LITUSE_ALPHA_JSR\t3\n#define LITUSE_ALPHA_TLS_GD\t4\n#define LITUSE_ALPHA_TLS_LDM\t5\n\n/* Legal values for d_tag of Elf64_Dyn.  */\n#define DT_ALPHA_PLTRO\t\t(DT_LOPROC + 0)\n#define DT_ALPHA_NUM\t\t1\n\n/* PowerPC specific declarations */\n\n/* Values for Elf32/64_Ehdr.e_flags.  */\n#define EF_PPC_EMB\t\t0x80000000\t/* PowerPC embedded flag */\n\n/* Cygnus local bits below */\n#define EF_PPC_RELOCATABLE\t0x00010000\t/* PowerPC -mrelocatable flag*/\n#define EF_PPC_RELOCATABLE_LIB\t0x00008000\t/* PowerPC -mrelocatable-lib\n\t\t\t\t\t\t   flag */\n\n/* PowerPC relocations defined by the ABIs */\n#define R_PPC_NONE\t\t0\n#define R_PPC_ADDR32\t\t1\t/* 32bit absolute address */\n#define R_PPC_ADDR24\t\t2\t/* 26bit address, 2 bits ignored.  */\n#define R_PPC_ADDR16\t\t3\t/* 16bit absolute address */\n#define R_PPC_ADDR16_LO\t\t4\t/* lower 16bit of absolute address */\n#define R_PPC_ADDR16_HI\t\t5\t/* high 16bit of absolute address */\n#define R_PPC_ADDR16_HA\t\t6\t/* adjusted high 16bit */\n#define R_PPC_ADDR14\t\t7\t/* 16bit address, 2 bits ignored */\n#define R_PPC_ADDR14_BRTAKEN\t8\n#define R_PPC_ADDR14_BRNTAKEN\t9\n#define R_PPC_REL24\t\t10\t/* PC relative 26 bit */\n#define R_PPC_REL14\t\t11\t/* PC relative 16 bit */\n#define R_PPC_REL14_BRTAKEN\t12\n#define R_PPC_REL14_BRNTAKEN\t13\n#define R_PPC_GOT16\t\t14\n#define R_PPC_GOT16_LO\t\t15\n#define R_PPC_GOT16_HI\t\t16\n#define R_PPC_GOT16_HA\t\t17\n#define R_PPC_PLTREL24\t\t18\n#define R_PPC_COPY\t\t19\n#define R_PPC_GLOB_DAT\t\t20\n#define R_PPC_JMP_SLOT\t\t21\n#define R_PPC_RELATIVE\t\t22\n#define R_PPC_LOCAL24PC\t\t23\n#define R_PPC_UADDR32\t\t24\n#define R_PPC_UADDR16\t\t25\n#define R_PPC_REL32\t\t26\n#define R_PPC_PLT32\t\t27\n#define R_PPC_PLTREL32\t\t28\n#define R_PPC_PLT16_LO\t\t29\n#define R_PPC_PLT16_HI\t\t30\n#define R_PPC_PLT16_HA\t\t31\n#define R_PPC_SDAREL16\t\t32\n#define R_PPC_SECTOFF\t\t33\n#define R_PPC_SECTOFF_LO\t34\n#define R_PPC_SECTOFF_HI\t35\n#define R_PPC_SECTOFF_HA\t36\n\n/* PowerPC relocations defined for the TLS access ABI.  */\n#define R_PPC_TLS\t\t67 /* none\t(sym+add)@tls */\n#define R_PPC_DTPMOD32\t\t68 /* word32\t(sym+add)@dtpmod */\n#define R_PPC_TPREL16\t\t69 /* half16*\t(sym+add)@tprel */\n#define R_PPC_TPREL16_LO\t70 /* half16\t(sym+add)@tprel@l */\n#define R_PPC_TPREL16_HI\t71 /* half16\t(sym+add)@tprel@h */\n#define R_PPC_TPREL16_HA\t72 /* half16\t(sym+add)@tprel@ha */\n#define R_PPC_TPREL32\t\t73 /* word32\t(sym+add)@tprel */\n#define R_PPC_DTPREL16\t\t74 /* half16*\t(sym+add)@dtprel */\n#define R_PPC_DTPREL16_LO\t75 /* half16\t(sym+add)@dtprel@l */\n#define R_PPC_DTPREL16_HI\t76 /* half16\t(sym+add)@dtprel@h */\n#define R_PPC_DTPREL16_HA\t77 /* half16\t(sym+add)@dtprel@ha */\n#define R_PPC_DTPREL32\t\t78 /* word32\t(sym+add)@dtprel */\n#define R_PPC_GOT_TLSGD16\t79 /* half16*\t(sym+add)@got@tlsgd */\n#define R_PPC_GOT_TLSGD16_LO\t80 /* half16\t(sym+add)@got@tlsgd@l */\n#define R_PPC_GOT_TLSGD16_HI\t81 /* half16\t(sym+add)@got@tlsgd@h */\n#define R_PPC_GOT_TLSGD16_HA\t82 /* half16\t(sym+add)@got@tlsgd@ha */\n#define R_PPC_GOT_TLSLD16\t83 /* half16*\t(sym+add)@got@tlsld */\n#define R_PPC_GOT_TLSLD16_LO\t84 /* half16\t(sym+add)@got@tlsld@l */\n#define R_PPC_GOT_TLSLD16_HI\t85 /* half16\t(sym+add)@got@tlsld@h */\n#define R_PPC_GOT_TLSLD16_HA\t86 /* half16\t(sym+add)@got@tlsld@ha */\n#define R_PPC_GOT_TPREL16\t87 /* half16*\t(sym+add)@got@tprel */\n#define R_PPC_GOT_TPREL16_LO\t88 /* half16\t(sym+add)@got@tprel@l */\n#define R_PPC_GOT_TPREL16_HI\t89 /* half16\t(sym+add)@got@tprel@h */\n#define R_PPC_GOT_TPREL16_HA\t90 /* half16\t(sym+add)@got@tprel@ha */\n#define R_PPC_GOT_DTPREL16\t91 /* half16*\t(sym+add)@got@dtprel */\n#define R_PPC_GOT_DTPREL16_LO\t92 /* half16*\t(sym+add)@got@dtprel@l */\n#define R_PPC_GOT_DTPREL16_HI\t93 /* half16*\t(sym+add)@got@dtprel@h */\n#define R_PPC_GOT_DTPREL16_HA\t94 /* half16*\t(sym+add)@got@dtprel@ha */\n\n/* The remaining relocs are from the Embedded ELF ABI, and are not\n   in the SVR4 ELF ABI.  */\n#define R_PPC_EMB_NADDR32\t101\n#define R_PPC_EMB_NADDR16\t102\n#define R_PPC_EMB_NADDR16_LO\t103\n#define R_PPC_EMB_NADDR16_HI\t104\n#define R_PPC_EMB_NADDR16_HA\t105\n#define R_PPC_EMB_SDAI16\t106\n#define R_PPC_EMB_SDA2I16\t107\n#define R_PPC_EMB_SDA2REL\t108\n#define R_PPC_EMB_SDA21\t\t109\t/* 16 bit offset in SDA */\n#define R_PPC_EMB_MRKREF\t110\n#define R_PPC_EMB_RELSEC16\t111\n#define R_PPC_EMB_RELST_LO\t112\n#define R_PPC_EMB_RELST_HI\t113\n#define R_PPC_EMB_RELST_HA\t114\n#define R_PPC_EMB_BIT_FLD\t115\n#define R_PPC_EMB_RELSDA\t116\t/* 16 bit relative offset in SDA */\n\n/* Diab tool relocations.  */\n#define R_PPC_DIAB_SDA21_LO\t180\t/* like EMB_SDA21, but lower 16 bit */\n#define R_PPC_DIAB_SDA21_HI\t181\t/* like EMB_SDA21, but high 16 bit */\n#define R_PPC_DIAB_SDA21_HA\t182\t/* like EMB_SDA21, adjusted high 16 */\n#define R_PPC_DIAB_RELSDA_LO\t183\t/* like EMB_RELSDA, but lower 16 bit */\n#define R_PPC_DIAB_RELSDA_HI\t184\t/* like EMB_RELSDA, but high 16 bit */\n#define R_PPC_DIAB_RELSDA_HA\t185\t/* like EMB_RELSDA, adjusted high 16 */\n\n/* GNU extension to support local ifunc.  */\n#define R_PPC_IRELATIVE\t\t248\n\n/* GNU relocs used in PIC code sequences.  */\n#define R_PPC_REL16\t\t249\t/* half16   (sym+add-.) */\n#define R_PPC_REL16_LO\t\t250\t/* half16   (sym+add-.)@l */\n#define R_PPC_REL16_HI\t\t251\t/* half16   (sym+add-.)@h */\n#define R_PPC_REL16_HA\t\t252\t/* half16   (sym+add-.)@ha */\n\n/* This is a phony reloc to handle any old fashioned TOC16 references\n   that may still be in object files.  */\n#define R_PPC_TOC16\t\t255\n\n/* PowerPC specific values for the Dyn d_tag field.  */\n#define DT_PPC_GOT\t\t(DT_LOPROC + 0)\n#define DT_PPC_NUM\t\t1\n\n/* PowerPC64 relocations defined by the ABIs */\n#define R_PPC64_NONE\t\tR_PPC_NONE\n#define R_PPC64_ADDR32\t\tR_PPC_ADDR32 /* 32bit absolute address */\n#define R_PPC64_ADDR24\t\tR_PPC_ADDR24 /* 26bit address, word aligned */\n#define R_PPC64_ADDR16\t\tR_PPC_ADDR16 /* 16bit absolute address */\n#define R_PPC64_ADDR16_LO\tR_PPC_ADDR16_LO\t/* lower 16bits of address */\n#define R_PPC64_ADDR16_HI\tR_PPC_ADDR16_HI\t/* high 16bits of address. */\n#define R_PPC64_ADDR16_HA\tR_PPC_ADDR16_HA /* adjusted high 16bits.  */\n#define R_PPC64_ADDR14\t\tR_PPC_ADDR14 /* 16bit address, word aligned */\n#define R_PPC64_ADDR14_BRTAKEN\tR_PPC_ADDR14_BRTAKEN\n#define R_PPC64_ADDR14_BRNTAKEN\tR_PPC_ADDR14_BRNTAKEN\n#define R_PPC64_REL24\t\tR_PPC_REL24 /* PC-rel. 26 bit, word aligned */\n#define R_PPC64_REL14\t\tR_PPC_REL14 /* PC relative 16 bit */\n#define R_PPC64_REL14_BRTAKEN\tR_PPC_REL14_BRTAKEN\n#define R_PPC64_REL14_BRNTAKEN\tR_PPC_REL14_BRNTAKEN\n#define R_PPC64_GOT16\t\tR_PPC_GOT16\n#define R_PPC64_GOT16_LO\tR_PPC_GOT16_LO\n#define R_PPC64_GOT16_HI\tR_PPC_GOT16_HI\n#define R_PPC64_GOT16_HA\tR_PPC_GOT16_HA\n\n#define R_PPC64_COPY\t\tR_PPC_COPY\n#define R_PPC64_GLOB_DAT\tR_PPC_GLOB_DAT\n#define R_PPC64_JMP_SLOT\tR_PPC_JMP_SLOT\n#define R_PPC64_RELATIVE\tR_PPC_RELATIVE\n\n#define R_PPC64_UADDR32\t\tR_PPC_UADDR32\n#define R_PPC64_UADDR16\t\tR_PPC_UADDR16\n#define R_PPC64_REL32\t\tR_PPC_REL32\n#define R_PPC64_PLT32\t\tR_PPC_PLT32\n#define R_PPC64_PLTREL32\tR_PPC_PLTREL32\n#define R_PPC64_PLT16_LO\tR_PPC_PLT16_LO\n#define R_PPC64_PLT16_HI\tR_PPC_PLT16_HI\n#define R_PPC64_PLT16_HA\tR_PPC_PLT16_HA\n\n#define R_PPC64_SECTOFF\t\tR_PPC_SECTOFF\n#define R_PPC64_SECTOFF_LO\tR_PPC_SECTOFF_LO\n#define R_PPC64_SECTOFF_HI\tR_PPC_SECTOFF_HI\n#define R_PPC64_SECTOFF_HA\tR_PPC_SECTOFF_HA\n#define R_PPC64_ADDR30\t\t37 /* word30 (S + A - P) >> 2 */\n#define R_PPC64_ADDR64\t\t38 /* doubleword64 S + A */\n#define R_PPC64_ADDR16_HIGHER\t39 /* half16 #higher(S + A) */\n#define R_PPC64_ADDR16_HIGHERA\t40 /* half16 #highera(S + A) */\n#define R_PPC64_ADDR16_HIGHEST\t41 /* half16 #highest(S + A) */\n#define R_PPC64_ADDR16_HIGHESTA\t42 /* half16 #highesta(S + A) */\n#define R_PPC64_UADDR64\t\t43 /* doubleword64 S + A */\n#define R_PPC64_REL64\t\t44 /* doubleword64 S + A - P */\n#define R_PPC64_PLT64\t\t45 /* doubleword64 L + A */\n#define R_PPC64_PLTREL64\t46 /* doubleword64 L + A - P */\n#define R_PPC64_TOC16\t\t47 /* half16* S + A - .TOC */\n#define R_PPC64_TOC16_LO\t48 /* half16 #lo(S + A - .TOC.) */\n#define R_PPC64_TOC16_HI\t49 /* half16 #hi(S + A - .TOC.) */\n#define R_PPC64_TOC16_HA\t50 /* half16 #ha(S + A - .TOC.) */\n#define R_PPC64_TOC\t\t51 /* doubleword64 .TOC */\n#define R_PPC64_PLTGOT16\t52 /* half16* M + A */\n#define R_PPC64_PLTGOT16_LO\t53 /* half16 #lo(M + A) */\n#define R_PPC64_PLTGOT16_HI\t54 /* half16 #hi(M + A) */\n#define R_PPC64_PLTGOT16_HA\t55 /* half16 #ha(M + A) */\n\n#define R_PPC64_ADDR16_DS\t56 /* half16ds* (S + A) >> 2 */\n#define R_PPC64_ADDR16_LO_DS\t57 /* half16ds  #lo(S + A) >> 2 */\n#define R_PPC64_GOT16_DS\t58 /* half16ds* (G + A) >> 2 */\n#define R_PPC64_GOT16_LO_DS\t59 /* half16ds  #lo(G + A) >> 2 */\n#define R_PPC64_PLT16_LO_DS\t60 /* half16ds  #lo(L + A) >> 2 */\n#define R_PPC64_SECTOFF_DS\t61 /* half16ds* (R + A) >> 2 */\n#define R_PPC64_SECTOFF_LO_DS\t62 /* half16ds  #lo(R + A) >> 2 */\n#define R_PPC64_TOC16_DS\t63 /* half16ds* (S + A - .TOC.) >> 2 */\n#define R_PPC64_TOC16_LO_DS\t64 /* half16ds  #lo(S + A - .TOC.) >> 2 */\n#define R_PPC64_PLTGOT16_DS\t65 /* half16ds* (M + A) >> 2 */\n#define R_PPC64_PLTGOT16_LO_DS\t66 /* half16ds  #lo(M + A) >> 2 */\n\n/* PowerPC64 relocations defined for the TLS access ABI.  */\n#define R_PPC64_TLS\t\t67 /* none\t(sym+add)@tls */\n#define R_PPC64_DTPMOD64\t68 /* doubleword64 (sym+add)@dtpmod */\n#define R_PPC64_TPREL16\t\t69 /* half16*\t(sym+add)@tprel */\n#define R_PPC64_TPREL16_LO\t70 /* half16\t(sym+add)@tprel@l */\n#define R_PPC64_TPREL16_HI\t71 /* half16\t(sym+add)@tprel@h */\n#define R_PPC64_TPREL16_HA\t72 /* half16\t(sym+add)@tprel@ha */\n#define R_PPC64_TPREL64\t\t73 /* doubleword64 (sym+add)@tprel */\n#define R_PPC64_DTPREL16\t74 /* half16*\t(sym+add)@dtprel */\n#define R_PPC64_DTPREL16_LO\t75 /* half16\t(sym+add)@dtprel@l */\n#define R_PPC64_DTPREL16_HI\t76 /* half16\t(sym+add)@dtprel@h */\n#define R_PPC64_DTPREL16_HA\t77 /* half16\t(sym+add)@dtprel@ha */\n#define R_PPC64_DTPREL64\t78 /* doubleword64 (sym+add)@dtprel */\n#define R_PPC64_GOT_TLSGD16\t79 /* half16*\t(sym+add)@got@tlsgd */\n#define R_PPC64_GOT_TLSGD16_LO\t80 /* half16\t(sym+add)@got@tlsgd@l */\n#define R_PPC64_GOT_TLSGD16_HI\t81 /* half16\t(sym+add)@got@tlsgd@h */\n#define R_PPC64_GOT_TLSGD16_HA\t82 /* half16\t(sym+add)@got@tlsgd@ha */\n#define R_PPC64_GOT_TLSLD16\t83 /* half16*\t(sym+add)@got@tlsld */\n#define R_PPC64_GOT_TLSLD16_LO\t84 /* half16\t(sym+add)@got@tlsld@l */\n#define R_PPC64_GOT_TLSLD16_HI\t85 /* half16\t(sym+add)@got@tlsld@h */\n#define R_PPC64_GOT_TLSLD16_HA\t86 /* half16\t(sym+add)@got@tlsld@ha */\n#define R_PPC64_GOT_TPREL16_DS\t87 /* half16ds*\t(sym+add)@got@tprel */\n#define R_PPC64_GOT_TPREL16_LO_DS 88 /* half16ds (sym+add)@got@tprel@l */\n#define R_PPC64_GOT_TPREL16_HI\t89 /* half16\t(sym+add)@got@tprel@h */\n#define R_PPC64_GOT_TPREL16_HA\t90 /* half16\t(sym+add)@got@tprel@ha */\n#define R_PPC64_GOT_DTPREL16_DS\t91 /* half16ds*\t(sym+add)@got@dtprel */\n#define R_PPC64_GOT_DTPREL16_LO_DS 92 /* half16ds (sym+add)@got@dtprel@l */\n#define R_PPC64_GOT_DTPREL16_HI\t93 /* half16\t(sym+add)@got@dtprel@h */\n#define R_PPC64_GOT_DTPREL16_HA\t94 /* half16\t(sym+add)@got@dtprel@ha */\n#define R_PPC64_TPREL16_DS\t95 /* half16ds*\t(sym+add)@tprel */\n#define R_PPC64_TPREL16_LO_DS\t96 /* half16ds\t(sym+add)@tprel@l */\n#define R_PPC64_TPREL16_HIGHER\t97 /* half16\t(sym+add)@tprel@higher */\n#define R_PPC64_TPREL16_HIGHERA\t98 /* half16\t(sym+add)@tprel@highera */\n#define R_PPC64_TPREL16_HIGHEST\t99 /* half16\t(sym+add)@tprel@highest */\n#define R_PPC64_TPREL16_HIGHESTA 100 /* half16\t(sym+add)@tprel@highesta */\n#define R_PPC64_DTPREL16_DS\t101 /* half16ds* (sym+add)@dtprel */\n#define R_PPC64_DTPREL16_LO_DS\t102 /* half16ds\t(sym+add)@dtprel@l */\n#define R_PPC64_DTPREL16_HIGHER\t103 /* half16\t(sym+add)@dtprel@higher */\n#define R_PPC64_DTPREL16_HIGHERA 104 /* half16\t(sym+add)@dtprel@highera */\n#define R_PPC64_DTPREL16_HIGHEST 105 /* half16\t(sym+add)@dtprel@highest */\n#define R_PPC64_DTPREL16_HIGHESTA 106 /* half16\t(sym+add)@dtprel@highesta */\n\n/* GNU extension to support local ifunc.  */\n#define R_PPC64_JMP_IREL\t247\n#define R_PPC64_IRELATIVE\t248\n#define R_PPC64_REL16\t\t249\t/* half16   (sym+add-.) */\n#define R_PPC64_REL16_LO\t250\t/* half16   (sym+add-.)@l */\n#define R_PPC64_REL16_HI\t251\t/* half16   (sym+add-.)@h */\n#define R_PPC64_REL16_HA\t252\t/* half16   (sym+add-.)@ha */\n\n/* PowerPC64 specific values for the Dyn d_tag field.  */\n#define DT_PPC64_GLINK  (DT_LOPROC + 0)\n#define DT_PPC64_OPD\t(DT_LOPROC + 1)\n#define DT_PPC64_OPDSZ\t(DT_LOPROC + 2)\n#define DT_PPC64_NUM    3\n\n\n/* ARM specific declarations */\n\n/* Processor specific flags for the ELF header e_flags field.  */\n#define EF_ARM_RELEXEC\t\t0x01\n#define EF_ARM_HASENTRY\t\t0x02\n#define EF_ARM_INTERWORK\t0x04\n#define EF_ARM_APCS_26\t\t0x08\n#define EF_ARM_APCS_FLOAT\t0x10\n#define EF_ARM_PIC\t\t0x20\n#define EF_ARM_ALIGN8\t\t0x40 /* 8-bit structure alignment is in use */\n#define EF_ARM_NEW_ABI\t\t0x80\n#define EF_ARM_OLD_ABI\t\t0x100\n#define EF_ARM_SOFT_FLOAT\t0x200\n#define EF_ARM_VFP_FLOAT\t0x400\n#define EF_ARM_MAVERICK_FLOAT\t0x800\n\n\n/* Other constants defined in the ARM ELF spec. version B-01.  */\n/* NB. These conflict with values defined above.  */\n#define EF_ARM_SYMSARESORTED\t0x04\n#define EF_ARM_DYNSYMSUSESEGIDX\t0x08\n#define EF_ARM_MAPSYMSFIRST\t0x10\n#define EF_ARM_EABIMASK\t\t0XFF000000\n\n/* Constants defined in AAELF.  */\n#define EF_ARM_BE8\t    0x00800000\n#define EF_ARM_LE8\t    0x00400000\n\n#define EF_ARM_EABI_VERSION(flags)\t((flags) & EF_ARM_EABIMASK)\n#define EF_ARM_EABI_UNKNOWN\t0x00000000\n#define EF_ARM_EABI_VER1\t0x01000000\n#define EF_ARM_EABI_VER2\t0x02000000\n#define EF_ARM_EABI_VER3\t0x03000000\n#define EF_ARM_EABI_VER4\t0x04000000\n#define EF_ARM_EABI_VER5\t0x05000000\n\n/* Additional symbol types for Thumb.  */\n#define STT_ARM_TFUNC\t\tSTT_LOPROC /* A Thumb function.  */\n#define STT_ARM_16BIT\t\tSTT_HIPROC /* A Thumb label.  */\n\n/* ARM-specific values for sh_flags */\n#define SHF_ARM_ENTRYSECT\t0x10000000 /* Section contains an entry point */\n#define SHF_ARM_COMDEF\t\t0x80000000 /* Section may be multiply defined\n\t\t\t\t\t      in the input to a link step.  */\n\n/* ARM-specific program header flags */\n#define PF_ARM_SB\t\t0x10000000 /* Segment contains the location\n\t\t\t\t\t      addressed by the static base. */\n#define PF_ARM_PI\t\t0x20000000 /* Position-independent segment.  */\n#define PF_ARM_ABS\t\t0x40000000 /* Absolute segment.  */\n\n/* Processor specific values for the Phdr p_type field.  */\n#define PT_ARM_EXIDX\t\t(PT_LOPROC + 1)\t/* ARM unwind segment.  */\n\n/* Processor specific values for the Shdr sh_type field.  */\n#define SHT_ARM_EXIDX\t\t(SHT_LOPROC + 1) /* ARM unwind section.  */\n#define SHT_ARM_PREEMPTMAP\t(SHT_LOPROC + 2) /* Preemption details.  */\n#define SHT_ARM_ATTRIBUTES\t(SHT_LOPROC + 3) /* ARM attributes section.  */\n\n\n/* ARM relocs.  */\n\n#define R_ARM_NONE\t\t0\t/* No reloc */\n#define R_ARM_PC24\t\t1\t/* PC relative 26 bit branch */\n#define R_ARM_ABS32\t\t2\t/* Direct 32 bit  */\n#define R_ARM_REL32\t\t3\t/* PC relative 32 bit */\n#define R_ARM_PC13\t\t4\n#define R_ARM_ABS16\t\t5\t/* Direct 16 bit */\n#define R_ARM_ABS12\t\t6\t/* Direct 12 bit */\n#define R_ARM_THM_ABS5\t\t7\n#define R_ARM_ABS8\t\t8\t/* Direct 8 bit */\n#define R_ARM_SBREL32\t\t9\n#define R_ARM_THM_PC22\t\t10\n#define R_ARM_THM_PC8\t\t11\n#define R_ARM_AMP_VCALL9\t12\n#define R_ARM_SWI24\t\t13\n#define R_ARM_THM_SWI8\t\t14\n#define R_ARM_XPC25\t\t15\n#define R_ARM_THM_XPC22\t\t16\n#define R_ARM_TLS_DTPMOD32\t17\t/* ID of module containing symbol */\n#define R_ARM_TLS_DTPOFF32\t18\t/* Offset in TLS block */\n#define R_ARM_TLS_TPOFF32\t19\t/* Offset in static TLS block */\n#define R_ARM_COPY\t\t20\t/* Copy symbol at runtime */\n#define R_ARM_GLOB_DAT\t\t21\t/* Create GOT entry */\n#define R_ARM_JUMP_SLOT\t\t22\t/* Create PLT entry */\n#define R_ARM_RELATIVE\t\t23\t/* Adjust by program base */\n#define R_ARM_GOTOFF\t\t24\t/* 32 bit offset to GOT */\n#define R_ARM_GOTPC\t\t25\t/* 32 bit PC relative offset to GOT */\n#define R_ARM_GOT32\t\t26\t/* 32 bit GOT entry */\n#define R_ARM_PLT32\t\t27\t/* 32 bit PLT address */\n#define R_ARM_ALU_PCREL_7_0\t32\n#define R_ARM_ALU_PCREL_15_8\t33\n#define R_ARM_ALU_PCREL_23_15\t34\n#define R_ARM_LDR_SBREL_11_0\t35\n#define R_ARM_ALU_SBREL_19_12\t36\n#define R_ARM_ALU_SBREL_27_20\t37\n#define R_ARM_GNU_VTENTRY\t100\n#define R_ARM_GNU_VTINHERIT\t101\n#define R_ARM_THM_PC11\t\t102\t/* thumb unconditional branch */\n#define R_ARM_THM_PC9\t\t103\t/* thumb conditional branch */\n#define R_ARM_TLS_GD32\t\t104\t/* PC-rel 32 bit for global dynamic\n\t\t\t\t\t   thread local data */\n#define R_ARM_TLS_LDM32\t\t105\t/* PC-rel 32 bit for local dynamic\n\t\t\t\t\t   thread local data */\n#define R_ARM_TLS_LDO32\t\t106\t/* 32 bit offset relative to TLS\n\t\t\t\t\t   block */\n#define R_ARM_TLS_IE32\t\t107\t/* PC-rel 32 bit for GOT entry of\n\t\t\t\t\t   static TLS block offset */\n#define R_ARM_TLS_LE32\t\t108\t/* 32 bit offset relative to static\n\t\t\t\t\t   TLS block */\n#define R_ARM_RXPC25\t\t249\n#define R_ARM_RSBREL32\t\t250\n#define R_ARM_THM_RPC22\t\t251\n#define R_ARM_RREL32\t\t252\n#define R_ARM_RABS22\t\t253\n#define R_ARM_RPC24\t\t254\n#define R_ARM_RBASE\t\t255\n/* Keep this the last entry.  */\n#define R_ARM_NUM\t\t256\n\n/* IA-64 specific declarations.  */\n\n/* Processor specific flags for the Ehdr e_flags field.  */\n#define EF_IA_64_MASKOS\t\t0x0000000f\t/* os-specific flags */\n#define EF_IA_64_ABI64\t\t0x00000010\t/* 64-bit ABI */\n#define EF_IA_64_ARCH\t\t0xff000000\t/* arch. version mask */\n\n/* Processor specific values for the Phdr p_type field.  */\n#define PT_IA_64_ARCHEXT\t(PT_LOPROC + 0)\t/* arch extension bits */\n#define PT_IA_64_UNWIND\t\t(PT_LOPROC + 1)\t/* ia64 unwind bits */\n#define PT_IA_64_HP_OPT_ANOT\t(PT_LOOS + 0x12)\n#define PT_IA_64_HP_HSL_ANOT\t(PT_LOOS + 0x13)\n#define PT_IA_64_HP_STACK\t(PT_LOOS + 0x14)\n\n/* Processor specific flags for the Phdr p_flags field.  */\n#define PF_IA_64_NORECOV\t0x80000000\t/* spec insns w/o recovery */\n\n/* Processor specific values for the Shdr sh_type field.  */\n#define SHT_IA_64_EXT\t\t(SHT_LOPROC + 0) /* extension bits */\n#define SHT_IA_64_UNWIND\t(SHT_LOPROC + 1) /* unwind bits */\n\n/* Processor specific flags for the Shdr sh_flags field.  */\n#define SHF_IA_64_SHORT\t\t0x10000000\t/* section near gp */\n#define SHF_IA_64_NORECOV\t0x20000000\t/* spec insns w/o recovery */\n\n/* Processor specific values for the Dyn d_tag field.  */\n#define DT_IA_64_PLT_RESERVE\t(DT_LOPROC + 0)\n#define DT_IA_64_NUM\t\t1\n\n/* IA-64 relocations.  */\n#define R_IA64_NONE\t\t0x00\t/* none */\n#define R_IA64_IMM14\t\t0x21\t/* symbol + addend, add imm14 */\n#define R_IA64_IMM22\t\t0x22\t/* symbol + addend, add imm22 */\n#define R_IA64_IMM64\t\t0x23\t/* symbol + addend, mov imm64 */\n#define R_IA64_DIR32MSB\t\t0x24\t/* symbol + addend, data4 MSB */\n#define R_IA64_DIR32LSB\t\t0x25\t/* symbol + addend, data4 LSB */\n#define R_IA64_DIR64MSB\t\t0x26\t/* symbol + addend, data8 MSB */\n#define R_IA64_DIR64LSB\t\t0x27\t/* symbol + addend, data8 LSB */\n#define R_IA64_GPREL22\t\t0x2a\t/* @gprel(sym + add), add imm22 */\n#define R_IA64_GPREL64I\t\t0x2b\t/* @gprel(sym + add), mov imm64 */\n#define R_IA64_GPREL32MSB\t0x2c\t/* @gprel(sym + add), data4 MSB */\n#define R_IA64_GPREL32LSB\t0x2d\t/* @gprel(sym + add), data4 LSB */\n#define R_IA64_GPREL64MSB\t0x2e\t/* @gprel(sym + add), data8 MSB */\n#define R_IA64_GPREL64LSB\t0x2f\t/* @gprel(sym + add), data8 LSB */\n#define R_IA64_LTOFF22\t\t0x32\t/* @ltoff(sym + add), add imm22 */\n#define R_IA64_LTOFF64I\t\t0x33\t/* @ltoff(sym + add), mov imm64 */\n#define R_IA64_PLTOFF22\t\t0x3a\t/* @pltoff(sym + add), add imm22 */\n#define R_IA64_PLTOFF64I\t0x3b\t/* @pltoff(sym + add), mov imm64 */\n#define R_IA64_PLTOFF64MSB\t0x3e\t/* @pltoff(sym + add), data8 MSB */\n#define R_IA64_PLTOFF64LSB\t0x3f\t/* @pltoff(sym + add), data8 LSB */\n#define R_IA64_FPTR64I\t\t0x43\t/* @fptr(sym + add), mov imm64 */\n#define R_IA64_FPTR32MSB\t0x44\t/* @fptr(sym + add), data4 MSB */\n#define R_IA64_FPTR32LSB\t0x45\t/* @fptr(sym + add), data4 LSB */\n#define R_IA64_FPTR64MSB\t0x46\t/* @fptr(sym + add), data8 MSB */\n#define R_IA64_FPTR64LSB\t0x47\t/* @fptr(sym + add), data8 LSB */\n#define R_IA64_PCREL60B\t\t0x48\t/* @pcrel(sym + add), brl */\n#define R_IA64_PCREL21B\t\t0x49\t/* @pcrel(sym + add), ptb, call */\n#define R_IA64_PCREL21M\t\t0x4a\t/* @pcrel(sym + add), chk.s */\n#define R_IA64_PCREL21F\t\t0x4b\t/* @pcrel(sym + add), fchkf */\n#define R_IA64_PCREL32MSB\t0x4c\t/* @pcrel(sym + add), data4 MSB */\n#define R_IA64_PCREL32LSB\t0x4d\t/* @pcrel(sym + add), data4 LSB */\n#define R_IA64_PCREL64MSB\t0x4e\t/* @pcrel(sym + add), data8 MSB */\n#define R_IA64_PCREL64LSB\t0x4f\t/* @pcrel(sym + add), data8 LSB */\n#define R_IA64_LTOFF_FPTR22\t0x52\t/* @ltoff(@fptr(s+a)), imm22 */\n#define R_IA64_LTOFF_FPTR64I\t0x53\t/* @ltoff(@fptr(s+a)), imm64 */\n#define R_IA64_LTOFF_FPTR32MSB\t0x54\t/* @ltoff(@fptr(s+a)), data4 MSB */\n#define R_IA64_LTOFF_FPTR32LSB\t0x55\t/* @ltoff(@fptr(s+a)), data4 LSB */\n#define R_IA64_LTOFF_FPTR64MSB\t0x56\t/* @ltoff(@fptr(s+a)), data8 MSB */\n#define R_IA64_LTOFF_FPTR64LSB\t0x57\t/* @ltoff(@fptr(s+a)), data8 LSB */\n#define R_IA64_SEGREL32MSB\t0x5c\t/* @segrel(sym + add), data4 MSB */\n#define R_IA64_SEGREL32LSB\t0x5d\t/* @segrel(sym + add), data4 LSB */\n#define R_IA64_SEGREL64MSB\t0x5e\t/* @segrel(sym + add), data8 MSB */\n#define R_IA64_SEGREL64LSB\t0x5f\t/* @segrel(sym + add), data8 LSB */\n#define R_IA64_SECREL32MSB\t0x64\t/* @secrel(sym + add), data4 MSB */\n#define R_IA64_SECREL32LSB\t0x65\t/* @secrel(sym + add), data4 LSB */\n#define R_IA64_SECREL64MSB\t0x66\t/* @secrel(sym + add), data8 MSB */\n#define R_IA64_SECREL64LSB\t0x67\t/* @secrel(sym + add), data8 LSB */\n#define R_IA64_REL32MSB\t\t0x6c\t/* data 4 + REL */\n#define R_IA64_REL32LSB\t\t0x6d\t/* data 4 + REL */\n#define R_IA64_REL64MSB\t\t0x6e\t/* data 8 + REL */\n#define R_IA64_REL64LSB\t\t0x6f\t/* data 8 + REL */\n#define R_IA64_LTV32MSB\t\t0x74\t/* symbol + addend, data4 MSB */\n#define R_IA64_LTV32LSB\t\t0x75\t/* symbol + addend, data4 LSB */\n#define R_IA64_LTV64MSB\t\t0x76\t/* symbol + addend, data8 MSB */\n#define R_IA64_LTV64LSB\t\t0x77\t/* symbol + addend, data8 LSB */\n#define R_IA64_PCREL21BI\t0x79\t/* @pcrel(sym + add), 21bit inst */\n#define R_IA64_PCREL22\t\t0x7a\t/* @pcrel(sym + add), 22bit inst */\n#define R_IA64_PCREL64I\t\t0x7b\t/* @pcrel(sym + add), 64bit inst */\n#define R_IA64_IPLTMSB\t\t0x80\t/* dynamic reloc, imported PLT, MSB */\n#define R_IA64_IPLTLSB\t\t0x81\t/* dynamic reloc, imported PLT, LSB */\n#define R_IA64_COPY\t\t0x84\t/* copy relocation */\n#define R_IA64_SUB\t\t0x85\t/* Addend and symbol difference */\n#define R_IA64_LTOFF22X\t\t0x86\t/* LTOFF22, relaxable.  */\n#define R_IA64_LDXMOV\t\t0x87\t/* Use of LTOFF22X.  */\n#define R_IA64_TPREL14\t\t0x91\t/* @tprel(sym + add), imm14 */\n#define R_IA64_TPREL22\t\t0x92\t/* @tprel(sym + add), imm22 */\n#define R_IA64_TPREL64I\t\t0x93\t/* @tprel(sym + add), imm64 */\n#define R_IA64_TPREL64MSB\t0x96\t/* @tprel(sym + add), data8 MSB */\n#define R_IA64_TPREL64LSB\t0x97\t/* @tprel(sym + add), data8 LSB */\n#define R_IA64_LTOFF_TPREL22\t0x9a\t/* @ltoff(@tprel(s+a)), imm2 */\n#define R_IA64_DTPMOD64MSB\t0xa6\t/* @dtpmod(sym + add), data8 MSB */\n#define R_IA64_DTPMOD64LSB\t0xa7\t/* @dtpmod(sym + add), data8 LSB */\n#define R_IA64_LTOFF_DTPMOD22\t0xaa\t/* @ltoff(@dtpmod(sym + add)), imm22 */\n#define R_IA64_DTPREL14\t\t0xb1\t/* @dtprel(sym + add), imm14 */\n#define R_IA64_DTPREL22\t\t0xb2\t/* @dtprel(sym + add), imm22 */\n#define R_IA64_DTPREL64I\t0xb3\t/* @dtprel(sym + add), imm64 */\n#define R_IA64_DTPREL32MSB\t0xb4\t/* @dtprel(sym + add), data4 MSB */\n#define R_IA64_DTPREL32LSB\t0xb5\t/* @dtprel(sym + add), data4 LSB */\n#define R_IA64_DTPREL64MSB\t0xb6\t/* @dtprel(sym + add), data8 MSB */\n#define R_IA64_DTPREL64LSB\t0xb7\t/* @dtprel(sym + add), data8 LSB */\n#define R_IA64_LTOFF_DTPREL22\t0xba\t/* @ltoff(@dtprel(s+a)), imm22 */\n\n/* SH specific declarations */\n\n/* Processor specific flags for the ELF header e_flags field.  */\n#define EF_SH_MACH_MASK\t\t0x1f\n#define EF_SH_UNKNOWN\t\t0x0\n#define EF_SH1\t\t\t0x1\n#define EF_SH2\t\t\t0x2\n#define EF_SH3\t\t\t0x3\n#define EF_SH_DSP\t\t0x4\n#define EF_SH3_DSP\t\t0x5\n#define EF_SH4AL_DSP\t\t0x6\n#define EF_SH3E\t\t\t0x8\n#define EF_SH4\t\t\t0x9\n#define EF_SH2E\t\t\t0xb\n#define EF_SH4A\t\t\t0xc\n#define EF_SH2A\t\t\t0xd\n#define EF_SH4_NOFPU\t\t0x10\n#define EF_SH4A_NOFPU\t\t0x11\n#define EF_SH4_NOMMU_NOFPU\t0x12\n#define EF_SH2A_NOFPU\t\t0x13\n#define EF_SH3_NOMMU\t\t0x14\n#define EF_SH2A_SH4_NOFPU\t0x15\n#define EF_SH2A_SH3_NOFPU\t0x16\n#define EF_SH2A_SH4\t\t0x17\n#define EF_SH2A_SH3E\t\t0x18\n\n/* SH relocs.  */\n#define\tR_SH_NONE\t\t0\n#define\tR_SH_DIR32\t\t1\n#define\tR_SH_REL32\t\t2\n#define\tR_SH_DIR8WPN\t\t3\n#define\tR_SH_IND12W\t\t4\n#define\tR_SH_DIR8WPL\t\t5\n#define\tR_SH_DIR8WPZ\t\t6\n#define\tR_SH_DIR8BP\t\t7\n#define\tR_SH_DIR8W\t\t8\n#define\tR_SH_DIR8L\t\t9\n#define\tR_SH_SWITCH16\t\t25\n#define\tR_SH_SWITCH32\t\t26\n#define\tR_SH_USES\t\t27\n#define\tR_SH_COUNT\t\t28\n#define\tR_SH_ALIGN\t\t29\n#define\tR_SH_CODE\t\t30\n#define\tR_SH_DATA\t\t31\n#define\tR_SH_LABEL\t\t32\n#define\tR_SH_SWITCH8\t\t33\n#define\tR_SH_GNU_VTINHERIT\t34\n#define\tR_SH_GNU_VTENTRY\t35\n#define\tR_SH_TLS_GD_32\t\t144\n#define\tR_SH_TLS_LD_32\t\t145\n#define\tR_SH_TLS_LDO_32\t\t146\n#define\tR_SH_TLS_IE_32\t\t147\n#define\tR_SH_TLS_LE_32\t\t148\n#define\tR_SH_TLS_DTPMOD32\t149\n#define\tR_SH_TLS_DTPOFF32\t150\n#define\tR_SH_TLS_TPOFF32\t151\n#define\tR_SH_GOT32\t\t160\n#define\tR_SH_PLT32\t\t161\n#define\tR_SH_COPY\t\t162\n#define\tR_SH_GLOB_DAT\t\t163\n#define\tR_SH_JMP_SLOT\t\t164\n#define\tR_SH_RELATIVE\t\t165\n#define\tR_SH_GOTOFF\t\t166\n#define\tR_SH_GOTPC\t\t167\n/* Keep this the last entry.  */\n#define\tR_SH_NUM\t\t256\n\n/* S/390 specific definitions.  */\n\n/* Valid values for the e_flags field.  */\n\n#define EF_S390_HIGH_GPRS    0x00000001  /* High GPRs kernel facility needed.  */\n\n/* Additional s390 relocs */\n\n#define R_390_NONE\t\t0\t/* No reloc.  */\n#define R_390_8\t\t\t1\t/* Direct 8 bit.  */\n#define R_390_12\t\t2\t/* Direct 12 bit.  */\n#define R_390_16\t\t3\t/* Direct 16 bit.  */\n#define R_390_32\t\t4\t/* Direct 32 bit.  */\n#define R_390_PC32\t\t5\t/* PC relative 32 bit.\t*/\n#define R_390_GOT12\t\t6\t/* 12 bit GOT offset.  */\n#define R_390_GOT32\t\t7\t/* 32 bit GOT offset.  */\n#define R_390_PLT32\t\t8\t/* 32 bit PC relative PLT address.  */\n#define R_390_COPY\t\t9\t/* Copy symbol at runtime.  */\n#define R_390_GLOB_DAT\t\t10\t/* Create GOT entry.  */\n#define R_390_JMP_SLOT\t\t11\t/* Create PLT entry.  */\n#define R_390_RELATIVE\t\t12\t/* Adjust by program base.  */\n#define R_390_GOTOFF32\t\t13\t/* 32 bit offset to GOT.\t */\n#define R_390_GOTPC\t\t14\t/* 32 bit PC relative offset to GOT.  */\n#define R_390_GOT16\t\t15\t/* 16 bit GOT offset.  */\n#define R_390_PC16\t\t16\t/* PC relative 16 bit.\t*/\n#define R_390_PC16DBL\t\t17\t/* PC relative 16 bit shifted by 1.  */\n#define R_390_PLT16DBL\t\t18\t/* 16 bit PC rel. PLT shifted by 1.  */\n#define R_390_PC32DBL\t\t19\t/* PC relative 32 bit shifted by 1.  */\n#define R_390_PLT32DBL\t\t20\t/* 32 bit PC rel. PLT shifted by 1.  */\n#define R_390_GOTPCDBL\t\t21\t/* 32 bit PC rel. GOT shifted by 1.  */\n#define R_390_64\t\t22\t/* Direct 64 bit.  */\n#define R_390_PC64\t\t23\t/* PC relative 64 bit.\t*/\n#define R_390_GOT64\t\t24\t/* 64 bit GOT offset.  */\n#define R_390_PLT64\t\t25\t/* 64 bit PC relative PLT address.  */\n#define R_390_GOTENT\t\t26\t/* 32 bit PC rel. to GOT entry >> 1. */\n#define R_390_GOTOFF16\t\t27\t/* 16 bit offset to GOT. */\n#define R_390_GOTOFF64\t\t28\t/* 64 bit offset to GOT. */\n#define R_390_GOTPLT12\t\t29\t/* 12 bit offset to jump slot.\t*/\n#define R_390_GOTPLT16\t\t30\t/* 16 bit offset to jump slot.\t*/\n#define R_390_GOTPLT32\t\t31\t/* 32 bit offset to jump slot.\t*/\n#define R_390_GOTPLT64\t\t32\t/* 64 bit offset to jump slot.\t*/\n#define R_390_GOTPLTENT\t\t33\t/* 32 bit rel. offset to jump slot.  */\n#define R_390_PLTOFF16\t\t34\t/* 16 bit offset from GOT to PLT. */\n#define R_390_PLTOFF32\t\t35\t/* 32 bit offset from GOT to PLT. */\n#define R_390_PLTOFF64\t\t36\t/* 16 bit offset from GOT to PLT. */\n#define R_390_TLS_LOAD\t\t37\t/* Tag for load insn in TLS code.  */\n#define R_390_TLS_GDCALL\t38\t/* Tag for function call in general\n\t\t\t\t\t   dynamic TLS code. */\n#define R_390_TLS_LDCALL\t39\t/* Tag for function call in local\n\t\t\t\t\t   dynamic TLS code. */\n#define R_390_TLS_GD32\t\t40\t/* Direct 32 bit for general dynamic\n\t\t\t\t\t   thread local data.  */\n#define R_390_TLS_GD64\t\t41\t/* Direct 64 bit for general dynamic\n\t\t\t\t\t  thread local data.  */\n#define R_390_TLS_GOTIE12\t42\t/* 12 bit GOT offset for static TLS\n\t\t\t\t\t   block offset.  */\n#define R_390_TLS_GOTIE32\t43\t/* 32 bit GOT offset for static TLS\n\t\t\t\t\t   block offset.  */\n#define R_390_TLS_GOTIE64\t44\t/* 64 bit GOT offset for static TLS\n\t\t\t\t\t   block offset. */\n#define R_390_TLS_LDM32\t\t45\t/* Direct 32 bit for local dynamic\n\t\t\t\t\t   thread local data in LE code.  */\n#define R_390_TLS_LDM64\t\t46\t/* Direct 64 bit for local dynamic\n\t\t\t\t\t   thread local data in LE code.  */\n#define R_390_TLS_IE32\t\t47\t/* 32 bit address of GOT entry for\n\t\t\t\t\t   negated static TLS block offset.  */\n#define R_390_TLS_IE64\t\t48\t/* 64 bit address of GOT entry for\n\t\t\t\t\t   negated static TLS block offset.  */\n#define R_390_TLS_IEENT\t\t49\t/* 32 bit rel. offset to GOT entry for\n\t\t\t\t\t   negated static TLS block offset.  */\n#define R_390_TLS_LE32\t\t50\t/* 32 bit negated offset relative to\n\t\t\t\t\t   static TLS block.  */\n#define R_390_TLS_LE64\t\t51\t/* 64 bit negated offset relative to\n\t\t\t\t\t   static TLS block.  */\n#define R_390_TLS_LDO32\t\t52\t/* 32 bit offset relative to TLS\n\t\t\t\t\t   block.  */\n#define R_390_TLS_LDO64\t\t53\t/* 64 bit offset relative to TLS\n\t\t\t\t\t   block.  */\n#define R_390_TLS_DTPMOD\t54\t/* ID of module containing symbol.  */\n#define R_390_TLS_DTPOFF\t55\t/* Offset in TLS block.\t */\n#define R_390_TLS_TPOFF\t\t56\t/* Negated offset in static TLS\n\t\t\t\t\t   block.  */\n#define R_390_20\t\t57\t/* Direct 20 bit.  */\n#define R_390_GOT20\t\t58\t/* 20 bit GOT offset.  */\n#define R_390_GOTPLT20\t\t59\t/* 20 bit offset to jump slot.  */\n#define R_390_TLS_GOTIE20\t60\t/* 20 bit GOT offset for static TLS\n\t\t\t\t\t   block offset.  */\n/* Keep this the last entry.  */\n#define R_390_NUM\t\t61\n\n\n/* CRIS relocations.  */\n#define R_CRIS_NONE\t\t0\n#define R_CRIS_8\t\t1\n#define R_CRIS_16\t\t2\n#define R_CRIS_32\t\t3\n#define R_CRIS_8_PCREL\t\t4\n#define R_CRIS_16_PCREL\t\t5\n#define R_CRIS_32_PCREL\t\t6\n#define R_CRIS_GNU_VTINHERIT\t7\n#define R_CRIS_GNU_VTENTRY\t8\n#define R_CRIS_COPY\t\t9\n#define R_CRIS_GLOB_DAT\t\t10\n#define R_CRIS_JUMP_SLOT\t11\n#define R_CRIS_RELATIVE\t\t12\n#define R_CRIS_16_GOT\t\t13\n#define R_CRIS_32_GOT\t\t14\n#define R_CRIS_16_GOTPLT\t15\n#define R_CRIS_32_GOTPLT\t16\n#define R_CRIS_32_GOTREL\t17\n#define R_CRIS_32_PLT_GOTREL\t18\n#define R_CRIS_32_PLT_PCREL\t19\n\n#define R_CRIS_NUM\t\t20\n\n\n/* AMD x86-64 relocations.  */\n#define R_X86_64_NONE\t\t0\t/* No reloc */\n#define R_X86_64_64\t\t1\t/* Direct 64 bit  */\n#define R_X86_64_PC32\t\t2\t/* PC relative 32 bit signed */\n#define R_X86_64_GOT32\t\t3\t/* 32 bit GOT entry */\n#define R_X86_64_PLT32\t\t4\t/* 32 bit PLT address */\n#define R_X86_64_COPY\t\t5\t/* Copy symbol at runtime */\n#define R_X86_64_GLOB_DAT\t6\t/* Create GOT entry */\n#define R_X86_64_JUMP_SLOT\t7\t/* Create PLT entry */\n#define R_X86_64_RELATIVE\t8\t/* Adjust by program base */\n#define R_X86_64_GOTPCREL\t9\t/* 32 bit signed PC relative\n\t\t\t\t\t   offset to GOT */\n#define R_X86_64_32\t\t10\t/* Direct 32 bit zero extended */\n#define R_X86_64_32S\t\t11\t/* Direct 32 bit sign extended */\n#define R_X86_64_16\t\t12\t/* Direct 16 bit zero extended */\n#define R_X86_64_PC16\t\t13\t/* 16 bit sign extended pc relative */\n#define R_X86_64_8\t\t14\t/* Direct 8 bit sign extended  */\n#define R_X86_64_PC8\t\t15\t/* 8 bit sign extended pc relative */\n#define R_X86_64_DTPMOD64\t16\t/* ID of module containing symbol */\n#define R_X86_64_DTPOFF64\t17\t/* Offset in module's TLS block */\n#define R_X86_64_TPOFF64\t18\t/* Offset in initial TLS block */\n#define R_X86_64_TLSGD\t\t19\t/* 32 bit signed PC relative offset\n\t\t\t\t\t   to two GOT entries for GD symbol */\n#define R_X86_64_TLSLD\t\t20\t/* 32 bit signed PC relative offset\n\t\t\t\t\t   to two GOT entries for LD symbol */\n#define R_X86_64_DTPOFF32\t21\t/* Offset in TLS block */\n#define R_X86_64_GOTTPOFF\t22\t/* 32 bit signed PC relative offset\n\t\t\t\t\t   to GOT entry for IE symbol */\n#define R_X86_64_TPOFF32\t23\t/* Offset in initial TLS block */\n#define R_X86_64_PC64\t\t24\t/* PC relative 64 bit */\n#define R_X86_64_GOTOFF64\t25\t/* 64 bit offset to GOT */\n#define R_X86_64_GOTPC32\t26\t/* 32 bit signed pc relative\n\t\t\t\t\t   offset to GOT */\n#define R_X86_64_GOT64\t\t27\t/* 64-bit GOT entry offset */\n#define R_X86_64_GOTPCREL64\t28\t/* 64-bit PC relative offset\n\t\t\t\t\t   to GOT entry */\n#define R_X86_64_GOTPC64\t29\t/* 64-bit PC relative offset to GOT */\n#define R_X86_64_GOTPLT64\t30 \t/* like GOT64, says PLT entry needed */\n#define R_X86_64_PLTOFF64\t31\t/* 64-bit GOT relative offset\n\t\t\t\t\t   to PLT entry */\n#define R_X86_64_SIZE32\t\t32\t/* Size of symbol plus 32-bit addend */\n#define R_X86_64_SIZE64\t\t33\t/* Size of symbol plus 64-bit addend */\n#define R_X86_64_GOTPC32_TLSDESC 34\t/* GOT offset for TLS descriptor.  */\n#define R_X86_64_TLSDESC_CALL   35\t/* Marker for call through TLS\n\t\t\t\t\t   descriptor.  */\n#define R_X86_64_TLSDESC        36\t/* TLS descriptor.  */\n#define R_X86_64_IRELATIVE\t37\t/* Adjust indirectly by program base */\n\n#define R_X86_64_NUM\t\t38\n\n\n/* AM33 relocations.  */\n#define R_MN10300_NONE\t\t0\t/* No reloc.  */\n#define R_MN10300_32\t\t1\t/* Direct 32 bit.  */\n#define R_MN10300_16\t\t2\t/* Direct 16 bit.  */\n#define R_MN10300_8\t\t3\t/* Direct 8 bit.  */\n#define R_MN10300_PCREL32\t4\t/* PC-relative 32-bit.  */\n#define R_MN10300_PCREL16\t5\t/* PC-relative 16-bit signed.  */\n#define R_MN10300_PCREL8\t6\t/* PC-relative 8-bit signed.  */\n#define R_MN10300_GNU_VTINHERIT\t7\t/* Ancient C++ vtable garbage... */\n#define R_MN10300_GNU_VTENTRY\t8\t/* ... collection annotation.  */\n#define R_MN10300_24\t\t9\t/* Direct 24 bit.  */\n#define R_MN10300_GOTPC32\t10\t/* 32-bit PCrel offset to GOT.  */\n#define R_MN10300_GOTPC16\t11\t/* 16-bit PCrel offset to GOT.  */\n#define R_MN10300_GOTOFF32\t12\t/* 32-bit offset from GOT.  */\n#define R_MN10300_GOTOFF24\t13\t/* 24-bit offset from GOT.  */\n#define R_MN10300_GOTOFF16\t14\t/* 16-bit offset from GOT.  */\n#define R_MN10300_PLT32\t\t15\t/* 32-bit PCrel to PLT entry.  */\n#define R_MN10300_PLT16\t\t16\t/* 16-bit PCrel to PLT entry.  */\n#define R_MN10300_GOT32\t\t17\t/* 32-bit offset to GOT entry.  */\n#define R_MN10300_GOT24\t\t18\t/* 24-bit offset to GOT entry.  */\n#define R_MN10300_GOT16\t\t19\t/* 16-bit offset to GOT entry.  */\n#define R_MN10300_COPY\t\t20\t/* Copy symbol at runtime.  */\n#define R_MN10300_GLOB_DAT\t21\t/* Create GOT entry.  */\n#define R_MN10300_JMP_SLOT\t22\t/* Create PLT entry.  */\n#define R_MN10300_RELATIVE\t23\t/* Adjust by program base.  */\n\n#define R_MN10300_NUM\t\t24\n\n\n/* M32R relocs.  */\n#define R_M32R_NONE\t\t0\t/* No reloc. */\n#define R_M32R_16\t\t1\t/* Direct 16 bit. */\n#define R_M32R_32\t\t2\t/* Direct 32 bit. */\n#define R_M32R_24\t\t3\t/* Direct 24 bit. */\n#define R_M32R_10_PCREL\t\t4\t/* PC relative 10 bit shifted. */\n#define R_M32R_18_PCREL\t\t5\t/* PC relative 18 bit shifted. */\n#define R_M32R_26_PCREL\t\t6\t/* PC relative 26 bit shifted. */\n#define R_M32R_HI16_ULO\t\t7\t/* High 16 bit with unsigned low. */\n#define R_M32R_HI16_SLO\t\t8\t/* High 16 bit with signed low. */\n#define R_M32R_LO16\t\t9\t/* Low 16 bit. */\n#define R_M32R_SDA16\t\t10\t/* 16 bit offset in SDA. */\n#define R_M32R_GNU_VTINHERIT\t11\n#define R_M32R_GNU_VTENTRY\t12\n/* M32R relocs use SHT_RELA.  */\n#define R_M32R_16_RELA\t\t33\t/* Direct 16 bit. */\n#define R_M32R_32_RELA\t\t34\t/* Direct 32 bit. */\n#define R_M32R_24_RELA\t\t35\t/* Direct 24 bit. */\n#define R_M32R_10_PCREL_RELA\t36\t/* PC relative 10 bit shifted. */\n#define R_M32R_18_PCREL_RELA\t37\t/* PC relative 18 bit shifted. */\n#define R_M32R_26_PCREL_RELA\t38\t/* PC relative 26 bit shifted. */\n#define R_M32R_HI16_ULO_RELA\t39\t/* High 16 bit with unsigned low */\n#define R_M32R_HI16_SLO_RELA\t40\t/* High 16 bit with signed low */\n#define R_M32R_LO16_RELA\t41\t/* Low 16 bit */\n#define R_M32R_SDA16_RELA\t42\t/* 16 bit offset in SDA */\n#define R_M32R_RELA_GNU_VTINHERIT\t43\n#define R_M32R_RELA_GNU_VTENTRY\t44\n#define R_M32R_REL32\t\t45\t/* PC relative 32 bit.  */\n\n#define R_M32R_GOT24\t\t48\t/* 24 bit GOT entry */\n#define R_M32R_26_PLTREL\t49\t/* 26 bit PC relative to PLT shifted */\n#define R_M32R_COPY\t\t50\t/* Copy symbol at runtime */\n#define R_M32R_GLOB_DAT\t\t51\t/* Create GOT entry */\n#define R_M32R_JMP_SLOT\t\t52\t/* Create PLT entry */\n#define R_M32R_RELATIVE\t\t53\t/* Adjust by program base */\n#define R_M32R_GOTOFF\t\t54\t/* 24 bit offset to GOT */\n#define R_M32R_GOTPC24\t\t55\t/* 24 bit PC relative offset to GOT */\n#define R_M32R_GOT16_HI_ULO\t56\t/* High 16 bit GOT entry with unsigned\n\t\t\t\t\t   low */\n#define R_M32R_GOT16_HI_SLO\t57\t/* High 16 bit GOT entry with signed\n\t\t\t\t\t   low */\n#define R_M32R_GOT16_LO\t\t58\t/* Low 16 bit GOT entry */\n#define R_M32R_GOTPC_HI_ULO\t59\t/* High 16 bit PC relative offset to\n\t\t\t\t\t   GOT with unsigned low */\n#define R_M32R_GOTPC_HI_SLO\t60\t/* High 16 bit PC relative offset to\n\t\t\t\t\t   GOT with signed low */\n#define R_M32R_GOTPC_LO\t\t61\t/* Low 16 bit PC relative offset to\n\t\t\t\t\t   GOT */\n#define R_M32R_GOTOFF_HI_ULO\t62\t/* High 16 bit offset to GOT\n\t\t\t\t\t   with unsigned low */\n#define R_M32R_GOTOFF_HI_SLO\t63\t/* High 16 bit offset to GOT\n\t\t\t\t\t   with signed low */\n#define R_M32R_GOTOFF_LO\t64\t/* Low 16 bit offset to GOT */\n#define R_M32R_NUM\t\t256\t/* Keep this the last entry. */\n\n\n#endif\t/* elf.h */\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/libguile/dynl.c": "/* dynl.c - dynamic linking\n *\n * Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002,\n * 2003, 2008, 2009, 2010, 2011, 2017 Free Software Foundation, Inc.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public License\n * as published by the Free Software Foundation; either version 3 of\n * the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n * 02110-1301 USA\n */\n\n\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#include <alloca.h>\n#include <string.h>\n\n/* \"dynl.c\" dynamically link&load object files.\n   Author: Aubrey Jaffer\n   Modified for libguile by Marius Vollmer */\n\n#if 0 /* Disabled until we know for sure that it isn't needed */\n/* XXX - This is only here to drag in a definition of __eprintf. This\n   is needed for proper operation of dynamic linking. The real\n   solution would probably be a shared libgcc. */\n\n#undef NDEBUG\n#include <assert.h>\n\nstatic void\nmaybe_drag_in_eprintf ()\n{\n  assert (!maybe_drag_in_eprintf);\n}\n#endif\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n#include \"libguile/_scm.h\"\n#include \"libguile/libpath.h\"\n#include \"libguile/dynl.h\"\n#include \"libguile/smob.h\"\n#include \"libguile/keywords.h\"\n#include \"libguile/ports.h\"\n#include \"libguile/strings.h\"\n#include \"libguile/deprecation.h\"\n#include \"libguile/validate.h\"\n#include \"libguile/dynwind.h\"\n#include \"libguile/foreign.h\"\n#include \"libguile/gc.h\"\n\n#include <ltdl.h>\n\n/* From the libtool manual: \"Note that libltdl is not threadsafe,\n   i.e. a multithreaded application has to use a mutex for libltdl.\".\n   Note: We initialize it as a recursive mutex below.  */\nstatic scm_i_pthread_mutex_t ltdl_lock = SCM_I_PTHREAD_MUTEX_INITIALIZER;\n\n/* LT_PATH_SEP-separated extension library search path, searched last */\nstatic char *system_extensions_path;\n\nstatic void *\nsysdep_dynl_link (const char *fname, const char *subr)\n{\n  lt_dlhandle handle;\n\n  if (fname == NULL)\n    /* Return a handle for the program as a whole.  */\n    handle = lt_dlopen (NULL);\n  else\n    {\n      handle = lt_dlopenext (fname);\n\n      if (handle == NULL\n#ifdef LT_DIRSEP_CHAR\n          && strchr (fname, LT_DIRSEP_CHAR) == NULL\n#endif\n          && strchr (fname, '/') == NULL)\n        {\n          /* FNAME contains no directory separators and was not in the\n             usual library search paths, so now we search for it in\n             SYSTEM_EXTENSIONS_PATH. */\n          char *fname_attempt\n            = scm_gc_malloc_pointerless (strlen (system_extensions_path)\n                                         + strlen (fname) + 2,\n                                         \"dynl fname_attempt\");\n          char *path;  /* remaining path to search */\n          char *end;   /* end of current path component */\n          char *s;\n\n          /* Iterate over the components of SYSTEM_EXTENSIONS_PATH */\n          for (path = system_extensions_path;\n               *path != '\\0';\n               path = (*end == '\\0') ? end : (end + 1))\n            {\n              /* Find end of path component */\n              end = strchr (path, LT_PATHSEP_CHAR);\n              if (end == NULL)\n                end = strchr (path, '\\0');\n\n              /* Skip empty path components */\n              if (path == end)\n                continue;\n\n              /* Construct FNAME_ATTEMPT, starting with path component */\n              s = fname_attempt;\n              memcpy (s, path, end - path);\n              s += end - path;\n\n              /* Append directory separator, but avoid duplicates */\n              if (s[-1] != '/'\n#ifdef LT_DIRSEP_CHAR\n                  && s[-1] != LT_DIRSEP_CHAR\n#endif\n                  )\n                *s++ = '/';\n\n              /* Finally, append FNAME (including null terminator) */\n              strcpy (s, fname);\n\n              /* Try to load it, and terminate the search if successful */\n              handle = lt_dlopenext (fname_attempt);\n              if (handle != NULL)\n                break;\n            }\n        }\n    }\n\n  if (handle == NULL)\n    {\n      SCM fn;\n      SCM msg;\n\n      fn = fname != NULL ? scm_from_locale_string (fname) : SCM_BOOL_F;\n      msg = scm_from_locale_string (lt_dlerror ());\n      scm_misc_error (subr, \"file: ~S, message: ~S\", scm_list_2 (fn, msg));\n    }\n\n  return (void *) handle;\n}\n\nstatic void\nsysdep_dynl_unlink (void *handle, const char *subr)\n{\n  if (lt_dlclose ((lt_dlhandle) handle))\n    {\n      scm_misc_error (subr, (char *) lt_dlerror (), SCM_EOL);\n    }\n}\n   \nstatic void *\nsysdep_dynl_value (const char *symb, void *handle, const char *subr)\n{\n  void *fptr;\n\n  fptr = lt_dlsym ((lt_dlhandle) handle, symb);\n  if (!fptr)\n    scm_misc_error (subr, \"Symbol not found: ~a\",\n                    scm_list_1 (scm_from_locale_string (symb)));\n  return fptr;\n}\n\nstatic void\nsysdep_dynl_init ()\n{\n  char *env;\n\n  lt_dlinit ();\n\n  /* Initialize 'system_extensions_path' from\n     $GUILE_SYSTEM_EXTENSIONS_PATH, or if that's not set:\n     <SCM_LIB_DIR> <LT_PATHSEP_CHAR> <SCM_EXTENSIONS_DIR>.\n\n     'lt_dladdsearchdir' can't be used because it is searched before\n     the system-dependent search path, which is the one 'libtool\n     --mode=execute -dlopen' fiddles with (info \"(libtool) Libltdl\n     Interface\").  See\n     <http://lists.gnu.org/archive/html/guile-devel/2010-11/msg00095.html>.\n\n     The environment variables $LTDL_LIBRARY_PATH and $LD_LIBRARY_PATH\n     can't be used because they would be propagated to subprocesses\n     which may cause problems for other programs.  See\n     <http://lists.gnu.org/archive/html/guile-devel/2012-09/msg00037.html> */\n\n  env = getenv (\"GUILE_SYSTEM_EXTENSIONS_PATH\");\n  if (env)\n    system_extensions_path = env;\n  else\n    {\n      system_extensions_path\n        = scm_gc_malloc_pointerless (strlen (SCM_LIB_DIR)\n                                     + strlen (SCM_EXTENSIONS_DIR) + 2,\n                                     \"system_extensions_path\");\n      sprintf (system_extensions_path, \"%s%c%s\",\n               SCM_LIB_DIR, LT_PATHSEP_CHAR, SCM_EXTENSIONS_DIR);\n    }\n}\n\nscm_t_bits scm_tc16_dynamic_obj;\n\n#define DYNL_FILENAME         SCM_SMOB_OBJECT\n#define DYNL_HANDLE(x)        ((void *) SCM_SMOB_DATA_2 (x))\n#define SET_DYNL_HANDLE(x, v) (SCM_SET_SMOB_DATA_2 ((x), (scm_t_bits) (v)))\n\n\n\nstatic int\ndynl_obj_print (SCM exp, SCM port, scm_print_state *pstate)\n{\n  scm_puts (\"#<dynamic-object \", port);\n  scm_iprin1 (DYNL_FILENAME (exp), port, pstate);\n  if (DYNL_HANDLE (exp) == NULL)\n    scm_puts (\" (unlinked)\", port);\n  scm_putc ('>', port);\n  return 1;\n}\n\n\nSCM_DEFINE (scm_dynamic_link, \"dynamic-link\", 0, 1, 0,\n            (SCM filename),\n\t    \"Find the shared object (shared library) denoted by\\n\"\n\t    \"@var{filename} and link it into the running Guile\\n\"\n\t    \"application.  The returned\\n\"\n\t    \"scheme object is a ``handle'' for the library which can\\n\"\n\t    \"be passed to @code{dynamic-func}, @code{dynamic-call} etc.\\n\\n\"\n\t    \"Searching for object files is system dependent.  Normally,\\n\"\n\t    \"if @var{filename} does have an explicit directory it will\\n\"\n\t    \"be searched for in locations\\n\"\n\t    \"such as @file{/usr/lib} and @file{/usr/local/lib}.\\n\\n\"\n\t    \"When @var{filename} is omitted, a @dfn{global symbol handle} is\\n\"\n\t    \"returned.  This handle provides access to the symbols\\n\"\n\t    \"available to the program at run-time, including those exported\\n\"\n\t    \"by the program itself and the shared libraries already loaded.\\n\")\n#define FUNC_NAME s_scm_dynamic_link\n{\n  void *handle;\n  char *file;\n\n  scm_dynwind_begin (0);\n  scm_i_dynwind_pthread_mutex_lock (&ltdl_lock);\n\n  if (SCM_UNBNDP (filename))\n    file = NULL;\n  else\n    {\n      file = scm_to_locale_string (filename);\n      scm_dynwind_free (file);\n    }\n\n  handle = sysdep_dynl_link (file, FUNC_NAME);\n  scm_dynwind_end ();\n\n  SCM_RETURN_NEWSMOB2 (scm_tc16_dynamic_obj,\n\t\t       SCM_UNBNDP (filename)\n\t\t       ? SCM_UNPACK (SCM_BOOL_F) : SCM_UNPACK (filename),\n\t\t       handle);\n}\n#undef FUNC_NAME\n\n\nSCM_DEFINE (scm_dynamic_object_p, \"dynamic-object?\", 1, 0, 0, \n            (SCM obj),\n\t    \"Return @code{#t} if @var{obj} is a dynamic object handle,\\n\"\n\t    \"or @code{#f} otherwise.\")\n#define FUNC_NAME s_scm_dynamic_object_p\n{\n  return scm_from_bool (SCM_TYP16_PREDICATE (scm_tc16_dynamic_obj, obj));\n}\n#undef FUNC_NAME\n\n\nSCM_DEFINE (scm_dynamic_unlink, \"dynamic-unlink\", 1, 0, 0, \n            (SCM dobj),\n\t    \"Unlink a dynamic object from the application, if possible.  The\\n\"\n\t    \"object must have been linked by @code{dynamic-link}, with \\n\"\n\t    \"@var{dobj} the corresponding handle.  After this procedure\\n\"\n\t    \"is called, the handle can no longer be used to access the\\n\"\n\t    \"object.\")\n#define FUNC_NAME s_scm_dynamic_unlink\n{\n  /*fixme* GC-problem */\n  SCM_VALIDATE_SMOB (SCM_ARG1, dobj, dynamic_obj);\n\n  scm_dynwind_begin (0);\n  scm_i_dynwind_pthread_mutex_lock (&ltdl_lock);\n  if (DYNL_HANDLE (dobj) == NULL) {\n    SCM_MISC_ERROR (\"Already unlinked: ~S\", scm_list_1 (dobj));\n  } else {\n    sysdep_dynl_unlink (DYNL_HANDLE (dobj), FUNC_NAME);\n    SET_DYNL_HANDLE (dobj, NULL);\n  }\n  scm_dynwind_end ();\n\n  return SCM_UNSPECIFIED;\n}\n#undef FUNC_NAME\n\n\nSCM_DEFINE (scm_dynamic_pointer, \"dynamic-pointer\", 2, 0, 0,\n            (SCM name, SCM dobj),\n\t    \"Return a ``wrapped pointer'' to the symbol @var{name}\\n\"\n\t    \"in the shared object referred to by @var{dobj}.  The returned\\n\"\n\t    \"pointer points to a C object.\\n\\n\"\n\t    \"Regardless whether your C compiler prepends an underscore\\n\"\n\t    \"@samp{_} to the global names in a program, you should\\n\"\n\t    \"@strong{not} include this underscore in @var{name}\\n\"\n\t    \"since it will be added automatically when necessary.\")\n#define FUNC_NAME s_scm_dynamic_pointer\n{\n  void *val;\n\n  SCM_VALIDATE_STRING (1, name);\n  SCM_VALIDATE_SMOB (SCM_ARG2, dobj, dynamic_obj);\n\n  if (DYNL_HANDLE (dobj) == NULL)\n    SCM_MISC_ERROR (\"Already unlinked: ~S\", dobj);\n  else\n    {\n      char *chars;\n\n      scm_dynwind_begin (0);\n      scm_i_dynwind_pthread_mutex_lock (&ltdl_lock);\n      chars = scm_to_locale_string (name);\n      scm_dynwind_free (chars);\n      val = sysdep_dynl_value (chars, DYNL_HANDLE (dobj), FUNC_NAME);\n      scm_dynwind_end ();\n\n      return scm_from_pointer (val, NULL);\n    }\n}\n#undef FUNC_NAME\n\n\nSCM_DEFINE (scm_dynamic_func, \"dynamic-func\", 2, 0, 0, \n            (SCM name, SCM dobj),\n\t    \"Return a ``handle'' for the function @var{name} in the\\n\"\n\t    \"shared object referred to by @var{dobj}.  The handle\\n\"\n\t    \"can be passed to @code{dynamic-call} to actually\\n\"\n\t    \"call the function.\\n\\n\"\n\t    \"Regardless whether your C compiler prepends an underscore\\n\"\n\t    \"@samp{_} to the global names in a program, you should\\n\"\n\t    \"@strong{not} include this underscore in @var{name}\\n\"\n\t    \"since it will be added automatically when necessary.\")\n#define FUNC_NAME s_scm_dynamic_func\n{\n  return scm_dynamic_pointer (name, dobj);\n}\n#undef FUNC_NAME\n\n\nSCM_DEFINE (scm_dynamic_call, \"dynamic-call\", 2, 0, 0, \n            (SCM func, SCM dobj),\n\t    \"Call a C function in a dynamic object.  Two styles of\\n\"\n\t    \"invocation are supported:\\n\\n\"\n\t    \"@itemize @bullet\\n\"\n\t    \"@item @var{func} can be a function handle returned by\\n\"\n\t    \"@code{dynamic-func}.  In this case @var{dobj} is\\n\"\n\t    \"ignored\\n\"\n\t    \"@item @var{func} can be a string with the name of the\\n\"\n\t    \"function to call, with @var{dobj} the handle of the\\n\"\n\t    \"dynamic object in which to find the function.\\n\"\n\t    \"This is equivalent to\\n\"\n\t    \"@smallexample\\n\\n\"\n\t    \"(dynamic-call (dynamic-func @var{func} @var{dobj}) #f)\\n\"\n\t    \"@end smallexample\\n\"\n\t    \"@end itemize\\n\\n\"\n\t    \"In either case, the function is passed no arguments\\n\"\n\t    \"and its return value is ignored.\")\n#define FUNC_NAME s_scm_dynamic_call\n{\n  void (*fptr) (void);\n\n  if (scm_is_string (func))\n    func = scm_dynamic_func (func, dobj);\n  SCM_VALIDATE_POINTER (SCM_ARG1, func);\n\n  fptr = SCM_POINTER_VALUE (func);\n  fptr ();\n  return SCM_UNSPECIFIED;\n}\n#undef FUNC_NAME\n\nvoid\nscm_init_dynamic_linking ()\n{\n  scm_tc16_dynamic_obj = scm_make_smob_type (\"dynamic-object\", 0);\n  scm_set_smob_print (scm_tc16_dynamic_obj, dynl_obj_print);\n\n  /* Make LTDL_LOCK recursive so that a pre-unwind handler can still use\n     'dynamic-link', as is the case at the REPL.  See\n     <https://bugs.gnu.org/29275>.  */\n  scm_i_pthread_mutex_init (&ltdl_lock,\n\t\t\t    scm_i_pthread_mutexattr_recursive);\n\n  sysdep_dynl_init ();\n#include \"libguile/dynl.x\"\n}\n\n/*\n  Local Variables:\n  c-file-style: \"gnu\"\n  End:\n*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/doc/ref/api-evaluation.texi": "@c -*-texinfo-*-\n@c This is part of the GNU Guile Reference Manual.\n@c Copyright (C)  1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009,\n@c   2010, 2011, 2012, 2013, 2014 Free Software Foundation, Inc.\n@c See the file guile.texi for copying conditions.\n\n@node Read/Load/Eval/Compile\n@section Reading and Evaluating Scheme Code\n\nThis chapter describes Guile functions that are concerned with reading,\nloading, evaluating, and compiling Scheme code at run time.\n\n@menu\n* Scheme Syntax::               Standard and extended Scheme syntax.\n* Scheme Read::                 Reading Scheme code.\n* Scheme Write::                Writing Scheme values to a port.\n* Fly Evaluation::              Procedures for on the fly evaluation.\n* Compilation::                 How to compile Scheme files and procedures.\n* Loading::                     Loading Scheme code from file.\n* Load Paths::                  Where Guile looks for code.\n* Character Encoding of Source Files:: Loading non-ASCII Scheme code from file.\n* Delayed Evaluation::          Postponing evaluation until it is needed.\n* Local Evaluation::            Evaluation in a local lexical environment.\n* Local Inclusion::             Compile-time inclusion of one file in another.\n* Sandboxed Evaluation::        Evaluation with limited capabilities.\n* REPL Servers::                Serving a REPL over a socket.\n* Cooperative REPL Servers::    REPL server for single-threaded applications.\n@end menu\n\n\n@node Scheme Syntax\n@subsection Scheme Syntax: Standard and Guile Extensions\n\n@menu\n* Expression Syntax::\n* Comments::\n* Block Comments::\n* Case Sensitivity::\n* Keyword Syntax::\n* Reader Extensions::\n@end menu\n\n\n@node Expression Syntax\n@subsubsection Expression Syntax\n\nAn expression to be evaluated takes one of the following forms.\n\n@table @nicode\n\n@item @var{symbol}\nA symbol is evaluated by dereferencing.  A binding of that symbol is\nsought and the value there used.  For example,\n\n@example\n(define x 123)\nx @result{} 123\n@end example\n\n@item (@var{proc} @var{args}@dots{})\nA parenthesised expression is a function call.  @var{proc} and each\nargument are evaluated, then the function (which @var{proc} evaluated\nto) is called with those arguments.\n\nThe order in which @var{proc} and the arguments are evaluated is\nunspecified, so be careful when using expressions with side effects.\n\n@example\n(max 1 2 3) @result{} 3\n\n(define (get-some-proc)  min)\n((get-some-proc) 1 2 3) @result{} 1\n@end example\n\nThe same sort of parenthesised form is used for a macro invocation,\nbut in that case the arguments are not evaluated.  See the\ndescriptions of macros for more on this (@pxref{Macros}, and\n@pxref{Syntax Rules}).\n\n@item @var{constant}\nNumber, string, character and boolean constants evaluate ``to\nthemselves'', so can appear as literals.\n\n@example\n123     @result{} 123\n99.9    @result{} 99.9\n\"hello\" @result{} \"hello\"\n#\\z     @result{} #\\z\n#t      @result{} #t\n@end example\n\nNote that an application must not attempt to modify literal strings,\nsince they may be in read-only memory.\n\n@item (quote @var{data})\n@itemx '@var{data}\n@findex quote\n@findex '\nQuoting is used to obtain a literal symbol (instead of a variable\nreference), a literal list (instead of a function call), or a literal\nvector.  @nicode{'} is simply a shorthand for a @code{quote} form.\nFor example,\n\n@example\n'x                   @result{} x\n'(1 2 3)             @result{} (1 2 3)\n'#(1 (2 3) 4)        @result{} #(1 (2 3) 4)\n(quote x)            @result{} x\n(quote (1 2 3))      @result{} (1 2 3)\n(quote #(1 (2 3) 4)) @result{} #(1 (2 3) 4)\n@end example\n\nNote that an application must not attempt to modify literal lists or\nvectors obtained from a @code{quote} form, since they may be in\nread-only memory.\n\n@item (quasiquote @var{data})\n@itemx `@var{data}\n@findex quasiquote\n@findex `\nBackquote quasi-quotation is like @code{quote}, but selected\nsub-expressions are evaluated.  This is a convenient way to construct\na list or vector structure most of which is constant, but at certain\npoints should have expressions substituted.\n\nThe same effect can always be had with suitable @code{list},\n@code{cons} or @code{vector} calls, but quasi-quoting is often easier.\n\n@table @nicode\n\n@item (unquote @var{expr})\n@itemx ,@var{expr}\n@findex unquote\n@findex ,\nWithin the quasiquote @var{data}, @code{unquote} or @code{,} indicates\nan expression to be evaluated and inserted.  The comma syntax @code{,}\nis simply a shorthand for an @code{unquote} form.  For example,\n\n@example\n`(1 2 (* 9 9) 3 4)       @result{} (1 2 (* 9 9) 3 4)\n`(1 2 ,(* 9 9) 3 4)      @result{} (1 2 81 3 4)\n`(1 (unquote (+ 1 1)) 3) @result{} (1 2 3)\n`#(1 ,(/ 12 2))          @result{} #(1 6)\n@end example\n\n@item (unquote-splicing @var{expr})\n@itemx ,@@@var{expr}\n@findex unquote-splicing\n@findex ,@@\nWithin the quasiquote @var{data}, @code{unquote-splicing} or\n@code{,@@} indicates an expression to be evaluated and the elements of\nthe returned list inserted.  @var{expr} must evaluate to a list.  The\n``comma-at'' syntax @code{,@@} is simply a shorthand for an\n@code{unquote-splicing} form.\n\n@example\n(define x '(2 3))\n`(1 ,x 4)                           @result{} (1 (2 3) 4)\n`(1 ,@@x 4)                         @result{} (1 2 3 4)\n`(1 (unquote-splicing (map 1+ x)))  @result{} (1 3 4)\n`#(9 ,@@x 9)                        @result{} #(9 2 3 9)\n@end example\n\nNotice @code{,@@} differs from plain @code{,} in the way one level of\nnesting is stripped.  For @code{,@@} the elements of a returned list\nare inserted, whereas with @code{,} it would be the list itself\ninserted.\n@end table\n\n@c\n@c  FIXME: What can we say about the mutability of a quasiquote\n@c  result?  R5RS doesn't seem to specify anything, though where it\n@c  says backquote without commas is the same as plain quote then\n@c  presumably the \"fixed\" portions of a quasiquote expression must be\n@c  treated as immutable.\n@c\n\n@end table\n\n\n@node Comments\n@subsubsection Comments\n\n@c FIXME::martin: Review me!\n\nComments in Scheme source files are written by starting them with a\nsemicolon character (@code{;}).  The comment then reaches up to the end\nof the line.  Comments can begin at any column, and the may be inserted\non the same line as Scheme code.\n\n@lisp\n; Comment\n;; Comment too\n(define x 1)        ; Comment after expression\n(let ((y 1))\n  ;; Display something.\n  (display y)\n;;; Comment at left margin.\n  (display (+ y 1)))\n@end lisp\n\nIt is common to use a single semicolon for comments following\nexpressions on a line, to use two semicolons for comments which are\nindented like code, and three semicolons for comments which start at\ncolumn 0, even if they are inside an indented code block.  This\nconvention is used when indenting code in Emacs' Scheme mode.\n\n\n@node Block Comments\n@subsubsection Block Comments\n@cindex multiline comments\n@cindex block comments\n@cindex #!\n@cindex !#\n\n@c FIXME::martin: Review me!\n\nIn addition to the standard line comments defined by R5RS, Guile has\nanother comment type for multiline comments, called @dfn{block\ncomments}.  This type of comment begins with the character sequence\n@code{#!} and ends with the characters @code{!#}.\n\nThese comments are compatible with the block\ncomments in the Scheme Shell @file{scsh} (@pxref{The Scheme shell\n(scsh)}).  The characters @code{#!} were chosen because they are the\nmagic characters used in shell scripts for indicating that the name of\nthe program for executing the script follows on the same line.\n\nThus a Guile script often starts like this.\n\n@lisp\n#! /usr/local/bin/guile -s\n!#\n@end lisp\n\nMore details on Guile scripting can be found in the scripting section\n(@pxref{Guile Scripting}).\n\n@cindex R6RS block comments\n@cindex SRFI-30 block comments\nSimilarly, Guile (starting from version 2.0) supports nested block\ncomments as specified by R6RS and\n@url{http://srfi.schemers.org/srfi-30/srfi-30.html, SRFI-30}:\n\n@lisp\n(+ 1 #| this is a #| nested |# block comment |# 2)\n@result{} 3\n@end lisp\n\nFor backward compatibility, this syntax can be overridden with\n@code{read-hash-extend} (@pxref{Reader Extensions,\n@code{read-hash-extend}}).\n\nThere is one special case where the contents of a comment can actually\naffect the interpretation of code.  When a character encoding\ndeclaration, such as @code{coding: utf-8} appears in one of the first\nfew lines of a source file, it indicates to Guile's default reader\nthat this source code file is not ASCII.  For details see @ref{Character\nEncoding of Source Files}.\n\n@node Case Sensitivity\n@subsubsection Case Sensitivity\n@cindex fold-case\n@cindex no-fold-case\n\n@c FIXME::martin: Review me!\n\nScheme as defined in R5RS is not case sensitive when reading symbols.\nGuile, on the contrary is case sensitive by default, so the identifiers\n\n@lisp\nguile-whuzzy\nGuile-Whuzzy\n@end lisp\n\nare the same in R5RS Scheme, but are different in Guile.\n\nIt is possible to turn off case sensitivity in Guile by setting the\nreader option @code{case-insensitive}.  For more information on reader\noptions, @xref{Scheme Read}.\n\n@lisp\n(read-enable 'case-insensitive)\n@end lisp\n\nIt is also possible to disable (or enable) case sensitivity within a\nsingle file by placing the reader directives @code{#!fold-case} (or\n@code{#!no-fold-case}) within the file itself.\n\n@node Keyword Syntax\n@subsubsection Keyword Syntax\n\n\n@node Reader Extensions\n@subsubsection Reader Extensions\n\n@deffn {Scheme Procedure} read-hash-extend chr proc\n@deffnx {C Function} scm_read_hash_extend (chr, proc)\nInstall the procedure @var{proc} for reading expressions\nstarting with the character sequence @code{#} and @var{chr}.\n@var{proc} will be called with two arguments:  the character\n@var{chr} and the port to read further data from. The object\nreturned will be the return value of @code{read}. \nPassing @code{#f} for @var{proc} will remove a previous setting. \n\n@end deffn\n\n\n@node Scheme Read\n@subsection Reading Scheme Code\n\n@rnindex read\n@deffn {Scheme Procedure} read [port]\n@deffnx {C Function} scm_read (port)\nRead an s-expression from the input port @var{port}, or from\nthe current input port if @var{port} is not specified.\nAny whitespace before the next token is discarded.\n@end deffn\n\nThe behaviour of Guile's Scheme reader can be modified by manipulating\nits read options.\n\n@cindex options - read\n@cindex read options\n@deffn {Scheme Procedure} read-options [setting]\nDisplay the current settings of the global read options.  If\n@var{setting} is omitted, only a short form of the current read options\nis printed.  Otherwise if @var{setting} is the symbol @code{help}, a\ncomplete options description is displayed.\n@end deffn\n\nThe set of available options, and their default values, may be had by\ninvoking @code{read-options} at the prompt.\n\n@smalllisp\nscheme@@(guile-user)> (read-options)\n(square-brackets keywords #f positions)\nscheme@@(guile-user)> (read-options 'help)\ncopy              no    Copy source code expressions.\npositions         yes   Record positions of source code expressions.\ncase-insensitive  no    Convert symbols to lower case.\nkeywords          #f    Style of keyword recognition: #f, 'prefix or 'postfix.\nr6rs-hex-escapes  no    Use R6RS variable-length character and string hex escapes.\nsquare-brackets   yes   Treat `[' and `]' as parentheses, for R6RS compatibility.\nhungry-eol-escapes no   In strings, consume leading whitespace after an\n                        escaped end-of-line.\ncurly-infix       no    Support SRFI-105 curly infix expressions.\nr7rs-symbols      no    Support R7RS |...| symbol notation.\n@end smalllisp\n\nNote that Guile also includes a preliminary mechanism for setting read\noptions on a per-port basis.  For instance, the @code{case-insensitive}\nread option is set (or unset) on the port when the reader encounters the\n@code{#!fold-case} or @code{#!no-fold-case} reader directives.\nSimilarly, the @code{#!curly-infix} reader directive sets the\n@code{curly-infix} read option on the port, and\n@code{#!curly-infix-and-bracket-lists} sets @code{curly-infix} and\nunsets @code{square-brackets} on the port (@pxref{SRFI-105}).  There is\ncurrently no other way to access or set the per-port read options.\n\nThe boolean options may be toggled with @code{read-enable} and\n@code{read-disable}. The non-boolean @code{keywords} option must be set\nusing @code{read-set!}.\n\n@deffn {Scheme Procedure} read-enable option-name\n@deffnx {Scheme Procedure} read-disable option-name\n@deffnx {Scheme Syntax} read-set! option-name value\nModify the read options.  @code{read-enable} should be used with boolean\noptions and switches them on, @code{read-disable} switches them off.\n\n@code{read-set!} can be used to set an option to a specific value.  Due\nto historical oddities, it is a macro that expects an unquoted option\nname.\n@end deffn\n\nFor example, to make @code{read} fold all symbols to their lower case\n(perhaps for compatibility with older Scheme code), you can enter:\n\n@lisp\n(read-enable 'case-insensitive)\n@end lisp\n\nFor more information on the effect of the @code{r6rs-hex-escapes} and\n@code{hungry-eol-escapes} options, see (@pxref{String Syntax}).\n\nFor more information on the @code{r7rs-symbols} option, see\n(@pxref{Symbol Read Syntax}).\n\n\n@node Scheme Write\n@subsection Writing Scheme Values\n\nAny scheme value may be written to a port. Not all values may be read\nback in (@pxref{Scheme Read}), however.\n\n@rnindex write\n@rnindex print\n@deffn {Scheme Procedure} write obj [port]\nSend a representation of @var{obj} to @var{port} or to the current\noutput port if not given.\n\nThe output is designed to be machine readable, and can be read back\nwith @code{read} (@pxref{Scheme Read}).  Strings are printed in\ndouble quotes, with escapes if necessary, and characters are printed in\n@samp{#\\} notation.\n@end deffn\n\n@rnindex display\n@deffn {Scheme Procedure} display obj [port]\nSend a representation of @var{obj} to @var{port} or to the current\noutput port if not given.\n\nThe output is designed for human readability, it differs from\n@code{write} in that strings are printed without double quotes and\nescapes, and characters are printed as per @code{write-char}, not in\n@samp{#\\} form.\n@end deffn\n\nAs was the case with the Scheme reader, there are a few options that\naffect the behavior of the Scheme printer.\n\n@cindex options - print\n@cindex print options\n@deffn {Scheme Procedure} print-options [setting]\nDisplay the current settings of the read options.  If @var{setting} is\nomitted, only a short form of the current read options is\nprinted. Otherwise if @var{setting} is the symbol @code{help}, a\ncomplete options description is displayed.\n@end deffn\n\nThe set of available options, and their default values, may be had by\ninvoking @code{print-options} at the prompt.\n\n@smalllisp\nscheme@@(guile-user)> (print-options)\n(quote-keywordish-symbols reader highlight-suffix \"@}\" highlight-prefix \"@{\")\nscheme@@(guile-user)> (print-options 'help)\nhighlight-prefix          @{       The string to print before highlighted values.\nhighlight-suffix          @}       The string to print after highlighted values.\nquote-keywordish-symbols  reader  How to print symbols that have a colon\n                                  as their first or last character. The\n                                  value '#f' does not quote the colons;\n                                  '#t' quotes them; 'reader' quotes them\n                                  when the reader option 'keywords' is\n                                  not '#f'.\nescape-newlines           yes     Render newlines as \\n when printing\n                                  using `write'. \nr7rs-symbols              no      Escape symbols using R7RS |...| symbol\n                                  notation.\n@end smalllisp\n\nThese options may be modified with the print-set! syntax.\n\n@deffn {Scheme Syntax} print-set! option-name value\nModify the print options.  Due to historical oddities, @code{print-set!}\nis a macro that expects an unquoted option name.\n@end deffn\n\n\n@node Fly Evaluation\n@subsection Procedures for On the Fly Evaluation\n\nScheme has the lovely property that its expressions may be represented\nas data.  The @code{eval} procedure takes a Scheme datum and evaluates\nit as code.\n\n@rnindex eval\n@c ARGFIXME environment/environment specifier\n@deffn {Scheme Procedure} eval exp module_or_state\n@deffnx {C Function} scm_eval (exp, module_or_state)\nEvaluate @var{exp}, a list representing a Scheme expression,\nin the top-level environment specified by @var{module_or_state}.\nWhile @var{exp} is evaluated (using @code{primitive-eval}),\n@var{module_or_state} is made the current module.  The current module\nis reset to its previous value when @code{eval} returns.\nXXX - dynamic states.\nExample: (eval '(+ 1 2) (interaction-environment))\n@end deffn\n\n@rnindex interaction-environment\n@deffn {Scheme Procedure} interaction-environment\n@deffnx {C Function} scm_interaction_environment ()\nReturn a specifier for the environment that contains\nimplementation--defined bindings, typically a superset of those\nlisted in the report.  The intent is that this procedure will\nreturn the environment in which the implementation would\nevaluate expressions dynamically typed by the user.\n@end deffn\n\n@xref{Environments}, for other environments.\n\nOne does not always receive code as Scheme data, of course, and this is\nespecially the case for Guile's other language implementations\n(@pxref{Other Languages}).  For the case in which all you have is a\nstring, we have @code{eval-string}.  There is a legacy version of this\nprocedure in the default environment, but you really want the one from\n@code{(ice-9 eval-string)}, so load it up:\n\n@example\n(use-modules (ice-9 eval-string))\n@end example\n\n@deffn {Scheme Procedure} eval-string string [#:module=#f] [#:file=#f] @\n                          [#:line=#f] [#:column=#f] @\n                          [#:lang=(current-language)] @\n                          [#:compile?=#f]\nParse @var{string} according to the current language, normally Scheme.\nEvaluate or compile the expressions it contains, in order, returning the\nlast expression.\n\nIf the @var{module} keyword argument is set, save a module excursion\n(@pxref{Module System Reflection}) and set the current module to\n@var{module} before evaluation.\n\nThe @var{file}, @var{line}, and @var{column} keyword arguments can be\nused to indicate that the source string begins at a particular source\nlocation.\n\nFinally, @var{lang} is a language, defaulting to the current language,\nand the expression is compiled if @var{compile?} is true or there is no\nevaluator for the given language.\n@end deffn\n\n@deffn {C Function} scm_eval_string (string)\n@deffnx {C Function} scm_eval_string_in_module (string, module)\nThese C bindings call @code{eval-string} from @code{(ice-9\neval-string)}, evaluating within @var{module} or the current module.\n@end deffn\n\n@deftypefn {C Function} SCM scm_c_eval_string (const char *string)\n@code{scm_eval_string}, but taking a C string in locale encoding instead\nof an @code{SCM}.\n@end deftypefn\n\n@deffn {Scheme Procedure} apply proc arg @dots{} arglst\n@deffnx {C Function} scm_apply_0 (proc, arglst)\n@deffnx {C Function} scm_apply_1 (proc, arg1, arglst)\n@deffnx {C Function} scm_apply_2 (proc, arg1, arg2, arglst)\n@deffnx {C Function} scm_apply_3 (proc, arg1, arg2, arg3, arglst)\n@deffnx {C Function} scm_apply (proc, arg, rest)\n@rnindex apply\nCall @var{proc} with arguments @var{arg} @dots{} and the\nelements of the @var{arglst} list.\n\n@code{scm_apply} takes parameters corresponding to a Scheme level\n@code{(lambda (proc arg1 . rest) ...)}.  So @var{arg1} and all but the\nlast element of the @var{rest} list make up @var{arg} @dots{}, and the\nlast element of @var{rest} is the @var{arglst} list.  Or if @var{rest}\nis the empty list @code{SCM_EOL} then there's no @var{arg} @dots{}, and\n(@var{arg1}) is the @var{arglst}.\n\n@var{arglst} is not modified, but the @var{rest} list passed to\n@code{scm_apply} is modified.\n@end deffn\n\n@deffn {C Function} scm_call_0 (proc)\n@deffnx {C Function} scm_call_1 (proc, arg1)\n@deffnx {C Function} scm_call_2 (proc, arg1, arg2)\n@deffnx {C Function} scm_call_3 (proc, arg1, arg2, arg3)\n@deffnx {C Function} scm_call_4 (proc, arg1, arg2, arg3, arg4)\n@deffnx {C Function} scm_call_5 (proc, arg1, arg2, arg3, arg4, arg5)\n@deffnx {C Function} scm_call_6 (proc, arg1, arg2, arg3, arg4, arg5, arg6)\n@deffnx {C Function} scm_call_7 (proc, arg1, arg2, arg3, arg4, arg5, arg6, arg7)\n@deffnx {C Function} scm_call_8 (proc, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)\n@deffnx {C Function} scm_call_9 (proc, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)\nCall @var{proc} with the given arguments.\n@end deffn\n\n@deffn {C Function} scm_call (proc, ...)\nCall @var{proc} with any number of arguments.  The argument list must be\nterminated by @code{SCM_UNDEFINED}.  For example:\n\n@example\nscm_call (scm_c_public_ref (\"guile\", \"+\"),\n          scm_from_int (1),\n          scm_from_int (2),\n          SCM_UNDEFINED);\n@end example\n@end deffn\n\n@deffn {C Function} scm_call_n (proc, argv, nargs)\nCall @var{proc} with the array of arguments @var{argv}, as a\n@code{SCM*}.  The length of the arguments should be passed in\n@var{nargs}, as a @code{size_t}.\n@end deffn\n\n@deffn {Scheme Procedure} primitive-eval exp\n@deffnx {C Function} scm_primitive_eval (exp)\nEvaluate @var{exp} in the top-level environment specified by\nthe current module.\n@end deffn\n\n\n@node Compilation\n@subsection Compiling Scheme Code\n\nThe @code{eval} procedure directly interprets the S-expression\nrepresentation of Scheme. An alternate strategy for evaluation is to\ndetermine ahead of time what computations will be necessary to\nevaluate the expression, and then use that recipe to produce the\ndesired results. This is known as @dfn{compilation}.\n\nWhile it is possible to compile simple Scheme expressions such as\n@code{(+ 2 2)} or even @code{\"Hello world!\"}, compilation is most\ninteresting in the context of procedures. Compiling a lambda expression\nproduces a compiled procedure, which is just like a normal procedure\nexcept typically much faster, because it can bypass the generic\ninterpreter.\n\nFunctions from system modules in a Guile installation are normally\ncompiled already, so they load and run quickly.\n\n@cindex automatic compilation\nNote that well-written Scheme programs will not typically call the\nprocedures in this section, for the same reason that it is often bad\ntaste to use @code{eval}.  By default, Guile automatically compiles any\nfiles it encounters that have not been compiled yet (@pxref{Invoking\nGuile, @code{--auto-compile}}).  The compiler can also be invoked\nexplicitly from the shell as @code{guild compile foo.scm}.\n\n(Why are calls to @code{eval} and @code{compile} usually in bad taste?\nBecause they are limited, in that they can only really make sense for\ntop-level expressions. Also, most needs for ``compile-time''\ncomputation are fulfilled by macros and closures. Of course one good\ncounterexample is the REPL itself, or any code that reads expressions\nfrom a port.)\n\nAutomatic compilation generally works transparently, without any need\nfor user intervention.  However Guile does not yet do proper dependency\ntracking, so that if file @file{@var{a}.scm} uses macros from\n@file{@var{b}.scm}, and @var{@var{b}.scm} changes, @code{@var{a}.scm}\nwould not be automatically recompiled.  To forcibly invalidate the\nauto-compilation cache, pass the @code{--fresh-auto-compile} option to\nGuile, or set the @code{GUILE_AUTO_COMPILE} environment variable to\n@code{fresh} (instead of to @code{0} or @code{1}).\n\nFor more information on the compiler itself, see @ref{Compiling to the\nVirtual Machine}. For information on the virtual machine, see @ref{A\nVirtual Machine for Guile}.\n\nThe command-line interface to Guile's compiler is the @command{guild\ncompile} command:\n\n@deffn {Command} {guild compile} [@option{option}...] @var{file}...\nCompile @var{file}, a source file, and store bytecode in the compilation cache\nor in the file specified by the @option{-o} option.  The following options are\navailable:\n\n@table @option\n\n@item -L @var{dir}\n@itemx --load-path=@var{dir}\nAdd @var{dir} to the front of the module load path.\n\n@item -o @var{ofile}\n@itemx --output=@var{ofile}\nWrite output bytecode to @var{ofile}.  By convention, bytecode file\nnames end in @code{.go}.  When @option{-o} is omitted, the output file\nname is as for @code{compile-file} (see below).\n\n@item -x @var{extension}\nRecognize @var{extension} as a valid source file name extension.\n\nFor example, to compile R6RS code, you might want to pass @command{-x\n.sls} so that files ending in @file{.sls} can be found.\n\n@item -W @var{warning}\n@itemx --warn=@var{warning}\n@cindex warnings, compiler\nEmit warnings of type @var{warning}; use @code{--warn=help} for a list\nof available warnings and their description.  Currently recognized\nwarnings include @code{unused-variable}, @code{unused-toplevel},\n@code{shadowed-toplevel}, @code{unbound-variable},\n@code{macro-use-before-definition},\n@code{arity-mismatch}, @code{format},\n@code{duplicate-case-datum}, and @code{bad-case-datum}.\n\n@item -f @var{lang}\n@itemx --from=@var{lang}\nUse @var{lang} as the source language of @var{file}.  If this option is omitted,\n@code{scheme} is assumed.\n\n@item -t @var{lang}\n@itemx --to=@var{lang}\nUse @var{lang} as the target language of @var{file}.  If this option is omitted,\n@code{rtl} is assumed.\n\n@item -T @var{target}\n@itemx --target=@var{target}\nProduce code for @var{target} instead of @var{%host-type} (@pxref{Build\nConfig, %host-type}).  Target must be a valid GNU triplet, such as\n@code{armv5tel-unknown-linux-gnueabi} (@pxref{Specifying Target\nTriplets,,, autoconf, GNU Autoconf Manual}).\n\n@end table\n\nEach @var{file} is assumed to be UTF-8-encoded, unless it contains a\ncoding declaration as recognized by @code{file-encoding}\n(@pxref{Character Encoding of Source Files}).\n@end deffn\n\nThe compiler can also be invoked directly by Scheme code using the procedures\nbelow:\n\n@deffn {Scheme Procedure} compile exp [#:env=#f] @\n                          [#:from=(current-language)] @\n                          [#:to=value] [#:opts=()]\nCompile the expression @var{exp} in the environment @var{env}. If\n@var{exp} is a procedure, the result will be a compiled procedure;\notherwise @code{compile} is mostly equivalent to @code{eval}.\n\nFor a discussion of languages and compiler options, @xref{Compiling to\nthe Virtual Machine}.\n@end deffn\n\n@deffn {Scheme Procedure} compile-file file [#:output-file=#f] @\n                          [#:from=(current-language)] [#:to='rtl] @\n                          [#:env=(default-environment from)] @\n                          [#:opts='()] @\n                          [#:canonicalization='relative]\nCompile the file named @var{file}.\n\nOutput will be written to a @var{output-file}.   If you do not supply an\noutput file name, output is written to a file in the cache directory, as\ncomputed by @code{(compiled-file-name @var{file})}.\n\n@var{from} and @var{to} specify the source and target languages.\n@xref{Compiling to the Virtual Machine}, for more information on these\noptions, and on @var{env} and @var{opts}.\n\nAs with @command{guild compile}, @var{file} is assumed to be\nUTF-8-encoded unless it contains a coding declaration.\n@end deffn\n\n@deffn {Scheme Procedure} compiled-file-name file\nCompute a cached location for a compiled version of a Scheme file named\n@var{file}.\n\nThis file will usually be below the @file{$HOME/.cache/guile/ccache}\ndirectory, depending on the value of the @env{XDG_CACHE_HOME}\nenvironment variable.  The intention is that @code{compiled-file-name}\nprovides a fallback location for caching auto-compiled files.  If you\nwant to place a compile file in the @code{%load-compiled-path}, you\nshould pass the @var{output-file} option to @code{compile-file},\nexplicitly.\n@end deffn\n\n@defvr {Scheme Variable} %auto-compilation-options\nThis variable contains the options passed to the @code{compile-file}\nprocedure when auto-compiling source files.  By default, it enables\nuseful compilation warnings.  It can be customized from @file{~/.guile}.\n@end defvr\n\n@node Loading\n@subsection Loading Scheme Code from File\n\n@rnindex load\n@deffn {Scheme Procedure} load filename [reader]\nLoad @var{filename} and evaluate its contents in the top-level\nenvironment.\n\n@var{reader} if provided should be either @code{#f}, or a procedure with\nthe signature @code{(lambda (port) @dots{})} which reads the next\nexpression from @var{port}.  If @var{reader} is @code{#f} or absent,\nGuile's built-in @code{read} procedure is used (@pxref{Scheme Read}).\n\nThe @var{reader} argument takes effect by setting the value of the\n@code{current-reader} fluid (see below) before loading the file, and\nrestoring its previous value when loading is complete.  The Scheme code\ninside @var{filename} can itself change the current reader procedure on\nthe fly by setting @code{current-reader} fluid.\n\nIf the variable @code{%load-hook} is defined, it should be bound to a\nprocedure that will be called before any code is loaded.  See\ndocumentation for @code{%load-hook} later in this section.\n@end deffn\n\n@deffn {Scheme Procedure} load-compiled filename\nLoad the compiled file named @var{filename}.\n\nCompiling a source file (@pxref{Read/Load/Eval/Compile}) and then\ncalling @code{load-compiled} on the resulting file is equivalent to\ncalling @code{load} on the source file.\n@end deffn\n\n@deffn {Scheme Procedure} primitive-load filename\n@deffnx {C Function} scm_primitive_load (filename)\nLoad the file named @var{filename} and evaluate its contents in the\ntop-level environment.  @var{filename} must either be a full pathname or\nbe a pathname relative to the current directory.  If the variable\n@code{%load-hook} is defined, it should be bound to a procedure that\nwill be called before any code is loaded.  See the documentation for\n@code{%load-hook} later in this section.\n@end deffn\n\n@deftypefn {C Function} SCM scm_c_primitive_load (const char *filename)\n@code{scm_primitive_load}, but taking a C string instead of an\n@code{SCM}.\n@end deftypefn\n\n@defvar current-reader\n@code{current-reader} holds the read procedure that is currently being\nused by the above loading procedures to read expressions (from the file\nthat they are loading).  @code{current-reader} is a fluid, so it has an\nindependent value in each dynamic root and should be read and set using\n@code{fluid-ref} and @code{fluid-set!} (@pxref{Fluids and Dynamic\nStates}).\n\nChanging @code{current-reader} is typically useful to introduce local\nsyntactic changes, such that code following the @code{fluid-set!} call\nis read using the newly installed reader.  The @code{current-reader}\nchange should take place at evaluation time when the code is evaluated,\nor at compilation time when the code is compiled:\n\n@findex eval-when\n@example\n(eval-when (compile eval)\n  (fluid-set! current-reader my-own-reader))\n@end example\n\nThe @code{eval-when} form above ensures that the @code{current-reader}\nchange occurs at the right time.\n@end defvar\n\n@defvar %load-hook\nA procedure to be called @code{(%load-hook @var{filename})} whenever a\nfile is loaded, or @code{#f} for no such call.  @code{%load-hook} is\nused by all of the loading functions (@code{load} and\n@code{primitive-load}, and @code{load-from-path} and\n@code{primitive-load-path} documented in the next section).\n\nFor example an application can set this to show what's loaded,\n\n@example\n(set! %load-hook (lambda (filename)\n                   (format #t \"Loading ~a ...\\n\" filename)))\n(load-from-path \"foo.scm\")\n@print{} Loading /usr/local/share/guile/site/foo.scm ...\n@end example\n@end defvar\n\n@deffn {Scheme Procedure} current-load-port\n@deffnx {C Function} scm_current_load_port ()\nReturn the current-load-port.\nThe load port is used internally by @code{primitive-load}.\n@end deffn\n\n@node Load Paths\n@subsection Load Paths\n\nThe procedure in the previous section look for Scheme code in the file\nsystem at specific location.  Guile also has some procedures to search\nthe load path for code.\n\n@defvar %load-path\nList of directories which should be searched for Scheme modules and\nlibraries.  When Guile starts up, @code{%load-path} is initialized to\nthe default load path @code{(list (%library-dir) (%site-dir)\n(%global-site-dir) (%package-data-dir))}.  The @env{GUILE_LOAD_PATH}\nenvironment variable can be used to prepend or append additional\ndirectories (@pxref{Environment Variables}).\n\n@xref{Build Config}, for more on @code{%site-dir} and related\nprocedures.\n@end defvar\n\n@deffn {Scheme Procedure} load-from-path filename\nSimilar to @code{load}, but searches for @var{filename} in the load\npaths. Preferentially loads a compiled version of the file, if it is\navailable and up-to-date.\n@end deffn\n\nA user can extend the load path by calling @code{add-to-load-path}.\n\n@deffn {Scheme Syntax} add-to-load-path dir\nAdd @var{dir} to the load path.\n@end deffn\n\nFor example, a script might include this form to add the directory that\nit is in to the load path:\n\n@example\n(add-to-load-path (dirname (current-filename)))\n@end example\n\nIt's better to use @code{add-to-load-path} than to modify\n@code{%load-path} directly, because @code{add-to-load-path} takes care\nof modifying the path both at compile-time and at run-time.\n\n@deffn {Scheme Procedure} primitive-load-path filename [exception-on-not-found]\n@deffnx {C Function} scm_primitive_load_path (filename)\nSearch @code{%load-path} for the file named @var{filename} and\nload it into the top-level environment.  If @var{filename} is a\nrelative pathname and is not found in the list of search paths,\nan error is signalled.  Preferentially loads a compiled version of the\nfile, if it is available and up-to-date.\n\nIf @var{filename} is a relative pathname and is not found in the list of\nsearch paths, one of three things may happen, depending on the optional\nsecond argument, @var{exception-on-not-found}.  If it is @code{#f},\n@code{#f} will be returned.  If it is a procedure, it will be called\nwith no arguments.  (This allows a distinction to be made between\nexceptions raised by loading a file, and exceptions related to the\nloader itself.)  Otherwise an error is signalled.\n\nFor compatibility with Guile 1.8 and earlier, the C function takes only\none argument, which can be either a string (the file name) or an\nargument list.\n@end deffn\n\n@deffn {Scheme Procedure} %search-load-path filename\n@deffnx {C Function} scm_sys_search_load_path (filename)\nSearch @code{%load-path} for the file named @var{filename}, which must\nbe readable by the current user.  If @var{filename} is found in the list\nof paths to search or is an absolute pathname, return its full pathname.\nOtherwise, return @code{#f}.  Filenames may have any of the optional\nextensions in the @code{%load-extensions} list; @code{%search-load-path}\nwill try each extension automatically.\n@end deffn\n\n@defvar %load-extensions\nA list of default file extensions for files containing Scheme code.\n@code{%search-load-path} tries each of these extensions when looking for\na file to load.  By default, @code{%load-extensions} is bound to the\nlist @code{(\"\" \".scm\")}.\n@end defvar\n\nAs mentioned above, when Guile searches the @code{%load-path} for a\nsource file, it will also search the @code{%load-compiled-path} for a\ncorresponding compiled file.  If the compiled file is as new or newer\nthan the source file, it will be loaded instead of the source file,\nusing @code{load-compiled}.\n\n@defvar %load-compiled-path\nLike @code{%load-path}, but for compiled files.  By default, this path\nhas two entries: one for compiled files from Guile itself, and one for\nsite packages.  The @env{GUILE_LOAD_COMPILED_PATH} environment variable\ncan be used to prepend or append additional directories\n(@pxref{Environment Variables}).\n@end defvar\n\nWhen @code{primitive-load-path} searches the @code{%load-compiled-path}\nfor a corresponding compiled file for a relative path it does so by\nappending @code{.go} to the relative path.  For example, searching for\n@code{ice-9/popen} could find\n@code{/usr/lib/guile/2.2/ccache/ice-9/popen.go}, and use it instead of\n@code{/usr/share/guile/2.2/ice-9/popen.scm}.\n\nIf @code{primitive-load-path} does not find a corresponding @code{.go}\nfile in the @code{%load-compiled-path}, or the @code{.go} file is out of\ndate, it will search for a corresponding auto-compiled file in the\nfallback path, possibly creating one if one does not exist.\n\n@xref{Installing Site Packages}, for more on how to correctly install\nsite packages.  @xref{Modules and the File System}, for more on the\nrelationship between load paths and modules.  @xref{Compilation}, for\nmore on the fallback path and auto-compilation.\n\nFinally, there are a couple of helper procedures for general path\nmanipulation.\n\n@deffn {Scheme Procedure} parse-path path [tail]\n@deffnx {C Function} scm_parse_path (path, tail)\nParse @var{path}, which is expected to be a colon-separated string, into\na list and return the resulting list with @var{tail} appended. If\n@var{path} is @code{#f}, @var{tail} is returned.\n@end deffn\n\n@deffn {Scheme Procedure} parse-path-with-ellipsis path base\n@deffnx {C Function} scm_parse_path_with_ellipsis (path, base)\nParse @var{path}, which is expected to be a colon-separated string, into\na list and return the resulting list with @var{base} (a list) spliced in\nplace of the @code{...} path component, if present, or else @var{base}\nis added to the end.  If @var{path} is @code{#f}, @var{base} is\nreturned.\n@end deffn\n\n@deffn {Scheme Procedure} search-path path filename [extensions [require-exts?]]\n@deffnx {C Function} scm_search_path (path, filename, rest)\nSearch @var{path} for a directory containing a file named\n@var{filename}. The file must be readable, and not a directory.  If we\nfind one, return its full filename; otherwise, return @code{#f}.  If\n@var{filename} is absolute, return it unchanged.  If given,\n@var{extensions} is a list of strings; for each directory in @var{path},\nwe search for @var{filename} concatenated with each @var{extension}.  If\n@var{require-exts?}  is true, require that the returned file name have\none of the given extensions; if @var{require-exts?} is not given, it\ndefaults to @code{#f}.\n\nFor compatibility with Guile 1.8 and earlier, the C function takes only\nthree arguments.\n@end deffn\n\n\n@node Character Encoding of Source Files\n@subsection Character Encoding of Source Files\n\n@cindex source file encoding\n@cindex primitive-load\n@cindex load\nScheme source code files are usually encoded in ASCII or UTF-8, but the\nbuilt-in reader can interpret other character encodings as well.  When\nGuile loads Scheme source code, it uses the @code{file-encoding}\nprocedure (described below) to try to guess the encoding of the file.\nIn the absence of any hints, UTF-8 is assumed.  One way to provide a\nhint about the encoding of a source file is to place a coding\ndeclaration in the top 500 characters of the file.\n\nA coding declaration has the form @code{coding: XXXXXX}, where\n@code{XXXXXX} is the name of a character encoding in which the source\ncode file has been encoded.  The coding declaration must appear in a\nscheme comment.  It can either be a semicolon-initiated comment, or the\nfirst block @code{#!} comment in the file.\n\nThe name of the character encoding in the coding declaration is\ntypically lower case and containing only letters, numbers, and hyphens,\nas recognized by @code{set-port-encoding!} (@pxref{Ports,\n@code{set-port-encoding!}}).  Common examples of character encoding\nnames are @code{utf-8} and @code{iso-8859-1},\n@url{http://www.iana.org/assignments/character-sets, as defined by\nIANA}.  Thus, the coding declaration is mostly compatible with Emacs.\n\nHowever, there are some differences in encoding names recognized by\nEmacs and encoding names defined by IANA, the latter being essentially a\nsubset of the former.  For instance, @code{latin-1} is a valid encoding\nname for Emacs, but it's not according to the IANA standard, which Guile\nfollows; instead, you should use @code{iso-8859-1}, which is both\nunderstood by Emacs and dubbed by IANA (IANA writes it uppercase but\nEmacs wants it lowercase and Guile is case insensitive.)\n\nFor source code, only a subset of all possible character encodings can\nbe interpreted by the built-in source code reader.  Only those\ncharacter encodings in which ASCII text appears unmodified can be\nused.  This includes @code{UTF-8} and @code{ISO-8859-1} through\n@code{ISO-8859-15}.  The multi-byte character encodings @code{UTF-16}\nand @code{UTF-32} may not be used because they are not compatible with\nASCII.\n\n@cindex read\n@cindex encoding\n@cindex port encoding\n@findex set-port-encoding!\nThere might be a scenario in which one would want to read non-ASCII\ncode from a port, such as with the function @code{read}, instead of\nwith @code{load}.  If the port's character encoding is the same as the\nencoding of the code to be read by the port, not other special\nhandling is necessary.  The port will automatically do the character\nencoding conversion.  The functions @code{setlocale} or by\n@code{set-port-encoding!} are used to set port encodings\n(@pxref{Ports}).\n\nIf a port is used to read code of unknown character encoding, it can\naccomplish this in three steps.  First, the character encoding of the\nport should be set to ISO-8859-1 using @code{set-port-encoding!}.\nThen, the procedure @code{file-encoding}, described below, is used to\nscan for a coding declaration when reading from the port.  As a side\neffect, it rewinds the port after its scan is complete. After that,\nthe port's character encoding should be set to the encoding returned\nby @code{file-encoding}, if any, again by using\n@code{set-port-encoding!}.  Then the code can be read as normal.\n\nAlternatively, one can use the @code{#:guess-encoding} keyword argument\nof @code{open-file} and related procedures.  @xref{File Ports}.\n\n@deffn {Scheme Procedure} file-encoding port\n@deffnx {C Function} scm_file_encoding (port)\nAttempt to scan the first few hundred bytes from the @var{port} for\nhints about its character encoding.  Return a string containing the\nencoding name or @code{#f} if the encoding cannot be determined.  The\nport is rewound.\n\nCurrently, the only supported method is to look for an Emacs-like\ncharacter coding declaration (@pxref{Recognize Coding, how Emacs\nrecognizes file encoding,, emacs, The GNU Emacs Reference Manual}).  The\ncoding declaration is of the form @code{coding: XXXXX} and must appear\nin a Scheme comment.  Additional heuristics may be added in the future.\n@end deffn\n\n\n@node Delayed Evaluation\n@subsection Delayed Evaluation\n@cindex delayed evaluation\n@cindex promises\n\nPromises are a convenient way to defer a calculation until its result\nis actually needed, and to run such a calculation only once.  Also\n@pxref{SRFI-45}.\n\n@deffn syntax delay expr\n@rnindex delay\nReturn a promise object which holds the given @var{expr} expression,\nready to be evaluated by a later @code{force}.\n@end deffn\n\n@deffn {Scheme Procedure} promise? obj\n@deffnx {C Function} scm_promise_p (obj)\nReturn true if @var{obj} is a promise.\n@end deffn\n\n@rnindex force\n@deffn {Scheme Procedure} force p\n@deffnx {C Function} scm_force (p)\nReturn the value obtained from evaluating the @var{expr} in the given\npromise @var{p}.  If @var{p} has previously been forced then its\n@var{expr} is not evaluated again, instead the value obtained at that\ntime is simply returned.\n\nDuring a @code{force}, an @var{expr} can call @code{force} again on\nits own promise, resulting in a recursive evaluation of that\n@var{expr}.  The first evaluation to return gives the value for the\npromise.  Higher evaluations run to completion in the normal way, but\ntheir results are ignored, @code{force} always returns the first\nvalue.\n@end deffn\n\n\n@node Local Evaluation\n@subsection Local Evaluation\n\nGuile includes a facility to capture a lexical environment, and later\nevaluate a new expression within that environment.  This code is\nimplemented in a module.\n\n@example\n(use-modules (ice-9 local-eval))\n@end example\n\n@deffn syntax the-environment\nCaptures and returns a lexical environment for use with\n@code{local-eval} or @code{local-compile}.\n@end deffn\n\n@deffn {Scheme Procedure} local-eval exp env\n@deffnx {C Function} scm_local_eval (exp, env)\n@deffnx {Scheme Procedure} local-compile exp env [opts=()]\nEvaluate or compile the expression @var{exp} in the lexical environment\n@var{env}.\n@end deffn\n\nHere is a simple example, illustrating that it is the variable\nthat gets captured, not just its value at one point in time.\n\n@example\n(define e (let ((x 100)) (the-environment)))\n(define fetch-x (local-eval '(lambda () x) e))\n(fetch-x)\n@result{} 100\n(local-eval '(set! x 42) e)\n(fetch-x)\n@result{} 42\n@end example\n\nWhile @var{exp} is evaluated within the lexical environment of\n@code{(the-environment)}, it has the dynamic environment of the call to\n@code{local-eval}.\n\n@code{local-eval} and @code{local-compile} can only evaluate\nexpressions, not definitions.\n\n@example\n(local-eval '(define foo 42)\n            (let ((x 100)) (the-environment)))\n@result{} syntax error: definition in expression context\n@end example\n\nNote that the current implementation of @code{(the-environment)} only\ncaptures ``normal'' lexical bindings, and pattern variables bound by\n@code{syntax-case}.  It does not currently capture local syntax\ntransformers bound by @code{let-syntax}, @code{letrec-syntax} or\nnon-top-level @code{define-syntax} forms.  Any attempt to reference such\ncaptured syntactic keywords via @code{local-eval} or\n@code{local-compile} produces an error.\n\n\n@node Local Inclusion\n@subsection Local Inclusion\n\nThis section has discussed various means of linking Scheme code\ntogether: fundamentally, loading up files at run-time using @code{load}\nand @code{load-compiled}.  Guile provides another option to compose\nparts of programs together at expansion-time instead of at run-time.\n\n@deffn {Scheme Syntax} include file-name\nOpen @var{file-name}, at expansion-time, and read the Scheme forms that\nit contains, splicing them into the location of the @code{include},\nwithin a @code{begin}.\n\nIf @var{file-name} is a relative path, it is searched for relative to\nthe path that contains the file that the @code{include} form appears in.\n@end deffn\n\nIf you are a C programmer, if @code{load} in Scheme is like\n@code{dlopen} in C, consider @code{include} to be like the C\npreprocessor's @code{#include}.  When you use @code{include}, it is as\nif the contents of the included file were typed in instead of the\n@code{include} form.\n\nBecause the code is included at compile-time, it is available to the\nmacroexpander.  Syntax definitions in the included file are available to\nlater code in the form in which the @code{include} appears, without the\nneed for @code{eval-when}.  (@xref{Eval When}.)\n\nFor the same reason, compiling a form that uses @code{include} results\nin one compilation unit, composed of multiple files.  Loading the\ncompiled file is one @code{stat} operation for the compilation unit,\ninstead of @code{2*@var{n}} in the case of @code{load} (once for each\nloaded source file, and once each corresponding compiled file, in the\nbest case).\n\nUnlike @code{load}, @code{include} also works within nested lexical\ncontexts.  It so happens that the optimizer works best within a lexical\ncontext, because all of the uses of bindings in a lexical context are\nvisible, so composing files by including them within a @code{(let ()\n...)} can sometimes lead to important speed improvements.\n\nOn the other hand, @code{include} does have all the disadvantages of\nearly binding: once the code with the @code{include} is compiled, no\nchange to the included file is reflected in the future behavior of the\nincluding form.\n\nAlso, the particular form of @code{include}, which requires an absolute\npath, or a path relative to the current directory at compile-time, is\nnot very amenable to compiling the source in one place, but then\ninstalling the source to another place.  For this reason, Guile provides\nanother form, @code{include-from-path}, which looks for the source file\nto include within a load path.\n\n@deffn {Scheme Syntax} include-from-path file-name\nLike @code{include}, but instead of expecting @code{file-name} to be an\nabsolute file name, it is expected to be a relative path to search in\nthe @code{%load-path}.\n@end deffn\n\n@code{include-from-path} is more useful when you want to install all of\nthe source files for a package (as you should!).  It makes it possible\nto evaluate an installed file from source, instead of relying on the\n@code{.go} file being up to date.\n\n@node Sandboxed Evaluation\n@subsection Sandboxed Evaluation\n\nSometimes you would like to evaluate code that comes from an untrusted\nparty.  The safest way to do this is to buy a new computer, evaluate the\ncode on that computer, then throw the machine away.  However if you are\nunwilling to take this simple approach, Guile does include a limited\n``sandbox'' facility that can allow untrusted code to be evaluated with\nsome confidence.\n\nTo use the sandboxed evaluator, load its module:\n\n@example\n(use-modules (ice-9 sandbox))\n@end example\n\nGuile's sandboxing facility starts with the ability to restrict the time\nand space used by a piece of code.\n\n@deffn {Scheme Procedure} call-with-time-limit limit thunk limit-reached\nCall @var{thunk}, but cancel it if @var{limit} seconds of wall-clock\ntime have elapsed.  If the computation is cancelled, call\n@var{limit-reached} in tail position.  @var{thunk} must not disable\ninterrupts or prevent an abort via a @code{dynamic-wind} unwind handler.\n@end deffn\n\n@deffn {Scheme Procedure} call-with-allocation-limit limit thunk limit-reached\nCall @var{thunk}, but cancel it if @var{limit} bytes have been\nallocated.  If the computation is cancelled, call @var{limit-reached} in\ntail position.  @var{thunk} must not disable interrupts or prevent an\nabort via a @code{dynamic-wind} unwind handler.\n\nThis limit applies to both stack and heap allocation.  The computation\nwill not be aborted before @var{limit} bytes have been allocated, but\nfor the heap allocation limit, the check may be postponed until the next garbage collection.\n\nNote that as a current shortcoming, the heap size limit applies to all\nthreads; concurrent allocation by other unrelated threads counts towards\nthe allocation limit.\n@end deffn\n\n@deffn {Scheme Procedure} call-with-time-and-allocation-limits time-limit allocation-limit thunk\nInvoke @var{thunk} in a dynamic extent in which its execution is limited\nto @var{time-limit} seconds of wall-clock time, and its allocation to\n@var{allocation-limit} bytes.  @var{thunk} must not disable interrupts\nor prevent an abort via a @code{dynamic-wind} unwind handler.\n\nIf successful, return all values produced by invoking @var{thunk}.  Any\nuncaught exception thrown by the thunk will propagate out.  If the time\nor allocation limit is exceeded, an exception will be thrown to the\n@code{limit-exceeded} key.\n@end deffn\n\nThe time limit and stack limit are both very precise, but the heap limit\nonly gets checked asynchronously, after a garbage collection.  In\nparticular, if the heap is already very large, the number of allocated\nbytes between garbage collections will be large, and therefore the\nprecision of the check is reduced.\n\nAdditionally, due to the mechanism used by the allocation limit (the\n@code{after-gc-hook}), large single allocations like @code{(make-vector\n#e1e7)} are only detected after the allocation completes, even if the\nallocation itself causes garbage collection.  It's possible therefore\nfor user code to not only exceed the allocation limit set, but also to\nexhaust all available memory, causing out-of-memory conditions at any\nallocation site.  Failure to allocate memory in Guile itself should be\nsafe and cause an exception to be thrown, but most systems are not\ndesigned to handle @code{malloc} failures.  An allocation failure may\ntherefore exercise unexpected code paths in your system, so it is a\nweakness of the sandbox (and therefore an interesting point of attack).\n\nThe main sandbox interface is @code{eval-in-sandbox}.\n\n@deffn {Scheme Procedure} eval-in-sandbox exp [#:time-limit 0.1] @\n                          [#:allocation-limit #e10e6] @\n                          [#:bindings all-pure-bindings] @\n                          [#:module (make-sandbox-module bindings)] @\n                          [#:sever-module? #t]\nEvaluate the Scheme expression @var{exp} within an isolated\n\"sandbox\".  Limit its execution to @var{time-limit} seconds of\nwall-clock time, and limit its allocation to @var{allocation-limit}\nbytes.\n\nThe evaluation will occur in @var{module}, which defaults to the result\nof calling @code{make-sandbox-module} on @var{bindings}, which itself\ndefaults to @code{all-pure-bindings}.  This is the core of the\nsandbox: creating a scope for the expression that is @dfn{safe}.\n\nA safe sandbox module has two characteristics.  Firstly, it will not\nallow the expression being evaluated to avoid being cancelled due to\ntime or allocation limits.  This ensures that the expression terminates\nin a timely fashion.\n\nSecondly, a safe sandbox module will prevent the evaluation from\nreceiving information from previous evaluations, or from affecting\nfuture evaluations.  All combinations of binding sets exported by\n@code{(ice-9 sandbox)} form safe sandbox modules.\n\nThe @var{bindings} should be given as a list of import sets.  One import\nset is a list whose car names an interface, like @code{(ice-9 q)}, and\nwhose cdr is a list of imports.  An import is either a bare symbol or a\npair of @code{(@var{out} . @var{in})}, where @var{out} and @var{in} are\nboth symbols and denote the name under which a binding is exported from\nthe module, and the name under which to make the binding available,\nrespectively.  Note that @var{bindings} is only used as an input to the\ndefault initializer for the @var{module} argument; if you pass\n@code{#:module}, @var{bindings} is unused.  If @var{sever-module?} is\ntrue (the default), the module will be unlinked from the global module\ntree after the evaluation returns, to allow @var{mod} to be\ngarbage-collected.\n\nIf successful, return all values produced by @var{exp}.  Any uncaught\nexception thrown by the expression will propagate out.  If the time or\nallocation limit is exceeded, an exception will be thrown to the\n@code{limit-exceeded} key.\n@end deffn\n\nConstructing a safe sandbox module is tricky in general.  Guile defines\nan easy way to construct safe modules from predefined sets of bindings.\nBefore getting to that interface, here are some general notes on safety.\n\n@enumerate\n@item The time and allocation limits rely on the ability to interrupt\nand cancel a computation.  For this reason, no binding included in a\nsandbox module should be able to indefinitely postpone interrupt\nhandling, nor should a binding be able to prevent an abort.  In practice\nthis second consideration means that @code{dynamic-wind} should not be\nincluded in any binding set.\n@item The time and allocation limits apply only to the\n@code{eval-in-sandbox} call.  If the call returns a procedure which is\nlater called, no limit is ``automatically'' in place.  Users of\n@code{eval-in-sandbox} have to be very careful to reimpose limits when\ncalling procedures that escape from sandboxes.\n@item Similarly, the dynamic environment of the @code{eval-in-sandbox}\ncall is not necessarily in place when any procedure that escapes from\nthe sandbox is later called.\n\nThis detail prevents us from exposing @code{primitive-eval} to the\nsandbox, for two reasons.  The first is that it's possible for legacy\ncode to forge references to any binding, if the\n@code{allow-legacy-syntax-objects?} parameter is true.  The default for\nthis parameter is true; @pxref{Syntax Transformer Helpers} for the\ndetails.  The parameter is bound to @code{#f} for the duration of the\n@code{eval-in-sandbox} call itself, but that will not be in place during\ncalls to escaped procedures.\n\nThe second reason we don't expose @code{primitive-eval} is that\n@code{primitive-eval} implicitly works in the current module, which for\nan escaped procedure will probably be different than the module that is\ncurrent for the @code{eval-in-sandbox} call itself.\n\nThe common denominator here is that if an interface exposed to the\nsandbox relies on dynamic environments, it is easy to mistakenly grant\nthe sandboxed procedure additional capabilities in the form of bindings\nthat it should not have access to.  For this reason, the default sets of\npredefined bindings do not depend on any dynamically scoped value.\n@item Mutation may allow a sandboxed evaluation to break some invariant\nin users of data supplied to it.  A lot of code culturally doesn't\nexpect mutation, but if you hand mutable data to a sandboxed evaluation\nand you also grant mutating capabilities to that evaluation, then the\nsandboxed code may indeed mutate that data.  The default set of bindings\nto the sandbox do not include any mutating primitives.\n\nRelatedly, @code{set!} may allow a sandbox to mutate a primitive,\ninvalidating many system-wide invariants.  Guile is currently quite\npermissive when it comes to imported bindings and mutability.  Although\n@code{set!} to a module-local or lexically bound variable would be fine,\nwe don't currently have an easy way to disallow @code{set!} to an\nimported binding, so currently no binding set includes @code{set!}.\n@item Mutation may allow a sandboxed evaluation to keep state, or\nmake a communication mechanism with other code.  On the one hand this\nsounds cool, but on the other hand maybe this is part of your threat\nmodel.  Again, the default set of bindings doesn't include mutating\nprimitives, preventing sandboxed evaluations from keeping state.\n@item The sandbox should probably not be able to open a network\nconnection, or write to a file, or open a file from disk.  The default\nbinding set includes no interaction with the operating system.\n@end enumerate\n\nIf you, dear reader, find the above discussion interesting, you will\nenjoy Jonathan Rees' dissertation, ``A Security Kernel Based on the\nLambda Calculus''.\n\n@defvr {Scheme Variable} all-pure-bindings\nAll ``pure'' bindings that together form a safe subset of those bindings\navailable by default to Guile user code.\n@end defvr\n\n@defvr {Scheme Variable} all-pure-and-impure-bindings\nLike @code{all-pure-bindings}, but additionally including mutating\nprimitives like @code{vector-set!}.  This set is still safe in the sense\nmentioned above, with the caveats about mutation.\n@end defvr\n\nThe components of these composite sets are as follows:\n@defvr {Scheme Variable} alist-bindings\n@defvrx {Scheme Variable} array-bindings\n@defvrx {Scheme Variable} bit-bindings\n@defvrx {Scheme Variable} bitvector-bindings\n@defvrx {Scheme Variable} char-bindings\n@defvrx {Scheme Variable} char-set-bindings\n@defvrx {Scheme Variable} clock-bindings\n@defvrx {Scheme Variable} core-bindings\n@defvrx {Scheme Variable} error-bindings\n@defvrx {Scheme Variable} fluid-bindings\n@defvrx {Scheme Variable} hash-bindings\n@defvrx {Scheme Variable} iteration-bindings\n@defvrx {Scheme Variable} keyword-bindings\n@defvrx {Scheme Variable} list-bindings\n@defvrx {Scheme Variable} macro-bindings\n@defvrx {Scheme Variable} nil-bindings\n@defvrx {Scheme Variable} number-bindings\n@defvrx {Scheme Variable} pair-bindings\n@defvrx {Scheme Variable} predicate-bindings\n@defvrx {Scheme Variable} procedure-bindings\n@defvrx {Scheme Variable} promise-bindings\n@defvrx {Scheme Variable} prompt-bindings\n@defvrx {Scheme Variable} regexp-bindings\n@defvrx {Scheme Variable} sort-bindings\n@defvrx {Scheme Variable} srfi-4-bindings\n@defvrx {Scheme Variable} string-bindings\n@defvrx {Scheme Variable} symbol-bindings\n@defvrx {Scheme Variable} unspecified-bindings\n@defvrx {Scheme Variable} variable-bindings\n@defvrx {Scheme Variable} vector-bindings\n@defvrx {Scheme Variable} version-bindings\nThe components of @code{all-pure-bindings}.\n@end defvr\n\n@defvr {Scheme Variable} mutating-alist-bindings\n@defvrx {Scheme Variable} mutating-array-bindings\n@defvrx {Scheme Variable} mutating-bitvector-bindings\n@defvrx {Scheme Variable} mutating-fluid-bindings\n@defvrx {Scheme Variable} mutating-hash-bindings\n@defvrx {Scheme Variable} mutating-list-bindings\n@defvrx {Scheme Variable} mutating-pair-bindings\n@defvrx {Scheme Variable} mutating-sort-bindings\n@defvrx {Scheme Variable} mutating-srfi-4-bindings\n@defvrx {Scheme Variable} mutating-string-bindings\n@defvrx {Scheme Variable} mutating-variable-bindings\n@defvrx {Scheme Variable} mutating-vector-bindings\nThe additional components of @code{all-pure-and-impure-bindings}.\n@end defvr\n\nFinally, what do you do with a binding set?  What is a binding set\nanyway?  @code{make-sandbox-module} is here for you.\n\n@deffn {Scheme Procedure} make-sandbox-module bindings\nReturn a fresh module that only contains @var{bindings}.\n\nThe @var{bindings} should be given as a list of import sets.  One import\nset is a list whose car names an interface, like @code{(ice-9 q)}, and\nwhose cdr is a list of imports.  An import is either a bare symbol or a\npair of @code{(@var{out} . @var{in})}, where @var{out} and @var{in} are\nboth symbols and denote the name under which a binding is exported from\nthe module, and the name under which to make the binding available,\nrespectively.\n@end deffn\n\nSo you see that binding sets are just lists, and\n@code{all-pure-and-impure-bindings} is really just the result of\nappending all of the component binding sets.\n\n\n@node REPL Servers\n@subsection REPL Servers\n\n@cindex REPL server\n\nThe procedures in this section are provided by\n@lisp\n(use-modules (system repl server))\n@end lisp\n\nWhen an application is written in Guile, it is often convenient to\nallow the user to be able to interact with it by evaluating Scheme\nexpressions in a REPL.\n\nThe procedures of this module allow you to spawn a @dfn{REPL server},\nwhich permits interaction over a local or TCP connection.  Guile itself\nuses them internally to implement the @option{--listen} switch,\n@ref{Command-line Options}.\n\n@deffn {Scheme Procedure} make-tcp-server-socket [#:host=#f] @\n                          [#:addr] [#:port=37146]\nReturn a stream socket bound to a given address @var{addr} and port\nnumber @var{port}. If the @var{host} is given, and @var{addr} is not,\nthen the @var{host} string is converted to an address.  If neither is\ngiven, we use the loopback address.\n@end deffn\n\n@deffn {Scheme Procedure} make-unix-domain-server-socket [#:path=\"/tmp/guile-socket\"]\nReturn a UNIX domain socket, bound to a given @var{path}.\n@end deffn\n\n@deffn {Scheme Procedure} run-server [server-socket]\n@deffnx {Scheme Procedure} spawn-server [server-socket]\nCreate and run a REPL, making it available over the given\n@var{server-socket}.  If @var{server-socket} is not provided, it\ndefaults to the socket created by calling @code{make-tcp-server-socket}\nwith no arguments.\n\n@code{run-server} runs the server in the current thread, whereas\n@code{spawn-server} runs the server in a new thread.\n@end deffn\n\n@deffn {Scheme Procedure} stop-server-and-clients!\nCloses the connection on all running server sockets.\n\nPlease note that in the current implementation, the REPL threads are\ncancelled without unwinding their stacks.  If any of them are holding\nmutexes or are within a critical section, the results are unspecified.\n@end deffn\n\n@node Cooperative REPL Servers\n@subsection Cooperative REPL Servers\n\n@cindex Cooperative REPL server\n\nThe procedures in this section are provided by\n@lisp\n(use-modules (system repl coop-server))\n@end lisp\n\nWhereas ordinary REPL servers run in their own threads (@pxref{REPL\nServers}), sometimes it is more convenient to provide REPLs that run at\nspecified times within an existing thread, for example in programs\nutilizing an event loop or in single-threaded programs.  This allows for\nsafe access and mutation of a program's data structures from the REPL,\nwithout concern for thread synchronization.\n\nAlthough the REPLs are run in the thread that calls\n@code{spawn-coop-repl-server} and @code{poll-coop-repl-server},\ndedicated threads are spawned so that the calling thread is not blocked.\nThe spawned threads read input for the REPLs and to listen for new\nconnections.\n\nCooperative REPL servers must be polled periodically to evaluate any\npending expressions by calling @code{poll-coop-repl-server} with the\nobject returned from @code{spawn-coop-repl-server}.  The thread that\ncalls @code{poll-coop-repl-server} will be blocked for as long as the\nexpression takes to be evaluated or if the debugger is entered.\n\n@deffn {Scheme Procedure} spawn-coop-repl-server [server-socket]\nCreate and return a new cooperative REPL server object, and spawn a new\nthread to listen for connections on @var{server-socket}.  Proper\nfunctioning of the REPL server requires that\n@code{poll-coop-repl-server} be called periodically on the returned\nserver object.\n@end deffn\n\n@deffn {Scheme Procedure} poll-coop-repl-server coop-server\nPoll the cooperative REPL server @var{coop-server} and apply a pending\noperation if there is one, such as evaluating an expression typed at the\nREPL prompt.  This procedure must be called from the same thread that\ncalled @code{spawn-coop-repl-server}.\n@end deffn\n\n@c Local Variables:\n@c TeX-master: \"guile.texi\"\n@c End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/doc/ref/api-foreign.texi": "@c -*-texinfo-*-\n@c This is part of the GNU Guile Reference Manual.\n@c Copyright (C)  1996, 1997, 2000-2004, 2007-2014, 2016-2017\n@c   Free Software Foundation, Inc.\n@c See the file guile.texi for copying conditions.\n\n@node Foreign Function Interface\n@section Foreign Function Interface\n@cindex foreign function interface\n@cindex ffi\n\nThe more one hacks in Scheme, the more one realizes that there are\nactually two computational worlds: one which is warm and alive, that\nland of parentheses, and one cold and dead, the land of C and its ilk.\n\nBut yet we as programmers live in both worlds, and Guile itself is half\nimplemented in C. So it is that Guile's living half pays respect to its\ndead counterpart, via a spectrum of interfaces to C ranging from dynamic\nloading of Scheme primitives to dynamic binding of stock C library\nprocedures.\n\n@menu\n* Foreign Libraries::           Dynamically linking to libraries.\n* Foreign Functions::           Simple calls to C procedures.\n* C Extensions::                Extending Guile in C with loadable modules.\n* Modules and Extensions::      Loading C extensions into modules.\n* Foreign Pointers::            Accessing global variables.\n* Dynamic FFI::                 Calling arbitrary C functions.\n@end menu\n\n\n@node Foreign Libraries\n@subsection Foreign Libraries\n\nMost modern Unices have something called @dfn{shared libraries}.  This\nordinarily means that they have the capability to share the executable\nimage of a library between several running programs to save memory and\ndisk space.  But generally, shared libraries give a lot of additional\nflexibility compared to the traditional static libraries.  In fact,\ncalling them `dynamic' libraries is as correct as calling them `shared'.\n\nShared libraries really give you a lot of flexibility in addition to the\nmemory and disk space savings.  When you link a program against a shared\nlibrary, that library is not closely incorporated into the final\nexecutable.  Instead, the executable of your program only contains\nenough information to find the needed shared libraries when the program\nis actually run.  Only then, when the program is starting, is the final\nstep of the linking process performed.  This means that you need not\nrecompile all programs when you install a new, only slightly modified\nversion of a shared library.  The programs will pick up the changes\nautomatically the next time they are run.\n\nNow, when all the necessary machinery is there to perform part of the\nlinking at run-time, why not take the next step and allow the programmer\nto explicitly take advantage of it from within their program?  Of course,\nmany operating systems that support shared libraries do just that, and\nchances are that Guile will allow you to access this feature from within\nyour Scheme programs.  As you might have guessed already, this feature\nis called @dfn{dynamic linking}.@footnote{Some people also refer to the\nfinal linking stage at program startup as `dynamic linking', so if you\nwant to make yourself perfectly clear, it is probably best to use the\nmore technical term @dfn{dlopening}, as suggested by Gordon Matzigkeit\nin his libtool documentation.}\n\nWe titled this section ``foreign libraries'' because although the name\n``foreign'' doesn't leak into the API, the world of C really is foreign\nto Scheme -- and that estrangement extends to components of foreign\nlibraries as well, as we see in future sections.\n\n@deffn {Scheme Procedure} dynamic-link [library]\n@deffnx {C Function} scm_dynamic_link (library)\nFind the shared library denoted by @var{library} (a string) and link it\ninto the running Guile application.  When everything works out, return a\nScheme object suitable for representing the linked object file.\nOtherwise an error is thrown.  How object files are searched is system\ndependent.\n\nNormally, @var{library} is just the name of some shared library file\nthat will be searched for in the places where shared libraries usually\nreside, such as in @file{/usr/lib} and @file{/usr/local/lib}.\n\n@var{library} should not contain an extension such as @code{.so}.  The\ncorrect file name extension for the host operating system is provided\nautomatically, according to libltdl's rules (@pxref{Libltdl interface,\nlt_dlopenext, @code{lt_dlopenext}, libtool, Shared Library Support for\nGNU}).\n\nWhen @var{library} is omitted, a @dfn{global symbol handle} is returned.  This\nhandle provides access to the symbols available to the program at run-time,\nincluding those exported by the program itself and the shared libraries already\nloaded.\n\nNote that on hosts that use dynamic-link libraries (DLLs), the global\nsymbol handle may not be able to provide access to symbols from\nrecursively-loaded DLLs.  Only exported symbols from those DLLs directly\nloaded by the program may be available.\n@end deffn\n\n@deffn {Scheme Procedure} dynamic-object? obj\n@deffnx {C Function} scm_dynamic_object_p (obj)\nReturn @code{#t} if @var{obj} is a dynamic library handle, or @code{#f}\notherwise.\n@end deffn\n\n@deffn {Scheme Procedure} dynamic-unlink dobj\n@deffnx {C Function} scm_dynamic_unlink (dobj)\nUnlink the indicated object file from the application.  The\nargument @var{dobj} must have been obtained by a call to\n@code{dynamic-link}.  After @code{dynamic-unlink} has been\ncalled on @var{dobj}, its content is no longer accessible.\n@end deffn\n\n@smallexample\n(define libgl-obj (dynamic-link \"libGL\"))\nlibgl-obj\n@result{} #<dynamic-object \"libGL\">\n(dynamic-unlink libGL-obj)\nlibGL-obj\n@result{} #<dynamic-object \"libGL\" (unlinked)>\n@end smallexample\n\nAs you can see, after calling @code{dynamic-unlink} on a dynamically\nlinked library, it is marked as @samp{(unlinked)} and you are no longer\nable to use it with @code{dynamic-call}, etc.  Whether the library is\nreally removed from you program is system-dependent and will generally\nnot happen when some other parts of your program still use it.\n\nWhen dynamic linking is disabled or not supported on your system,\nthe above functions throw errors, but they are still available.\n\n\n@node Foreign Functions\n@subsection Foreign Functions\n\nThe most natural thing to do with a dynamic library is to grovel around\nin it for a function pointer: a @dfn{foreign function}.\n@code{dynamic-func} exists for that purpose.\n\n@deffn {Scheme Procedure} dynamic-func name dobj\n@deffnx {C Function} scm_dynamic_func (name, dobj)\nReturn a ``handle'' for the func @var{name} in the shared object referred to\nby @var{dobj}. The handle can be passed to @code{dynamic-call} to\nactually call the function.\n\nRegardless whether your C compiler prepends an underscore @samp{_} to the global\nnames in a program, you should @strong{not} include this underscore in\n@var{name} since it will be added automatically when necessary.\n@end deffn\n\nGuile has static support for calling functions with no arguments,\n@code{dynamic-call}.\n\n@deffn {Scheme Procedure} dynamic-call func dobj\n@deffnx {C Function} scm_dynamic_call (func, dobj)\nCall the C function indicated by @var{func} and @var{dobj}.\nThe function is passed no arguments and its return value is\nignored.  When @var{function} is something returned by\n@code{dynamic-func}, call that function and ignore @var{dobj}.\nWhen @var{func} is a string , look it up in @var{dynobj}; this\nis equivalent to\n@smallexample\n(dynamic-call (dynamic-func @var{func} @var{dobj}) #f)\n@end smallexample\n@end deffn\n\n@code{dynamic-call} is not very powerful. It is mostly intended to be\nused for calling specially written initialization functions that will\nthen add new primitives to Guile. For example, we do not expect that you\nwill dynamically link @file{libX11} with @code{dynamic-link} and then\nconstruct a beautiful graphical user interface just by using\n@code{dynamic-call}. Instead, the usual way would be to write a special\nGuile-to-X11 glue library that has intimate knowledge about both Guile\nand X11 and does whatever is necessary to make them inter-operate\nsmoothly. This glue library could then be dynamically linked into a\nvanilla Guile interpreter and activated by calling its initialization\nfunction. That function would add all the new types and primitives to\nthe Guile interpreter that it has to offer.\n\n(There is actually another, better option: simply to create a\n@file{libX11} wrapper in Scheme via the dynamic FFI. @xref{Dynamic FFI},\nfor more information.)\n\nGiven some set of C extensions to Guile, the next logical step is to\nintegrate these glue libraries into the module system of Guile so that\nyou can load new primitives into a running system just as you can load\nnew Scheme code.\n\n@deffn {Scheme Procedure} load-extension lib init\n@deffnx {C Function} scm_load_extension (lib, init)\nLoad and initialize the extension designated by LIB and INIT.\nWhen there is no pre-registered function for LIB/INIT, this is\nequivalent to\n\n@lisp\n(dynamic-call INIT (dynamic-link LIB))\n@end lisp\n\nWhen there is a pre-registered function, that function is called\ninstead.\n\nNormally, there is no pre-registered function.  This option exists\nonly for situations where dynamic linking is unavailable or unwanted.\nIn that case, you would statically link your program with the desired\nlibrary, and register its init function right after Guile has been\ninitialized.\n\nAs for @code{dynamic-link}, @var{lib} should not contain any suffix such\nas @code{.so} (@pxref{Foreign Libraries, dynamic-link}).  It\nshould also not contain any directory components.  Libraries that\nimplement Guile Extensions should be put into the normal locations for\nshared libraries.  We recommend to use the naming convention\n@file{libguile-bla-blum} for a extension related to a module @code{(bla\nblum)}.\n\nThe normal way for a extension to be used is to write a small Scheme\nfile that defines a module, and to load the extension into this\nmodule.  When the module is auto-loaded, the extension is loaded as\nwell.  For example,\n\n@lisp\n(define-module (bla blum))\n\n(load-extension \"libguile-bla-blum\" \"bla_init_blum\")\n@end lisp\n@end deffn\n\n@node C Extensions\n@subsection C Extensions\n\nThe most interesting application of dynamically linked libraries is\nprobably to use them for providing @emph{compiled code modules} to\nScheme programs.  As much fun as programming in Scheme is, every now and\nthen comes the need to write some low-level C stuff to make Scheme even\nmore fun.\n\nNot only can you put these new primitives into their own module (see the\nprevious section), you can even put them into a shared library that is\nonly then linked to your running Guile image when it is actually\nneeded.\n\nAn example will hopefully make everything clear.  Suppose we want to\nmake the Bessel functions of the C library available to Scheme in the\nmodule @samp{(math bessel)}.  First we need to write the appropriate\nglue code to convert the arguments and return values of the functions\nfrom Scheme to C and back.  Additionally, we need a function that will\nadd them to the set of Guile primitives.  Because this is just an\nexample, we will only implement this for the @code{j0} function.\n\n@smallexample\n#include <math.h>\n#include <libguile.h>\n\nSCM\nj0_wrapper (SCM x)\n@{\n  return scm_from_double (j0 (scm_to_double (x, \"j0\")));\n@}\n\nvoid\ninit_math_bessel ()\n@{\n  scm_c_define_gsubr (\"j0\", 1, 0, 0, j0_wrapper);\n@}\n@end smallexample\n\nWe can already try to bring this into action by manually calling the low\nlevel functions for performing dynamic linking.  The C source file needs\nto be compiled into a shared library.  Here is how to do it on\nGNU/Linux, please refer to the @code{libtool} documentation for how to\ncreate dynamically linkable libraries portably.\n\n@smallexample\ngcc -shared -o libbessel.so -fPIC bessel.c\n@end smallexample\n\nNow fire up Guile:\n\n@lisp\n(define bessel-lib (dynamic-link \"./libbessel.so\"))\n(dynamic-call \"init_math_bessel\" bessel-lib)\n(j0 2)\n@result{} 0.223890779141236\n@end lisp\n\nThe filename @file{./libbessel.so} should be pointing to the shared\nlibrary produced with the @code{gcc} command above, of course.  The\nsecond line of the Guile interaction will call the\n@code{init_math_bessel} function which in turn will register the C\nfunction @code{j0_wrapper} with the Guile interpreter under the name\n@code{j0}.  This function becomes immediately available and we can call\nit from Scheme.\n\nFun, isn't it?  But we are only half way there.  This is what\n@code{apropos} has to say about @code{j0}:\n\n@smallexample\n(apropos \"j0\")\n@print{} (guile-user): j0     #<primitive-procedure j0>\n@end smallexample\n\nAs you can see, @code{j0} is contained in the root module, where all\nthe other Guile primitives like @code{display}, etc live.  In general,\na primitive is put into whatever module is the @dfn{current module} at\nthe time @code{scm_c_define_gsubr} is called.\n\nA compiled module should have a specially named @dfn{module init\nfunction}.  Guile knows about this special name and will call that\nfunction automatically after having linked in the shared library.  For\nour example, we replace @code{init_math_bessel} with the following code in\n@file{bessel.c}:\n\n@smallexample\nvoid\ninit_math_bessel (void *unused)\n@{\n  scm_c_define_gsubr (\"j0\", 1, 0, 0, j0_wrapper);\n  scm_c_export (\"j0\", NULL);\n@}\n\nvoid\nscm_init_math_bessel_module ()\n@{\n  scm_c_define_module (\"math bessel\", init_math_bessel, NULL);   \n@}\n@end smallexample\n\nThe general pattern for the name of a module init function is:\n@samp{scm_init_}, followed by the name of the module where the\nindividual hierarchical components are concatenated with underscores,\nfollowed by @samp{_module}.\n\nAfter @file{libbessel.so} has been rebuilt, we need to place the shared\nlibrary into the right place.\n\nOnce the module has been correctly installed, it should be possible to\nuse it like this:\n\n@smallexample\nguile> (load-extension \"./libbessel.so\" \"scm_init_math_bessel_module\")\nguile> (use-modules (math bessel))\nguile> (j0 2)\n0.223890779141236\nguile> (apropos \"j0\")\n@print{} (math bessel): j0      #<primitive-procedure j0>\n@end smallexample\n\nThat's it!\n\n\n@node Modules and Extensions\n@subsection Modules and Extensions\n\nThe new primitives that you add to Guile with @code{scm_c_define_gsubr}\n(@pxref{Primitive Procedures}) or with any of the other mechanisms are\nplaced into the module that is current when the\n@code{scm_c_define_gsubr} is executed. Extensions loaded from the REPL,\nfor example, will be placed into the @code{(guile-user)} module, if the\nREPL module was not changed.\n\nTo define C primitives within a specific module, the simplest way is:\n\n@example\n(define-module (foo bar))\n(load-extension \"foobar-c-code\" \"foo_bar_init\")\n@end example\n\n@cindex extensiondir\nWhen loaded with @code{(use-modules (foo bar))}, the\n@code{load-extension} call looks for the @file{foobar-c-code.so} (etc)\nobject file in Guile's @code{extensiondir}, which is usually a\nsubdirectory of the @code{libdir}. For example, if your libdir is\n@file{/usr/lib}, the @code{extensiondir} for the Guile @value{EFFECTIVE-VERSION}.@var{x}\nseries will be @file{/usr/lib/guile/@value{EFFECTIVE-VERSION}/}.\n\nThe extension path includes the major and minor version of Guile (the\n``effective version''), because Guile guarantees compatibility within a\ngiven effective version. This allows you to install different versions\nof the same extension for different versions of Guile.\n\nIf the extension is not found in the @code{extensiondir}, Guile will\nalso search the standard system locations, such as @file{/usr/lib} or\n@file{/usr/local/lib}. It is preferable, however, to keep your extension\nout of the system library path, to prevent unintended interference with\nother dynamically-linked C libraries.\n\nIf someone installs your module to a non-standard location then the\nobject file won't be found.  You can address this by inserting the\ninstall location in the @file{foo/bar.scm} file.  This is convenient\nfor the user and also guarantees the intended object is read, even if\nstray older or newer versions are in the loader's path.\n\nThe usual way to specify an install location is with a @code{prefix}\nat the configure stage, for instance @samp{./configure prefix=/opt}\nresults in library files as say @file{/opt/lib/foobar-c-code.so}.\nWhen using Autoconf (@pxref{Top, , Introduction, autoconf, The GNU\nAutoconf Manual}), the library location is in a @code{libdir}\nvariable.  Its value is intended to be expanded by @command{make}, and\ncan by substituted into a source file like @file{foo.scm.in}\n\n@example\n(define-module (foo bar))\n(load-extension \"XXextensiondirXX/foobar-c-code\" \"foo_bar_init\")\n@end example\n\n@noindent\nwith the following in a @file{Makefile}, using @command{sed}\n(@pxref{Top, , Introduction, sed, SED, A Stream Editor}),\n\n@example\nfoo.scm: foo.scm.in\n        sed 's|XXextensiondirXX|$(libdir)/guile/@value{EFFECTIVE-VERSION}|' <foo.scm.in >foo.scm\n@end example\n\nThe actual pattern @code{XXextensiondirXX} is arbitrary, it's only something\nwhich doesn't otherwise occur.  If several modules need the value, it\ncan be easier to create one @file{foo/config.scm} with a define of the\n@code{extensiondir} location, and use that as required.\n\n@example\n(define-module (foo config))\n(define-public foo-config-extensiondir \"XXextensiondirXX\"\")\n@end example\n\nSuch a file might have other locations too, for instance a data\ndirectory for auxiliary files, or @code{localedir} if the module has\nits own @code{gettext} message catalogue\n(@pxref{Internationalization}).\n\nIt will be noted all of the above requires that the Scheme code to be\nfound in @code{%load-path} (@pxref{Load Paths}).  Presently it's left up\nto the system administrator or each user to augment that path when\ninstalling Guile modules in non-default locations.  But having reached\nthe Scheme code, that code should take care of hitting any of its own\nprivate files etc.\n\n\n@node Foreign Pointers\n@subsection Foreign Pointers\n\nThe previous sections have shown how Guile can be extended at runtime by\nloading compiled C extensions. This approach is all well and good, but\nwouldn't it be nice if we didn't have to write any C at all? This\nsection takes up the problem of accessing C values from Scheme, and the\nnext discusses C functions.\n\n@menu\n* Foreign Types::                  Expressing C types in Scheme.\n* Foreign Variables::              Pointers to C symbols.\n* Void Pointers and Byte Access::  Pointers into the ether.\n* Foreign Structs::                Packing and unpacking structs.\n@end menu\n\n@node Foreign Types\n@subsubsection Foreign Types\n\nThe first impedance mismatch that one sees between C and Scheme is that\nin C, the storage locations (variables) are typed, but in Scheme types\nare associated with values, not variables. @xref{Values and Variables}.\n\nSo when describing a C function or a C structure so that it can be\naccessed from Scheme, the data types of the parameters or fields must be\npassed explicitly.\n\nThese ``C type values'' may be constructed using the constants and\nprocedures from the @code{(system foreign)} module, which may be loaded\nlike this:\n\n@example\n(use-modules (system foreign))\n@end example\n\n@code{(system foreign)} exports a number of values expressing the basic\nC types:\n\n@defvr {Scheme Variable} int8\n@defvrx {Scheme Variable} uint8\n@defvrx {Scheme Variable} uint16\n@defvrx {Scheme Variable} int16\n@defvrx {Scheme Variable} uint32\n@defvrx {Scheme Variable} int32\n@defvrx {Scheme Variable} uint64\n@defvrx {Scheme Variable} int64\n@defvrx {Scheme Variable} float\n@defvrx {Scheme Variable} double\nThese values represent the C numeric types of the specified sizes and\nsignednesses.\n@end defvr\n\nIn addition there are some convenience bindings for indicating types of\nplatform-dependent size:\n\n@defvr {Scheme Variable} int\n@defvrx {Scheme Variable} unsigned-int\n@defvrx {Scheme Variable} long\n@defvrx {Scheme Variable} unsigned-long\n@defvrx {Scheme Variable} short\n@defvrx {Scheme Variable} unsigned-short\n@defvrx {Scheme Variable} size_t\n@defvrx {Scheme Variable} ssize_t\n@defvrx {Scheme Variable} ptrdiff_t\n@defvrx {Scheme Variable} intptr_t\n@defvrx {Scheme Variable} uintptr_t\nValues exported by the @code{(system foreign)} module, representing C\nnumeric types. For example, @code{long} may be @code{equal?} to\n@code{int64} on a 64-bit platform.\n@end defvr\n\n@defvr {Scheme Variable} void\nThe @code{void} type.  It can be used as the first argument to\n@code{pointer->procedure} to wrap a C function that returns nothing.\n@end defvr\n\nIn addition, the symbol @code{*} is used by convention to denote pointer\ntypes.  Procedures detailed in the following sections, such as\n@code{pointer->procedure}, accept it as a type descriptor.\n\n@node Foreign Variables\n@subsubsection Foreign Variables\n\nPointers to variables in the current address space may be looked up\ndynamically using @code{dynamic-pointer}.\n\n@deffn {Scheme Procedure} dynamic-pointer name dobj\n@deffnx {C Function} scm_dynamic_pointer (name, dobj)\nReturn a ``wrapped pointer'' for the symbol @var{name} in the shared\nobject referred to by @var{dobj}.  The returned pointer points to a C\nobject.\n\nRegardless whether your C compiler prepends an underscore @samp{_} to the global\nnames in a program, you should @strong{not} include this underscore in\n@var{name} since it will be added automatically when necessary.\n@end deffn\n\nFor example, currently Guile has a variable, @code{scm_numptob}, as part\nof its API. It is declared as a C @code{long}. So, to create a handle\npointing to that foreign value, we do:\n\n@example\n(use-modules (system foreign))\n(define numptob (dynamic-pointer \"scm_numptob\" (dynamic-link)))\nnumptob\n@result{} #<pointer 0x7fb35b1b4688>\n@end example\n\n(The next section discusses ways to dereference pointers.)\n\nA value returned by @code{dynamic-pointer} is a Scheme wrapper for a C\npointer.\n\n@deffn {Scheme Procedure} pointer-address pointer\n@deffnx {C Function} scm_pointer_address (pointer)\nReturn the numerical value of @var{pointer}.\n\n@example\n(pointer-address numptob)\n@result{} 139984413364296 ; YMMV\n@end example\n@end deffn\n\n@deffn {Scheme Procedure} make-pointer address [finalizer]\nReturn a foreign pointer object pointing to @var{address}.  If\n@var{finalizer} is passed, it should be a pointer to a one-argument C\nfunction that will be called when the pointer object becomes\nunreachable.\n@end deffn\n\n@deffn {Scheme Procedure} pointer? obj\nReturn @code{#t} if @var{obj} is a pointer object, @code{#f} otherwise.\n@end deffn\n\n@defvr {Scheme Variable} %null-pointer\nA foreign pointer whose value is 0.\n@end defvr\n\n@deffn {Scheme Procedure} null-pointer? pointer\nReturn @code{#t} if @var{pointer} is the null pointer, @code{#f} otherwise.\n@end deffn\n\nFor the purpose of passing SCM values directly to foreign functions, and\nallowing them to return SCM values, Guile also supports some unsafe\ncasting operators.\n\n@deffn {Scheme Procedure} scm->pointer scm\nReturn a foreign pointer object with the @code{object-address}\nof @var{scm}.\n@end deffn\n\n@deffn {Scheme Procedure} pointer->scm pointer\nUnsafely cast @var{pointer} to a Scheme object.\nCross your fingers!\n@end deffn\n\nSometimes you want to give C extensions access to the dynamic FFI.  At\nthat point, the names get confusing, because ``pointer'' can refer to a\n@code{SCM} object that wraps a pointer, or to a @code{void*} value.  We\nwill try to use ``pointer object'' to refer to Scheme objects, and\n``pointer value'' to refer to @code{void *} values.\n\n@deftypefn {C Function} SCM scm_from_pointer (void *ptr, void (*finalizer) (void*))\nCreate a pointer object from a pointer value.\n\nIf @var{finalizer} is non-null, Guile arranges to call it on the pointer\nvalue at some point after the pointer object becomes collectable.\n@end deftypefn\n\n@deftypefn {C Function} void* scm_to_pointer (SCM obj)\nUnpack the pointer value from a pointer object.\n@end deftypefn\n\n@node Void Pointers and Byte Access\n@subsubsection Void Pointers and Byte Access\n\nWrapped pointers are untyped, so they are essentially equivalent to C\n@code{void} pointers.  As in C, the memory region pointed to by a\npointer can be accessed at the byte level.  This is achieved using\n@emph{bytevectors} (@pxref{Bytevectors}).  The @code{(rnrs bytevectors)}\nmodule contains procedures that can be used to convert byte sequences to\nScheme objects such as strings, floating point numbers, or integers.\n\n@deffn {Scheme Procedure} pointer->bytevector pointer len [offset [uvec_type]]\n@deffnx {C Function} scm_pointer_to_bytevector (pointer, len, offset, uvec_type)\nReturn a bytevector aliasing the @var{len} bytes pointed to by\n@var{pointer}.\n\nThe user may specify an alternate default interpretation for the memory\nby passing the @var{uvec_type} argument, to indicate that the memory is\nan array of elements of that type.  @var{uvec_type} should be something\nthat @code{array-type} would return, like @code{f32} or @code{s16}.\n\nWhen @var{offset} is passed, it specifies the offset in bytes relative\nto @var{pointer} of the memory region aliased by the returned\nbytevector.\n\nMutating the returned bytevector mutates the memory pointed to by\n@var{pointer}, so buckle your seatbelts.\n@end deffn\n\n@deffn {Scheme Procedure} bytevector->pointer bv [offset]\n@deffnx {C Function} scm_bytevector_to_pointer (bv, offset)\nReturn a pointer pointer aliasing the memory pointed to by @var{bv} or\n@var{offset} bytes after @var{bv} when @var{offset} is passed.\n@end deffn\n\nIn addition to these primitives, convenience procedures are available:\n\n@deffn {Scheme Procedure} dereference-pointer pointer\nAssuming @var{pointer} points to a memory region that holds a pointer,\nreturn this pointer.\n@end deffn\n\n@deffn {Scheme Procedure} string->pointer string [encoding]\nReturn a foreign pointer to a nul-terminated copy of @var{string} in the\ngiven @var{encoding}, defaulting to the current locale encoding.  The C\nstring is freed when the returned foreign pointer becomes unreachable.\n\nThis is the Scheme equivalent of @code{scm_to_stringn}.\n@end deffn\n\n@deffn {Scheme Procedure} pointer->string pointer [length] [encoding]\nReturn the string representing the C string pointed to by @var{pointer}.\nIf @var{length} is omitted or @code{-1}, the string is assumed to be\nnul-terminated.  Otherwise @var{length} is the number of bytes in memory\npointed to by @var{pointer}.  The C string is assumed to be in the given\n@var{encoding}, defaulting to the current locale encoding.\n\nThis is the Scheme equivalent of @code{scm_from_stringn}.\n@end deffn\n\n@cindex wrapped pointer types\nMost object-oriented C libraries use pointers to specific data\nstructures to identify objects.  It is useful in such cases to reify the\ndifferent pointer types as disjoint Scheme types.  The\n@code{define-wrapped-pointer-type} macro simplifies this.\n\n@deffn {Scheme Syntax} define-wrapped-pointer-type type-name pred wrap unwrap print\nDefine helper procedures to wrap pointer objects into Scheme objects\nwith a disjoint type.  Specifically, this macro defines:\n\n@itemize\n@item @var{pred}, a predicate for the new Scheme type;\n@item @var{wrap}, a procedure that takes a pointer object and returns an\nobject that satisfies @var{pred};\n@item @var{unwrap}, which does the reverse.\n@end itemize\n\n@var{wrap} preserves pointer identity, for two pointer objects @var{p1}\nand @var{p2} that are @code{equal?}, @code{(eq? (@var{wrap} @var{p1})\n(@var{wrap} @var{p2})) @result{} #t}.\n\nFinally, @var{print} should name a user-defined procedure to print such\nobjects.  The procedure is passed the wrapped object and a port to write\nto.\n\nFor example, assume we are wrapping a C library that defines a type,\n@code{bottle_t}, and functions that can be passed @code{bottle_t *}\npointers to manipulate them.  We could write:\n\n@example\n(define-wrapped-pointer-type bottle\n  bottle?\n  wrap-bottle unwrap-bottle\n  (lambda (b p)\n    (format p \"#<bottle of ~a ~x>\"\n            (bottle-contents b)\n            (pointer-address (unwrap-bottle b)))))\n\n(define grab-bottle\n  ;; Wrapper for `bottle_t *grab (void)'.\n  (let ((grab (pointer->procedure '*\n                                  (dynamic-func \"grab_bottle\" libbottle)\n                                  '())))\n    (lambda ()\n      \"Return a new bottle.\"\n      (wrap-bottle (grab)))))\n\n(define bottle-contents\n  ;; Wrapper for `const char *bottle_contents (bottle_t *)'.\n  (let ((contents (pointer->procedure '*\n                                      (dynamic-func \"bottle_contents\"\n                                                     libbottle)\n                                      '(*))))\n    (lambda (b)\n      \"Return the contents of B.\"\n      (pointer->string (contents (unwrap-bottle b))))))\n\n(write (grab-bottle))\n@result{} #<bottle of Ch@^ateau Haut-Brion 803d36>\n@end example\n\nIn this example, @code{grab-bottle} is guaranteed to return a genuine\n@code{bottle} object satisfying @code{bottle?}.  Likewise,\n@code{bottle-contents} errors out when its argument is not a genuine\n@code{bottle} object.\n@end deffn\n\nGoing back to the @code{scm_numptob} example above, here is how we can\nread its value as a C @code{long} integer:\n\n@example\n(use-modules (rnrs bytevectors))\n\n(bytevector-uint-ref (pointer->bytevector numptob (sizeof long))\n                     0 (native-endianness)\n                     (sizeof long))\n@result{} 8\n@end example\n\nIf we wanted to corrupt Guile's internal state, we could set\n@code{scm_numptob} to another value; but we shouldn't, because that\nvariable is not meant to be set.  Indeed this point applies more widely:\nthe C API is a dangerous place to be.  Not only might setting a value\ncrash your program, simply accessing the data pointed to by a dangling\npointer or similar can prove equally disastrous.\n\n@node Foreign Structs\n@subsubsection Foreign Structs\n\nFinally, one last note on foreign values before moving on to actually\ncalling foreign functions. Sometimes you need to deal with C structs,\nwhich requires interpreting each element of the struct according to the\nits type, offset, and alignment. Guile has some primitives to support\nthis.\n\n@deffn {Scheme Procedure} sizeof type\n@deffnx {C Function} scm_sizeof (type)\nReturn the size of @var{type}, in bytes.\n\n@var{type} should be a valid C type, like @code{int}.\nAlternately @var{type} may be the symbol @code{*}, in which\ncase the size of a pointer is returned. @var{type} may\nalso be a list of types, in which case the size of a\n@code{struct} with ABI-conventional packing is returned.\n@end deffn\n\n@deffn {Scheme Procedure} alignof type\n@deffnx {C Function} scm_alignof (type)\nReturn the alignment of @var{type}, in bytes.\n\n@var{type} should be a valid C type, like @code{int}.\nAlternately @var{type} may be the symbol @code{*}, in which\ncase the alignment of a pointer is returned. @var{type} may\nalso be a list of types, in which case the alignment of a\n@code{struct} with ABI-conventional packing is returned.\n@end deffn\n\nGuile also provides some convenience methods to pack and unpack foreign\npointers wrapping C structs.\n\n@deffn {Scheme Procedure} make-c-struct types vals\nCreate a foreign pointer to a C struct containing @var{vals} with types\n@code{types}.\n\n@var{vals} and @code{types} should be lists of the same length.\n@end deffn\n\n@deffn {Scheme Procedure} parse-c-struct foreign types\nParse a foreign pointer to a C struct, returning a list of values.\n\n@code{types} should be a list of C types.\n@end deffn\n\nFor example, to create and parse the equivalent of a @code{struct @{\nint64_t a; uint8_t b; @}}:\n\n@example\n(parse-c-struct (make-c-struct (list int64 uint8)\n                               (list 300 43))\n                (list int64 uint8))\n@result{} (300 43)\n@end example\n\nAs yet, Guile only has convenience routines to support\nconventionally-packed structs. But given the @code{bytevector->pointer}\nand @code{pointer->bytevector} routines, one can create and parse\ntightly packed structs and unions by hand. See the code for\n@code{(system foreign)} for details.\n\n\n@node Dynamic FFI\n@subsection Dynamic FFI\n\nOf course, the land of C is not all nouns and no verbs: there are\nfunctions too, and Guile allows you to call them.\n\n@deffn {Scheme Procedure} pointer->procedure return_type func_ptr arg_types @\n                                             [#:return-errno?=#f]\n@deffnx {C Function} scm_pointer_to_procedure (return_type, func_ptr, arg_types)\n@deffnx {C Function} scm_pointer_to_procedure_with_errno (return_type, func_ptr, arg_types)\n\nMake a foreign function.\n\nGiven the foreign void pointer @var{func_ptr}, its argument and\nreturn types @var{arg_types} and @var{return_type}, return a\nprocedure that will pass arguments to the foreign function\nand return appropriate values.\n\n@var{arg_types} should be a list of foreign types.\n@code{return_type} should be a foreign type. @xref{Foreign Types}, for\nmore information on foreign types.\n\nIf @var{return-errno?} is true, or when calling\n@code{scm_pointer_to_procedure_with_errno}, the returned procedure will\nreturn two values, with @code{errno} as the second value.\n@end deffn\n\nHere is a better definition of @code{(math bessel)}:\n\n@example\n(define-module (math bessel)\n  #:use-module (system foreign)\n  #:export (j0))\n\n(define libm (dynamic-link \"libm\"))\n\n(define j0\n  (pointer->procedure double\n                      (dynamic-func \"j0\" libm)\n                      (list double)))\n@end example\n\nThat's it! No C at all.\n\nNumeric arguments and return values from foreign functions are\nrepresented as Scheme values. For example, @code{j0} in the above\nexample takes a Scheme number as its argument, and returns a Scheme\nnumber.\n\nPointers may be passed to and returned from foreign functions as well.\nIn that case the type of the argument or return value should be the\nsymbol @code{*}, indicating a pointer. For example, the following\ncode makes @code{memcpy} available to Scheme:\n\n@example\n(define memcpy\n  (let ((this (dynamic-link)))\n    (pointer->procedure '*\n                        (dynamic-func \"memcpy\" this)\n                        (list '* '* size_t))))\n@end example\n\nTo invoke @code{memcpy}, one must pass it foreign pointers:\n\n@example\n(use-modules (rnrs bytevectors))\n\n(define src-bits\n  (u8-list->bytevector '(0 1 2 3 4 5 6 7)))\n(define src\n  (bytevector->pointer src-bits))\n(define dest\n  (bytevector->pointer (make-bytevector 16 0)))\n\n(memcpy dest src (bytevector-length src-bits))\n\n(bytevector->u8-list (pointer->bytevector dest 16))\n@result{} (0 1 2 3 4 5 6 7 0 0 0 0 0 0 0 0)\n@end example\n\nOne may also pass structs as values, passing structs as foreign\npointers. @xref{Foreign Structs}, for more information on how to express\nstruct types and struct values.\n\n``Out'' arguments are passed as foreign pointers. The memory pointed to\nby the foreign pointer is mutated in place.\n\n@example\n;; struct timeval @{\n;;      time_t      tv_sec;     /* seconds */\n;;      suseconds_t tv_usec;    /* microseconds */\n;; @};\n;; assuming fields are of type \"long\"\n\n(define gettimeofday\n  (let ((f (pointer->procedure\n            int\n            (dynamic-func \"gettimeofday\" (dynamic-link))\n            (list '* '*)))\n        (tv-type (list long long)))\n    (lambda ()\n      (let* ((timeval (make-c-struct tv-type (list 0 0)))\n             (ret (f timeval %null-pointer)))\n        (if (zero? ret)\n            (apply values (parse-c-struct timeval tv-type))\n            (error \"gettimeofday returned an error\" ret))))))\n\n(gettimeofday)    \n@result{} 1270587589\n@result{} 499553\n@end example\n\nAs you can see, this interface to foreign functions is at a very low,\nsomewhat dangerous level@footnote{A contribution to Guile in the form of\na high-level FFI would be most welcome.}.\n\n@cindex callbacks\nThe FFI can also work in the opposite direction: making Scheme\nprocedures callable from C.  This makes it possible to use Scheme\nprocedures as ``callbacks'' expected by C function.\n\n@deffn {Scheme Procedure} procedure->pointer return-type proc arg-types\n@deffnx {C Function} scm_procedure_to_pointer (return_type, proc, arg_types)\nReturn a pointer to a C function of type @var{return-type}\ntaking arguments of types @var{arg-types} (a list) and\nbehaving as a proxy to procedure @var{proc}.  Thus\n@var{proc}'s arity, supported argument types, and return\ntype should match @var{return-type} and @var{arg-types}.\n@end deffn\n\nAs an example, here's how the C library's @code{qsort} array sorting\nfunction can be made accessible to Scheme (@pxref{Array Sort Function,\n@code{qsort},, libc, The GNU C Library Reference Manual}):\n\n@example\n(define qsort!\n  (let ((qsort (pointer->procedure void\n                                   (dynamic-func \"qsort\"\n                                                 (dynamic-link))\n                                   (list '* size_t size_t '*))))\n    (lambda (bv compare)\n      ;; Sort bytevector BV in-place according to comparison\n      ;; procedure COMPARE.\n      (let ((ptr (procedure->pointer int\n                                     (lambda (x y)\n                                       ;; X and Y are pointers so,\n                                       ;; for convenience, dereference\n                                       ;; them before calling COMPARE.\n                                       (compare (dereference-uint8* x)\n                                                (dereference-uint8* y)))\n                                     (list '* '*))))\n        (qsort (bytevector->pointer bv)\n               (bytevector-length bv) 1 ;; we're sorting bytes\n               ptr)))))\n\n(define (dereference-uint8* ptr)\n  ;; Helper function: dereference the byte pointed to by PTR.\n  (let ((b (pointer->bytevector ptr 1)))\n    (bytevector-u8-ref b 0)))\n\n(define bv\n  ;; An unsorted array of bytes.\n  (u8-list->bytevector '(7 1 127 3 5 4 77 2 9 0)))\n\n;; Sort BV.\n(qsort! bv (lambda (x y) (- x y)))\n\n;; Let's see what the sorted array looks like:\n(bytevector->u8-list bv)\n@result{} (0 1 2 3 4 5 7 9 77 127)\n@end example\n\nAnd voil@`a!\n\nNote that @code{procedure->pointer} is not supported (and not defined)\non a few exotic architectures.  Thus, user code may need to check\n@code{(defined? 'procedure->pointer)}.  Nevertheless, it is available on\nmany architectures, including (as of libffi 3.0.9) x86, ia64, SPARC,\nPowerPC, ARM, and MIPS, to name a few.\n\n@c Local Variables:\n@c TeX-master: \"guile.texi\"\n@c End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/doc/ref/guile.info-4": "This is guile.info, produced by makeinfo version 6.5 from guile.texi.\n\nThis manual documents Guile version 2.2.6.\n\n   Copyright (C) 1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005, 2009,\n2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019 Free Software\nFoundation, Inc.\n\n   Permission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3 or\nany later version published by the Free Software Foundation; with no\nInvariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A\ncopy of the license is included in the section entitled \u201cGNU Free\nDocumentation License.\u201d\nINFO-DIR-SECTION The Algorithmic Language Scheme\nSTART-INFO-DIR-ENTRY\n* Guile Reference: (guile).     The Guile reference manual.\nEND-INFO-DIR-ENTRY\n\n\u001f\nFile: guile.info,  Node: Buffering,  Next: Random Access,  Prev: Simple Output,  Up: Input and Output\n\n6.14.6 Buffering\n----------------\n\nEvery port has associated input and output buffers.  You can think of\nports as being backed by some mutable store, and that store might be far\naway.  For example, ports backed by file descriptors have to go all the\nway to the kernel to read and write their data.  To avoid this\nround-trip cost, Guile usually reads in data from the mutable store in\nchunks, and then services small requests like \u2018get-char\u2019 out of that\nintermediate buffer.  Similarly, small writes like \u2018write-char\u2019 first go\nto a buffer, and are sent to the store when the buffer is full (or when\nport is flushed).  Buffered ports speed up your program by reducing the\nnumber of round-trips to the mutable store, and they do so in a way that\nis mostly transparent to the user.\n\n   There are two major ways, however, in which buffering affects program\nsemantics.  Building correct, performant programs requires understanding\nthese situations.\n\n   The first case is in random-access read/write ports (*note Random\nAccess::).  These ports, usually backed by a file, logically operate\nover the same mutable store when both reading and writing.  So, if you\nread a character, causing the buffer to fill, then write a character,\nthe bytes you filled in your read buffer are now invalid.  Every time\nyou switch between reading and writing, Guile has to flush any pending\nbuffer.  If this happens frequently, the cost can be high.  In that case\nyou should reduce the amount that you buffer, in both directions.\nSimilarly, Guile has to flush buffers before seeking.  None of these\nconsiderations apply to sockets, which don\u2019t logically read from and\nwrite to the same mutable store, and are not seekable.  Note also that\nsockets are unbuffered by default.  *Note Network Sockets and\nCommunication::.\n\n   The second case is the more pernicious one.  If you write data to a\nbuffered port, it probably doesn\u2019t go out to the mutable store directly.\n(This \u201cprobably\u201d introduces some indeterminism in your program: what\ngoes to the store, and when, depends on how full the buffer is.  It is\nsomething that the user needs to explicitly be aware of.)  The data is\nwritten to the store later \u2013 when the buffer fills up due to another\nwrite, or when \u2018force-output\u2019 is called, or when \u2018close-port\u2019 is called,\nor when the program exits, or even when the garbage collector runs.  The\nsalient point is, _the errors are signalled then too_.  Buffered writes\ndefer error detection (and defer the side effects to the mutable store),\nperhaps indefinitely if the port type does not need to be closed at GC.\n\n   One common heuristic that works well for textual ports is to flush\noutput when a newline (\u2018\\n\u2019) is written.  This \u201cline buffering\u201d mode is\non by default for TTY ports.  Most other ports are \u201cblock buffered\u201d,\nmeaning that once the output buffer reaches the block size, which\ndepends on the port and its configuration, the output is flushed as a\nblock, without regard to what is in the block.  Likewise reads are read\nin at the block size, though if there are fewer bytes available to read,\nthe buffer may not be entirely filled.\n\n   Note that binary reads or writes that are larger than the buffer size\ngo directly to the mutable store without passing through the buffers.\nIf your access pattern involves many big reads or writes, buffering\nmight not matter so much to you.\n\n   To control the buffering behavior of a port, use \u2018setvbuf\u2019.\n\n -- Scheme Procedure: setvbuf port mode [size]\n -- C Function: scm_setvbuf (port, mode, size)\n     Set the buffering mode for PORT.  MODE can be one of the following\n     symbols:\n\n     \u2018none\u2019\n          non-buffered\n     \u2018line\u2019\n          line buffered\n     \u2018block\u2019\n          block buffered, using a newly allocated buffer of SIZE bytes.\n          If SIZE is omitted, a default size will be used.\n\n   Another way to set the buffering, for file ports, is to open the file\nwith \u20180\u2019 or \u2018l\u2019 as part of the mode string, for unbuffered or\nline-buffered ports, respectively.  *Note File Ports::, for more.\n\n   Any buffered output data will be written out when the port is closed.\nTo make sure to flush it at specific points in your program, use\n\u2018force-otput\u2019.\n\n -- Scheme Procedure: force-output [port]\n -- C Function: scm_force_output (port)\n     Flush the specified output port, or the current output port if PORT\n     is omitted.  The current output buffer contents, if any, are passed\n     to the underlying port implementation.\n\n     The return value is unspecified.\n\n -- Scheme Procedure: flush-all-ports\n -- C Function: scm_flush_all_ports ()\n     Equivalent to calling \u2018force-output\u2019 on all open output ports.  The\n     return value is unspecified.\n\n   Similarly, sometimes you might want to switch from using Guile\u2019s\nports to working directly on file descriptors.  In that case, for input\nports use \u2018drain-input\u2019 to get any buffered input from that port.\n\n -- Scheme Procedure: drain-input port\n -- C Function: scm_drain_input (port)\n     This procedure clears a port\u2019s input buffers, similar to the way\n     that force-output clears the output buffer.  The contents of the\n     buffers are returned as a single string, e.g.,\n\n          (define p (open-input-file ...))\n          (drain-input p) => empty string, nothing buffered yet.\n          (unread-char (read-char p) p)\n          (drain-input p) => initial chars from p, up to the buffer size.\n\n   All of these considerations are very similar to those of streams in\nthe C library, although Guile\u2019s ports are not built on top of C streams.\nStill, it is useful to read what other systems do.  *Note\n(libc)Streams::, for more discussion on C streams.\n\n\u001f\nFile: guile.info,  Node: Random Access,  Next: Line/Delimited,  Prev: Buffering,  Up: Input and Output\n\n6.14.7 Random Access\n--------------------\n\n -- Scheme Procedure: seek fd_port offset whence\n -- C Function: scm_seek (fd_port, offset, whence)\n     Sets the current position of FD_PORT to the integer OFFSET.  For a\n     file port, OFFSET is expressed as a number of bytes; for other\n     types of ports, such as string ports, OFFSET is an abstract\n     representation of the position within the port\u2019s data, not\n     necessarily expressed as a number of bytes.  OFFSET is interpreted\n     according to the value of WHENCE.\n\n     One of the following variables should be supplied for WHENCE:\n      -- Variable: SEEK_SET\n          Seek from the beginning of the file.\n      -- Variable: SEEK_CUR\n          Seek from the current position.\n      -- Variable: SEEK_END\n          Seek from the end of the file.\n     If FD_PORT is a file descriptor, the underlying system call is\n     \u2018lseek\u2019.  PORT may be a string port.\n\n     The value returned is the new position in FD_PORT.  This means that\n     the current position of a port can be obtained using:\n          (seek port 0 SEEK_CUR)\n\n -- Scheme Procedure: ftell fd_port\n -- C Function: scm_ftell (fd_port)\n     Return an integer representing the current position of FD_PORT,\n     measured from the beginning.  Equivalent to:\n\n          (seek port 0 SEEK_CUR)\n\n -- Scheme Procedure: truncate-file file [length]\n -- C Function: scm_truncate_file (file, length)\n     Truncate FILE to LENGTH bytes.  FILE can be a filename string, a\n     port object, or an integer file descriptor.  The return value is\n     unspecified.\n\n     For a port or file descriptor LENGTH can be omitted, in which case\n     the file is truncated at the current position (per \u2018ftell\u2019 above).\n\n     On most systems a file can be extended by giving a length greater\n     than the current size, but this is not mandatory in the POSIX\n     standard.\n\n\u001f\nFile: guile.info,  Node: Line/Delimited,  Next: Default Ports,  Prev: Random Access,  Up: Input and Output\n\n6.14.8 Line Oriented and Delimited Text\n---------------------------------------\n\nThe delimited-I/O module can be accessed with:\n\n     (use-modules (ice-9 rdelim))\n\n   It can be used to read or write lines of text, or read text delimited\nby a specified set of characters.\n\n -- Scheme Procedure: read-line [port] [handle-delim]\n     Return a line of text from PORT if specified, otherwise from the\n     value returned by \u2018(current-input-port)\u2019.  Under Unix, a line of\n     text is terminated by the first end-of-line character or by\n     end-of-file.\n\n     If HANDLE-DELIM is specified, it should be one of the following\n     symbols:\n     \u2018trim\u2019\n          Discard the terminating delimiter.  This is the default, but\n          it will be impossible to tell whether the read terminated with\n          a delimiter or end-of-file.\n     \u2018concat\u2019\n          Append the terminating delimiter (if any) to the returned\n          string.\n     \u2018peek\u2019\n          Push the terminating delimiter (if any) back on to the port.\n     \u2018split\u2019\n          Return a pair containing the string read from the port and the\n          terminating delimiter or end-of-file object.\n\n -- Scheme Procedure: read-line! buf [port]\n     Read a line of text into the supplied string BUF and return the\n     number of characters added to BUF.  If BUF is filled, then \u2018#f\u2019 is\n     returned.  Read from PORT if specified, otherwise from the value\n     returned by \u2018(current-input-port)\u2019.\n\n -- Scheme Procedure: read-delimited delims [port] [handle-delim]\n     Read text until one of the characters in the string DELIMS is found\n     or end-of-file is reached.  Read from PORT if supplied, otherwise\n     from the value returned by \u2018(current-input-port)\u2019.  HANDLE-DELIM\n     takes the same values as described for \u2018read-line\u2019.\n\n -- Scheme Procedure: read-delimited! delims buf [port] [handle-delim]\n          [start] [end]\n     Read text into the supplied string BUF.\n\n     If a delimiter was found, return the number of characters written,\n     except if HANDLE-DELIM is \u2018split\u2019, in which case the return value\n     is a pair, as noted above.\n\n     As a special case, if PORT was already at end-of-stream, the EOF\n     object is returned.  Also, if no characters were written because\n     the buffer was full, \u2018#f\u2019 is returned.\n\n     It\u2019s something of a wacky interface, to be honest.\n\n -- Scheme Procedure: %read-delimited! delims str gobble [port [start\n          [end]]]\n -- C Function: scm_read_delimited_x (delims, str, gobble, port, start,\n          end)\n     Read characters from PORT into STR until one of the characters in\n     the DELIMS string is encountered.  If GOBBLE is true, discard the\n     delimiter character; otherwise, leave it in the input stream for\n     the next read.  If PORT is not specified, use the value of\n     \u2018(current-input-port)\u2019.  If START or END are specified, store data\n     only into the substring of STR bounded by START and END (which\n     default to the beginning and end of the string, respectively).\n\n     Return a pair consisting of the delimiter that terminated the\n     string and the number of characters read.  If reading stopped at\n     the end of file, the delimiter returned is the EOF-OBJECT; if the\n     string was filled without encountering a delimiter, this value is\n     \u2018#f\u2019.\n\n -- Scheme Procedure: %read-line [port]\n -- C Function: scm_read_line (port)\n     Read a newline-terminated line from PORT, allocating storage as\n     necessary.  The newline terminator (if any) is removed from the\n     string, and a pair consisting of the line and its delimiter is\n     returned.  The delimiter may be either a newline or the EOF-OBJECT;\n     if \u2018%read-line\u2019 is called at the end of file, it returns the pair\n     \u2018(#<eof> . #<eof>)\u2019.\n\n\u001f\nFile: guile.info,  Node: Default Ports,  Next: Port Types,  Prev: Line/Delimited,  Up: Input and Output\n\n6.14.9 Default Ports for Input, Output and Errors\n-------------------------------------------------\n\n -- Scheme Procedure: current-input-port\n -- C Function: scm_current_input_port ()\n     Return the current input port.  This is the default port used by\n     many input procedures.\n\n     Initially this is the \u201cstandard input\u201d in Unix and C terminology.\n     When the standard input is a tty the port is unbuffered, otherwise\n     it\u2019s fully buffered.\n\n     Unbuffered input is good if an application runs an interactive\n     subprocess, since any type-ahead input won\u2019t go into Guile\u2019s buffer\n     and be unavailable to the subprocess.\n\n     Note that Guile buffering is completely separate from the tty \u201cline\n     discipline\u201d.  In the usual cooked mode on a tty Guile only sees a\n     line of input once the user presses <Return>.\n\n -- Scheme Procedure: current-output-port\n -- C Function: scm_current_output_port ()\n     Return the current output port.  This is the default port used by\n     many output procedures.\n\n     Initially this is the \u201cstandard output\u201d in Unix and C terminology.\n     When the standard output is a tty this port is unbuffered,\n     otherwise it\u2019s fully buffered.\n\n     Unbuffered output to a tty is good for ensuring progress output or\n     a prompt is seen.  But an application which always prints whole\n     lines could change to line buffered, or an application with a lot\n     of output could go fully buffered and perhaps make explicit\n     \u2018force-output\u2019 calls (*note Buffering::) at selected points.\n\n -- Scheme Procedure: current-error-port\n -- C Function: scm_current_error_port ()\n     Return the port to which errors and warnings should be sent.\n\n     Initially this is the \u201cstandard error\u201d in Unix and C terminology.\n     When the standard error is a tty this port is unbuffered, otherwise\n     it\u2019s fully buffered.\n\n -- Scheme Procedure: set-current-input-port port\n -- Scheme Procedure: set-current-output-port port\n -- Scheme Procedure: set-current-error-port port\n -- C Function: scm_set_current_input_port (port)\n -- C Function: scm_set_current_output_port (port)\n -- C Function: scm_set_current_error_port (port)\n     Change the ports returned by \u2018current-input-port\u2019,\n     \u2018current-output-port\u2019 and \u2018current-error-port\u2019, respectively, so\n     that they use the supplied PORT for input or output.\n\n -- Scheme Procedure: with-input-from-port port thunk\n -- Scheme Procedure: with-output-to-port port thunk\n -- Scheme Procedure: with-error-to-port port thunk\n     Call THUNK in a dynamic environment in which \u2018current-input-port\u2019,\n     \u2018current-output-port\u2019 or \u2018current-error-port\u2019 is rebound to the\n     given PORT.\n\n -- C Function: void scm_dynwind_current_input_port (SCM port)\n -- C Function: void scm_dynwind_current_output_port (SCM port)\n -- C Function: void scm_dynwind_current_error_port (SCM port)\n     These functions must be used inside a pair of calls to\n     \u2018scm_dynwind_begin\u2019 and \u2018scm_dynwind_end\u2019 (*note Dynamic Wind::).\n     During the dynwind context, the indicated port is set to PORT.\n\n     More precisely, the current port is swapped with a \u2018backup\u2019 value\n     whenever the dynwind context is entered or left.  The backup value\n     is initialized with the PORT argument.\n\n\u001f\nFile: guile.info,  Node: Port Types,  Next: Venerable Port Interfaces,  Prev: Default Ports,  Up: Input and Output\n\n6.14.10 Types of Port\n---------------------\n\n* Menu:\n\n* File Ports:: Ports on an operating system file.\n* Bytevector Ports:: Ports on a bytevector.\n* String Ports:: Ports on a Scheme string.\n* Custom Ports:: Ports whose implementation you control.\n* Soft Ports:: An older version of custom ports.\n* Void Ports:: Ports on nothing at all.\n\n\u001f\nFile: guile.info,  Node: File Ports,  Next: Bytevector Ports,  Up: Port Types\n\n6.14.10.1 File Ports\n....................\n\nThe following procedures are used to open file ports.  See also *note\nopen: Ports and File Descriptors, for an interface to the Unix \u2018open\u2019\nsystem call.\n\n   All file access uses the \u201cLFS\u201d large file support functions when\navailable, so files bigger than 2 Gbytes (2^31 bytes) can be read and\nwritten on a 32-bit system.\n\n   Most systems have limits on how many files can be open, so it\u2019s\nstrongly recommended that file ports be closed explicitly when no longer\nrequired (*note Ports::).\n\n -- Scheme Procedure: open-file filename mode [#:guess-encoding=#f]\n          [#:encoding=#f]\n -- C Function: scm_open_file_with_encoding (filename, mode,\n          guess_encoding, encoding)\n -- C Function: scm_open_file (filename, mode)\n     Open the file whose name is FILENAME, and return a port\n     representing that file.  The attributes of the port are determined\n     by the MODE string.  The way in which this is interpreted is\n     similar to C stdio.  The first character must be one of the\n     following:\n\n     \u2018r\u2019\n          Open an existing file for input.\n     \u2018w\u2019\n          Open a file for output, creating it if it doesn\u2019t already\n          exist or removing its contents if it does.\n     \u2018a\u2019\n          Open a file for output, creating it if it doesn\u2019t already\n          exist.  All writes to the port will go to the end of the file.\n          The \"append mode\" can be turned off while the port is in use\n          *note fcntl: Ports and File Descriptors.\n\n     The following additional characters can be appended:\n\n     \u2018+\u2019\n          Open the port for both input and output.  E.g., \u2018r+\u2019: open an\n          existing file for both input and output.\n     \u20180\u2019\n          Create an \"unbuffered\" port.  In this case input and output\n          operations are passed directly to the underlying port\n          implementation without additional buffering.  This is likely\n          to slow down I/O operations.  The buffering mode can be\n          changed while a port is in use (*note Buffering::).\n     \u2018l\u2019\n          Add line-buffering to the port.  The port output buffer will\n          be automatically flushed whenever a newline character is\n          written.\n     \u2018b\u2019\n          Use binary mode, ensuring that each byte in the file will be\n          read as one Scheme character.\n\n          To provide this property, the file will be opened with the\n          8-bit character encoding \"ISO-8859-1\", ignoring the default\n          port encoding.  *Note Ports::, for more information on port\n          encodings.\n\n          Note that while it is possible to read and write binary data\n          as characters or strings, it is usually better to treat bytes\n          as octets, and byte sequences as bytevectors.  *Note Binary\n          I/O::, for more.\n\n          This option had another historical meaning, for DOS\n          compatibility: in the default (textual) mode, DOS reads a\n          CR-LF sequence as one LF byte.  The \u2018b\u2019 flag prevents this\n          from happening, adding \u2018O_BINARY\u2019 to the underlying \u2018open\u2019\n          call.  Still, the flag is generally useful because of its port\n          encoding ramifications.\n\n     Unless binary mode is requested, the character encoding of the new\n     port is determined as follows: First, if GUESS-ENCODING is true,\n     the \u2018file-encoding\u2019 procedure is used to guess the encoding of the\n     file (*note Character Encoding of Source Files::).  If\n     GUESS-ENCODING is false or if \u2018file-encoding\u2019 fails, ENCODING is\n     used unless it is also false.  As a last resort, the default port\n     encoding is used.  *Note Ports::, for more information on port\n     encodings.  It is an error to pass a non-false GUESS-ENCODING or\n     ENCODING if binary mode is requested.\n\n     If a file cannot be opened with the access requested, \u2018open-file\u2019\n     throws an exception.\n\n -- Scheme Procedure: open-input-file filename [#:guess-encoding=#f]\n          [#:encoding=#f] [#:binary=#f]\n\n     Open FILENAME for input.  If BINARY is true, open the port in\n     binary mode, otherwise use text mode.  ENCODING and GUESS-ENCODING\n     determine the character encoding as described above for\n     \u2018open-file\u2019.  Equivalent to\n          (open-file FILENAME\n                     (if BINARY \"rb\" \"r\")\n                     #:guess-encoding GUESS-ENCODING\n                     #:encoding ENCODING)\n\n -- Scheme Procedure: open-output-file filename [#:encoding=#f]\n          [#:binary=#f]\n\n     Open FILENAME for output.  If BINARY is true, open the port in\n     binary mode, otherwise use text mode.  ENCODING specifies the\n     character encoding as described above for \u2018open-file\u2019.  Equivalent\n     to\n          (open-file FILENAME\n                     (if BINARY \"wb\" \"w\")\n                     #:encoding ENCODING)\n\n -- Scheme Procedure: call-with-input-file filename proc\n          [#:guess-encoding=#f] [#:encoding=#f] [#:binary=#f]\n -- Scheme Procedure: call-with-output-file filename proc\n          [#:encoding=#f] [#:binary=#f]\n     Open FILENAME for input or output, and call \u2018(PROC port)\u2019 with the\n     resulting port.  Return the value returned by PROC.  FILENAME is\n     opened as per \u2018open-input-file\u2019 or \u2018open-output-file\u2019 respectively,\n     and an error is signaled if it cannot be opened.\n\n     When PROC returns, the port is closed.  If PROC does not return\n     (e.g. if it throws an error), then the port might not be closed\n     automatically, though it will be garbage collected in the usual way\n     if not otherwise referenced.\n\n -- Scheme Procedure: with-input-from-file filename thunk\n          [#:guess-encoding=#f] [#:encoding=#f] [#:binary=#f]\n -- Scheme Procedure: with-output-to-file filename thunk [#:encoding=#f]\n          [#:binary=#f]\n -- Scheme Procedure: with-error-to-file filename thunk [#:encoding=#f]\n          [#:binary=#f]\n     Open FILENAME and call \u2018(THUNK)\u2019 with the new port setup as\n     respectively the \u2018current-input-port\u2019, \u2018current-output-port\u2019, or\n     \u2018current-error-port\u2019.  Return the value returned by THUNK.\n     FILENAME is opened as per \u2018open-input-file\u2019 or \u2018open-output-file\u2019\n     respectively, and an error is signaled if it cannot be opened.\n\n     When THUNK returns, the port is closed and the previous setting of\n     the respective current port is restored.\n\n     The current port setting is managed with \u2018dynamic-wind\u2019, so the\n     previous value is restored no matter how THUNK exits (eg. an\n     exception), and if THUNK is re-entered (via a captured\n     continuation) then it\u2019s set again to the FILENAME port.\n\n     The port is closed when THUNK returns normally, but not when exited\n     via an exception or new continuation.  This ensures it\u2019s still\n     ready for use if THUNK is re-entered by a captured continuation.\n     Of course the port is always garbage collected and closed in the\n     usual way when no longer referenced anywhere.\n\n -- Scheme Procedure: port-mode port\n -- C Function: scm_port_mode (port)\n     Return the port modes associated with the open port PORT.  These\n     will not necessarily be identical to the modes used when the port\n     was opened, since modes such as \"append\" which are used only during\n     port creation are not retained.\n\n -- Scheme Procedure: port-filename port\n -- C Function: scm_port_filename (port)\n     Return the filename associated with PORT, or \u2018#f\u2019 if no filename is\n     associated with the port.\n\n     PORT must be open; \u2018port-filename\u2019 cannot be used once the port is\n     closed.\n\n -- Scheme Procedure: set-port-filename! port filename\n -- C Function: scm_set_port_filename_x (port, filename)\n     Change the filename associated with PORT, using the current input\n     port if none is specified.  Note that this does not change the\n     port\u2019s source of data, but only the value that is returned by\n     \u2018port-filename\u2019 and reported in diagnostic output.\n\n -- Scheme Procedure: file-port? obj\n -- C Function: scm_file_port_p (obj)\n     Determine whether OBJ is a port that is related to a file.\n\n\u001f\nFile: guile.info,  Node: Bytevector Ports,  Next: String Ports,  Prev: File Ports,  Up: Port Types\n\n6.14.10.2 Bytevector Ports\n..........................\n\n -- Scheme Procedure: open-bytevector-input-port bv [transcoder]\n -- C Function: scm_open_bytevector_input_port (bv, transcoder)\n     Return an input port whose contents are drawn from bytevector BV\n     (*note Bytevectors::).\n\n     The TRANSCODER argument is currently not supported.\n\n -- Scheme Procedure: open-bytevector-output-port [transcoder]\n -- C Function: scm_open_bytevector_output_port (transcoder)\n     Return two values: a binary output port and a procedure.  The\n     latter should be called with zero arguments to obtain a bytevector\n     containing the data accumulated by the port, as illustrated below.\n\n          (call-with-values\n            (lambda ()\n              (open-bytevector-output-port))\n            (lambda (port get-bytevector)\n              (display \"hello\" port)\n              (get-bytevector)))\n\n          \u21d2 #vu8(104 101 108 108 111)\n\n     The TRANSCODER argument is currently not supported.\n\n\u001f\nFile: guile.info,  Node: String Ports,  Next: Custom Ports,  Prev: Bytevector Ports,  Up: Port Types\n\n6.14.10.3 String Ports\n......................\n\n -- Scheme Procedure: call-with-output-string proc\n -- C Function: scm_call_with_output_string (proc)\n     Calls the one-argument procedure PROC with a newly created output\n     port.  When the function returns, the string composed of the\n     characters written into the port is returned.  PROC should not\n     close the port.\n\n -- Scheme Procedure: call-with-input-string string proc\n -- C Function: scm_call_with_input_string (string, proc)\n     Calls the one-argument procedure PROC with a newly created input\n     port from which STRING\u2019s contents may be read.  The value yielded\n     by the PROC is returned.\n\n -- Scheme Procedure: with-output-to-string thunk\n     Calls the zero-argument procedure THUNK with the current output\n     port set temporarily to a new string port.  It returns a string\n     composed of the characters written to the current output.\n\n -- Scheme Procedure: with-input-from-string string thunk\n     Calls the zero-argument procedure THUNK with the current input port\n     set temporarily to a string port opened on the specified STRING.\n     The value yielded by THUNK is returned.\n\n -- Scheme Procedure: open-input-string str\n -- C Function: scm_open_input_string (str)\n     Take a string and return an input port that delivers characters\n     from the string.  The port can be closed by \u2018close-input-port\u2019,\n     though its storage will be reclaimed by the garbage collector if it\n     becomes inaccessible.\n\n -- Scheme Procedure: open-output-string\n -- C Function: scm_open_output_string ()\n     Return an output port that will accumulate characters for retrieval\n     by \u2018get-output-string\u2019.  The port can be closed by the procedure\n     \u2018close-output-port\u2019, though its storage will be reclaimed by the\n     garbage collector if it becomes inaccessible.\n\n -- Scheme Procedure: get-output-string port\n -- C Function: scm_get_output_string (port)\n     Given an output port created by \u2018open-output-string\u2019, return a\n     string consisting of the characters that have been output to the\n     port so far.\n\n     \u2018get-output-string\u2019 must be used before closing PORT, once closed\n     the string cannot be obtained.\n\n   With string ports, the port-encoding is treated differently than\nother types of ports.  When string ports are created, they do not\ninherit a character encoding from the current locale.  They are given a\ndefault locale that allows them to handle all valid string characters.\nTypically one should not modify a string port\u2019s character encoding away\nfrom its default.  *Note Encoding::.\n\n\u001f\nFile: guile.info,  Node: Custom Ports,  Next: Soft Ports,  Prev: String Ports,  Up: Port Types\n\n6.14.10.4 Custom Ports\n......................\n\nCustom ports allow the user to provide input and handle output via\nuser-supplied procedures.  Guile currently only provides custom binary\nports, not textual ports; for custom textual ports, *Note Soft Ports::.\nWe should add the R6RS custom textual port interfaces though.\nContributions are appreciated.\n\n -- Scheme Procedure: make-custom-binary-input-port id read!\n          get-position set-position! close\n     Return a new custom binary input port(1) named ID (a string) whose\n     input is drained by invoking READ! and passing it a bytevector, an\n     index where bytes should be written, and the number of bytes to\n     read.  The \u2018read!\u2019 procedure must return an integer indicating the\n     number of bytes read, or \u20180\u2019 to indicate the end-of-file.\n\n     Optionally, if GET-POSITION is not \u2018#f\u2019, it must be a thunk that\n     will be called when \u2018port-position\u2019 is invoked on the custom binary\n     port and should return an integer indicating the position within\n     the underlying data stream; if GET-POSITION was not supplied, the\n     returned port does not support \u2018port-position\u2019.\n\n     Likewise, if SET-POSITION! is not \u2018#f\u2019, it should be a one-argument\n     procedure.  When \u2018set-port-position!\u2019 is invoked on the custom\n     binary input port, SET-POSITION! is passed an integer indicating\n     the position of the next byte is to read.\n\n     Finally, if CLOSE is not \u2018#f\u2019, it must be a thunk.  It is invoked\n     when the custom binary input port is closed.\n\n     The returned port is fully buffered by default, but its buffering\n     mode can be changed using \u2018setvbuf\u2019 (*note Buffering::).\n\n     Using a custom binary input port, the \u2018open-bytevector-input-port\u2019\n     procedure (*note Bytevector Ports::) could be implemented as\n     follows:\n\n          (define (open-bytevector-input-port source)\n            (define position 0)\n            (define length (bytevector-length source))\n\n            (define (read! bv start count)\n              (let ((count (min count (- length position))))\n                (bytevector-copy! source position\n                                  bv start count)\n                (set! position (+ position count))\n                count))\n\n            (define (get-position) position)\n\n            (define (set-position! new-position)\n              (set! position new-position))\n\n            (make-custom-binary-input-port \"the port\" read!\n                                            get-position set-position!\n                                            #f))\n\n          (read (open-bytevector-input-port (string->utf8 \"hello\")))\n          \u21d2 hello\n\n -- Scheme Procedure: make-custom-binary-output-port id write!\n          get-position set-position! close\n     Return a new custom binary output port named ID (a string) whose\n     output is sunk by invoking WRITE! and passing it a bytevector, an\n     index where bytes should be read from this bytevector, and the\n     number of bytes to be \u201cwritten\u201d.  The \u2018write!\u2019 procedure must\n     return an integer indicating the number of bytes actually written;\n     when it is passed \u20180\u2019 as the number of bytes to write, it should\n     behave as though an end-of-file was sent to the byte sink.\n\n     The other arguments are as for \u2018make-custom-binary-input-port\u2019.\n\n -- Scheme Procedure: make-custom-binary-input/output-port id read!\n          write! get-position set-position! close\n     Return a new custom binary input/output port named ID (a string).\n     The various arguments are the same as for The other arguments are\n     as for \u2018make-custom-binary-input-port\u2019 and\n     \u2018make-custom-binary-output-port\u2019.  If buffering is enabled on the\n     port, as is the case by default, input will be buffered in both\n     directions; *Note Buffering::.  If the SET-POSITION! function is\n     provided and not \u2018#f\u2019, then the port will also be marked as\n     random-access, causing the buffer to be flushed between reads and\n     writes.\n\n   ---------- Footnotes ----------\n\n   (1) This is similar in spirit to Guile\u2019s \u201csoft ports\u201d (*note Soft\nPorts::).\n\n\u001f\nFile: guile.info,  Node: Soft Ports,  Next: Void Ports,  Prev: Custom Ports,  Up: Port Types\n\n6.14.10.5 Soft Ports\n....................\n\nA \u201csoft port\u201d is a port based on a vector of procedures capable of\naccepting or delivering characters.  It allows emulation of I/O ports.\n\n -- Scheme Procedure: make-soft-port pv modes\n     Return a port capable of receiving or delivering characters as\n     specified by the MODES string (*note open-file: File Ports.).  PV\n     must be a vector of length 5 or 6.  Its components are as follows:\n\n       0. procedure accepting one character for output\n       1. procedure accepting a string for output\n       2. thunk for flushing output\n       3. thunk for getting one character\n       4. thunk for closing port (not by garbage collection)\n       5. (if present and not \u2018#f\u2019) thunk for computing the number of\n          characters that can be read from the port without blocking.\n\n     For an output-only port only elements 0, 1, 2, and 4 need be\n     procedures.  For an input-only port only elements 3 and 4 need be\n     procedures.  Thunks 2 and 4 can instead be \u2018#f\u2019 if there is no\n     useful operation for them to perform.\n\n     If thunk 3 returns \u2018#f\u2019 or an \u2018eof-object\u2019 (*note eof-object?:\n     (r5rs)Input.) it indicates that the port has reached end-of-file.\n     For example:\n\n          (define stdout (current-output-port))\n          (define p (make-soft-port\n                     (vector\n                      (lambda (c) (write c stdout))\n                      (lambda (s) (display s stdout))\n                      (lambda () (display \".\" stdout))\n                      (lambda () (char-upcase (read-char)))\n                      (lambda () (display \"@\" stdout)))\n                     \"rw\"))\n\n          (write p p) \u21d2 #<input-output: soft 8081e20>\n\n\u001f\nFile: guile.info,  Node: Void Ports,  Prev: Soft Ports,  Up: Port Types\n\n6.14.10.6 Void Ports\n....................\n\nThis kind of port causes any data to be discarded when written to, and\nalways returns the end-of-file object when read from.\n\n -- Scheme Procedure: %make-void-port mode\n -- C Function: scm_sys_make_void_port (mode)\n     Create and return a new void port.  A void port acts like\n     \u2018/dev/null\u2019.  The MODE argument specifies the input/output modes\n     for this port: see the documentation for \u2018open-file\u2019 in *note File\n     Ports::.\n\n\u001f\nFile: guile.info,  Node: Venerable Port Interfaces,  Next: Using Ports from C,  Prev: Port Types,  Up: Input and Output\n\n6.14.11 Venerable Port Interfaces\n---------------------------------\n\nOver the 25 years or so that Guile has been around, its port system has\nevolved, adding many useful features.  At the same time there have been\nfour major Scheme standards released in those 25 years, which also\nevolve the common Scheme understanding of what a port interface should\nbe.  Alas, it would be too much to ask for all of these evolutionary\nbranches to be consistent.  Some of Guile\u2019s original interfaces don\u2019t\nmesh with the later Scheme standards, and yet Guile can\u2019t just drop old\ninterfaces.  Sadly as well, the R6RS and R7RS standards both part from a\nbase of R5RS, but end up in different and somewhat incompatible designs.\n\n   Guile\u2019s approach is to pick a set of port primitives that make sense\ntogether.  We document that set of primitives, design our internal\ninterfaces around them, and recommend them to users.  As the R6RS I/O\nsystem is the most capable standard that Scheme has yet produced in this\ndomain, we mostly recommend that; \u2018(ice-9 binary-ports)\u2019 and \u2018(ice-9\ntextual-ports)\u2019 are wholly modelled on \u2018(rnrs io ports)\u2019.  Guile does\nnot wholly copy R6RS, however; *Note R6RS Incompatibilities::.\n\n   At the same time, we have many venerable port interfaces, lore handed\ndown to us from our hacker ancestors.  Most of these interfaces even\npredate the expectation that Scheme should have modules, so they are\npresent in the default environment.  In Guile we support them as well\nand we have no plans to remove them, but again we don\u2019t recommend them\nfor new users.\n\n -- Scheme Procedure: char-ready? [port]\n     Return \u2018#t\u2019 if a character is ready on input PORT and return \u2018#f\u2019\n     otherwise.  If \u2018char-ready?\u2019 returns \u2018#t\u2019 then the next \u2018read-char\u2019\n     operation on PORT is guaranteed not to hang.  If PORT is a file\n     port at end of file then \u2018char-ready?\u2019 returns \u2018#t\u2019.\n\n     \u2018char-ready?\u2019 exists to make it possible for a program to accept\n     characters from interactive ports without getting stuck waiting for\n     input.  Any input editors associated with such ports must make sure\n     that characters whose existence has been asserted by \u2018char-ready?\u2019\n     cannot be rubbed out.  If \u2018char-ready?\u2019 were to return \u2018#f\u2019 at end\n     of file, a port at end of file would be indistinguishable from an\n     interactive port that has no ready characters.\n\n     Note that \u2018char-ready?\u2019 only works reliably for terminals and\n     sockets with one-byte encodings.  Under the hood it will return\n     \u2018#t\u2019 if the port has any input buffered, or if the file descriptor\n     that backs the port polls as readable, indicating that Guile can\n     fetch more bytes from the kernel.  However being able to fetch one\n     byte doesn\u2019t mean that a full character is available; *Note\n     Encoding::.  Also, on many systems it\u2019s possible for a file\n     descriptor to poll as readable, but then block when it comes time\n     to read bytes.  Note also that on Linux kernels, all file ports\n     backed by files always poll as readable.  For non-file ports, this\n     procedure always returns \u2018#t\u2019, except for soft ports, which have a\n     \u2018char-ready?\u2019 handler.  *Note Soft Ports::.\n\n     In short, this is a legacy procedure whose semantics are hard to\n     provide.  However it is a useful check to see if any input is\n     buffered.  *Note Non-Blocking I/O::.\n\n -- Scheme Procedure: read-char [port]\n     The same as \u2018get-char\u2019, except that PORT defaults to the current\n     input port.  *Note Textual I/O::.\n\n -- Scheme Procedure: peek-char [port]\n     The same as \u2018lookahead-char\u2019, except that PORT defaults to the\n     current input port.  *Note Textual I/O::.\n\n -- Scheme Procedure: unread-char cobj [port]\n     The same as \u2018unget-char\u2019, except that PORT defaults to the current\n     input port, and the arguments are swapped.  *Note Textual I/O::.\n\n -- Scheme Procedure: unread-string str port\n -- C Function: scm_unread_string (str, port)\n     The same as \u2018unget-string\u2019, except that PORT defaults to the\n     current input port, and the arguments are swapped.  *Note Textual\n     I/O::.\n\n -- Scheme Procedure: newline [port]\n     Send a newline to PORT.  If PORT is omitted, send to the current\n     output port.  Equivalent to \u2018(put-char port #\\newline)\u2019.\n\n -- Scheme Procedure: write-char chr [port]\n     The same as \u2018put-char\u2019, except that PORT defaults to the current\n     input port, and the arguments are swapped.  *Note Textual I/O::.\n\n\u001f\nFile: guile.info,  Node: Using Ports from C,  Next: I/O Extensions,  Prev: Venerable Port Interfaces,  Up: Input and Output\n\n6.14.12 Using Ports from C\n--------------------------\n\nGuile\u2019s C interfaces provides some niceties for sending and receiving\nbytes and characters in a way that works better with C.\n\n -- C Function: size_t scm_c_read (SCM port, void *buffer, size_t size)\n     Read up to SIZE bytes from PORT and store them in BUFFER.  The\n     return value is the number of bytes actually read, which can be\n     less than SIZE if end-of-file has been reached.\n\n     Note that as this is a binary input procedure, this function does\n     not update \u2018port-line\u2019 and \u2018port-column\u2019 (*note Textual I/O::).\n\n -- C Function: void scm_c_write (SCM port, const void *buffer, size_t\n          size)\n     Write SIZE bytes at BUFFER to PORT.\n\n     Note that as this is a binary output procedure, this function does\n     not update \u2018port-line\u2019 and \u2018port-column\u2019 (*note Textual I/O::).\n\n -- C Function: size_t scm_c_read_bytes (SCM port, SCM bv, size_t start,\n          size_t count)\n -- C Function: void scm_c_write_bytes (SCM port, SCM bv, size_t start,\n          size_t count)\n     Like \u2018scm_c_read\u2019 and \u2018scm_c_write\u2019, but reading into or writing\n     from the bytevector BV.  COUNT indicates the byte index at which to\n     start in the bytevector, and the read or write will continue for\n     COUNT bytes.\n\n -- C Function: void scm_unget_bytes (const unsigned char *buf, size_t\n          len, SCM port)\n -- C Function: void scm_unget_byte (int c, SCM port)\n -- C Function: void scm_ungetc (scm_t_wchar c, SCM port)\n     Like \u2018unget-bytevector\u2019, \u2018unget-byte\u2019, and \u2018unget-char\u2019,\n     respectively.  *Note Textual I/O::.\n\n -- C Function: void scm_c_put_latin1_chars (SCM port, const scm_t_uint8\n          *buf, size_t len)\n -- C Function: void scm_c_put_utf32_chars (SCM port, const scm_t_uint32\n          *buf, size_t len);\n     Write a string to PORT.  In the first case, the \u2018scm_t_uint8*\u2019\n     buffer is a string in the latin-1 encoding.  In the second, the\n     \u2018scm_t_uint32*\u2019 buffer is a string in the UTF-32 encoding.  These\n     routines will update the port\u2019s line and column.\n\n\u001f\nFile: guile.info,  Node: I/O Extensions,  Next: Non-Blocking I/O,  Prev: Using Ports from C,  Up: Input and Output\n\n6.14.13 Implementing New Port Types in C\n----------------------------------------\n\nThis section describes how to implement a new port type in C. Although\nports support many operations, as a data structure they present an\nopaque interface to the user.  To the port implementor, you have two\npieces of information to work with: the port type, and the port\u2019s\n\u201cstream\u201d.  The port type is an opaque pointer allocated when defining\nyour port type.  It is your key into the port API, and it helps you\nidentify which ports are actually yours.  The \u201cstream\u201d is a pointer you\ncontrol, and which you set when you create a port.  Get a stream from a\nport using the \u2018SCM_STREAM\u2019 macro.  Note that your port methods are only\never called with ports of your type.\n\n   A port type is created by calling \u2018scm_make_port_type\u2019.  Once you\nhave your port type, you can create ports with \u2018scm_c_make_port\u2019, or\n\u2018scm_c_make_port_with_encoding\u2019.\n\n -- Function: scm_t_port_type* scm_make_port_type (char *name, size_t\n          (*read) (SCM port, SCM dst, size_t start, size_t count),\n          size_t (*write) (SCM port, SCM src, size_t start, size_t\n          count))\n     Define a new port type.  The NAME, READ and WRITE parameters are\n     initial values for those port type fields, as described below.  The\n     other fields are initialized with default values and can be changed\n     later.\n\n -- Function: SCM scm_c_make_port_with_encoding (scm_t_port_type *type,\n          unsigned long mode_bits, SCM encoding, SCM\n          conversion_strategy, scm_t_bits stream)\n -- Function: SCM scm_c_make_port (scm_t_port_type *type, unsigned long\n          mode_bits, scm_t_bits stream)\n     Make a port with the given TYPE.  The STREAM indicates the private\n     data associated with the port, which your port implementation may\n     later retrieve with \u2018SCM_STREAM\u2019.  The mode bits should include one\n     or more of the flags \u2018SCM_RDNG\u2019 or \u2018SCM_WRTNG\u2019, indicating that the\n     port is an input and/or an output port, respectively.  The mode\n     bits may also include \u2018SCM_BUF0\u2019 or \u2018SCM_BUFLINE\u2019, indicating that\n     the port should be unbuffered or line-buffered, respectively.  The\n     default is that the port will be block-buffered.  *Note\n     Buffering::.\n\n     As you would imagine, ENCODING and CONVERSION_STRATEGY specify the\n     port\u2019s initial textual encoding and conversion strategy.  Both are\n     symbols.  \u2018scm_c_make_port\u2019 is the same as\n     \u2018scm_c_make_port_with_encoding\u2019, except it uses the default port\n     encoding and conversion strategy.\n\n   The port type has a number of associate procedures and properties\nwhich collectively implement the port\u2019s behavior.  Creating a new port\ntype mostly involves writing these procedures.\n\n\u2018name\u2019\n     A pointer to a NUL terminated string: the name of the port type.\n     This property is initialized via the first argument to\n     \u2018scm_make_port_type\u2019.\n\n\u2018read\u2019\n     A port\u2019s \u2018read\u2019 implementation fills read buffers.  It should copy\n     bytes to the supplied bytevector \u2018dst\u2019, starting at offset \u2018start\u2019\n     and continuing for \u2018count\u2019 bytes, returning the number of bytes\n     read.\n\n\u2018write\u2019\n     A port\u2019s \u2018write\u2019 implementation flushes write buffers to the\n     mutable store.  A port\u2019s \u2018read\u2019 implementation fills read buffers.\n     It should write out bytes from the supplied bytevector \u2018src\u2019,\n     starting at offset \u2018start\u2019 and continuing for \u2018count\u2019 bytes, and\n     return the number of bytes that were written.\n\n\u2018read_wait_fd\u2019\n\u2018write_wait_fd\u2019\n     If a port\u2019s \u2018read\u2019 or \u2018write\u2019 function returns \u2018(size_t) -1\u2019, that\n     indicates that reading or writing would block.  In that case to\n     preserve the illusion of a blocking read or write operation,\n     Guile\u2019s C port run-time will \u2018poll\u2019 on the file descriptor returned\n     by either the port\u2019s \u2018read_wait_fd\u2019 or \u2018write_wait_fd\u2019 function.\n     Set using\n\n      -- Function: void scm_set_port_read_wait_fd (scm_t_port_type\n               *type, int (*wait_fd) (SCM port))\n      -- Function: void scm_set_port_write_wait_fd (scm_t_port_type\n               *type, int (*wait_fd) (SCM port))\n\n     Only a port type which implements the \u2018read_wait_fd\u2019 or\n     \u2018write_wait_fd\u2019 port methods can usefully return \u2018(size_t) -1\u2019 from\n     a read or write function.  *Note Non-Blocking I/O::, for more on\n     non-blocking I/O in Guile.\n\n\u2018print\u2019\n     Called when \u2018write\u2019 is called on the port, to print a port\n     description.  For example, for a file port it may produce something\n     like: \u2018#<input: /etc/passwd 3>\u2019.  Set using\n\n      -- Function: void scm_set_port_print (scm_t_port_type *type, int\n               (*print) (SCM port, SCM dest_port, scm_print_state\n               *pstate))\n          The first argument PORT is the port being printed, the second\n          argument DEST_PORT is where its description should go.\n\n\u2018close\u2019\n     Called when the port is closed.  It should free any resources used\n     by the port.  Set using\n\n      -- Function: void scm_set_port_close (scm_t_port_type *type, void\n               (*close) (SCM port))\n\n     By default, ports that are garbage collected just go away without\n     closing.  If your port type needs to release some external resource\n     like a file descriptor, or needs to make sure that its internal\n     buffers are flushed even if the port is collected while it was\n     open, then mark the port type as needing a close on GC.\n\n      -- Function: void scm_set_port_needs_close_on_gc (scm_t_port_type\n               *type, int needs_close_p)\n\n\u2018seek\u2019\n     Set the current position of the port.  Guile will flush read and/or\n     write buffers before seeking, as appropriate.\n\n      -- Function: void scm_set_port_seek (scm_t_port_type *type,\n               scm_t_off (*seek) (SCM port, scm_t_off offset, int\n               whence))\n\n\u2018truncate\u2019\n     Truncate the port data to be specified length.  Guile will flush\n     buffers before hand, as appropriate.  Set using\n\n      -- Function: void scm_set_port_truncate (scm_t_port_type *type,\n               void (*truncate) (SCM port, scm_t_off length))\n\n\u2018random_access_p\u2019\n     Determine whether this port is a random-access port.\n\n     Seeking on a random-access port with buffered input, or switching\n     to writing after reading, will cause the buffered input to be\n     discarded and Guile will seek the port back the buffered number of\n     bytes.  Likewise seeking on a random-access port with buffered\n     output, or switching to reading after writing, will flush pending\n     bytes with a call to the \u2018write\u2019 procedure.  *Note Buffering::.\n\n     Indicate to Guile that your port needs this behavior by returning a\n     nonzero value from your \u2018random_access_p\u2019 function.  The default\n     implementation of this function returns nonzero if the port type\n     supplies a seek implementation.\n\n      -- Function: void scm_set_port_random_access_p (scm_t_port_type\n               *type, int (*random_access_p) (SCM port));\n\n\u2018get_natural_buffer_sizes\u2019\n     Guile will internally attach buffers to ports.  An input port\n     always has a read buffer and an output port always has a write\n     buffer.  *Note Buffering::.  A port buffer consists of a\n     bytevector, along with some cursors into that bytevector denoting\n     where to get and put data.\n\n     Port implementations generally don\u2019t have to be concerned with\n     buffering: a port type\u2019s \u2018read\u2019 or \u2018write\u2019 function will receive\n     the buffer\u2019s bytevector as an argument, along with an offset and a\n     length into that bytevector, and should then either fill or empty\n     that bytevector.  However in some cases, port implementations may\n     be able to provide an appropriate default buffer size to Guile.\n\n      -- Function: void scm_set_port_get_natural_buffer_sizes\n               (scm_t_port_type *type, void (*get_natural_buffer_sizes)\n               (SCM, size_t *read_buf_size, size_t *write_buf_size))\n          Fill in READ_BUF_SIZE and WRITE_BUF_SIZE with an appropriate\n          buffer size for this port, if one is known.\n\n     File ports implement a \u2018get_natural_buffer_sizes\u2019 to let the\n     operating system inform Guile about the appropriate buffer sizes\n     for the particular file opened by the port.\n\n   Note that calls to all of these methods can proceed in parallel and\nconcurrently and from any thread up until the point that the port is\nclosed.  The call to \u2018close\u2019 will happen when no other method is\nrunning, and no method will be called after the \u2018close\u2019 method is\ncalled.  If your port implementation needs mutual exclusion to prevent\nconcurrency, it is responsible for locking appropriately.\n\n\u001f\nFile: guile.info,  Node: Non-Blocking I/O,  Next: BOM Handling,  Prev: I/O Extensions,  Up: Input and Output\n\n6.14.14 Non-Blocking I/O\n------------------------\n\nMost ports in Guile are \u201cblocking\u201d: when you try to read a character\nfrom a port, Guile will block on the read until a character is ready, or\nend-of-stream is detected.  Likewise whenever Guile goes to write\n(possibly buffered) data to an output port, Guile will block until all\nthe data is written.\n\n   Interacting with ports in blocking mode is very convenient: you can\nwrite straightforward, sequential algorithms whose code flow reflects\nthe flow of data.  However, blocking I/O has two main limitations.\n\n   The first is that it\u2019s easy to get into a situation where code is\nwaiting on data.  Time spent waiting on data when code could be doing\nsomething else is wasteful and prevents your program from reaching its\npeak throughput.  If you implement a web server that sequentially\nhandles requests from clients, it\u2019s very easy for the server to end up\nwaiting on a client to finish its HTTP request, or waiting on it to\nconsume the response.  The end result is that you are able to serve\nfewer requests per second than you\u2019d like to serve.\n\n   The second limitation is related: a blocking parser over\nuser-controlled input is a denial-of-service vulnerability.  Indeed the\nso-called \u201cslow loris\u201d attack of the early 2010s was just that: an\nattack on common web servers that drip-fed HTTP requests, one character\nat a time.  All it took was a handful of slow loris connections to\noccupy an entire web server.\n\n   In Guile we would like to preserve the ability to write\nstraightforward blocking networking processes of all kinds, but under\nthe hood to allow those processes to suspend their requests if they\nwould block.\n\n   To do this, the first piece is to allow Guile ports to declare\nthemselves as being nonblocking.  This is currently supported only for\nfile ports, which also includes sockets, terminals, or any other port\nthat is backed by a file descriptor.  To do that, we use an arcane UNIX\nincantation:\n\n     (let ((flags (fcntl socket F_GETFL)))\n       (fcntl socket F_SETFL (logior O_NONBLOCK flags)))\n\n   Now the file descriptor is open in non-blocking mode.  If Guile tries\nto read or write from this file and the read or write returns a result\nindicating that more data can only be had by doing a blocking read or\nwrite, Guile will block by polling on the socket\u2019s \u2018read-wait-fd\u2019 or\n\u2018write-wait-fd\u2019, to preserve the illusion of a blocking read or write.\n*Note I/O Extensions:: for more on those internal interfaces.\n\n   So far we have just reproduced the status quo: the file descriptor is\nnon-blocking, but the operations on the port do block.  To go farther,\nit would be nice if we could suspend the \u201cthread\u201d using delimited\ncontinuations, and only resume the thread once the file descriptor is\nreadable or writable.  (*Note Prompts::).\n\n   But here we run into a difficulty.  The ports code is implemented in\nC, which means that although we can suspend the computation to some\nouter prompt, we can\u2019t resume it because Guile can\u2019t resume delimited\ncontinuations that capture the C stack.\n\n   To overcome this difficulty we have created a compatible but entirely\nparallel implementation of port operations.  To use this implementation,\ndo the following:\n\n     (use-modules (ice-9 suspendable-ports))\n     (install-suspendable-ports!)\n\n   This will replace the core I/O primitives like \u2018get-char\u2019 and\n\u2018put-bytevector\u2019 with new versions that are exactly the same as the ones\nin the standard library, but with two differences.  One is that when a\nread or a write would block, the suspendable port operations call out\nthe value of the \u2018current-read-waiter\u2019 or \u2018current-write-waiter\u2019\nparameter, as appropriate.  *Note Parameters::.  The default read and\nwrite waiters do the same thing that the C read and write waiters do,\nwhich is to poll.  User code can parameterize the waiters, though,\nenabling the computation to suspend and allow the program to process\nother I/O operations.  Because the new suspendable ports implementation\nis written in Scheme, that suspended computation can resume again later\nwhen it is able to make progress.  Success!\n\n   The other main difference is that because the new ports\nimplementation is written in Scheme, it is slower than C, currently by a\nfactor of 3 or 4, though it depends on many factors.  For this reason we\nhave to keep the C implementations as the default ones.  One day when\nGuile\u2019s compiler is better, we can close this gap and have only one port\noperation implementation again.\n\n   Note that Guile does not currently include an implementation of the\nfacility to suspend the current thread and schedule other threads in the\nmeantime.  Before adding such a thing, we want to make sure that we\u2019re\nproviding the right primitives that can be used to build schedulers and\nother user-space concurrency patterns, and that the patterns that we\nsettle on are the right patterns.  In the meantime, have a look at 8sync\n(<https://gnu.org/software/8sync>) for a prototype of an asynchronous\nI/O and concurrency facility.\n\n -- Scheme Procedure: install-suspendable-ports!\n     Replace the core ports implementation with suspendable ports, as\n     described above.  This will mutate the values of the bindings like\n     \u2018get-char\u2019, \u2018put-u8\u2019, and so on in place.\n\n -- Scheme Procedure: uninstall-suspendable-ports!\n     Restore the original core ports implementation, un-doing the effect\n     of \u2018install-suspendable-ports!\u2019.\n\n -- Scheme Parameter: current-read-waiter\n -- Scheme Parameter: current-write-waiter\n     Parameters whose values are procedures of one argument, called when\n     a suspendable port operation would block on a port while reading or\n     writing, respectively.  The default values of these parameters do a\n     blocking \u2018poll\u2019 on the port\u2019s file descriptor.  The procedures are\n     passed the port in question as their one argument.\n\n\u001f\nFile: guile.info,  Node: BOM Handling,  Prev: Non-Blocking I/O,  Up: Input and Output\n\n6.14.15 Handling of Unicode Byte Order Marks\n--------------------------------------------\n\nThis section documents the finer points of Guile\u2019s handling of Unicode\nbyte order marks (BOMs).  A byte order mark (U+FEFF) is typically found\nat the start of a UTF-16 or UTF-32 stream, to allow readers to reliably\ndetermine the byte order.  Occasionally, a BOM is found at the start of\na UTF-8 stream, but this is much less common and not generally\nrecommended.\n\n   Guile attempts to handle BOMs automatically, and in accordance with\nthe recommendations of the Unicode Standard, when the port encoding is\nset to \u2018UTF-8\u2019, \u2018UTF-16\u2019, or \u2018UTF-32\u2019.  In brief, Guile automatically\nwrites a BOM at the start of a UTF-16 or UTF-32 stream, and\nautomatically consumes one from the start of a UTF-8, UTF-16, or UTF-32\nstream.\n\n   As specified in the Unicode Standard, a BOM is only handled specially\nat the start of a stream, and only if the port encoding is set to\n\u2018UTF-8\u2019, \u2018UTF-16\u2019 or \u2018UTF-32\u2019.  If the port encoding is set to\n\u2018UTF-16BE\u2019, \u2018UTF-16LE\u2019, \u2018UTF-32BE\u2019, or \u2018UTF-32LE\u2019, then BOMs are _not_\nhandled specially, and none of the special handling described in this\nsection applies.\n\n   \u2022 To ensure that Guile will properly detect the byte order of a\n     UTF-16 or UTF-32 stream, you must perform a textual read before any\n     writes, seeks, or binary I/O. Guile will not attempt to read a BOM\n     unless a read is explicitly requested at the start of the stream.\n\n   \u2022 If a textual write is performed before the first read, then an\n     arbitrary byte order will be chosen.  Currently, big endian is the\n     default on all platforms, but that may change in the future.  If\n     you wish to explicitly control the byte order of an output stream,\n     set the port encoding to \u2018UTF-16BE\u2019, \u2018UTF-16LE\u2019, \u2018UTF-32BE\u2019, or\n     \u2018UTF-32LE\u2019, and explicitly write a BOM (\u2018#\\xFEFF\u2019) if desired.\n\n   \u2022 If \u2018set-port-encoding!\u2019 is called in the middle of a stream, Guile\n     treats this as a new logical \u201cstart of stream\u201d for purposes of BOM\n     handling, and will forget about any BOMs that had previously been\n     seen.  Therefore, it may choose a different byte order than had\n     been used previously.  This is intended to support multiple logical\n     text streams embedded within a larger binary stream.\n\n   \u2022 Binary I/O operations are not guaranteed to update Guile\u2019s notion\n     of whether the port is at the \u201cstart of the stream\u201d, nor are they\n     guaranteed to produce or consume BOMs.\n\n   \u2022 For ports that support seeking (e.g.  normal files), the input and\n     output streams are considered linked: if the user reads first, then\n     a BOM will be consumed (if appropriate), but later writes will\n     _not_ produce a BOM. Similarly, if the user writes first, then\n     later reads will _not_ consume a BOM.\n\n   \u2022 For ports that are not random access (e.g.  pipes, sockets, and\n     terminals), the input and output streams are considered\n     _independent_ for purposes of BOM handling: the first read will\n     consume a BOM (if appropriate), and the first write will _also_\n     produce a BOM (if appropriate).  However, the input and output\n     streams will always use the same byte order.\n\n   \u2022 Seeks to the beginning of a file will set the \u201cstart of stream\u201d\n     flags.  Therefore, a subsequent textual read or write will consume\n     or produce a BOM. However, unlike \u2018set-port-encoding!\u2019, if a byte\n     order had already been chosen for the port, it will remain in\n     effect after a seek, and cannot be changed by the presence of a\n     BOM. Seeks anywhere other than the beginning of a file clear the\n     \u201cstart of stream\u201d flags.\n\n\u001f\nFile: guile.info,  Node: Regular Expressions,  Next: LALR(1) Parsing,  Prev: Input and Output,  Up: API Reference\n\n6.15 Regular Expressions\n========================\n\nA \u201cregular expression\u201d (or \u201cregexp\u201d) is a pattern that describes a whole\nclass of strings.  A full description of regular expressions and their\nsyntax is beyond the scope of this manual.\n\n   If your system does not include a POSIX regular expression library,\nand you have not linked Guile with a third-party regexp library such as\nRx, these functions will not be available.  You can tell whether your\nGuile installation includes regular expression support by checking\nwhether \u2018(provided? 'regex)\u2019 returns true.\n\n   The following regexp and string matching features are provided by the\n\u2018(ice-9 regex)\u2019 module.  Before using the described functions, you\nshould load this module by executing \u2018(use-modules (ice-9 regex))\u2019.\n\n* Menu:\n\n* Regexp Functions::            Functions that create and match regexps.\n* Match Structures::            Finding what was matched by a regexp.\n* Backslash Escapes::           Removing the special meaning of regexp\n                                meta-characters.\n\n\u001f\nFile: guile.info,  Node: Regexp Functions,  Next: Match Structures,  Up: Regular Expressions\n\n6.15.1 Regexp Functions\n-----------------------\n\nBy default, Guile supports POSIX extended regular expressions.  That\nmeans that the characters \u2018(\u2019, \u2018)\u2019, \u2018+\u2019 and \u2018?\u2019 are special, and must be\nescaped if you wish to match the literal characters and there is no\nsupport for \u201cnon-greedy\u201d variants of \u2018*\u2019, \u2018+\u2019 or \u2018?\u2019.\n\n   This regular expression interface was modeled after that implemented\nby SCSH, the Scheme Shell.  It is intended to be upwardly compatible\nwith SCSH regular expressions.\n\n   Zero bytes (\u2018#\\nul\u2019) cannot be used in regex patterns or input\nstrings, since the underlying C functions treat that as the end of\nstring.  If there\u2019s a zero byte an error is thrown.\n\n   Internally, patterns and input strings are converted to the current\nlocale\u2019s encoding, and then passed to the C library\u2019s regular expression\nroutines (*note (libc)Regular Expressions::).  The returned match\nstructures always point to characters in the strings, not to individual\nbytes, even in the case of multi-byte encodings.\n\n -- Scheme Procedure: string-match pattern str [start]\n     Compile the string PATTERN into a regular expression and compare it\n     with STR.  The optional numeric argument START specifies the\n     position of STR at which to begin matching.\n\n     \u2018string-match\u2019 returns a \u201cmatch structure\u201d which describes what, if\n     anything, was matched by the regular expression.  *Note Match\n     Structures::.  If STR does not match PATTERN at all, \u2018string-match\u2019\n     returns \u2018#f\u2019.\n\n   Two examples of a match follow.  In the first example, the pattern\nmatches the four digits in the match string.  In the second, the pattern\nmatches nothing.\n\n     (string-match \"[0-9][0-9][0-9][0-9]\" \"blah2002\")\n     \u21d2 #(\"blah2002\" (4 . 8))\n\n     (string-match \"[A-Za-z]\" \"123456\")\n     \u21d2 #f\n\n   Each time \u2018string-match\u2019 is called, it must compile its PATTERN\nargument into a regular expression structure.  This operation is\nexpensive, which makes \u2018string-match\u2019 inefficient if the same regular\nexpression is used several times (for example, in a loop).  For better\nperformance, you can compile a regular expression in advance and then\nmatch strings against the compiled regexp.\n\n -- Scheme Procedure: make-regexp pat flag...\n -- C Function: scm_make_regexp (pat, flaglst)\n     Compile the regular expression described by PAT, and return the\n     compiled regexp structure.  If PAT does not describe a legal\n     regular expression, \u2018make-regexp\u2019 throws a\n     \u2018regular-expression-syntax\u2019 error.\n\n     The FLAG arguments change the behavior of the compiled regular\n     expression.  The following values may be supplied:\n\n      -- Variable: regexp/icase\n          Consider uppercase and lowercase letters to be the same when\n          matching.\n\n      -- Variable: regexp/newline\n          If a newline appears in the target string, then permit the \u2018^\u2019\n          and \u2018$\u2019 operators to match immediately after or immediately\n          before the newline, respectively.  Also, the \u2018.\u2019 and \u2018[^...]\u2019\n          operators will never match a newline character.  The intent of\n          this flag is to treat the target string as a buffer containing\n          many lines of text, and the regular expression as a pattern\n          that may match a single one of those lines.\n\n      -- Variable: regexp/basic\n          Compile a basic (\u201cobsolete\u201d) regexp instead of the extended\n          (\u201cmodern\u201d) regexps that are the default.  Basic regexps do not\n          consider \u2018|\u2019, \u2018+\u2019 or \u2018?\u2019 to be special characters, and require\n          the \u2018{...}\u2019 and \u2018(...)\u2019 metacharacters to be backslash-escaped\n          (*note Backslash Escapes::).  There are several other\n          differences between basic and extended regular expressions,\n          but these are the most significant.\n\n      -- Variable: regexp/extended\n          Compile an extended regular expression rather than a basic\n          regexp.  This is the default behavior; this flag will not\n          usually be needed.  If a call to \u2018make-regexp\u2019 includes both\n          \u2018regexp/basic\u2019 and \u2018regexp/extended\u2019 flags, the one which\n          comes last will override the earlier one.\n\n -- Scheme Procedure: regexp-exec rx str [start [flags]]\n -- C Function: scm_regexp_exec (rx, str, start, flags)\n     Match the compiled regular expression RX against \u2018str\u2019.  If the\n     optional integer START argument is provided, begin matching from\n     that position in the string.  Return a match structure describing\n     the results of the match, or \u2018#f\u2019 if no match could be found.\n\n     The FLAGS argument changes the matching behavior.  The following\n     flag values may be supplied, use \u2018logior\u2019 (*note Bitwise\n     Operations::) to combine them,\n\n      -- Variable: regexp/notbol\n          Consider that the START offset into STR is not the beginning\n          of a line and should not match operator \u2018^\u2019.\n\n          If RX was created with the \u2018regexp/newline\u2019 option above, \u2018^\u2019\n          will still match after a newline in STR.\n\n      -- Variable: regexp/noteol\n          Consider that the end of STR is not the end of a line and\n          should not match operator \u2018$\u2019.\n\n          If RX was created with the \u2018regexp/newline\u2019 option above, \u2018$\u2019\n          will still match before a newline in STR.\n\n     ;; Regexp to match uppercase letters\n     (define r (make-regexp \"[A-Z]*\"))\n\n     ;; Regexp to match letters, ignoring case\n     (define ri (make-regexp \"[A-Z]*\" regexp/icase))\n\n     ;; Search for bob using regexp r\n     (match:substring (regexp-exec r \"bob\"))\n     \u21d2 \"\"                  ; no match\n\n     ;; Search for bob using regexp ri\n     (match:substring (regexp-exec ri \"Bob\"))\n     \u21d2 \"Bob\"               ; matched case insensitive\n\n -- Scheme Procedure: regexp? obj\n -- C Function: scm_regexp_p (obj)\n     Return \u2018#t\u2019 if OBJ is a compiled regular expression, or \u2018#f\u2019\n     otherwise.\n\n\n -- Scheme Procedure: list-matches regexp str [flags]\n     Return a list of match structures which are the non-overlapping\n     matches of REGEXP in STR.  REGEXP can be either a pattern string or\n     a compiled regexp.  The FLAGS argument is as per \u2018regexp-exec\u2019\n     above.\n\n          (map match:substring (list-matches \"[a-z]+\" \"abc 42 def 78\"))\n          \u21d2 (\"abc\" \"def\")\n\n -- Scheme Procedure: fold-matches regexp str init proc [flags]\n     Apply PROC to the non-overlapping matches of REGEXP in STR, to\n     build a result.  REGEXP can be either a pattern string or a\n     compiled regexp.  The FLAGS argument is as per \u2018regexp-exec\u2019 above.\n\n     PROC is called as \u2018(PROC match prev)\u2019 where MATCH is a match\n     structure and PREV is the previous return from PROC.  For the first\n     call PREV is the given INIT parameter.  \u2018fold-matches\u2019 returns the\n     final value from PROC.\n\n     For example to count matches,\n\n          (fold-matches \"[a-z][0-9]\" \"abc x1 def y2\" 0\n                        (lambda (match count)\n                          (1+ count)))\n          \u21d2 2\n\n\n   Regular expressions are commonly used to find patterns in one string\nand replace them with the contents of another string.  The following\nfunctions are convenient ways to do this.\n\n -- Scheme Procedure: regexp-substitute port match item ...\n     Write to PORT selected parts of the match structure MATCH.  Or if\n     PORT is \u2018#f\u2019 then form a string from those parts and return that.\n\n     Each ITEM specifies a part to be written, and may be one of the\n     following,\n\n        \u2022 A string.  String arguments are written out verbatim.\n\n        \u2022 An integer.  The submatch with that number is written\n          (\u2018match:substring\u2019).  Zero is the entire match.\n\n        \u2022 The symbol \u2018pre\u2019.  The portion of the matched string preceding\n          the regexp match is written (\u2018match:prefix\u2019).\n\n        \u2022 The symbol \u2018post\u2019.  The portion of the matched string\n          following the regexp match is written (\u2018match:suffix\u2019).\n\n     For example, changing a match and retaining the text before and\n     after,\n\n          (regexp-substitute #f (string-match \"[0-9]+\" \"number 25 is good\")\n                             'pre \"37\" 'post)\n          \u21d2 \"number 37 is good\"\n\n     Or matching a YYYYMMDD format date such as \u201820020828\u2019 and\n     re-ordering and hyphenating the fields.\n\n          (define date-regex\n             \"([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])\")\n          (define s \"Date 20020429 12am.\")\n          (regexp-substitute #f (string-match date-regex s)\n                             'pre 2 \"-\" 3 \"-\" 1 'post \" (\" 0 \")\")\n          \u21d2 \"Date 04-29-2002 12am. (20020429)\"\n\n -- Scheme Procedure: regexp-substitute/global port regexp target\n          item...\n     Write to PORT selected parts of matches of REGEXP in TARGET.  If\n     PORT is \u2018#f\u2019 then form a string from those parts and return that.\n     REGEXP can be a string or a compiled regex.\n\n     This is similar to \u2018regexp-substitute\u2019, but allows global\n     substitutions on TARGET.  Each ITEM behaves as per\n     \u2018regexp-substitute\u2019, with the following differences,\n\n        \u2022 A function.  Called as \u2018(ITEM match)\u2019 with the match structure\n          for the REGEXP match, it should return a string to be written\n          to PORT.\n\n        \u2022 The symbol \u2018post\u2019.  This doesn\u2019t output anything, but instead\n          causes \u2018regexp-substitute/global\u2019 to recurse on the unmatched\n          portion of TARGET.\n\n          This _must_ be supplied to perform a global search and replace\n          on TARGET; without it \u2018regexp-substitute/global\u2019 returns after\n          a single match and output.\n\n     For example, to collapse runs of tabs and spaces to a single hyphen\n     each,\n\n          (regexp-substitute/global #f \"[ \\t]+\"  \"this   is   the text\"\n                                    'pre \"-\" 'post)\n          \u21d2 \"this-is-the-text\"\n\n     Or using a function to reverse the letters in each word,\n\n          (regexp-substitute/global #f \"[a-z]+\"  \"to do and not-do\"\n            'pre (lambda (m) (string-reverse (match:substring m))) 'post)\n          \u21d2 \"ot od dna ton-od\"\n\n     Without the \u2018post\u2019 symbol, just one regexp match is made.  For\n     example the following is the date example from \u2018regexp-substitute\u2019\n     above, without the need for the separate \u2018string-match\u2019 call.\n\n          (define date-regex\n             \"([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])\")\n          (define s \"Date 20020429 12am.\")\n          (regexp-substitute/global #f date-regex s\n                                    'pre 2 \"-\" 3 \"-\" 1 'post \" (\" 0 \")\")\n\n          \u21d2 \"Date 04-29-2002 12am. (20020429)\"\n\n\u001f\nFile: guile.info,  Node: Match Structures,  Next: Backslash Escapes,  Prev: Regexp Functions,  Up: Regular Expressions\n\n6.15.2 Match Structures\n-----------------------\n\nA \u201cmatch structure\u201d is the object returned by \u2018string-match\u2019 and\n\u2018regexp-exec\u2019.  It describes which portion of a string, if any, matched\nthe given regular expression.  Match structures include: a reference to\nthe string that was checked for matches; the starting and ending\npositions of the regexp match; and, if the regexp included any\nparenthesized subexpressions, the starting and ending positions of each\nsubmatch.\n\n   In each of the regexp match functions described below, the \u2018match\u2019\nargument must be a match structure returned by a previous call to\n\u2018string-match\u2019 or \u2018regexp-exec\u2019.  Most of these functions return some\ninformation about the original target string that was matched against a\nregular expression; we will call that string TARGET for easy reference.\n\n -- Scheme Procedure: regexp-match? obj\n     Return \u2018#t\u2019 if OBJ is a match structure returned by a previous call\n     to \u2018regexp-exec\u2019, or \u2018#f\u2019 otherwise.\n\n -- Scheme Procedure: match:substring match [n]\n     Return the portion of TARGET matched by subexpression number N.\n     Submatch 0 (the default) represents the entire regexp match.  If\n     the regular expression as a whole matched, but the subexpression\n     number N did not match, return \u2018#f\u2019.\n\n     (define s (string-match \"[0-9][0-9][0-9][0-9]\" \"blah2002foo\"))\n     (match:substring s)\n     \u21d2 \"2002\"\n\n     ;; match starting at offset 6 in the string\n     (match:substring\n       (string-match \"[0-9][0-9][0-9][0-9]\" \"blah987654\" 6))\n     \u21d2 \"7654\"\n\n -- Scheme Procedure: match:start match [n]\n     Return the starting position of submatch number N.\n\n   In the following example, the result is 4, since the match starts at\ncharacter index 4:\n\n     (define s (string-match \"[0-9][0-9][0-9][0-9]\" \"blah2002foo\"))\n     (match:start s)\n     \u21d2 4\n\n -- Scheme Procedure: match:end match [n]\n     Return the ending position of submatch number N.\n\n   In the following example, the result is 8, since the match runs\nbetween characters 4 and 8 (i.e. the \u201c2002\u201d).\n\n     (define s (string-match \"[0-9][0-9][0-9][0-9]\" \"blah2002foo\"))\n     (match:end s)\n     \u21d2 8\n\n -- Scheme Procedure: match:prefix match\n     Return the unmatched portion of TARGET preceding the regexp match.\n\n          (define s (string-match \"[0-9][0-9][0-9][0-9]\" \"blah2002foo\"))\n          (match:prefix s)\n          \u21d2 \"blah\"\n\n -- Scheme Procedure: match:suffix match\n     Return the unmatched portion of TARGET following the regexp match.\n\n     (define s (string-match \"[0-9][0-9][0-9][0-9]\" \"blah2002foo\"))\n     (match:suffix s)\n     \u21d2 \"foo\"\n\n -- Scheme Procedure: match:count match\n     Return the number of parenthesized subexpressions from MATCH.  Note\n     that the entire regular expression match itself counts as a\n     subexpression, and failed submatches are included in the count.\n\n -- Scheme Procedure: match:string match\n     Return the original TARGET string.\n\n     (define s (string-match \"[0-9][0-9][0-9][0-9]\" \"blah2002foo\"))\n     (match:string s)\n     \u21d2 \"blah2002foo\"\n\n\u001f\nFile: guile.info,  Node: Backslash Escapes,  Prev: Match Structures,  Up: Regular Expressions\n\n6.15.3 Backslash Escapes\n------------------------\n\nSometimes you will want a regexp to match characters like \u2018*\u2019 or \u2018$\u2019\nexactly.  For example, to check whether a particular string represents a\nmenu entry from an Info node, it would be useful to match it against a\nregexp like \u2018^* [^:]*::\u2019.  However, this won\u2019t work; because the\nasterisk is a metacharacter, it won\u2019t match the \u2018*\u2019 at the beginning of\nthe string.  In this case, we want to make the first asterisk un-magic.\n\n   You can do this by preceding the metacharacter with a backslash\ncharacter \u2018\\\u2019.  (This is also called \u201cquoting\u201d the metacharacter, and is\nknown as a \u201cbackslash escape\u201d.)  When Guile sees a backslash in a\nregular expression, it considers the following glyph to be an ordinary\ncharacter, no matter what special meaning it would ordinarily have.\nTherefore, we can make the above example work by changing the regexp to\n\u2018^\\* [^:]*::\u2019.  The \u2018\\*\u2019 sequence tells the regular expression engine to\nmatch only a single asterisk in the target string.\n\n   Since the backslash is itself a metacharacter, you may force a regexp\nto match a backslash in the target string by preceding the backslash\nwith itself.  For example, to find variable references in a TeX program,\nyou might want to find occurrences of the string \u2018\\let\\\u2019 followed by any\nnumber of alphabetic characters.  The regular expression\n\u2018\\\\let\\\\[A-Za-z]*\u2019 would do this: the double backslashes in the regexp\neach match a single backslash in the target string.\n\n -- Scheme Procedure: regexp-quote str\n     Quote each special character found in STR with a backslash, and\n     return the resulting string.\n\n   *Very important:* Using backslash escapes in Guile source code (as in\nEmacs Lisp or C) can be tricky, because the backslash character has\nspecial meaning for the Guile reader.  For example, if Guile encounters\nthe character sequence \u2018\\n\u2019 in the middle of a string while processing\nScheme code, it replaces those characters with a newline character.\nSimilarly, the character sequence \u2018\\t\u2019 is replaced by a horizontal tab.\nSeveral of these \u201cescape sequences\u201d are processed by the Guile reader\nbefore your code is executed.  Unrecognized escape sequences are\nignored: if the characters \u2018\\*\u2019 appear in a string, they will be\ntranslated to the single character \u2018*\u2019.\n\n   This translation is obviously undesirable for regular expressions,\nsince we want to be able to include backslashes in a string in order to\nescape regexp metacharacters.  Therefore, to make sure that a backslash\nis preserved in a string in your Guile program, you must use _two_\nconsecutive backslashes:\n\n     (define Info-menu-entry-pattern (make-regexp \"^\\\\* [^:]*\"))\n\n   The string in this example is preprocessed by the Guile reader before\nany code is executed.  The resulting argument to \u2018make-regexp\u2019 is the\nstring \u2018^\\* [^:]*\u2019, which is what we really want.\n\n   This also means that in order to write a regular expression that\nmatches a single backslash character, the regular expression string in\nthe source code must include _four_ backslashes.  Each consecutive pair\nof backslashes gets translated by the Guile reader to a single\nbackslash, and the resulting double-backslash is interpreted by the\nregexp engine as matching a single backslash character.  Hence:\n\n     (define tex-variable-pattern (make-regexp \"\\\\\\\\let\\\\\\\\=[A-Za-z]*\"))\n\n   The reason for the unwieldiness of this syntax is historical.  Both\nregular expression pattern matchers and Unix string processing systems\nhave traditionally used backslashes with the special meanings described\nabove.  The POSIX regular expression specification and ANSI C standard\nboth require these semantics.  Attempting to abandon either convention\nwould cause other kinds of compatibility problems, possibly more severe\nones.  Therefore, without extending the Scheme reader to support strings\nwith different quoting conventions (an ungainly and confusing extension\nwhen implemented in other languages), we must adhere to this cumbersome\nescape syntax.\n\n\u001f\nFile: guile.info,  Node: LALR(1) Parsing,  Next: PEG Parsing,  Prev: Regular Expressions,  Up: API Reference\n\n6.16 LALR(1) Parsing\n====================\n\nThe \u2018(system base lalr)\u2019 module provides the \u2018lalr-scm\u2019 LALR(1) parser\ngenerator by Dominique Boucher (https://github.com/schemeway/lalr-scm/).\n\u2018lalr-scm\u2019 uses the same algorithm as GNU Bison (*note Introduction to\nBison: (bison)Introduction.).  Parsers are defined using the\n\u2018lalr-parser\u2019 macro.\n\n -- Scheme Syntax: lalr-parser [OPTIONS] TOKENS RULES...\n     Generate an LALR(1) syntax analyzer.  TOKENS is a list of symbols\n     representing the terminal symbols of the grammar.  RULES are the\n     grammar production rules.\n\n     Each rule has the form \u2018(NON-TERMINAL (RHS ...) : ACTION ...)\u2019,\n     where NON-TERMINAL is the name of the rule, RHS are the right-hand\n     sides, i.e., the production rule, and ACTION is a semantic action\n     associated with the rule.\n\n     The generated parser is a two-argument procedure that takes a\n     \u201ctokenizer\u201d and a \u201csyntax error procedure\u201d.  The tokenizer should\n     be a thunk that returns lexical tokens as produced by\n     \u2018make-lexical-token\u2019.  The syntax error procedure may be called\n     with at least an error message (a string), and optionally the\n     lexical token that caused the error.\n\n   Please refer to the \u2018lalr-scm\u2019 documentation for details.\n\n\u001f\nFile: guile.info,  Node: PEG Parsing,  Next: Read/Load/Eval/Compile,  Prev: LALR(1) Parsing,  Up: API Reference\n\n6.17 PEG Parsing\n================\n\nParsing Expression Grammars (PEGs) are a way of specifying formal\nlanguages for text processing.  They can be used either for matching\n(like regular expressions) or for building recursive descent parsers\n(like lex/yacc).  Guile uses a superset of PEG syntax that allows more\ncontrol over what information is preserved during parsing.\n\n   Wikipedia has a clear and concise introduction to PEGs if you want to\nfamiliarize yourself with the syntax:\n<http://en.wikipedia.org/wiki/Parsing_expression_grammar>.\n\n   The \u2018(ice-9 peg)\u2019 module works by compiling PEGs down to lambda\nexpressions.  These can either be stored in variables at compile-time by\nthe define macros (\u2018define-peg-pattern\u2019 and\n\u2018define-peg-string-patterns\u2019) or calculated explicitly at runtime with\nthe compile functions (\u2018compile-peg-pattern\u2019 and \u2018peg-string-compile\u2019).\n\n   They can then be used for either parsing (\u2018match-pattern\u2019) or\nsearching (\u2018search-for-pattern\u2019).  For convenience, \u2018search-for-pattern\u2019\nalso takes pattern literals in case you want to inline a simple search\n(people often use regular expressions this way).\n\n   The rest of this documentation consists of a syntax reference, an API\nreference, and a tutorial.\n\n* Menu:\n\n* PEG Syntax Reference::\n* PEG API Reference::\n* PEG Tutorial::\n* PEG Internals::\n\n\u001f\nFile: guile.info,  Node: PEG Syntax Reference,  Next: PEG API Reference,  Up: PEG Parsing\n\n6.17.1 PEG Syntax Reference\n---------------------------\n\nNormal PEG Syntax:\n..................\n\n -- PEG Pattern: sequence a b\n     Parses A.  If this succeeds, continues to parse B from the end of\n     the text parsed as A.  Succeeds if both A and B succeed.\n\n     \u2018\"a b\"\u2019\n\n     \u2018(and a b)\u2019\n\n -- PEG Pattern: ordered choice a b\n     Parses A.  If this fails, backtracks and parses B.  Succeeds if\n     either A or B succeeds.\n\n     \u2018\"a/b\"\u2019\n\n     \u2018(or a b)\u2019\n\n -- PEG Pattern: zero or more a\n     Parses A as many times in a row as it can, starting each A at the\n     end of the text parsed by the previous A.  Always succeeds.\n\n     \u2018\"a*\"\u2019\n\n     \u2018(* a)\u2019\n\n -- PEG Pattern: one or more a\n     Parses A as many times in a row as it can, starting each A at the\n     end of the text parsed by the previous A.  Succeeds if at least one\n     A was parsed.\n\n     \u2018\"a+\"\u2019\n\n     \u2018(+ a)\u2019\n\n -- PEG Pattern: optional a\n     Tries to parse A.  Succeeds if A succeeds.\n\n     \u2018\"a?\"\u2019\n\n     \u2018(? a)\u2019\n\n -- PEG Pattern: followed by a\n     Makes sure it is possible to parse A, but does not actually parse\n     it.  Succeeds if A would succeed.\n\n     \u2018\"&a\"\u2019\n\n     \u2018(followed-by a)\u2019\n\n -- PEG Pattern: not followed by a\n     Makes sure it is impossible to parse A, but does not actually parse\n     it.  Succeeds if A would fail.\n\n     \u2018\"!a\"\u2019\n\n     \u2018(not-followed-by a)\u2019\n\n -- PEG Pattern: string literal ``abc''\n     Parses the string \"ABC\".  Succeeds if that parsing succeeds.\n\n     \u2018\"'abc'\"\u2019\n\n     \u2018\"abc\"\u2019\n\n -- PEG Pattern: any character\n     Parses any single character.  Succeeds unless there is no more text\n     to be parsed.\n\n     \u2018\".\"\u2019\n\n     \u2018peg-any\u2019\n\n -- PEG Pattern: character class a b\n     Alternative syntax for \u201cOrdered Choice A B\u201d if A and B are\n     characters.\n\n     \u2018\"[ab]\"\u2019\n\n     \u2018(or \"a\" \"b\")\u2019\n\n -- PEG Pattern: range of characters a z\n     Parses any character falling between A and Z.\n\n     \u2018\"[a-z]\"\u2019\n\n     \u2018(range #\\a #\\z)\u2019\n\n   Example:\n\n     \"(a !b / c &d*) 'e'+\"\n\n   Would be:\n\n     (and\n      (or\n       (and a (not-followed-by b))\n       (and c (followed-by (* d))))\n      (+ \"e\"))\n\nExtended Syntax\n...............\n\nThere is some extra syntax for S-expressions.\n\n -- PEG Pattern: ignore a\n     Ignore the text matching A\n\n -- PEG Pattern: capture a\n     Capture the text matching A.\n\n -- PEG Pattern: peg a\n     Embed the PEG pattern A using string syntax.\n\n   Example:\n\n     \"!a / 'b'\"\n\n   Is equivalent to\n\n     (or (peg \"!a\") \"b\")\n\n   and\n\n     (or (not-followed-by a) \"b\")\n\n\u001f\nFile: guile.info,  Node: PEG API Reference,  Next: PEG Tutorial,  Prev: PEG Syntax Reference,  Up: PEG Parsing\n\n6.17.2 PEG API Reference\n------------------------\n\nDefine Macros\n.............\n\nThe most straightforward way to define a PEG is by using one of the\ndefine macros (both of these macroexpand into \u2018define\u2019 expressions).\nThese macros bind parsing functions to variables.  These parsing\nfunctions may be invoked by \u2018match-pattern\u2019 or \u2018search-for-pattern\u2019,\nwhich return a PEG match record.  Raw data can be retrieved from this\nrecord with the PEG match deconstructor functions.  More complicated\n(and perhaps enlightening) examples can be found in the tutorial.\n\n -- Scheme Macro: define-peg-string-patterns peg-string\n     Defines all the nonterminals in the PEG PEG-STRING.  More\n     precisely, \u2018define-peg-string-patterns\u2019 takes a superset of PEGs.\n     A normal PEG has a \u2018<-\u2019 between the nonterminal and the pattern.\n     \u2018define-peg-string-patterns\u2019 uses this symbol to determine what\n     information it should propagate up the parse tree.  The normal \u2018<-\u2019\n     propagates the matched text up the parse tree, \u2018<--\u2019 propagates the\n     matched text up the parse tree tagged with the name of the\n     nonterminal, and \u2018<\u2019 discards that matched text and propagates\n     nothing up the parse tree.  Also, nonterminals may consist of any\n     alphanumeric character or a \u201c-\u201d character (in normal PEGs\n     nonterminals can only be alphabetic).\n\n     For example, if we:\n          (define-peg-string-patterns\n            \"as <- 'a'+\n          bs <- 'b'+\n          as-or-bs <- as/bs\")\n          (define-peg-string-patterns\n            \"as-tag <-- 'a'+\n          bs-tag <-- 'b'+\n          as-or-bs-tag <-- as-tag/bs-tag\")\n     Then:\n          (match-pattern as-or-bs \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: aa>\n          (match-pattern as-or-bs-tag \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: (as-or-bs-tag (as-tag aa))>\n\n     Note that in doing this, we have bound 6 variables at the toplevel\n     (AS, BS, AS-OR-BS, AS-TAG, BS-TAG, and AS-OR-BS-TAG).\n\n -- Scheme Macro: define-peg-pattern name capture-type peg-sexp\n     Defines a single nonterminal NAME.  CAPTURE-TYPE determines how\n     much information is passed up the parse tree.  PEG-SEXP is a PEG in\n     S-expression form.\n\n     Possible values for capture-type:\n\n     \u2018all\u2019\n          passes the matched text up the parse tree tagged with the name\n          of the nonterminal.\n     \u2018body\u2019\n          passes the matched text up the parse tree.\n     \u2018none\u2019\n          passes nothing up the parse tree.\n\n     For Example, if we:\n          (define-peg-pattern as body (+ \"a\"))\n          (define-peg-pattern bs body (+ \"b\"))\n          (define-peg-pattern as-or-bs body (or as bs))\n          (define-peg-pattern as-tag all (+ \"a\"))\n          (define-peg-pattern bs-tag all (+ \"b\"))\n          (define-peg-pattern as-or-bs-tag all (or as-tag bs-tag))\n     Then:\n          (match-pattern as-or-bs \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: aa>\n          (match-pattern as-or-bs-tag \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: (as-or-bs-tag (as-tag aa))>\n\n     Note that in doing this, we have bound 6 variables at the toplevel\n     (AS, BS, AS-OR-BS, AS-TAG, BS-TAG, and AS-OR-BS-TAG).\n\nCompile Functions\n.................\n\nIt is sometimes useful to be able to compile anonymous PEG patterns at\nruntime.  These functions let you do that using either syntax.\n\n -- Scheme Procedure: peg-string-compile peg-string capture-type\n     Compiles the PEG pattern in PEG-STRING propagating according to\n     CAPTURE-TYPE (capture-type can be any of the values from\n     \u2018define-peg-pattern\u2019).\n\n -- Scheme Procedure: compile-peg-pattern peg-sexp capture-type\n     Compiles the PEG pattern in PEG-SEXP propagating according to\n     CAPTURE-TYPE (capture-type can be any of the values from\n     \u2018define-peg-pattern\u2019).\n\n   The functions return syntax objects, which can be useful if you want\nto use them in macros.  If all you want is to define a new nonterminal,\nyou can do the following:\n\n     (define exp '(+ \"a\"))\n     (define as (compile (compile-peg-pattern exp 'body)))\n\n   You can use this nonterminal with all of the regular PEG functions:\n\n     (match-pattern as \"aaaaa\") \u21d2\n     #<peg start: 0 end: 5 string: bbbbb tree: bbbbb>\n\nParsing & Matching Functions\n............................\n\nFor our purposes, \u201cparsing\u201d means parsing a string into a tree starting\nfrom the first character, while \u201cmatching\u201d means searching through the\nstring for a substring.  In practice, the only difference between the\ntwo functions is that \u2018match-pattern\u2019 gives up if it can\u2019t find a valid\nsubstring starting at index 0 and \u2018search-for-pattern\u2019 keeps looking.\nThey are both equally capable of \u201cparsing\u201d and \u201cmatching\u201d given those\nconstraints.\n\n -- Scheme Procedure: match-pattern nonterm string\n     Parses STRING using the PEG stored in NONTERM.  If no match was\n     found, \u2018match-pattern\u2019 returns false.  If a match was found, a PEG\n     match record is returned.\n\n     The \u2018capture-type\u2019 argument to \u2018define-peg-pattern\u2019 allows you to\n     choose what information to hold on to while parsing.  The options\n     are:\n\n     \u2018all\u2019\n          tag the matched text with the nonterminal\n     \u2018body\u2019\n          just the matched text\n     \u2018none\u2019\n          nothing\n\n          (define-peg-pattern as all (+ \"a\"))\n          (match-pattern as \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: (as aa)>\n\n          (define-peg-pattern as body (+ \"a\"))\n          (match-pattern as \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: aa>\n\n          (define-peg-pattern as none (+ \"a\"))\n          (match-pattern as \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: ()>\n\n          (define-peg-pattern bs body (+ \"b\"))\n          (match-pattern bs \"aabbcc\") \u21d2\n          #f\n\n -- Scheme Macro: search-for-pattern nonterm-or-peg string\n     Searches through STRING looking for a matching subexpression.\n     NONTERM-OR-PEG can either be a nonterminal or a literal PEG\n     pattern.  When a literal PEG pattern is provided,\n     \u2018search-for-pattern\u2019 works very similarly to the regular expression\n     searches many hackers are used to.  If no match was found,\n     \u2018search-for-pattern\u2019 returns false.  If a match was found, a PEG\n     match record is returned.\n\n          (define-peg-pattern as body (+ \"a\"))\n          (search-for-pattern as \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: aa>\n          (search-for-pattern (+ \"a\") \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: aa>\n          (search-for-pattern \"'a'+\" \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: aa>\n\n          (define-peg-pattern as all (+ \"a\"))\n          (search-for-pattern as \"aabbcc\") \u21d2\n          #<peg start: 0 end: 2 string: aabbcc tree: (as aa)>\n\n          (define-peg-pattern bs body (+ \"b\"))\n          (search-for-pattern bs \"aabbcc\") \u21d2\n          #<peg start: 2 end: 4 string: aabbcc tree: bb>\n          (search-for-pattern (+ \"b\") \"aabbcc\") \u21d2\n          #<peg start: 2 end: 4 string: aabbcc tree: bb>\n          (search-for-pattern \"'b'+\" \"aabbcc\") \u21d2\n          #<peg start: 2 end: 4 string: aabbcc tree: bb>\n\n          (define-peg-pattern zs body (+ \"z\"))\n          (search-for-pattern zs \"aabbcc\") \u21d2\n          #f\n          (search-for-pattern (+ \"z\") \"aabbcc\") \u21d2\n          #f\n          (search-for-pattern \"'z'+\" \"aabbcc\") \u21d2\n          #f\n\nPEG Match Records\n.................\n\nThe \u2018match-pattern\u2019 and \u2018search-for-pattern\u2019 functions both return PEG\nmatch records.  Actual information can be extracted from these with the\nfollowing functions.\n\n -- Scheme Procedure: peg:string match-record\n     Returns the original string that was parsed in the creation of\n     \u2018match-record\u2019.\n\n -- Scheme Procedure: peg:start match-record\n     Returns the index of the first parsed character in the original\n     string (from \u2018peg:string\u2019).  If this is the same as \u2018peg:end\u2019,\n     nothing was parsed.\n\n -- Scheme Procedure: peg:end match-record\n     Returns one more than the index of the last parsed character in the\n     original string (from \u2018peg:string\u2019).  If this is the same as\n     \u2018peg:start\u2019, nothing was parsed.\n\n -- Scheme Procedure: peg:substring match-record\n     Returns the substring parsed by \u2018match-record\u2019.  This is equivalent\n     to \u2018(substring (peg:string match-record) (peg:start match-record)\n     (peg:end match-record))\u2019.\n\n -- Scheme Procedure: peg:tree match-record\n     Returns the tree parsed by \u2018match-record\u2019.\n\n -- Scheme Procedure: peg-record? match-record\n     Returns true if \u2018match-record\u2019 is a PEG match record, or false\n     otherwise.\n\n   Example:\n     (define-peg-pattern bs all (peg \"'b'+\"))\n\n     (search-for-pattern bs \"aabbcc\") \u21d2\n     #<peg start: 2 end: 4 string: aabbcc tree: (bs bb)>\n\n     (let ((pm (search-for-pattern bs \"aabbcc\")))\n        `((string ,(peg:string pm))\n          (start ,(peg:start pm))\n          (end ,(peg:end pm))\n          (substring ,(peg:substring pm))\n          (tree ,(peg:tree pm))\n          (record? ,(peg-record? pm)))) \u21d2\n     ((string \"aabbcc\")\n      (start 2)\n      (end 4)\n      (substring \"bb\")\n      (tree (bs \"bb\"))\n      (record? #t))\n\nMiscellaneous\n.............\n\n -- Scheme Procedure: context-flatten tst lst\n     Takes a predicate TST and a list LST.  Flattens LST until all\n     elements are either atoms or satisfy TST.  If LST itself satisfies\n     TST, \u2018(list lst)\u2019 is returned (this is a flat list whose only\n     element satisfies TST).\n\n          (context-flatten (lambda (x) (and (number? (car x)) (= (car x) 1))) '(2 2 (1 1 (2 2)) (2 2 (1 1)))) \u21d2\n          (2 2 (1 1 (2 2)) 2 2 (1 1))\n          (context-flatten (lambda (x) (and (number? (car x)) (= (car x) 1))) '(1 1 (1 1 (2 2)) (2 2 (1 1)))) \u21d2\n          ((1 1 (1 1 (2 2)) (2 2 (1 1))))\n\n     If you\u2019re wondering why this is here, take a look at the tutorial.\n\n -- Scheme Procedure: keyword-flatten terms lst\n     A less general form of \u2018context-flatten\u2019.  Takes a list of terminal\n     atoms \u2018terms\u2019 and flattens LST until all elements are either atoms,\n     or lists which have an atom from \u2018terms\u2019 as their first element.\n          (keyword-flatten '(a b) '(c a b (a c) (b c) (c (b a) (c a)))) \u21d2\n          (c a b (a c) (b c) c (b a) c a)\n\n     If you\u2019re wondering why this is here, take a look at the tutorial.\n\n\u001f\nFile: guile.info,  Node: PEG Tutorial,  Next: PEG Internals,  Prev: PEG API Reference,  Up: PEG Parsing\n\n6.17.3 PEG Tutorial\n-------------------\n\nParsing /etc/passwd\n...................\n\nThis example will show how to parse /etc/passwd using PEGs.\n\n   First we define an example /etc/passwd file:\n\n     (define *etc-passwd*\n       \"root:x:0:0:root:/root:/bin/bash\n     daemon:x:1:1:daemon:/usr/sbin:/bin/sh\n     bin:x:2:2:bin:/bin:/bin/sh\n     sys:x:3:3:sys:/dev:/bin/sh\n     nobody:x:65534:65534:nobody:/nonexistent:/bin/sh\n     messagebus:x:103:107::/var/run/dbus:/bin/false\n     \")\n\n   As a first pass at this, we might want to have all the entries in\n/etc/passwd in a list.\n\n   Doing this with string-based PEG syntax would look like this:\n     (define-peg-string-patterns\n       \"passwd <- entry* !.\n     entry <-- (! NL .)* NL*\n     NL < '\\n'\")\n\n   A \u2018passwd\u2019 file is 0 or more entries (\u2018entry*\u2019) until the end of the\nfile (\u2018!.\u2019 (\u2018.\u2019 is any character, so \u2018!.\u2019 means \u201cnot anything\u201d)).  We\nwant to capture the data in the nonterminal \u2018passwd\u2019, but not tag it\nwith the name, so we use \u2018<-\u2019.\n\n   An entry is a series of 0 or more characters that aren\u2019t newlines\n(\u2018(! NL .)*\u2019) followed by 0 or more newlines (\u2018NL*\u2019).  We want to tag\nall the entries with \u2018entry\u2019, so we use \u2018<--\u2019.\n\n   A newline is just a literal newline (\u2018'\\n'\u2019).  We don\u2019t want a bunch\nof newlines cluttering up the output, so we use \u2018<\u2019 to throw away the\ncaptured data.\n\n   Here is the same PEG defined using S-expressions:\n     (define-peg-pattern passwd body (and (* entry) (not-followed-by peg-any)))\n     (define-peg-pattern entry all (and (* (and (not-followed-by NL) peg-any))\n     \t\t\t       (* NL)))\n     (define-peg-pattern NL none \"\\n\")\n\n   Obviously this is much more verbose.  On the other hand, it\u2019s more\nexplicit, and thus easier to build automatically.  However, there are\nsome tricks that make S-expressions easier to use in some cases.  One is\nthe \u2018ignore\u2019 keyword; the string syntax has no way to say \u201cthrow away\nthis text\u201d except breaking it out into a separate nonterminal.  For\ninstance, to throw away the newlines we had to define \u2018NL\u2019.  In the\nS-expression syntax, we could have simply written \u2018(ignore \"\\n\")\u2019.\nAlso, for the cases where string syntax is really much cleaner, the\n\u2018peg\u2019 keyword can be used to embed string syntax in S-expression syntax.\nFor instance, we could have written:\n\n     (define-peg-pattern passwd body (peg \"entry* !.\"))\n\n   However we define it, parsing \u2018*etc-passwd*\u2019 with the \u2018passwd\u2019\nnonterminal yields the same results:\n\n     (peg:tree (match-pattern passwd *etc-passwd*)) \u21d2\n     ((entry \"root:x:0:0:root:/root:/bin/bash\")\n      (entry \"daemon:x:1:1:daemon:/usr/sbin:/bin/sh\")\n      (entry \"bin:x:2:2:bin:/bin:/bin/sh\")\n      (entry \"sys:x:3:3:sys:/dev:/bin/sh\")\n      (entry \"nobody:x:65534:65534:nobody:/nonexistent:/bin/sh\")\n      (entry \"messagebus:x:103:107::/var/run/dbus:/bin/false\"))\n\n   However, here is something to be wary of:\n\n     (peg:tree (match-pattern passwd \"one entry\")) \u21d2\n     (entry \"one entry\")\n\n   By default, the parse trees generated by PEGs are compressed as much\nas possible without losing information.  It may not look like this is\nwhat you want at first, but uncompressed parse trees are an enormous\nheadache (there\u2019s no easy way to predict how deep particular lists will\nnest, there are empty lists littered everywhere, etc.  etc.).  One\nside-effect of this, however, is that sometimes the compressor is too\naggressive.  No information is discarded when \u2018((entry \"one entry\"))\u2019 is\ncompressed to \u2018(entry \"one entry\")\u2019, but in this particular case it\nprobably isn\u2019t what we want.\n\n   There are two functions for easily dealing with this:\n\u2018keyword-flatten\u2019 and \u2018context-flatten\u2019.  The \u2018keyword-flatten\u2019 function\ntakes a list of keywords and a list to flatten, then tries to coerce the\nlist such that the first element of all sublists is one of the keywords.\nThe \u2018context-flatten\u2019 function is similar, but instead of a list of\nkeywords it takes a predicate that should indicate whether a given\nsublist is good enough (refer to the API reference for more details).\n\n   What we want here is \u2018keyword-flatten\u2019.\n     (keyword-flatten '(entry) (peg:tree (match-pattern passwd *etc-passwd*))) \u21d2\n     ((entry \"root:x:0:0:root:/root:/bin/bash\")\n      (entry \"daemon:x:1:1:daemon:/usr/sbin:/bin/sh\")\n      (entry \"bin:x:2:2:bin:/bin:/bin/sh\")\n      (entry \"sys:x:3:3:sys:/dev:/bin/sh\")\n      (entry \"nobody:x:65534:65534:nobody:/nonexistent:/bin/sh\")\n      (entry \"messagebus:x:103:107::/var/run/dbus:/bin/false\"))\n     (keyword-flatten '(entry) (peg:tree (match-pattern passwd \"one entry\"))) \u21d2\n     ((entry \"one entry\"))\n\n   Of course, this is a somewhat contrived example.  In practice we\nwould probably just tag the \u2018passwd\u2019 nonterminal to remove the ambiguity\n(using either the \u2018all\u2019 keyword for S-expressions or the \u2018<--\u2019 symbol\nfor strings)..\n\n     (define-peg-pattern tag-passwd all (peg \"entry* !.\"))\n     (peg:tree (match-pattern tag-passwd *etc-passwd*)) \u21d2\n     (tag-passwd\n       (entry \"root:x:0:0:root:/root:/bin/bash\")\n       (entry \"daemon:x:1:1:daemon:/usr/sbin:/bin/sh\")\n       (entry \"bin:x:2:2:bin:/bin:/bin/sh\")\n       (entry \"sys:x:3:3:sys:/dev:/bin/sh\")\n       (entry \"nobody:x:65534:65534:nobody:/nonexistent:/bin/sh\")\n       (entry \"messagebus:x:103:107::/var/run/dbus:/bin/false\"))\n     (peg:tree (match-pattern tag-passwd \"one entry\"))\n     (tag-passwd\n       (entry \"one entry\"))\n\n   If you\u2019re ever uncertain about the potential results of parsing\nsomething, remember the two absolute rules:\n  1. No parsing information will ever be discarded.\n  2. There will never be any lists with fewer than 2 elements.\n\n   For the purposes of (1), \"parsing information\" means things tagged\nwith the \u2018any\u2019 keyword or the \u2018<--\u2019 symbol.  Plain strings will be\nconcatenated.\n\n   Let\u2019s extend this example a bit more and actually pull some useful\ninformation out of the passwd file:\n\n     (define-peg-string-patterns\n       \"passwd <-- entry* !.\n     entry <-- login C pass C uid C gid C nameORcomment C homedir C shell NL*\n     login <-- text\n     pass <-- text\n     uid <-- [0-9]*\n     gid <-- [0-9]*\n     nameORcomment <-- text\n     homedir <-- path\n     shell <-- path\n     path <-- (SLASH pathELEMENT)*\n     pathELEMENT <-- (!NL !C  !'/' .)*\n     text <- (!NL !C  .)*\n     C < ':'\n     NL < '\\n'\n     SLASH < '/'\")\n\n   This produces rather pretty parse trees:\n     (passwd\n       (entry (login \"root\")\n              (pass \"x\")\n              (uid \"0\")\n              (gid \"0\")\n              (nameORcomment \"root\")\n              (homedir (path (pathELEMENT \"root\")))\n              (shell (path (pathELEMENT \"bin\") (pathELEMENT \"bash\"))))\n       (entry (login \"daemon\")\n              (pass \"x\")\n              (uid \"1\")\n              (gid \"1\")\n              (nameORcomment \"daemon\")\n              (homedir\n                (path (pathELEMENT \"usr\") (pathELEMENT \"sbin\")))\n              (shell (path (pathELEMENT \"bin\") (pathELEMENT \"sh\"))))\n       (entry (login \"bin\")\n              (pass \"x\")\n              (uid \"2\")\n              (gid \"2\")\n              (nameORcomment \"bin\")\n              (homedir (path (pathELEMENT \"bin\")))\n              (shell (path (pathELEMENT \"bin\") (pathELEMENT \"sh\"))))\n       (entry (login \"sys\")\n              (pass \"x\")\n              (uid \"3\")\n              (gid \"3\")\n              (nameORcomment \"sys\")\n              (homedir (path (pathELEMENT \"dev\")))\n              (shell (path (pathELEMENT \"bin\") (pathELEMENT \"sh\"))))\n       (entry (login \"nobody\")\n              (pass \"x\")\n              (uid \"65534\")\n              (gid \"65534\")\n              (nameORcomment \"nobody\")\n              (homedir (path (pathELEMENT \"nonexistent\")))\n              (shell (path (pathELEMENT \"bin\") (pathELEMENT \"sh\"))))\n       (entry (login \"messagebus\")\n              (pass \"x\")\n              (uid \"103\")\n              (gid \"107\")\n              nameORcomment\n              (homedir\n                (path (pathELEMENT \"var\")\n                      (pathELEMENT \"run\")\n                      (pathELEMENT \"dbus\")))\n              (shell (path (pathELEMENT \"bin\") (pathELEMENT \"false\")))))\n\n   Notice that when there\u2019s no entry in a field (e.g.  \u2018nameORcomment\u2019\nfor messagebus) the symbol is inserted.  This is the \u201cdon\u2019t throw away\nany information\u201d rule\u2014we succesfully matched a \u2018nameORcomment\u2019 of 0\ncharacters (since we used \u2018*\u2019 when defining it).  This is usually what\nyou want, because it allows you to e.g.  use \u2018list-ref\u2019 to pull out\nelements (since they all have known offsets).\n\n   If you\u2019d prefer not to have symbols for empty matches, you can\nreplace the \u2018*\u2019 with a \u2018+\u2019 and add a \u2018?\u2019 after the \u2018nameORcomment\u2019 in\n\u2018entry\u2019.  Then it will try to parse 1 or more characters, fail\n(inserting nothing into the parse tree), but continue because it didn\u2019t\nhave to match the nameORcomment to continue.\n\nEmbedding Arithmetic Expressions\n................................\n\nWe can parse simple mathematical expressions with the following PEG:\n\n     (define-peg-string-patterns\n       \"expr <- sum\n     sum <-- (product ('+' / '-') sum) / product\n     product <-- (value ('*' / '/') product) / value\n     value <-- number / '(' expr ')'\n     number <-- [0-9]+\")\n\n   Then:\n     (peg:tree (match-pattern expr \"1+1/2*3+(1+1)/2\")) \u21d2\n     (sum (product (value (number \"1\")))\n          \"+\"\n          (sum (product\n                 (value (number \"1\"))\n                 \"/\"\n                 (product\n                   (value (number \"2\"))\n                   \"*\"\n                   (product (value (number \"3\")))))\n               \"+\"\n               (sum (product\n                      (value \"(\"\n                             (sum (product (value (number \"1\")))\n                                  \"+\"\n                                  (sum (product (value (number \"1\")))))\n                             \")\")\n                      \"/\"\n                      (product (value (number \"2\")))))))\n\n   There is very little wasted effort in this PEG. The \u2018number\u2019\nnonterminal has to be tagged because otherwise the numbers might run\ntogether with the arithmetic expressions during the string concatenation\nstage of parse-tree compression (the parser will see \u201c1\u201d followed by \u201c/\u201d\nand decide to call it \u201c1/\u201d).  When in doubt, tag.\n\n   It is very easy to turn these parse trees into lisp expressions:\n\n     (define (parse-sum sum left . rest)\n       (if (null? rest)\n           (apply parse-product left)\n           (list (string->symbol (car rest))\n     \t    (apply parse-product left)\n     \t    (apply parse-sum (cadr rest)))))\n\n     (define (parse-product product left . rest)\n       (if (null? rest)\n           (apply parse-value left)\n           (list (string->symbol (car rest))\n     \t    (apply parse-value left)\n     \t    (apply parse-product (cadr rest)))))\n\n     (define (parse-value value first . rest)\n       (if (null? rest)\n           (string->number (cadr first))\n           (apply parse-sum (car rest))))\n\n     (define parse-expr parse-sum)\n\n   (Notice all these functions look very similar; for a more complicated\nPEG, it would be worth abstracting.)\n\n   Then:\n     (apply parse-expr (peg:tree (match-pattern expr \"1+1/2*3+(1+1)/2\"))) \u21d2\n     (+ 1 (+ (/ 1 (* 2 3)) (/ (+ 1 1) 2)))\n\n   But wait!  The associativity is wrong!  Where it says \u2018(/ 1 (* 2\n3))\u2019, it should say \u2018(* (/ 1 2) 3)\u2019.\n\n   It\u2019s tempting to try replacing e.g.  \u2018\"sum <-- (product ('+' / '-')\nsum) / product\"\u2019 with \u2018\"sum <-- (sum ('+' / '-') product) / product\"\u2019,\nbut this is a Bad Idea.  PEGs don\u2019t support left recursion.  To see why,\nimagine what the parser will do here.  When it tries to parse \u2018sum\u2019, it\nfirst has to try and parse \u2018sum\u2019.  But to do that, it first has to try\nand parse \u2018sum\u2019.  This will continue until the stack gets blown off.\n\n   So how does one parse left-associative binary operators with PEGs?\nHonestly, this is one of their major shortcomings.  There\u2019s no\ngeneral-purpose way of doing this, but here the repetition operators are\na good choice:\n\n     (use-modules (srfi srfi-1))\n\n     (define-peg-string-patterns\n       \"expr <- sum\n     sum <-- (product ('+' / '-'))* product\n     product <-- (value ('*' / '/'))* value\n     value <-- number / '(' expr ')'\n     number <-- [0-9]+\")\n\n     ;; take a deep breath...\n     (define (make-left-parser next-func)\n       (lambda (sum first . rest) ;; general form, comments below assume\n         ;; that we're dealing with a sum expression\n         (if (null? rest) ;; form (sum (product ...))\n           (apply next-func first)\n           (if (string? (cadr first));; form (sum ((product ...) \"+\") (product ...))\n     \t  (list (string->symbol (cadr first))\n     \t\t(apply next-func (car first))\n     \t\t(apply next-func (car rest)))\n               ;; form (sum (((product ...) \"+\") ((product ...) \"+\")) (product ...))\n     \t  (car\n     \t   (reduce ;; walk through the list and build a left-associative tree\n     \t    (lambda (l r)\n     \t      (list (list (cadr r) (car r) (apply next-func (car l)))\n     \t\t    (string->symbol (cadr l))))\n     \t    'ignore\n     \t    (append ;; make a list of all the products\n                  ;; the first one should be pre-parsed\n     \t     (list (list (apply next-func (caar first))\n     \t\t\t (string->symbol (cadar first))))\n     \t     (cdr first)\n                  ;; the last one has to be added in\n     \t     (list (append rest '(\"done\"))))))))))\n\n     (define (parse-value value first . rest)\n       (if (null? rest)\n           (string->number (cadr first))\n           (apply parse-sum (car rest))))\n     (define parse-product (make-left-parser parse-value))\n     (define parse-sum (make-left-parser parse-product))\n     (define parse-expr parse-sum)\n\n   Then:\n     (apply parse-expr (peg:tree (match-pattern expr \"1+1/2*3+(1+1)/2\"))) \u21d2\n     (+ (+ 1 (* (/ 1 2) 3)) (/ (+ 1 1) 2))\n\n   As you can see, this is much uglier (it could be made prettier by\nusing \u2018context-flatten\u2019, but the way it\u2019s written above makes it clear\nhow we deal with the three ways the zero-or-more \u2018*\u2019 expression can\nparse).  Fortunately, most of the time we can get away with only using\nright-associativity.\n\nSimplified Functions\n....................\n\nFor a more tantalizing example, consider the following grammar that\nparses (highly) simplified C functions:\n\n     (define-peg-string-patterns\n       \"cfunc <-- cSP ctype cSP cname cSP cargs cLB cSP cbody cRB\n     ctype <-- cidentifier\n     cname <-- cidentifier\n     cargs <-- cLP (! (cSP cRP) carg cSP (cCOMMA / cRP) cSP)* cSP\n     carg <-- cSP ctype cSP cname\n     cbody <-- cstatement *\n     cidentifier <- [a-zA-z][a-zA-Z0-9_]*\n     cstatement <-- (!';'.)*cSC cSP\n     cSC < ';'\n     cCOMMA < ','\n     cLP < '('\n     cRP < ')'\n     cLB < '{'\n     cRB < '}'\n     cSP < [ \\t\\n]*\")\n\n   Then:\n     (match-pattern cfunc \"int square(int a) { return a*a;}\") \u21d2\n     (32\n      (cfunc (ctype \"int\")\n             (cname \"square\")\n             (cargs (carg (ctype \"int\") (cname \"a\")))\n             (cbody (cstatement \"return a*a\"))))\n\n   And:\n     (match-pattern cfunc \"int mod(int a, int b) { int c = a/b;return a-b*c; }\") \u21d2\n     (52\n      (cfunc (ctype \"int\")\n             (cname \"mod\")\n             (cargs (carg (ctype \"int\") (cname \"a\"))\n                    (carg (ctype \"int\") (cname \"b\")))\n             (cbody (cstatement \"int c = a/b\")\n                    (cstatement \"return a- b*c\"))))\n\n   By wrapping all the \u2018carg\u2019 nonterminals in a \u2018cargs\u2019 nonterminal, we\nwere able to remove any ambiguity in the parsing structure and avoid\nhaving to call \u2018context-flatten\u2019 on the output of \u2018match-pattern\u2019.  We\nused the same trick with the \u2018cstatement\u2019 nonterminals, wrapping them in\na \u2018cbody\u2019 nonterminal.\n\n   The whitespace nonterminal \u2018cSP\u2019 used here is a (very) useful\ninstantiation of a common pattern for matching syntactically irrelevant\ninformation.  Since it\u2019s tagged with \u2018<\u2019 and ends with \u2018*\u2019 it won\u2019t\nclutter up the parse trees (all the empty lists will be discarded during\nthe compression step) and it will never cause parsing to fail.\n\n\u001f\nFile: guile.info,  Node: PEG Internals,  Prev: PEG Tutorial,  Up: PEG Parsing\n\n6.17.4 PEG Internals\n--------------------\n\nA PEG parser takes a string as input and attempts to parse it as a given\nnonterminal.  The key idea of the PEG implementation is that every\nnonterminal is just a function that takes a string as an argument and\nattempts to parse that string as its nonterminal.  The functions always\nstart from the beginning, but a parse is considered successful if there\nis material left over at the end.\n\n   This makes it easy to model different PEG parsing operations.  For\ninstance, consider the PEG grammar \u2018\"ab\"\u2019, which could also be written\n\u2018(and \"a\" \"b\")\u2019.  It matches the string \u201cab\u201d.  Here\u2019s how that might be\nimplemented in the PEG style:\n\n     (define (match-and-a-b str)\n       (match-a str)\n       (match-b str))\n\n   As you can see, the use of functions provides an easy way to model\nsequencing.  In a similar way, one could model \u2018(or a b)\u2019 with something\nlike the following:\n\n     (define (match-or-a-b str)\n       (or (match-a str) (match-b str)))\n\n   Here the semantics of a PEG \u2018or\u2019 expression map naturally onto\nScheme\u2019s \u2018or\u2019 operator.  This function will attempt to run \u2018(match-a\nstr)\u2019, and return its result if it succeeds.  Otherwise it will run\n\u2018(match-b str)\u2019.\n\n   Of course, the code above wouldn\u2019t quite work.  We need some way for\nthe parsing functions to communicate.  The actual interface used is\nbelow.\n\nParsing Function Interface\n..........................\n\nA parsing function takes three arguments - a string, the length of that\nstring, and the position in that string it should start parsing at.  In\neffect, the parsing functions pass around substrings in pieces - the\nfirst argument is a buffer of characters, and the second two give a\nrange within that buffer that the parsing function should look at.\n\n   Parsing functions return either #f, if they failed to match their\nnonterminal, or a list whose first element must be an integer\nrepresenting the final position in the string they matched and whose cdr\ncan be any other data the function wishes to return, or \u2019() if it\ndoesn\u2019t have any more data.\n\n   The one caveat is that if the extra data it returns is a list, any\nadjacent strings in that list will be appended by \u2018match-pattern\u2019.  For\ninstance, if a parsing function returns \u2018(13 (\"a\" \"b\" \"c\"))\u2019,\n\u2018match-pattern\u2019 will take \u2018(13 (\"abc\"))\u2019 as its value.\n\n   For example, here is a function to match \u201cab\u201d using the actual\ninterface.\n\n     (define (match-a-b str len pos)\n        (and (<= (+ pos 2) len)\n             (string= str \"ab\" pos (+ pos 2))\n             (list (+ pos 2) '()))) ; we return no extra information\n\n   The above function can be used to match a string by running\n\u2018(match-pattern match-a-b \"ab\")\u2019.\n\nCode Generators and Extensible Syntax\n.....................................\n\nPEG expressions, such as those in a \u2018define-peg-pattern\u2019 form, are\ninterpreted internally in two steps.\n\n   First, any string PEG is expanded into an s-expression PEG by the\ncode in the \u2018(ice-9 peg string-peg)\u2019 module.\n\n   Then, the s-expression PEG that results is compiled into a parsing\nfunction by the \u2018(ice-9 peg codegen)\u2019 module.  In particular, the\nfunction \u2018compile-peg-pattern\u2019 is called on the s-expression.  It then\ndecides what to do based on the form it is passed.\n\n   The PEG syntax can be expanded by providing \u2018compile-peg-pattern\u2019\nmore options for what to do with its forms.  The extended syntax will be\nassociated with a symbol, for instance \u2018my-parsing-form\u2019, and will be\ncalled on all PEG expressions of the form\n     (my-parsing-form ...)\n\n   The parsing function should take two arguments.  The first will be a\nsyntax object containing a list with all of the arguments to the form\n(but not the form\u2019s name), and the second will be the \u2018capture-type\u2019\nargument that is passed to \u2018define-peg-pattern\u2019.\n\n   New functions can be registered by calling \u2018(add-peg-compiler! symbol\nfunction)\u2019, where \u2018symbol\u2019 is the symbol that will indicate a form of\nthis type and \u2018function\u2019 is the code generating function described\nabove.  The function \u2018add-peg-compiler!\u2019 is exported from the \u2018(ice-9\npeg codegen)\u2019 module.\n\n\u001f\nFile: guile.info,  Node: Read/Load/Eval/Compile,  Next: Memory Management,  Prev: PEG Parsing,  Up: API Reference\n\n6.18 Reading and Evaluating Scheme Code\n=======================================\n\nThis chapter describes Guile functions that are concerned with reading,\nloading, evaluating, and compiling Scheme code at run time.\n\n* Menu:\n\n* Scheme Syntax::               Standard and extended Scheme syntax.\n* Scheme Read::                 Reading Scheme code.\n* Scheme Write::                Writing Scheme values to a port.\n* Fly Evaluation::              Procedures for on the fly evaluation.\n* Compilation::                 How to compile Scheme files and procedures.\n* Loading::                     Loading Scheme code from file.\n* Load Paths::                  Where Guile looks for code.\n* Character Encoding of Source Files:: Loading non-ASCII Scheme code from file.\n* Delayed Evaluation::          Postponing evaluation until it is needed.\n* Local Evaluation::            Evaluation in a local lexical environment.\n* Local Inclusion::             Compile-time inclusion of one file in another.\n* Sandboxed Evaluation::        Evaluation with limited capabilities.\n* REPL Servers::                Serving a REPL over a socket.\n* Cooperative REPL Servers::    REPL server for single-threaded applications.\n\n\u001f\nFile: guile.info,  Node: Scheme Syntax,  Next: Scheme Read,  Up: Read/Load/Eval/Compile\n\n6.18.1 Scheme Syntax: Standard and Guile Extensions\n---------------------------------------------------\n\n* Menu:\n\n* Expression Syntax::\n* Comments::\n* Block Comments::\n* Case Sensitivity::\n* Keyword Syntax::\n* Reader Extensions::\n\n\u001f\nFile: guile.info,  Node: Expression Syntax,  Next: Comments,  Up: Scheme Syntax\n\n6.18.1.1 Expression Syntax\n..........................\n\nAn expression to be evaluated takes one of the following forms.\n\nSYMBOL\n     A symbol is evaluated by dereferencing.  A binding of that symbol\n     is sought and the value there used.  For example,\n\n          (define x 123)\n          x \u21d2 123\n\n(PROC ARGS...)\n     A parenthesised expression is a function call.  PROC and each\n     argument are evaluated, then the function (which PROC evaluated to)\n     is called with those arguments.\n\n     The order in which PROC and the arguments are evaluated is\n     unspecified, so be careful when using expressions with side\n     effects.\n\n          (max 1 2 3) \u21d2 3\n\n          (define (get-some-proc)  min)\n          ((get-some-proc) 1 2 3) \u21d2 1\n\n     The same sort of parenthesised form is used for a macro invocation,\n     but in that case the arguments are not evaluated.  See the\n     descriptions of macros for more on this (*note Macros::, and *note\n     Syntax Rules::).\n\nCONSTANT\n     Number, string, character and boolean constants evaluate \u201cto\n     themselves\u201d, so can appear as literals.\n\n          123     \u21d2 123\n          99.9    \u21d2 99.9\n          \"hello\" \u21d2 \"hello\"\n          #\\z     \u21d2 #\\z\n          #t      \u21d2 #t\n\n     Note that an application must not attempt to modify literal\n     strings, since they may be in read-only memory.\n\n(quote DATA)\n\u2019DATA\n     Quoting is used to obtain a literal symbol (instead of a variable\n     reference), a literal list (instead of a function call), or a\n     literal vector.  \u2019 is simply a shorthand for a \u2018quote\u2019 form.  For\n     example,\n\n          'x                   \u21d2 x\n          '(1 2 3)             \u21d2 (1 2 3)\n          '#(1 (2 3) 4)        \u21d2 #(1 (2 3) 4)\n          (quote x)            \u21d2 x\n          (quote (1 2 3))      \u21d2 (1 2 3)\n          (quote #(1 (2 3) 4)) \u21d2 #(1 (2 3) 4)\n\n     Note that an application must not attempt to modify literal lists\n     or vectors obtained from a \u2018quote\u2019 form, since they may be in\n     read-only memory.\n\n(quasiquote DATA)\n\u2018DATA\n     Backquote quasi-quotation is like \u2018quote\u2019, but selected\n     sub-expressions are evaluated.  This is a convenient way to\n     construct a list or vector structure most of which is constant, but\n     at certain points should have expressions substituted.\n\n     The same effect can always be had with suitable \u2018list\u2019, \u2018cons\u2019 or\n     \u2018vector\u2019 calls, but quasi-quoting is often easier.\n\n     (unquote EXPR)\n     ,EXPR\n          Within the quasiquote DATA, \u2018unquote\u2019 or \u2018,\u2019 indicates an\n          expression to be evaluated and inserted.  The comma syntax \u2018,\u2019\n          is simply a shorthand for an \u2018unquote\u2019 form.  For example,\n\n               `(1 2 (* 9 9) 3 4)       \u21d2 (1 2 (* 9 9) 3 4)\n               `(1 2 ,(* 9 9) 3 4)      \u21d2 (1 2 81 3 4)\n               `(1 (unquote (+ 1 1)) 3) \u21d2 (1 2 3)\n               `#(1 ,(/ 12 2))          \u21d2 #(1 6)\n\n     (unquote-splicing EXPR)\n     ,@EXPR\n          Within the quasiquote DATA, \u2018unquote-splicing\u2019 or \u2018,@\u2019\n          indicates an expression to be evaluated and the elements of\n          the returned list inserted.  EXPR must evaluate to a list.\n          The \u201ccomma-at\u201d syntax \u2018,@\u2019 is simply a shorthand for an\n          \u2018unquote-splicing\u2019 form.\n\n               (define x '(2 3))\n               `(1 ,x 4)                           \u21d2 (1 (2 3) 4)\n               `(1 ,@x 4)                         \u21d2 (1 2 3 4)\n               `(1 (unquote-splicing (map 1+ x)))  \u21d2 (1 3 4)\n               `#(9 ,@x 9)                        \u21d2 #(9 2 3 9)\n\n          Notice \u2018,@\u2019 differs from plain \u2018,\u2019 in the way one level of\n          nesting is stripped.  For \u2018,@\u2019 the elements of a returned list\n          are inserted, whereas with \u2018,\u2019 it would be the list itself\n          inserted.\n\n\u001f\nFile: guile.info,  Node: Comments,  Next: Block Comments,  Prev: Expression Syntax,  Up: Scheme Syntax\n\n6.18.1.2 Comments\n.................\n\nComments in Scheme source files are written by starting them with a\nsemicolon character (\u2018;\u2019).  The comment then reaches up to the end of\nthe line.  Comments can begin at any column, and the may be inserted on\nthe same line as Scheme code.\n\n     ; Comment\n     ;; Comment too\n     (define x 1)        ; Comment after expression\n     (let ((y 1))\n       ;; Display something.\n       (display y)\n     ;;; Comment at left margin.\n       (display (+ y 1)))\n\n   It is common to use a single semicolon for comments following\nexpressions on a line, to use two semicolons for comments which are\nindented like code, and three semicolons for comments which start at\ncolumn 0, even if they are inside an indented code block.  This\nconvention is used when indenting code in Emacs\u2019 Scheme mode.\n\n\u001f\nFile: guile.info,  Node: Block Comments,  Next: Case Sensitivity,  Prev: Comments,  Up: Scheme Syntax\n\n6.18.1.3 Block Comments\n.......................\n\nIn addition to the standard line comments defined by R5RS, Guile has\nanother comment type for multiline comments, called \u201cblock comments\u201d.\nThis type of comment begins with the character sequence \u2018#!\u2019 and ends\nwith the characters \u2018!#\u2019.\n\n   These comments are compatible with the block comments in the Scheme\nShell \u2018scsh\u2019 (*note The Scheme shell (scsh)::).  The characters \u2018#!\u2019\nwere chosen because they are the magic characters used in shell scripts\nfor indicating that the name of the program for executing the script\nfollows on the same line.\n\n   Thus a Guile script often starts like this.\n\n     #! /usr/local/bin/guile -s\n     !#\n\n   More details on Guile scripting can be found in the scripting section\n(*note Guile Scripting::).\n\n   Similarly, Guile (starting from version 2.0) supports nested block\ncomments as specified by R6RS and SRFI-30\n(http://srfi.schemers.org/srfi-30/srfi-30.html):\n\n     (+ 1 #| this is a #| nested |# block comment |# 2)\n     \u21d2 3\n\n   For backward compatibility, this syntax can be overridden with\n\u2018read-hash-extend\u2019 (*note \u2018read-hash-extend\u2019: Reader Extensions.).\n\n   There is one special case where the contents of a comment can\nactually affect the interpretation of code.  When a character encoding\ndeclaration, such as \u2018coding: utf-8\u2019 appears in one of the first few\nlines of a source file, it indicates to Guile\u2019s default reader that this\nsource code file is not ASCII. For details see *note Character Encoding\nof Source Files::.\n\n\u001f\nFile: guile.info,  Node: Case Sensitivity,  Next: Keyword Syntax,  Prev: Block Comments,  Up: Scheme Syntax\n\n6.18.1.4 Case Sensitivity\n.........................\n\nScheme as defined in R5RS is not case sensitive when reading symbols.\nGuile, on the contrary is case sensitive by default, so the identifiers\n\n     guile-whuzzy\n     Guile-Whuzzy\n\n   are the same in R5RS Scheme, but are different in Guile.\n\n   It is possible to turn off case sensitivity in Guile by setting the\nreader option \u2018case-insensitive\u2019.  For more information on reader\noptions, *Note Scheme Read::.\n\n     (read-enable 'case-insensitive)\n\n   It is also possible to disable (or enable) case sensitivity within a\nsingle file by placing the reader directives \u2018#!fold-case\u2019 (or\n\u2018#!no-fold-case\u2019) within the file itself.\n\n\u001f\nFile: guile.info,  Node: Keyword Syntax,  Next: Reader Extensions,  Prev: Case Sensitivity,  Up: Scheme Syntax\n\n6.18.1.5 Keyword Syntax\n.......................\n\n\u001f\nFile: guile.info,  Node: Reader Extensions,  Prev: Keyword Syntax,  Up: Scheme Syntax\n\n6.18.1.6 Reader Extensions\n..........................\n\n -- Scheme Procedure: read-hash-extend chr proc\n -- C Function: scm_read_hash_extend (chr, proc)\n     Install the procedure PROC for reading expressions starting with\n     the character sequence \u2018#\u2019 and CHR.  PROC will be called with two\n     arguments: the character CHR and the port to read further data\n     from.  The object returned will be the return value of \u2018read\u2019.\n     Passing \u2018#f\u2019 for PROC will remove a previous setting.\n\n\u001f\nFile: guile.info,  Node: Scheme Read,  Next: Scheme Write,  Prev: Scheme Syntax,  Up: Read/Load/Eval/Compile\n\n6.18.2 Reading Scheme Code\n--------------------------\n\n -- Scheme Procedure: read [port]\n -- C Function: scm_read (port)\n     Read an s-expression from the input port PORT, or from the current\n     input port if PORT is not specified.  Any whitespace before the\n     next token is discarded.\n\n   The behaviour of Guile\u2019s Scheme reader can be modified by\nmanipulating its read options.\n\n -- Scheme Procedure: read-options [setting]\n     Display the current settings of the global read options.  If\n     SETTING is omitted, only a short form of the current read options\n     is printed.  Otherwise if SETTING is the symbol \u2018help\u2019, a complete\n     options description is displayed.\n\n   The set of available options, and their default values, may be had by\ninvoking \u2018read-options\u2019 at the prompt.\n\n     scheme@(guile-user)> (read-options)\n     (square-brackets keywords #f positions)\n     scheme@(guile-user)> (read-options 'help)\n     copy              no    Copy source code expressions.\n     positions         yes   Record positions of source code expressions.\n     case-insensitive  no    Convert symbols to lower case.\n     keywords          #f    Style of keyword recognition: #f, 'prefix or 'postfix.\n     r6rs-hex-escapes  no    Use R6RS variable-length character and string hex escapes.\n     square-brackets   yes   Treat `[' and `]' as parentheses, for R6RS compatibility.\n     hungry-eol-escapes no   In strings, consume leading whitespace after an\n                             escaped end-of-line.\n     curly-infix       no    Support SRFI-105 curly infix expressions.\n     r7rs-symbols      no    Support R7RS |...| symbol notation.\n\n   Note that Guile also includes a preliminary mechanism for setting\nread options on a per-port basis.  For instance, the \u2018case-insensitive\u2019\nread option is set (or unset) on the port when the reader encounters the\n\u2018#!fold-case\u2019 or \u2018#!no-fold-case\u2019 reader directives.  Similarly, the\n\u2018#!curly-infix\u2019 reader directive sets the \u2018curly-infix\u2019 read option on\nthe port, and \u2018#!curly-infix-and-bracket-lists\u2019 sets \u2018curly-infix\u2019 and\nunsets \u2018square-brackets\u2019 on the port (*note SRFI-105::).  There is\ncurrently no other way to access or set the per-port read options.\n\n   The boolean options may be toggled with \u2018read-enable\u2019 and\n\u2018read-disable\u2019.  The non-boolean \u2018keywords\u2019 option must be set using\n\u2018read-set!\u2019.\n\n -- Scheme Procedure: read-enable option-name\n -- Scheme Procedure: read-disable option-name\n -- Scheme Syntax: read-set! option-name value\n     Modify the read options.  \u2018read-enable\u2019 should be used with boolean\n     options and switches them on, \u2018read-disable\u2019 switches them off.\n\n     \u2018read-set!\u2019 can be used to set an option to a specific value.  Due\n     to historical oddities, it is a macro that expects an unquoted\n     option name.\n\n   For example, to make \u2018read\u2019 fold all symbols to their lower case\n(perhaps for compatibility with older Scheme code), you can enter:\n\n     (read-enable 'case-insensitive)\n\n   For more information on the effect of the \u2018r6rs-hex-escapes\u2019 and\n\u2018hungry-eol-escapes\u2019 options, see (*note String Syntax::).\n\n   For more information on the \u2018r7rs-symbols\u2019 option, see (*note Symbol\nRead Syntax::).\n\n\u001f\nFile: guile.info,  Node: Scheme Write,  Next: Fly Evaluation,  Prev: Scheme Read,  Up: Read/Load/Eval/Compile\n\n6.18.3 Writing Scheme Values\n----------------------------\n\nAny scheme value may be written to a port.  Not all values may be read\nback in (*note Scheme Read::), however.\n\n -- Scheme Procedure: write obj [port]\n     Send a representation of OBJ to PORT or to the current output port\n     if not given.\n\n     The output is designed to be machine readable, and can be read back\n     with \u2018read\u2019 (*note Scheme Read::).  Strings are printed in double\n     quotes, with escapes if necessary, and characters are printed in\n     \u2018#\\\u2019 notation.\n\n -- Scheme Procedure: display obj [port]\n     Send a representation of OBJ to PORT or to the current output port\n     if not given.\n\n     The output is designed for human readability, it differs from\n     \u2018write\u2019 in that strings are printed without double quotes and\n     escapes, and characters are printed as per \u2018write-char\u2019, not in\n     \u2018#\\\u2019 form.\n\n   As was the case with the Scheme reader, there are a few options that\naffect the behavior of the Scheme printer.\n\n -- Scheme Procedure: print-options [setting]\n     Display the current settings of the read options.  If SETTING is\n     omitted, only a short form of the current read options is printed.\n     Otherwise if SETTING is the symbol \u2018help\u2019, a complete options\n     description is displayed.\n\n   The set of available options, and their default values, may be had by\ninvoking \u2018print-options\u2019 at the prompt.\n\n     scheme@(guile-user)> (print-options)\n     (quote-keywordish-symbols reader highlight-suffix \"}\" highlight-prefix \"{\")\n     scheme@(guile-user)> (print-options 'help)\n     highlight-prefix          {       The string to print before highlighted values.\n     highlight-suffix          }       The string to print after highlighted values.\n     quote-keywordish-symbols  reader  How to print symbols that have a colon\n                                       as their first or last character. The\n                                       value '#f' does not quote the colons;\n                                       '#t' quotes them; 'reader' quotes them\n                                       when the reader option 'keywords' is\n                                       not '#f'.\n     escape-newlines           yes     Render newlines as \\n when printing\n                                       using `write'.\n     r7rs-symbols              no      Escape symbols using R7RS |...| symbol\n                                       notation.\n\n   These options may be modified with the print-set!  syntax.\n\n -- Scheme Syntax: print-set! option-name value\n     Modify the print options.  Due to historical oddities, \u2018print-set!\u2019\n     is a macro that expects an unquoted option name.\n\n\u001f\nFile: guile.info,  Node: Fly Evaluation,  Next: Compilation,  Prev: Scheme Write,  Up: Read/Load/Eval/Compile\n\n6.18.4 Procedures for On the Fly Evaluation\n-------------------------------------------\n\nScheme has the lovely property that its expressions may be represented\nas data.  The \u2018eval\u2019 procedure takes a Scheme datum and evaluates it as\ncode.\n\n -- Scheme Procedure: eval exp module_or_state\n -- C Function: scm_eval (exp, module_or_state)\n     Evaluate EXP, a list representing a Scheme expression, in the\n     top-level environment specified by MODULE_OR_STATE.  While EXP is\n     evaluated (using \u2018primitive-eval\u2019), MODULE_OR_STATE is made the\n     current module.  The current module is reset to its previous value\n     when \u2018eval\u2019 returns.  XXX - dynamic states.  Example: (eval \u2019(+ 1\n     2) (interaction-environment))\n\n -- Scheme Procedure: interaction-environment\n -- C Function: scm_interaction_environment ()\n     Return a specifier for the environment that contains\n     implementation\u2013defined bindings, typically a superset of those\n     listed in the report.  The intent is that this procedure will\n     return the environment in which the implementation would evaluate\n     expressions dynamically typed by the user.\n\n   *Note Environments::, for other environments.\n\n   One does not always receive code as Scheme data, of course, and this\nis especially the case for Guile\u2019s other language implementations (*note\nOther Languages::).  For the case in which all you have is a string, we\nhave \u2018eval-string\u2019.  There is a legacy version of this procedure in the\ndefault environment, but you really want the one from \u2018(ice-9\neval-string)\u2019, so load it up:\n\n     (use-modules (ice-9 eval-string))\n\n -- Scheme Procedure: eval-string string [#:module=#f] [#:file=#f]\n          [#:line=#f] [#:column=#f] [#:lang=(current-language)]\n          [#:compile?=#f]\n     Parse STRING according to the current language, normally Scheme.\n     Evaluate or compile the expressions it contains, in order,\n     returning the last expression.\n\n     If the MODULE keyword argument is set, save a module excursion\n     (*note Module System Reflection::) and set the current module to\n     MODULE before evaluation.\n\n     The FILE, LINE, and COLUMN keyword arguments can be used to\n     indicate that the source string begins at a particular source\n     location.\n\n     Finally, LANG is a language, defaulting to the current language,\n     and the expression is compiled if COMPILE? is true or there is no\n     evaluator for the given language.\n\n -- C Function: scm_eval_string (string)\n -- C Function: scm_eval_string_in_module (string, module)\n     These C bindings call \u2018eval-string\u2019 from \u2018(ice-9 eval-string)\u2019,\n     evaluating within MODULE or the current module.\n\n -- C Function: SCM scm_c_eval_string (const char *string)\n     \u2018scm_eval_string\u2019, but taking a C string in locale encoding instead\n     of an \u2018SCM\u2019.\n\n -- Scheme Procedure: apply proc arg ... arglst\n -- C Function: scm_apply_0 (proc, arglst)\n -- C Function: scm_apply_1 (proc, arg1, arglst)\n -- C Function: scm_apply_2 (proc, arg1, arg2, arglst)\n -- C Function: scm_apply_3 (proc, arg1, arg2, arg3, arglst)\n -- C Function: scm_apply (proc, arg, rest)\n     Call PROC with arguments ARG ... and the elements of the ARGLST\n     list.\n\n     \u2018scm_apply\u2019 takes parameters corresponding to a Scheme level\n     \u2018(lambda (proc arg1 . rest) ...)\u2019.  So ARG1 and all but the last\n     element of the REST list make up ARG ..., and the last element of\n     REST is the ARGLST list.  Or if REST is the empty list \u2018SCM_EOL\u2019\n     then there\u2019s no ARG ..., and (ARG1) is the ARGLST.\n\n     ARGLST is not modified, but the REST list passed to \u2018scm_apply\u2019 is\n     modified.\n\n -- C Function: scm_call_0 (proc)\n -- C Function: scm_call_1 (proc, arg1)\n -- C Function: scm_call_2 (proc, arg1, arg2)\n -- C Function: scm_call_3 (proc, arg1, arg2, arg3)\n -- C Function: scm_call_4 (proc, arg1, arg2, arg3, arg4)\n -- C Function: scm_call_5 (proc, arg1, arg2, arg3, arg4, arg5)\n -- C Function: scm_call_6 (proc, arg1, arg2, arg3, arg4, arg5, arg6)\n -- C Function: scm_call_7 (proc, arg1, arg2, arg3, arg4, arg5, arg6,\n          arg7)\n -- C Function: scm_call_8 (proc, arg1, arg2, arg3, arg4, arg5, arg6,\n          arg7, arg8)\n -- C Function: scm_call_9 (proc, arg1, arg2, arg3, arg4, arg5, arg6,\n          arg7, arg8, arg9)\n     Call PROC with the given arguments.\n\n -- C Function: scm_call (proc, ...)\n     Call PROC with any number of arguments.  The argument list must be\n     terminated by \u2018SCM_UNDEFINED\u2019.  For example:\n\n          scm_call (scm_c_public_ref (\"guile\", \"+\"),\n                    scm_from_int (1),\n                    scm_from_int (2),\n                    SCM_UNDEFINED);\n\n -- C Function: scm_call_n (proc, argv, nargs)\n     Call PROC with the array of arguments ARGV, as a \u2018SCM*\u2019.  The\n     length of the arguments should be passed in NARGS, as a \u2018size_t\u2019.\n\n -- Scheme Procedure: primitive-eval exp\n -- C Function: scm_primitive_eval (exp)\n     Evaluate EXP in the top-level environment specified by the current\n     module.\n\n\u001f\nFile: guile.info,  Node: Compilation,  Next: Loading,  Prev: Fly Evaluation,  Up: Read/Load/Eval/Compile\n\n6.18.5 Compiling Scheme Code\n----------------------------\n\nThe \u2018eval\u2019 procedure directly interprets the S-expression representation\nof Scheme.  An alternate strategy for evaluation is to determine ahead\nof time what computations will be necessary to evaluate the expression,\nand then use that recipe to produce the desired results.  This is known\nas \u201ccompilation\u201d.\n\n   While it is possible to compile simple Scheme expressions such as \u2018(+\n2 2)\u2019 or even \u2018\"Hello world!\"\u2019, compilation is most interesting in the\ncontext of procedures.  Compiling a lambda expression produces a\ncompiled procedure, which is just like a normal procedure except\ntypically much faster, because it can bypass the generic interpreter.\n\n   Functions from system modules in a Guile installation are normally\ncompiled already, so they load and run quickly.\n\n   Note that well-written Scheme programs will not typically call the\nprocedures in this section, for the same reason that it is often bad\ntaste to use \u2018eval\u2019.  By default, Guile automatically compiles any files\nit encounters that have not been compiled yet (*note \u2018--auto-compile\u2019:\nInvoking Guile.).  The compiler can also be invoked explicitly from the\nshell as \u2018guild compile foo.scm\u2019.\n\n   (Why are calls to \u2018eval\u2019 and \u2018compile\u2019 usually in bad taste?  Because\nthey are limited, in that they can only really make sense for top-level\nexpressions.  Also, most needs for \u201ccompile-time\u201d computation are\nfulfilled by macros and closures.  Of course one good counterexample is\nthe REPL itself, or any code that reads expressions from a port.)\n\n   Automatic compilation generally works transparently, without any need\nfor user intervention.  However Guile does not yet do proper dependency\ntracking, so that if file \u2018A.scm\u2019 uses macros from \u2018B.scm\u2019, and B.SCM\nchanges, \u2018A.scm\u2019 would not be automatically recompiled.  To forcibly\ninvalidate the auto-compilation cache, pass the \u2018--fresh-auto-compile\u2019\noption to Guile, or set the \u2018GUILE_AUTO_COMPILE\u2019 environment variable to\n\u2018fresh\u2019 (instead of to \u20180\u2019 or \u20181\u2019).\n\n   For more information on the compiler itself, see *note Compiling to\nthe Virtual Machine::.  For information on the virtual machine, see\n*note A Virtual Machine for Guile::.\n\n   The command-line interface to Guile\u2019s compiler is the \u2018guild compile\u2019\ncommand:\n\n -- Command: guild compile [\u2018option\u2019...] FILE...\n     Compile FILE, a source file, and store bytecode in the compilation\n     cache or in the file specified by the \u2018-o\u2019 option.  The following\n     options are available:\n\n     \u2018-L DIR\u2019\n     \u2018--load-path=DIR\u2019\n          Add DIR to the front of the module load path.\n\n     \u2018-o OFILE\u2019\n     \u2018--output=OFILE\u2019\n          Write output bytecode to OFILE.  By convention, bytecode file\n          names end in \u2018.go\u2019.  When \u2018-o\u2019 is omitted, the output file\n          name is as for \u2018compile-file\u2019 (see below).\n\n     \u2018-x EXTENSION\u2019\n          Recognize EXTENSION as a valid source file name extension.\n\n          For example, to compile R6RS code, you might want to pass \u2018-x\n          .sls\u2019 so that files ending in \u2018.sls\u2019 can be found.\n\n     \u2018-W WARNING\u2019\n     \u2018--warn=WARNING\u2019\n          Emit warnings of type WARNING; use \u2018--warn=help\u2019 for a list of\n          available warnings and their description.  Currently\n          recognized warnings include \u2018unused-variable\u2019,\n          \u2018unused-toplevel\u2019, \u2018shadowed-toplevel\u2019, \u2018unbound-variable\u2019,\n          \u2018macro-use-before-definition\u2019, \u2018arity-mismatch\u2019, \u2018format\u2019,\n          \u2018duplicate-case-datum\u2019, and \u2018bad-case-datum\u2019.\n\n     \u2018-f LANG\u2019\n     \u2018--from=LANG\u2019\n          Use LANG as the source language of FILE.  If this option is\n          omitted, \u2018scheme\u2019 is assumed.\n\n     \u2018-t LANG\u2019\n     \u2018--to=LANG\u2019\n          Use LANG as the target language of FILE.  If this option is\n          omitted, \u2018rtl\u2019 is assumed.\n\n     \u2018-T TARGET\u2019\n     \u2018--target=TARGET\u2019\n          Produce code for TARGET instead of %HOST-TYPE (*note\n          %host-type: Build Config.).  Target must be a valid GNU\n          triplet, such as \u2018armv5tel-unknown-linux-gnueabi\u2019 (*note\n          (autoconf)Specifying Target Triplets::).\n\n     Each FILE is assumed to be UTF-8-encoded, unless it contains a\n     coding declaration as recognized by \u2018file-encoding\u2019 (*note\n     Character Encoding of Source Files::).\n\n   The compiler can also be invoked directly by Scheme code using the\nprocedures below:\n\n -- Scheme Procedure: compile exp [#:env=#f] [#:from=(current-language)]\n          [#:to=value] [#:opts=()]\n     Compile the expression EXP in the environment ENV.  If EXP is a\n     procedure, the result will be a compiled procedure; otherwise\n     \u2018compile\u2019 is mostly equivalent to \u2018eval\u2019.\n\n     For a discussion of languages and compiler options, *Note Compiling\n     to the Virtual Machine::.\n\n -- Scheme Procedure: compile-file file [#:output-file=#f]\n          [#:from=(current-language)] [#:to='rtl]\n          [#:env=(default-environment from)] [#:opts='()]\n          [#:canonicalization='relative]\n     Compile the file named FILE.\n\n     Output will be written to a OUTPUT-FILE.  If you do not supply an\n     output file name, output is written to a file in the cache\n     directory, as computed by \u2018(compiled-file-name FILE)\u2019.\n\n     FROM and TO specify the source and target languages.  *Note\n     Compiling to the Virtual Machine::, for more information on these\n     options, and on ENV and OPTS.\n\n     As with \u2018guild compile\u2019, FILE is assumed to be UTF-8-encoded unless\n     it contains a coding declaration.\n\n -- Scheme Procedure: compiled-file-name file\n     Compute a cached location for a compiled version of a Scheme file\n     named FILE.\n\n     This file will usually be below the \u2018$HOME/.cache/guile/ccache\u2019\n     directory, depending on the value of the \u2018XDG_CACHE_HOME\u2019\n     environment variable.  The intention is that \u2018compiled-file-name\u2019\n     provides a fallback location for caching auto-compiled files.  If\n     you want to place a compile file in the \u2018%load-compiled-path\u2019, you\n     should pass the OUTPUT-FILE option to \u2018compile-file\u2019, explicitly.\n\n -- Scheme Variable: %auto-compilation-options\n     This variable contains the options passed to the \u2018compile-file\u2019\n     procedure when auto-compiling source files.  By default, it enables\n     useful compilation warnings.  It can be customized from \u2018~/.guile\u2019.\n\n\u001f\nFile: guile.info,  Node: Loading,  Next: Load Paths,  Prev: Compilation,  Up: Read/Load/Eval/Compile\n\n6.18.6 Loading Scheme Code from File\n------------------------------------\n\n -- Scheme Procedure: load filename [reader]\n     Load FILENAME and evaluate its contents in the top-level\n     environment.\n\n     READER if provided should be either \u2018#f\u2019, or a procedure with the\n     signature \u2018(lambda (port) ...)\u2019 which reads the next expression\n     from PORT.  If READER is \u2018#f\u2019 or absent, Guile\u2019s built-in \u2018read\u2019\n     procedure is used (*note Scheme Read::).\n\n     The READER argument takes effect by setting the value of the\n     \u2018current-reader\u2019 fluid (see below) before loading the file, and\n     restoring its previous value when loading is complete.  The Scheme\n     code inside FILENAME can itself change the current reader procedure\n     on the fly by setting \u2018current-reader\u2019 fluid.\n\n     If the variable \u2018%load-hook\u2019 is defined, it should be bound to a\n     procedure that will be called before any code is loaded.  See\n     documentation for \u2018%load-hook\u2019 later in this section.\n\n -- Scheme Procedure: load-compiled filename\n     Load the compiled file named FILENAME.\n\n     Compiling a source file (*note Read/Load/Eval/Compile::) and then\n     calling \u2018load-compiled\u2019 on the resulting file is equivalent to\n     calling \u2018load\u2019 on the source file.\n\n -- Scheme Procedure: primitive-load filename\n -- C Function: scm_primitive_load (filename)\n     Load the file named FILENAME and evaluate its contents in the\n     top-level environment.  FILENAME must either be a full pathname or\n     be a pathname relative to the current directory.  If the variable\n     \u2018%load-hook\u2019 is defined, it should be bound to a procedure that\n     will be called before any code is loaded.  See the documentation\n     for \u2018%load-hook\u2019 later in this section.\n\n -- C Function: SCM scm_c_primitive_load (const char *filename)\n     \u2018scm_primitive_load\u2019, but taking a C string instead of an \u2018SCM\u2019.\n\n -- Variable: current-reader\n     \u2018current-reader\u2019 holds the read procedure that is currently being\n     used by the above loading procedures to read expressions (from the\n     file that they are loading).  \u2018current-reader\u2019 is a fluid, so it\n     has an independent value in each dynamic root and should be read\n     and set using \u2018fluid-ref\u2019 and \u2018fluid-set!\u2019 (*note Fluids and\n     Dynamic States::).\n\n     Changing \u2018current-reader\u2019 is typically useful to introduce local\n     syntactic changes, such that code following the \u2018fluid-set!\u2019 call\n     is read using the newly installed reader.  The \u2018current-reader\u2019\n     change should take place at evaluation time when the code is\n     evaluated, or at compilation time when the code is compiled:\n\n          (eval-when (compile eval)\n            (fluid-set! current-reader my-own-reader))\n\n     The \u2018eval-when\u2019 form above ensures that the \u2018current-reader\u2019 change\n     occurs at the right time.\n\n -- Variable: %load-hook\n     A procedure to be called \u2018(%load-hook FILENAME)\u2019 whenever a file is\n     loaded, or \u2018#f\u2019 for no such call.  \u2018%load-hook\u2019 is used by all of\n     the loading functions (\u2018load\u2019 and \u2018primitive-load\u2019, and\n     \u2018load-from-path\u2019 and \u2018primitive-load-path\u2019 documented in the next\n     section).\n\n     For example an application can set this to show what\u2019s loaded,\n\n          (set! %load-hook (lambda (filename)\n                             (format #t \"Loading ~a ...\\n\" filename)))\n          (load-from-path \"foo.scm\")\n          \u22a3 Loading /usr/local/share/guile/site/foo.scm ...\n\n -- Scheme Procedure: current-load-port\n -- C Function: scm_current_load_port ()\n     Return the current-load-port.  The load port is used internally by\n     \u2018primitive-load\u2019.\n\n\u001f\nFile: guile.info,  Node: Load Paths,  Next: Character Encoding of Source Files,  Prev: Loading,  Up: Read/Load/Eval/Compile\n\n6.18.7 Load Paths\n-----------------\n\nThe procedure in the previous section look for Scheme code in the file\nsystem at specific location.  Guile also has some procedures to search\nthe load path for code.\n\n -- Variable: %load-path\n     List of directories which should be searched for Scheme modules and\n     libraries.  When Guile starts up, \u2018%load-path\u2019 is initialized to\n     the default load path \u2018(list (%library-dir) (%site-dir)\n     (%global-site-dir) (%package-data-dir))\u2019.  The \u2018GUILE_LOAD_PATH\u2019\n     environment variable can be used to prepend or append additional\n     directories (*note Environment Variables::).\n\n     *Note Build Config::, for more on \u2018%site-dir\u2019 and related\n     procedures.\n\n -- Scheme Procedure: load-from-path filename\n     Similar to \u2018load\u2019, but searches for FILENAME in the load paths.\n     Preferentially loads a compiled version of the file, if it is\n     available and up-to-date.\n\n   A user can extend the load path by calling \u2018add-to-load-path\u2019.\n\n -- Scheme Syntax: add-to-load-path dir\n     Add DIR to the load path.\n\n   For example, a script might include this form to add the directory\nthat it is in to the load path:\n\n     (add-to-load-path (dirname (current-filename)))\n\n   It\u2019s better to use \u2018add-to-load-path\u2019 than to modify \u2018%load-path\u2019\ndirectly, because \u2018add-to-load-path\u2019 takes care of modifying the path\nboth at compile-time and at run-time.\n\n -- Scheme Procedure: primitive-load-path filename\n          [exception-on-not-found]\n -- C Function: scm_primitive_load_path (filename)\n     Search \u2018%load-path\u2019 for the file named FILENAME and load it into\n     the top-level environment.  If FILENAME is a relative pathname and\n     is not found in the list of search paths, an error is signalled.\n     Preferentially loads a compiled version of the file, if it is\n     available and up-to-date.\n\n     If FILENAME is a relative pathname and is not found in the list of\n     search paths, one of three things may happen, depending on the\n     optional second argument, EXCEPTION-ON-NOT-FOUND.  If it is \u2018#f\u2019,\n     \u2018#f\u2019 will be returned.  If it is a procedure, it will be called\n     with no arguments.  (This allows a distinction to be made between\n     exceptions raised by loading a file, and exceptions related to the\n     loader itself.)  Otherwise an error is signalled.\n\n     For compatibility with Guile 1.8 and earlier, the C function takes\n     only one argument, which can be either a string (the file name) or\n     an argument list.\n\n -- Scheme Procedure: %search-load-path filename\n -- C Function: scm_sys_search_load_path (filename)\n     Search \u2018%load-path\u2019 for the file named FILENAME, which must be\n     readable by the current user.  If FILENAME is found in the list of\n     paths to search or is an absolute pathname, return its full\n     pathname.  Otherwise, return \u2018#f\u2019.  Filenames may have any of the\n     optional extensions in the \u2018%load-extensions\u2019 list;\n     \u2018%search-load-path\u2019 will try each extension automatically.\n\n -- Variable: %load-extensions\n     A list of default file extensions for files containing Scheme code.\n     \u2018%search-load-path\u2019 tries each of these extensions when looking for\n     a file to load.  By default, \u2018%load-extensions\u2019 is bound to the\n     list \u2018(\"\" \".scm\")\u2019.\n\n   As mentioned above, when Guile searches the \u2018%load-path\u2019 for a source\nfile, it will also search the \u2018%load-compiled-path\u2019 for a corresponding\ncompiled file.  If the compiled file is as new or newer than the source\nfile, it will be loaded instead of the source file, using\n\u2018load-compiled\u2019.\n\n -- Variable: %load-compiled-path\n     Like \u2018%load-path\u2019, but for compiled files.  By default, this path\n     has two entries: one for compiled files from Guile itself, and one\n     for site packages.  The \u2018GUILE_LOAD_COMPILED_PATH\u2019 environment\n     variable can be used to prepend or append additional directories\n     (*note Environment Variables::).\n\n   When \u2018primitive-load-path\u2019 searches the \u2018%load-compiled-path\u2019 for a\ncorresponding compiled file for a relative path it does so by appending\n\u2018.go\u2019 to the relative path.  For example, searching for \u2018ice-9/popen\u2019\ncould find \u2018/usr/lib/guile/2.2/ccache/ice-9/popen.go\u2019, and use it\ninstead of \u2018/usr/share/guile/2.2/ice-9/popen.scm\u2019.\n\n   If \u2018primitive-load-path\u2019 does not find a corresponding \u2018.go\u2019 file in\nthe \u2018%load-compiled-path\u2019, or the \u2018.go\u2019 file is out of date, it will\nsearch for a corresponding auto-compiled file in the fallback path,\npossibly creating one if one does not exist.\n\n   *Note Installing Site Packages::, for more on how to correctly\ninstall site packages.  *Note Modules and the File System::, for more on\nthe relationship between load paths and modules.  *Note Compilation::,\nfor more on the fallback path and auto-compilation.\n\n   Finally, there are a couple of helper procedures for general path\nmanipulation.\n\n -- Scheme Procedure: parse-path path [tail]\n -- C Function: scm_parse_path (path, tail)\n     Parse PATH, which is expected to be a colon-separated string, into\n     a list and return the resulting list with TAIL appended.  If PATH\n     is \u2018#f\u2019, TAIL is returned.\n\n -- Scheme Procedure: parse-path-with-ellipsis path base\n -- C Function: scm_parse_path_with_ellipsis (path, base)\n     Parse PATH, which is expected to be a colon-separated string, into\n     a list and return the resulting list with BASE (a list) spliced in\n     place of the \u2018...\u2019 path component, if present, or else BASE is\n     added to the end.  If PATH is \u2018#f\u2019, BASE is returned.\n\n -- Scheme Procedure: search-path path filename [extensions\n          [require-exts?]]\n -- C Function: scm_search_path (path, filename, rest)\n     Search PATH for a directory containing a file named FILENAME.  The\n     file must be readable, and not a directory.  If we find one, return\n     its full filename; otherwise, return \u2018#f\u2019.  If FILENAME is\n     absolute, return it unchanged.  If given, EXTENSIONS is a list of\n     strings; for each directory in PATH, we search for FILENAME\n     concatenated with each EXTENSION.  If REQUIRE-EXTS? is true,\n     require that the returned file name have one of the given\n     extensions; if REQUIRE-EXTS? is not given, it defaults to \u2018#f\u2019.\n\n     For compatibility with Guile 1.8 and earlier, the C function takes\n     only three arguments.\n\n\u001f\nFile: guile.info,  Node: Character Encoding of Source Files,  Next: Delayed Evaluation,  Prev: Load Paths,  Up: Read/Load/Eval/Compile\n\n6.18.8 Character Encoding of Source Files\n-----------------------------------------\n\nScheme source code files are usually encoded in ASCII or UTF-8, but the\nbuilt-in reader can interpret other character encodings as well.  When\nGuile loads Scheme source code, it uses the \u2018file-encoding\u2019 procedure\n(described below) to try to guess the encoding of the file.  In the\nabsence of any hints, UTF-8 is assumed.  One way to provide a hint about\nthe encoding of a source file is to place a coding declaration in the\ntop 500 characters of the file.\n\n   A coding declaration has the form \u2018coding: XXXXXX\u2019, where \u2018XXXXXX\u2019 is\nthe name of a character encoding in which the source code file has been\nencoded.  The coding declaration must appear in a scheme comment.  It\ncan either be a semicolon-initiated comment, or the first block \u2018#!\u2019\ncomment in the file.\n\n   The name of the character encoding in the coding declaration is\ntypically lower case and containing only letters, numbers, and hyphens,\nas recognized by \u2018set-port-encoding!\u2019 (*note \u2018set-port-encoding!\u2019:\nPorts.).  Common examples of character encoding names are \u2018utf-8\u2019 and\n\u2018iso-8859-1\u2019, as defined by IANA\n(http://www.iana.org/assignments/character-sets).  Thus, the coding\ndeclaration is mostly compatible with Emacs.\n\n   However, there are some differences in encoding names recognized by\nEmacs and encoding names defined by IANA, the latter being essentially a\nsubset of the former.  For instance, \u2018latin-1\u2019 is a valid encoding name\nfor Emacs, but it\u2019s not according to the IANA standard, which Guile\nfollows; instead, you should use \u2018iso-8859-1\u2019, which is both understood\nby Emacs and dubbed by IANA (IANA writes it uppercase but Emacs wants it\nlowercase and Guile is case insensitive.)\n\n   For source code, only a subset of all possible character encodings\ncan be interpreted by the built-in source code reader.  Only those\ncharacter encodings in which ASCII text appears unmodified can be used.\nThis includes \u2018UTF-8\u2019 and \u2018ISO-8859-1\u2019 through \u2018ISO-8859-15\u2019.  The\nmulti-byte character encodings \u2018UTF-16\u2019 and \u2018UTF-32\u2019 may not be used\nbecause they are not compatible with ASCII.\n\n   There might be a scenario in which one would want to read non-ASCII\ncode from a port, such as with the function \u2018read\u2019, instead of with\n\u2018load\u2019.  If the port\u2019s character encoding is the same as the encoding of\nthe code to be read by the port, not other special handling is\nnecessary.  The port will automatically do the character encoding\nconversion.  The functions \u2018setlocale\u2019 or by \u2018set-port-encoding!\u2019 are\nused to set port encodings (*note Ports::).\n\n   If a port is used to read code of unknown character encoding, it can\naccomplish this in three steps.  First, the character encoding of the\nport should be set to ISO-8859-1 using \u2018set-port-encoding!\u2019.  Then, the\nprocedure \u2018file-encoding\u2019, described below, is used to scan for a coding\ndeclaration when reading from the port.  As a side effect, it rewinds\nthe port after its scan is complete.  After that, the port\u2019s character\nencoding should be set to the encoding returned by \u2018file-encoding\u2019, if\nany, again by using \u2018set-port-encoding!\u2019.  Then the code can be read as\nnormal.\n\n   Alternatively, one can use the \u2018#:guess-encoding\u2019 keyword argument of\n\u2018open-file\u2019 and related procedures.  *Note File Ports::.\n\n -- Scheme Procedure: file-encoding port\n -- C Function: scm_file_encoding (port)\n     Attempt to scan the first few hundred bytes from the PORT for hints\n     about its character encoding.  Return a string containing the\n     encoding name or \u2018#f\u2019 if the encoding cannot be determined.  The\n     port is rewound.\n\n     Currently, the only supported method is to look for an Emacs-like\n     character coding declaration (*note how Emacs recognizes file\n     encoding: (emacs)Recognize Coding.).  The coding declaration is of\n     the form \u2018coding: XXXXX\u2019 and must appear in a Scheme comment.\n     Additional heuristics may be added in the future.\n\n\u001f\nFile: guile.info,  Node: Delayed Evaluation,  Next: Local Evaluation,  Prev: Character Encoding of Source Files,  Up: Read/Load/Eval/Compile\n\n6.18.9 Delayed Evaluation\n-------------------------\n\nPromises are a convenient way to defer a calculation until its result is\nactually needed, and to run such a calculation only once.  Also *note\nSRFI-45::.\n\n -- syntax: delay expr\n     Return a promise object which holds the given EXPR expression,\n     ready to be evaluated by a later \u2018force\u2019.\n\n -- Scheme Procedure: promise? obj\n -- C Function: scm_promise_p (obj)\n     Return true if OBJ is a promise.\n\n -- Scheme Procedure: force p\n -- C Function: scm_force (p)\n     Return the value obtained from evaluating the EXPR in the given\n     promise P.  If P has previously been forced then its EXPR is not\n     evaluated again, instead the value obtained at that time is simply\n     returned.\n\n     During a \u2018force\u2019, an EXPR can call \u2018force\u2019 again on its own\n     promise, resulting in a recursive evaluation of that EXPR.  The\n     first evaluation to return gives the value for the promise.  Higher\n     evaluations run to completion in the normal way, but their results\n     are ignored, \u2018force\u2019 always returns the first value.\n\n\u001f\nFile: guile.info,  Node: Local Evaluation,  Next: Local Inclusion,  Prev: Delayed Evaluation,  Up: Read/Load/Eval/Compile\n\n6.18.10 Local Evaluation\n------------------------\n\nGuile includes a facility to capture a lexical environment, and later\nevaluate a new expression within that environment.  This code is\nimplemented in a module.\n\n     (use-modules (ice-9 local-eval))\n\n -- syntax: the-environment\n     Captures and returns a lexical environment for use with\n     \u2018local-eval\u2019 or \u2018local-compile\u2019.\n\n -- Scheme Procedure: local-eval exp env\n -- C Function: scm_local_eval (exp, env)\n -- Scheme Procedure: local-compile exp env [opts=()]\n     Evaluate or compile the expression EXP in the lexical environment\n     ENV.\n\n   Here is a simple example, illustrating that it is the variable that\ngets captured, not just its value at one point in time.\n\n     (define e (let ((x 100)) (the-environment)))\n     (define fetch-x (local-eval '(lambda () x) e))\n     (fetch-x)\n     \u21d2 100\n     (local-eval '(set! x 42) e)\n     (fetch-x)\n     \u21d2 42\n\n   While EXP is evaluated within the lexical environment of\n\u2018(the-environment)\u2019, it has the dynamic environment of the call to\n\u2018local-eval\u2019.\n\n   \u2018local-eval\u2019 and \u2018local-compile\u2019 can only evaluate expressions, not\ndefinitions.\n\n     (local-eval '(define foo 42)\n                 (let ((x 100)) (the-environment)))\n     \u21d2 syntax error: definition in expression context\n\n   Note that the current implementation of \u2018(the-environment)\u2019 only\ncaptures \u201cnormal\u201d lexical bindings, and pattern variables bound by\n\u2018syntax-case\u2019.  It does not currently capture local syntax transformers\nbound by \u2018let-syntax\u2019, \u2018letrec-syntax\u2019 or non-top-level \u2018define-syntax\u2019\nforms.  Any attempt to reference such captured syntactic keywords via\n\u2018local-eval\u2019 or \u2018local-compile\u2019 produces an error.\n\n\u001f\nFile: guile.info,  Node: Local Inclusion,  Next: Sandboxed Evaluation,  Prev: Local Evaluation,  Up: Read/Load/Eval/Compile\n\n6.18.11 Local Inclusion\n-----------------------\n\nThis section has discussed various means of linking Scheme code\ntogether: fundamentally, loading up files at run-time using \u2018load\u2019 and\n\u2018load-compiled\u2019.  Guile provides another option to compose parts of\nprograms together at expansion-time instead of at run-time.\n\n -- Scheme Syntax: include file-name\n     Open FILE-NAME, at expansion-time, and read the Scheme forms that\n     it contains, splicing them into the location of the \u2018include\u2019,\n     within a \u2018begin\u2019.\n\n     If FILE-NAME is a relative path, it is searched for relative to the\n     path that contains the file that the \u2018include\u2019 form appears in.\n\n   If you are a C programmer, if \u2018load\u2019 in Scheme is like \u2018dlopen\u2019 in C,\nconsider \u2018include\u2019 to be like the C preprocessor\u2019s \u2018#include\u2019.  When you\nuse \u2018include\u2019, it is as if the contents of the included file were typed\nin instead of the \u2018include\u2019 form.\n\n   Because the code is included at compile-time, it is available to the\nmacroexpander.  Syntax definitions in the included file are available to\nlater code in the form in which the \u2018include\u2019 appears, without the need\nfor \u2018eval-when\u2019.  (*Note Eval When::.)\n\n   For the same reason, compiling a form that uses \u2018include\u2019 results in\none compilation unit, composed of multiple files.  Loading the compiled\nfile is one \u2018stat\u2019 operation for the compilation unit, instead of \u20182*N\u2019\nin the case of \u2018load\u2019 (once for each loaded source file, and once each\ncorresponding compiled file, in the best case).\n\n   Unlike \u2018load\u2019, \u2018include\u2019 also works within nested lexical contexts.\nIt so happens that the optimizer works best within a lexical context,\nbecause all of the uses of bindings in a lexical context are visible, so\ncomposing files by including them within a \u2018(let () ...)\u2019 can sometimes\nlead to important speed improvements.\n\n   On the other hand, \u2018include\u2019 does have all the disadvantages of early\nbinding: once the code with the \u2018include\u2019 is compiled, no change to the\nincluded file is reflected in the future behavior of the including form.\n\n   Also, the particular form of \u2018include\u2019, which requires an absolute\npath, or a path relative to the current directory at compile-time, is\nnot very amenable to compiling the source in one place, but then\ninstalling the source to another place.  For this reason, Guile provides\nanother form, \u2018include-from-path\u2019, which looks for the source file to\ninclude within a load path.\n\n -- Scheme Syntax: include-from-path file-name\n     Like \u2018include\u2019, but instead of expecting \u2018file-name\u2019 to be an\n     absolute file name, it is expected to be a relative path to search\n     in the \u2018%load-path\u2019.\n\n   \u2018include-from-path\u2019 is more useful when you want to install all of\nthe source files for a package (as you should!).  It makes it possible\nto evaluate an installed file from source, instead of relying on the\n\u2018.go\u2019 file being up to date.\n\n\u001f\nFile: guile.info,  Node: Sandboxed Evaluation,  Next: REPL Servers,  Prev: Local Inclusion,  Up: Read/Load/Eval/Compile\n\n6.18.12 Sandboxed Evaluation\n----------------------------\n\nSometimes you would like to evaluate code that comes from an untrusted\nparty.  The safest way to do this is to buy a new computer, evaluate the\ncode on that computer, then throw the machine away.  However if you are\nunwilling to take this simple approach, Guile does include a limited\n\u201csandbox\u201d facility that can allow untrusted code to be evaluated with\nsome confidence.\n\n   To use the sandboxed evaluator, load its module:\n\n     (use-modules (ice-9 sandbox))\n\n   Guile\u2019s sandboxing facility starts with the ability to restrict the\ntime and space used by a piece of code.\n\n -- Scheme Procedure: call-with-time-limit limit thunk limit-reached\n     Call THUNK, but cancel it if LIMIT seconds of wall-clock time have\n     elapsed.  If the computation is cancelled, call LIMIT-REACHED in\n     tail position.  THUNK must not disable interrupts or prevent an\n     abort via a \u2018dynamic-wind\u2019 unwind handler.\n\n -- Scheme Procedure: call-with-allocation-limit limit thunk\n          limit-reached\n     Call THUNK, but cancel it if LIMIT bytes have been allocated.  If\n     the computation is cancelled, call LIMIT-REACHED in tail position.\n     THUNK must not disable interrupts or prevent an abort via a\n     \u2018dynamic-wind\u2019 unwind handler.\n\n     This limit applies to both stack and heap allocation.  The\n     computation will not be aborted before LIMIT bytes have been\n     allocated, but for the heap allocation limit, the check may be\n     postponed until the next garbage collection.\n\n     Note that as a current shortcoming, the heap size limit applies to\n     all threads; concurrent allocation by other unrelated threads\n     counts towards the allocation limit.\n\n -- Scheme Procedure: call-with-time-and-allocation-limits time-limit\n          allocation-limit thunk\n     Invoke THUNK in a dynamic extent in which its execution is limited\n     to TIME-LIMIT seconds of wall-clock time, and its allocation to\n     ALLOCATION-LIMIT bytes.  THUNK must not disable interrupts or\n     prevent an abort via a \u2018dynamic-wind\u2019 unwind handler.\n\n     If successful, return all values produced by invoking THUNK.  Any\n     uncaught exception thrown by the thunk will propagate out.  If the\n     time or allocation limit is exceeded, an exception will be thrown\n     to the \u2018limit-exceeded\u2019 key.\n\n   The time limit and stack limit are both very precise, but the heap\nlimit only gets checked asynchronously, after a garbage collection.  In\nparticular, if the heap is already very large, the number of allocated\nbytes between garbage collections will be large, and therefore the\nprecision of the check is reduced.\n\n   Additionally, due to the mechanism used by the allocation limit (the\n\u2018after-gc-hook\u2019), large single allocations like \u2018(make-vector #e1e7)\u2019\nare only detected after the allocation completes, even if the allocation\nitself causes garbage collection.  It\u2019s possible therefore for user code\nto not only exceed the allocation limit set, but also to exhaust all\navailable memory, causing out-of-memory conditions at any allocation\nsite.  Failure to allocate memory in Guile itself should be safe and\ncause an exception to be thrown, but most systems are not designed to\nhandle \u2018malloc\u2019 failures.  An allocation failure may therefore exercise\nunexpected code paths in your system, so it is a weakness of the sandbox\n(and therefore an interesting point of attack).\n\n   The main sandbox interface is \u2018eval-in-sandbox\u2019.\n\n -- Scheme Procedure: eval-in-sandbox exp [#:time-limit 0.1]\n          [#:allocation-limit #e10e6] [#:bindings all-pure-bindings]\n          [#:module (make-sandbox-module bindings)] [#:sever-module? #t]\n     Evaluate the Scheme expression EXP within an isolated \"sandbox\".\n     Limit its execution to TIME-LIMIT seconds of wall-clock time, and\n     limit its allocation to ALLOCATION-LIMIT bytes.\n\n     The evaluation will occur in MODULE, which defaults to the result\n     of calling \u2018make-sandbox-module\u2019 on BINDINGS, which itself defaults\n     to \u2018all-pure-bindings\u2019.  This is the core of the sandbox: creating\n     a scope for the expression that is \u201csafe\u201d.\n\n     A safe sandbox module has two characteristics.  Firstly, it will\n     not allow the expression being evaluated to avoid being cancelled\n     due to time or allocation limits.  This ensures that the expression\n     terminates in a timely fashion.\n\n     Secondly, a safe sandbox module will prevent the evaluation from\n     receiving information from previous evaluations, or from affecting\n     future evaluations.  All combinations of binding sets exported by\n     \u2018(ice-9 sandbox)\u2019 form safe sandbox modules.\n\n     The BINDINGS should be given as a list of import sets.  One import\n     set is a list whose car names an interface, like \u2018(ice-9 q)\u2019, and\n     whose cdr is a list of imports.  An import is either a bare symbol\n     or a pair of \u2018(OUT . IN)\u2019, where OUT and IN are both symbols and\n     denote the name under which a binding is exported from the module,\n     and the name under which to make the binding available,\n     respectively.  Note that BINDINGS is only used as an input to the\n     default initializer for the MODULE argument; if you pass\n     \u2018#:module\u2019, BINDINGS is unused.  If SEVER-MODULE? is true (the\n     default), the module will be unlinked from the global module tree\n     after the evaluation returns, to allow MOD to be garbage-collected.\n\n     If successful, return all values produced by EXP.  Any uncaught\n     exception thrown by the expression will propagate out.  If the time\n     or allocation limit is exceeded, an exception will be thrown to the\n     \u2018limit-exceeded\u2019 key.\n\n   Constructing a safe sandbox module is tricky in general.  Guile\ndefines an easy way to construct safe modules from predefined sets of\nbindings.  Before getting to that interface, here are some general notes\non safety.\n\n  1. The time and allocation limits rely on the ability to interrupt and\n     cancel a computation.  For this reason, no binding included in a\n     sandbox module should be able to indefinitely postpone interrupt\n     handling, nor should a binding be able to prevent an abort.  In\n     practice this second consideration means that \u2018dynamic-wind\u2019 should\n     not be included in any binding set.\n  2. The time and allocation limits apply only to the \u2018eval-in-sandbox\u2019\n     call.  If the call returns a procedure which is later called, no\n     limit is \u201cautomatically\u201d in place.  Users of \u2018eval-in-sandbox\u2019 have\n     to be very careful to reimpose limits when calling procedures that\n     escape from sandboxes.\n  3. Similarly, the dynamic environment of the \u2018eval-in-sandbox\u2019 call is\n     not necessarily in place when any procedure that escapes from the\n     sandbox is later called.\n\n     This detail prevents us from exposing \u2018primitive-eval\u2019 to the\n     sandbox, for two reasons.  The first is that it\u2019s possible for\n     legacy code to forge references to any binding, if the\n     \u2018allow-legacy-syntax-objects?\u2019 parameter is true.  The default for\n     this parameter is true; *note Syntax Transformer Helpers:: for the\n     details.  The parameter is bound to \u2018#f\u2019 for the duration of the\n     \u2018eval-in-sandbox\u2019 call itself, but that will not be in place during\n     calls to escaped procedures.\n\n     The second reason we don\u2019t expose \u2018primitive-eval\u2019 is that\n     \u2018primitive-eval\u2019 implicitly works in the current module, which for\n     an escaped procedure will probably be different than the module\n     that is current for the \u2018eval-in-sandbox\u2019 call itself.\n\n     The common denominator here is that if an interface exposed to the\n     sandbox relies on dynamic environments, it is easy to mistakenly\n     grant the sandboxed procedure additional capabilities in the form\n     of bindings that it should not have access to.  For this reason,\n     the default sets of predefined bindings do not depend on any\n     dynamically scoped value.\n  4. Mutation may allow a sandboxed evaluation to break some invariant\n     in users of data supplied to it.  A lot of code culturally doesn\u2019t\n     expect mutation, but if you hand mutable data to a sandboxed\n     evaluation and you also grant mutating capabilities to that\n     evaluation, then the sandboxed code may indeed mutate that data.\n     The default set of bindings to the sandbox do not include any\n     mutating primitives.\n\n     Relatedly, \u2018set!\u2019 may allow a sandbox to mutate a primitive,\n     invalidating many system-wide invariants.  Guile is currently quite\n     permissive when it comes to imported bindings and mutability.\n     Although \u2018set!\u2019 to a module-local or lexically bound variable would\n     be fine, we don\u2019t currently have an easy way to disallow \u2018set!\u2019 to\n     an imported binding, so currently no binding set includes \u2018set!\u2019.\n  5. Mutation may allow a sandboxed evaluation to keep state, or make a\n     communication mechanism with other code.  On the one hand this\n     sounds cool, but on the other hand maybe this is part of your\n     threat model.  Again, the default set of bindings doesn\u2019t include\n     mutating primitives, preventing sandboxed evaluations from keeping\n     state.\n  6. The sandbox should probably not be able to open a network\n     connection, or write to a file, or open a file from disk.  The\n     default binding set includes no interaction with the operating\n     system.\n\n   If you, dear reader, find the above discussion interesting, you will\nenjoy Jonathan Rees\u2019 dissertation, \u201cA Security Kernel Based on the\nLambda Calculus\u201d.\n\n -- Scheme Variable: all-pure-bindings\n     All \u201cpure\u201d bindings that together form a safe subset of those\n     bindings available by default to Guile user code.\n\n -- Scheme Variable: all-pure-and-impure-bindings\n     Like \u2018all-pure-bindings\u2019, but additionally including mutating\n     primitives like \u2018vector-set!\u2019.  This set is still safe in the sense\n     mentioned above, with the caveats about mutation.\n\n   The components of these composite sets are as follows:\n -- Scheme Variable: alist-bindings\n -- Scheme Variable: array-bindings\n -- Scheme Variable: bit-bindings\n -- Scheme Variable: bitvector-bindings\n -- Scheme Variable: char-bindings\n -- Scheme Variable: char-set-bindings\n -- Scheme Variable: clock-bindings\n -- Scheme Variable: core-bindings\n -- Scheme Variable: error-bindings\n -- Scheme Variable: fluid-bindings\n -- Scheme Variable: hash-bindings\n -- Scheme Variable: iteration-bindings\n -- Scheme Variable: keyword-bindings\n -- Scheme Variable: list-bindings\n -- Scheme Variable: macro-bindings\n -- Scheme Variable: nil-bindings\n -- Scheme Variable: number-bindings\n -- Scheme Variable: pair-bindings\n -- Scheme Variable: predicate-bindings\n -- Scheme Variable: procedure-bindings\n -- Scheme Variable: promise-bindings\n -- Scheme Variable: prompt-bindings\n -- Scheme Variable: regexp-bindings\n -- Scheme Variable: sort-bindings\n -- Scheme Variable: srfi-4-bindings\n -- Scheme Variable: string-bindings\n -- Scheme Variable: symbol-bindings\n -- Scheme Variable: unspecified-bindings\n -- Scheme Variable: variable-bindings\n -- Scheme Variable: vector-bindings\n -- Scheme Variable: version-bindings\n     The components of \u2018all-pure-bindings\u2019.\n\n -- Scheme Variable: mutating-alist-bindings\n -- Scheme Variable: mutating-array-bindings\n -- Scheme Variable: mutating-bitvector-bindings\n -- Scheme Variable: mutating-fluid-bindings\n -- Scheme Variable: mutating-hash-bindings\n -- Scheme Variable: mutating-list-bindings\n -- Scheme Variable: mutating-pair-bindings\n -- Scheme Variable: mutating-sort-bindings\n -- Scheme Variable: mutating-srfi-4-bindings\n -- Scheme Variable: mutating-string-bindings\n -- Scheme Variable: mutating-variable-bindings\n -- Scheme Variable: mutating-vector-bindings\n     The additional components of \u2018all-pure-and-impure-bindings\u2019.\n\n   Finally, what do you do with a binding set?  What is a binding set\nanyway?  \u2018make-sandbox-module\u2019 is here for you.\n\n -- Scheme Procedure: make-sandbox-module bindings\n     Return a fresh module that only contains BINDINGS.\n\n     The BINDINGS should be given as a list of import sets.  One import\n     set is a list whose car names an interface, like \u2018(ice-9 q)\u2019, and\n     whose cdr is a list of imports.  An import is either a bare symbol\n     or a pair of \u2018(OUT . IN)\u2019, where OUT and IN are both symbols and\n     denote the name under which a binding is exported from the module,\n     and the name under which to make the binding available,\n     respectively.\n\n   So you see that binding sets are just lists, and\n\u2018all-pure-and-impure-bindings\u2019 is really just the result of appending\nall of the component binding sets.\n\n\u001f\nFile: guile.info,  Node: REPL Servers,  Next: Cooperative REPL Servers,  Prev: Sandboxed Evaluation,  Up: Read/Load/Eval/Compile\n\n6.18.13 REPL Servers\n--------------------\n\nThe procedures in this section are provided by\n     (use-modules (system repl server))\n\n   When an application is written in Guile, it is often convenient to\nallow the user to be able to interact with it by evaluating Scheme\nexpressions in a REPL.\n\n   The procedures of this module allow you to spawn a \u201cREPL server\u201d,\nwhich permits interaction over a local or TCP connection.  Guile itself\nuses them internally to implement the \u2018--listen\u2019 switch, *note\nCommand-line Options::.\n\n -- Scheme Procedure: make-tcp-server-socket [#:host=#f] [#:addr]\n          [#:port=37146]\n     Return a stream socket bound to a given address ADDR and port\n     number PORT.  If the HOST is given, and ADDR is not, then the HOST\n     string is converted to an address.  If neither is given, we use the\n     loopback address.\n\n -- Scheme Procedure: make-unix-domain-server-socket\n          [#:path=\"/tmp/guile-socket\"]\n     Return a UNIX domain socket, bound to a given PATH.\n\n -- Scheme Procedure: run-server [server-socket]\n -- Scheme Procedure: spawn-server [server-socket]\n     Create and run a REPL, making it available over the given\n     SERVER-SOCKET.  If SERVER-SOCKET is not provided, it defaults to\n     the socket created by calling \u2018make-tcp-server-socket\u2019 with no\n     arguments.\n\n     \u2018run-server\u2019 runs the server in the current thread, whereas\n     \u2018spawn-server\u2019 runs the server in a new thread.\n\n -- Scheme Procedure: stop-server-and-clients!\n     Closes the connection on all running server sockets.\n\n     Please note that in the current implementation, the REPL threads\n     are cancelled without unwinding their stacks.  If any of them are\n     holding mutexes or are within a critical section, the results are\n     unspecified.\n\n\u001f\nFile: guile.info,  Node: Cooperative REPL Servers,  Prev: REPL Servers,  Up: Read/Load/Eval/Compile\n\n6.18.14 Cooperative REPL Servers\n--------------------------------\n\nThe procedures in this section are provided by\n     (use-modules (system repl coop-server))\n\n   Whereas ordinary REPL servers run in their own threads (*note REPL\nServers::), sometimes it is more convenient to provide REPLs that run at\nspecified times within an existing thread, for example in programs\nutilizing an event loop or in single-threaded programs.  This allows for\nsafe access and mutation of a program\u2019s data structures from the REPL,\nwithout concern for thread synchronization.\n\n   Although the REPLs are run in the thread that calls\n\u2018spawn-coop-repl-server\u2019 and \u2018poll-coop-repl-server\u2019, dedicated threads\nare spawned so that the calling thread is not blocked.  The spawned\nthreads read input for the REPLs and to listen for new connections.\n\n   Cooperative REPL servers must be polled periodically to evaluate any\npending expressions by calling \u2018poll-coop-repl-server\u2019 with the object\nreturned from \u2018spawn-coop-repl-server\u2019.  The thread that calls\n\u2018poll-coop-repl-server\u2019 will be blocked for as long as the expression\ntakes to be evaluated or if the debugger is entered.\n\n -- Scheme Procedure: spawn-coop-repl-server [server-socket]\n     Create and return a new cooperative REPL server object, and spawn a\n     new thread to listen for connections on SERVER-SOCKET.  Proper\n     functioning of the REPL server requires that\n     \u2018poll-coop-repl-server\u2019 be called periodically on the returned\n     server object.\n\n -- Scheme Procedure: poll-coop-repl-server coop-server\n     Poll the cooperative REPL server COOP-SERVER and apply a pending\n     operation if there is one, such as evaluating an expression typed\n     at the REPL prompt.  This procedure must be called from the same\n     thread that called \u2018spawn-coop-repl-server\u2019.\n\n\u001f\nFile: guile.info,  Node: Memory Management,  Next: Modules,  Prev: Read/Load/Eval/Compile,  Up: API Reference\n\n6.19 Memory Management and Garbage Collection\n=============================================\n\nGuile uses a _garbage collector_ to manage most of its objects.  While\nthe garbage collector is designed to be mostly invisible, you sometimes\nneed to interact with it explicitly.\n\n   See *note Garbage Collection:: for a general discussion of how\ngarbage collection relates to using Guile from C.\n\n* Menu:\n\n* Garbage Collection Functions::\n* Memory Blocks::\n* Weak References::\n* Guardians::\n\n\u001f\nFile: guile.info,  Node: Garbage Collection Functions,  Next: Memory Blocks,  Up: Memory Management\n\n6.19.1 Function related to Garbage Collection\n---------------------------------------------\n\n -- Scheme Procedure: gc\n -- C Function: scm_gc ()\n     Finds all of the \u201clive\u201d \u2018SCM\u2019 objects and reclaims for further use\n     those that are no longer accessible.  You normally don\u2019t need to\n     call this function explicitly.  Its functionality is invoked\n     automatically as needed.\n\n -- C Function: SCM scm_gc_protect_object (SCM OBJ)\n     Protects OBJ from being freed by the garbage collector, when it\n     otherwise might be.  When you are done with the object, call\n     \u2018scm_gc_unprotect_object\u2019 on the object.  Calls to\n     \u2018scm_gc_protect_object\u2019/\u2018scm_gc_unprotect_object\u2019 can be nested,\n     and the object remains protected until it has been unprotected as\n     many times as it was protected.  It is an error to unprotect an\n     object more times than it has been protected.  Returns the SCM\n     object it was passed.\n\n     Note that storing OBJ in a C global variable has the same\n     effect(1).\n\n -- C Function: SCM scm_gc_unprotect_object (SCM OBJ)\n\n     Unprotects an object from the garbage collector which was protected\n     by \u2018scm_gc_unprotect_object\u2019.  Returns the SCM object it was\n     passed.\n\n -- C Function: SCM scm_permanent_object (SCM OBJ)\n\n     Similar to \u2018scm_gc_protect_object\u2019 in that it causes the collector\n     to always mark the object, except that it should not be nested\n     (only call \u2018scm_permanent_object\u2019 on an object once), and it has no\n     corresponding unpermanent function.  Once an object is declared\n     permanent, it will never be freed.  Returns the SCM object it was\n     passed.\n\n -- C Macro: void scm_remember_upto_here_1 (SCM obj)\n -- C Macro: void scm_remember_upto_here_2 (SCM obj1, SCM obj2)\n     Create a reference to the given object or objects, so they\u2019re\n     certain to be present on the stack or in a register and hence will\n     not be freed by the garbage collector before this point.\n\n     Note that these functions can only be applied to ordinary C local\n     variables (ie. \u201cautomatics\u201d).  Objects held in global or static\n     variables or some malloced block or the like cannot be protected\n     with this mechanism.\n\n -- Scheme Procedure: gc-stats\n -- C Function: scm_gc_stats ()\n     Return an association list of statistics about Guile\u2019s current use\n     of storage.\n\n -- Scheme Procedure: gc-live-object-stats\n -- C Function: scm_gc_live_object_stats ()\n     Return an alist of statistics of the current live objects.\n\n -- Function: void scm_gc_mark (SCM X)\n     Mark the object X, and recurse on any objects X refers to.  If X\u2019s\n     mark bit is already set, return immediately.  This function must\n     only be called during the mark-phase of garbage collection,\n     typically from a smob _mark_ function.\n\n   ---------- Footnotes ----------\n\n   (1) In Guile up to version 1.8, C global variables were not visited\nby the garbage collector in the mark phase; hence,\n\u2018scm_gc_protect_object\u2019 was the only way in C to prevent a Scheme object\nfrom being freed.\n\n\u001f\nFile: guile.info,  Node: Memory Blocks,  Next: Weak References,  Prev: Garbage Collection Functions,  Up: Memory Management\n\n6.19.2 Memory Blocks\n--------------------\n\nIn C programs, dynamic management of memory blocks is normally done with\nthe functions malloc, realloc, and free.  Guile has additional functions\nfor dynamic memory allocation that are integrated into the garbage\ncollector and the error reporting system.\n\n   Memory blocks that are associated with Scheme objects (for example a\nforeign object) should be allocated with \u2018scm_gc_malloc\u2019 or\n\u2018scm_gc_malloc_pointerless\u2019.  These two functions will either return a\nvalid pointer or signal an error.  Memory blocks allocated this way may\nbe released explicitly; however, this is not strictly needed, and we\nrecommend _not_ calling \u2018scm_gc_free\u2019.  All memory allocated with\n\u2018scm_gc_malloc\u2019 or \u2018scm_gc_malloc_pointerless\u2019 is automatically\nreclaimed when the garbage collector no longer sees any live reference\nto it(1).\n\n   When garbage collection occurs, Guile will visit the words in memory\nallocated with \u2018scm_gc_malloc\u2019, looking for live pointers.  This means\nthat if \u2018scm_gc_malloc\u2019-allocated memory contains a pointer to some\nother part of the memory, the garbage collector notices it and prevents\nit from being reclaimed(2).  Conversely, memory allocated with\n\u2018scm_gc_malloc_pointerless\u2019 is assumed to be \u201cpointer-less\u201d and is not\nscanned for pointers.\n\n   For memory that is not associated with a Scheme object, you can use\n\u2018scm_malloc\u2019 instead of \u2018malloc\u2019.  Like \u2018scm_gc_malloc\u2019, it will either\nreturn a valid pointer or signal an error.  However, it will not assume\nthat the new memory block can be freed by a garbage collection.  The\nmemory must be explicitly freed with \u2018free\u2019.\n\n   There is also \u2018scm_gc_realloc\u2019 and \u2018scm_realloc\u2019, to be used in place\nof \u2018realloc\u2019 when appropriate, and \u2018scm_gc_calloc\u2019 and \u2018scm_calloc\u2019, to\nbe used in place of \u2018calloc\u2019 when appropriate.\n\n   The function \u2018scm_dynwind_free\u2019 can be useful when memory should be\nfreed with libc\u2019s \u2018free\u2019 when leaving a dynwind context, *Note Dynamic\nWind::.\n\n -- C Function: void * scm_malloc (size_t SIZE)\n -- C Function: void * scm_calloc (size_t SIZE)\n     Allocate SIZE bytes of memory and return a pointer to it.  When\n     SIZE is 0, return \u2018NULL\u2019.  When not enough memory is available,\n     signal an error.  This function runs the GC to free up some memory\n     when it deems it appropriate.\n\n     The memory is allocated by the libc \u2018malloc\u2019 function and can be\n     freed with \u2018free\u2019.  There is no \u2018scm_free\u2019 function to go with\n     \u2018scm_malloc\u2019 to make it easier to pass memory back and forth\n     between different modules.\n\n     The function \u2018scm_calloc\u2019 is similar to \u2018scm_malloc\u2019, but\n     initializes the block of memory to zero as well.\n\n     These functions will (indirectly) call\n     \u2018scm_gc_register_allocation\u2019.\n\n -- C Function: void * scm_realloc (void *MEM, size_t NEW_SIZE)\n     Change the size of the memory block at MEM to NEW_SIZE and return\n     its new location.  When NEW_SIZE is 0, this is the same as calling\n     \u2018free\u2019 on MEM and \u2018NULL\u2019 is returned.  When MEM is \u2018NULL\u2019, this\n     function behaves like \u2018scm_malloc\u2019 and allocates a new block of\n     size NEW_SIZE.\n\n     When not enough memory is available, signal an error.  This\n     function runs the GC to free up some memory when it deems it\n     appropriate.\n\n     This function will call \u2018scm_gc_register_allocation\u2019.\n\n -- C Function: void * scm_gc_malloc (size_t SIZE, const char *WHAT)\n -- C Function: void * scm_gc_malloc_pointerless (size_t SIZE, const\n          char *WHAT)\n -- C Function: void * scm_gc_realloc (void *MEM, size_t OLD_SIZE,\n          size_t NEW_SIZE, const char *WHAT);\n -- C Function: void * scm_gc_calloc (size_t SIZE, const char *WHAT)\n     Allocate SIZE bytes of automatically-managed memory.  The memory is\n     automatically freed when no longer referenced from any live memory\n     block.\n\n     When garbage collection occurs, Guile will visit the words in\n     memory allocated with \u2018scm_gc_malloc\u2019 or \u2018scm_gc_calloc\u2019, looking\n     for pointers to other memory allocations that are managed by the\n     GC. In contrast, memory allocated by \u2018scm_gc_malloc_pointerless\u2019 is\n     not scanned for pointers.\n\n     The \u2018scm_gc_realloc\u2019 call preserves the \u201cpointerlessness\u201d of the\n     memory area pointed to by MEM.  Note that you need to pass the old\n     size of a reallocated memory block as well.  See below for a\n     motivation.\n\n -- C Function: void scm_gc_free (void *MEM, size_t SIZE, const char\n          *WHAT)\n     Explicitly free the memory block pointed to by MEM, which was\n     previously allocated by one of the above \u2018scm_gc\u2019 functions.  This\n     function is almost always unnecessary, except for codebases that\n     still need to compile on Guile 1.8.\n\n     Note that you need to explicitly pass the SIZE parameter.  This is\n     done since it should normally be easy to provide this parameter\n     (for memory that is associated with GC controlled objects) and help\n     keep the memory management overhead very low.  However, in Guile\n     2.x, SIZE is always ignored.\n\n -- C Function: void scm_gc_register_allocation (size_t SIZE)\n     Informs the garbage collector that SIZE bytes have been allocated,\n     which the collector would otherwise not have known about.\n\n     In general, Scheme will decide to collect garbage only after some\n     amount of memory has been allocated.  Calling this function will\n     make the Scheme garbage collector know about more allocation, and\n     thus run more often (as appropriate).\n\n     It is especially important to call this function when large\n     unmanaged allocations, like images, may be freed by small Scheme\n     allocations, like foreign objects.\n\n -- C Function: void scm_dynwind_free (void *mem)\n     Equivalent to \u2018scm_dynwind_unwind_handler (free, MEM,\n     SCM_F_WIND_EXPLICITLY)\u2019.  That is, the memory block at MEM will be\n     freed (using \u2018free\u2019 from the C library) when the current dynwind is\n     left.\n\n -- Scheme Procedure: malloc-stats\n     Return an alist ((WHAT .  N) ...)  describing number of malloced\n     objects.  WHAT is the second argument to \u2018scm_gc_malloc\u2019, N is the\n     number of objects of that type currently allocated.\n\n     This function is only available if the \u2018GUILE_DEBUG_MALLOC\u2019\n     preprocessor macro was defined when Guile was compiled.\n\n   ---------- Footnotes ----------\n\n   (1) In Guile up to version 1.8, memory allocated with \u2018scm_gc_malloc\u2019\n_had_ to be freed with \u2018scm_gc_free\u2019.\n\n   (2) In Guile up to 1.8, memory allocated with \u2018scm_gc_malloc\u2019 was\n_not_ visited by the collector in the mark phase.  Consequently, the GC\nhad to be told explicitly about pointers to live objects contained in\nthe memory block, e.g., via SMOB mark functions (*note\n\u2018scm_set_smob_mark\u2019: Smobs.)\n\n\u001f\nFile: guile.info,  Node: Weak References,  Next: Guardians,  Prev: Memory Blocks,  Up: Memory Management\n\n6.19.3 Weak References\n----------------------\n\n[FIXME: This chapter is based on Mikael Djurfeldt\u2019s answer to a question\nby Michael Livshin.  Any mistakes are not theirs, of course.  ]\n\n   Weak references let you attach bookkeeping information to data so\nthat the additional information automatically disappears when the\noriginal data is no longer in use and gets garbage collected.  In a weak\nkey hash, the hash entry for that key disappears as soon as the key is\nno longer referenced from anywhere else.  For weak value hashes, the\nsame happens as soon as the value is no longer in use.  Entries in a\ndoubly weak hash disappear when either the key or the value are not used\nanywhere else anymore.\n\n   Object properties offer the same kind of functionality as weak key\nhashes in many situations.  (*note Object Properties::)\n\n   Here\u2019s an example (a little bit strained perhaps, but one of the\nexamples is actually used in Guile):\n\n   Assume that you\u2019re implementing a debugging system where you want to\nassociate information about filename and position of source code\nexpressions with the expressions themselves.\n\n   Hashtables can be used for that, but if you use ordinary hash tables\nit will be impossible for the scheme interpreter to \"forget\" old source\nwhen, for example, a file is reloaded.\n\n   To implement the mapping from source code expressions to positional\ninformation it is necessary to use weak-key tables since we don\u2019t want\nthe expressions to be remembered just because they are in our table.\n\n   To implement a mapping from source file line numbers to source code\nexpressions you would use a weak-value table.\n\n   To implement a mapping from source code expressions to the procedures\nthey constitute a doubly-weak table has to be used.\n\n* Menu:\n\n* Weak hash tables::\n* Weak vectors::\n\n\u001f\nFile: guile.info,  Node: Weak hash tables,  Next: Weak vectors,  Up: Weak References\n\n6.19.3.1 Weak hash tables\n.........................\n\n -- Scheme Procedure: make-weak-key-hash-table [size]\n -- Scheme Procedure: make-weak-value-hash-table [size]\n -- Scheme Procedure: make-doubly-weak-hash-table [size]\n -- C Function: scm_make_weak_key_hash_table (size)\n -- C Function: scm_make_weak_value_hash_table (size)\n -- C Function: scm_make_doubly_weak_hash_table (size)\n     Return a weak hash table with SIZE buckets.  As with any hash\n     table, choosing a good size for the table requires some caution.\n\n     You can modify weak hash tables in exactly the same way you would\n     modify regular hash tables, with the exception of the routines that\n     act on handles.  Weak tables have a different implementation behind\n     the scenes that doesn\u2019t have handles.  *note Hash Tables::, for\n     more on \u2018hashq-ref\u2019 et al.\n\n   Note that in a weak-key hash table, the reference to the value is\nstrong.  This means that if the value references the key, even\nindirectly, the key will never be collected, which can lead to a memory\nleak.  The reverse is true for weak value tables.\n\n -- Scheme Procedure: weak-key-hash-table? obj\n -- Scheme Procedure: weak-value-hash-table? obj\n -- Scheme Procedure: doubly-weak-hash-table? obj\n -- C Function: scm_weak_key_hash_table_p (obj)\n -- C Function: scm_weak_value_hash_table_p (obj)\n -- C Function: scm_doubly_weak_hash_table_p (obj)\n     Return \u2018#t\u2019 if OBJ is the specified weak hash table.  Note that a\n     doubly weak hash table is neither a weak key nor a weak value hash\n     table.\n\n\u001f\nFile: guile.info,  Node: Weak vectors,  Prev: Weak hash tables,  Up: Weak References\n\n6.19.3.2 Weak vectors\n.....................\n\n -- Scheme Procedure: make-weak-vector size [fill]\n -- C Function: scm_make_weak_vector (size, fill)\n     Return a weak vector with SIZE elements.  If the optional argument\n     FILL is given, all entries in the vector will be set to FILL.  The\n     default value for FILL is the empty list.\n\n -- Scheme Procedure: weak-vector elem ...\n -- Scheme Procedure: list->weak-vector l\n -- C Function: scm_weak_vector (l)\n     Construct a weak vector from a list: \u2018weak-vector\u2019 uses the list of\n     its arguments while \u2018list->weak-vector\u2019 uses its only argument L (a\n     list) to construct a weak vector the same way \u2018list->vector\u2019 would.\n\n -- Scheme Procedure: weak-vector? obj\n -- C Function: scm_weak_vector_p (obj)\n     Return \u2018#t\u2019 if OBJ is a weak vector.\n\n -- Scheme Procedure: weak-vector-ref wvect k\n -- C Function: scm_weak_vector_ref (wvect, k)\n     Return the Kth element of the weak vector WVECT, or \u2018#f\u2019 if that\n     element has been collected.\n\n -- Scheme Procedure: weak-vector-set! wvect k elt\n -- C Function: scm_weak_vector_set_x (wvect, k, elt)\n     Set the Kth element of the weak vector WVECT to ELT.\n\n\u001f\nFile: guile.info,  Node: Guardians,  Prev: Weak References,  Up: Memory Management\n\n6.19.4 Guardians\n----------------\n\nGuardians provide a way to be notified about objects that would\notherwise be collected as garbage.  Guarding them prevents the objects\nfrom being collected and cleanup actions can be performed on them, for\nexample.\n\n   See R. Kent Dybvig, Carl Bruggeman, and David Eby (1993) \"Guardians\nin a Generation-Based Garbage Collector\".  ACM SIGPLAN Conference on\nProgramming Language Design and Implementation, June 1993.\n\n -- Scheme Procedure: make-guardian\n -- C Function: scm_make_guardian ()\n     Create a new guardian.  A guardian protects a set of objects from\n     garbage collection, allowing a program to apply cleanup or other\n     actions.\n\n     \u2018make-guardian\u2019 returns a procedure representing the guardian.\n     Calling the guardian procedure with an argument adds the argument\n     to the guardian\u2019s set of protected objects.  Calling the guardian\n     procedure without an argument returns one of the protected objects\n     which are ready for garbage collection, or \u2018#f\u2019 if no such object\n     is available.  Objects which are returned in this way are removed\n     from the guardian.\n\n     You can put a single object into a guardian more than once and you\n     can put a single object into more than one guardian.  The object\n     will then be returned multiple times by the guardian procedures.\n\n     An object is eligible to be returned from a guardian when it is no\n     longer referenced from outside any guardian.\n\n     There is no guarantee about the order in which objects are returned\n     from a guardian.  If you want to impose an order on finalization\n     actions, for example, you can do that by keeping objects alive in\n     some global data structure until they are no longer needed for\n     finalizing other objects.\n\n     Being an element in a weak vector, a key in a hash table with weak\n     keys, or a value in a hash table with weak values does not prevent\n     an object from being returned by a guardian.  But as long as an\n     object can be returned from a guardian it will not be removed from\n     such a weak vector or hash table.  In other words, a weak link does\n     not prevent an object from being considered collectable, but being\n     inside a guardian prevents a weak link from being broken.\n\n     A key in a weak key hash table can be thought of as having a strong\n     reference to its associated value as long as the key is accessible.\n     Consequently, when the key is only accessible from within a\n     guardian, the reference from the key to the value is also\n     considered to be coming from within a guardian.  Thus, if there is\n     no other reference to the value, it is eligible to be returned from\n     a guardian.\n\n\u001f\nFile: guile.info,  Node: Modules,  Next: Foreign Function Interface,  Prev: Memory Management,  Up: API Reference\n\n6.20 Modules\n============\n\nWhen programs become large, naming conflicts can occur when a function\nor global variable defined in one file has the same name as a function\nor global variable in another file.  Even just a _similarity_ between\nfunction names can cause hard-to-find bugs, since a programmer might\ntype the wrong function name.\n\n   The approach used to tackle this problem is called _information\nencapsulation_, which consists of packaging functional units into a\ngiven name space that is clearly separated from other name spaces.\n\n   The language features that allow this are usually called _the module\nsystem_ because programs are broken up into modules that are compiled\nseparately (or loaded separately in an interpreter).\n\n   Older languages, like C, have limited support for name space\nmanipulation and protection.  In C a variable or function is public by\ndefault, and can be made local to a module with the \u2018static\u2019 keyword.\nBut you cannot reference public variables and functions from another\nmodule with different names.\n\n   More advanced module systems have become a common feature in recently\ndesigned languages: ML, Python, Perl, and Modula 3 all allow the\n_renaming_ of objects from a foreign module, so they will not clutter\nthe global name space.\n\n   In addition, Guile offers variables as first-class objects.  They can\nbe used for interacting with the module system.\n\n* Menu:\n\n* General Information about Modules::  Guile module basics.\n* Using Guile Modules::         How to use existing modules.\n* Creating Guile Modules::      How to package your code into modules.\n* Modules and the File System:: Installing modules in the file system.\n* R6RS Version References::     Using version numbers with modules.\n* R6RS Libraries::              The library and import forms.\n* Variables::                   First-class variables.\n* Module System Reflection::    First-class modules.\n* Accessing Modules from C::    How to work with modules with C code.\n* provide and require::         The SLIB feature mechanism.\n* Environments::                R5RS top-level environments.\n\n\u001f\nFile: guile.info,  Node: General Information about Modules,  Next: Using Guile Modules,  Up: Modules\n\n6.20.1 General Information about Modules\n----------------------------------------\n\nA Guile module can be thought of as a collection of named procedures,\nvariables and macros.  More precisely, it is a set of \u201cbindings\u201d of\nsymbols (names) to Scheme objects.\n\n   Within a module, all bindings are visible.  Certain bindings can be\ndeclared \u201cpublic\u201d, in which case they are added to the module\u2019s\nso-called \u201cexport list\u201d; this set of public bindings is called the\nmodule\u2019s \u201cpublic interface\u201d (*note Creating Guile Modules::).\n\n   A client module \u201cuses\u201d a providing module\u2019s bindings by either\naccessing the providing module\u2019s public interface, or by building a\ncustom interface (and then accessing that).  In a custom interface, the\nclient module can \u201cselect\u201d which bindings to access and can also\nalgorithmically \u201crename\u201d bindings.  In contrast, when using the\nproviding module\u2019s public interface, the entire export list is available\nwithout renaming (*note Using Guile Modules::).\n\n   All Guile modules have a unique \u201cmodule name\u201d, for example \u2018(ice-9\npopen)\u2019 or \u2018(srfi srfi-11)\u2019.  Module names are lists of one or more\nsymbols.\n\n   When Guile goes to use an interface from a module, for example\n\u2018(ice-9 popen)\u2019, Guile first looks to see if it has loaded \u2018(ice-9\npopen)\u2019 for any reason.  If the module has not been loaded yet, Guile\nsearches a \u201cload path\u201d for a file that might define it, and loads that\nfile.\n\n   The following subsections go into more detail on using, creating,\ninstalling, and otherwise manipulating modules and the module system.\n\n\u001f\nFile: guile.info,  Node: Using Guile Modules,  Next: Creating Guile Modules,  Prev: General Information about Modules,  Up: Modules\n\n6.20.2 Using Guile Modules\n--------------------------\n\nTo use a Guile module is to access either its public interface or a\ncustom interface (*note General Information about Modules::).  Both\ntypes of access are handled by the syntactic form \u2018use-modules\u2019, which\naccepts one or more interface specifications and, upon evaluation,\narranges for those interfaces to be available to the current module.\nThis process may include locating and loading code for a given module if\nthat code has not yet been loaded, following \u2018%load-path\u2019 (*note Modules\nand the File System::).\n\n   An \u201cinterface specification\u201d has one of two forms.  The first\nvariation is simply to name the module, in which case its public\ninterface is the one accessed.  For example:\n\n     (use-modules (ice-9 popen))\n\n   Here, the interface specification is \u2018(ice-9 popen)\u2019, and the result\nis that the current module now has access to \u2018open-pipe\u2019, \u2018close-pipe\u2019,\n\u2018open-input-pipe\u2019, and so on (*note Pipes::).\n\n   Note in the previous example that if the current module had already\ndefined \u2018open-pipe\u2019, that definition would be overwritten by the\ndefinition in \u2018(ice-9 popen)\u2019.  For this reason (and others), there is a\nsecond variation of interface specification that not only names a module\nto be accessed, but also selects bindings from it and renames them to\nsuit the current module\u2019s needs.  For example:\n\n     (use-modules ((ice-9 popen)\n                   #:select ((open-pipe . pipe-open) close-pipe)\n                   #:renamer (symbol-prefix-proc 'unixy:)))\n\nor more simply:\n\n     (use-modules ((ice-9 popen)\n                   #:select ((open-pipe . pipe-open) close-pipe)\n                   #:prefix unixy:))\n\n   Here, the interface specification is more complex than before, and\nthe result is that a custom interface with only two bindings is created\nand subsequently accessed by the current module.  The mapping of old to\nnew names is as follows:\n\n     (ice-9 popen) sees:             current module sees:\n     open-pipe                       unixy:pipe-open\n     close-pipe                      unixy:close-pipe\n\n   This example also shows how to use the convenience procedure\n\u2018symbol-prefix-proc\u2019.\n\n   You can also directly refer to bindings in a module by using the \u2018@\u2019\nsyntax.  For example, instead of using the \u2018use-modules\u2019 statement from\nabove and writing \u2018unixy:pipe-open\u2019 to refer to the \u2018pipe-open\u2019 from the\n\u2018(ice-9 popen)\u2019, you could also write \u2018(@ (ice-9 popen) open-pipe)\u2019.\nThus an alternative to the complete \u2018use-modules\u2019 statement would be\n\n     (define unixy:pipe-open (@ (ice-9 popen) open-pipe))\n     (define unixy:close-pipe (@ (ice-9 popen) close-pipe))\n\n   There is also \u2018@@\u2019, which can be used like \u2018@\u2019, but does not check\nwhether the variable that is being accessed is actually exported.  Thus,\n\u2018@@\u2019 can be thought of as the impolite version of \u2018@\u2019 and should only be\nused as a last resort or for debugging, for example.\n\n   Note that just as with a \u2018use-modules\u2019 statement, any module that has\nnot yet been loaded will be loaded when referenced by a \u2018@\u2019 or \u2018@@\u2019\nform.\n\n   You can also use the \u2018@\u2019 and \u2018@@\u2019 syntaxes as the target of a \u2018set!\u2019\nwhen the binding refers to a variable.\n\n -- Scheme Procedure: symbol-prefix-proc prefix-sym\n     Return a procedure that prefixes its arg (a symbol) with\n     PREFIX-SYM.\n\n -- syntax: use-modules spec ...\n     Resolve each interface specification SPEC into an interface and\n     arrange for these to be accessible by the current module.  The\n     return value is unspecified.\n\n     SPEC can be a list of symbols, in which case it names a module\n     whose public interface is found and used.\n\n     SPEC can also be of the form:\n\n           (MODULE-NAME [#:select SELECTION]\n                        [#:prefix PREFIX]\n                        [#:renamer RENAMER])\n\n     in which case a custom interface is newly created and used.\n     MODULE-NAME is a list of symbols, as above; SELECTION is a list of\n     selection-specs; PREFIX is a symbol that is prepended to imported\n     names; and RENAMER is a procedure that takes a symbol and returns\n     its new name.  A selection-spec is either a symbol or a pair of\n     symbols \u2018(ORIG . SEEN)\u2019, where ORIG is the name in the used module\n     and SEEN is the name in the using module.  Note that SEEN is also\n     modified by PREFIX and RENAMER.\n\n     The \u2018#:select\u2019, \u2018#:prefix\u2019, and \u2018#:renamer\u2019 clauses are optional.\n     If all are omitted, the returned interface has no bindings.  If the\n     \u2018#:select\u2019 clause is omitted, PREFIX and RENAMER operate on the\n     used module\u2019s public interface.\n\n     In addition to the above, SPEC can also include a \u2018#:version\u2019\n     clause, of the form:\n\n           #:version VERSION-SPEC\n\n     where VERSION-SPEC is an R6RS-compatible version reference.  An\n     error will be signaled in the case in which a module with the same\n     name has already been loaded, if that module specifies a version\n     and that version is not compatible with VERSION-SPEC.  *Note R6RS\n     Version References::, for more on version references.\n\n     If the module name is not resolvable, \u2018use-modules\u2019 will signal an\n     error.\n\n -- syntax: @ module-name binding-name\n     Refer to the binding named BINDING-NAME in module MODULE-NAME.  The\n     binding must have been exported by the module.\n\n -- syntax: @@ module-name binding-name\n     Refer to the binding named BINDING-NAME in module MODULE-NAME.  The\n     binding must not have been exported by the module.  This syntax is\n     only intended for debugging purposes or as a last resort.\n\n\u001f\nFile: guile.info,  Node: Creating Guile Modules,  Next: Modules and the File System,  Prev: Using Guile Modules,  Up: Modules\n\n6.20.3 Creating Guile Modules\n-----------------------------\n\nWhen you want to create your own modules, you have to take the following\nsteps:\n\n   \u2022 Create a Scheme source file and add all variables and procedures\n     you wish to export, or which are required by the exported\n     procedures.\n\n   \u2022 Add a \u2018define-module\u2019 form at the beginning.\n\n   \u2022 Export all bindings which should be in the public interface, either\n     by using \u2018define-public\u2019 or \u2018export\u2019 (both documented below).\n\n -- syntax: define-module module-name option ...\n     MODULE-NAME is a list of one or more symbols.\n\n          (define-module (ice-9 popen))\n\n     \u2018define-module\u2019 makes this module available to Guile programs under\n     the given MODULE-NAME.\n\n     OPTION ... are keyword/value pairs which specify more about the\n     defined module.  The recognized options and their meaning are shown\n     in the following table.\n\n     \u2018#:use-module INTERFACE-SPECIFICATION\u2019\n          Equivalent to a \u2018(use-modules INTERFACE-SPECIFICATION)\u2019 (*note\n          Using Guile Modules::).\n\n     \u2018#:autoload MODULE SYMBOL-LIST\u2019\n          Load MODULE when any of SYMBOL-LIST are accessed.  For\n          example,\n\n               (define-module (my mod)\n                 #:autoload (srfi srfi-1) (partition delete-duplicates))\n               ...\n               (if something\n                   (set! foo (delete-duplicates ...)))\n\n          When a module is autoloaded, all its bindings become\n          available.  SYMBOL-LIST is just those that will first trigger\n          the load.\n\n          An autoload is a good way to put off loading a big module\n          until it\u2019s really needed, for instance for faster startup or\n          if it will only be needed in certain circumstances.\n\n          \u2018@\u2019 can do a similar thing (*note Using Guile Modules::), but\n          in that case an \u2018@\u2019 form must be written every time a binding\n          from the module is used.\n\n     \u2018#:export LIST\u2019\n          Export all identifiers in LIST which must be a list of symbols\n          or pairs of symbols.  This is equivalent to \u2018(export LIST)\u2019 in\n          the module body.\n\n     \u2018#:re-export LIST\u2019\n          Re-export all identifiers in LIST which must be a list of\n          symbols or pairs of symbols.  The symbols in LIST must be\n          imported by the current module from other modules.  This is\n          equivalent to \u2018re-export\u2019 below.\n\n     \u2018#:replace LIST\u2019\n          Export all identifiers in LIST (a list of symbols or pairs of\n          symbols) and mark them as \u201creplacing bindings\u201d.  In the module\n          user\u2019s name space, this will have the effect of replacing any\n          binding with the same name that is not also \u201creplacing\u201d.\n          Normally a replacement results in an \u201coverride\u201d warning\n          message, \u2018#:replace\u2019 avoids that.\n\n          In general, a module that exports a binding for which the\n          \u2018(guile)\u2019 module already has a definition should use\n          \u2018#:replace\u2019 instead of \u2018#:export\u2019.  \u2018#:replace\u2019, in a sense,\n          lets Guile know that the module _purposefully_ replaces a core\n          binding.  It is important to note, however, that this binding\n          replacement is confined to the name space of the module user.\n          In other words, the value of the core binding in question\n          remains unchanged for other modules.\n\n          Note that although it is often a good idea for the replaced\n          binding to remain compatible with a binding in \u2018(guile)\u2019, to\n          avoid surprising the user, sometimes the bindings will be\n          incompatible.  For example, SRFI-19 exports its own version of\n          \u2018current-time\u2019 (*note SRFI-19 Time::) which is not compatible\n          with the core \u2018current-time\u2019 function (*note Time::).  Guile\n          assumes that a user importing a module knows what she is\n          doing, and uses \u2018#:replace\u2019 for this binding rather than\n          \u2018#:export\u2019.\n\n          A \u2018#:replace\u2019 clause is equivalent to \u2018(export! LIST)\u2019 in the\n          module body.\n\n          The \u2018#:duplicates\u2019 (see below) provides fine-grain control\n          about duplicate binding handling on the module-user side.\n\n     \u2018#:version LIST\u2019\n          Specify a version for the module in the form of LIST, a list\n          of zero or more exact, nonnegative integers.  The\n          corresponding \u2018#:version\u2019 option in the \u2018use-modules\u2019 form\n          allows callers to restrict the value of this option in various\n          ways.\n\n     \u2018#:duplicates LIST\u2019\n          Tell Guile to handle duplicate bindings for the bindings\n          imported by the current module according to the policy defined\n          by LIST, a list of symbols.  LIST must contain symbols\n          representing a duplicate binding handling policy chosen among\n          the following:\n\n          \u2018check\u2019\n               Raises an error when a binding is imported from more than\n               one place.\n          \u2018warn\u2019\n               Issue a warning when a binding is imported from more than\n               one place and leave the responsibility of actually\n               handling the duplication to the next duplicate binding\n               handler.\n          \u2018replace\u2019\n               When a new binding is imported that has the same name as\n               a previously imported binding, then do the following:\n\n                 1. If the old binding was said to be \u201creplacing\u201d (via\n                    the \u2018#:replace\u2019 option above) and the new binding is\n                    not replacing, the keep the old binding.\n                 2. If the old binding was not said to be replacing and\n                    the new binding is replacing, then replace the old\n                    binding with the new one.\n                 3. If neither the old nor the new binding is replacing,\n                    then keep the old one.\n\n          \u2018warn-override-core\u2019\n               Issue a warning when a core binding is being overwritten\n               and actually override the core binding with the new one.\n          \u2018first\u2019\n               In case of duplicate bindings, the firstly imported\n               binding is always the one which is kept.\n          \u2018last\u2019\n               In case of duplicate bindings, the lastly imported\n               binding is always the one which is kept.\n          \u2018noop\u2019\n               In case of duplicate bindings, leave the responsibility\n               to the next duplicate handler.\n\n          If LIST contains more than one symbol, then the duplicate\n          binding handlers which appear first will be used first when\n          resolving a duplicate binding situation.  As mentioned above,\n          some resolution policies may explicitly leave the\n          responsibility of handling the duplication to the next handler\n          in LIST.\n\n          If GOOPS has been loaded before the \u2018#:duplicates\u2019 clause is\n          processed, there are additional strategies available for\n          dealing with generic functions.  *Note Merging Generics::, for\n          more information.\n\n          The default duplicate binding resolution policy is given by\n          the \u2018default-duplicate-binding-handler\u2019 procedure, and is\n\n               (replace warn-override-core warn last)\n\n     \u2018#:pure\u2019\n          Create a \u201cpure\u201d module, that is a module which does not\n          contain any of the standard procedure bindings except for the\n          syntax forms.  This is useful if you want to create \u201csafe\u201d\n          modules, that is modules which do not know anything about\n          dangerous procedures.\n\n -- syntax: export variable ...\n     Add all VARIABLEs (which must be symbols or pairs of symbols) to\n     the list of exported bindings of the current module.  If VARIABLE\n     is a pair, its \u2018car\u2019 gives the name of the variable as seen by the\n     current module and its \u2018cdr\u2019 specifies a name for the binding in\n     the current module\u2019s public interface.\n\n -- syntax: define-public ...\n     Equivalent to \u2018(begin (define foo ...) (export foo))\u2019.\n\n -- syntax: re-export variable ...\n     Add all VARIABLEs (which must be symbols or pairs of symbols) to\n     the list of re-exported bindings of the current module.  Pairs of\n     symbols are handled as in \u2018export\u2019.  Re-exported bindings must be\n     imported by the current module from some other module.\n\n -- syntax: export! variable ...\n     Like \u2018export\u2019, but marking the exported variables as replacing.\n     Using a module with replacing bindings will cause any existing\n     bindings to be replaced without issuing any warnings.  See the\n     discussion of \u2018#:replace\u2019 above.\n\n\u001f\nFile: guile.info,  Node: Modules and the File System,  Next: R6RS Version References,  Prev: Creating Guile Modules,  Up: Modules\n\n6.20.4 Modules and the File System\n----------------------------------\n\nTypical programs only use a small subset of modules installed on a Guile\nsystem.  In order to keep startup time down, Guile only loads modules\nwhen a program uses them, on demand.\n\n   When a program evaluates \u2018(use-modules (ice-9 popen))\u2019, and the\nmodule is not loaded, Guile searches for a conventionally-named file\nfrom in the \u201cload path\u201d.\n\n   In this case, loading \u2018(ice-9 popen)\u2019 will eventually cause Guile to\nrun \u2018(primitive-load-path \"ice-9/popen\")\u2019.  \u2018primitive-load-path\u2019 will\nsearch for a file \u2018ice-9/popen\u2019 in the \u2018%load-path\u2019 (*note Load\nPaths::).  For each directory in \u2018%load-path\u2019, Guile will try to find\nthe file name, concatenated with the extensions from \u2018%load-extensions\u2019.\nBy default, this will cause Guile to \u2018stat\u2019 \u2018ice-9/popen.scm\u2019, and then\n\u2018ice-9/popen\u2019.  *Note Load Paths::, for more on \u2018primitive-load-path\u2019.\n\n   If a corresponding compiled \u2018.go\u2019 file is found in the\n\u2018%load-compiled-path\u2019 or in the fallback path, and is as fresh as the\nsource file, it will be loaded instead of the source file.  If no\ncompiled file is found, Guile may try to compile the source file and\ncache away the resulting \u2018.go\u2019 file.  *Note Compilation::, for more on\ncompilation.\n\n   Once Guile finds a suitable source or compiled file is found, the\nfile will be loaded.  If, after loading the file, the module under\nconsideration is still not defined, Guile will signal an error.\n\n   For more information on where and how to install Scheme modules,\n*Note Installing Site Packages::.\n\n\u001f\nFile: guile.info,  Node: R6RS Version References,  Next: R6RS Libraries,  Prev: Modules and the File System,  Up: Modules\n\n6.20.5 R6RS Version References\n------------------------------\n\nGuile\u2019s module system includes support for locating modules based on a\ndeclared version specifier of the same form as the one described in R6RS\n(*note R6RS Library Form: (r6rs)Library form.).  By using the\n\u2018#:version\u2019 keyword in a \u2018define-module\u2019 form, a module may specify a\nversion as a list of zero or more exact, nonnegative integers.\n\n   This version can then be used to locate the module during the module\nsearch process.  Client modules and callers of the \u2018use-modules\u2019\nfunction may specify constraints on the versions of target modules by\nproviding a \u201cversion reference\u201d, which has one of the following forms:\n\n      (SUB-VERSION-REFERENCE ...)\n      (and VERSION-REFERENCE ...)\n      (or VERSION-REFERENCE ...)\n      (not VERSION-REFERENCE)\n\n   in which SUB-VERSION-REFERENCE is in turn one of:\n\n      (SUB-VERSION)\n      (>= SUB-VERSION)\n      (<= SUB-VERSION)\n      (and SUB-VERSION-REFERENCE ...)\n      (or SUB-VERSION-REFERENCE ...)\n      (not SUB-VERSION-REFERENCE)\n\n   in which SUB-VERSION is an exact, nonnegative integer as above.  A\nversion reference matches a declared module version if each element of\nthe version reference matches a corresponding element of the module\nversion, according to the following rules:\n\n   \u2022 The \u2018and\u2019 sub-form matches a version or version element if every\n     element in the tail of the sub-form matches the specified version\n     or version element.\n\n   \u2022 The \u2018or\u2019 sub-form matches a version or version element if any\n     element in the tail of the sub-form matches the specified version\n     or version element.\n\n   \u2022 The \u2018not\u2019 sub-form matches a version or version element if the tail\n     of the sub-form does not match the version or version element.\n\n   \u2022 The \u2018>=\u2019 sub-form matches a version element if the element is\n     greater than or equal to the SUB-VERSION in the tail of the\n     sub-form.\n\n   \u2022 The \u2018<=\u2019 sub-form matches a version element if the version is less\n     than or equal to the SUB-VERSION in the tail of the sub-form.\n\n   \u2022 A SUB-VERSION matches a version element if one is EQV? to the\n     other.\n\n   For example, a module declared as:\n\n      (define-module (mylib mymodule) #:version (1 2 0))\n\n   would be successfully loaded by any of the following \u2018use-modules\u2019\nexpressions:\n\n      (use-modules ((mylib mymodule) #:version (1 2 (>= 0))))\n      (use-modules ((mylib mymodule) #:version (or (1 2 0) (1 2 1))))\n      (use-modules ((mylib mymodule) #:version ((and (>= 1) (not 2)) 2 0)))\n\n\u001f\nFile: guile.info,  Node: R6RS Libraries,  Next: Variables,  Prev: R6RS Version References,  Up: Modules\n\n6.20.6 R6RS Libraries\n---------------------\n\nIn addition to the API described in the previous sections, you also have\nthe option to create modules using the portable \u2018library\u2019 form described\nin R6RS (*note R6RS Library Form: (r6rs)Library form.), and to import\nlibraries created in this format by other programmers.  Guile\u2019s R6RS\nlibrary implementation takes advantage of the flexibility built into the\nmodule system by expanding the R6RS library form into a corresponding\nGuile \u2018define-module\u2019 form that specifies equivalent import and export\nrequirements and includes the same body expressions.  The library\nexpression:\n\n       (library (mylib (1 2))\n         (export mybinding)\n         (import (otherlib (3))))\n\n   is equivalent to the module definition:\n\n       (define-module (mylib)\n         #:version (1 2)\n         #:use-module ((otherlib) #:version (3))\n         #:export (mybinding))\n\n   Central to the mechanics of R6RS libraries is the concept of import\nand export \u201clevels\u201d, which control the visibility of bindings at various\nphases of a library\u2019s lifecycle \u2014 macros necessary to expand forms in\nthe library\u2019s body need to be available at expand time; variables used\nin the body of a procedure exported by the library must be available at\nruntime.  R6RS specifies the optional \u2018for\u2019 sub-form of an _import set_\nspecification (see below) as a mechanism by which a library author can\nindicate that a particular library import should take place at a\nparticular phase with respect to the lifecycle of the importing library.\n\n   Guile\u2019s library implementation uses a technique called \u201cimplicit\nphasing\u201d (first described by Abdulaziz Ghuloum and R. Kent Dybvig),\nwhich allows the expander and compiler to automatically determine the\nnecessary visibility of a binding imported from another library.  As\nsuch, the \u2018for\u2019 sub-form described below is ignored by Guile (but may be\nrequired by Schemes in which phasing is explicit).\n\n -- Scheme Syntax: library name (export export-spec ...) (import\n          import-spec ...) body ...\n     Defines a new library with the specified name, exports, and\n     imports, and evaluates the specified body expressions in this\n     library\u2019s environment.\n\n     The library NAME is a non-empty list of identifiers, optionally\n     ending with a version specification of the form described above\n     (*note Creating Guile Modules::).\n\n     Each EXPORT-SPEC is the name of a variable defined or imported by\n     the library, or must take the form \u2018(rename (internal-name\n     external-name) ...)\u2019, where the identifier INTERNAL-NAME names a\n     variable defined or imported by the library and EXTERNAL-NAME is\n     the name by which the variable is seen by importing libraries.\n\n     Each IMPORT-SPEC must be either an \u201cimport set\u201d (see below) or must\n     be of the form \u2018(for import-set import-level ...)\u2019, where each\n     IMPORT-LEVEL is one of:\n\n            run\n            expand\n            (meta LEVEL)\n\n     where LEVEL is an integer.  Note that since Guile does not require\n     explicit phase specification, any IMPORT-SETs found inside of \u2018for\u2019\n     sub-forms will be \u201cunwrapped\u201d during expansion and processed as if\n     they had been specified directly.\n\n     Import sets in turn take one of the following forms:\n\n            LIBRARY-REFERENCE\n            (library LIBRARY-REFERENCE)\n            (only IMPORT-SET IDENTIFIER ...)\n            (except IMPORT-SET IDENTIFIER ...)\n            (prefix IMPORT-SET IDENTIFIER)\n            (rename IMPORT-SET (INTERNAL-IDENTIFIER EXTERNAL-IDENTIFIER) ...)\n\n     where LIBRARY-REFERENCE is a non-empty list of identifiers ending\n     with an optional version reference (*note R6RS Version\n     References::), and the other sub-forms have the following\n     semantics, defined recursively on nested IMPORT-SETs:\n\n        \u2022 The \u2018library\u2019 sub-form is used to specify libraries for import\n          whose names begin with the identifier \u201clibrary.\u201d\n\n        \u2022 The \u2018only\u2019 sub-form imports only the specified IDENTIFIERs\n          from the given IMPORT-SET.\n\n        \u2022 The \u2018except\u2019 sub-form imports all of the bindings exported by\n          IMPORT-SET except for those that appear in the specified list\n          of IDENTIFIERs.\n\n        \u2022 The \u2018prefix\u2019 sub-form imports all of the bindings exported by\n          IMPORT-SET, first prefixing them with the specified\n          IDENTIFIER.\n\n        \u2022 The \u2018rename\u2019 sub-form imports all of the identifiers exported\n          by IMPORT-SET.  The binding for each INTERNAL-IDENTIFIER among\n          these identifiers is made visible to the importing library as\n          the corresponding EXTERNAL-IDENTIFIER; all other bindings are\n          imported using the names provided by IMPORT-SET.\n\n     Note that because Guile translates R6RS libraries into module\n     definitions, an import specification may be used to declare a\n     dependency on a native Guile module \u2014 although doing so may make\n     your libraries less portable to other Schemes.\n\n -- Scheme Syntax: import import-spec ...\n     Import into the current environment the libraries specified by the\n     given import specifications, where each IMPORT-SPEC takes the same\n     form as in the \u2018library\u2019 form described above.\n\n\u001f\nFile: guile.info,  Node: Variables,  Next: Module System Reflection,  Prev: R6RS Libraries,  Up: Modules\n\n6.20.7 Variables\n----------------\n\nEach module has its own hash table, sometimes known as an \u201cobarray\u201d,\nthat maps the names defined in that module to their corresponding\nvariable objects.\n\n   A variable is a box-like object that can hold any Scheme value.  It\nis said to be \u201cundefined\u201d if its box holds a special Scheme value that\ndenotes undefined-ness (which is different from all other Scheme values,\nincluding for example \u2018#f\u2019); otherwise the variable is \u201cdefined\u201d.\n\n   On its own, a variable object is anonymous.  A variable is said to be\n\u201cbound\u201d when it is associated with a name in some way, usually a symbol\nin a module obarray.  When this happens, the name is said to be bound to\nthe variable, in that module.\n\n   (That\u2019s the theory, anyway.  In practice, defined-ness and bound-ness\nsometimes get confused, because Lisp and Scheme implementations have\noften conflated \u2014 or deliberately drawn no distinction between \u2014 a name\nthat is unbound and a name that is bound to a variable whose value is\nundefined.  We will try to be clear about the difference and explain any\nconfusion where it is unavoidable.)\n\n   Variables do not have a read syntax.  Most commonly they are created\nand bound implicitly by \u2018define\u2019 expressions: a top-level \u2018define\u2019\nexpression of the form\n\n     (define NAME VALUE)\n\ncreates a variable with initial value VALUE and binds it to the name\nNAME in the current module.  But they can also be created dynamically by\ncalling one of the constructor procedures \u2018make-variable\u2019 and\n\u2018make-undefined-variable\u2019.\n\n -- Scheme Procedure: make-undefined-variable\n -- C Function: scm_make_undefined_variable ()\n     Return a variable that is initially unbound.\n\n -- Scheme Procedure: make-variable init\n -- C Function: scm_make_variable (init)\n     Return a variable initialized to value INIT.\n\n -- Scheme Procedure: variable-bound? var\n -- C Function: scm_variable_bound_p (var)\n     Return \u2018#t\u2019 if VAR is bound to a value, or \u2018#f\u2019 otherwise.  Throws\n     an error if VAR is not a variable object.\n\n -- Scheme Procedure: variable-ref var\n -- C Function: scm_variable_ref (var)\n     Dereference VAR and return its value.  VAR must be a variable\n     object; see \u2018make-variable\u2019 and \u2018make-undefined-variable\u2019.\n\n -- Scheme Procedure: variable-set! var val\n -- C Function: scm_variable_set_x (var, val)\n     Set the value of the variable VAR to VAL.  VAR must be a variable\n     object, VAL can be any value.  Return an unspecified value.\n\n -- Scheme Procedure: variable-unset! var\n -- C Function: scm_variable_unset_x (var)\n     Unset the value of the variable VAR, leaving VAR unbound.\n\n -- Scheme Procedure: variable? obj\n -- C Function: scm_variable_p (obj)\n     Return \u2018#t\u2019 if OBJ is a variable object, else return \u2018#f\u2019.\n\n\u001f\nFile: guile.info,  Node: Module System Reflection,  Next: Accessing Modules from C,  Prev: Variables,  Up: Modules\n\n6.20.8 Module System Reflection\n-------------------------------\n\nThe previous sections have described a declarative view of the module\nsystem.  You can also work with it programmatically by accessing and\nmodifying various parts of the Scheme objects that Guile uses to\nimplement the module system.\n\n   At any time, there is a \u201ccurrent module\u201d.  This module is the one\nwhere a top-level \u2018define\u2019 and similar syntax will add new bindings.\nYou can find other module objects with \u2018resolve-module\u2019, for example.\n\n   These module objects can be used as the second argument to \u2018eval\u2019.\n\n -- Scheme Procedure: current-module\n -- C Function: scm_current_module ()\n     Return the current module object.\n\n -- Scheme Procedure: set-current-module module\n -- C Function: scm_set_current_module (module)\n     Set the current module to MODULE and return the previous current\n     module.\n\n -- Scheme Procedure: save-module-excursion thunk\n     Call THUNK within a \u2018dynamic-wind\u2019 such that the module that is\n     current at invocation time is restored when THUNK\u2019s dynamic extent\n     is left (*note Dynamic Wind::).\n\n     More precisely, if THUNK escapes non-locally, the current module\n     (at the time of escape) is saved, and the original current module\n     (at the time THUNK\u2019s dynamic extent was last entered) is restored.\n     If THUNK\u2019s dynamic extent is re-entered, then the current module is\n     saved, and the previously saved inner module is set current again.\n\n -- Scheme Procedure: resolve-module name [autoload=#t] [version=#f]\n          [#:ensure=#t]\n -- C Function: scm_resolve_module (name)\n     Find the module named NAME and return it.  When it has not already\n     been defined and AUTOLOAD is true, try to auto-load it.  When it\n     can\u2019t be found that way either, create an empty module if ENSURE is\n     true, otherwise return \u2018#f\u2019.  If VERSION is true, ensure that the\n     resulting module is compatible with the given version reference\n     (*note R6RS Version References::).  The name is a list of symbols.\n\n -- Scheme Procedure: resolve-interface name [#:select=#f] [#:hide='()]\n          [#:prefix=#f] [#:renamer=#f] [#:version=#f]\n     Find the module named NAME as with \u2018resolve-module\u2019 and return its\n     interface.  The interface of a module is also a module object, but\n     it contains only the exported bindings.\n\n -- Scheme Procedure: module-uses module\n     Return a list of the interfaces used by MODULE.\n\n -- Scheme Procedure: module-use! module interface\n     Add INTERFACE to the front of the use-list of MODULE.  Both\n     arguments should be module objects, and INTERFACE should very\n     likely be a module returned by \u2018resolve-interface\u2019.\n\n -- Scheme Procedure: reload-module module\n     Revisit the source file that corresponds to MODULE.  Raises an\n     error if no source file is associated with the given module.\n\n   As mentioned in the previous section, modules contain a mapping\nbetween identifiers (as symbols) and storage locations (as variables).\nGuile defines a number of procedures to allow access to this mapping.\nIf you are programming in C, *note Accessing Modules from C::.\n\n -- Scheme Procedure: module-variable module name\n     Return the variable bound to NAME (a symbol) in MODULE, or \u2018#f\u2019 if\n     NAME is unbound.\n\n -- Scheme Procedure: module-add! module name var\n     Define a new binding between NAME (a symbol) and VAR (a variable)\n     in MODULE.\n\n -- Scheme Procedure: module-ref module name\n     Look up the value bound to NAME in MODULE.  Like \u2018module-variable\u2019,\n     but also does a \u2018variable-ref\u2019 on the resulting variable, raising\n     an error if NAME is unbound.\n\n -- Scheme Procedure: module-define! module name value\n     Locally bind NAME to VALUE in MODULE.  If NAME was already locally\n     bound in MODULE, i.e., defined locally and not by an imported\n     module, the value stored in the existing variable will be updated.\n     Otherwise, a new variable will be added to the module, via\n     \u2018module-add!\u2019.\n\n -- Scheme Procedure: module-set! module name value\n     Update the binding of NAME in MODULE to VALUE, raising an error if\n     NAME is not already bound in MODULE.\n\n   There are many other reflective procedures available in the default\nenvironment.  If you find yourself using one of them, please contact the\nGuile developers so that we can commit to stability for that interface.\n\n\u001f\nFile: guile.info,  Node: Accessing Modules from C,  Next: provide and require,  Prev: Module System Reflection,  Up: Modules\n\n6.20.9 Accessing Modules from C\n-------------------------------\n\nThe last sections have described how modules are used in Scheme code,\nwhich is the recommended way of creating and accessing modules.  You can\nalso work with modules from C, but it is more cumbersome.\n\n   The following procedures are available.\n\n -- C Function: SCM scm_c_call_with_current_module (SCM MODULE, SCM\n          (*FUNC)(void *), void *DATA)\n     Call FUNC and make MODULE the current module during the call.  The\n     argument DATA is passed to FUNC.  The return value of\n     \u2018scm_c_call_with_current_module\u2019 is the return value of FUNC.\n\n -- C Function: SCM scm_public_variable (SCM MODULE_NAME, SCM NAME)\n -- C Function: SCM scm_c_public_variable (const char *MODULE_NAME,\n          const char *NAME)\n     Find a the variable bound to the symbol NAME in the public\n     interface of the module named MODULE_NAME.\n\n     MODULE_NAME should be a list of symbols, when represented as a\n     Scheme object, or a space-separated string, in the \u2018const char *\u2019\n     case.  See \u2018scm_c_define_module\u2019 below, for more examples.\n\n     Signals an error if no module was found with the given name.  If\n     NAME is not bound in the module, just returns \u2018#f\u2019.\n\n -- C Function: SCM scm_private_variable (SCM MODULE_NAME, SCM NAME)\n -- C Function: SCM scm_c_private_variable (const char *MODULE_NAME,\n          const char *NAME)\n     Like \u2018scm_public_variable\u2019, but looks in the internals of the\n     module named MODULE_NAME instead of the public interface.\n     Logically, these procedures should only be called on modules you\n     write.\n\n -- C Function: SCM scm_public_lookup (SCM MODULE_NAME, SCM NAME)\n -- C Function: SCM scm_c_public_lookup (const char *MODULE_NAME, const\n          char *NAME)\n -- C Function: SCM scm_private_lookup (SCM MODULE_NAME, SCM NAME)\n -- C Function: SCM scm_c_private_lookup (const char *MODULE_NAME, const\n          char *NAME)\n     Like \u2018scm_public_variable\u2019 or \u2018scm_private_variable\u2019, but if the\n     NAME is not bound in the module, signals an error.  Returns a\n     variable, always.\n\n          static SCM eval_string_var;\n\n          /* NOTE: It is important that the call to 'my_init'\n             happens-before all calls to 'my_eval_string'. */\n          void my_init (void)\n          {\n            eval_string_var = scm_c_public_lookup (\"ice-9 eval-string\",\n                                                   \"eval-string\");\n          }\n\n          SCM my_eval_string (SCM str)\n          {\n            return scm_call_1 (scm_variable_ref (eval_string_var), str);\n          }\n\n -- C Function: SCM scm_public_ref (SCM MODULE_NAME, SCM NAME)\n -- C Function: SCM scm_c_public_ref (const char *MODULE_NAME, const\n          char *NAME)\n -- C Function: SCM scm_private_ref (SCM MODULE_NAME, SCM NAME)\n -- C Function: SCM scm_c_private_ref (const char *MODULE_NAME, const\n          char *NAME)\n     Like \u2018scm_public_lookup\u2019 or \u2018scm_private_lookup\u2019, but additionally\n     dereferences the variable.  If the variable object is unbound,\n     signals an error.  Returns the value bound to NAME in MODULE_NAME.\n\n   In addition, there are a number of other lookup-related procedures.\nWe suggest that you use the \u2018scm_public_\u2019 and \u2018scm_private_\u2019 family of\nprocedures instead, if possible.\n\n -- C Function: SCM scm_c_lookup (const char *NAME)\n     Return the variable bound to the symbol indicated by NAME in the\n     current module.  If there is no such binding or the symbol is not\n     bound to a variable, signal an error.\n\n -- C Function: SCM scm_lookup (SCM NAME)\n     Like \u2018scm_c_lookup\u2019, but the symbol is specified directly.\n\n -- C Function: SCM scm_c_module_lookup (SCM MODULE, const char *NAME)\n -- C Function: SCM scm_module_lookup (SCM MODULE, SCM NAME)\n     Like \u2018scm_c_lookup\u2019 and \u2018scm_lookup\u2019, but the specified module is\n     used instead of the current one.\n\n -- C Function: SCM scm_module_variable (SCM MODULE, SCM NAME)\n     Like \u2018scm_module_lookup\u2019, but if the binding does not exist, just\n     returns \u2018#f\u2019 instead of raising an error.\n\n   To define a value, use \u2018scm_define\u2019:\n\n -- C Function: SCM scm_c_define (const char *NAME, SCM VAL)\n     Bind the symbol indicated by NAME to a variable in the current\n     module and set that variable to VAL.  When NAME is already bound to\n     a variable, use that.  Else create a new variable.\n\n -- C Function: SCM scm_define (SCM NAME, SCM VAL)\n     Like \u2018scm_c_define\u2019, but the symbol is specified directly.\n\n -- C Function: SCM scm_c_module_define (SCM MODULE, const char *NAME,\n          SCM VAL)\n -- C Function: SCM scm_module_define (SCM MODULE, SCM NAME, SCM VAL)\n     Like \u2018scm_c_define\u2019 and \u2018scm_define\u2019, but the specified module is\n     used instead of the current one.\n\n   In some rare cases, you may need to access the variable that\n\u2018scm_module_define\u2019 would have accessed, without changing the binding of\nthe existing variable, if one is present.  In that case, use\n\u2018scm_module_ensure_local_variable\u2019:\n\n -- C Function: SCM scm_module_ensure_local_variable (SCM MODULE, SCM\n          SYM)\n     Like \u2018scm_module_define\u2019, but if the SYM is already locally bound\n     in that module, the variable\u2019s existing binding is not reset.\n     Returns a variable.\n\n -- C Function: SCM scm_module_reverse_lookup (SCM MODULE, SCM VARIABLE)\n     Find the symbol that is bound to VARIABLE in MODULE.  When no such\n     binding is found, return \u2018#f\u2019.\n\n -- C Function: SCM scm_c_define_module (const char *NAME, void\n          (*INIT)(void *), void *DATA)\n     Define a new module named NAME and make it current while INIT is\n     called, passing it DATA.  Return the module.\n\n     The parameter NAME is a string with the symbols that make up the\n     module name, separated by spaces.  For example, \u2018\"foo bar\"\u2019 names\n     the module \u2018(foo bar)\u2019.\n\n     When there already exists a module named NAME, it is used\n     unchanged, otherwise, an empty module is created.\n\n -- C Function: SCM scm_c_resolve_module (const char *NAME)\n     Find the module name NAME and return it.  When it has not already\n     been defined, try to auto-load it.  When it can\u2019t be found that way\n     either, create an empty module.  The name is interpreted as for\n     \u2018scm_c_define_module\u2019.\n\n -- C Function: SCM scm_c_use_module (const char *NAME)\n     Add the module named NAME to the uses list of the current module,\n     as with \u2018(use-modules NAME)\u2019.  The name is interpreted as for\n     \u2018scm_c_define_module\u2019.\n\n -- C Function: void scm_c_export (const char *NAME, ...)\n     Add the bindings designated by NAME, ...  to the public interface\n     of the current module.  The list of names is terminated by \u2018NULL\u2019.\n\n\u001f\nFile: guile.info,  Node: provide and require,  Next: Environments,  Prev: Accessing Modules from C,  Up: Modules\n\n6.20.10 provide and require\n---------------------------\n\nAubrey Jaffer, mostly to support his portable Scheme library SLIB,\nimplemented a provide/require mechanism for many Scheme implementations.\nLibrary files in SLIB _provide_ a feature, and when user programs\n_require_ that feature, the library file is loaded in.\n\n   For example, the file \u2018random.scm\u2019 in the SLIB package contains the\nline\n\n     (provide 'random)\n\n   so to use its procedures, a user would type\n\n     (require 'random)\n\n   and they would magically become available, _but still have the same\nnames!_  So this method is nice, but not as good as a full-featured\nmodule system.\n\n   When SLIB is used with Guile, provide and require can be used to\naccess its facilities.\n\n\u001f\nFile: guile.info,  Node: Environments,  Prev: provide and require,  Up: Modules\n\n6.20.11 Environments\n--------------------\n\nScheme, as defined in R5RS, does _not_ have a full module system.\nHowever it does define the concept of a top-level \u201cenvironment\u201d.  Such\nan environment maps identifiers (symbols) to Scheme objects such as\nprocedures and lists: *note About Closure::.  In other words, it\nimplements a set of \u201cbindings\u201d.\n\n   Environments in R5RS can be passed as the second argument to \u2018eval\u2019\n(*note Fly Evaluation::).  Three procedures are defined to return\nenvironments: \u2018scheme-report-environment\u2019, \u2018null-environment\u2019 and\n\u2018interaction-environment\u2019 (*note Fly Evaluation::).\n\n   In addition, in Guile any module can be used as an R5RS environment,\ni.e., passed as the second argument to \u2018eval\u2019.\n\n   Note: the following two procedures are available only when the\n\u2018(ice-9 r5rs)\u2019 module is loaded:\n\n     (use-modules (ice-9 r5rs))\n\n -- Scheme Procedure: scheme-report-environment version\n -- Scheme Procedure: null-environment version\n     VERSION must be the exact integer \u20185\u2019, corresponding to revision 5\n     of the Scheme report (the Revised^5 Report on Scheme).\n     \u2018scheme-report-environment\u2019 returns a specifier for an environment\n     that is empty except for all bindings defined in the report that\n     are either required or both optional and supported by the\n     implementation.  \u2018null-environment\u2019 returns a specifier for an\n     environment that is empty except for the (syntactic) bindings for\n     all syntactic keywords defined in the report that are either\n     required or both optional and supported by the implementation.\n\n     Currently Guile does not support values of VERSION for other\n     revisions of the report.\n\n     The effect of assigning (through the use of \u2018eval\u2019) a variable\n     bound in a \u2018scheme-report-environment\u2019 (for example \u2018car\u2019) is\n     unspecified.  Currently the environments specified by\n     \u2018scheme-report-environment\u2019 are not immutable in Guile.\n\n\u001f\nFile: guile.info,  Node: Foreign Function Interface,  Next: Scheduling,  Prev: Modules,  Up: API Reference\n\n6.21 Foreign Function Interface\n===============================\n\nThe more one hacks in Scheme, the more one realizes that there are\nactually two computational worlds: one which is warm and alive, that\nland of parentheses, and one cold and dead, the land of C and its ilk.\n\n   But yet we as programmers live in both worlds, and Guile itself is\nhalf implemented in C. So it is that Guile\u2019s living half pays respect to\nits dead counterpart, via a spectrum of interfaces to C ranging from\ndynamic loading of Scheme primitives to dynamic binding of stock C\nlibrary procedures.\n\n* Menu:\n\n* Foreign Libraries::           Dynamically linking to libraries.\n* Foreign Functions::           Simple calls to C procedures.\n* C Extensions::                Extending Guile in C with loadable modules.\n* Modules and Extensions::      Loading C extensions into modules.\n* Foreign Pointers::            Accessing global variables.\n* Dynamic FFI::                 Calling arbitrary C functions.\n\n\u001f\nFile: guile.info,  Node: Foreign Libraries,  Next: Foreign Functions,  Up: Foreign Function Interface\n\n6.21.1 Foreign Libraries\n------------------------\n\nMost modern Unices have something called \u201cshared libraries\u201d.  This\nordinarily means that they have the capability to share the executable\nimage of a library between several running programs to save memory and\ndisk space.  But generally, shared libraries give a lot of additional\nflexibility compared to the traditional static libraries.  In fact,\ncalling them \u2018dynamic\u2019 libraries is as correct as calling them \u2018shared\u2019.\n\n   Shared libraries really give you a lot of flexibility in addition to\nthe memory and disk space savings.  When you link a program against a\nshared library, that library is not closely incorporated into the final\nexecutable.  Instead, the executable of your program only contains\nenough information to find the needed shared libraries when the program\nis actually run.  Only then, when the program is starting, is the final\nstep of the linking process performed.  This means that you need not\nrecompile all programs when you install a new, only slightly modified\nversion of a shared library.  The programs will pick up the changes\nautomatically the next time they are run.\n\n   Now, when all the necessary machinery is there to perform part of the\nlinking at run-time, why not take the next step and allow the programmer\nto explicitly take advantage of it from within their program?  Of\ncourse, many operating systems that support shared libraries do just\nthat, and chances are that Guile will allow you to access this feature\nfrom within your Scheme programs.  As you might have guessed already,\nthis feature is called \u201cdynamic linking\u201d.(1)\n\n   We titled this section \u201cforeign libraries\u201d because although the name\n\u201cforeign\u201d doesn\u2019t leak into the API, the world of C really is foreign to\nScheme \u2013 and that estrangement extends to components of foreign\nlibraries as well, as we see in future sections.\n\n -- Scheme Procedure: dynamic-link [library]\n -- C Function: scm_dynamic_link (library)\n     Find the shared library denoted by LIBRARY (a string) and link it\n     into the running Guile application.  When everything works out,\n     return a Scheme object suitable for representing the linked object\n     file.  Otherwise an error is thrown.  How object files are searched\n     is system dependent.\n\n     Normally, LIBRARY is just the name of some shared library file that\n     will be searched for in the places where shared libraries usually\n     reside, such as in \u2018/usr/lib\u2019 and \u2018/usr/local/lib\u2019.\n\n     LIBRARY should not contain an extension such as \u2018.so\u2019.  The correct\n     file name extension for the host operating system is provided\n     automatically, according to libltdl\u2019s rules (*note lt_dlopenext:\n     (libtool)Libltdl interface.).\n\n     When LIBRARY is omitted, a \u201cglobal symbol handle\u201d is returned.\n     This handle provides access to the symbols available to the program\n     at run-time, including those exported by the program itself and the\n     shared libraries already loaded.\n\n     Note that on hosts that use dynamic-link libraries (DLLs), the\n     global symbol handle may not be able to provide access to symbols\n     from recursively-loaded DLLs.  Only exported symbols from those\n     DLLs directly loaded by the program may be available.\n\n -- Scheme Procedure: dynamic-object? obj\n -- C Function: scm_dynamic_object_p (obj)\n     Return \u2018#t\u2019 if OBJ is a dynamic library handle, or \u2018#f\u2019 otherwise.\n\n -- Scheme Procedure: dynamic-unlink dobj\n -- C Function: scm_dynamic_unlink (dobj)\n     Unlink the indicated object file from the application.  The\n     argument DOBJ must have been obtained by a call to \u2018dynamic-link\u2019.\n     After \u2018dynamic-unlink\u2019 has been called on DOBJ, its content is no\n     longer accessible.\n\n     (define libgl-obj (dynamic-link \"libGL\"))\n     libgl-obj\n     \u21d2 #<dynamic-object \"libGL\">\n     (dynamic-unlink libGL-obj)\n     libGL-obj\n     \u21d2 #<dynamic-object \"libGL\" (unlinked)>\n\n   As you can see, after calling \u2018dynamic-unlink\u2019 on a dynamically\nlinked library, it is marked as \u2018(unlinked)\u2019 and you are no longer able\nto use it with \u2018dynamic-call\u2019, etc.  Whether the library is really\nremoved from you program is system-dependent and will generally not\nhappen when some other parts of your program still use it.\n\n   When dynamic linking is disabled or not supported on your system, the\nabove functions throw errors, but they are still available.\n\n   ---------- Footnotes ----------\n\n   (1) Some people also refer to the final linking stage at program\nstartup as \u2018dynamic linking\u2019, so if you want to make yourself perfectly\nclear, it is probably best to use the more technical term \u201cdlopening\u201d,\nas suggested by Gordon Matzigkeit in his libtool documentation.\n\n\u001f\nFile: guile.info,  Node: Foreign Functions,  Next: C Extensions,  Prev: Foreign Libraries,  Up: Foreign Function Interface\n\n6.21.2 Foreign Functions\n------------------------\n\nThe most natural thing to do with a dynamic library is to grovel around\nin it for a function pointer: a \u201cforeign function\u201d.  \u2018dynamic-func\u2019\nexists for that purpose.\n\n -- Scheme Procedure: dynamic-func name dobj\n -- C Function: scm_dynamic_func (name, dobj)\n     Return a \u201chandle\u201d for the func NAME in the shared object referred\n     to by DOBJ.  The handle can be passed to \u2018dynamic-call\u2019 to actually\n     call the function.\n\n     Regardless whether your C compiler prepends an underscore \u2018_\u2019 to\n     the global names in a program, you should *not* include this\n     underscore in NAME since it will be added automatically when\n     necessary.\n\n   Guile has static support for calling functions with no arguments,\n\u2018dynamic-call\u2019.\n\n -- Scheme Procedure: dynamic-call func dobj\n -- C Function: scm_dynamic_call (func, dobj)\n     Call the C function indicated by FUNC and DOBJ.  The function is\n     passed no arguments and its return value is ignored.  When FUNCTION\n     is something returned by \u2018dynamic-func\u2019, call that function and\n     ignore DOBJ.  When FUNC is a string , look it up in DYNOBJ; this is\n     equivalent to\n          (dynamic-call (dynamic-func FUNC DOBJ) #f)\n\n   \u2018dynamic-call\u2019 is not very powerful.  It is mostly intended to be\nused for calling specially written initialization functions that will\nthen add new primitives to Guile.  For example, we do not expect that\nyou will dynamically link \u2018libX11\u2019 with \u2018dynamic-link\u2019 and then\nconstruct a beautiful graphical user interface just by using\n\u2018dynamic-call\u2019.  Instead, the usual way would be to write a special\nGuile-to-X11 glue library that has intimate knowledge about both Guile\nand X11 and does whatever is necessary to make them inter-operate\nsmoothly.  This glue library could then be dynamically linked into a\nvanilla Guile interpreter and activated by calling its initialization\nfunction.  That function would add all the new types and primitives to\nthe Guile interpreter that it has to offer.\n\n   (There is actually another, better option: simply to create a\n\u2018libX11\u2019 wrapper in Scheme via the dynamic FFI. *Note Dynamic FFI::, for\nmore information.)\n\n   Given some set of C extensions to Guile, the next logical step is to\nintegrate these glue libraries into the module system of Guile so that\nyou can load new primitives into a running system just as you can load\nnew Scheme code.\n\n -- Scheme Procedure: load-extension lib init\n -- C Function: scm_load_extension (lib, init)\n     Load and initialize the extension designated by LIB and INIT. When\n     there is no pre-registered function for LIB/INIT, this is\n     equivalent to\n\n          (dynamic-call INIT (dynamic-link LIB))\n\n     When there is a pre-registered function, that function is called\n     instead.\n\n     Normally, there is no pre-registered function.  This option exists\n     only for situations where dynamic linking is unavailable or\n     unwanted.  In that case, you would statically link your program\n     with the desired library, and register its init function right\n     after Guile has been initialized.\n\n     As for \u2018dynamic-link\u2019, LIB should not contain any suffix such as\n     \u2018.so\u2019 (*note dynamic-link: Foreign Libraries.).  It should also not\n     contain any directory components.  Libraries that implement Guile\n     Extensions should be put into the normal locations for shared\n     libraries.  We recommend to use the naming convention\n     \u2018libguile-bla-blum\u2019 for a extension related to a module \u2018(bla\n     blum)\u2019.\n\n     The normal way for a extension to be used is to write a small\n     Scheme file that defines a module, and to load the extension into\n     this module.  When the module is auto-loaded, the extension is\n     loaded as well.  For example,\n\n          (define-module (bla blum))\n\n          (load-extension \"libguile-bla-blum\" \"bla_init_blum\")\n\n\u001f\nFile: guile.info,  Node: C Extensions,  Next: Modules and Extensions,  Prev: Foreign Functions,  Up: Foreign Function Interface\n\n6.21.3 C Extensions\n-------------------\n\nThe most interesting application of dynamically linked libraries is\nprobably to use them for providing _compiled code modules_ to Scheme\nprograms.  As much fun as programming in Scheme is, every now and then\ncomes the need to write some low-level C stuff to make Scheme even more\nfun.\n\n   Not only can you put these new primitives into their own module (see\nthe previous section), you can even put them into a shared library that\nis only then linked to your running Guile image when it is actually\nneeded.\n\n   An example will hopefully make everything clear.  Suppose we want to\nmake the Bessel functions of the C library available to Scheme in the\nmodule \u2018(math bessel)\u2019.  First we need to write the appropriate glue\ncode to convert the arguments and return values of the functions from\nScheme to C and back.  Additionally, we need a function that will add\nthem to the set of Guile primitives.  Because this is just an example,\nwe will only implement this for the \u2018j0\u2019 function.\n\n     #include <math.h>\n     #include <libguile.h>\n\n     SCM\n     j0_wrapper (SCM x)\n     {\n       return scm_from_double (j0 (scm_to_double (x, \"j0\")));\n     }\n\n     void\n     init_math_bessel ()\n     {\n       scm_c_define_gsubr (\"j0\", 1, 0, 0, j0_wrapper);\n     }\n\n   We can already try to bring this into action by manually calling the\nlow level functions for performing dynamic linking.  The C source file\nneeds to be compiled into a shared library.  Here is how to do it on\nGNU/Linux, please refer to the \u2018libtool\u2019 documentation for how to create\ndynamically linkable libraries portably.\n\n     gcc -shared -o libbessel.so -fPIC bessel.c\n\n   Now fire up Guile:\n\n     (define bessel-lib (dynamic-link \"./libbessel.so\"))\n     (dynamic-call \"init_math_bessel\" bessel-lib)\n     (j0 2)\n     \u21d2 0.223890779141236\n\n   The filename \u2018./libbessel.so\u2019 should be pointing to the shared\nlibrary produced with the \u2018gcc\u2019 command above, of course.  The second\nline of the Guile interaction will call the \u2018init_math_bessel\u2019 function\nwhich in turn will register the C function \u2018j0_wrapper\u2019 with the Guile\ninterpreter under the name \u2018j0\u2019.  This function becomes immediately\navailable and we can call it from Scheme.\n\n   Fun, isn\u2019t it?  But we are only half way there.  This is what\n\u2018apropos\u2019 has to say about \u2018j0\u2019:\n\n     (apropos \"j0\")\n     \u22a3 (guile-user): j0     #<primitive-procedure j0>\n\n   As you can see, \u2018j0\u2019 is contained in the root module, where all the\nother Guile primitives like \u2018display\u2019, etc live.  In general, a\nprimitive is put into whatever module is the \u201ccurrent module\u201d at the\ntime \u2018scm_c_define_gsubr\u2019 is called.\n\n   A compiled module should have a specially named \u201cmodule init\nfunction\u201d.  Guile knows about this special name and will call that\nfunction automatically after having linked in the shared library.  For\nour example, we replace \u2018init_math_bessel\u2019 with the following code in\n\u2018bessel.c\u2019:\n\n     void\n     init_math_bessel (void *unused)\n     {\n       scm_c_define_gsubr (\"j0\", 1, 0, 0, j0_wrapper);\n       scm_c_export (\"j0\", NULL);\n     }\n\n     void\n     scm_init_math_bessel_module ()\n     {\n       scm_c_define_module (\"math bessel\", init_math_bessel, NULL);\n     }\n\n   The general pattern for the name of a module init function is:\n\u2018scm_init_\u2019, followed by the name of the module where the individual\nhierarchical components are concatenated with underscores, followed by\n\u2018_module\u2019.\n\n   After \u2018libbessel.so\u2019 has been rebuilt, we need to place the shared\nlibrary into the right place.\n\n   Once the module has been correctly installed, it should be possible\nto use it like this:\n\n     guile> (load-extension \"./libbessel.so\" \"scm_init_math_bessel_module\")\n     guile> (use-modules (math bessel))\n     guile> (j0 2)\n     0.223890779141236\n     guile> (apropos \"j0\")\n     \u22a3 (math bessel): j0      #<primitive-procedure j0>\n\n   That\u2019s it!\n\n\u001f\nFile: guile.info,  Node: Modules and Extensions,  Next: Foreign Pointers,  Prev: C Extensions,  Up: Foreign Function Interface\n\n6.21.4 Modules and Extensions\n-----------------------------\n\nThe new primitives that you add to Guile with \u2018scm_c_define_gsubr\u2019\n(*note Primitive Procedures::) or with any of the other mechanisms are\nplaced into the module that is current when the \u2018scm_c_define_gsubr\u2019 is\nexecuted.  Extensions loaded from the REPL, for example, will be placed\ninto the \u2018(guile-user)\u2019 module, if the REPL module was not changed.\n\n   To define C primitives within a specific module, the simplest way is:\n\n     (define-module (foo bar))\n     (load-extension \"foobar-c-code\" \"foo_bar_init\")\n\n   When loaded with \u2018(use-modules (foo bar))\u2019, the \u2018load-extension\u2019 call\nlooks for the \u2018foobar-c-code.so\u2019 (etc) object file in Guile\u2019s\n\u2018extensiondir\u2019, which is usually a subdirectory of the \u2018libdir\u2019.  For\nexample, if your libdir is \u2018/usr/lib\u2019, the \u2018extensiondir\u2019 for the Guile\n2.2.X series will be \u2018/usr/lib/guile/2.2/\u2019.\n\n   The extension path includes the major and minor version of Guile (the\n\u201ceffective version\u201d), because Guile guarantees compatibility within a\ngiven effective version.  This allows you to install different versions\nof the same extension for different versions of Guile.\n\n   If the extension is not found in the \u2018extensiondir\u2019, Guile will also\nsearch the standard system locations, such as \u2018/usr/lib\u2019 or\n\u2018/usr/local/lib\u2019.  It is preferable, however, to keep your extension out\nof the system library path, to prevent unintended interference with\nother dynamically-linked C libraries.\n\n   If someone installs your module to a non-standard location then the\nobject file won\u2019t be found.  You can address this by inserting the\ninstall location in the \u2018foo/bar.scm\u2019 file.  This is convenient for the\nuser and also guarantees the intended object is read, even if stray\nolder or newer versions are in the loader\u2019s path.\n\n   The usual way to specify an install location is with a \u2018prefix\u2019 at\nthe configure stage, for instance \u2018./configure prefix=/opt\u2019 results in\nlibrary files as say \u2018/opt/lib/foobar-c-code.so\u2019.  When using Autoconf\n(*note Introduction: (autoconf)Top.), the library location is in a\n\u2018libdir\u2019 variable.  Its value is intended to be expanded by \u2018make\u2019, and\ncan by substituted into a source file like \u2018foo.scm.in\u2019\n\n     (define-module (foo bar))\n     (load-extension \"XXextensiondirXX/foobar-c-code\" \"foo_bar_init\")\n\nwith the following in a \u2018Makefile\u2019, using \u2018sed\u2019 (*note Introduction:\n(sed)Top.),\n\n     foo.scm: foo.scm.in\n             sed 's|XXextensiondirXX|$(libdir)/guile/2.2|' <foo.scm.in >foo.scm\n\n   The actual pattern \u2018XXextensiondirXX\u2019 is arbitrary, it\u2019s only\nsomething which doesn\u2019t otherwise occur.  If several modules need the\nvalue, it can be easier to create one \u2018foo/config.scm\u2019 with a define of\nthe \u2018extensiondir\u2019 location, and use that as required.\n\n     (define-module (foo config))\n     (define-public foo-config-extensiondir \"XXextensiondirXX\"\")\n\n   Such a file might have other locations too, for instance a data\ndirectory for auxiliary files, or \u2018localedir\u2019 if the module has its own\n\u2018gettext\u2019 message catalogue (*note Internationalization::).\n\n   It will be noted all of the above requires that the Scheme code to be\nfound in \u2018%load-path\u2019 (*note Load Paths::).  Presently it\u2019s left up to\nthe system administrator or each user to augment that path when\ninstalling Guile modules in non-default locations.  But having reached\nthe Scheme code, that code should take care of hitting any of its own\nprivate files etc.\n\n\u001f\nFile: guile.info,  Node: Foreign Pointers,  Next: Dynamic FFI,  Prev: Modules and Extensions,  Up: Foreign Function Interface\n\n6.21.5 Foreign Pointers\n-----------------------\n\nThe previous sections have shown how Guile can be extended at runtime by\nloading compiled C extensions.  This approach is all well and good, but\nwouldn\u2019t it be nice if we didn\u2019t have to write any C at all?  This\nsection takes up the problem of accessing C values from Scheme, and the\nnext discusses C functions.\n\n* Menu:\n\n* Foreign Types::                  Expressing C types in Scheme.\n* Foreign Variables::              Pointers to C symbols.\n* Void Pointers and Byte Access::  Pointers into the ether.\n* Foreign Structs::                Packing and unpacking structs.\n\n\u001f\nFile: guile.info,  Node: Foreign Types,  Next: Foreign Variables,  Up: Foreign Pointers\n\n6.21.5.1 Foreign Types\n......................\n\nThe first impedance mismatch that one sees between C and Scheme is that\nin C, the storage locations (variables) are typed, but in Scheme types\nare associated with values, not variables.  *Note Values and\nVariables::.\n\n   So when describing a C function or a C structure so that it can be\naccessed from Scheme, the data types of the parameters or fields must be\npassed explicitly.\n\n   These \u201cC type values\u201d may be constructed using the constants and\nprocedures from the \u2018(system foreign)\u2019 module, which may be loaded like\nthis:\n\n     (use-modules (system foreign))\n\n   \u2018(system foreign)\u2019 exports a number of values expressing the basic C\ntypes:\n\n -- Scheme Variable: int8\n -- Scheme Variable: uint8\n -- Scheme Variable: uint16\n -- Scheme Variable: int16\n -- Scheme Variable: uint32\n -- Scheme Variable: int32\n -- Scheme Variable: uint64\n -- Scheme Variable: int64\n -- Scheme Variable: float\n -- Scheme Variable: double\n     These values represent the C numeric types of the specified sizes\n     and signednesses.\n\n   In addition there are some convenience bindings for indicating types\nof platform-dependent size:\n\n -- Scheme Variable: int\n -- Scheme Variable: unsigned-int\n -- Scheme Variable: long\n -- Scheme Variable: unsigned-long\n -- Scheme Variable: short\n -- Scheme Variable: unsigned-short\n -- Scheme Variable: size_t\n -- Scheme Variable: ssize_t\n -- Scheme Variable: ptrdiff_t\n -- Scheme Variable: intptr_t\n -- Scheme Variable: uintptr_t\n     Values exported by the \u2018(system foreign)\u2019 module, representing C\n     numeric types.  For example, \u2018long\u2019 may be \u2018equal?\u2019 to \u2018int64\u2019 on a\n     64-bit platform.\n\n -- Scheme Variable: void\n     The \u2018void\u2019 type.  It can be used as the first argument to\n     \u2018pointer->procedure\u2019 to wrap a C function that returns nothing.\n\n   In addition, the symbol \u2018*\u2019 is used by convention to denote pointer\ntypes.  Procedures detailed in the following sections, such as\n\u2018pointer->procedure\u2019, accept it as a type descriptor.\n\n\u001f\nFile: guile.info,  Node: Foreign Variables,  Next: Void Pointers and Byte Access,  Prev: Foreign Types,  Up: Foreign Pointers\n\n6.21.5.2 Foreign Variables\n..........................\n\nPointers to variables in the current address space may be looked up\ndynamically using \u2018dynamic-pointer\u2019.\n\n -- Scheme Procedure: dynamic-pointer name dobj\n -- C Function: scm_dynamic_pointer (name, dobj)\n     Return a \u201cwrapped pointer\u201d for the symbol NAME in the shared object\n     referred to by DOBJ.  The returned pointer points to a C object.\n\n     Regardless whether your C compiler prepends an underscore \u2018_\u2019 to\n     the global names in a program, you should *not* include this\n     underscore in NAME since it will be added automatically when\n     necessary.\n\n   For example, currently Guile has a variable, \u2018scm_numptob\u2019, as part\nof its API. It is declared as a C \u2018long\u2019.  So, to create a handle\npointing to that foreign value, we do:\n\n     (use-modules (system foreign))\n     (define numptob (dynamic-pointer \"scm_numptob\" (dynamic-link)))\n     numptob\n     \u21d2 #<pointer 0x7fb35b1b4688>\n\n   (The next section discusses ways to dereference pointers.)\n\n   A value returned by \u2018dynamic-pointer\u2019 is a Scheme wrapper for a C\npointer.\n\n -- Scheme Procedure: pointer-address pointer\n -- C Function: scm_pointer_address (pointer)\n     Return the numerical value of POINTER.\n\n          (pointer-address numptob)\n          \u21d2 139984413364296 ; YMMV\n\n -- Scheme Procedure: make-pointer address [finalizer]\n     Return a foreign pointer object pointing to ADDRESS.  If FINALIZER\n     is passed, it should be a pointer to a one-argument C function that\n     will be called when the pointer object becomes unreachable.\n\n -- Scheme Procedure: pointer? obj\n     Return \u2018#t\u2019 if OBJ is a pointer object, \u2018#f\u2019 otherwise.\n\n -- Scheme Variable: %null-pointer\n     A foreign pointer whose value is 0.\n\n -- Scheme Procedure: null-pointer? pointer\n     Return \u2018#t\u2019 if POINTER is the null pointer, \u2018#f\u2019 otherwise.\n\n   For the purpose of passing SCM values directly to foreign functions,\nand allowing them to return SCM values, Guile also supports some unsafe\ncasting operators.\n\n -- Scheme Procedure: scm->pointer scm\n     Return a foreign pointer object with the \u2018object-address\u2019 of SCM.\n\n -- Scheme Procedure: pointer->scm pointer\n     Unsafely cast POINTER to a Scheme object.  Cross your fingers!\n\n   Sometimes you want to give C extensions access to the dynamic FFI. At\nthat point, the names get confusing, because \u201cpointer\u201d can refer to a\n\u2018SCM\u2019 object that wraps a pointer, or to a \u2018void*\u2019 value.  We will try\nto use \u201cpointer object\u201d to refer to Scheme objects, and \u201cpointer value\u201d\nto refer to \u2018void *\u2019 values.\n\n -- C Function: SCM scm_from_pointer (void *ptr, void (*finalizer)\n          (void*))\n     Create a pointer object from a pointer value.\n\n     If FINALIZER is non-null, Guile arranges to call it on the pointer\n     value at some point after the pointer object becomes collectable.\n\n -- C Function: void* scm_to_pointer (SCM obj)\n     Unpack the pointer value from a pointer object.\n\n\u001f\nFile: guile.info,  Node: Void Pointers and Byte Access,  Next: Foreign Structs,  Prev: Foreign Variables,  Up: Foreign Pointers\n\n6.21.5.3 Void Pointers and Byte Access\n......................................\n\nWrapped pointers are untyped, so they are essentially equivalent to C\n\u2018void\u2019 pointers.  As in C, the memory region pointed to by a pointer can\nbe accessed at the byte level.  This is achieved using _bytevectors_\n(*note Bytevectors::).  The \u2018(rnrs bytevectors)\u2019 module contains\nprocedures that can be used to convert byte sequences to Scheme objects\nsuch as strings, floating point numbers, or integers.\n\n -- Scheme Procedure: pointer->bytevector pointer len [offset\n          [uvec_type]]\n -- C Function: scm_pointer_to_bytevector (pointer, len, offset,\n          uvec_type)\n     Return a bytevector aliasing the LEN bytes pointed to by POINTER.\n\n     The user may specify an alternate default interpretation for the\n     memory by passing the UVEC_TYPE argument, to indicate that the\n     memory is an array of elements of that type.  UVEC_TYPE should be\n     something that \u2018array-type\u2019 would return, like \u2018f32\u2019 or \u2018s16\u2019.\n\n     When OFFSET is passed, it specifies the offset in bytes relative to\n     POINTER of the memory region aliased by the returned bytevector.\n\n     Mutating the returned bytevector mutates the memory pointed to by\n     POINTER, so buckle your seatbelts.\n\n -- Scheme Procedure: bytevector->pointer bv [offset]\n -- C Function: scm_bytevector_to_pointer (bv, offset)\n     Return a pointer pointer aliasing the memory pointed to by BV or\n     OFFSET bytes after BV when OFFSET is passed.\n\n   In addition to these primitives, convenience procedures are\navailable:\n\n -- Scheme Procedure: dereference-pointer pointer\n     Assuming POINTER points to a memory region that holds a pointer,\n     return this pointer.\n\n -- Scheme Procedure: string->pointer string [encoding]\n     Return a foreign pointer to a nul-terminated copy of STRING in the\n     given ENCODING, defaulting to the current locale encoding.  The C\n     string is freed when the returned foreign pointer becomes\n     unreachable.\n\n     This is the Scheme equivalent of \u2018scm_to_stringn\u2019.\n\n -- Scheme Procedure: pointer->string pointer [length] [encoding]\n     Return the string representing the C string pointed to by POINTER.\n     If LENGTH is omitted or \u2018-1\u2019, the string is assumed to be\n     nul-terminated.  Otherwise LENGTH is the number of bytes in memory\n     pointed to by POINTER.  The C string is assumed to be in the given\n     ENCODING, defaulting to the current locale encoding.\n\n     This is the Scheme equivalent of \u2018scm_from_stringn\u2019.\n\n   Most object-oriented C libraries use pointers to specific data\nstructures to identify objects.  It is useful in such cases to reify the\ndifferent pointer types as disjoint Scheme types.  The\n\u2018define-wrapped-pointer-type\u2019 macro simplifies this.\n\n -- Scheme Syntax: define-wrapped-pointer-type type-name pred wrap\n          unwrap print\n     Define helper procedures to wrap pointer objects into Scheme\n     objects with a disjoint type.  Specifically, this macro defines:\n\n        \u2022 PRED, a predicate for the new Scheme type;\n        \u2022 WRAP, a procedure that takes a pointer object and returns an\n          object that satisfies PRED;\n        \u2022 UNWRAP, which does the reverse.\n\n     WRAP preserves pointer identity, for two pointer objects P1 and P2\n     that are \u2018equal?\u2019, \u2018(eq? (WRAP P1) (WRAP P2)) \u21d2 #t\u2019.\n\n     Finally, PRINT should name a user-defined procedure to print such\n     objects.  The procedure is passed the wrapped object and a port to\n     write to.\n\n     For example, assume we are wrapping a C library that defines a\n     type, \u2018bottle_t\u2019, and functions that can be passed \u2018bottle_t *\u2019\n     pointers to manipulate them.  We could write:\n\n          (define-wrapped-pointer-type bottle\n            bottle?\n            wrap-bottle unwrap-bottle\n            (lambda (b p)\n              (format p \"#<bottle of ~a ~x>\"\n                      (bottle-contents b)\n                      (pointer-address (unwrap-bottle b)))))\n\n          (define grab-bottle\n            ;; Wrapper for `bottle_t *grab (void)'.\n            (let ((grab (pointer->procedure '*\n                                            (dynamic-func \"grab_bottle\" libbottle)\n                                            '())))\n              (lambda ()\n                \"Return a new bottle.\"\n                (wrap-bottle (grab)))))\n\n          (define bottle-contents\n            ;; Wrapper for `const char *bottle_contents (bottle_t *)'.\n            (let ((contents (pointer->procedure '*\n                                                (dynamic-func \"bottle_contents\"\n                                                               libbottle)\n                                                '(*))))\n              (lambda (b)\n                \"Return the contents of B.\"\n                (pointer->string (contents (unwrap-bottle b))))))\n\n          (write (grab-bottle))\n          \u21d2 #<bottle of Ch\u00e2teau Haut-Brion 803d36>\n\n     In this example, \u2018grab-bottle\u2019 is guaranteed to return a genuine\n     \u2018bottle\u2019 object satisfying \u2018bottle?\u2019.  Likewise, \u2018bottle-contents\u2019\n     errors out when its argument is not a genuine \u2018bottle\u2019 object.\n\n   Going back to the \u2018scm_numptob\u2019 example above, here is how we can\nread its value as a C \u2018long\u2019 integer:\n\n     (use-modules (rnrs bytevectors))\n\n     (bytevector-uint-ref (pointer->bytevector numptob (sizeof long))\n                          0 (native-endianness)\n                          (sizeof long))\n     \u21d2 8\n\n   If we wanted to corrupt Guile\u2019s internal state, we could set\n\u2018scm_numptob\u2019 to another value; but we shouldn\u2019t, because that variable\nis not meant to be set.  Indeed this point applies more widely: the C\nAPI is a dangerous place to be.  Not only might setting a value crash\nyour program, simply accessing the data pointed to by a dangling pointer\nor similar can prove equally disastrous.\n\n\u001f\nFile: guile.info,  Node: Foreign Structs,  Prev: Void Pointers and Byte Access,  Up: Foreign Pointers\n\n6.21.5.4 Foreign Structs\n........................\n\nFinally, one last note on foreign values before moving on to actually\ncalling foreign functions.  Sometimes you need to deal with C structs,\nwhich requires interpreting each element of the struct according to the\nits type, offset, and alignment.  Guile has some primitives to support\nthis.\n\n -- Scheme Procedure: sizeof type\n -- C Function: scm_sizeof (type)\n     Return the size of TYPE, in bytes.\n\n     TYPE should be a valid C type, like \u2018int\u2019.  Alternately TYPE may be\n     the symbol \u2018*\u2019, in which case the size of a pointer is returned.\n     TYPE may also be a list of types, in which case the size of a\n     \u2018struct\u2019 with ABI-conventional packing is returned.\n\n -- Scheme Procedure: alignof type\n -- C Function: scm_alignof (type)\n     Return the alignment of TYPE, in bytes.\n\n     TYPE should be a valid C type, like \u2018int\u2019.  Alternately TYPE may be\n     the symbol \u2018*\u2019, in which case the alignment of a pointer is\n     returned.  TYPE may also be a list of types, in which case the\n     alignment of a \u2018struct\u2019 with ABI-conventional packing is returned.\n\n   Guile also provides some convenience methods to pack and unpack\nforeign pointers wrapping C structs.\n\n -- Scheme Procedure: make-c-struct types vals\n     Create a foreign pointer to a C struct containing VALS with types\n     \u2018types\u2019.\n\n     VALS and \u2018types\u2019 should be lists of the same length.\n\n -- Scheme Procedure: parse-c-struct foreign types\n     Parse a foreign pointer to a C struct, returning a list of values.\n\n     \u2018types\u2019 should be a list of C types.\n\n   For example, to create and parse the equivalent of a \u2018struct {\nint64_t a; uint8_t b; }\u2019:\n\n     (parse-c-struct (make-c-struct (list int64 uint8)\n                                    (list 300 43))\n                     (list int64 uint8))\n     \u21d2 (300 43)\n\n   As yet, Guile only has convenience routines to support\nconventionally-packed structs.  But given the \u2018bytevector->pointer\u2019 and\n\u2018pointer->bytevector\u2019 routines, one can create and parse tightly packed\nstructs and unions by hand.  See the code for \u2018(system foreign)\u2019 for\ndetails.\n\n\u001f\nFile: guile.info,  Node: Dynamic FFI,  Prev: Foreign Pointers,  Up: Foreign Function Interface\n\n6.21.6 Dynamic FFI\n------------------\n\nOf course, the land of C is not all nouns and no verbs: there are\nfunctions too, and Guile allows you to call them.\n\n -- Scheme Procedure: pointer->procedure return_type func_ptr arg_types\n          [#:return-errno?=#f]\n -- C Function: scm_pointer_to_procedure (return_type, func_ptr,\n          arg_types)\n -- C Function: scm_pointer_to_procedure_with_errno (return_type,\n          func_ptr, arg_types)\n\n     Make a foreign function.\n\n     Given the foreign void pointer FUNC_PTR, its argument and return\n     types ARG_TYPES and RETURN_TYPE, return a procedure that will pass\n     arguments to the foreign function and return appropriate values.\n\n     ARG_TYPES should be a list of foreign types.  \u2018return_type\u2019 should\n     be a foreign type.  *Note Foreign Types::, for more information on\n     foreign types.\n\n     If RETURN-ERRNO? is true, or when calling\n     \u2018scm_pointer_to_procedure_with_errno\u2019, the returned procedure will\n     return two values, with \u2018errno\u2019 as the second value.\n\n   Here is a better definition of \u2018(math bessel)\u2019:\n\n     (define-module (math bessel)\n       #:use-module (system foreign)\n       #:export (j0))\n\n     (define libm (dynamic-link \"libm\"))\n\n     (define j0\n       (pointer->procedure double\n                           (dynamic-func \"j0\" libm)\n                           (list double)))\n\n   That\u2019s it!  No C at all.\n\n   Numeric arguments and return values from foreign functions are\nrepresented as Scheme values.  For example, \u2018j0\u2019 in the above example\ntakes a Scheme number as its argument, and returns a Scheme number.\n\n   Pointers may be passed to and returned from foreign functions as\nwell.  In that case the type of the argument or return value should be\nthe symbol \u2018*\u2019, indicating a pointer.  For example, the following code\nmakes \u2018memcpy\u2019 available to Scheme:\n\n     (define memcpy\n       (let ((this (dynamic-link)))\n         (pointer->procedure '*\n                             (dynamic-func \"memcpy\" this)\n                             (list '* '* size_t))))\n\n   To invoke \u2018memcpy\u2019, one must pass it foreign pointers:\n\n     (use-modules (rnrs bytevectors))\n\n     (define src-bits\n       (u8-list->bytevector '(0 1 2 3 4 5 6 7)))\n     (define src\n       (bytevector->pointer src-bits))\n     (define dest\n       (bytevector->pointer (make-bytevector 16 0)))\n\n     (memcpy dest src (bytevector-length src-bits))\n\n     (bytevector->u8-list (pointer->bytevector dest 16))\n     \u21d2 (0 1 2 3 4 5 6 7 0 0 0 0 0 0 0 0)\n\n   One may also pass structs as values, passing structs as foreign\npointers.  *Note Foreign Structs::, for more information on how to\nexpress struct types and struct values.\n\n   \u201cOut\u201d arguments are passed as foreign pointers.  The memory pointed\nto by the foreign pointer is mutated in place.\n\n     ;; struct timeval {\n     ;;      time_t      tv_sec;     /* seconds */\n     ;;      suseconds_t tv_usec;    /* microseconds */\n     ;; };\n     ;; assuming fields are of type \"long\"\n\n     (define gettimeofday\n       (let ((f (pointer->procedure\n                 int\n                 (dynamic-func \"gettimeofday\" (dynamic-link))\n                 (list '* '*)))\n             (tv-type (list long long)))\n         (lambda ()\n           (let* ((timeval (make-c-struct tv-type (list 0 0)))\n                  (ret (f timeval %null-pointer)))\n             (if (zero? ret)\n                 (apply values (parse-c-struct timeval tv-type))\n                 (error \"gettimeofday returned an error\" ret))))))\n\n     (gettimeofday)\n     \u21d2 1270587589\n     \u21d2 499553\n\n   As you can see, this interface to foreign functions is at a very low,\nsomewhat dangerous level(1).\n\n   The FFI can also work in the opposite direction: making Scheme\nprocedures callable from C. This makes it possible to use Scheme\nprocedures as \u201ccallbacks\u201d expected by C function.\n\n -- Scheme Procedure: procedure->pointer return-type proc arg-types\n -- C Function: scm_procedure_to_pointer (return_type, proc, arg_types)\n     Return a pointer to a C function of type RETURN-TYPE taking\n     arguments of types ARG-TYPES (a list) and behaving as a proxy to\n     procedure PROC.  Thus PROC\u2019s arity, supported argument types, and\n     return type should match RETURN-TYPE and ARG-TYPES.\n\n   As an example, here\u2019s how the C library\u2019s \u2018qsort\u2019 array sorting\nfunction can be made accessible to Scheme (*note \u2018qsort\u2019: (libc)Array\nSort Function.):\n\n     (define qsort!\n       (let ((qsort (pointer->procedure void\n                                        (dynamic-func \"qsort\"\n                                                      (dynamic-link))\n                                        (list '* size_t size_t '*))))\n         (lambda (bv compare)\n           ;; Sort bytevector BV in-place according to comparison\n           ;; procedure COMPARE.\n           (let ((ptr (procedure->pointer int\n                                          (lambda (x y)\n                                            ;; X and Y are pointers so,\n                                            ;; for convenience, dereference\n                                            ;; them before calling COMPARE.\n                                            (compare (dereference-uint8* x)\n                                                     (dereference-uint8* y)))\n                                          (list '* '*))))\n             (qsort (bytevector->pointer bv)\n                    (bytevector-length bv) 1 ;; we're sorting bytes\n                    ptr)))))\n\n     (define (dereference-uint8* ptr)\n       ;; Helper function: dereference the byte pointed to by PTR.\n       (let ((b (pointer->bytevector ptr 1)))\n         (bytevector-u8-ref b 0)))\n\n     (define bv\n       ;; An unsorted array of bytes.\n       (u8-list->bytevector '(7 1 127 3 5 4 77 2 9 0)))\n\n     ;; Sort BV.\n     (qsort! bv (lambda (x y) (- x y)))\n\n     ;; Let's see what the sorted array looks like:\n     (bytevector->u8-list bv)\n     \u21d2 (0 1 2 3 4 5 7 9 77 127)\n\n   And voil\u00e0!\n\n   Note that \u2018procedure->pointer\u2019 is not supported (and not defined) on\na few exotic architectures.  Thus, user code may need to check\n\u2018(defined? 'procedure->pointer)\u2019.  Nevertheless, it is available on many\narchitectures, including (as of libffi 3.0.9) x86, ia64, SPARC, PowerPC,\nARM, and MIPS, to name a few.\n\n   ---------- Footnotes ----------\n\n   (1) A contribution to Guile in the form of a high-level FFI would be\nmost welcome.\n\n\u001f\nFile: guile.info,  Node: Scheduling,  Next: Options and Config,  Prev: Foreign Function Interface,  Up: API Reference\n\n6.22 Threads, Mutexes, Asyncs and Dynamic Roots\n===============================================\n\n* Menu:\n\n* Threads::                     Multiple threads of execution.\n* Thread Local Variables::      Some fluids are thread-local.\n* Asyncs::                      Asynchronous interrupts.\n* Atomics::                     Atomic references.\n* Mutexes and Condition Variables:: Synchronization primitives.\n* Blocking::                    How to block properly in guile mode.\n* Futures::                     Fine-grain parallelism.\n* Parallel Forms::              Parallel execution of forms.\n\n\u001f\nFile: guile.info,  Node: Threads,  Next: Thread Local Variables,  Up: Scheduling\n\n6.22.1 Threads\n--------------\n\nGuile supports POSIX threads, unless it was configured with\n\u2018--without-threads\u2019 or the host lacks POSIX thread support.  When thread\nsupport is available, the \u2018threads\u2019 feature is provided (*note\n\u2018provided?\u2019: Feature Manipulation.).\n\n   The procedures below manipulate Guile threads, which are wrappers\naround the system\u2019s POSIX threads.  For application-level parallelism,\nusing higher-level constructs, such as futures, is recommended (*note\nFutures::).\n\n   To use these facilities, load the \u2018(ice-9 threads)\u2019 module.\n\n     (use-modules (ice-9 threads))\n\n -- Scheme Procedure: all-threads\n -- C Function: scm_all_threads ()\n     Return a list of all threads.\n\n -- Scheme Procedure: current-thread\n -- C Function: scm_current_thread ()\n     Return the thread that called this function.\n\n -- Scheme Procedure: call-with-new-thread thunk [handler]\n     Call \u2018thunk\u2019 in a new thread and with a new dynamic state,\n     returning the new thread.  The procedure THUNK is called via\n     \u2018with-continuation-barrier\u2019.\n\n     When HANDLER is specified, then THUNK is called from within a\n     \u2018catch\u2019 with tag \u2018#t\u2019 that has HANDLER as its handler.  This catch\n     is established inside the continuation barrier.\n\n     Once THUNK or HANDLER returns, the return value is made the _exit\n     value_ of the thread and the thread is terminated.\n\n -- C Function: SCM scm_spawn_thread (scm_t_catch_body body, void\n          *body_data, scm_t_catch_handler handler, void *handler_data)\n     Call BODY in a new thread, passing it BODY_DATA, returning the new\n     thread.  The function BODY is called via\n     \u2018scm_c_with_continuation_barrier\u2019.\n\n     When HANDLER is non-\u2018NULL\u2019, BODY is called via \u2018scm_internal_catch\u2019\n     with tag \u2018SCM_BOOL_T\u2019 that has HANDLER and HANDLER_DATA as the\n     handler and its data.  This catch is established inside the\n     continuation barrier.\n\n     Once BODY or HANDLER returns, the return value is made the _exit\n     value_ of the thread and the thread is terminated.\n\n -- Scheme Procedure: thread? obj\n -- C Function: scm_thread_p (obj)\n     Return \u2018#t\u2019 ff OBJ is a thread; otherwise, return \u2018#f\u2019.\n\n -- Scheme Procedure: join-thread thread [timeout [timeoutval]]\n -- C Function: scm_join_thread (thread)\n -- C Function: scm_join_thread_timed (thread, timeout, timeoutval)\n     Wait for THREAD to terminate and return its exit value.  Only\n     threads that were created with \u2018call-with-new-thread\u2019 or\n     \u2018scm_spawn_thread\u2019 can be joinable; attempting to join a foreign\n     thread will raise an error.\n\n     When TIMEOUT is given, it specifies a point in time where the\n     waiting should be aborted.  It can be either an integer as returned\n     by \u2018current-time\u2019 or a pair as returned by \u2018gettimeofday\u2019.  When\n     the waiting is aborted, TIMEOUTVAL is returned (if it is specified;\n     \u2018#f\u2019 is returned otherwise).\n\n -- Scheme Procedure: thread-exited? thread\n -- C Function: scm_thread_exited_p (thread)\n     Return \u2018#t\u2019 if THREAD has exited, or \u2018#f\u2019 otherwise.\n\n -- Scheme Procedure: yield\n -- C Function: scm_yield (thread)\n     If one or more threads are waiting to execute, calling yield forces\n     an immediate context switch to one of them.  Otherwise, yield has\n     no effect.\n\n -- Scheme Procedure: cancel-thread thread . values\n -- C Function: scm_cancel_thread (thread)\n     Asynchronously interrupt THREAD and ask it to terminate.\n     \u2018dynamic-wind\u2019 post thunks will run, but throw handlers will not.\n     If THREAD has already terminated or been signaled to terminate,\n     this function is a no-op.  Calling \u2018join-thread\u2019 on the thread will\n     return the given VALUES, if the cancel succeeded.\n\n     Under the hood, thread cancellation uses \u2018system-async-mark\u2019 and\n     \u2018abort-to-prompt\u2019.  *Note Asyncs:: for more on asynchronous\n     interrupts.\n\n -- macro: make-thread proc arg ...\n     Apply PROC to ARG ... in a new thread formed by\n     \u2018call-with-new-thread\u2019 using a default error handler that display\n     the error to the current error port.  The ARG ... expressions are\n     evaluated in the new thread.\n\n -- macro: begin-thread expr1 expr2 ...\n     Evaluate forms EXPR1 EXPR2 ... in a new thread formed by\n     \u2018call-with-new-thread\u2019 using a default error handler that display\n     the error to the current error port.\n\n   One often wants to limit the number of threads running to be\nproportional to the number of available processors.  These interfaces\nare therefore exported by (ice-9 threads) as well.\n\n -- Scheme Procedure: total-processor-count\n -- C Function: scm_total_processor_count ()\n     Return the total number of processors of the machine, which is\n     guaranteed to be at least 1.  A \u201cprocessor\u201d here is a thread\n     execution unit, which can be either:\n\n        \u2022 an execution core in a (possibly multi-core) chip, in a\n          (possibly multi- chip) module, in a single computer, or\n        \u2022 a thread execution unit inside a core in the case of\n          \u201chyper-threaded\u201d CPUs.\n\n     Which of the two definitions is used, is unspecified.\n\n -- Scheme Procedure: current-processor-count\n -- C Function: scm_current_processor_count ()\n     Like \u2018total-processor-count\u2019, but return the number of processors\n     available to the current process.  See \u2018setaffinity\u2019 and\n     \u2018getaffinity\u2019 for more information.\n\n\u001f\nFile: guile.info,  Node: Thread Local Variables,  Next: Asyncs,  Prev: Threads,  Up: Scheduling\n\n6.22.2 Thread-Local Variables\n-----------------------------\n\nSometimes you want to establish a variable binding that is only valid\nfor a given thread: a \u201cthread-local variable\u201d.\n\n   You would think that fluids or parameters would be Guile\u2019s answer for\nthread-local variables, since establishing a new fluid binding doesn\u2019t\naffect bindings in other threads.  *Note Fluids and Dynamic States::, or\n*Note Parameters::.  However, new threads inherit the fluid bindings\nthat were in place in their creator threads.  In this way, a binding\nestablished using a fluid (or a parameter) in a thread can escape to\nother threads, which might not be what you want.  Or, it might escape\nvia explicit reification via \u2018current-dynamic-state\u2019.\n\n   Of course, this dynamic scoping might be exactly what you want;\nthat\u2019s why fluids and parameters work this way, and is what you want for\nfor many common parameters such as the current input and output ports,\nthe current locale conversion parameters, and the like.  Perhaps this is\nthe case for most parameters, even.  If your use case for thread-local\nbindings comes from a desire to isolate a binding from its setting in\nunrelated threads, then fluids and parameters apply nicely.\n\n   On the other hand, if your use case is to prevent concurrent access\nto a value from multiple threads, then using vanilla fluids or\nparameters is not appropriate.  For this purpose, Guile has\n\u201cthread-local fluids\u201d.  A fluid created with \u2018make-thread-local-fluid\u2019\nwon\u2019t be captured by \u2018current-dynamic-state\u2019 and won\u2019t be propagated to\nnew threads.\n\n -- Scheme Procedure: make-thread-local-fluid [dflt]\n -- C Function: scm_make_thread_local_fluid (dflt)\n     Return a newly created fluid, whose initial value is DFLT, or \u2018#f\u2019\n     if DFLT is not given.  Unlike fluids made with \u2018make-fluid\u2019, thread\n     local fluids are not captured by \u2018make-dynamic-state\u2019.  Similarly,\n     a newly spawned child thread does not inherit thread-local fluid\n     values from the parent thread.\n\n -- Scheme Procedure: fluid-thread-local? fluid\n -- C Function: scm_fluid_thread_local_p (fluid)\n     Return \u2018#t\u2019 if the fluid FLUID is is thread-local, or \u2018#f\u2019\n     otherwise.\n\n   For example:\n\n     (define %thread-local (make-thread-local-fluid))\n\n     (with-fluids ((%thread-local (compute-data)))\n       ... (fluid-ref %thread-local) ...)\n\n   You can also make a thread-local parameter out of a thread-local\nfluid using the normal \u2018fluid->parameter\u2019:\n\n     (define param (fluid->parameter (make-thread-local-fluid)))\n\n     (parameterize ((param (compute-data)))\n       ... (param) ...)\n\n\u001f\nFile: guile.info,  Node: Asyncs,  Next: Atomics,  Prev: Thread Local Variables,  Up: Scheduling\n\n6.22.3 Asynchronous Interrupts\n------------------------------\n\nEvery Guile thread can be interrupted.  Threads running Guile code will\nperiodically check if there are pending interrupts and run them if\nnecessary.  To interrupt a thread, call \u2018system-async-mark\u2019 on that\nthread.\n\n -- Scheme Procedure: system-async-mark proc [thread]\n -- C Function: scm_system_async_mark (proc)\n -- C Function: scm_system_async_mark_for_thread (proc, thread)\n     Enqueue PROC (a procedure with zero arguments) for future execution\n     in THREAD.  When PROC has already been enqueued for THREAD but has\n     not been executed yet, this call has no effect.  When THREAD is\n     omitted, the thread that called \u2018system-async-mark\u2019 is used.\n\n   Note that \u2018scm_system_async_mark_for_thread\u2019 is not\n\u201casync-signal-safe\u201d and so cannot be called from a C signal handler.\n(Indeed in general, \u2018libguile\u2019 functions are not safe to call from C\nsignal handlers.)\n\n   Though an interrupt procedure can have any side effect permitted to\nGuile code, asynchronous interrupts are generally used either for\nprofiling or for prematurely cancelling a computation.  The former case\nis mostly transparent to the program being run, by design, but the\nlatter case can introduce bugs.  Like finalizers (*note Foreign Object\nMemory Management::), asynchronous interrupts introduce concurrency in a\nprogram.  An asyncronous interrupt can run in the middle of some\nmutex-protected operation, for example, and potentially corrupt the\nprogram\u2019s state.\n\n   If some bit of Guile code needs to temporarily inhibit interrupts, it\ncan use \u2018call-with-blocked-asyncs\u2019.  This function works by temporarily\nincreasing the _async blocking level_ of the current thread while a\ngiven procedure is running.  The blocking level starts out at zero, and\nwhenever a safe point is reached, a blocking level greater than zero\nwill prevent the execution of queued asyncs.\n\n   Analogously, the procedure \u2018call-with-unblocked-asyncs\u2019 will\ntemporarily decrease the blocking level of the current thread.  You can\nuse it when you want to disable asyncs by default and only allow them\ntemporarily.\n\n   In addition to the C versions of \u2018call-with-blocked-asyncs\u2019 and\n\u2018call-with-unblocked-asyncs\u2019, C code can use \u2018scm_dynwind_block_asyncs\u2019\nand \u2018scm_dynwind_unblock_asyncs\u2019 inside a \u201cdynamic context\u201d (*note\nDynamic Wind::) to block or unblock asyncs temporarily.\n\n -- Scheme Procedure: call-with-blocked-asyncs proc\n -- C Function: scm_call_with_blocked_asyncs (proc)\n     Call PROC and block the execution of asyncs by one level for the\n     current thread while it is running.  Return the value returned by\n     PROC.  For the first two variants, call PROC with no arguments; for\n     the third, call it with DATA.\n\n -- C Function: void * scm_c_call_with_blocked_asyncs (void * (*proc)\n          (void *data), void *data)\n     The same but with a C function PROC instead of a Scheme thunk.\n\n -- Scheme Procedure: call-with-unblocked-asyncs proc\n -- C Function: scm_call_with_unblocked_asyncs (proc)\n     Call PROC and unblock the execution of asyncs by one level for the\n     current thread while it is running.  Return the value returned by\n     PROC.  For the first two variants, call PROC with no arguments; for\n     the third, call it with DATA.\n\n -- C Function: void * scm_c_call_with_unblocked_asyncs (void *(*proc)\n          (void *data), void *data)\n     The same but with a C function PROC instead of a Scheme thunk.\n\n -- C Function: void scm_dynwind_block_asyncs ()\n     During the current dynwind context, increase the blocking of asyncs\n     by one level.  This function must be used inside a pair of calls to\n     \u2018scm_dynwind_begin\u2019 and \u2018scm_dynwind_end\u2019 (*note Dynamic Wind::).\n\n -- C Function: void scm_dynwind_unblock_asyncs ()\n     During the current dynwind context, decrease the blocking of asyncs\n     by one level.  This function must be used inside a pair of calls to\n     \u2018scm_dynwind_begin\u2019 and \u2018scm_dynwind_end\u2019 (*note Dynamic Wind::).\n\n   Sometimes you want to interrupt a thread that might be waiting for\nsomething to happen, for example on a file descriptor or a condition\nvariable.  In that case you can inform Guile of how to interrupt that\nwait using the following procedures:\n\n -- C Function: int scm_c_prepare_to_wait_on_fd (int fd)\n     Inform Guile that the current thread is about to sleep, and that if\n     an asynchronous interrupt is signalled on this thread, Guile should\n     wake up the thread by writing a zero byte to FD.  Returns zero if\n     the prepare succeeded, or nonzero if the thread already has a\n     pending async and that it should avoid waiting.\n\n -- C Function: int scm_c_prepare_to_wait_on_cond (scm_i_pthread_mutex_t\n          *mutex, scm_i_pthread_cond_t *cond)\n     Inform Guile that the current thread is about to sleep, and that if\n     an asynchronous interrupt is signalled on this thread, Guile should\n     wake up the thread by acquiring MUTEX and signalling COND.  The\n     caller must already hold MUTEX and only drop it as part of the\n     \u2018pthread_cond_wait\u2019 call.  Returns zero if the prepare succeeded,\n     or nonzero if the thread already has a pending async and that it\n     should avoid waiting.\n\n -- C Function: void scm_c_wait_finished (void)\n     Inform Guile that the current thread has finished waiting, and that\n     asynchronous interrupts no longer need any special wakeup action;\n     the current thread will periodically poll its internal queue\n     instead.\n\n   Guile\u2019s own interface to \u2018sleep\u2019, \u2018wait-condition-variable\u2019,\n\u2018select\u2019, and so on all call the above routines as appropriate.\n\n   Finally, note that threads can also be interrupted via POSIX signals.\n*Note Signals::.  As an implementation detail, signal handlers will\neffectively call \u2018system-async-mark\u2019 in a signal-safe way, eventually\nrunning the signal handler using the same async mechanism.  In this way\nyou can temporarily inhibit signal handlers from running using the above\ninterfaces.\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/test-suite/tests/srfi-14.test",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/test-suite/tests/encoding-iso88591.test",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/test-suite/tests/encoding-iso88597.test",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/foreign.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/base/pmatch.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/base/lalr.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/base/message.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/base/target.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/base/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/base/compile.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/base/ck.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/base/syntax.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/base/language.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/vm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/program.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/disassembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/frame.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/dwarf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/loader.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/assembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/linker.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/system/vm/elf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/i18n.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/eval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/receive.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/posix.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/psyntax-pp.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/pretty-print.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/binary-ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/session.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/getopt-long.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/command-line.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/vlist.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/match.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/control.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/regex.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/rdelim.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/format.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/networking.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/r5rs.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/deprecated.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/ice-9/boot-9.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/srfi/srfi-1.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/utils.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/reify-primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/compile-bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/peel-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/handle-interrupts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/split-rec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/type-checks.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/specialize-numbers.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/renumber.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/intmap.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/licm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/simplify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/contification.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/specialize-primcalls.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/prune-bailouts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/constructors.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/dce.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/closure-conversion.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/slot-allocation.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/self-references.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/intset.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/prune-top-level-scopes.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/elide-values.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/verify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/with-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/rotate-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/effects-analysis.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/cse.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/cps/type-fold.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/value/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/scheme/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/scheme/compile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/scheme/decompile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/canonicalize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/peval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/analyze.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/effects.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/compile-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/tree-il/fix-letrec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/i686-pc-linux-gnu/language/bytecode/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/foreign.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/base/pmatch.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/base/lalr.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/base/message.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/base/target.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/base/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/base/compile.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/base/ck.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/base/syntax.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/base/language.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/vm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/program.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/disassembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/frame.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/dwarf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/loader.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/assembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/linker.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/system/vm/elf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/i18n.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/eval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/receive.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/posix.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/psyntax-pp.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/pretty-print.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/binary-ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/session.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/getopt-long.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/command-line.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/vlist.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/match.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/control.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/regex.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/rdelim.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/format.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/networking.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/r5rs.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/deprecated.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/ice-9/boot-9.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/srfi/srfi-1.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/utils.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/reify-primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/compile-bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/peel-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/handle-interrupts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/split-rec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/type-checks.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/specialize-numbers.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/renumber.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/intmap.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/licm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/simplify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/contification.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/specialize-primcalls.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/prune-bailouts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/constructors.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/dce.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/closure-conversion.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/slot-allocation.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/self-references.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/intset.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/prune-top-level-scopes.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/elide-values.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/verify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/with-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/rotate-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/effects-analysis.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/cse.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/cps/type-fold.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/value/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/scheme/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/scheme/compile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/scheme/decompile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/canonicalize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/peval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/analyze.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/effects.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/compile-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/tree-il/fix-letrec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/mips-unknown-linux-gnu/language/bytecode/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/foreign.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/base/pmatch.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/base/lalr.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/base/message.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/base/target.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/base/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/base/compile.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/base/ck.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/base/syntax.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/base/language.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/vm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/program.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/disassembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/frame.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/dwarf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/loader.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/assembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/linker.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/system/vm/elf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/i18n.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/eval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/receive.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/posix.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/psyntax-pp.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/pretty-print.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/binary-ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/session.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/getopt-long.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/command-line.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/vlist.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/match.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/control.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/regex.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/rdelim.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/format.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/networking.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/r5rs.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/deprecated.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/ice-9/boot-9.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/srfi/srfi-1.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/utils.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/reify-primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/compile-bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/peel-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/handle-interrupts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/split-rec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/type-checks.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/specialize-numbers.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/renumber.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/intmap.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/licm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/simplify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/contification.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/specialize-primcalls.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/prune-bailouts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/constructors.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/dce.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/closure-conversion.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/slot-allocation.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/self-references.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/intset.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/prune-top-level-scopes.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/elide-values.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/verify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/with-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/rotate-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/effects-analysis.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/cse.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/cps/type-fold.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/value/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/scheme/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/scheme/compile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/scheme/decompile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/canonicalize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/peval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/analyze.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/effects.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/compile-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/tree-il/fix-letrec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-big-endian/language/bytecode/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/foreign.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/base/pmatch.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/base/lalr.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/base/message.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/base/target.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/base/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/base/compile.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/base/ck.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/base/syntax.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/base/language.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/vm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/program.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/disassembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/frame.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/dwarf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/loader.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/assembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/linker.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/system/vm/elf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/i18n.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/eval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/receive.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/posix.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/psyntax-pp.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/pretty-print.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/binary-ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/session.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/getopt-long.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/command-line.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/vlist.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/match.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/control.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/regex.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/rdelim.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/format.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/networking.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/r5rs.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/deprecated.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/ice-9/boot-9.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/srfi/srfi-1.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/utils.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/reify-primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/compile-bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/peel-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/handle-interrupts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/split-rec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/type-checks.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/specialize-numbers.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/renumber.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/intmap.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/licm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/simplify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/contification.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/specialize-primcalls.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/prune-bailouts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/constructors.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/dce.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/closure-conversion.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/slot-allocation.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/self-references.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/intset.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/prune-top-level-scopes.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/elide-values.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/verify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/with-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/rotate-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/effects-analysis.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/cse.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/cps/type-fold.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/value/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/scheme/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/scheme/compile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/scheme/decompile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/canonicalize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/peval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/analyze.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/effects.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/compile-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/tree-il/fix-letrec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/32-bit-little-endian/language/bytecode/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/foreign.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/base/pmatch.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/base/lalr.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/base/message.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/base/target.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/base/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/base/compile.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/base/ck.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/base/syntax.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/base/language.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/vm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/program.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/disassembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/frame.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/dwarf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/loader.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/assembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/linker.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/system/vm/elf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/i18n.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/eval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/receive.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/posix.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/psyntax-pp.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/pretty-print.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/binary-ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/session.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/getopt-long.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/command-line.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/vlist.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/match.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/control.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/regex.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/rdelim.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/format.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/networking.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/r5rs.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/deprecated.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/ice-9/boot-9.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/srfi/srfi-1.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/utils.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/reify-primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/compile-bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/peel-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/handle-interrupts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/split-rec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/type-checks.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/specialize-numbers.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/renumber.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/intmap.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/licm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/simplify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/contification.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/specialize-primcalls.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/prune-bailouts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/constructors.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/dce.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/closure-conversion.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/slot-allocation.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/self-references.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/intset.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/prune-top-level-scopes.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/elide-values.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/verify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/with-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/rotate-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/effects-analysis.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/cse.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/cps/type-fold.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/value/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/scheme/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/scheme/compile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/scheme/decompile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/canonicalize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/peval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/analyze.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/effects.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/compile-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/tree-il/fix-letrec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/64-bit-little-endian/language/bytecode/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/foreign.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/base/pmatch.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/base/lalr.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/base/message.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/base/target.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/base/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/base/compile.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/base/ck.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/base/syntax.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/base/language.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/vm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/program.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/disassembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/frame.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/dwarf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/loader.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/assembler.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/linker.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/system/vm/elf.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/i18n.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/eval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/receive.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/posix.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/psyntax-pp.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/pretty-print.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/binary-ports.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/session.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/getopt-long.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/command-line.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/vlist.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/match.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/control.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/regex.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/rdelim.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/format.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/networking.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/r5rs.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/deprecated.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/ice-9/boot-9.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/srfi/srfi-1.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/utils.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/reify-primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/compile-bytecode.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/peel-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/handle-interrupts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/split-rec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/type-checks.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/specialize-numbers.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/renumber.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/intmap.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/licm.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/simplify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/contification.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/specialize-primcalls.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/prune-bailouts.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/types.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/constructors.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/dce.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/closure-conversion.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/slot-allocation.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/self-references.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/intset.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/prune-top-level-scopes.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/elide-values.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/verify.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/with-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/rotate-loops.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/effects-analysis.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/cse.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/cps/type-fold.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/value/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/scheme/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/scheme/compile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/scheme/decompile-tree-il.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/optimize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/canonicalize.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/primitives.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/peval.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/analyze.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/debug.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/effects.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/compile-cps.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/tree-il/fix-letrec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/prebuilt/x86_64-unknown-linux-gnu/language/bytecode/spec.go",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/module/scripts/compile.scm",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/libguile/guardians.c",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/doc/ref/hierarchy.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/doc/ref/goops-tutorial.texi",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/doc/ref/hierarchy.png",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/doc/ref/scheme.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-guile-2.2.6-dhou4pxadrp2wvsqe56l4etkdpzhamsa/spack-src/doc/ref/gds.pdf"
    ],
    "total_files": 2070
}