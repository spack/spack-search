{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-bloaty-1.1-bepgjmftpvafg6gsmk237s3zcz5oolim/spack-src/third_party/protobuf/src/solaris/libstdc++.la": "# libstdc++.la - a libtool library file\n# Generated by ltmain.sh - GNU libtool 1.4a-GCC3.0 (1.641.2.256 2001/05/28 20:09:07 with GCC-local changes)\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# ---\n# NOTE: This file lives in /usr/sfw/lib on Solaris 10.  Unfortunately,\n# due to an apparent bug in the Solaris 10 6/06 release,\n# /usr/sfw/lib/libstdc++.la is empty.  Below is the correct content,\n# according to\n#    http://forum.java.sun.com/thread.jspa?threadID=5073150\n# By passing LDFLAGS='-Lsrc/solaris' to configure, make will pick up\n# this copy of the file rather than the empty copy in /usr/sfw/lib.\n#\n# Also see\n#   http://www.technicalarticles.org/index.php/Compiling_MySQL_5.0_on_Solaris_10\n#\n# Note: this is for 32-bit systems.  If you have a 64-bit system,\n# uncomment the appropriate dependency_libs line below.\n# ----\n\n# The name that we can dlopen(3).\ndlname='libstdc++.so.6'\n\n# Names of this library.\nlibrary_names='libstdc++.so.6.0.3 libstdc++.so.6 libstdc++.so'\n\n# The name of the static archive.\nold_library='libstdc++.a'\n\n# Libraries that this one depends upon.\n# 32-bit version:\ndependency_libs='-lc -lm -L/usr/sfw/lib -lgcc_s'\n# 64-bit version:\n#dependency_libs='-L/lib/64 -lc -lm -L/usr/sfw/lib/64 -lgcc_s'\n\n# Version information for libstdc++.\ncurrent=6\nage=0\nrevision=3\n\n# Is this an already installed library?\ninstalled=yes\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='/usr/sfw/lib'\n",
        "/tmp/vanessa/spack-stage/spack-stage-bloaty-1.1-bepgjmftpvafg6gsmk237s3zcz5oolim/spack-src/third_party/freebsd_elf/elf_common.h": "/*-\n * Copyright (c) 2000, 2001, 2008, 2011, David E. O'Brien\n * Copyright (c) 1998 John D. Polstra.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n * $FreeBSD$\n */\n\n#include <stdint.h>\n\n#ifndef _FREEBSD_ELF_SYS_ELF_COMMON_H_\n#define\t_FREEBSD_ELF_SYS_ELF_COMMON_H_ 1\n\n/*\n * ELF definitions that are independent of architecture or word size.\n */\n\n/*\n * Note header.  The \".note\" section contains an array of notes.  Each\n * begins with this header, aligned to a word boundary.  Immediately\n * following the note header is n_namesz bytes of name, padded to the\n * next word boundary.  Then comes n_descsz bytes of descriptor, again\n * padded to a word boundary.  The values of n_namesz and n_descsz do\n * not include the padding.\n */\n\ntypedef struct {\n\tuint32_t\tn_namesz;\t/* Length of name. */\n\tuint32_t\tn_descsz;\t/* Length of descriptor. */\n\tuint32_t\tn_type;\t\t/* Type of this note. */\n} Elf_Note;\n\n/*\n * Option kinds.\n */\n#define\tODK_NULL\t0\t/* undefined */\n#define\tODK_REGINFO\t1\t/* register usage info */\n#define\tODK_EXCEPTIONS\t2\t/* exception processing info */\n#define\tODK_PAD\t\t3\t/* section padding */\n#define\tODK_HWPATCH\t4\t/* hardware patch applied */\n#define\tODK_FILL\t5\t/* fill value used by the linker */\n#define\tODK_TAGS\t6\t/* reserved space for tools */\n#define\tODK_HWAND\t7\t/* hardware AND patch applied */\n#define\tODK_HWOR\t8\t/* hardware OR patch applied */\n#define\tODK_GP_GROUP\t9\t/* GP group for text/data sections */\n#define\tODK_IDENT\t10\t/* ID information */\n#define\tODK_PAGESIZE\t11\t/* page size information */\n\n/*\n * ODK_EXCEPTIONS info field masks.\n */\n#define\tOEX_FPU_MIN\t0x0000001f\t/* min FPU exception required */\n#define\tOEX_FPU_MAX\t0x00001f00\t/* max FPU exception allowed */\n#define\tOEX_PAGE0\t0x00010000\t/* page zero must be mapped */\n#define\tOEX_SMM\t\t0x00020000\t/* run in sequential memory mode */\n#define\tOEX_PRECISEFP\t0x00040000\t/* run in precise FP exception mode */\n#define\tOEX_DISMISS\t0x00080000\t/* dismiss invalid address traps */\n\n/*\n * ODK_PAD info field masks.\n */\n#define\tOPAD_PREFIX\t0x0001\n#define\tOPAD_POSTFIX\t0x0002\n#define\tOPAD_SYMBOL\t0x0004\n\n/*\n * ODK_HWPATCH info field masks.\n */\n#define\tOHW_R4KEOP\t0x00000001\t/* patch for R4000 branch at end-of-page bug */\n#define\tOHW_R8KPFETCH\t0x00000002\t/* R8000 prefetch bug may occur */\n#define\tOHW_R5KEOP\t0x00000004\t/* patch for R5000 branch at end-of-page bug */\n#define\tOHW_R5KCVTL\t0x00000008\t/* R5000 cvt.[ds].l bug: clean == 1 */\n#define\tOHW_R10KLDL\t0x00000010UL\t/* need patch for R10000 misaligned load */\n\n/*\n * ODK_HWAND/ODK_HWOR info field and hwp_flags[12] masks.\n */\n#define\tOHWA0_R4KEOP_CHECKED\t0x00000001\t/* object checked for R4000 end-of-page bug */\n#define\tOHWA0_R4KEOP_CLEAN\t0x00000002\t/* object verified clean for R4000 end-of-page bug */\n#define\tOHWO0_FIXADE\t\t0x00000001\t/* object requires call to fixade */\n\n/*\n * ODK_IDENT/ODK_GP_GROUP info field masks.\n */\n#define\tOGP_GROUP\t0x0000ffff\t/* GP group number */\n#define\tOGP_SELF\t0x00010000\t/* GP group is self-contained */\n\n/*\n * The header for GNU-style hash sections.\n */\n\ntypedef struct {\n\tuint32_t\tgh_nbuckets;\t/* Number of hash buckets. */\n\tuint32_t\tgh_symndx;\t/* First visible symbol in .dynsym. */\n\tuint32_t\tgh_maskwords;\t/* #maskwords used in bloom filter. */\n\tuint32_t\tgh_shift2;\t/* Bloom filter shift count. */\n} Elf_GNU_Hash_Header;\n\n/* Indexes into the e_ident array.  Keep synced with\n   http://www.sco.com/developers/gabi/latest/ch4.eheader.html */\n#define\tEI_MAG0\t\t0\t/* Magic number, byte 0. */\n#define\tEI_MAG1\t\t1\t/* Magic number, byte 1. */\n#define\tEI_MAG2\t\t2\t/* Magic number, byte 2. */\n#define\tEI_MAG3\t\t3\t/* Magic number, byte 3. */\n#define\tEI_CLASS\t4\t/* Class of machine. */\n#define\tEI_DATA\t\t5\t/* Data format. */\n#define\tEI_VERSION\t6\t/* ELF format version. */\n#define\tEI_OSABI\t7\t/* Operating system / ABI identification */\n#define\tEI_ABIVERSION\t8\t/* ABI version */\n#define\tOLD_EI_BRAND\t8\t/* Start of architecture identification. */\n#define\tEI_PAD\t\t9\t/* Start of padding (per SVR4 ABI). */\n#define\tEI_NIDENT\t16\t/* Size of e_ident array. */\n\n/* Values for the magic number bytes. */\n#define\tELFMAG0\t\t0x7f\n#define\tELFMAG1\t\t'E'\n#define\tELFMAG2\t\t'L'\n#define\tELFMAG3\t\t'F'\n#define\tELFMAG\t\t\"\\177ELF\"\t/* magic string */\n#define\tSELFMAG\t\t4\t\t/* magic string size */\n\n/* Values for e_ident[EI_VERSION] and e_version. */\n#define\tEV_NONE\t\t0\n#define\tEV_CURRENT\t1\n\n/* Values for e_ident[EI_CLASS]. */\n#define\tELFCLASSNONE\t0\t/* Unknown class. */\n#define\tELFCLASS32\t1\t/* 32-bit architecture. */\n#define\tELFCLASS64\t2\t/* 64-bit architecture. */\n\n/* Values for e_ident[EI_DATA]. */\n#define\tELFDATANONE\t0\t/* Unknown data format. */\n#define\tELFDATA2LSB\t1\t/* 2's complement little-endian. */\n#define\tELFDATA2MSB\t2\t/* 2's complement big-endian. */\n\n/* Values for e_ident[EI_OSABI]. */\n#define\tELFOSABI_NONE\t\t0\t/* UNIX System V ABI */\n#define\tELFOSABI_HPUX\t\t1\t/* HP-UX operating system */\n#define\tELFOSABI_NETBSD\t\t2\t/* NetBSD */\n#define\tELFOSABI_LINUX\t\t3\t/* GNU/Linux */\n#define\tELFOSABI_HURD\t\t4\t/* GNU/Hurd */\n#define\tELFOSABI_86OPEN\t\t5\t/* 86Open common IA32 ABI */\n#define\tELFOSABI_SOLARIS\t6\t/* Solaris */\n#define\tELFOSABI_AIX\t\t7\t/* AIX */\n#define\tELFOSABI_IRIX\t\t8\t/* IRIX */\n#define\tELFOSABI_FREEBSD\t9\t/* FreeBSD */\n#define\tELFOSABI_TRU64\t\t10\t/* TRU64 UNIX */\n#define\tELFOSABI_MODESTO\t11\t/* Novell Modesto */\n#define\tELFOSABI_OPENBSD\t12\t/* OpenBSD */\n#define\tELFOSABI_OPENVMS\t13\t/* Open VMS */\n#define\tELFOSABI_NSK\t\t14\t/* HP Non-Stop Kernel */\n#define\tELFOSABI_AROS\t\t15\t/* Amiga Research OS */\n#define\tELFOSABI_FENIXOS\t16\t/* FenixOS */\n#define\tELFOSABI_CLOUDABI\t17\t/* Nuxi CloudABI */\n#define\tELFOSABI_ARM_AEABI\t64\t/* ARM EABI */\n#define\tELFOSABI_ARM\t\t97\t/* ARM */\n#define\tELFOSABI_STANDALONE\t255\t/* Standalone (embedded) application */\n\n#define\tELFOSABI_SYSV\t\tELFOSABI_NONE\t/* symbol used in old spec */\n#define\tELFOSABI_MONTEREY\tELFOSABI_AIX\t/* Monterey */\n#define\tELFOSABI_GNU\t\tELFOSABI_LINUX\n\n/* e_ident */\n#define\tIS_ELF(ehdr)\t((ehdr).e_ident[EI_MAG0] == ELFMAG0 && \\\n\t\t\t (ehdr).e_ident[EI_MAG1] == ELFMAG1 && \\\n\t\t\t (ehdr).e_ident[EI_MAG2] == ELFMAG2 && \\\n\t\t\t (ehdr).e_ident[EI_MAG3] == ELFMAG3)\n\n/* Values for e_type. */\n#define\tET_NONE\t\t0\t/* Unknown type. */\n#define\tET_REL\t\t1\t/* Relocatable. */\n#define\tET_EXEC\t\t2\t/* Executable. */\n#define\tET_DYN\t\t3\t/* Shared object. */\n#define\tET_CORE\t\t4\t/* Core file. */\n#define\tET_LOOS\t\t0xfe00\t/* First operating system specific. */\n#define\tET_HIOS\t\t0xfeff\t/* Last operating system-specific. */\n#define\tET_LOPROC\t0xff00\t/* First processor-specific. */\n#define\tET_HIPROC\t0xffff\t/* Last processor-specific. */\n\n/* Values for e_machine. */\n#define\tEM_NONE\t\t0\t/* Unknown machine. */\n#define\tEM_M32\t\t1\t/* AT&T WE32100. */\n#define\tEM_SPARC\t2\t/* Sun SPARC. */\n#define\tEM_386\t\t3\t/* Intel i386. */\n#define\tEM_68K\t\t4\t/* Motorola 68000. */\n#define\tEM_88K\t\t5\t/* Motorola 88000. */\n#define\tEM_IAMCU\t6\t/* Intel MCU. */\n#define\tEM_860\t\t7\t/* Intel i860. */\n#define\tEM_MIPS\t\t8\t/* MIPS R3000 Big-Endian only. */\n#define\tEM_S370\t\t9\t/* IBM System/370. */\n#define\tEM_MIPS_RS3_LE\t10\t/* MIPS R3000 Little-Endian. */\n#define\tEM_PARISC\t15\t/* HP PA-RISC. */\n#define\tEM_VPP500\t17\t/* Fujitsu VPP500. */\n#define\tEM_SPARC32PLUS\t18\t/* SPARC v8plus. */\n#define\tEM_960\t\t19\t/* Intel 80960. */\n#define\tEM_PPC\t\t20\t/* PowerPC 32-bit. */\n#define\tEM_PPC64\t21\t/* PowerPC 64-bit. */\n#define\tEM_S390\t\t22\t/* IBM System/390. */\n#define\tEM_V800\t\t36\t/* NEC V800. */\n#define\tEM_FR20\t\t37\t/* Fujitsu FR20. */\n#define\tEM_RH32\t\t38\t/* TRW RH-32. */\n#define\tEM_RCE\t\t39\t/* Motorola RCE. */\n#define\tEM_ARM\t\t40\t/* ARM. */\n#define\tEM_SH\t\t42\t/* Hitachi SH. */\n#define\tEM_SPARCV9\t43\t/* SPARC v9 64-bit. */\n#define\tEM_TRICORE\t44\t/* Siemens TriCore embedded processor. */\n#define\tEM_ARC\t\t45\t/* Argonaut RISC Core. */\n#define\tEM_H8_300\t46\t/* Hitachi H8/300. */\n#define\tEM_H8_300H\t47\t/* Hitachi H8/300H. */\n#define\tEM_H8S\t\t48\t/* Hitachi H8S. */\n#define\tEM_H8_500\t49\t/* Hitachi H8/500. */\n#define\tEM_IA_64\t50\t/* Intel IA-64 Processor. */\n#define\tEM_MIPS_X\t51\t/* Stanford MIPS-X. */\n#define\tEM_COLDFIRE\t52\t/* Motorola ColdFire. */\n#define\tEM_68HC12\t53\t/* Motorola M68HC12. */\n#define\tEM_MMA\t\t54\t/* Fujitsu MMA. */\n#define\tEM_PCP\t\t55\t/* Siemens PCP. */\n#define\tEM_NCPU\t\t56\t/* Sony nCPU. */\n#define\tEM_NDR1\t\t57\t/* Denso NDR1 microprocessor. */\n#define\tEM_STARCORE\t58\t/* Motorola Star*Core processor. */\n#define\tEM_ME16\t\t59\t/* Toyota ME16 processor. */\n#define\tEM_ST100\t60\t/* STMicroelectronics ST100 processor. */\n#define\tEM_TINYJ\t61\t/* Advanced Logic Corp. TinyJ processor. */\n#define\tEM_X86_64\t62\t/* Advanced Micro Devices x86-64 */\n#define\tEM_AMD64\tEM_X86_64\t/* Advanced Micro Devices x86-64 (compat) */\n#define\tEM_PDSP\t\t63\t/* Sony DSP Processor. */\n#define\tEM_FX66\t\t66\t/* Siemens FX66 microcontroller. */\n#define\tEM_ST9PLUS\t67\t/* STMicroelectronics ST9+ 8/16\n\t\t\t\t   microcontroller. */\n#define\tEM_ST7\t\t68\t/* STmicroelectronics ST7 8-bit\n\t\t\t\t   microcontroller. */\n#define\tEM_68HC16\t69\t/* Motorola MC68HC16 microcontroller. */\n#define\tEM_68HC11\t70\t/* Motorola MC68HC11 microcontroller. */\n#define\tEM_68HC08\t71\t/* Motorola MC68HC08 microcontroller. */\n#define\tEM_68HC05\t72\t/* Motorola MC68HC05 microcontroller. */\n#define\tEM_SVX\t\t73\t/* Silicon Graphics SVx. */\n#define\tEM_ST19\t\t74\t/* STMicroelectronics ST19 8-bit mc. */\n#define\tEM_VAX\t\t75\t/* Digital VAX. */\n#define\tEM_CRIS\t\t76\t/* Axis Communications 32-bit embedded\n\t\t\t\t   processor. */\n#define\tEM_JAVELIN\t77\t/* Infineon Technologies 32-bit embedded\n\t\t\t\t   processor. */\n#define\tEM_FIREPATH\t78\t/* Element 14 64-bit DSP Processor. */\n#define\tEM_ZSP\t\t79\t/* LSI Logic 16-bit DSP Processor. */\n#define\tEM_MMIX\t\t80\t/* Donald Knuth's educational 64-bit proc. */\n#define\tEM_HUANY\t81\t/* Harvard University machine-independent\n\t\t\t\t   object files. */\n#define\tEM_PRISM\t82\t/* SiTera Prism. */\n#define\tEM_AVR\t\t83\t/* Atmel AVR 8-bit microcontroller. */\n#define\tEM_FR30\t\t84\t/* Fujitsu FR30. */\n#define\tEM_D10V\t\t85\t/* Mitsubishi D10V. */\n#define\tEM_D30V\t\t86\t/* Mitsubishi D30V. */\n#define\tEM_V850\t\t87\t/* NEC v850. */\n#define\tEM_M32R\t\t88\t/* Mitsubishi M32R. */\n#define\tEM_MN10300\t89\t/* Matsushita MN10300. */\n#define\tEM_MN10200\t90\t/* Matsushita MN10200. */\n#define\tEM_PJ\t\t91\t/* picoJava. */\n#define\tEM_OPENRISC\t92\t/* OpenRISC 32-bit embedded processor. */\n#define\tEM_ARC_A5\t93\t/* ARC Cores Tangent-A5. */\n#define\tEM_XTENSA\t94\t/* Tensilica Xtensa Architecture. */\n#define\tEM_VIDEOCORE\t95\t/* Alphamosaic VideoCore processor. */\n#define\tEM_TMM_GPP\t96\t/* Thompson Multimedia General Purpose\n\t\t\t\t   Processor. */\n#define\tEM_NS32K\t97\t/* National Semiconductor 32000 series. */\n#define\tEM_TPC\t\t98\t/* Tenor Network TPC processor. */\n#define\tEM_SNP1K\t99\t/* Trebia SNP 1000 processor. */\n#define\tEM_ST200\t100\t/* STMicroelectronics ST200 microcontroller. */\n#define\tEM_IP2K\t\t101\t/* Ubicom IP2xxx microcontroller family. */\n#define\tEM_MAX\t\t102\t/* MAX Processor. */\n#define\tEM_CR\t\t103\t/* National Semiconductor CompactRISC\n\t\t\t\t   microprocessor. */\n#define\tEM_F2MC16\t104\t/* Fujitsu F2MC16. */\n#define\tEM_MSP430\t105\t/* Texas Instruments embedded microcontroller\n\t\t\t\t   msp430. */\n#define\tEM_BLACKFIN\t106\t/* Analog Devices Blackfin (DSP) processor. */\n#define\tEM_SE_C33\t107\t/* S1C33 Family of Seiko Epson processors. */\n#define\tEM_SEP\t\t108\t/* Sharp embedded microprocessor. */\n#define\tEM_ARCA\t\t109\t/* Arca RISC Microprocessor. */\n#define\tEM_UNICORE\t110\t/* Microprocessor series from PKU-Unity Ltd.\n\t\t\t\t   and MPRC of Peking University */\n#define\tEM_AARCH64\t183\t/* AArch64 (64-bit ARM) */\n#define\tEM_RISCV\t243\t/* RISC-V */\n\n/* Non-standard or deprecated. */\n#define\tEM_486\t\t6\t/* Intel i486. */\n#define\tEM_MIPS_RS4_BE\t10\t/* MIPS R4000 Big-Endian */\n#define\tEM_ALPHA_STD\t41\t/* Digital Alpha (standard value). */\n#define\tEM_ALPHA\t0x9026\t/* Alpha (written in the absence of an ABI) */\n\n/**\n * e_flags\n */\n#define\tEF_ARM_RELEXEC\t0x1\n#define\tEF_ARM_HASENTRY\t0x2\n#define\tEF_ARM_SYMSARESORTED\t0x4\n#define\tEF_ARM_DYNSYMSUSESEGIDX\t0x8\n#define\tEF_ARM_MAPSYMSFIRST\t0x10\n#define\tEF_ARM_LE8\t\t0x00400000\n#define\tEF_ARM_BE8\t\t0x00800000\n#define\tEF_ARM_EABIMASK\t\t0xFF000000\n#define\tEF_ARM_EABI_UNKNOWN\t0x00000000\n#define\tEF_ARM_EABI_VER1\t0x01000000\n#define\tEF_ARM_EABI_VER2\t0x02000000\n#define\tEF_ARM_EABI_VER3\t0x03000000\n#define\tEF_ARM_EABI_VER4\t0x04000000\n#define\tEF_ARM_EABI_VER5\t0x05000000\n#define\tEF_ARM_INTERWORK\t0x00000004\n#define\tEF_ARM_APCS_26\t\t0x00000008\n#define\tEF_ARM_APCS_FLOAT\t0x00000010\n#define\tEF_ARM_PIC\t\t0x00000020\n#define\tEF_ARM_ALIGN8\t\t0x00000040\n#define\tEF_ARM_NEW_ABI\t\t0x00000080\n#define\tEF_ARM_OLD_ABI\t\t0x00000100\n#define\tEF_ARM_SOFT_FLOAT\t0x00000200\n#define\tEF_ARM_VFP_FLOAT\t0x00000400\n#define\tEF_ARM_MAVERICK_FLOAT\t0x00000800\n\n#define\tEF_MIPS_NOREORDER\t0x00000001\n#define\tEF_MIPS_PIC\t\t0x00000002\t/* Contains PIC code */\n#define\tEF_MIPS_CPIC\t\t0x00000004\t/* STD PIC calling sequence */\n#define\tEF_MIPS_UCODE\t\t0x00000010\n#define\tEF_MIPS_ABI2\t\t0x00000020\t/* N32 */\n#define\tEF_MIPS_OPTIONS_FIRST\t0x00000080\n#define\tEF_MIPS_ARCH_ASE\t0x0F000000\t/* Architectural extensions */\n#define\tEF_MIPS_ARCH_ASE_MDMX\t0x08000000\t/* MDMX multimedia extension */\n#define\tEF_MIPS_ARCH_ASE_M16\t0x04000000\t/* MIPS-16 ISA extensions */\n#define\tEF_MIPS_ARCH\t\t0xF0000000\t/* Architecture field */\n\n#define\tEF_PPC_EMB\t\t0x80000000\n#define\tEF_PPC_RELOCATABLE\t0x00010000\n#define\tEF_PPC_RELOCATABLE_LIB\t0x00008000\n\n#define\tEF_SPARC_EXT_MASK\t0x00ffff00\n#define\tEF_SPARC_32PLUS\t\t0x00000100\n#define\tEF_SPARC_SUN_US1\t0x00000200\n#define\tEF_SPARC_HAL_R1\t\t0x00000200\n#define\tEF_SPARC_SUN_US3\t0x00000800\n\n#define\tEF_SPARCV9_MM\t\t0x00000003\n#define\tEF_SPARCV9_TSO\t\t0x00000000\n#define\tEF_SPARCV9_PSO\t\t0x00000001\n#define\tEF_SPARCV9_RMO\t\t0x00000002\n\n/* Special section indexes. */\n#define\tSHN_UNDEF\t     0\t\t/* Undefined, missing, irrelevant. */\n#define\tSHN_LORESERVE\t0xff00\t\t/* First of reserved range. */\n#define\tSHN_LOPROC\t0xff00\t\t/* First processor-specific. */\n#define\tSHN_HIPROC\t0xff1f\t\t/* Last processor-specific. */\n#define\tSHN_LOOS\t0xff20\t\t/* First operating system-specific. */\n#define\tSHN_FBSD_CACHED\tSHN_LOOS\t/* Transient, for sys/kern/link_elf_obj\n\t\t\t\t\t   linker only: Cached global in local\n\t\t\t\t\t   symtab. */\n#define\tSHN_HIOS\t0xff3f\t\t/* Last operating system-specific. */\n#define\tSHN_ABS\t\t0xfff1\t\t/* Absolute values. */\n#define\tSHN_COMMON\t0xfff2\t\t/* Common data. */\n#define\tSHN_XINDEX\t0xffff\t\t/* Escape -- index stored elsewhere. */\n#define\tSHN_HIRESERVE\t0xffff\t\t/* Last of reserved range. */\n\n/* sh_type */\n#define\tSHT_NULL\t\t0\t/* inactive */\n#define\tSHT_PROGBITS\t\t1\t/* program defined information */\n#define\tSHT_SYMTAB\t\t2\t/* symbol table section */\n#define\tSHT_STRTAB\t\t3\t/* string table section */\n#define\tSHT_RELA\t\t4\t/* relocation section with addends */\n#define\tSHT_HASH\t\t5\t/* symbol hash table section */\n#define\tSHT_DYNAMIC\t\t6\t/* dynamic section */\n#define\tSHT_NOTE\t\t7\t/* note section */\n#define\tSHT_NOBITS\t\t8\t/* no space section */\n#define\tSHT_REL\t\t\t9\t/* relocation section - no addends */\n#define\tSHT_SHLIB\t\t10\t/* reserved - purpose unknown */\n#define\tSHT_DYNSYM\t\t11\t/* dynamic symbol table section */\n#define\tSHT_INIT_ARRAY\t\t14\t/* Initialization function pointers. */\n#define\tSHT_FINI_ARRAY\t\t15\t/* Termination function pointers. */\n#define\tSHT_PREINIT_ARRAY\t16\t/* Pre-initialization function ptrs. */\n#define\tSHT_GROUP\t\t17\t/* Section group. */\n#define\tSHT_SYMTAB_SHNDX\t18\t/* Section indexes (see SHN_XINDEX). */\n#define\tSHT_LOOS\t\t0x60000000\t/* First of OS specific semantics */\n#define\tSHT_LOSUNW\t\t0x6ffffff4\n#define\tSHT_SUNW_dof\t\t0x6ffffff4\n#define\tSHT_SUNW_cap\t\t0x6ffffff5\n#define\tSHT_GNU_ATTRIBUTES\t0x6ffffff5\n#define\tSHT_SUNW_SIGNATURE\t0x6ffffff6\n#define\tSHT_GNU_HASH\t\t0x6ffffff6\n#define\tSHT_GNU_LIBLIST\t\t0x6ffffff7\n#define\tSHT_SUNW_ANNOTATE\t0x6ffffff7\n#define\tSHT_SUNW_DEBUGSTR\t0x6ffffff8\n#define\tSHT_SUNW_DEBUG\t\t0x6ffffff9\n#define\tSHT_SUNW_move\t\t0x6ffffffa\n#define\tSHT_SUNW_COMDAT\t\t0x6ffffffb\n#define\tSHT_SUNW_syminfo\t0x6ffffffc\n#define\tSHT_SUNW_verdef\t\t0x6ffffffd\n#define\tSHT_GNU_verdef\t\t0x6ffffffd\t/* Symbol versions provided */\n#define\tSHT_SUNW_verneed\t0x6ffffffe\n#define\tSHT_GNU_verneed\t\t0x6ffffffe\t/* Symbol versions required */\n#define\tSHT_SUNW_versym\t\t0x6fffffff\n#define\tSHT_GNU_versym\t\t0x6fffffff\t/* Symbol version table */\n#define\tSHT_HISUNW\t\t0x6fffffff\n#define\tSHT_HIOS\t\t0x6fffffff\t/* Last of OS specific semantics */\n#define\tSHT_LOPROC\t\t0x70000000\t/* reserved range for processor */\n#define\tSHT_X86_64_UNWIND\t0x70000001\t/* unwind information */\n#define\tSHT_AMD64_UNWIND\tSHT_X86_64_UNWIND \n\n#define\tSHT_ARM_EXIDX\t\t0x70000001\t/* Exception index table. */\n#define\tSHT_ARM_PREEMPTMAP\t0x70000002\t/* BPABI DLL dynamic linking \n\t\t\t\t\t\t   pre-emption map. */\n#define\tSHT_ARM_ATTRIBUTES\t0x70000003\t/* Object file compatibility \n\t\t\t\t\t\t   attributes. */\n#define\tSHT_ARM_DEBUGOVERLAY\t0x70000004\t/* See DBGOVL for details. */\n#define\tSHT_ARM_OVERLAYSECTION\t0x70000005\t/* See DBGOVL for details. */\n#define\tSHT_MIPS_LIBLIST\t0x70000000\n#define\tSHT_MIPS_MSYM\t\t0x70000001\n#define\tSHT_MIPS_CONFLICT\t0x70000002\n#define\tSHT_MIPS_GPTAB\t\t0x70000003\n#define\tSHT_MIPS_UCODE\t\t0x70000004\n#define\tSHT_MIPS_DEBUG\t\t0x70000005\n#define\tSHT_MIPS_REGINFO\t0x70000006\n#define\tSHT_MIPS_PACKAGE\t0x70000007\n#define\tSHT_MIPS_PACKSYM\t0x70000008\n#define\tSHT_MIPS_RELD\t\t0x70000009\n#define\tSHT_MIPS_IFACE\t\t0x7000000b\n#define\tSHT_MIPS_CONTENT\t0x7000000c\n#define\tSHT_MIPS_OPTIONS\t0x7000000d\n#define\tSHT_MIPS_DELTASYM\t0x7000001b\n#define\tSHT_MIPS_DELTAINST\t0x7000001c\n#define\tSHT_MIPS_DELTACLASS\t0x7000001d\n#define\tSHT_MIPS_DWARF\t\t0x7000001e\t/* MIPS gcc uses MIPS_DWARF */\n#define\tSHT_MIPS_DELTADECL\t0x7000001f\n#define\tSHT_MIPS_SYMBOL_LIB\t0x70000020\n#define\tSHT_MIPS_EVENTS\t\t0x70000021\n#define\tSHT_MIPS_TRANSLATE\t0x70000022\n#define\tSHT_MIPS_PIXIE\t\t0x70000023\n#define\tSHT_MIPS_XLATE\t\t0x70000024\n#define\tSHT_MIPS_XLATE_DEBUG\t0x70000025\n#define\tSHT_MIPS_WHIRL\t\t0x70000026\n#define\tSHT_MIPS_EH_REGION\t0x70000027\n#define\tSHT_MIPS_XLATE_OLD\t0x70000028\n#define\tSHT_MIPS_PDR_EXCEPTION\t0x70000029\n#define\tSHT_MIPS_ABIFLAGS\t0x7000002a\n\n#define\tSHT_SPARC_GOTDATA\t0x70000000\n\n#define\tSHTORDERED\n#define\tSHT_HIPROC\t\t0x7fffffff\t/* specific section header types */\n#define\tSHT_LOUSER\t\t0x80000000\t/* reserved range for application */\n#define\tSHT_HIUSER\t\t0xffffffff\t/* specific indexes */\n\n/* Flags for sh_flags. */\n#define\tSHF_WRITE\t\t0x1\t/* Section contains writable data. */\n#define\tSHF_ALLOC\t\t0x2\t/* Section occupies memory. */\n#define\tSHF_EXECINSTR\t\t0x4\t/* Section contains instructions. */\n#define\tSHF_MERGE\t\t0x10\t/* Section may be merged. */\n#define\tSHF_STRINGS\t\t0x20\t/* Section contains strings. */\n#define\tSHF_INFO_LINK\t\t0x40\t/* sh_info holds section index. */\n#define\tSHF_LINK_ORDER\t\t0x80\t/* Special ordering requirements. */\n#define\tSHF_OS_NONCONFORMING\t0x100\t/* OS-specific processing required. */\n#define\tSHF_GROUP\t\t0x200\t/* Member of section group. */\n#define\tSHF_TLS\t\t\t0x400\t/* Section contains TLS data. */\n#define\tSHF_COMPRESSED\t\t0x800\t/* Section contains compressed data. */\n#define\tSHF_MASKOS\t0x0ff00000\t/* OS-specific semantics. */\n#define\tSHF_MASKPROC\t0xf0000000\t/* Processor-specific semantics. */\n\n/* Flags for section groups. */\n#define\tGRP_COMDAT\t0x1\t/* COMDAT semantics. */\n\n/*\n * Flags / mask for .gnu.versym sections.\n */\n#define\tVERSYM_VERSION\t0x7fff\n#define\tVERSYM_HIDDEN\t0x8000\n\n/* Values for p_type. */\n#define\tPT_NULL\t\t0\t/* Unused entry. */\n#define\tPT_LOAD\t\t1\t/* Loadable segment. */\n#define\tPT_DYNAMIC\t2\t/* Dynamic linking information segment. */\n#define\tPT_INTERP\t3\t/* Pathname of interpreter. */\n#define\tPT_NOTE\t\t4\t/* Auxiliary information. */\n#define\tPT_SHLIB\t5\t/* Reserved (not used). */\n#define\tPT_PHDR\t\t6\t/* Location of program header itself. */\n#define\tPT_TLS\t\t7\t/* Thread local storage segment */\n#define\tPT_LOOS\t\t0x60000000\t/* First OS-specific. */\n#define\tPT_SUNW_UNWIND\t0x6464e550\t/* amd64 UNWIND program header */\n#define\tPT_GNU_EH_FRAME\t0x6474e550\n#define\tPT_GNU_STACK\t0x6474e551\n#define\tPT_GNU_RELRO\t0x6474e552\n#define\tPT_DUMP_DELTA\t0x6fb5d000\t/* va->pa map for kernel dumps\n\t\t\t\t\t   (currently arm). */\n#define\tPT_LOSUNW\t0x6ffffffa\n#define\tPT_SUNWBSS\t0x6ffffffa\t/* Sun Specific segment */\n#define\tPT_SUNWSTACK\t0x6ffffffb\t/* describes the stack segment */\n#define\tPT_SUNWDTRACE\t0x6ffffffc\t/* private */\n#define\tPT_SUNWCAP\t0x6ffffffd\t/* hard/soft capabilities segment */\n#define\tPT_HISUNW\t0x6fffffff\n#define\tPT_HIOS\t\t0x6fffffff\t/* Last OS-specific. */\n#define\tPT_LOPROC\t0x70000000\t/* First processor-specific type. */\n#define\tPT_ARM_ARCHEXT\t0x70000000\t/* ARM arch compat information. */\n#define\tPT_ARM_EXIDX\t0x70000001\t/* ARM exception unwind tables. */\n#define\tPT_HIPROC\t0x7fffffff\t/* Last processor-specific type. */\n\n/* Values for p_flags. */\n#define\tPF_X\t\t0x1\t\t/* Executable. */\n#define\tPF_W\t\t0x2\t\t/* Writable. */\n#define\tPF_R\t\t0x4\t\t/* Readable. */\n#define\tPF_MASKOS\t0x0ff00000\t/* Operating system-specific. */\n#define\tPF_MASKPROC\t0xf0000000\t/* Processor-specific. */\n\n/* Extended program header index. */\n#define\tPN_XNUM\t\t0xffff\n\n/* Values for d_tag. */\n#define\tDT_NULL\t\t0\t/* Terminating entry. */\n#define\tDT_NEEDED\t1\t/* String table offset of a needed shared\n\t\t\t\t   library. */\n#define\tDT_PLTRELSZ\t2\t/* Total size in bytes of PLT relocations. */\n#define\tDT_PLTGOT\t3\t/* Processor-dependent address. */\n#define\tDT_HASH\t\t4\t/* Address of symbol hash table. */\n#define\tDT_STRTAB\t5\t/* Address of string table. */\n#define\tDT_SYMTAB\t6\t/* Address of symbol table. */\n#define\tDT_RELA\t\t7\t/* Address of ElfNN_Rela relocations. */\n#define\tDT_RELASZ\t8\t/* Total size of ElfNN_Rela relocations. */\n#define\tDT_RELAENT\t9\t/* Size of each ElfNN_Rela relocation entry. */\n#define\tDT_STRSZ\t10\t/* Size of string table. */\n#define\tDT_SYMENT\t11\t/* Size of each symbol table entry. */\n#define\tDT_INIT\t\t12\t/* Address of initialization function. */\n#define\tDT_FINI\t\t13\t/* Address of finalization function. */\n#define\tDT_SONAME\t14\t/* String table offset of shared object\n\t\t\t\t   name. */\n#define\tDT_RPATH\t15\t/* String table offset of library path. [sup] */\n#define\tDT_SYMBOLIC\t16\t/* Indicates \"symbolic\" linking. [sup] */\n#define\tDT_REL\t\t17\t/* Address of ElfNN_Rel relocations. */\n#define\tDT_RELSZ\t18\t/* Total size of ElfNN_Rel relocations. */\n#define\tDT_RELENT\t19\t/* Size of each ElfNN_Rel relocation. */\n#define\tDT_PLTREL\t20\t/* Type of relocation used for PLT. */\n#define\tDT_DEBUG\t21\t/* Reserved (not used). */\n#define\tDT_TEXTREL\t22\t/* Indicates there may be relocations in\n\t\t\t\t   non-writable segments. [sup] */\n#define\tDT_JMPREL\t23\t/* Address of PLT relocations. */\n#define\tDT_BIND_NOW\t24\t/* [sup] */\n#define\tDT_INIT_ARRAY\t25\t/* Address of the array of pointers to\n\t\t\t\t   initialization functions */\n#define\tDT_FINI_ARRAY\t26\t/* Address of the array of pointers to\n\t\t\t\t   termination functions */\n#define\tDT_INIT_ARRAYSZ\t27\t/* Size in bytes of the array of\n\t\t\t\t   initialization functions. */\n#define\tDT_FINI_ARRAYSZ\t28\t/* Size in bytes of the array of\n\t\t\t\t   termination functions. */\n#define\tDT_RUNPATH\t29\t/* String table offset of a null-terminated\n\t\t\t\t   library search path string. */\n#define\tDT_FLAGS\t30\t/* Object specific flag values. */\n#define\tDT_ENCODING\t32\t/* Values greater than or equal to DT_ENCODING\n\t\t\t\t   and less than DT_LOOS follow the rules for\n\t\t\t\t   the interpretation of the d_un union\n\t\t\t\t   as follows: even == 'd_ptr', odd == 'd_val'\n\t\t\t\t   or none */\n#define\tDT_PREINIT_ARRAY 32\t/* Address of the array of pointers to\n\t\t\t\t   pre-initialization functions. */\n#define\tDT_PREINIT_ARRAYSZ 33\t/* Size in bytes of the array of\n\t\t\t\t   pre-initialization functions. */\n#define\tDT_MAXPOSTAGS\t34\t/* number of positive tags */\n#define\tDT_LOOS\t\t0x6000000d\t/* First OS-specific */\n#define\tDT_SUNW_AUXILIARY\t0x6000000d\t/* symbol auxiliary name */\n#define\tDT_SUNW_RTLDINF\t\t0x6000000e\t/* ld.so.1 info (private) */\n#define\tDT_SUNW_FILTER\t\t0x6000000f\t/* symbol filter name */\n#define\tDT_SUNW_CAP\t\t0x60000010\t/* hardware/software */\n#define\tDT_HIOS\t\t0x6ffff000\t/* Last OS-specific */\n\n/*\n * DT_* entries which fall between DT_VALRNGHI & DT_VALRNGLO use the\n * Dyn.d_un.d_val field of the Elf*_Dyn structure.\n */\n#define\tDT_VALRNGLO\t0x6ffffd00\n#define\tDT_GNU_PRELINKED\t0x6ffffdf5 /* prelinking timestamp */\n#define\tDT_GNU_CONFLICTSZ\t0x6ffffdf6 /* size of conflict section */\n#define\tDT_GNU_LIBLISTSZ\t0x6ffffdf7 /* size of library list */\n#define\tDT_CHECKSUM\t0x6ffffdf8\t/* elf checksum */\n#define\tDT_PLTPADSZ\t0x6ffffdf9\t/* pltpadding size */\n#define\tDT_MOVEENT\t0x6ffffdfa\t/* move table entry size */\n#define\tDT_MOVESZ\t0x6ffffdfb\t/* move table size */\n#define\tDT_FEATURE\t0x6ffffdfc\t/* feature holder */\n#define\tDT_FEATURE_1\tDT_FEATURE\n#define\tDT_POSFLAG_1\t0x6ffffdfd\t/* flags for DT_* entries, effecting */\n\t\t\t\t\t/*\tthe following DT_* entry. */\n\t\t\t\t\t/*\tSee DF_P1_* definitions */\n#define\tDT_SYMINSZ\t0x6ffffdfe\t/* syminfo table size (in bytes) */\n#define\tDT_SYMINENT\t0x6ffffdff\t/* syminfo entry size (in bytes) */\n#define\tDT_VALRNGHI\t0x6ffffdff\n\n/*\n * DT_* entries which fall between DT_ADDRRNGHI & DT_ADDRRNGLO use the\n * Dyn.d_un.d_ptr field of the Elf*_Dyn structure.\n *\n * If any adjustment is made to the ELF object after it has been\n * built, these entries will need to be adjusted.\n */\n#define\tDT_ADDRRNGLO\t0x6ffffe00\n#define\tDT_GNU_HASH\t0x6ffffef5\t/* GNU-style hash table */\n#define\tDT_TLSDESC_PLT\t0x6ffffef6\t/* loc. of PLT for tlsdesc resolver */\n#define\tDT_TLSDESC_GOT\t0x6ffffef7\t/* loc. of GOT for tlsdesc resolver */\n#define\tDT_GNU_CONFLICT\t0x6ffffef8\t/* address of conflict section */\n#define\tDT_GNU_LIBLIST\t0x6ffffef9\t/* address of library list */\n#define\tDT_CONFIG\t0x6ffffefa\t/* configuration information */\n#define\tDT_DEPAUDIT\t0x6ffffefb\t/* dependency auditing */\n#define\tDT_AUDIT\t0x6ffffefc\t/* object auditing */\n#define\tDT_PLTPAD\t0x6ffffefd\t/* pltpadding (sparcv9) */\n#define\tDT_MOVETAB\t0x6ffffefe\t/* move table */\n#define\tDT_SYMINFO\t0x6ffffeff\t/* syminfo table */\n#define\tDT_ADDRRNGHI\t0x6ffffeff\n\n#define\tDT_VERSYM\t0x6ffffff0\t/* Address of versym section. */\n#define\tDT_RELACOUNT\t0x6ffffff9\t/* number of RELATIVE relocations */\n#define\tDT_RELCOUNT\t0x6ffffffa\t/* number of RELATIVE relocations */\n#define\tDT_FLAGS_1\t0x6ffffffb\t/* state flags - see DF_1_* defs */\n#define\tDT_VERDEF\t0x6ffffffc\t/* Address of verdef section. */\n#define\tDT_VERDEFNUM\t0x6ffffffd\t/* Number of elems in verdef section */\n#define\tDT_VERNEED\t0x6ffffffe\t/* Address of verneed section. */\n#define\tDT_VERNEEDNUM\t0x6fffffff\t/* Number of elems in verneed section */\n\n#define\tDT_LOPROC\t0x70000000\t/* First processor-specific type. */\n\n#define\tDT_ARM_SYMTABSZ\t\t\t0x70000001\n#define\tDT_ARM_PREEMPTMAP\t\t0x70000002\n\n#define\tDT_SPARC_REGISTER\t\t0x70000001\n#define\tDT_DEPRECATED_SPARC_REGISTER\t0x7000001\n\n#define\tDT_MIPS_RLD_VERSION\t\t0x70000001\n#define\tDT_MIPS_TIME_STAMP\t\t0x70000002\n#define\tDT_MIPS_ICHECKSUM\t\t0x70000003\n#define\tDT_MIPS_IVERSION\t\t0x70000004\n#define\tDT_MIPS_FLAGS\t\t\t0x70000005\n#define\tDT_MIPS_BASE_ADDRESS\t\t0x70000006\n#define\tDT_MIPS_CONFLICT\t\t0x70000008\n#define\tDT_MIPS_LIBLIST\t\t\t0x70000009\n#define\tDT_MIPS_LOCAL_GOTNO\t\t0x7000000a\n#define\tDT_MIPS_CONFLICTNO\t\t0x7000000b\n#define\tDT_MIPS_LIBLISTNO\t\t0x70000010\n#define\tDT_MIPS_SYMTABNO\t\t0x70000011\n#define\tDT_MIPS_UNREFEXTNO\t\t0x70000012\n#define\tDT_MIPS_GOTSYM\t\t\t0x70000013\n#define\tDT_MIPS_HIPAGENO\t\t0x70000014\n#define\tDT_MIPS_RLD_MAP\t\t\t0x70000016\n#define\tDT_MIPS_DELTA_CLASS\t\t0x70000017\n#define\tDT_MIPS_DELTA_CLASS_NO\t\t0x70000018\n#define\tDT_MIPS_DELTA_INSTANCE\t\t0x70000019\n#define\tDT_MIPS_DELTA_INSTANCE_NO\t0x7000001A\n#define\tDT_MIPS_DELTA_RELOC\t\t0x7000001B\n#define\tDT_MIPS_DELTA_RELOC_NO\t\t0x7000001C\n#define\tDT_MIPS_DELTA_SYM\t\t0x7000001D\n#define\tDT_MIPS_DELTA_SYM_NO\t\t0x7000001E\n#define\tDT_MIPS_DELTA_CLASSSYM\t\t0x70000020\n#define\tDT_MIPS_DELTA_CLASSSYM_NO\t0x70000021\n#define\tDT_MIPS_CXX_FLAGS\t\t0x70000022\n#define\tDT_MIPS_PIXIE_INIT\t\t0x70000023\n#define\tDT_MIPS_SYMBOL_LIB\t\t0x70000024\n#define\tDT_MIPS_LOCALPAGE_GOTIDX\t0x70000025\n#define\tDT_MIPS_LOCAL_GOTIDX\t\t0x70000026\n#define\tDT_MIPS_HIDDEN_GOTIDX\t\t0x70000027\n#define\tDT_MIPS_PROTECTED_GOTIDX\t0x70000028\n#define\tDT_MIPS_OPTIONS\t\t\t0x70000029\n#define\tDT_MIPS_INTERFACE\t\t0x7000002A\n#define\tDT_MIPS_DYNSTR_ALIGN\t\t0x7000002B\n#define\tDT_MIPS_INTERFACE_SIZE\t\t0x7000002C\n#define\tDT_MIPS_RLD_TEXT_RESOLVE_ADDR\t0x7000002D\n#define\tDT_MIPS_PERF_SUFFIX\t\t0x7000002E\n#define\tDT_MIPS_COMPACT_SIZE\t\t0x7000002F\n#define\tDT_MIPS_GP_VALUE\t\t0x70000030\n#define\tDT_MIPS_AUX_DYNAMIC\t\t0x70000031\n#define\tDT_MIPS_PLTGOT\t\t\t0x70000032\n#define\tDT_MIPS_RLD_OBJ_UPDATE\t\t0x70000033\n#define\tDT_MIPS_RWPLT\t\t\t0x70000034\n\n#define\tDT_PPC_GOT\t\t\t0x70000000\n#define\tDT_PPC_TLSOPT\t\t\t0x70000001\n\n#define\tDT_PPC64_GLINK\t\t\t0x70000000\n#define\tDT_PPC64_OPD\t\t\t0x70000001\n#define\tDT_PPC64_OPDSZ\t\t\t0x70000002\n#define\tDT_PPC64_TLSOPT\t\t\t0x70000003\n\n#define\tDT_AUXILIARY\t0x7ffffffd\t/* shared library auxiliary name */\n#define\tDT_USED\t\t0x7ffffffe\t/* ignored - same as needed */\n#define\tDT_FILTER\t0x7fffffff\t/* shared library filter name */\n#define\tDT_HIPROC\t0x7fffffff\t/* Last processor-specific type. */\n\n/* Values for DT_FLAGS */\n#define\tDF_ORIGIN\t0x0001\t/* Indicates that the object being loaded may\n\t\t\t\t   make reference to the $ORIGIN substitution\n\t\t\t\t   string */\n#define\tDF_SYMBOLIC\t0x0002\t/* Indicates \"symbolic\" linking. */\n#define\tDF_TEXTREL\t0x0004\t/* Indicates there may be relocations in\n\t\t\t\t   non-writable segments. */\n#define\tDF_BIND_NOW\t0x0008\t/* Indicates that the dynamic linker should\n\t\t\t\t   process all relocations for the object\n\t\t\t\t   containing this entry before transferring\n\t\t\t\t   control to the program. */\n#define\tDF_STATIC_TLS\t0x0010\t/* Indicates that the shared object or\n\t\t\t\t   executable contains code using a static\n\t\t\t\t   thread-local storage scheme. */\n\n/* Values for DT_FLAGS_1 */\n#define\tDF_1_BIND_NOW\t0x00000001\t/* Same as DF_BIND_NOW */\n#define\tDF_1_GLOBAL\t0x00000002\t/* Set the RTLD_GLOBAL for object */\n#define\tDF_1_NODELETE\t0x00000008\t/* Set the RTLD_NODELETE for object */\n#define\tDF_1_LOADFLTR\t0x00000010\t/* Immediate loading of filtees */\n#define\tDF_1_NOOPEN     0x00000040\t/* Do not allow loading on dlopen() */\n#define\tDF_1_ORIGIN\t0x00000080\t/* Process $ORIGIN */\n#define\tDF_1_INTERPOSE\t0x00000400\t/* Interpose all objects but main */\n#define\tDF_1_NODEFLIB\t0x00000800\t/* Do not search default paths */\n\n/* Values for l_flags. */\n#define\tLL_NONE\t\t\t0x0\t/* no flags */\n#define\tLL_EXACT_MATCH\t\t0x1\t/* require an exact match */\n#define\tLL_IGNORE_INT_VER\t0x2\t/* ignore version incompatibilities */\n#define\tLL_REQUIRE_MINOR\t0x4\n#define\tLL_EXPORTS\t\t0x8\n#define\tLL_DELAY_LOAD\t\t0x10\n#define\tLL_DELTA\t\t0x20\n\n/* Values for n_type used in executables. */\n#define\tNT_FREEBSD_ABI_TAG\t1\n#define\tNT_FREEBSD_NOINIT_TAG\t2\n#define\tNT_FREEBSD_ARCH_TAG\t3\n\n/* Values for n_type.  Used in core files. */\n#define\tNT_PRSTATUS\t1\t/* Process status. */\n#define\tNT_FPREGSET\t2\t/* Floating point registers. */\n#define\tNT_PRPSINFO\t3\t/* Process state info. */\n#define\tNT_THRMISC\t7\t/* Thread miscellaneous info. */\n#define\tNT_PROCSTAT_PROC\t8\t/* Procstat proc data. */\n#define\tNT_PROCSTAT_FILES\t9\t/* Procstat files data. */\n#define\tNT_PROCSTAT_VMMAP\t10\t/* Procstat vmmap data. */\n#define\tNT_PROCSTAT_GROUPS\t11\t/* Procstat groups data. */\n#define\tNT_PROCSTAT_UMASK\t12\t/* Procstat umask data. */\n#define\tNT_PROCSTAT_RLIMIT\t13\t/* Procstat rlimit data. */\n#define\tNT_PROCSTAT_OSREL\t14\t/* Procstat osreldate data. */\n#define\tNT_PROCSTAT_PSSTRINGS\t15\t/* Procstat ps_strings data. */\n#define\tNT_PROCSTAT_AUXV\t16\t/* Procstat auxv data. */\n#define\tNT_PPC_VMX\t0x100\t/* PowerPC Altivec/VMX registers */\n#define\tNT_X86_XSTATE\t0x202\t/* x86 XSAVE extended state. */\n\n/* Symbol Binding - ELFNN_ST_BIND - st_info */\n#define\tSTB_LOCAL\t0\t/* Local symbol */\n#define\tSTB_GLOBAL\t1\t/* Global symbol */\n#define\tSTB_WEAK\t2\t/* like global - lower precedence */\n#define\tSTB_LOOS\t10\t/* Start of operating system reserved range. */\n#define\tSTB_GNU_UNIQUE\t10\t/* Unique symbol (GNU) */\n#define\tSTB_HIOS\t12\t/* End of operating system reserved range. */\n#define\tSTB_LOPROC\t13\t/* reserved range for processor */\n#define\tSTB_HIPROC\t15\t/*   specific semantics. */\n\n/* Symbol type - ELFNN_ST_TYPE - st_info */\n#define\tSTT_NOTYPE\t0\t/* Unspecified type. */\n#define\tSTT_OBJECT\t1\t/* Data object. */\n#define\tSTT_FUNC\t2\t/* Function. */\n#define\tSTT_SECTION\t3\t/* Section. */\n#define\tSTT_FILE\t4\t/* Source file. */\n#define\tSTT_COMMON\t5\t/* Uninitialized common block. */\n#define\tSTT_TLS\t\t6\t/* TLS object. */\n#define\tSTT_NUM\t\t7\n#define\tSTT_LOOS\t10\t/* Reserved range for operating system */\n#define\tSTT_GNU_IFUNC\t10\n#define\tSTT_HIOS\t12\t/*   specific semantics. */\n#define\tSTT_LOPROC\t13\t/* Start of processor reserved range. */\n#define\tSTT_SPARC_REGISTER 13\t/* SPARC register information. */\n#define\tSTT_HIPROC\t15\t/* End of processor reserved range. */\n\n/* Symbol visibility - ELFNN_ST_VISIBILITY - st_other */\n#define\tSTV_DEFAULT\t0x0\t/* Default visibility (see binding). */\n#define\tSTV_INTERNAL\t0x1\t/* Special meaning in relocatable objects. */\n#define\tSTV_HIDDEN\t0x2\t/* Not visible. */\n#define\tSTV_PROTECTED\t0x3\t/* Visible but not preemptible. */\n#define\tSTV_EXPORTED\t0x4\n#define\tSTV_SINGLETON\t0x5\n#define\tSTV_ELIMINATE\t0x6\n\n/* Special symbol table indexes. */\n#define\tSTN_UNDEF\t0\t/* Undefined symbol index. */\n\n/* Symbol versioning flags. */\n#define\tVER_DEF_CURRENT\t1\n#define\tVER_DEF_IDX(x)\tVER_NDX(x)\n\n#define\tVER_FLG_BASE\t0x01\n#define\tVER_FLG_WEAK\t0x02\n\n#define\tVER_NEED_CURRENT\t1\n#define\tVER_NEED_WEAK\t(1u << 15)\n#define\tVER_NEED_HIDDEN\tVER_NDX_HIDDEN\n#define\tVER_NEED_IDX(x)\tVER_NDX(x)\n\n#define\tVER_NDX_LOCAL\t0\n#define\tVER_NDX_GLOBAL\t1\n#define\tVER_NDX_GIVEN\t2\n\n#define\tVER_NDX_HIDDEN\t(1u << 15)\n#define\tVER_NDX(x)\t((x) & ~(1u << 15))\n\n#define\tCA_SUNW_NULL\t0\n#define\tCA_SUNW_HW_1\t1\t\t/* first hardware capabilities entry */\n#define\tCA_SUNW_SF_1\t2\t\t/* first software capabilities entry */\n\n/*\n * Syminfo flag values\n */\n#define\tSYMINFO_FLG_DIRECT\t0x0001\t/* symbol ref has direct association */\n\t\t\t\t\t/*\tto object containing defn. */\n#define\tSYMINFO_FLG_PASSTHRU\t0x0002\t/* ignored - see SYMINFO_FLG_FILTER */\n#define\tSYMINFO_FLG_COPY\t0x0004\t/* symbol is a copy-reloc */\n#define\tSYMINFO_FLG_LAZYLOAD\t0x0008\t/* object containing defn should be */\n\t\t\t\t\t/*\tlazily-loaded */\n#define\tSYMINFO_FLG_DIRECTBIND\t0x0010\t/* ref should be bound directly to */\n\t\t\t\t\t/*\tobject containing defn. */\n#define\tSYMINFO_FLG_NOEXTDIRECT\t0x0020\t/* don't let an external reference */\n\t\t\t\t\t/*\tdirectly bind to this symbol */\n#define\tSYMINFO_FLG_FILTER\t0x0002\t/* symbol ref is associated to a */\n#define\tSYMINFO_FLG_AUXILIARY\t0x0040\t/* \tstandard or auxiliary filter */\n\n/*\n * Syminfo.si_boundto values.\n */\n#define\tSYMINFO_BT_SELF\t\t0xffff\t/* symbol bound to self */\n#define\tSYMINFO_BT_PARENT\t0xfffe\t/* symbol bound to parent */\n#define\tSYMINFO_BT_NONE\t\t0xfffd\t/* no special symbol binding */\n#define\tSYMINFO_BT_EXTERN\t0xfffc\t/* symbol defined as external */\n#define\tSYMINFO_BT_LOWRESERVE\t0xff00\t/* beginning of reserved entries */\n\n/*\n * Syminfo version values.\n */\n#define\tSYMINFO_NONE\t\t0\t/* Syminfo version */\n#define\tSYMINFO_CURRENT\t\t1\n#define\tSYMINFO_NUM\t\t2\n\n/*\n * Relocation types.\n *\n * All machine architectures are defined here to allow tools on one to\n * handle others.\n */\n\n#define\tR_386_NONE\t\t0\t/* No relocation. */\n#define\tR_386_32\t\t1\t/* Add symbol value. */\n#define\tR_386_PC32\t\t2\t/* Add PC-relative symbol value. */\n#define\tR_386_GOT32\t\t3\t/* Add PC-relative GOT offset. */\n#define\tR_386_PLT32\t\t4\t/* Add PC-relative PLT offset. */\n#define\tR_386_COPY\t\t5\t/* Copy data from shared object. */\n#define\tR_386_GLOB_DAT\t\t6\t/* Set GOT entry to data address. */\n#define\tR_386_JMP_SLOT\t\t7\t/* Set GOT entry to code address. */\n#define\tR_386_RELATIVE\t\t8\t/* Add load address of shared object. */\n#define\tR_386_GOTOFF\t\t9\t/* Add GOT-relative symbol address. */\n#define\tR_386_GOTPC\t\t10\t/* Add PC-relative GOT table address. */\n#define\tR_386_TLS_TPOFF\t\t14\t/* Negative offset in static TLS block */\n#define\tR_386_TLS_IE\t\t15\t/* Absolute address of GOT for -ve static TLS */\n#define\tR_386_TLS_GOTIE\t\t16\t/* GOT entry for negative static TLS block */\n#define\tR_386_TLS_LE\t\t17\t/* Negative offset relative to static TLS */\n#define\tR_386_TLS_GD\t\t18\t/* 32 bit offset to GOT (index,off) pair */\n#define\tR_386_TLS_LDM\t\t19\t/* 32 bit offset to GOT (index,zero) pair */\n#define\tR_386_TLS_GD_32\t\t24\t/* 32 bit offset to GOT (index,off) pair */\n#define\tR_386_TLS_GD_PUSH\t25\t/* pushl instruction for Sun ABI GD sequence */\n#define\tR_386_TLS_GD_CALL\t26\t/* call instruction for Sun ABI GD sequence */\n#define\tR_386_TLS_GD_POP\t27\t/* popl instruction for Sun ABI GD sequence */\n#define\tR_386_TLS_LDM_32\t28\t/* 32 bit offset to GOT (index,zero) pair */\n#define\tR_386_TLS_LDM_PUSH\t29\t/* pushl instruction for Sun ABI LD sequence */\n#define\tR_386_TLS_LDM_CALL\t30\t/* call instruction for Sun ABI LD sequence */\n#define\tR_386_TLS_LDM_POP\t31\t/* popl instruction for Sun ABI LD sequence */\n#define\tR_386_TLS_LDO_32\t32\t/* 32 bit offset from start of TLS block */\n#define\tR_386_TLS_IE_32\t\t33\t/* 32 bit offset to GOT static TLS offset entry */\n#define\tR_386_TLS_LE_32\t\t34\t/* 32 bit offset within static TLS block */\n#define\tR_386_TLS_DTPMOD32\t35\t/* GOT entry containing TLS index */\n#define\tR_386_TLS_DTPOFF32\t36\t/* GOT entry containing TLS offset */\n#define\tR_386_TLS_TPOFF32\t37\t/* GOT entry of -ve static TLS offset */\n#define\tR_386_IRELATIVE\t\t42\t/* PLT entry resolved indirectly at runtime */\n\n#define\tR_AARCH64_NONE\t\t0\t/* No relocation */\n#define\tR_AARCH64_ABS64\t\t257\t/* Absolute offset */\n#define\tR_AARCH64_ABS32\t\t258\t/* Absolute, 32-bit overflow check */\n#define\tR_AARCH64_ABS16\t\t259\t/* Absolute, 16-bit overflow check */\n#define\tR_AARCH64_PREL64\t260\t/* PC relative */\n#define\tR_AARCH64_PREL32\t261\t/* PC relative, 32-bit overflow check */\n#define\tR_AARCH64_PREL16\t262\t/* PC relative, 16-bit overflow check */\n#define\tR_AARCH64_COPY\t\t1024\t/* Copy data from shared object */\n#define\tR_AARCH64_GLOB_DAT\t1025\t/* Set GOT entry to data address */\n#define\tR_AARCH64_JUMP_SLOT\t1026\t/* Set GOT entry to code address */\n#define\tR_AARCH64_RELATIVE \t1027\t/* Add load address of shared object */\n#define\tR_AARCH64_TLS_DTPREL64\t1028\n#define\tR_AARCH64_TLS_DTPMOD64\t1029\n#define\tR_AARCH64_TLS_TPREL64 \t1030\n#define\tR_AARCH64_TLSDESC \t1031\t/* Identify the TLS descriptor */\n#define\tR_AARCH64_IRELATIVE\t1032\n\n#define\tR_ARM_NONE\t\t0\t/* No relocation. */\n#define\tR_ARM_PC24\t\t1\n#define\tR_ARM_ABS32\t\t2\n#define\tR_ARM_REL32\t\t3\n#define\tR_ARM_PC13\t\t4\n#define\tR_ARM_ABS16\t\t5\n#define\tR_ARM_ABS12\t\t6\n#define\tR_ARM_THM_ABS5\t\t7\n#define\tR_ARM_ABS8\t\t8\n#define\tR_ARM_SBREL32\t\t9\n#define\tR_ARM_THM_PC22\t\t10\n#define\tR_ARM_THM_PC8\t\t11\n#define\tR_ARM_AMP_VCALL9\t12\n#define\tR_ARM_SWI24\t\t13\n#define\tR_ARM_THM_SWI8\t\t14\n#define\tR_ARM_XPC25\t\t15\n#define\tR_ARM_THM_XPC22\t\t16\n/* TLS relocations */\n#define\tR_ARM_TLS_DTPMOD32\t17\t/* ID of module containing symbol */\n#define\tR_ARM_TLS_DTPOFF32\t18\t/* Offset in TLS block */\n#define\tR_ARM_TLS_TPOFF32\t19\t/* Offset in static TLS block */\n#define\tR_ARM_COPY\t\t20\t/* Copy data from shared object. */\n#define\tR_ARM_GLOB_DAT\t\t21\t/* Set GOT entry to data address. */\n#define\tR_ARM_JUMP_SLOT\t\t22\t/* Set GOT entry to code address. */\n#define\tR_ARM_RELATIVE\t\t23\t/* Add load address of shared object. */\n#define\tR_ARM_GOTOFF\t\t24\t/* Add GOT-relative symbol address. */\n#define\tR_ARM_GOTPC\t\t25\t/* Add PC-relative GOT table address. */\n#define\tR_ARM_GOT32\t\t26\t/* Add PC-relative GOT offset. */\n#define\tR_ARM_PLT32\t\t27\t/* Add PC-relative PLT offset. */\n#define\tR_ARM_GNU_VTENTRY\t100\n#define\tR_ARM_GNU_VTINHERIT\t101\n#define\tR_ARM_RSBREL32\t\t250\n#define\tR_ARM_THM_RPC22\t\t251\n#define\tR_ARM_RREL32\t\t252\n#define\tR_ARM_RABS32\t\t253\n#define\tR_ARM_RPC24\t\t254\n#define\tR_ARM_RBASE\t\t255\n\n/*\tName\t\t\tValue\t   Field\tCalculation */\n#define\tR_IA_64_NONE\t\t0\t/* None */\n#define\tR_IA_64_IMM14\t\t0x21\t/* immediate14\tS + A */\n#define\tR_IA_64_IMM22\t\t0x22\t/* immediate22\tS + A */\n#define\tR_IA_64_IMM64\t\t0x23\t/* immediate64\tS + A */\n#define\tR_IA_64_DIR32MSB\t0x24\t/* word32 MSB\tS + A */\n#define\tR_IA_64_DIR32LSB\t0x25\t/* word32 LSB\tS + A */\n#define\tR_IA_64_DIR64MSB\t0x26\t/* word64 MSB\tS + A */\n#define\tR_IA_64_DIR64LSB\t0x27\t/* word64 LSB\tS + A */\n#define\tR_IA_64_GPREL22\t\t0x2a\t/* immediate22\t@gprel(S + A) */\n#define\tR_IA_64_GPREL64I\t0x2b\t/* immediate64\t@gprel(S + A) */\n#define\tR_IA_64_GPREL32MSB\t0x2c\t/* word32 MSB\t@gprel(S + A) */\n#define\tR_IA_64_GPREL32LSB\t0x2d\t/* word32 LSB\t@gprel(S + A) */\n#define\tR_IA_64_GPREL64MSB\t0x2e\t/* word64 MSB\t@gprel(S + A) */\n#define\tR_IA_64_GPREL64LSB\t0x2f\t/* word64 LSB\t@gprel(S + A) */\n#define\tR_IA_64_LTOFF22\t\t0x32\t/* immediate22\t@ltoff(S + A) */\n#define\tR_IA_64_LTOFF64I\t0x33\t/* immediate64\t@ltoff(S + A) */\n#define\tR_IA_64_PLTOFF22\t0x3a\t/* immediate22\t@pltoff(S + A) */\n#define\tR_IA_64_PLTOFF64I\t0x3b\t/* immediate64\t@pltoff(S + A) */\n#define\tR_IA_64_PLTOFF64MSB\t0x3e\t/* word64 MSB\t@pltoff(S + A) */\n#define\tR_IA_64_PLTOFF64LSB\t0x3f\t/* word64 LSB\t@pltoff(S + A) */\n#define\tR_IA_64_FPTR64I\t\t0x43\t/* immediate64\t@fptr(S + A) */\n#define\tR_IA_64_FPTR32MSB\t0x44\t/* word32 MSB\t@fptr(S + A) */\n#define\tR_IA_64_FPTR32LSB\t0x45\t/* word32 LSB\t@fptr(S + A) */\n#define\tR_IA_64_FPTR64MSB\t0x46\t/* word64 MSB\t@fptr(S + A) */\n#define\tR_IA_64_FPTR64LSB\t0x47\t/* word64 LSB\t@fptr(S + A) */\n#define\tR_IA_64_PCREL60B\t0x48\t/* immediate60 form1 S + A - P */\n#define\tR_IA_64_PCREL21B\t0x49\t/* immediate21 form1 S + A - P */\n#define\tR_IA_64_PCREL21M\t0x4a\t/* immediate21 form2 S + A - P */\n#define\tR_IA_64_PCREL21F\t0x4b\t/* immediate21 form3 S + A - P */\n#define\tR_IA_64_PCREL32MSB\t0x4c\t/* word32 MSB\tS + A - P */\n#define\tR_IA_64_PCREL32LSB\t0x4d\t/* word32 LSB\tS + A - P */\n#define\tR_IA_64_PCREL64MSB\t0x4e\t/* word64 MSB\tS + A - P */\n#define\tR_IA_64_PCREL64LSB\t0x4f\t/* word64 LSB\tS + A - P */\n#define\tR_IA_64_LTOFF_FPTR22\t0x52\t/* immediate22\t@ltoff(@fptr(S + A)) */\n#define\tR_IA_64_LTOFF_FPTR64I\t0x53\t/* immediate64\t@ltoff(@fptr(S + A)) */\n#define\tR_IA_64_LTOFF_FPTR32MSB\t0x54\t/* word32 MSB\t@ltoff(@fptr(S + A)) */\n#define\tR_IA_64_LTOFF_FPTR32LSB\t0x55\t/* word32 LSB\t@ltoff(@fptr(S + A)) */\n#define\tR_IA_64_LTOFF_FPTR64MSB\t0x56\t/* word64 MSB\t@ltoff(@fptr(S + A)) */\n#define\tR_IA_64_LTOFF_FPTR64LSB\t0x57\t/* word64 LSB\t@ltoff(@fptr(S + A)) */\n#define\tR_IA_64_SEGREL32MSB\t0x5c\t/* word32 MSB\t@segrel(S + A) */\n#define\tR_IA_64_SEGREL32LSB\t0x5d\t/* word32 LSB\t@segrel(S + A) */\n#define\tR_IA_64_SEGREL64MSB\t0x5e\t/* word64 MSB\t@segrel(S + A) */\n#define\tR_IA_64_SEGREL64LSB\t0x5f\t/* word64 LSB\t@segrel(S + A) */\n#define\tR_IA_64_SECREL32MSB\t0x64\t/* word32 MSB\t@secrel(S + A) */\n#define\tR_IA_64_SECREL32LSB\t0x65\t/* word32 LSB\t@secrel(S + A) */\n#define\tR_IA_64_SECREL64MSB\t0x66\t/* word64 MSB\t@secrel(S + A) */\n#define\tR_IA_64_SECREL64LSB\t0x67\t/* word64 LSB\t@secrel(S + A) */\n#define\tR_IA_64_REL32MSB\t0x6c\t/* word32 MSB\tBD + A */\n#define\tR_IA_64_REL32LSB\t0x6d\t/* word32 LSB\tBD + A */\n#define\tR_IA_64_REL64MSB\t0x6e\t/* word64 MSB\tBD + A */\n#define\tR_IA_64_REL64LSB\t0x6f\t/* word64 LSB\tBD + A */\n#define\tR_IA_64_LTV32MSB\t0x74\t/* word32 MSB\tS + A */\n#define\tR_IA_64_LTV32LSB\t0x75\t/* word32 LSB\tS + A */\n#define\tR_IA_64_LTV64MSB\t0x76\t/* word64 MSB\tS + A */\n#define\tR_IA_64_LTV64LSB\t0x77\t/* word64 LSB\tS + A */\n#define\tR_IA_64_PCREL21BI\t0x79\t/* immediate21 form1 S + A - P */\n#define\tR_IA_64_PCREL22\t\t0x7a\t/* immediate22\tS + A - P */\n#define\tR_IA_64_PCREL64I\t0x7b\t/* immediate64\tS + A - P */\n#define\tR_IA_64_IPLTMSB\t\t0x80\t/* function descriptor MSB special */\n#define\tR_IA_64_IPLTLSB\t\t0x81\t/* function descriptor LSB speciaal */\n#define\tR_IA_64_SUB\t\t0x85\t/* immediate64\tA - S */\n#define\tR_IA_64_LTOFF22X\t0x86\t/* immediate22\tspecial */\n#define\tR_IA_64_LDXMOV\t\t0x87\t/* immediate22\tspecial */\n#define\tR_IA_64_TPREL14\t\t0x91\t/* imm14\t@tprel(S + A) */\n#define\tR_IA_64_TPREL22\t\t0x92\t/* imm22\t@tprel(S + A) */\n#define\tR_IA_64_TPREL64I\t0x93\t/* imm64\t@tprel(S + A) */\n#define\tR_IA_64_TPREL64MSB\t0x96\t/* word64 MSB\t@tprel(S + A) */\n#define\tR_IA_64_TPREL64LSB\t0x97\t/* word64 LSB\t@tprel(S + A) */\n#define\tR_IA_64_LTOFF_TPREL22\t0x9a\t/* imm22\t@ltoff(@tprel(S+A)) */\n#define\tR_IA_64_DTPMOD64MSB\t0xa6\t/* word64 MSB\t@dtpmod(S + A) */\n#define\tR_IA_64_DTPMOD64LSB\t0xa7\t/* word64 LSB\t@dtpmod(S + A) */\n#define\tR_IA_64_LTOFF_DTPMOD22\t0xaa\t/* imm22\t@ltoff(@dtpmod(S+A)) */\n#define\tR_IA_64_DTPREL14\t0xb1\t/* imm14\t@dtprel(S + A) */\n#define\tR_IA_64_DTPREL22\t0xb2\t/* imm22\t@dtprel(S + A) */\n#define\tR_IA_64_DTPREL64I\t0xb3\t/* imm64\t@dtprel(S + A) */\n#define\tR_IA_64_DTPREL32MSB\t0xb4\t/* word32 MSB\t@dtprel(S + A) */\n#define\tR_IA_64_DTPREL32LSB\t0xb5\t/* word32 LSB\t@dtprel(S + A) */\n#define\tR_IA_64_DTPREL64MSB\t0xb6\t/* word64 MSB\t@dtprel(S + A) */\n#define\tR_IA_64_DTPREL64LSB\t0xb7\t/* word64 LSB\t@dtprel(S + A) */\n#define\tR_IA_64_LTOFF_DTPREL22\t0xba\t/* imm22\t@ltoff(@dtprel(S+A)) */\n\n#define\tR_MIPS_NONE\t0\t/* No reloc */\n#define\tR_MIPS_16\t1\t/* Direct 16 bit */\n#define\tR_MIPS_32\t2\t/* Direct 32 bit */\n#define\tR_MIPS_REL32\t3\t/* PC relative 32 bit */\n#define\tR_MIPS_26\t4\t/* Direct 26 bit shifted */\n#define\tR_MIPS_HI16\t5\t/* High 16 bit */\n#define\tR_MIPS_LO16\t6\t/* Low 16 bit */\n#define\tR_MIPS_GPREL16\t7\t/* GP relative 16 bit */\n#define\tR_MIPS_LITERAL\t8\t/* 16 bit literal entry */\n#define\tR_MIPS_GOT16\t9\t/* 16 bit GOT entry */\n#define\tR_MIPS_PC16\t10\t/* PC relative 16 bit */\n#define\tR_MIPS_CALL16\t11\t/* 16 bit GOT entry for function */\n#define\tR_MIPS_GPREL32\t12\t/* GP relative 32 bit */\n#define\tR_MIPS_64\t18\t/* Direct 64 bit */\n#define\tR_MIPS_GOT_DISP\t19\n#define\tR_MIPS_GOT_PAGE\t20\n#define\tR_MIPS_GOT_OFST\t21\n#define\tR_MIPS_GOT_HI16\t22\t/* GOT HI 16 bit */\n#define\tR_MIPS_GOT_LO16\t23\t/* GOT LO 16 bit */\n#define\tR_MIPS_SUB\t24\n#define\tR_MIPS_CALLHI16 30\t/* upper 16 bit GOT entry for function */\n#define\tR_MIPS_CALLLO16 31\t/* lower 16 bit GOT entry for function */\n#define\tR_MIPS_JALR\t37\n#define\tR_MIPS_TLS_GD\t42\n\n#define\tR_PPC_NONE\t\t0\t/* No relocation. */\n#define\tR_PPC_ADDR32\t\t1\n#define\tR_PPC_ADDR24\t\t2\n#define\tR_PPC_ADDR16\t\t3\n#define\tR_PPC_ADDR16_LO\t\t4\n#define\tR_PPC_ADDR16_HI\t\t5\n#define\tR_PPC_ADDR16_HA\t\t6\n#define\tR_PPC_ADDR14\t\t7\n#define\tR_PPC_ADDR14_BRTAKEN\t8\n#define\tR_PPC_ADDR14_BRNTAKEN\t9\n#define\tR_PPC_REL24\t\t10\n#define\tR_PPC_REL14\t\t11\n#define\tR_PPC_REL14_BRTAKEN\t12\n#define\tR_PPC_REL14_BRNTAKEN\t13\n#define\tR_PPC_GOT16\t\t14\n#define\tR_PPC_GOT16_LO\t\t15\n#define\tR_PPC_GOT16_HI\t\t16\n#define\tR_PPC_GOT16_HA\t\t17\n#define\tR_PPC_PLTREL24\t\t18\n#define\tR_PPC_COPY\t\t19\n#define\tR_PPC_GLOB_DAT\t\t20\n#define\tR_PPC_JMP_SLOT\t\t21\n#define\tR_PPC_RELATIVE\t\t22\n#define\tR_PPC_LOCAL24PC\t\t23\n#define\tR_PPC_UADDR32\t\t24\n#define\tR_PPC_UADDR16\t\t25\n#define\tR_PPC_REL32\t\t26\n#define\tR_PPC_PLT32\t\t27\n#define\tR_PPC_PLTREL32\t\t28\n#define\tR_PPC_PLT16_LO\t\t29\n#define\tR_PPC_PLT16_HI\t\t30\n#define\tR_PPC_PLT16_HA\t\t31\n#define\tR_PPC_SDAREL16\t\t32\n#define\tR_PPC_SECTOFF\t\t33\n#define\tR_PPC_SECTOFF_LO\t34\n#define\tR_PPC_SECTOFF_HI\t35\n#define\tR_PPC_SECTOFF_HA\t36\n\n/*\n * 64-bit relocations\n */\n#define\tR_PPC64_ADDR64\t\t38\n#define\tR_PPC64_ADDR16_HIGHER\t39\n#define\tR_PPC64_ADDR16_HIGHERA\t40\n#define\tR_PPC64_ADDR16_HIGHEST\t41\n#define\tR_PPC64_ADDR16_HIGHESTA\t42\n#define\tR_PPC64_UADDR64\t\t43\n#define\tR_PPC64_REL64\t\t44\n#define\tR_PPC64_PLT64\t\t45\n#define\tR_PPC64_PLTREL64\t46\n#define\tR_PPC64_TOC16\t\t47\n#define\tR_PPC64_TOC16_LO\t48\n#define\tR_PPC64_TOC16_HI\t49\n#define\tR_PPC64_TOC16_HA\t50\n#define\tR_PPC64_TOC\t\t51\n#define\tR_PPC64_DTPMOD64\t68\n#define\tR_PPC64_TPREL64\t\t73\n#define\tR_PPC64_DTPREL64\t78\n\n/*\n * TLS relocations\n */\n#define\tR_PPC_TLS\t\t67\n#define\tR_PPC_DTPMOD32\t\t68\n#define\tR_PPC_TPREL16\t\t69\n#define\tR_PPC_TPREL16_LO\t70\n#define\tR_PPC_TPREL16_HI\t71\n#define\tR_PPC_TPREL16_HA\t72\n#define\tR_PPC_TPREL32\t\t73\n#define\tR_PPC_DTPREL16\t\t74\n#define\tR_PPC_DTPREL16_LO\t75\n#define\tR_PPC_DTPREL16_HI\t76\n#define\tR_PPC_DTPREL16_HA\t77\n#define\tR_PPC_DTPREL32\t\t78\n#define\tR_PPC_GOT_TLSGD16\t79\n#define\tR_PPC_GOT_TLSGD16_LO\t80\n#define\tR_PPC_GOT_TLSGD16_HI\t81\n#define\tR_PPC_GOT_TLSGD16_HA\t82\n#define\tR_PPC_GOT_TLSLD16\t83\n#define\tR_PPC_GOT_TLSLD16_LO\t84\n#define\tR_PPC_GOT_TLSLD16_HI\t85\n#define\tR_PPC_GOT_TLSLD16_HA\t86\n#define\tR_PPC_GOT_TPREL16\t87\n#define\tR_PPC_GOT_TPREL16_LO\t88\n#define\tR_PPC_GOT_TPREL16_HI\t89\n#define\tR_PPC_GOT_TPREL16_HA\t90\n\n/*\n * The remaining relocs are from the Embedded ELF ABI, and are not in the\n *  SVR4 ELF ABI.\n */\n\n#define\tR_PPC_EMB_NADDR32\t101\n#define\tR_PPC_EMB_NADDR16\t102\n#define\tR_PPC_EMB_NADDR16_LO\t103\n#define\tR_PPC_EMB_NADDR16_HI\t104\n#define\tR_PPC_EMB_NADDR16_HA\t105\n#define\tR_PPC_EMB_SDAI16\t106\n#define\tR_PPC_EMB_SDA2I16\t107\n#define\tR_PPC_EMB_SDA2REL\t108\n#define\tR_PPC_EMB_SDA21\t\t109\n#define\tR_PPC_EMB_MRKREF\t110\n#define\tR_PPC_EMB_RELSEC16\t111\n#define\tR_PPC_EMB_RELST_LO\t112\n#define\tR_PPC_EMB_RELST_HI\t113\n#define\tR_PPC_EMB_RELST_HA\t114\n#define\tR_PPC_EMB_BIT_FLD\t115\n#define\tR_PPC_EMB_RELSDA\t116\n\n/*\n * RISC-V relocation types.\n */\n\n/* Relocation types used by the dynamic linker. */\n#define\tR_RISCV_NONE\t\t0\n#define\tR_RISCV_32\t\t1\n#define\tR_RISCV_64\t\t2\n#define\tR_RISCV_RELATIVE\t3\n#define\tR_RISCV_COPY\t\t4\n#define\tR_RISCV_JUMP_SLOT\t5\n#define\tR_RISCV_TLS_DTPMOD32\t6\n#define\tR_RISCV_TLS_DTPMOD64\t7\n#define\tR_RISCV_TLS_DTPREL32\t8\n#define\tR_RISCV_TLS_DTPREL64\t9\n#define\tR_RISCV_TLS_TPREL32\t10\n#define\tR_RISCV_TLS_TPREL64\t11\n\n/* Relocation types not used by the dynamic linker. */\n#define\tR_RISCV_BRANCH\t\t16\n#define\tR_RISCV_JAL\t\t17\n#define\tR_RISCV_CALL\t\t18\n#define\tR_RISCV_CALL_PLT\t19\n#define\tR_RISCV_GOT_HI20\t20\n#define\tR_RISCV_TLS_GOT_HI20\t21\n#define\tR_RISCV_TLS_GD_HI20\t22\n#define\tR_RISCV_PCREL_HI20\t23\n#define\tR_RISCV_PCREL_LO12_I\t24\n#define\tR_RISCV_PCREL_LO12_S\t25\n#define\tR_RISCV_HI20\t\t26\n#define\tR_RISCV_LO12_I\t\t27\n#define\tR_RISCV_LO12_S\t\t28\n#define\tR_RISCV_TPREL_HI20\t29\n#define\tR_RISCV_TPREL_LO12_I\t30\n#define\tR_RISCV_TPREL_LO12_S\t31\n#define\tR_RISCV_TPREL_ADD\t32\n#define\tR_RISCV_ADD8\t\t33\n#define\tR_RISCV_ADD16\t\t34\n#define\tR_RISCV_ADD32\t\t35\n#define\tR_RISCV_ADD64\t\t36\n#define\tR_RISCV_SUB8\t\t37\n#define\tR_RISCV_SUB16\t\t38\n#define\tR_RISCV_SUB32\t\t39\n#define\tR_RISCV_SUB64\t\t40\n#define\tR_RISCV_GNU_VTINHERIT\t41\n#define\tR_RISCV_GNU_VTENTRY\t42\n#define\tR_RISCV_ALIGN\t\t43\n#define\tR_RISCV_RVC_BRANCH\t44\n#define\tR_RISCV_RVC_JUMP\t45\n\n#define\tR_SPARC_NONE\t\t0\n#define\tR_SPARC_8\t\t1\n#define\tR_SPARC_16\t\t2\n#define\tR_SPARC_32\t\t3\n#define\tR_SPARC_DISP8\t\t4\n#define\tR_SPARC_DISP16\t\t5\n#define\tR_SPARC_DISP32\t\t6\n#define\tR_SPARC_WDISP30\t\t7\n#define\tR_SPARC_WDISP22\t\t8\n#define\tR_SPARC_HI22\t\t9\n#define\tR_SPARC_22\t\t10\n#define\tR_SPARC_13\t\t11\n#define\tR_SPARC_LO10\t\t12\n#define\tR_SPARC_GOT10\t\t13\n#define\tR_SPARC_GOT13\t\t14\n#define\tR_SPARC_GOT22\t\t15\n#define\tR_SPARC_PC10\t\t16\n#define\tR_SPARC_PC22\t\t17\n#define\tR_SPARC_WPLT30\t\t18\n#define\tR_SPARC_COPY\t\t19\n#define\tR_SPARC_GLOB_DAT\t20\n#define\tR_SPARC_JMP_SLOT\t21\n#define\tR_SPARC_RELATIVE\t22\n#define\tR_SPARC_UA32\t\t23\n#define\tR_SPARC_PLT32\t\t24\n#define\tR_SPARC_HIPLT22\t\t25\n#define\tR_SPARC_LOPLT10\t\t26\n#define\tR_SPARC_PCPLT32\t\t27\n#define\tR_SPARC_PCPLT22\t\t28\n#define\tR_SPARC_PCPLT10\t\t29\n#define\tR_SPARC_10\t\t30\n#define\tR_SPARC_11\t\t31\n#define\tR_SPARC_64\t\t32\n#define\tR_SPARC_OLO10\t\t33\n#define\tR_SPARC_HH22\t\t34\n#define\tR_SPARC_HM10\t\t35\n#define\tR_SPARC_LM22\t\t36\n#define\tR_SPARC_PC_HH22\t\t37\n#define\tR_SPARC_PC_HM10\t\t38\n#define\tR_SPARC_PC_LM22\t\t39\n#define\tR_SPARC_WDISP16\t\t40\n#define\tR_SPARC_WDISP19\t\t41\n#define\tR_SPARC_GLOB_JMP\t42\n#define\tR_SPARC_7\t\t43\n#define\tR_SPARC_5\t\t44\n#define\tR_SPARC_6\t\t45\n#define\tR_SPARC_DISP64\t\t46\n#define\tR_SPARC_PLT64\t\t47\n#define\tR_SPARC_HIX22\t\t48\n#define\tR_SPARC_LOX10\t\t49\n#define\tR_SPARC_H44\t\t50\n#define\tR_SPARC_M44\t\t51\n#define\tR_SPARC_L44\t\t52\n#define\tR_SPARC_REGISTER\t53\n#define\tR_SPARC_UA64\t\t54\n#define\tR_SPARC_UA16\t\t55\n#define\tR_SPARC_TLS_GD_HI22\t56\n#define\tR_SPARC_TLS_GD_LO10\t57\n#define\tR_SPARC_TLS_GD_ADD\t58\n#define\tR_SPARC_TLS_GD_CALL\t59\n#define\tR_SPARC_TLS_LDM_HI22\t60\n#define\tR_SPARC_TLS_LDM_LO10\t61\n#define\tR_SPARC_TLS_LDM_ADD\t62\n#define\tR_SPARC_TLS_LDM_CALL\t63\n#define\tR_SPARC_TLS_LDO_HIX22\t64\n#define\tR_SPARC_TLS_LDO_LOX10\t65\n#define\tR_SPARC_TLS_LDO_ADD\t66\n#define\tR_SPARC_TLS_IE_HI22\t67\n#define\tR_SPARC_TLS_IE_LO10\t68\n#define\tR_SPARC_TLS_IE_LD\t69\n#define\tR_SPARC_TLS_IE_LDX\t70\n#define\tR_SPARC_TLS_IE_ADD\t71\n#define\tR_SPARC_TLS_LE_HIX22\t72\n#define\tR_SPARC_TLS_LE_LOX10\t73\n#define\tR_SPARC_TLS_DTPMOD32\t74\n#define\tR_SPARC_TLS_DTPMOD64\t75\n#define\tR_SPARC_TLS_DTPOFF32\t76\n#define\tR_SPARC_TLS_DTPOFF64\t77\n#define\tR_SPARC_TLS_TPOFF32\t78\n#define\tR_SPARC_TLS_TPOFF64\t79\n\n#define\tR_X86_64_NONE\t\t0\t/* No relocation. */\n#define\tR_X86_64_64\t\t1\t/* Add 64 bit symbol value. */\n#define\tR_X86_64_PC32\t\t2\t/* PC-relative 32 bit signed sym value. */\n#define\tR_X86_64_GOT32\t\t3\t/* PC-relative 32 bit GOT offset. */\n#define\tR_X86_64_PLT32\t\t4\t/* PC-relative 32 bit PLT offset. */\n#define\tR_X86_64_COPY\t\t5\t/* Copy data from shared object. */\n#define\tR_X86_64_GLOB_DAT\t6\t/* Set GOT entry to data address. */\n#define\tR_X86_64_JMP_SLOT\t7\t/* Set GOT entry to code address. */\n#define\tR_X86_64_RELATIVE\t8\t/* Add load address of shared object. */\n#define\tR_X86_64_GOTPCREL\t9\t/* Add 32 bit signed pcrel offset to GOT. */\n#define\tR_X86_64_32\t\t10\t/* Add 32 bit zero extended symbol value */\n#define\tR_X86_64_32S\t\t11\t/* Add 32 bit sign extended symbol value */\n#define\tR_X86_64_16\t\t12\t/* Add 16 bit zero extended symbol value */\n#define\tR_X86_64_PC16\t\t13\t/* Add 16 bit signed extended pc relative symbol value */\n#define\tR_X86_64_8\t\t14\t/* Add 8 bit zero extended symbol value */\n#define\tR_X86_64_PC8\t\t15\t/* Add 8 bit signed extended pc relative symbol value */\n#define\tR_X86_64_DTPMOD64\t16\t/* ID of module containing symbol */\n#define\tR_X86_64_DTPOFF64\t17\t/* Offset in TLS block */\n#define\tR_X86_64_TPOFF64\t18\t/* Offset in static TLS block */\n#define\tR_X86_64_TLSGD\t\t19\t/* PC relative offset to GD GOT entry */\n#define\tR_X86_64_TLSLD\t\t20\t/* PC relative offset to LD GOT entry */\n#define\tR_X86_64_DTPOFF32\t21\t/* Offset in TLS block */\n#define\tR_X86_64_GOTTPOFF\t22\t/* PC relative offset to IE GOT entry */\n#define\tR_X86_64_TPOFF32\t23\t/* Offset in static TLS block */\n#define\tR_X86_64_PC64\t\t24\t/* PC-relative 64 bit signed sym value. */\n#define\tR_X86_64_GOTOFF64\t25\n#define\tR_X86_64_GOTPC32\t26\n#define\tR_X86_64_GOT64\t\t27\n#define\tR_X86_64_GOTPCREL64\t28\n#define\tR_X86_64_GOTPC64\t29\n#define\tR_X86_64_GOTPLT64\t30\n#define\tR_X86_64_PLTOFF64\t31\n#define\tR_X86_64_SIZE32\t\t32\n#define\tR_X86_64_SIZE64\t\t33\n#define\tR_X86_64_GOTPC32_TLSDESC 34\n#define\tR_X86_64_TLSDESC_CALL\t35\n#define\tR_X86_64_TLSDESC\t36\n#define\tR_X86_64_IRELATIVE\t37\n\n\n#endif /* !_FREEBSD_ELF_SYS_ELF_COMMON_H_ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-bloaty-1.1-bepgjmftpvafg6gsmk237s3zcz5oolim/spack-src/third_party/abseil-cpp/absl/base/internal/thread_identity.cc": "// Copyright 2017 The Abseil Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#include \"absl/base/internal/thread_identity.h\"\n\n#ifndef _WIN32\n#include <pthread.h>\n#include <signal.h>\n#endif\n\n#include <atomic>\n#include <cassert>\n#include <memory>\n\n#include \"absl/base/call_once.h\"\n#include \"absl/base/internal/raw_logging.h\"\n#include \"absl/base/internal/spinlock.h\"\n\nnamespace absl {\nnamespace base_internal {\n\n#if ABSL_THREAD_IDENTITY_MODE != ABSL_THREAD_IDENTITY_MODE_USE_CPP11\nnamespace {\n// Used to co-ordinate one-time creation of our pthread_key\nabsl::once_flag init_thread_identity_key_once;\npthread_key_t thread_identity_pthread_key;\nstd::atomic<bool> pthread_key_initialized(false);\n\nvoid AllocateThreadIdentityKey(ThreadIdentityReclaimerFunction reclaimer) {\n  pthread_key_create(&thread_identity_pthread_key, reclaimer);\n  pthread_key_initialized.store(true, std::memory_order_release);\n}\n}  // namespace\n#endif\n\n#if ABSL_THREAD_IDENTITY_MODE == ABSL_THREAD_IDENTITY_MODE_USE_TLS || \\\n    ABSL_THREAD_IDENTITY_MODE == ABSL_THREAD_IDENTITY_MODE_USE_CPP11\n// The actual TLS storage for a thread's currently associated ThreadIdentity.\n// This is referenced by inline accessors in the header.\n// \"protected\" visibility ensures that if multiple instances of Abseil code\n// exist within a process (via dlopen() or similar), references to\n// thread_identity_ptr from each instance of the code will refer to\n// *different* instances of this ptr.\n#ifdef __GNUC__\n__attribute__((visibility(\"protected\")))\n#endif  // __GNUC__\n  ABSL_PER_THREAD_TLS_KEYWORD ThreadIdentity* thread_identity_ptr;\n#endif  // TLS or CPP11\n\nvoid SetCurrentThreadIdentity(\n    ThreadIdentity* identity, ThreadIdentityReclaimerFunction reclaimer) {\n  assert(CurrentThreadIdentityIfPresent() == nullptr);\n  // Associate our destructor.\n  // NOTE: This call to pthread_setspecific is currently the only immovable\n  // barrier to CurrentThreadIdentity() always being async signal safe.\n#if ABSL_THREAD_IDENTITY_MODE == ABSL_THREAD_IDENTITY_MODE_USE_POSIX_SETSPECIFIC\n  // NOTE: Not async-safe.  But can be open-coded.\n  absl::call_once(init_thread_identity_key_once, AllocateThreadIdentityKey,\n                  reclaimer);\n\n#ifdef __EMSCRIPTEN__\n  // Emscripten PThread implementation does not support signals.\n  // See https://kripken.github.io/emscripten-site/docs/porting/pthreads.html\n  // for more information.\n  pthread_setspecific(thread_identity_pthread_key,\n                      reinterpret_cast<void*>(identity));\n#else\n  // We must mask signals around the call to setspecific as with current glibc,\n  // a concurrent getspecific (needed for GetCurrentThreadIdentityIfPresent())\n  // may zero our value.\n  //\n  // While not officially async-signal safe, getspecific within a signal handler\n  // is otherwise OK.\n  sigset_t all_signals;\n  sigset_t curr_signals;\n  sigfillset(&all_signals);\n  pthread_sigmask(SIG_SETMASK, &all_signals, &curr_signals);\n  pthread_setspecific(thread_identity_pthread_key,\n                      reinterpret_cast<void*>(identity));\n  pthread_sigmask(SIG_SETMASK, &curr_signals, nullptr);\n#endif  // !__EMSCRIPTEN__\n\n#elif ABSL_THREAD_IDENTITY_MODE == ABSL_THREAD_IDENTITY_MODE_USE_TLS\n  // NOTE: Not async-safe.  But can be open-coded.\n  absl::call_once(init_thread_identity_key_once, AllocateThreadIdentityKey,\n                  reclaimer);\n  pthread_setspecific(thread_identity_pthread_key,\n                      reinterpret_cast<void*>(identity));\n  thread_identity_ptr = identity;\n#elif ABSL_THREAD_IDENTITY_MODE == ABSL_THREAD_IDENTITY_MODE_USE_CPP11\n  thread_local std::unique_ptr<ThreadIdentity, ThreadIdentityReclaimerFunction>\n      holder(identity, reclaimer);\n  thread_identity_ptr = identity;\n#else\n#error Unimplemented ABSL_THREAD_IDENTITY_MODE\n#endif\n}\n\nvoid ClearCurrentThreadIdentity() {\n#if ABSL_THREAD_IDENTITY_MODE == ABSL_THREAD_IDENTITY_MODE_USE_TLS || \\\n    ABSL_THREAD_IDENTITY_MODE == ABSL_THREAD_IDENTITY_MODE_USE_CPP11\n  thread_identity_ptr = nullptr;\n#elif ABSL_THREAD_IDENTITY_MODE == \\\n      ABSL_THREAD_IDENTITY_MODE_USE_POSIX_SETSPECIFIC\n  // pthread_setspecific expected to clear value on destruction\n  assert(CurrentThreadIdentityIfPresent() == nullptr);\n#endif\n}\n\n#if ABSL_THREAD_IDENTITY_MODE == ABSL_THREAD_IDENTITY_MODE_USE_POSIX_SETSPECIFIC\nThreadIdentity* CurrentThreadIdentityIfPresent() {\n  bool initialized = pthread_key_initialized.load(std::memory_order_acquire);\n  if (!initialized) {\n    return nullptr;\n  }\n  return reinterpret_cast<ThreadIdentity*>(\n      pthread_getspecific(thread_identity_pthread_key));\n}\n#endif\n\n}  // namespace base_internal\n}  // namespace absl\n",
        "/tmp/vanessa/spack-stage/spack-stage-bloaty-1.1-bepgjmftpvafg6gsmk237s3zcz5oolim/spack-src/third_party/abseil-cpp/absl/random/internal/randen_detect.cc": "// Copyright 2017 The Abseil Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the\"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an\"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// HERMETIC NOTE: The randen_hwaes target must not introduce duplicate\n// symbols from arbitrary system and other headers, since it may be built\n// with different flags from other targets, using different levels of\n// optimization, potentially introducing ODR violations.\n\n#include \"absl/random/internal/randen_detect.h\"\n\n#include <cstdint>\n#include <cstring>\n\n#include \"absl/random/internal/platform.h\"\n\n#if defined(ABSL_ARCH_X86_64)\n#define ABSL_INTERNAL_USE_X86_CPUID\n#elif defined(ABSL_ARCH_PPC) || defined(ABSL_ARCH_ARM) || \\\n    defined(ABSL_ARCH_AARCH64)\n#if defined(__ANDROID__)\n#define ABSL_INTERNAL_USE_ANDROID_GETAUXVAL\n#define ABSL_INTERNAL_USE_GETAUXVAL\n#elif defined(__linux__)\n#define ABSL_INTERNAL_USE_LINUX_GETAUXVAL\n#define ABSL_INTERNAL_USE_GETAUXVAL\n#endif\n#endif\n\n#if defined(ABSL_INTERNAL_USE_X86_CPUID)\n#if defined(_WIN32) || defined(_WIN64)\n#include <intrin.h>  // NOLINT(build/include_order)\n#pragma intrinsic(__cpuid)\n#else\n// MSVC-equivalent __cpuid intrinsic function.\nstatic void __cpuid(int cpu_info[4], int info_type) {\n  __asm__ volatile(\"cpuid \\n\\t\"\n                   : \"=a\"(cpu_info[0]), \"=b\"(cpu_info[1]), \"=c\"(cpu_info[2]),\n                     \"=d\"(cpu_info[3])\n                   : \"a\"(info_type), \"c\"(0));\n}\n#endif\n#endif  // ABSL_INTERNAL_USE_X86_CPUID\n\n// On linux, just use the c-library getauxval call.\n#if defined(ABSL_INTERNAL_USE_LINUX_GETAUXVAL)\n\nextern \"C\" unsigned long getauxval(unsigned long type);  // NOLINT(runtime/int)\n\nstatic uint32_t GetAuxval(uint32_t hwcap_type) {\n  return static_cast<uint32_t>(getauxval(hwcap_type));\n}\n\n#endif\n\n// On android, probe the system's C library for getauxval().\n// This is the same technique used by the android NDK cpu features library\n// as well as the google open-source cpu_features library.\n//\n// TODO(absl-team): Consider implementing a fallback of directly reading\n// /proc/self/auxval.\n#if defined(ABSL_INTERNAL_USE_ANDROID_GETAUXVAL)\n#include <dlfcn.h>\n\nstatic uint32_t GetAuxval(uint32_t hwcap_type) {\n  // NOLINTNEXTLINE(runtime/int)\n  typedef unsigned long (*getauxval_func_t)(unsigned long);\n\n  dlerror();  // Cleaning error state before calling dlopen.\n  void* libc_handle = dlopen(\"libc.so\", RTLD_NOW);\n  if (!libc_handle) {\n    return 0;\n  }\n  uint32_t result = 0;\n  void* sym = dlsym(libc_handle, \"getauxval\");\n  if (sym) {\n    getauxval_func_t func;\n    memcpy(&func, &sym, sizeof(func));\n    result = static_cast<uint32_t>((*func)(hwcap_type));\n  }\n  dlclose(libc_handle);\n  return result;\n}\n\n#endif\n\nnamespace absl {\nnamespace random_internal {\n\n// The default return at the end of the function might be unreachable depending\n// on the configuration. Ignore that warning.\n#if defined(__clang__)\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wunreachable-code-return\"\n#endif\n\n// CPUSupportsRandenHwAes returns whether the CPU is a microarchitecture\n// which supports the crpyto/aes instructions or extensions necessary to use the\n// accelerated RandenHwAes implementation.\n//\n// 1. For x86 it is sufficient to use the CPUID instruction to detect whether\n//    the cpu supports AES instructions. Done.\n//\n// Fon non-x86 it is much more complicated.\n//\n// 2. When ABSL_INTERNAL_USE_GETAUXVAL is defined, use getauxval() (either\n//    the direct c-library version, or the android probing version which loads\n//    libc), and read the hardware capability bits.\n//    This is based on the technique used by boringssl uses to detect\n//    cpu capabilities, and should allow us to enable crypto in the android\n//    builds where it is supported.\n//\n// 3. Use the default for the compiler architecture.\n//\n\nbool CPUSupportsRandenHwAes() {\n#if defined(ABSL_INTERNAL_USE_X86_CPUID)\n  // 1. For x86: Use CPUID to detect the required AES instruction set.\n  int regs[4];\n  __cpuid(reinterpret_cast<int*>(regs), 1);\n  return regs[2] & (1 << 25);  // AES\n\n#elif defined(ABSL_INTERNAL_USE_GETAUXVAL)\n  // 2. Use getauxval() to read the hardware bits and determine\n  // cpu capabilities.\n\n#define AT_HWCAP 16\n#define AT_HWCAP2 26\n#if defined(ABSL_ARCH_PPC)\n  // For Power / PPC: Expect that the cpu supports VCRYPTO\n  // See https://members.openpowerfoundation.org/document/dl/576\n  // VCRYPTO should be present in POWER8 >= 2.07.\n  // Uses Linux kernel constants from arch/powerpc/include/uapi/asm/cputable.h\n  static const uint32_t kVCRYPTO = 0x02000000;\n  const uint32_t hwcap = GetAuxval(AT_HWCAP2);\n  return (hwcap & kVCRYPTO) != 0;\n\n#elif defined(ABSL_ARCH_ARM)\n  // For ARM: Require crypto+neon\n  // http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0500f/CIHBIBBA.html\n  // Uses Linux kernel constants from arch/arm64/include/asm/hwcap.h\n  static const uint32_t kNEON = 1 << 12;\n  uint32_t hwcap = GetAuxval(AT_HWCAP);\n  if ((hwcap & kNEON) == 0) {\n    return false;\n  }\n\n  // And use it again to detect AES.\n  static const uint32_t kAES = 1 << 0;\n  const uint32_t hwcap2 = GetAuxval(AT_HWCAP2);\n  return (hwcap2 & kAES) != 0;\n\n#elif defined(ABSL_ARCH_AARCH64)\n  // For AARCH64: Require crypto+neon\n  // http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0500f/CIHBIBBA.html\n  static const uint32_t kNEON = 1 << 1;\n  static const uint32_t kAES = 1 << 3;\n  const uint32_t hwcap = GetAuxval(AT_HWCAP);\n  return ((hwcap & kNEON) != 0) && ((hwcap & kAES) != 0);\n#endif\n\n#else  // ABSL_INTERNAL_USE_GETAUXVAL\n  // 3. By default, assume that the compiler default.\n  return ABSL_HAVE_ACCELERATED_AES ? true : false;\n\n#endif\n  // NOTE: There are some other techniques that may be worth trying:\n  //\n  // * Use an environment variable: ABSL_RANDOM_USE_HWAES\n  //\n  // * Rely on compiler-generated target-based dispatch.\n  // Using x86/gcc it might look something like this:\n  //\n  // int __attribute__((target(\"aes\"))) HasAes() { return 1; }\n  // int __attribute__((target(\"default\"))) HasAes() { return 0; }\n  //\n  // This does not work on all architecture/compiler combinations.\n  //\n  // * On Linux consider reading /proc/cpuinfo and/or /proc/self/auxv.\n  // These files have lines which are easy to parse; for ARM/AARCH64 it is quite\n  // easy to find the Features: line and extract aes / neon. Likewise for\n  // PPC.\n  //\n  // * Fork a process and test for SIGILL:\n  //\n  // * Many architectures have instructions to read the ISA. Unfortunately\n  //   most of those require that the code is running in ring 0 /\n  //   protected-mode.\n  //\n  //   There are several examples. e.g. Valgrind detects PPC ISA 2.07:\n  //   https://github.com/lu-zero/valgrind/blob/master/none/tests/ppc64/test_isa_2_07_part1.c\n  //\n  //   MRS <Xt>, ID_AA64ISAR0_EL1 ; Read ID_AA64ISAR0_EL1 into Xt\n  //\n  //   uint64_t val;\n  //   __asm __volatile(\"mrs %0, id_aa64isar0_el1\" :\"=&r\" (val));\n  //\n  // * Use a CPUID-style heuristic database.\n  //\n  // * On Apple (__APPLE__), AES is available on Arm v8.\n  //   https://stackoverflow.com/questions/45637888/how-to-determine-armv8-features-at-runtime-on-ios\n}\n\n#if defined(__clang__)\n#pragma clang diagnostic pop\n#endif\n\n}  // namespace random_internal\n}  // namespace absl\n",
        "/tmp/vanessa/spack-stage/spack-stage-bloaty-1.1-bepgjmftpvafg6gsmk237s3zcz5oolim/spack-src/third_party/abseil-cpp/absl/time/internal/cctz/src/time_zone_lookup.cc": "// Copyright 2016 Google Inc. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   https://www.apache.org/licenses/LICENSE-2.0\n//\n//   Unless required by applicable law or agreed to in writing, software\n//   distributed under the License is distributed on an \"AS IS\" BASIS,\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//   See the License for the specific language governing permissions and\n//   limitations under the License.\n\n#include \"absl/time/internal/cctz/include/cctz/time_zone.h\"\n\n#if defined(__ANDROID__)\n#include <sys/system_properties.h>\n#if defined(__ANDROID_API__) && __ANDROID_API__ >= 21\n#include <dlfcn.h>\n#endif\n#endif\n\n#if defined(__APPLE__)\n#include <CoreFoundation/CFTimeZone.h>\n#include <vector>\n#endif\n\n#include <cstdlib>\n#include <cstring>\n#include <string>\n\n#include \"time_zone_fixed.h\"\n#include \"time_zone_impl.h\"\n\nnamespace absl {\nnamespace time_internal {\nnamespace cctz {\n\n#if defined(__ANDROID__) && defined(__ANDROID_API__) && __ANDROID_API__ >= 21\nnamespace {\n// Android 'L' removes __system_property_get() from the NDK, however\n// it is still a hidden symbol in libc so we use dlsym() to access it.\n// See Chromium's base/sys_info_android.cc for a similar example.\n\nusing property_get_func = int (*)(const char*, char*);\n\nproperty_get_func LoadSystemPropertyGet() {\n  int flag = RTLD_LAZY | RTLD_GLOBAL;\n#if defined(RTLD_NOLOAD)\n  flag |= RTLD_NOLOAD;  // libc.so should already be resident\n#endif\n  if (void* handle = dlopen(\"libc.so\", flag)) {\n    void* sym = dlsym(handle, \"__system_property_get\");\n    dlclose(handle);\n    return reinterpret_cast<property_get_func>(sym);\n  }\n  return nullptr;\n}\n\nint __system_property_get(const char* name, char* value) {\n  static property_get_func system_property_get = LoadSystemPropertyGet();\n  return system_property_get ? system_property_get(name, value) : -1;\n}\n\n}  // namespace\n#endif\n\nstd::string time_zone::name() const {\n  return effective_impl().Name();\n}\n\ntime_zone::absolute_lookup time_zone::lookup(\n    const time_point<seconds>& tp) const {\n  return effective_impl().BreakTime(tp);\n}\n\ntime_zone::civil_lookup time_zone::lookup(const civil_second& cs) const {\n  return effective_impl().MakeTime(cs);\n}\n\nbool time_zone::next_transition(const time_point<seconds>& tp,\n                                civil_transition* trans) const {\n  return effective_impl().NextTransition(tp, trans);\n}\n\nbool time_zone::prev_transition(const time_point<seconds>& tp,\n                                civil_transition* trans) const {\n  return effective_impl().PrevTransition(tp, trans);\n}\n\nstd::string time_zone::version() const {\n  return effective_impl().Version();\n}\n\nstd::string time_zone::description() const {\n  return effective_impl().Description();\n}\n\nconst time_zone::Impl& time_zone::effective_impl() const {\n  if (impl_ == nullptr) {\n    // Dereferencing an implicit-UTC time_zone is expected to be\n    // rare, so we don't mind paying a small synchronization cost.\n    return *time_zone::Impl::UTC().impl_;\n  }\n  return *impl_;\n}\n\nbool load_time_zone(const std::string& name, time_zone* tz) {\n  return time_zone::Impl::LoadTimeZone(name, tz);\n}\n\ntime_zone utc_time_zone() {\n  return time_zone::Impl::UTC();  // avoid name lookup\n}\n\ntime_zone fixed_time_zone(const seconds& offset) {\n  time_zone tz;\n  load_time_zone(FixedOffsetToName(offset), &tz);\n  return tz;\n}\n\ntime_zone local_time_zone() {\n  const char* zone = \":localtime\";\n#if defined(__ANDROID__)\n  char sysprop[PROP_VALUE_MAX];\n  if (__system_property_get(\"persist.sys.timezone\", sysprop) > 0) {\n    zone = sysprop;\n  }\n#endif\n#if defined(__APPLE__)\n  std::vector<char> buffer;\n  CFTimeZoneRef tz_default = CFTimeZoneCopyDefault();\n  if (CFStringRef tz_name = CFTimeZoneGetName(tz_default)) {\n    CFStringEncoding encoding = kCFStringEncodingUTF8;\n    CFIndex length = CFStringGetLength(tz_name);\n    buffer.resize(CFStringGetMaximumSizeForEncoding(length, encoding) + 1);\n    if (CFStringGetCString(tz_name, &buffer[0], buffer.size(), encoding)) {\n      zone = &buffer[0];\n    }\n  }\n  CFRelease(tz_default);\n#endif\n\n  // Allow ${TZ} to override to default zone.\n  char* tz_env = nullptr;\n#if defined(_MSC_VER)\n  _dupenv_s(&tz_env, nullptr, \"TZ\");\n#else\n  tz_env = std::getenv(\"TZ\");\n#endif\n  if (tz_env) zone = tz_env;\n\n  // We only support the \"[:]<zone-name>\" form.\n  if (*zone == ':') ++zone;\n\n  // Map \"localtime\" to a system-specific name, but\n  // allow ${LOCALTIME} to override the default name.\n  char* localtime_env = nullptr;\n  if (strcmp(zone, \"localtime\") == 0) {\n#if defined(_MSC_VER)\n    // System-specific default is just \"localtime\".\n    _dupenv_s(&localtime_env, nullptr, \"LOCALTIME\");\n#else\n    zone = \"/etc/localtime\";  // System-specific default.\n    localtime_env = std::getenv(\"LOCALTIME\");\n#endif\n    if (localtime_env) zone = localtime_env;\n  }\n\n  const std::string name = zone;\n#if defined(_MSC_VER)\n  free(localtime_env);\n  free(tz_env);\n#endif\n\n  time_zone tz;\n  load_time_zone(name, &tz);  // Falls back to UTC.\n  // TODO: Follow the RFC3339 \"Unknown Local Offset Convention\" and\n  // arrange for %z to generate \"-0000\" when we don't know the local\n  // offset because the load_time_zone() failed and we're using UTC.\n  return tz;\n}\n\n}  // namespace cctz\n}  // namespace time_internal\n}  // namespace absl\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-bloaty-1.1-bepgjmftpvafg6gsmk237s3zcz5oolim/spack-src/third_party/capstone/docs/BHUSA2014-capstone.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-bloaty-1.1-bepgjmftpvafg6gsmk237s3zcz5oolim/spack-src/third_party/capstone/docs/capstone-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-bloaty-1.1-bepgjmftpvafg6gsmk237s3zcz5oolim/spack-src/third_party/re2/doc/xkcd.png"
    ],
    "total_files": 1641
}