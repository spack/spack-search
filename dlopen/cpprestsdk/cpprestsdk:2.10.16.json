{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/vcpkg/ports/ffmpeg/0004-fix-debug-build.patch": "diff --git a/configure b/configure\nindex bd2de34..fba948a 100755\n--- a/configure\n+++ b/configure\n@@ -3993,6 +3993,9 @@ for opt do\n         --libfuzzer=*)\n             libfuzzer_path=\"$optval\"\n         ;;\n+        --debug)\n+            enable debug_configure\n+        ;;\n         *)\n             optname=\"${opt%%=*}\"\n             optname=\"${optname#--}\"\n@@ -6152,8 +6155,13 @@ fi\n \n enabled  zlib && { check_pkg_config zlib zlib \"zlib.h\" zlibVersion ||\n                    check_lib zlib   zlib.h      zlibVersion    -lz; }\n-enabled bzlib && check_lib bzlib bzlib.h BZ2_bzlibVersion    -lbz2\n-enabled  lzma && check_lib lzma   lzma.h lzma_version_number -llzma\n+if enabled debug_configure; then\n+    enabled bzlib && check_lib bzlib bzlib.h BZ2_bzlibVersion    -lbz2d\n+    enabled  lzma && check_lib lzma   lzma.h lzma_version_number -llzmad\n+else\n+    enabled bzlib && check_lib bzlib bzlib.h BZ2_bzlibVersion    -lbz2\n+    enabled  lzma && check_lib lzma   lzma.h lzma_version_number -llzma\n+fi\n \n # On some systems dynamic loading requires no extra linker flags\n check_lib libdl dlfcn.h \"dlopen dlsym\" || check_lib libdl dlfcn.h \"dlopen dlsym\" -ldl\n",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/vcpkg/ports/gettext/libgnuintl.win32.h": "/* Message catalogs for internationalization.\nCopyright (C) 1995-1997, 2000-2007 Free Software Foundation, Inc.\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU Library General Public License as published\nby the Free Software Foundation; either version 2, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLibrary General Public License for more details.\n\nYou should have received a copy of the GNU Library General Public\nLicense along with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\nUSA.  */\n\n#ifndef _LIBINTL_H\n#define _LIBINTL_H\t1\n\n#if defined(_WIN32) && defined(libintl_EXPORTS)\n#define LIBINTL_DLL_EXPORTED __declspec(dllexport)\n#else\n#define LIBINTL_DLL_EXPORTED\n#endif\n\n#include <locale.h>\n\n/* The LC_MESSAGES locale category is the category used by the functions\ngettext() and dgettext().  It is specified in POSIX, but not in ANSI C.\nOn systems that don't define it, use an arbitrary value instead.\nOn Solaris, <locale.h> defines __LOCALE_H (or _LOCALE_H in Solaris 2.5)\nthen includes <libintl.h> (i.e. this file!) and then only defines\nLC_MESSAGES.  To avoid a redefinition warning, don't define LC_MESSAGES\nin this case.  */\n#if !defined LC_MESSAGES && !(defined __LOCALE_H || (defined _LOCALE_H && defined __sun))\n# define LC_MESSAGES 1729\n#endif\n\n/* We define an additional symbol to signal that we use the GNU\nimplementation of gettext.  */\n#define __USE_GNU_GETTEXT 1\n\n/* Provide information about the supported file formats.  Returns the\nmaximum minor revision number supported for a given major revision.  */\n#define __GNU_GETTEXT_SUPPORTED_REVISION(major) \\\n  ((major) == 0 || (major) == 1 ? 1 : -1)\n\n/* Resolve a platform specific conflict on DJGPP.  GNU gettext takes\nprecedence over _conio_gettext.  */\n#ifdef __DJGPP__\n# undef gettext\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n\t/* Version number: (major<<16) + (minor<<8) + subminor */\n#define LIBINTL_VERSION 0x001100\n\textern LIBINTL_DLL_EXPORTED int libintl_version;\n\n\n\t/* We redirect the functions to those prefixed with \"libintl_\".  This is\n\tnecessary, because some systems define gettext/textdomain/... in the C\n\tlibrary (namely, Solaris 2.4 and newer, and GNU libc 2.0 and newer).\n\tIf we used the unprefixed names, there would be cases where the\n\tdefinition in the C library would override the one in the libintl.so\n\tshared library.  Recall that on ELF systems, the symbols are looked\n\tup in the following order:\n\t1. in the executable,\n\t2. in the shared libraries specified on the link command line, in order,\n\t3. in the dependencies of the shared libraries specified on the link\n\tcommand line,\n\t4. in the dlopen()ed shared libraries, in the order in which they were\n\tdlopen()ed.\n\tThe definition in the C library would override the one in libintl.so if\n\teither\n\t* -lc is given on the link command line and -lintl isn't, or\n\t* -lc is given on the link command line before -lintl, or\n\t* libintl.so is a dependency of a dlopen()ed shared library but not\n\tlinked to the executable at link time.\n\tSince Solaris gettext() behaves differently than GNU gettext(), this\n\twould be unacceptable.\n\n\tThe redirection happens by default through macros in C, so that &gettext\n\tis independent of the compilation unit, but through inline functions in\n\tC++, in order not to interfere with the name mangling of class fields or\n\tclass methods called 'gettext'.  */\n\n\t/* The user can define _INTL_REDIRECT_INLINE or _INTL_REDIRECT_MACROS.\n\tIf he doesn't, we choose the method.  A third possible method is\n\t_INTL_REDIRECT_ASM, supported only by GCC.  */\n#if !(defined _INTL_REDIRECT_INLINE || defined _INTL_REDIRECT_MACROS)\n# if __GNUC__ >= 2 && !(__APPLE_CC__ > 1) && !defined __MINGW32__ && !(__GNUC__ == 2 && defined _AIX) && (defined __STDC__ || defined __cplusplus)\n#  define _INTL_REDIRECT_ASM\n# else\n#  ifdef __cplusplus\n#   define _INTL_REDIRECT_INLINE\n#  else\n#   define _INTL_REDIRECT_MACROS\n#  endif\n# endif\n#endif\n\t/* Auxiliary macros.  */\n#ifdef _INTL_REDIRECT_ASM\n# define _INTL_ASM(cname) __asm__ (_INTL_ASMNAME (__USER_LABEL_PREFIX__, #cname))\n# define _INTL_ASMNAME(prefix,cnamestring) _INTL_STRINGIFY (prefix) cnamestring\n# define _INTL_STRINGIFY(prefix) #prefix\n#else\n# define _INTL_ASM(cname)\n#endif\n\n\t/* _INTL_MAY_RETURN_STRING_ARG(n) declares that the given function may return\n\tits n-th argument literally.  This enables GCC to warn for example about\n\tprintf (gettext (\"foo %y\")).  */\n#if __GNUC__ >= 3 && !(__APPLE_CC__ > 1 && defined __cplusplus)\n# define _INTL_MAY_RETURN_STRING_ARG(n) __attribute__ ((__format_arg__ (n)))\n#else\n# define _INTL_MAY_RETURN_STRING_ARG(n)\n#endif\n\n\t/* Look up MSGID in the current default message catalog for the current\n\tLC_MESSAGES locale.  If not found, returns MSGID itself (the default\n\ttext).  */\n#ifdef _INTL_REDIRECT_INLINE\n\textern LIBINTL_DLL_EXPORTED char *libintl_gettext(const char *__msgid)\n\t\t_INTL_MAY_RETURN_STRING_ARG(1);\n\tstatic inline char *gettext(const char *__msgid)\n\t{\n\t\treturn libintl_gettext(__msgid);\n\t}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define gettext libintl_gettext\n#endif\n\textern LIBINTL_DLL_EXPORTED char *gettext(const char *__msgid)\n\t\t_INTL_ASM(libintl_gettext)\n\t\t_INTL_MAY_RETURN_STRING_ARG(1);\n#endif\n\n\t/* Look up MSGID in the DOMAINNAME message catalog for the current\n\tLC_MESSAGES locale.  */\n#ifdef _INTL_REDIRECT_INLINE\n\textern LIBINTL_DLL_EXPORTED char *libintl_dgettext(const char *__domainname, const char *__msgid)\n\t\t_INTL_MAY_RETURN_STRING_ARG(2);\n\tstatic inline char *dgettext(const char *__domainname, const char *__msgid)\n\t{\n\t\treturn libintl_dgettext(__domainname, __msgid);\n\t}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dgettext libintl_dgettext\n#endif\n\textern LIBINTL_DLL_EXPORTED char *dgettext(const char *__domainname, const char *__msgid)\n\t\t_INTL_ASM(libintl_dgettext)\n\t\t_INTL_MAY_RETURN_STRING_ARG(2);\n#endif\n\n\t/* Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY\n\tlocale.  */\n#ifdef _INTL_REDIRECT_INLINE\n\textern LIBINTL_DLL_EXPORTED char *libintl_dcgettext(const char *__domainname, const char *__msgid,\n\t\tint __category)\n\t\t_INTL_MAY_RETURN_STRING_ARG(2);\n\tstatic inline char *dcgettext(const char *__domainname, const char *__msgid,\n\t\tint __category)\n\t{\n\t\treturn libintl_dcgettext(__domainname, __msgid, __category);\n\t}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dcgettext libintl_dcgettext\n#endif\n\textern LIBINTL_DLL_EXPORTED char *dcgettext(const char *__domainname, const char *__msgid,\n\t\tint __category)\n\t\t_INTL_ASM(libintl_dcgettext)\n\t\t_INTL_MAY_RETURN_STRING_ARG(2);\n#endif\n\n\n\t/* Similar to `gettext' but select the plural form corresponding to the\n\tnumber N.  */\n#ifdef _INTL_REDIRECT_INLINE\n\textern LIBINTL_DLL_EXPORTED char *libintl_ngettext(const char *__msgid1, const char *__msgid2,\n\t\tunsigned long int __n)\n\t\t_INTL_MAY_RETURN_STRING_ARG(1) _INTL_MAY_RETURN_STRING_ARG(2);\n\tstatic inline char *ngettext(const char *__msgid1, const char *__msgid2,\n\t\tunsigned long int __n)\n\t{\n\t\treturn libintl_ngettext(__msgid1, __msgid2, __n);\n\t}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define ngettext libintl_ngettext\n#endif\n\textern LIBINTL_DLL_EXPORTED char *ngettext(const char *__msgid1, const char *__msgid2,\n\t\tunsigned long int __n)\n\t\t_INTL_ASM(libintl_ngettext)\n\t\t_INTL_MAY_RETURN_STRING_ARG(1) _INTL_MAY_RETURN_STRING_ARG(2);\n#endif\n\n\t/* Similar to `dgettext' but select the plural form corresponding to the\n\tnumber N.  */\n#ifdef _INTL_REDIRECT_INLINE\n\textern LIBINTL_DLL_EXPORTED char *libintl_dngettext(const char *__domainname, const char *__msgid1,\n\t\tconst char *__msgid2, unsigned long int __n)\n\t\t_INTL_MAY_RETURN_STRING_ARG(2) _INTL_MAY_RETURN_STRING_ARG(3);\n\tstatic inline char *dngettext(const char *__domainname, const char *__msgid1,\n\t\tconst char *__msgid2, unsigned long int __n)\n\t{\n\t\treturn libintl_dngettext(__domainname, __msgid1, __msgid2, __n);\n\t}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dngettext libintl_dngettext\n#endif\n\textern LIBINTL_DLL_EXPORTED char *dngettext(const char *__domainname,\n\t\tconst char *__msgid1, const char *__msgid2,\n\t\tunsigned long int __n)\n\t\t_INTL_ASM(libintl_dngettext)\n\t\t_INTL_MAY_RETURN_STRING_ARG(2) _INTL_MAY_RETURN_STRING_ARG(3);\n#endif\n\n\t/* Similar to `dcgettext' but select the plural form corresponding to the\n\tnumber N.  */\n#ifdef _INTL_REDIRECT_INLINE\n\textern LIBINTL_DLL_EXPORTED char *libintl_dcngettext(const char *__domainname,\n\t\tconst char *__msgid1, const char *__msgid2,\n\t\tunsigned long int __n, int __category)\n\t\t_INTL_MAY_RETURN_STRING_ARG(2) _INTL_MAY_RETURN_STRING_ARG(3);\n\tstatic inline char *dcngettext(const char *__domainname,\n\t\tconst char *__msgid1, const char *__msgid2,\n\t\tunsigned long int __n, int __category)\n\t{\n\t\treturn libintl_dcngettext(__domainname, __msgid1, __msgid2, __n, __category);\n\t}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dcngettext libintl_dcngettext\n#endif\n\textern LIBINTL_DLL_EXPORTED char *dcngettext(const char *__domainname,\n\t\tconst char *__msgid1, const char *__msgid2,\n\t\tunsigned long int __n, int __category)\n\t\t_INTL_ASM(libintl_dcngettext)\n\t\t_INTL_MAY_RETURN_STRING_ARG(2) _INTL_MAY_RETURN_STRING_ARG(3);\n#endif\n\n\n\n\t/* Set the current default message catalog to DOMAINNAME.\n\tIf DOMAINNAME is null, return the current default.\n\tIf DOMAINNAME is \"\", reset to the default of \"messages\".  */\n#ifdef _INTL_REDIRECT_INLINE\n\textern LIBINTL_DLL_EXPORTED char *libintl_textdomain(const char *__domainname);\n\tstatic inline char *textdomain(const char *__domainname)\n\t{\n\t\treturn libintl_textdomain(__domainname);\n\t}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define textdomain libintl_textdomain\n#endif\n\textern LIBINTL_DLL_EXPORTED char *textdomain(const char *__domainname)\n\t\t_INTL_ASM(libintl_textdomain);\n#endif\n\n\t/* Specify that the DOMAINNAME message catalog will be found\n\tin DIRNAME rather than in the system locale data base.  */\n#ifdef _INTL_REDIRECT_INLINE\n\textern LIBINTL_DLL_EXPORTED char *libintl_bindtextdomain(const char *__domainname,\n\t\tconst char *__dirname);\n\tstatic inline char *bindtextdomain(const char *__domainname,\n\t\tconst char *__dirname)\n\t{\n\t\treturn libintl_bindtextdomain(__domainname, __dirname);\n\t}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define bindtextdomain libintl_bindtextdomain\n#endif\n\textern LIBINTL_DLL_EXPORTED char *bindtextdomain(const char *__domainname, const char *__dirname)\n\t\t_INTL_ASM(libintl_bindtextdomain);\n#endif\n\n\t/* Specify the character encoding in which the messages from the\n\tDOMAINNAME message catalog will be returned.  */\n#ifdef _INTL_REDIRECT_INLINE\n\textern LIBINTL_DLL_EXPORTED char *libintl_bind_textdomain_codeset(const char *__domainname,\n\t\tconst char *__codeset);\n\tstatic inline char *bind_textdomain_codeset(const char *__domainname,\n\t\tconst char *__codeset)\n\t{\n\t\treturn libintl_bind_textdomain_codeset(__domainname, __codeset);\n\t}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define bind_textdomain_codeset libintl_bind_textdomain_codeset\n#endif\n\textern LIBINTL_DLL_EXPORTED char *bind_textdomain_codeset(const char *__domainname,\n\t\tconst char *__codeset)\n\t\t_INTL_ASM(libintl_bind_textdomain_codeset);\n#endif\n\n\n\n\t/* Support for format strings with positions in *printf(), following the\n\tPOSIX/XSI specification.\n\tNote: These replacements for the *printf() functions are visible only\n\tin source files that #include <libintl.h> or #include \"gettext.h\".\n\tPackages that use *printf() in source files that don't refer to _()\n\tor gettext() but for which the format string could be the return value\n\tof _() or gettext() need to add this #include.  Oh well.  */\n\n#if !0\n\n#include <stdio.h>\n#include <stddef.h>\n\n\t/* Get va_list.  */\n#if __STDC__ || defined __cplusplus || defined _MSC_VER\n# include <stdarg.h>\n#else\n# include <varargs.h>\n#endif\n\n#undef fprintf\n#define fprintf libintl_fprintf\n\textern LIBINTL_DLL_EXPORTED int fprintf(FILE *, const char *, ...);\n#undef vfprintf\n#define vfprintf libintl_vfprintf\n\textern LIBINTL_DLL_EXPORTED int vfprintf(FILE *, const char *, va_list);\n\n#undef printf\n#if defined __NetBSD__ || defined __BEOS__ || defined __CYGWIN__ || defined __MINGW32__\n\t/* Don't break __attribute__((format(printf,M,N))).\n\tThis redefinition is only possible because the libc in NetBSD, Cygwin,\n\tmingw does not have a function __printf__.  */\n# define libintl_printf __printf__\n#endif\n#define printf libintl_printf\n\textern LIBINTL_DLL_EXPORTED int printf(const char *, ...);\n#undef vprintf\n#define vprintf libintl_vprintf\n\textern LIBINTL_DLL_EXPORTED int vprintf(const char *, va_list);\n\n#undef sprintf\n#define sprintf libintl_sprintf\n\textern LIBINTL_DLL_EXPORTED int sprintf(char *, const char *, ...);\n#undef vsprintf\n#define vsprintf libintl_vsprintf\n\textern LIBINTL_DLL_EXPORTED int vsprintf(char *, const char *, va_list);\n\n#if 0\n\n#undef snprintf\n#define snprintf libintl_snprintf\n\textern LIBINTL_DLL_EXPORTED int snprintf(char *, size_t, const char *, ...);\n#undef vsnprintf\n#define vsnprintf libintl_vsnprintf\n\textern LIBINTL_DLL_EXPORTED int vsnprintf(char *, size_t, const char *, va_list);\n\n#endif\n\n#if 0\n\n#undef asprintf\n#define asprintf libintl_asprintf\n\textern LIBINTL_DLL_EXPORTED int asprintf(char **, const char *, ...);\n#undef vasprintf\n#define vasprintf libintl_vasprintf\n\textern LIBINTL_DLL_EXPORTED int vasprintf(char **, const char *, va_list);\n\n#endif\n\n#if 0\n\n#undef fwprintf\n#define fwprintf libintl_fwprintf\n\textern LIBINTL_DLL_EXPORTED int fwprintf(FILE *, const wchar_t *, ...);\n#undef vfwprintf\n#define vfwprintf libintl_vfwprintf\n\textern LIBINTL_DLL_EXPORTED int vfwprintf(FILE *, const wchar_t *, va_list);\n\n#undef wprintf\n#define wprintf libintl_wprintf\n\textern LIBINTL_DLL_EXPORTED int wprintf(const wchar_t *, ...);\n#undef vwprintf\n#define vwprintf libintl_vwprintf\n\textern LIBINTL_DLL_EXPORTED int vwprintf(const wchar_t *, va_list);\n\n#undef swprintf\n#define swprintf libintl_swprintf\n\textern LIBINTL_DLL_EXPORTED int swprintf(wchar_t *, size_t, const wchar_t *, ...);\n#undef vswprintf\n#define vswprintf libintl_vswprintf\n\textern LIBINTL_DLL_EXPORTED int vswprintf(wchar_t *, size_t, const wchar_t *, va_list);\n\n#endif\n\n#endif\n\n\n\t/* Support for relocatable packages.  */\n\n\t/* Sets the original and the current installation prefix of the package.\n\tRelocation simply replaces a pathname starting with the original prefix\n\tby the corresponding pathname with the current prefix instead.  Both\n\tprefixes should be directory names without trailing slash (i.e. use \"\"\n\tinstead of \"/\").  */\n#define libintl_set_relocation_prefix libintl_set_relocation_prefix\n\textern LIBINTL_DLL_EXPORTED void\n\t\tlibintl_set_relocation_prefix(const char *orig_prefix,\n\t\t\tconst char *curr_prefix);\n\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* libintl.h */",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/tests/common/TestRunner/test_module_loader.cpp": "/***\n * Copyright (C) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.\n *\n * =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n */\n#ifdef WIN32\n#include <Windows.h>\n#else\n#include \"dlfcn.h\"\n#include <boost/filesystem.hpp>\n#endif\n\n#include \"test_module_loader.h\"\n#include <iostream>\n\nclass test_module\n{\npublic:\n    test_module(const std::string& dllName) : m_dllName(dllName), m_handle(nullptr) {}\n\n    GetTestsFunc get_test_list()\n    {\n#if defined(_WIN32)\n        return (GetTestsFunc)GetProcAddress(m_handle, \"GetTestList\");\n#else\n        auto ptr = dlsym(m_handle, \"GetTestList\");\n        if (ptr == nullptr)\n        {\n            std::cerr << \"couldn't find GetTestList\"\n                      <<\n#ifdef __APPLE__\n                \" \" << dlerror() <<\n#endif\n                std::endl;\n        }\n        return (GetTestsFunc)ptr;\n#endif\n    }\n\n    unsigned long load()\n    {\n        if (m_handle == nullptr)\n        {\n#if defined(_WIN32)\n            // Make sure ends in .dll\n            if (*(m_dllName.end() - 1) != 'l' || *(m_dllName.end() - 2) != 'l' || *(m_dllName.end() - 3) != 'd' ||\n                *(m_dllName.end() - 4) != '.')\n            {\n                return (unsigned long)-1;\n            }\n            m_handle = LoadLibraryA(m_dllName.c_str());\n            if (m_handle == nullptr)\n            {\n                return GetLastError();\n            }\n            return 0;\n#else\n#ifdef __APPLE__\n            auto exe_directory = getcwd(nullptr, 0);\n            auto path = std::string(exe_directory) + \"/\" + m_dllName;\n            free(exe_directory);\n#else\n            auto path = boost::filesystem::initial_path().string() + \"/\" + m_dllName;\n#endif\n\n            m_handle = dlopen(path.c_str(), RTLD_LAZY | RTLD_GLOBAL);\n            if (m_handle == nullptr)\n            {\n                std::cerr << std::string(dlerror()) << std::endl;\n                return -1;\n            }\n            return 0;\n#endif\n        }\n        return 0;\n    }\n\n    unsigned long unload()\n    {\n        if (m_handle != nullptr)\n        {\n#if defined(_WIN32)\n            if (!FreeLibrary(m_handle))\n            {\n                return GetLastError();\n            }\n            m_handle = nullptr;\n            return 0;\n#else\n            if (dlclose(m_handle) != 0)\n            {\n                std::cerr << std::string(dlerror()) << std::endl;\n                return -1;\n            }\n            m_handle = nullptr;\n            return 0;\n#endif\n        }\n        return 0;\n    }\n\nprivate:\n    const std::string m_dllName;\n\n#if defined(_WIN32)\n    HMODULE m_handle;\n#else\n    void* m_handle;\n#endif\n\n    test_module(const test_module&) = delete;\n    test_module& operator=(const test_module&) = delete;\n};\n\ntest_module_loader::test_module_loader() {}\n\ntest_module_loader::~test_module_loader()\n{\n    for (auto iter = m_modules.begin(); iter != m_modules.end(); ++iter)\n    {\n        iter->second->unload();\n        delete iter->second;\n    }\n}\n\nunsigned long test_module_loader::load(const std::string& dllName)\n{\n    // Check if the module is already loaded.\n    if (m_modules.find(dllName) != m_modules.end())\n    {\n        return 0;\n    }\n\n    test_module* pModule;\n    pModule = new test_module(dllName);\n\n    // Load dll.\n    const unsigned long error_code = pModule->load();\n    if (error_code != 0)\n    {\n        delete pModule;\n        return error_code;\n    }\n    else\n    {\n        m_modules[dllName] = pModule;\n    }\n    return 0;\n}\n\nUnitTest::TestList g_list;\n\nUnitTest::TestList& test_module_loader::get_test_list(const std::string& dllName)\n{\n    GetTestsFunc getTestsFunc = m_modules[dllName]->get_test_list();\n\n    // If there is no GetTestList function then it must be a dll without any tests.\n    // Simply return an empty TestList.\n    if (getTestsFunc == nullptr)\n    {\n        return g_list;\n    }\n\n    return getTestsFunc();\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/ThirdPartyNotices.txt",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/vcpkg/ports/irrlicht/fix-encoding.patch",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/vcpkg/ports/devil/0001_fix-encoding.patch",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/vcpkg/ports/opencsg/illegal_char.patch",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/.git/objects/pack/pack-b090f77aad40a5578f5625bb916f3816121ce535.pack",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/.git/objects/pack/pack-b090f77aad40a5578f5625bb916f3816121ce535.idx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/.git/modules/vcpkg/objects/pack/pack-384f85c8b6b19c6b2a8a3bf25cad204a3041b8fd.pack",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/.git/modules/vcpkg/objects/pack/pack-384f85c8b6b19c6b2a8a3bf25cad204a3041b8fd.idx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/.git/modules/websocketpp/objects/pack/pack-ccc028fd7d9b6e3ea1f6ac02a52f039c0addf7b6.idx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/.git/modules/websocketpp/objects/pack/pack-ccc028fd7d9b6e3ea1f6ac02a52f039c0addf7b6.pack",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/libs/websocketpp/test/http/perf.out",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/libs/websocketpp/test/http/a.out",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/libs/websocketpp/test/http/test.out",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/src/utilities/Resource.rc",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/tests/functional/misc/atl_headers/header_test.rc",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/FacebookDemo/FacebookDemo_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/FacebookDemo/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/FacebookDemo/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/FacebookDemo/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/FacebookDemo/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/BlackJack/BlackJack_UIClient/BlackJack_UIClient_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Cards.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/BlackJack/BlackJack_UIClient/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/OAuth2Live/OAuth2Live_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/OAuth2Live/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/OAuth2Live/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/OAuth2Live/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/OAuth2Live/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/WindowsLiveAuth/WindowsLiveAuth_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/WindowsLiveAuth/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/WindowsLiveAuth/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/WindowsLiveAuth/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/WindowsLiveAuth/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/CasaLens/image/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/CasaLens/image/bing-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/CasaLens/image/wall.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/CasaLens/CasaLens141/image/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/CasaLens/CasaLens141/image/bing-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cpprestsdk-2.10.16-es2jp6wanvua275b4l5nvykhxvxdvwfd/spack-src/Release/samples/CasaLens/CasaLens141/image/wall.jpg"
    ],
    "total_files": 3943
}