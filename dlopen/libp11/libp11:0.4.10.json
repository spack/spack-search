{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-libp11-0.4.10-6l5a322aiqzwq7pr4e2e4qoxtnbil3d7/spack-src/configure.ac": "dnl -*- mode: m4; -*-\n\nAC_PREREQ(2.60)\n\n# When bumping versions see also the LT vesion numbers below.\ndefine([PACKAGE_VERSION_MAJOR], [0])\ndefine([PACKAGE_VERSION_MINOR], [4])\ndefine([PACKAGE_VERSION_FIX], [10])\ndefine([PACKAGE_SUFFIX], [])\n\nAC_INIT([libp11],[PACKAGE_VERSION_MAJOR.PACKAGE_VERSION_MINOR.PACKAGE_VERSION_FIX[]PACKAGE_SUFFIX])\nAC_CONFIG_AUX_DIR([.])\nAC_CONFIG_HEADERS([src/config.h])\nAC_CONFIG_MACRO_DIR([m4])\nAM_INIT_AUTOMAKE([subdir-objects])\n\nLIBP11_VERSION_MAJOR=\"PACKAGE_VERSION_MAJOR\"\nLIBP11_VERSION_MINOR=\"PACKAGE_VERSION_MINOR\"\nLIBP11_VERSION_FIX=\"PACKAGE_VERSION_FIX\"\n\nAC_CONFIG_SRCDIR([src/libp11.h])\n\n# silent build by default\nifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nAC_CANONICAL_HOST\nAC_PROG_CC\nPKG_PROG_PKG_CONFIG\nAC_C_BIGENDIAN\n\n# we need to set our soversion based on openssl's soversion to avoid\n# issues with applications linking to new openssl, old libp11, and vice versa\ncase \"`$PKG_CONFIG --modversion --silence-errors libcrypto || \\\n\t$PKG_CONFIG --modversion openssl`\" in\n\t1.1.*) # Predicted engines directory prefix for OpenSSL 1.1.x\n\t    LIBP11_LT_OLDEST=\"3\"\n\t    debian_ssl_prefix=\"openssl-1.1.0\";;\n\t1.0.*) # Engines directory prefix for OpenSSL 1.0.x\n\t    LIBP11_LT_OLDEST=\"2\"\n\t    debian_ssl_prefix=\"openssl-1.0.0\";;\n\t*) # Engines directory prefix for OpenSSL 0.9.x\n\t    LIBP11_LT_OLDEST=\"2\"\n\t    debian_ssl_prefix=\"ssl\";;\nesac\n\n\n# LT Version numbers, remember to change them just *before* a release.\n#   (Code changed:                      REVISION++)\n#   (Oldest interface removed:          OLDEST++)\n#   (Interfaces added:                  CURRENT++, REVISION=0)\n#\n# Note that at this moment we tie the oldest (soname) version to\n# the openssl version we link to. If the ABI is broken on a later\n# release, we should either stick to supporting a single openssl ABI\n# or bump the LT_OLDEST version sufficiently to avoid clashes.\nLIBP11_LT_REVISION=\"2\"\nLIBP11_LT_CURRENT=\"7\"\nLIBP11_LT_AGE=\"$((${LIBP11_LT_CURRENT}-${LIBP11_LT_OLDEST}))\"\n\ngl_LD_VERSION_SCRIPT\n\nAC_ARG_WITH(\n\t[cygwin-native],\n\t[AS_HELP_STRING([--with-cygwin-native],[compile native win32])],\n\t,\n\t[with_cygwin_native=\"no\"]\n)\n\ndnl Check for some target-specific stuff\ntest -z \"${WIN32}\" && WIN32=\"no\"\ntest -z \"${CYGWIN}\" && CYGWIN=\"no\"\ncase \"${host}\" in\n\t*-mingw*|*-winnt*)\n\t\tWIN32=\"yes\"\n\t\tCPPFLAGS=\"${CPPFLAGS} -DWIN32_LEAN_AND_MEAN\"\n\t\tWIN_LIBPREFIX=\"lib\"\n\t;;\n\t*-cygwin*)\n\t\tAC_MSG_CHECKING([cygwin mode to use])\n\t\tCYGWIN=\"yes\"\n\t\tif test \"${with_cygwin_native}\" = \"yes\"; then\n\t\t\tAC_MSG_RESULT([Using native win32])\n\t\t\tCPPFLAGS=\"${CPPFLAGS} -DWIN32_LEAN_AND_MEAN\"\n\t\t\tCFLAGS=\"${CFLAGS} -mno-cygwin\"\n\t\t\tWIN32=\"yes\"\n\t\telse\n\t\t\tAC_MSG_RESULT([Using cygwin])\n\t\t\tCPPFLAGS=\"${CPPFLAGS} -DCRYPTOKI_FORCE_WIN32\"\n\t\t\tWIN_LIBPREFIX=\"cyg\"\n\t\t\tAC_DEFINE([USE_CYGWIN], [1], [Define if you are on Cygwin])\n\t\tfi\n\t;;\nesac\n\nAC_ARG_ENABLE(\n\t[strict],\n\t[AS_HELP_STRING([--enable-strict],[enable strict compile mode @<:@disabled@:>@])],\n\t,\n\t[enable_strict=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[pedantic],\n\t[AS_HELP_STRING([--enable-pedantic],[enable pedantic compile mode @<:@disabled@:>@])],\n\t,\n\t[enable_pedantic=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[api-doc],\n\t[AS_HELP_STRING([--enable-api-doc],[enable generation and installation of API documents @<:@disabled@:>@])],\n\t,\n\t[enable_api_doc=\"no\"]\n)\n\nAC_ARG_WITH(\n\t[apidocdir],\n\t[AS_HELP_STRING([--with-apidocdir],[put API documents at this directory @<:@HTMLDIR/api@:>@])],\n\t[apidocdir=\"${with_apidocdir}\"],\n\t[apidocdir=\"\\$(htmldir)/api\"]\n)\n\nAC_ARG_WITH(\n\t[enginesdir],\n\t[AS_HELP_STRING([--with-enginesdir], [OpenSSL engines directory])],\n\t[enginesexecdir=\"${withval}\"],\n\t[\n\t\tenginesexecdir=\"`$PKG_CONFIG --variable=enginesdir --silence-errors libcrypto`\"\n\t\tif test \"${enginesexecdir}\" = \"\"; then\n\t\t    libcryptodir=\"`$PKG_CONFIG --variable=libdir --silence-errors libcrypto || \\\n\t\t\t$PKG_CONFIG --variable=libdir openssl`\"\n\t\t    if test -d \"$libcryptodir/$debian_ssl_prefix/engines\"; then\n\t\t\t# Debian-based OpenSSL package (for example Ubuntu)\n\t\t\tenginesexecdir=\"$libcryptodir/$debian_ssl_prefix/engines\"\n\t\t    else # Default OpenSSL engines directory\n\t\t\tenginesexecdir=\"$libcryptodir/engines\"\n\t\t    fi\n\t\t    if test \"${prefix}\" != \"NONE\" -o \"${exec_prefix}\" != \"NONE\"; then\n\t\t\t# Override the autodetected value with the default\n\t\t\tenginesexecdir=\"\\$(libdir)\"\n\t\t    fi\n\t\tfi\n\t]\n)\n\nAC_ARG_WITH(\n\t[pkcs11-module],\n\t[AS_HELP_STRING([--with-pkcs11-module], [default PKCS11 module])],\n\t[pkcs11_module=\"${withval}\"],\n\t[pkcs11_module=\"`$PKG_CONFIG --variable=proxy_module --silence-errors p11-kit-1`\"])\n\ndnl Checks for programs.\nAC_PROG_CPP\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_PROG_MKDIR_P\nAC_PROG_SED\nAC_PROG_MAKE_SET\n\ndnl Add libtool support.\nifdef(\n\t[LT_INIT],\n\t[\n\t\tLT_INIT([win32-dll])\n\t\tLT_LANG([Windows Resource])\n\t],\n\t[\n\t\tAC_LIBTOOL_WIN32_DLL\n\t\tAC_LIBTOOL_RC\n\t\tAC_PROG_LIBTOOL\n\t]\n)\n\ndnl Checks for header files.\nAC_HEADER_STDC\nAC_HEADER_SYS_WAIT\nAC_CHECK_HEADERS([ \\\n\terrno.h fcntl.h malloc.h stdlib.h \\\n\tinttypes.h string.h strings.h sys/time.h \\\n\tunistd.h locale.h getopt.h dlfcn.h utmp.h \\\n])\n\nAC_ARG_VAR([DOXYGEN], [doxygen utility])\nAC_CHECK_PROGS([DOXYGEN],[doxygen])\ntest \"${enable_api_doc}\" = \"yes\" -a -z \"${DOXYGEN}\" && AC_MSG_ERROR([doxygen is required for API doc])\n\nif test \"${WIN32}\" != \"yes\"; then\n\tAC_SEARCH_LIBS(\n\t\t[dlopen],\n\t\t[dl],\n\t\t,\n\t\t[AC_MSG_ERROR([dlopen required])]\n\t)\n\tAC_CHECK_FUNCS([__register_atfork],,)\nfi\n\nPKG_CHECK_MODULES(\n\t[OPENSSL],\n\t[libcrypto >= 0.9.8],\n\t,\n\t[AC_MSG_ERROR([libcrypto >= 0.9.8 is required])]\n)\n\nif test -n \"${pkcs11_module}\"; then\n\tAC_DEFINE_UNQUOTED(\n\t\t[DEFAULT_PKCS11_MODULE],\n\t\t\"${pkcs11_module}\",\n\t\t[Default PKCS#11 module.])\nfi\n\npkgconfigdir=\"\\$(libdir)/pkgconfig\"\n\nAC_SUBST([pkgconfigdir])\nAC_SUBST([apidocdir])\nAC_SUBST([enginesexecdir])\nAC_SUBST([LIBP11_VERSION_MAJOR])\nAC_SUBST([LIBP11_VERSION_MINOR])\nAC_SUBST([LIBP11_VERSION_FIX])\nAC_SUBST([LIBP11_LT_CURRENT])\nAC_SUBST([LIBP11_LT_REVISION])\nAC_SUBST([LIBP11_LT_AGE])\nAC_SUBST([LIBP11_LT_OLDEST])\nAC_SUBST([WIN_LIBPREFIX])\nAC_SUBST([SHARED_EXT], $(eval echo \"${shrext_cmds}\"))\n\nAM_CONDITIONAL([WIN32], [test \"${WIN32}\" = \"yes\"])\nAM_CONDITIONAL([CYGWIN], [test \"${CYGWIN}\" = \"yes\"])\nAM_CONDITIONAL([ENABLE_API_DOC], [test \"${enable_api_doc}\" = \"yes\"])\n\nif test \"${enable_pedantic}\" = \"yes\"; then\n\tenable_strict=\"yes\";\n\tCFLAGS=\"${CFLAGS} -pedantic\"\nfi\nif test \"${enable_strict}\" = \"yes\"; then\n\tCFLAGS=\"${CFLAGS} -Wall -Wextra\"\nfi\n\nAC_MSG_CHECKING([if libtool needs -no-undefined flag to build shared libraries])\ncase \"$host_os\" in\n  cygwin*|msys*|mingw*)\n    ## Add in the -no-undefined flag to LDFLAGS for libtool.\n    AC_MSG_RESULT([yes])\n    LDFLAGS=\"$LDFLAGS -no-undefined\"\n    ;;\n  *)\n    ## Don't add in anything.\n    AC_MSG_RESULT([no])\n    ;;\nesac\n\nAC_CONFIG_FILES([\n\tMakefile\n\tsrc/Makefile\n\tsrc/libp11.pc\n\tsrc/libp11.rc\n\tsrc/pkcs11.rc\n\tdoc/Makefile\n\tdoc/doxygen.conf\n\texamples/Makefile\n\ttests/Makefile\n])\nAC_OUTPUT\n\nAC_MSG_NOTICE([creating src/libp11.map])\n# We do it *after* the src directory is created\nrm -f src/libp11.map\necho \"LIBP11_${LIBP11_LT_OLDEST}\" >src/libp11.map\necho \"{\" >>src/libp11.map\necho \"global:\" >>src/libp11.map\ntr '\\n' ';' <$srcdir/src/libp11.exports >>src/libp11.map\necho \"\" >>src/libp11.map\necho \"local:\" >>src/libp11.map\necho '*;' >>src/libp11.map\necho \"};\" >>src/libp11.map\nchmod ugo-w src/libp11.map\n\ncat <<EOF\n\nlibp11 has been configured with the following options:\n\nVersion:                 ${PACKAGE_VERSION}\nlibp11 directory:        $(eval eval eval echo \"${libdir}\")\nEngine directory:        ${enginesexecdir}\nDefault PKCS11 module:   ${pkcs11_module}\nAPI doc support:         ${enable_api_doc}\n\nHost:                    ${host}\nCompiler:                ${CC}\nPreprocessor flags:      ${CPPFLAGS}\nCompiler flags:          ${CFLAGS}\nLinker flags:            ${LDFLAGS}\nLibraries:               ${LIBS}\n\nOPENSSL_CFLAGS:          ${OPENSSL_CFLAGS}\nOPENSSL_LIBS:            ${OPENSSL_LIBS}\n\nEOF\n\n# vim: set noexpandtab:\n",
        "/tmp/vanessa/spack-stage/spack-stage-libp11-0.4.10-6l5a322aiqzwq7pr4e2e4qoxtnbil3d7/spack-src/src/libpkcs11.c": "/* libp11, a simple layer on to of PKCS#11 API\n * Copyright (C) 2005 Olaf Kirch <okir@lst.de>\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA\n */\n\n/*\n * Convenience pkcs11 library that can be linked into an application,\n * and will bind to a specific pkcs11 module.\n *\n * Copyright (C) 2002  Olaf Kirch <okir@lst.de>\n */\n\n#include \"libp11-int.h\"\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#ifdef _WIN32\n#include <windows.h>\n#else\n#include <dlfcn.h>\n#endif\n\n#define MAGIC\t\t\t0xd00bed00\n\nstruct sc_pkcs11_module {\n\tunsigned int _magic;\n\tvoid *handle;\n};\ntypedef struct sc_pkcs11_module sc_pkcs11_module_t;\n\n/*\n * Load a module - this will load the shared object, call\n * C_Initialize, and get the list of function pointers\n */\nvoid *\nC_LoadModule(const char *mspec, CK_FUNCTION_LIST_PTR_PTR funcs)\n{\n\tsc_pkcs11_module_t *mod;\n\tCK_RV (*c_get_function_list)(CK_FUNCTION_LIST_PTR_PTR);\n\tint rv;\n\n\tif (mspec == NULL)\n\t\treturn NULL;\n\n\tmod = OPENSSL_malloc(sizeof(sc_pkcs11_module_t));\n\tif (mod == NULL)\n\t\treturn NULL;\n\tmemset(mod, 0, sizeof(sc_pkcs11_module_t));\n\tmod->_magic = MAGIC;\n\n#ifdef WIN32\n\tmod->handle = LoadLibraryA(mspec);\n#else\n\tmod->handle = dlopen(mspec, RTLD_LAZY | RTLD_LOCAL);\n#endif\n\n\tif (mod->handle == NULL) {\n#ifndef WIN32\n\t\tfprintf(stderr, \"%s\\n\", dlerror());\n#endif\n\t\tgoto failed;\n\t}\n\n#ifdef WIN32\n\tc_get_function_list = (CK_C_GetFunctionList)\n\t\tGetProcAddress(mod->handle, \"C_GetFunctionList\");\n#else\n\t{\n\t\t/*\n\t\t * Make compiler happy!\n\t\t */\n\t\tvoid *p = dlsym(mod->handle, \"C_GetFunctionList\");\n\t\tmemmove(&c_get_function_list, &p, sizeof(void *));\n\t}\n#endif\n\n\tif (c_get_function_list == NULL) {\n#ifndef WIN32\n\t\tfprintf(stderr, \"%s\\n\", dlerror());\n#endif\n\t\tgoto failed;\n\t}\n\trv = c_get_function_list(funcs);\n\tif (rv == CKR_OK)\n\t\treturn mod;\n\nfailed:\n\tC_UnloadModule((void *) mod);\n\treturn NULL;\n}\n\n/*\n * Unload a pkcs11 module.\n * The calling application is responsible for cleaning up\n * and calling C_Finalize\n */\nCK_RV\nC_UnloadModule(void *module)\n{\n\tsc_pkcs11_module_t *mod = (sc_pkcs11_module_t *) module;\n\n\tif (mod == NULL || mod->_magic != MAGIC)\n\t\treturn CKR_ARGUMENTS_BAD;\n\n\tif (mod->handle) {\n#ifdef WIN32\n\t\tFreeLibrary(mod->handle);\n#else\n\t\tdlclose(mod->handle);\n#endif\n\t}\n\n\tmemset(mod, 0, sizeof(sc_pkcs11_module_t));\n\tOPENSSL_free(mod);\n\n\treturn CKR_OK;\n}\n\n/* vim: set noexpandtab: */\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-libp11-0.4.10-6l5a322aiqzwq7pr4e2e4qoxtnbil3d7/spack-src/tests/rsa-pubkey.der",
        "/tmp/vanessa/spack-stage/spack-stage-libp11-0.4.10-6l5a322aiqzwq7pr4e2e4qoxtnbil3d7/spack-src/tests/rsa-cert.der",
        "/tmp/vanessa/spack-stage/spack-stage-libp11-0.4.10-6l5a322aiqzwq7pr4e2e4qoxtnbil3d7/spack-src/tests/ec-pubkey.der",
        "/tmp/vanessa/spack-stage/spack-stage-libp11-0.4.10-6l5a322aiqzwq7pr4e2e4qoxtnbil3d7/spack-src/tests/ec-cert.der",
        "/tmp/vanessa/spack-stage/spack-stage-libp11-0.4.10-6l5a322aiqzwq7pr4e2e4qoxtnbil3d7/spack-src/tests/rsa-prvkey.der",
        "/tmp/vanessa/spack-stage/spack-stage-libp11-0.4.10-6l5a322aiqzwq7pr4e2e4qoxtnbil3d7/spack-src/tests/ec-prvkey.der",
        "/tmp/vanessa/spack-stage/spack-stage-libp11-0.4.10-6l5a322aiqzwq7pr4e2e4qoxtnbil3d7/spack-src/doc/opensc-logo.gif"
    ],
    "total_files": 85
}