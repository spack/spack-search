{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/configure.ac": "################################################################################\n#                           Standard Stuff\n################################################################################\nAC_INIT([MOAB],[5.0.1],[moab-dev@mcs.anl.gov],[moab],[http://sigma.mcs.anl.gov])\nAC_CONFIG_SRCDIR([moab.make.in])\nAC_CONFIG_SRCDIR([config/MOABConfig.cmake.in])\nAC_CONFIG_SRCDIR([examples/makefile.config.in])\nAC_CONFIG_MACRO_DIR([config])\nAC_CONFIG_AUX_DIR([config])\nAC_CANONICAL_TARGET\nm4_ifdef([AM_SILENT_RULES],\n          [m4_define([mb_am_oldtests], [[color-tests] [parallel-tests]])],\n          [m4_define([mb_am_oldtests], [])])\nAM_INIT_AUTOMAKE([subdir-objects] mb_am_oldtests)\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nAC_CHECK_PROG( [SED], [sed], [sed], [true] )\n\n# Infer the source directory as the path to the ./configure script\nproject_topsrcdir=`dirname $0`\nproject_topbuilddir=\"$PWD\"\nUSER_CONFIGURE_CMD=\"$0 $ac_configure_args\"\n\n################################################################################\n#                           Compilers\n################################################################################\nINITIALIZE_EXTERNAL_PACKAGES\n\nMB_CPPFLAGS=\"\"\nMB_DEFS=\"\"\n\nAC_ARG_ENABLE( [devmode],\n[AS_HELP_STRING([--enable-devmode],[Enable (advanced) developer mode in the build (not recommended for users).])],\n[enable_devmode=$enableval],\n[enable_devmode=no] )\nAM_CONDITIONAL(DEVELOPER_MODE,[test \"x$enable_devmode\" != \"xno\"])\n\nENABLE_FORTRAN=no\nAC_ARG_ENABLE([fortran],\n              [AS_HELP_STRING([--disable-fortran], [Disable Fortran support and name mangling in ITAPS/MBCN C headers])])\n\nif (test \"x$enable_fortran\" != \"xno\"); then\n  ENABLE_FORTRAN=yes\nfi\nAC_SUBST(ENABLE_FORTRAN)\nDISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-fortran=$ENABLE_FORTRAN\"\n\n# Find out the appropriate compiler based on user options\nFATHOM_CHECK_COMPILERS([yes],[yes],[$ENABLE_FORTRAN])\nAM_CONDITIONAL(PARALLEL,[test \"x$enablempi\" != \"xno\"])\nAM_CONDITIONAL(ENABLE_FORTRAN,[test \"x$ENABLE_FORTRAN\" != \"xno\"])\nMPI_DIR=$WITH_MPI\nAC_SUBST(MPI_DIR)\nAC_SUBST(enablempi)\n\n# Invoke and find all necessary flags for C, C++, FC\nFATHOM_COMPILER_FLAGS([yes],[yes],[$ENABLE_FORTRAN])\n\nAC_PROG_LN_S\nAC_PROG_MAKE_SET\nAC_PROG_MKDIR_P\nAC_DISABLE_SHARED\nAC_SUBST(enable_static)\nAC_SUBST(enable_shared)\n\n# All language options initialized -- now call\n# libtool initialization\n# AC_PROG_LIBTOOL is deprecated\nLT_INIT([dlopen])\nLT_LANG([C++])\n\nAC_C_BIGENDIAN\n\nAC_CHECK_PROG([ZCAT],[gunzip],[gunzip -c],[])\nAC_CHECK_PROG([ZCAT],[gzip],[gzip -cd],[])\nAC_CHECK_PROG([ZCAT],[zcat],[zcat],[])\nif test \"x\" = \"x$ZCAT\"; then\n  AC_MSG_WARN([[Cannot run tests: no way to uncompress input files.]])\nfi\nAC_SUBST([ZCAT])\nAM_CONDITIONAL([HAVE_ZCAT],[test \"x\" = \"x$ZCAT\"])\n\nFATHOM_TEMPLATE_SPECIALIZATION\nFATHOM_TEMPLATE_FUNC_SPECIALIZATION\nMB_DEFS=\"$MB_DEFS $TEMPLATE_SPECIALIZATION $TEMPLATE_FUNC_SPECIALIZATION\"\n\nFATHOM_CHECK_CXX_WORKS([], [AC_MSG_ERROR([Cannot build without C++ compiler])])\n\n################################################################################\n#            Check for need for extra flags to support cray pointers\n################################################################################\nif test \"xyes\" = \"x$ENABLE_FORTRAN\" && test \"x\" != \"x$F77\"; then\n  PAC_PROG_F77_CRAY_POINTER([\n    FFLAGS=\"$FFLAGS $CRAYPTR_FFLAGS\"\n  ])\nfi\n\nif test \"xyes\" = \"x$ENABLE_FORTRAN\" && test \"x\" != \"x$FC\"; then\n  PAC_PROG_FC_CRAY_POINTER([\n    FCFLAGS=\"$FCFLAGS $CRAYPTR_FCFLAGS\"\n  ])\nfi\n\n################################################################################\n#                           Basic Portability Stuff\n################################################################################\nAC_CHECK_FUNC([vsnprintf], [AC_DEFINE([HAVE_VSNPRINTF],[1],[Define if vsnprintf is available.])] )\nAC_CHECK_FUNC([vsprintf],  [AC_DEFINE([HAVE_VSPRINTF], [1],[Define if vsprintf is available.])] )\nAC_CHECK_FUNC([clock],     [AC_DEFINE([HAVE_CLOCK],    [1],[Define if clock is available.])] )\nAC_CHECK_FUNC([times],     [AC_DEFINE([HAVE_TIMES],    [1],[Define if times is available.])] )\nAC_CHECK_FUNC([cbrt],      [AC_DEFINE([HAVE_CBRT],     [1],[Define if cbrt is available.])] )\n\nFATHOM_VECTOR_TEMPLATE_INSERT\nFATHOM_OLD_STD_COUNT\nMB_DEFS=\"$MB_DEFS $NO_VECTOR_TEMPLATE_INSERT $OLD_STD_COUNT\"\n\n################################################################################\n#                              Headers\n################################################################################\nAC_HEADER_STDC\nAC_CHECK_HEADERS(fcntl.h strings.h sys/file.h sys/time.h unistd.h)\nAC_CHECK_HEADER([inttypes.h], [AC_DEFINE(HAVE_INTTYPES_H,  [1], [MOAB qualified HAVE_INTTYPES_H]) ])\nAC_CHECK_HEADER([stdint.h],   [AC_DEFINE(HAVE_STDINT_H,    [1], [MOAB qualified HAVE_STDINT_H])   ])\nAC_CHECK_HEADER([stddef.h],   [AC_DEFINE(HAVE_STDDEF_H,    [1], [MOAB qualified HAVE_STDDEF_H])   ])\nAC_CHECK_HEADER([stdlib.h],   [AC_DEFINE(HAVE_STDLIB_H,    [1], [MOAB qualified HAVE_STDLIB_H])   ])\nAC_CHECK_HEADER([ieeefp.h],   [AC_DEFINE(HAVE_IEEEFP_H,    [1], [MOAB qualified HAVE_IEEEFP_H])   ])\nAC_CHECK_HEADER([termios.h],  [AC_DEFINE(HAVE_TERMIOS_H,   [1], [MOAB qualified HAVE_TERMIOS_H])  ])\nAC_CHECK_HEADER([sys/types.h],[AC_DEFINE(HAVE_SYS_TYPES_H, [1], [MOAB qualified HAVE_SYS_TYPES_H])])\nAC_CHECK_HEADER([sys/ioctl.h],[AC_DEFINE(HAVE_SYS_IOCTL_H, [1], [MOAB qualified HAVE_SYS_IOCTL_H])])\n\nSIZEOF_MBENTITYHANDLE=0\nAC_CHECK_SIZEOF([void *])\nSIZEOF_VOID_P=$ac_cv_sizeof_void_p\nAC_SUBST(SIZEOF_VOID_P)\nAC_ARG_ENABLE([64bit-handles],\n  [AS_HELP_STRING([--enable-64bit-handles],[Force EntityHandle to be 64 bits])],\n  [AC_CHECK_TYPE([uint64_t],\n    [AC_DEFINE(FORCE_64_BIT_HANDLES,[1],[Use int64_t for handles])\n     SIZEOF_MBENTITYHANDLE=8\n     DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-64bit-handles\"],\n    [AC_MSG_ERROR([Platform does not have uint64_t. Cannot force 64-bit handles])])\n])\nAC_ARG_ENABLE([32bit-handles],\n  [AS_HELP_STRING([--enable-32bit-handles],[Force EntityHandle to be 32 bits])],\n  [AC_CHECK_TYPE([uint32_t],\n    [AC_DEFINE(FORCE_32_BIT_HANDLES,[1],[Use int32_t for handles])\n     SIZEOF_MBENTITYHANDLE=4\n     DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-32bit-handles\"],\n    [AC_MSG_ERROR([Platform does not have uint32_t. Cannot force 32-bit handles])])\n])\nif test \"x$SIZEOF_MBENTITYHANDLE\" = \"x0\"; then\n  SIZEOF_MBENTITYHANDLE=$SIZEOF_VOID_P\n  AC_CHECK_TYPE([size_t], \n   [AC_DEFINE(HAVE_SIZE_T,[1],[System provides size_t typedef])],\n   [AC_CHECK_SIZEOF([unsigned long])\n    SIZEOF_UNSIGNGED_LONG=$ac_cv_sizeof_unsigned_long\n    if test \"$SIZEOF_UNSIGNED_LONG\" -ne \"$SIZEOF_VOID_P\"; then\n      AC_MSG_ERROR([Cannot define handle with sizeof void*: size_t not found and long is of incorrect size.])\n    fi]\n  )\n  AC_CHECK_TYPE([ptrdiff_t], \n   [AC_DEFINE(HAVE_PTRDIFF_T,[1],[System provides ptrdiff_t typedef])],\n   [AC_CHECK_SIZEOF([long])\n    AC_CHECK_SIZEOF([void *])\n    SIZEOF_VOID_P=$ac_cv_sizeof_void_p\n    SIZEOF_LONG=$ac_cv_sizeof_long\n    if test \"$SIZEOF_LONG\" -ne \"$SIZEOF_VOID_P\"; then\n      AC_MSG_ERROR([Cannot define handle with sizeof void*: ptrdiff_t not found and long is of incorrect size.])\n    fi]\n  )\nfi\n\n# Use 64-bit off_t value for file offsets.  W/out this, the stat/fseek calls\n# in serial_open_file and other places will fail on 32-bit systems if the file\n# is larger that 2GB.\nif (test \"x$enable_32bit_handles\" != \"x\"); then\n  MB_DEFS=\"$MB_DEFS -D_FILE_OFFSET_BITS=64\"\n  # AC_DEFINE_UNQUOTED([FILE_OFFSET_BITS], [64], [Support for handling files larger than 2GB on 32-bit machines])\nfi\n\nAC_CHECK_LIB(dl, dlopen, LIBS=\"$LIBS -ldl\")\nAC_CHECK_LIB(z, compress, LIBS=\"$LIBS -lz\")\nif (test \"$cxx_compiler\" != \"Intel\"); then\n  AC_CHECK_LIB(m, pow, LIBS=\"$LIBS -lm\")\nfi\n\n### Check for BLAS and Lapack dense solvers\n#AX_BLAS\nAX_LAPACK\nLIBS=\"$LAPACK_LIBS $BLAS_LIBS $LIBS\"\n\n################################################################################\n#                                 pymoab\n################################################################################\n# function for detecting python modules\nAC_DEFUN([AC_PYTHON_MODULE],\n[AC_MSG_CHECKING(for module $1 in python)\necho \"import $1\" | python -\nif test $? -ne 0 ; then\nAC_MSG_RESULT(not found)\nAC_MSG_ERROR(You need the module $1 available to python for this package)\nfi\nAC_MSG_RESULT(found)\n])\n\nfilter_sources=\"NO\"\nfilter_program=\"\"\npython_patterns=\"\"\n\nAC_MSG_CHECKING([if pymoab interface was requested by user])\nAC_ARG_ENABLE( [pymoab],\n[AS_HELP_STRING([--enable-pymoab],[Build support for pymoab interface.])],\n[enable_pymoab=$enableval],\n[enable_pymoab=no] )\n\nAC_ARG_VAR([PYMOAB_PREFIX],\nCustom location for install of PyMOAB module)\n\npymoab_custom_install=no\nAC_MSG_RESULT([$enable_pymoab])\n\nif (test \"xyes\" != \"x$enable_pymoab\" && test \"xno\" != \"x$enable_pymoab\"); then\n  AC_MSG_ERROR([Unknown argument --enable-pymoab=$enableval])\nelse\n  if (test \"x$enable_pymoab\" != \"xno\"); then\n    ENABLE_pymoab=yes\n    AM_PATH_PYTHON()\n    AX_PYTHON_DEVEL()\n    AC_PYTHON_MODULE(numpy)\n    AC_PYTHON_MODULE(setuptools)\n    \n    # if enabling PyMOAB, turn cython file filter oni\n    filter_sources=\"YES\"\n    filter_program=$PYTHON\" cython_filter.py 2>/dev/null\"\n    python_patterns=\"*.py *.pyx\"\n    \n    if (test \"x$enable_devmode\" != \"xno\"); then\n      # Developers updating the PyMOAB modules need Cython (> 0.25)\n      AC_PYTHON_MODULE(cython)\n      AC_MSG_CHECKING(for proper cython capabilities)\n      cython --cplus $srcdir/pymoab/cmake/cython_test.pyx --output-file ./.cython_test_out && rm .cython_test_out\n      if test $? -ne 0 ; then\n        AC_MSG_ERROR(cython is not the correct version for pymoab)\n      fi\n      AC_CHECK_PROG(CYTHON_AVAILABLE, cython, yes, no)\n      if test x\"$CYTHON_AVAILABLE\" != x\"yes\" ; then\n          AC_MSG_ERROR([Cython is not installed. Use 'easy_install cython'.])\n      else\n          CYTHON=`which cython`\n          AC_SUBST(CYTHON)\n      fi\n    fi\n\n    AC_CONFIG_SRCDIR([pymoab/setup.py.in])\n    # link source files to build location\n    AC_CONFIG_LINKS([pymoab/pymoab/moab.pxd:pymoab/pymoab/moab.pxd\n                     pymoab/pymoab/tag.cpp:pymoab/pymoab/tag.cpp\n                     pymoab/pymoab/tag.pyx:pymoab/pymoab/tag.pyx\n                     pymoab/pymoab/tag.pxd:pymoab/pymoab/tag.pxd\n                     pymoab/pymoab/core.cpp:pymoab/pymoab/core.cpp\n                     pymoab/pymoab/core.pyx:pymoab/pymoab/core.pyx\n\t\t     pymoab/pymoab/core.pxd:pymoab/pymoab/core.pxd\n\t\t     pymoab/pymoab/rng.cpp:pymoab/pymoab/rng.cpp\n\t\t     pymoab/pymoab/rng.pyx:pymoab/pymoab/rng.pyx\n\t\t     pymoab/pymoab/rng.pxd:pymoab/pymoab/rng.pxd\n\t\t     pymoab/pymoab/hcoord.cpp:pymoab/pymoab/hcoord.cpp\n\t\t     pymoab/pymoab/hcoord.pyx:pymoab/pymoab/hcoord.pyx\n\t\t     pymoab/pymoab/hcoord.pxd:pymoab/pymoab/hcoord.pxd\n\t\t     pymoab/pymoab/types.cpp:pymoab/pymoab/types.cpp\n\t\t     pymoab/pymoab/types.pyx:pymoab/pymoab/types.pyx\n\t\t     pymoab/pymoab/topo_util.cpp:pymoab/pymoab/topo_util.cpp\n\t\t     pymoab/pymoab/topo_util.pyx:pymoab/pymoab/topo_util.pyx\n\t\t     pymoab/pymoab/topo_util.pxd:pymoab/pymoab/topo_util.pxd\n\t\t     pymoab/pymoab/scd.cpp:pymoab/pymoab/scd.cpp\n\t\t     pymoab/pymoab/scd.pyx:pymoab/pymoab/scd.pyx\n\t\t     pymoab/pymoab/scd.pxd:pymoab/pymoab/scd.pxd\n\t\t     pymoab/pymoab/skinner.cpp:pymoab/pymoab/skinner.cpp\n\t\t     pymoab/pymoab/skinner.pyx:pymoab/pymoab/skinner.pyx\n\t\t     pymoab/pymoab/skinner.pxd:pymoab/pymoab/skinner.pxd\n\t\t     pymoab/pymoab/__init__.pxd:pymoab/pymoab/__init__.pxd\n\t\t     pymoab/pymoab/__init__.py:pymoab/pymoab/__init__.py])\n    # link test files to build location\n    AC_CONFIG_LINKS([pymoab/tests/driver.py:pymoab/tests/driver.py\n                     pymoab/tests/test_core.py:pymoab/tests/test_core.py\n\t\t     pymoab/tests/test_tag.py:pymoab/tests/test_tag.py\n\t\t     pymoab/tests/test_scd.py:pymoab/tests/test_scd.py\n\t\t     pymoab/tests/test_hom.py:pymoab/tests/test_hom.py\n\t\t     pymoab/tests/test_topo_util.py:pymoab/tests/test_topo_util.py\n\t\t     pymoab/tests/test_range.py:pymoab/tests/test_range.py\n\t\t     pymoab/tests/test_skinner.py:pymoab/tests/test_skinner.py\n\t\t     pymoab/tests/cyl_grps.h5m:pymoab/tests/cyl_grps.h5m\n\t\t     pymoab/tests/cyl_grps.vtk:pymoab/tests/cyl_grps.vtk])\n    # if a python install location is specified, use that\n    if test \"x$PYMOAB_PREFIX\" != \"x\"; then\n      pymoab_custom_install=yes\n      pymoab_prefix=${PYMOAB_PREFIX}\n      pythondir=$pymoab_prefix\n    else\n      # if a prefix was supplied, then install under the lib directory\n      # of the specified prefix location\n      if test \"x$prefix\" != \"xNONE\"; then\n        pymoab_prefix=$prefix/lib/python${PYTHON_VERSION}/site-packages\n        pymoab_custom_install=yes\n        pythondir=$pymoab_prefix\n      else\n        # if no specific location is used and no prefix was supplied,\n        # then install to the system location\n        pymoab_prefix=/usr/lib/python${PYTHON_VERSION}/dist-packages\n        pythondir=$pymoab_prefix\n      fi\n    fi\n\n    AC_SUBST([pymoab_prefix])\n    # ensure shared libraries are enabled\n    if (test \"xyes\" != \"x$enable_shared\" || test \"xno\" = \"x$enable_shared\"); then\n      AC_MSG_ERROR([Cannot build static libraries and the python interface. Please build with shared libraries (--enable-shared) or build without MOAB's python interface.])\n    fi\n    # ensure 32 bit objects are NOT enabled\n    if (test \"xyes\" = \"x$enable_32bit\" || test \"xno\" != \"x$enable_32bit\"); then\n      AC_MSG_ERROR([Cannot build pymoab with 32bit objects enabled. Please remove the --enable-32bit configuration option or build without MOAB's python interface.])\n    fi\n    # ensure 32 bit handles are NOT enabled\n    if (test \"x$enable_32bit_handles\" != \"x\"); then\n      AC_MSG_ERROR([Cannot build pymoab with 32bit EntityHandles enabled. Please remove the --enable-32bit-handles configuration option or build without MOAB's python interface.])\n    fi\n    UNAME_S=`uname -s`\n    if (test \"x$UNAME_S\" = \"xDarwin\"); then\n      SLIBENVPATH=\"DYLD_LIBRARY_PATH\"\n    else\n      SLIBENVPATH=\"LD_LIBRARY_PATH\"\n    fi\n    AC_SUBST(SLIBENVPATH)\n    DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-pymoab=$ENABLE_pymoab\"\n  else\n    ENABLE_pymoab=no\n  fi\nfi\n\nAM_CONDITIONAL([ENABLE_pymoab],[test \"xyes\" = \"x$ENABLE_pymoab\"])\nAC_MSG_CHECKING([if pymoab interface is enabled])\nAC_MSG_RESULT([$ENABLE_pymoab])\nAC_SUBST([filter_sources])\nAC_SUBST([filter_program])\nAC_SUBST([python_patterns])\n################################################################################\n#                           iMesh Part 1 of 2\n################################################################################\nAC_ARG_ENABLE( [imesh],\n[AS_HELP_STRING([--disable-imesh],[Do not build support for iMesh interface.])],\n[disable_imesh=$enableval],\n[disable_imesh=yes] )\n\nif (test \"xyes\" != \"x$disable_imesh\" && test \"xno\" != \"x$disable_imesh\"); then\n  AC_MSG_ERROR([Unknown argument --disable-imesh=$enableval])\nelse\n  if (test \"$disable_imesh\" != \"no\"); then\n    ENABLE_imesh=yes\n  else\n    ENABLE_imesh=no\n  fi\n  DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-imesh=$ENABLE_imesh\"\nfi\n\n################################################################################\n#                           FBiGeom Part 1 of 2\n################################################################################\nAC_ARG_ENABLE( [fbigeom],\n[AS_HELP_STRING([--enable-fbigeom],[Build mesh-based (facets) iGeom implementation])],\n[enable_fbigeom=$enableval],[enable_fbigeom=no] )\n\nif (test \"xyes\" != \"x$enable_fbigeom\" && test \"xno\" != \"x$enable_fbigeom\"); then\n  AC_MSG_ERROR([Unknown argument --enable-fbigeom=$enableval])\nelse\n  ENABLE_fbigeom=$enable_fbigeom\n  DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-fbigeom=$enable_fbigeom\"\nfi\n\n################################################################################\n#                           iMesh/FBiGeom Part 2 of 2\n################################################################################\n\n# The iMesh option must be checked before configuring the compilers\n# so that we know if we need Fortran.  This stuff has to be done\n# after configuring the compilers so that we know what size of \n# various types are.\n\nAC_MSG_CHECKING([size of EntityHandle])\nAC_MSG_RESULT([$SIZEOF_MBENTITYHANDLE])\nITAPS_VALID_HANDLE_SIZE=yes\nif test $SIZEOF_VOID_P -ne $SIZEOF_MBENTITYHANDLE; then\n  ITAPS_VALID_HANDLE_SIZE=no\n  AC_MSG_WARN([Cannot build iMesh or FBiGeom API because sizeof(EntityHandle) != sizeof(void*)])\n  ENABLE_imesh=no\n  ENABLE_fbigeom=no\nfi\n\nAC_MSG_CHECKING([if FBiGeom support is to be built])\nAC_MSG_RESULT([$ENABLE_fbigeom])\nAM_CONDITIONAL([ENABLE_fbigeom],[test \"xyes\" = \"x$ENABLE_fbigeom\"])\nif test \"x$ENABLE_fbigeom\" = \"xyes\"; then\n  if test \"x$ITAPS_VALID_HANDLE_SIZE\" != \"xyes\"; then\n    AC_MSG_ERROR([Cannot build FBiGeom API with sizeof(EntityHandle) != sizeof(void*)])\n  fi\n  AC_DEFINE([HAVE_FBIGEOM],[1],[Define if configured with FBiGeom interfaces.])\nfi\nHAVE_FBIGEOM=$ENABLE_fbigeom\nAC_SUBST(HAVE_FBIGEOM)\n\nAC_MSG_CHECKING([if iMesh support is to be built])\nAC_MSG_RESULT([$ENABLE_imesh])\nAM_CONDITIONAL([ENABLE_imesh],[test \"xyes\" = \"x$ENABLE_imesh\"])\nif test \"x$ENABLE_imesh\" = \"xyes\"; then\n  if test \"x$ITAPS_VALID_HANDLE_SIZE\" != \"xyes\"; then\n    AC_MSG_ERROR([Cannot build iMesh API with sizeof(EntityHandle) != sizeof(void*)])\n  fi\n  AC_DEFINE([HAVE_IMESH],[1],[Define if configured with iMesh interfaces.])\nfi\n\n################################################################################\n#                           iRel/Lasso Part 1 of 2\n################################################################################\nAC_ARG_ENABLE( [irel],\n[AS_HELP_STRING([--enable-irel],[Build relational geometry-mesh query interface implementation])],\n[enable_irel=$enableval],[enable_irel=no] )\n\nif (test \"xyes\" != \"x$enable_irel\" && test \"xno\" != \"x$enable_irel\"); then\n  AC_MSG_ERROR([Unknown argument --enable-irel=$enableval])\nelse\n  ENABLE_irel=$enable_irel\n  DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-irel=$enable_irel\"\nfi\n\n################################################################################\n#                           Mesquite Part 1 of 2\n################################################################################\nAC_ARG_ENABLE( [mesquite],\n[AS_HELP_STRING([--enable-mesquite],[Build support for Mesquite interfaces.])],\n[enable_mesquite=$enableval],\n[enable_mesquite=no] )\n\nif (test \"xyes\" != \"x$enable_mesquite\" && test \"xno\" != \"x$enable_mesquite\"); then\n  AC_MSG_ERROR([Unknown argument --enable-mesquite=$enableval])\nelse\n  DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-mesquite=$enable_mesquite\"\nfi\n\n################################################################################\n#                              Version Stuff\n################################################################################\n\nAC_DEFINE(VERSION,[\"AC_PACKAGE_VERSION\"],[MOAB Version])\nVERSION_MAJOR=`expr AC_PACKAGE_VERSION : '\\([[0-9]]*\\)'`\nVERSION_MINOR=`expr AC_PACKAGE_VERSION : '[[0-9]]*\\.\\([[0-9]]*\\)'`\nVERSION_PATCH=`expr AC_PACKAGE_VERSION : '[[0-9]]*\\.[[0-9]]*\\.\\(.*\\)'`\ntest \"x\" != \"x$VERSION_MAJOR\" || AC_MSG_ERROR(\"Invalid version string: AC_PACKAGE_VERSION\")\ntest \"x\" != \"x$VERSION_MINOR\" || AC_MSG_ERROR(\"Invalid version string: AC_PACKAGE_VERSION\")\nAC_DEFINE_UNQUOTED(VERSION_MAJOR,$VERSION_MAJOR,[MOAB Major Version])\nAC_DEFINE_UNQUOTED(VERSION_MINOR,$VERSION_MINOR,[MOAB Minor Version])\nif test \"x\" != \"x$VERSION_PATCH\"; then\n  AC_DEFINE_UNQUOTED(VERSION_PATCH,$VERSION_PATCH,[MOAB Patch Level])\n  VERSION_STRING=\"AC_PACKAGE_STRING\"\nelif test $VERSION_MINOR -eq 99; then\n  VERSION_STRING=\"AC_PACKAGE_STRING (Alpha)\"\nelse\n  VERSION_STRING=\"AC_PACKAGE_STRING (Beta)\"\nfi\nAC_DEFINE_UNQUOTED(VERSION_STRING,\"${VERSION_STRING}\",[MOAB Version String])\n\n################################################################################\n#                Create libtool script\n################################################################################\n# We need the libtool script both for the calls to the ITAPS_LIBTOOL_VAR\n# macro and for us in testing for libraries.  If we're using a newer\n# version of libtool, the script normally isn't generated until AC_OUTPUT\n# at the end of the configure script.  Ask that it be created now instead.\nm4_ifdef([LT_OUTPUT],[LT_OUTPUT])\n\n################################################################################\n#                              Extract libtool config\n################################################################################\nFATHOM_LIBTOOL_VAR( [CXX], [compiler_lib_search_path], [MOAB_CXX_LINKFLAGS])\nFATHOM_LIBTOOL_VAR( [CXX], [postdeps], [MOAB_CXX_LIBS_TMP])\nMOAB_CXX_LIBS=\nfor lib in $MOAB_CXX_LIBS_TMP; do\n  case $lib in\n    -lgcc_s)\n      ;;\n    -lm)\n      ;;\n    -lc)\n      ;;\n    *)\n      MOAB_CXX_LIBS=\"$MOAB_CXX_LIBS $lib\"\n      ;;\n  esac\ndone\nAC_SUBST(MOAB_CXX_LINKFLAGS)\nAC_SUBST(MOAB_CXX_LIBS)\n\n\n################################################################################\n#                             System Headers\n################################################################################\nHAVE_IEEEFP=0\nAC_CHECK_HEADER([ieeefp.h],[HAVE_IEEEFP_H=1] )\nAM_CONDITIONAL(HAVE_IEEEFP_H, [test \"$HAVE_IEEEFP\"!=\"0\"])\nif (test \"$HAVE_IEEEFP\" != \"0\"); then\n  AC_DEFINE(HAVE_IEEEFP, [1], [Defined if configured with IEEE Floating point support])\nfi\n\n## Check for some mathematical functions\nAX_CXX_HAVE_STDISFINITE\nAX_CXX_HAVE_ISFINITE\nAX_CXX_HAVE_FINITE\n\nHAVE_VALGRIND=0\nif test \"xyes\" = \"x$enable_debug\"; then\n  AC_CHECK_HEADER( [valgrind/memcheck.h], [HAVE_VALGRIND=1] )\n  if (test \"$HAVE_IEEEFP\" != \"0\"); then\n    AC_DEFINE(HAVE_VALGRIND, [1], [Defined if configured with Valgrind support])\n  fi\nfi\nAM_CONDITIONAL(HAVE_VALGRIND, [test \"$HAVE_VALGRIND\"!=\"0\"])\n\n################################################################################\n#                             BOOST OPTIONS\n################################################################################\n\ndnl FATHOM_CHECK_BOOST( [boost/pool/object_pool.hpp] )\n# MK_CHECK_UNORDERED_MAP([CPPFLAGS=\"$CPPFLAGS -DUNORDERED_MAP_NS=$result -DHAVE_UNORDERED_MAP=${incdir}unordered_map -DHAVE_UNORDERED_SET=${incdir}unordered_set\"])\nMK_CHECK_UNORDERED_MAP([AC_DEFINE_UNQUOTED([UNORDERED_MAP_NS], [$result], [Unordered map namespace])\n                        AC_DEFINE_UNQUOTED([HAVE_UNORDERED_MAP], [${incdir}unordered_map], [Specify if unordered map is available])\n                        AC_DEFINE_UNQUOTED([HAVE_UNORDERED_SET], [${incdir}unordered_set], [Specify if unordered set is available])])\n\n################################################################################\n#                              MPI OPTIONS\n################################################################################\n\nFATHOM_CHECK_MPI\nFATHOM_CONFIG_MPI_EXEC\nif (test \"xno\" != \"x$enablempi\"); then\n  AC_DEFINE([HAVE_MPI],[1],[Define if configured with support for parallel computations.])\nfi\nAM_CONDITIONAL(HAVE_MPI, [test \"xno\" != \"x$enablempi\"])\n# Used to generate moab_mpi.h\nif test \"xyes\" = \"x$MPI_CXX_HELP_NEEDED\"; then\n  AC_DEFINE( [MPI_CXX_CONFLICT], [1], \n    [MPICH_IGNORE_CXX_SEEK is not sufficient to avoid conflicts] )\n  AC_DEFINE_UNQUOTED([SEEK_SET],[$SEEK_SET],[\"Value of C SEEK_SET\"])\n  AC_DEFINE_UNQUOTED([SEEK_CUR],[$SEEK_CUR],[\"Value of C SEEK_CUR\"])\n  AC_DEFINE_UNQUOTED([SEEK_END],[$SEEK_END],[\"Value of C SEEK_END\"])\nfi\nFATHOM_CHECK_MPITYPE\n\nif (test \"$MPIFAMILY\" = \"OPENMPI\" && test \"x$ENABLE_FORTRAN\" != \"xno\"); then\n  FCLIBS=\"$FCLIBS -lmpi_cxx\"\nfi\n\nif test \"xyes\" = \"x$enablempi\"; then\n  FATHOM_CHECK_MPE\n  AC_SUBST([WITH_MPE])\n  AC_SUBST([MPE_LIBS])\n  test \"xyes\" != \"x$WITH_MPE\" || MB_DEFS=\"$MB_DEFS -DUSE_MPE\"\nfi\n\n################################################################################\n#                              Eigen3 OPTIONS\n################################################################################\n\nFATHOM_CONFIGURE_EIGEN3\n\n################################################################################\n#                              HDF5 OPTIONS\n################################################################################\n\nFATHOM_CHECK_HDF5\n\n################################################################################\n#                             CCMIO OPTIONS\n################################################################################\n\nold_LDFLAGS=\"$LDFLAGS\"\nLDFLAGS=\"$LDFLAGS $HDF5_LDFLAGS\"\nFATHOM_CHECK_CCMIO\nLDFLAGS=\"$old_LDFLAGS\"\nif test \"xno\" != \"x$HAVE_CCMIO\"; then\n  AC_DEFINE([HAVE_CCMIO],[1],[\"Define if configured with CCM I/O support.\"])\nfi\nAM_CONDITIONAL(HAVE_CCMIO, [test \"xno\" != \"x$HAVE_CCMIO\"])\nMB_CPPFLAGS=\"$CCMIO_CPPFLAGS $MB_CPPFLAGS\"\nEXPORT_LDFLAGS=\"$CCMIO_LDFLAGS $EXPORT_LDFLAGS\"\nAC_SUBST(CCMIO_LIBS)\n\n\n################################################################################\n#                             DAMSEL OPTIONS\n################################################################################\n\nold_LDFLAGS=\"$LDFLAGS\"\nLDFLAGS=\"$LDFLAGS $HDF5_LDFLAGS\"\nFATHOM_CHECK_DAMSEL\nLDFLAGS=\"$old_LDFLAGS\"\nif (test \"xno\" != \"x$HAVE_DAMSEL\" && test \"x\" != \"x$HAVE_DAMSEL\"); then\n  AC_DEFINE([HAVE_DAMSEL],[1],[\"Define if configured with Damsel I/O format support.\"])\nfi\nAM_CONDITIONAL(HAVE_DAMSEL, [test \"xno\" != \"x$HAVE_DAMSEL\" && test \"x\" != \"x$HAVE_DAMSEL\"])\nMB_CPPFLAGS=\"$DAMSEL_CPPFLAGS $MB_CPPFLAGS\"\nEXPORT_LDFLAGS=\"$DAMSEL_LDFLAGS $EXPORT_LDFLAGS\"\nAC_SUBST(DAMSEL_LIBS)\n\n\n################################################################################\n#                             NetCDF OPTIONS\n################################################################################\n\n  # now pnetcdf\nFATHOM_CHECK_PNETCDF([65536],[524288])\nif test \"xyes\" = \"x$enablepnetcdf\"; then\n  AC_DEFINE([HAVE_PNETCDF],[1],[\"Define if configured with PNetCDF support.\"])\nfi\nAM_CONDITIONAL(HAVE_PNETCDF, [test \"xyes\" = \"x$enablepnetcdf\"])\nMB_CPPFLAGS=\"$PNETCDF_CPPFLAGS $MB_CPPFLAGS\"\nEXPORT_LDFLAGS=\"$PNETCDF_LDFLAGS $EXPORT_LDFLAGS\"\nAC_SUBST(PNETCDF_LIBS)\nAC_SUBST(enablepnetcdf)\n\nold_LDFLAGS=\"$LDFLAGS\"\nLDFLAGS=\"$LDFLAGS $PNETCDF_LDFLAGS $HDF5_LDFLAGS\"\nFATHOM_CHECK_NETCDF([65536],[524288])\nLDFLAGS=\"$old_LDFLAGS\"\nif test \"xyes\" = \"x$enablenetcdf\"; then\n  AC_DEFINE([HAVE_NETCDF],[1],[\"Define if configured with NetCDF support.\"])\nfi\nAM_CONDITIONAL(HAVE_NETCDF, [test \"xno\" != \"x$enablenetcdf\"])\nMB_CPPFLAGS=\"$NETCDF_CPPFLAGS $MB_CPPFLAGS\"\nEXPORT_LDFLAGS=\"$NETCDF_LDFLAGS $EXPORT_LDFLAGS\"\nAC_SUBST(NETCDF_LIBS)\nAC_SUBST(enablenetcdf)\n\n\n################################################################################\n#                             CGNS OPTIONS\n################################################################################\n\nold_LDFLAGS=\"$LDFLAGS\"\nLDFLAGS=\"$LDFLAGS $HDF5_LDFLAGS\"\nFATHOM_CHECK_CGNS\nLDFLAGS=\"$old_LDFLAGS\"\nif test \"xno\" != \"x$HAVE_CGNS\"; then\n  AC_DEFINE([HAVE_CGNS],[1],[\"Define if configured with CGNS support.\"])\nfi\nAM_CONDITIONAL(HAVE_CGNS, [test \"xno\" != \"x$HAVE_CGNS\"])\nMB_CPPFLAGS=\"$CGNS_CPPFLAGS $MB_CPPFLAGS\"\nEXPORT_LDFLAGS=\"$CGNS_LDFLAGS $EXPORT_LDFLAGS\"\nAC_SUBST(CGNS_LIBS)\n\n\n#################################################################################\n#                             Documentation\n#################################################################################\nAC_ARG_ENABLE([docs],\n[AS_HELP_STRING([--enable-docs],[indicate to check for doxygen installation])],\n                        [ENABLE_DOCS=yes],[ENABLE_DOCS=no] )\nAC_ARG_WITH([doxygen],\n[AS_HELP_STRING([--with-doxygen=DIR],[Specify directory where Doxygen program is installed. By default, it is /usr/bin])],\n[WITH_DOXYGEN=\"$withval\"], [WITH_DOXYGEN=no])\n\nif test \"x$WITH_DOXYGEN\" != \"xno\"; then\n  AC_PATH_PROGS( [DOXYGEN], [doxygen], [no],[$WITH_DOXYGEN] )\nelse\n  AC_PATH_PROGS( [DOXYGEN], [doxygen], [no],[$PATH])\nfi\nif test \"x$ENABLE_DOCS\" = \"xyes\"; then\n  if test \"x$DOXYGEN\" = \"xno\"; then\n    AC_MSG_ERROR(\"Doxygen executable not found.\")\n  fi\nfi\nAC_SUBST([DOXYGEN])\nAM_CONDITIONAL([ENABLE_DOCS],[test \"x$ENABLE_DOCS\" != \"xno\"])\n\n################################################################################\n#                           Zoltan - Part 1 of 2\n################################################################################\nWITH_ZOLTAN=no\nZOLTAN_DIR=\nZOLTAN_ARCH=\nWITH_PARAMETIS=no\nPARMETIS_DIR=\nMETIS_DIR=\nSCOTCH_DIR=\nPTSCOTCH_DIR=\nSCOTCH_LIBS=\nWITH_SCOTCH=no\nZOLTAN_LIBS=\nZOLTAN_LIB_FLAGS=\nZOLTAN_INC_FLAGS=\n\n# If user specified zoltan-arch, but not zoltan, assume\n# they want zoltan support, otherwise assume no zoltan\nZOLTAN_DEFAULT=no\n\n# Some versions of Zoltan put libraries in directories such as Obj_Linux,\n# where the part after the Obj_ prefix is the zoltan architecture.  Here\n# we allow the user to specify this architecture.  We try to avoid requiring\n# this option, but we allow the user to specify it in case something is \n# going wrong with the logic to choose one automatically.  The 'choose one\n# automatically' logic is basically to add everything that matches Obj_*\n# to the search path, with the assumption that the linker will ignore libraries\n# for other architectures.\nAC_ARG_WITH( [zoltan-arch],\n             [AS_HELP_STRING([--with-zoltan-arch=OS],[Specify zoltan architecture])],\n             [case \"x$withval\" in\n               xyes|xno)\n                 AC_MSG_ERROR([Expeted value for --with-zoltan-arch])\n                 ;;\n               x*)\n                 ZOLTAN_ARCH=\"$withval\"\n                 ZOLTAN_DEFAULT=yes\n                 DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --with-zoltan-arch=\\\"${withval}\\\"\"\n                 ;;\n               esac])\n\n# Enable support for Zoltan, and optionally specify directory in which\n# to search for Zoltan libs and headers.  Specifying this also enables\n# mbzoltan unless it is explicitly disabled.\nAC_ARG_WITH( [zoltan], \n             [AS_HELP_STRING([--with-zoltan=DIR],[Enable Zoltan support, and optionally specify Zoltan location])],\n             [case \"x$withval\" in\n               xyes)\n                 WITH_ZOLTAN=yes\n                 ;;\n               xno)\n                 WITH_ZOLTAN=no\n                 ;;\n               x*)\n                 WITH_ZOLTAN=yes\n                 ZOLTAN_DIR=\"$withval\"\n                 test -d \"$withval\" || AC_MSG_ERROR([Not a directory: with-zoltan=$withval])\n                 if test -d \"$withval/include\"; then\n                   ZOLTAN_INC_FLAGS=\"-I$withval/include\"\n                 else\n                   ZOLTAN_INC_FLAGS=\"-I$withval\"\n                 fi\n                 DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --with-zoltan=\\\"${withval}\\\"\"\n                 ;;\n               esac],[WITH_ZOLTAN=$ZOLTAN_DEFAULT] )\n\nFATHOM_CONFIGURE_METIS\nFATHOM_CONFIGURE_PARMETIS\n\n# If user specified with-scotch, then assume they are trying\n# to add an additional library search directory in which to check\n# for the scotch library.\nAC_ARG_WITH([scotch],\n            [AS_HELP_STRING([--with-scotch=DIR],[Directory containing Scotch library for Zoltan])],\n             [SCOTCH_DIR=\"$withval\"; enablescotch=yes],[SCOTCH_DIR=\"\"; enablescotch=no] )\n\nif (test \"$enablescotch\" != \"no\"); then\n  case \"x$SCOTCH_DIR\" in\n     xyes|xno)\n       # error out -- expecting directory path\n       AC_MSG_ERROR([Please specify the Scotch installation directory])\n       ;;\n     x*)\n       test -d \"$SCOTCH_DIR\" || AC_MSG_ERROR([Not a directory: with-scotch=$SCOTCH_DIR])\n       if test -d \"$SCOTCH_DIR/lib\"; then\n         ZOLTAN_LIB_FLAGS=\"$ZOLTAN_LIB_FLAGS -L$SCOTCH_DIR/lib\"\n         if (test -f \"$SCOTCH_DIR/lib/libscotch.a\" || test -f \"$SCOTCH_DIR/lib/libscotch.so\" || test -f \"$SCOTCH_DIR/lib/libscotch.dylib\"); then\n           SCOTCH_LIBS=\"-lscotch -lscotcherr -lscotcherrexit\"\n           AC_DEFINE([HAVE_SCOTCH],[1],[\"Define if configured with Scotch library partitioning support.\"])\n         else\n           AC_MSG_ERROR([Scotch libraries not found at $SCOTCH_DIR/lib])\n         fi\n       else\n         ZOLTAN_LIB_FLAGS=\"$ZOLTAN_LIB_FLAGS -L$SCOTCH_DIR\"\n         if (test -f \"$SCOTCH_DIR/libscotch.a\" || test -f \"$SCOTCH_DIR/libscotch.so\" || test -f \"$SCOTCH_DIR/libscotch.dylib\"); then\n           SCOTCH_LIBS=\"-lscotch -lscotcherr -lscotcherrexit\"\n         else\n           AC_MSG_ERROR([Scotch libraries not found at $SCOTCH_DIR])\n         fi\n       fi\n       if test -d \"$SCOTCH_DIR/include\"; then\n         ZOLTAN_INC_FLAGS=\"$ZOLTAN_INC_FLAGS -I$SCOTCH_DIR/include\"\n       else\n         ZOLTAN_INC_FLAGS=\"$ZOLTAN_INC_FLAGS -I$SCOTCH_DIR\"\n       fi\n       DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --with-scotch=\\\"${SCOTCH_DIR}\\\"\"\n       ;;\n   esac\nfi\n\n# If user specified with-ptscotch, then assume they are trying\n# to add an additional library search directory in which to check\n# for the parallel scotch library.\nAC_ARG_WITH([ptscotch],\n            [AS_HELP_STRING([--with-ptscotch=DIR],[Directory containing PTScotch library for Zoltan])],\n             [PTSCOTCH_DIR=\"$withval\"; enableptscotch=yes],[PTSCOTCH_DIR=\"$SCOTCH_DIR\"; enableptscotch=$enablescotch] )\n\nif (test \"$enableptscotch\" != \"no\"); then\n  case \"x$PTSCOTCH_DIR\" in\n     xyes|xno)\n       # error out -- expecting directory path\n       AC_MSG_ERROR([Please specify the parallel Scotch installation directory])\n       ;;\n     x*)\n       PTSCOTCH_DIR=\"$PTSCOTCH_DIR\"\n       test -d \"$PTSCOTCH_DIR\" || AC_MSG_ERROR([Not a directory: with-ptscotch=$PTSCOTCH_DIR])\n       if test -d \"$PTSCOTCH_DIR/lib\"; then\n         ZOLTAN_LIB_FLAGS=\"$ZOLTAN_LIB_FLAGS -L$PTSCOTCH_DIR/lib\"\n         if (test -f \"$SCOTCH_DIR/lib/libptscotch.a\" || test -f \"$SCOTCH_DIR/lib/libptscotch.so\" || test -f \"$SCOTCH_DIR/lib/libptscotch.dylib\"); then\n           SCOTCH_LIBS=\"-lptscotch -lptscotcherr -lptscotcherrexit $SCOTCH_LIBS\"\n           AC_DEFINE([HAVE_SCOTCH],[1],[\"Define if configured with Parallel Scotch library partitioning support.\"])\n         else\n           AC_MSG_ERROR([Scotch libraries not found at $SCOTCH_DIR/lib])\n         fi\n       else\n         ZOLTAN_LIB_FLAGS=\"$ZOLTAN_LIB_FLAGS -L$PTSCOTCH_DIR\"\n         if (test -f \"$SCOTCH_DIR/libptscotch.a\" || test -f \"$SCOTCH_DIR/libptscotch.so\" || test -f \"$SCOTCH_DIR/libptscotch.dylib\"); then\n           SCOTCH_LIBS=\"-lptscotch -lptscotcherr -lptscotcherrexit $SCOTCH_LIBS\"\n         else\n           AC_MSG_ERROR([Scotch libraries not found at $SCOTCH_DIR])\n         fi\n       fi\n       if test -d \"$PTSCOTCH_DIR/include\"; then\n         ZOLTAN_INC_FLAGS=\"$ZOLTAN_INC_FLAGS -I$PTSCOTCH_DIR/include\"\n       else\n         ZOLTAN_INC_FLAGS=\"$ZOLTAN_INC_FLAGS -I$PTSCOTCH_DIR\"\n       fi\n       DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --with-ptscotch=\\\"${PTSCOTCH_DIR}\\\"\"\n       ;;\n  esac\nfi\n\n################################################################################\n#                            Optional Libraries\n################################################################################\n\nAC_ARG_WITH([vtk],\n  [AS_HELP_STRING([--with-vtk=DIR],[Enable VTK support, and specify VTK location])],\n  [WITH_VTK=$withval\n   DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --with-vtk=\\\"${withval}\\\"\"\n  ],[WITH_VTK=])\n\nVTKMOAB_DEFAULT=no\nif (test \"x$WITH_VTK\" != \"xno\" && test \"x$WITH_VTK\" != \"x\"); then\n  VTKMOAB_DEFAULT=yes\nfi\n  \nAC_ARG_WITH( [vtk-lib-suffix], \n             [AS_HELP_STRING([--with-vtk-lib-suffix=SUFFIX],[Specify optional suffix to VTK library names, e.g. -pv3.98])],\n             [case \"x$withval\" in\n               xyes)\n                 AC_MSG_ERROR([Must specify a non-empty suffix!])\n\t\t             VTK_LIB_SUFFIX=\n                 ;;\n               xno)\n                 AC_MSG_ERROR([Must specify a non-empty suffix!])\n\t\t             VTK_LIB_SUFFIX=\n                 ;;\n               x*)\n\t\t             VTK_LIB_SUFFIX=\"$withval\"\n                 DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --with-vtk-lib-suffix=\\\"${withval}\\\"\"\n                 ;;\n               esac],[VTK_LIB_SUFFIX=] )\n\n# Provide downloadable option for TempestRemap library\n# Supported TempestRemap versions: 1.0.beta\n# Arguments: 1) Default Version Number, 2) Download by default ?\nAUSCM_CONFIGURE_DOWNLOAD_TEMPESTREMAP([1.0.beta],[no])\n\n# Configuration for TempestRemap library\nAC_ARG_WITH([tempestremap],\n  [AS_HELP_STRING([--with-tempestremap=DIR],[Enable intersection/remapping support through interface to TempestRemap])],\n  [WITH_TEMPEST=$withval\n   DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --with-tempestremap=\\\"${withval}\\\"\"\n  ],[WITH_TEMPEST=$TEMPESTREMAP_DIR])\n\nHAVE_TEMPEST=no\nif (test \"x$WITH_TEMPEST\" != \"xno\" && test \"x$WITH_TEMPEST\" != \"x\"); then\n  # Test for Tempest headers\n  AC_LANG_PUSH([C++])\n  old_CPPFLAGS=\"$CPPFLAGS\"\n  CPPFLAGS=\"$CPPFLAGS -I$WITH_TEMPEST/include\"\n  AC_CHECK_HEADER([TempestConfig.h],[TEMPESTREMAP_INCLUDE=\"-I$WITH_TEMPEST/include\"],\n                  [WITH_TEMPEST=no\n                  AC_MSG_WARN([TempestConfig.h: header not found in $WITH_TEMPEST/include.])],\n                  [#include <stdlib.h>])\n  CPPFLAGS=\"$old_CPPFLAGS\"\n  AC_SUBST(TEMPESTREMAP_INCLUDE)\n\n  # Test for TempestRemap library, possibly requiring NetCDF\n  old_LDFLAGS=\"$LDFLAGS\"\n  old_LIBS=\"$LIBS\"\n  LDFLAGS=\"$LDFLAGS -L$WITH_TEMPEST/lib $PNETCDF_LDFLAGS $NETCDF_LDFLAGS $HDF5_LDFLAGS\"\n  LIBS=\"$NETCDF_LIBS $LAPACK_LIBS $BLAS_LIBS $LIBS\"\n  AC_CHECK_LIB([TempestRemap],[GenerateOfflineMap],[TEMPESTREMAP_LIBS=\"-L$WITH_TEMPEST/lib -lTempestRemap $NETCDF_LIBS $LAPACK_LIBS $BLAS_LIBS\"],\n    [unset ac_cv_lib_TempestRemap_GenerateOfflineMap\n    LIBS=\"$NETCDF_LIBS $PNETCDF_LIBS $HDF5_LIBS $LAPACK_LIBS $BLAS_LIBS $LIBS\"\n    AC_CHECK_LIB([TempestRemap],[GenerateOfflineMap],\n                  [TEMPESTREMAP_LIBS=\"-L$WITH_TEMPEST/lib -lTempestRemap $NETCDF_LIBS $PNETCDF_LIBS $LAPACK_LIBS $BLAS_LIBS\"],\n                  [AC_MSG_ERROR([TempestRemap library not found or not usable.])]\n                  [$NETCDF_LIBS $PNETCDF_LIBS])],[$NETCDF_LIBS])\n  LDFLAGS=\"$old_LDFLAGS\"\n  LIBS=\"$old_LIBS\"\n  AC_LANG_POP([C++])\n  AC_SUBST(TEMPESTREMAP_LIBS)\n\n    # Define macro HAVE_TEMPESTREMAP\n  AC_DEFINE([HAVE_TEMPESTREMAP],[1],[Enable use of TempestRemap library API for computing intersection and remapping for Climate problems])\n  HAVE_TEMPEST=yes\nfi\nAM_CONDITIONAL( HAVE_TEMPESTREMAP, [test \"x$HAVE_TEMPEST\" = \"xyes\"] )\n\n################################################################################\n#                           Zoltan - Part 2 of 2\n################################################################################\n\n#if test \"xyes\" = \"x$ENABLE_mbpart\"; then\n#  WITH_ZOLTAN=yes\n#else\n#  WITH_ZOLTAN=no\n#fi\n\n# If user requested Zoltan support, verify that we can\n# find the library and headers, and set the necessary\n# build variables.\nif test \"xyes\" = \"x$WITH_ZOLTAN\"; then\n  if test \"xyes\" != \"x$enablempi\"; then\n    AC_MSG_WARN([Cannot include Zoltan support without MPI (--with-mpi). Disabling Zoltan support.])\n    WITH_ZOLTAN=no\n  fi\n\n  if test \"xyes\" = \"x$WITH_ZOLTAN\"; then\n      # Test for zoltan headers\n    AC_LANG_PUSH([C++])\n    old_CPPFLAGS=\"$CPPFLAGS\"\n    CPPFLAGS=\"$CPPFLAGS $ZOLTAN_INC_FLAGS -DMPICH_IGNORE_CXX_SEEK\"\n    AC_CHECK_HEADER([zoltan_cpp.h],,\n                    [WITH_ZOLTAN=no\n                    AC_MSG_WARN([zoltan_cpp.h: header not found in $ZOLTAN_INC_FLAGS .])],\n                    [#include <stdlib.h>])\n    CPPFLAGS=\"$old_CPPFLAGS\"\n    AC_LANG_POP([C++])\n\n    if test \"xyes\" = \"x$WITH_ZOLTAN\"; then\n      # Build LDFLAGS for Zoltan\n      found=no\n      if test \"x\" != \"x$ZOLTAN_DIR\"; then\n        if test \"x\" != \"x$ZOLTAN_ARCH\" && test -d \"$ZOLTAN_DIR/Obj_$ZOLTAN_ARCH\"; then\n          ZOLTAN_LIB_FLAGS=\"$ZOLTAN_LIB_FLAGS -L$ZOLTAN_DIR/Obj_$ZOLTAN_ARCH\"\n          found=yes\n        elif test -d \"$ZOLTAN_DIR/lib\"; then\n          ZOLTAN_LIB_FLAGS=\"$ZOLTAN_LIB_FLAGS -L$ZOLTAN_DIR/lib\"\n          found=yes\n        else\n          for d in $ZOLTAN_DIR/Obj_*; do\n            if test -d \"$d\"; then\n              found=yes\n              ZOLTAN_LIB_FLAGS=\"$ZOLTAN_LIB_FLAGS -L$d\"\n            fi\n          done\n        fi\n        if test \"no\" = \"$found\"; then\n          ZOLTAN_LIB_FLAGS=\"$ZOLTAN_LIB_FLAGS -L$ZOLTAN_DIR\"\n        fi\n      fi\n\n      # Test for Zoltan library, possibly requiring parmetis and scotch\n      old_LDFLAGS=\"$LDFLAGS\"\n      LDFLAGS=\"$LDFLAGS $ZOLTAN_LIB_FLAGS\"\n      AC_CHECK_LIB([zoltan],[Zoltan_LB_Partition],[ZOLTAN_LIBS='-lzoltan'],\n        [unset ac_cv_lib_zoltan_Zoltan_LB_Partition\n        AC_CHECK_LIB([zoltan],[Zoltan_LB_Partition],\n                      [ZOLTAN_LIBS=\"-lzoltan $PARMETIS_LIBS $METIS_LIBS\"],\n                      [unset ac_cv_lib_zoltan_Zoltan_LB_Partition\n                      AC_CHECK_LIB([zoltan],[Zoltan_LB_Partition],[ZOLTAN_LIBS=\"-lzoltan $SCOTCH_LIBS $PARMETIS_LIBS $METIS_LIBS\"],\n                      [AC_MSG_ERROR([zoltan library not found or not usable.  Perhaps you need to specify --with-parmetis=@<:@DIR@:>@ or --with-metis=@<:@DIR@:>@ and/or --with-scotch=@<:@DIR@:>@?])],\n                      [$SCOTCH_LIBS $PARMETIS_LIBS $METIS_LIBS])],\n                      [$PARMETIS_LIBS $METIS_LIBS])])\n      LDFLAGS=\"$old_LDFLAGS\"\n\n        # Define macro HAVE_ZOLTAN\n      AC_DEFINE([HAVE_ZOLTAN],[1],[\"Define if configured with Zoltan library partitioning support.\"])\n    fi\n  fi\nfi\n\nAM_CONDITIONAL( HAVE_ZOLTAN, [test \"x$WITH_ZOLTAN\" = \"xyes\"] )\nenablezoltan=$WITH_ZOLTAN\nAC_SUBST(enablezoltan)\nAC_SUBST(ZOLTAN_DIR)\nAC_SUBST(ZOLTAN_LIBS)\nAC_SUBST(ZOLTAN_LIB_FLAGS)\nAC_SUBST(ZOLTAN_INC_FLAGS)\nEXPORT_LDFLAGS=\"$ZOLTAN_LIB_FLAGS $EXPORT_LDFLAGS\"\n \n################################################################################\n#                           CGM\n################################################################################\nUSING_DEV_CGM=no\nAC_ARG_WITH(cgm, \n[AS_HELP_STRING([--with-cgm=DIR],[Specify directory containing CGM])],\n[CGM_DIR=$withval\n DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --with-cgm=\\\"${withval}\\\"\"\n ], [CGM_DIR=])\n\ncase \"x$CGM_DIR\" in\n  xno|x)\n    CGM_MISSING=yes\n    ;;\n  xyes)\n    AC_MSG_ERROR([--with-cgm requires an argument])\n    ;;\n  *)\n    if ! test -d \"$CGM_DIR\"; then\n      AC_MSG_ERROR([$CGM_DIR : not a directory.])\n    fi\n    CGM_MISSING=no\n    CGM_MAKE=\n    AC_CHECK_FILE([${CGM_DIR}/lib/cgm.make],\n                  [CGM_MAKE=\"${CGM_DIR}/lib/cgm.make\"\n                   IGEOM_DEFS=\"${CGM_DIR}/lib/iGeom-Defs.inc\"],\n                  [AC_CHECK_FILE([${CGM_DIR}/cgm.make],\n                                 [CGM_MAKE=\"${CGM_DIR}/cgm.make\";\n                                  IGEOM_DEFS=\"${CGM_DIR}/itaps/iGeom-Defs.inc\";\n                                  USING_DEV_CGM=yes],\n                                 [AC_MSG_ERROR([$CGM_DIR : not a configured CGM]); \n                                  CGM_MISSING=yes])\n                  ])\n    ;;\nesac\n\nAC_SUBST(CGM_MAKE)\nAC_SUBST(IGEOM_DEFS)\nAC_SUBST(USING_DEV_CGM)\n\nif test \"x$CGM_MISSING\" = \"xno\"; then\n  CGM_CONFIG_OPTIONS=\"include $CGM_MAKE\"\n\n  FATHOM_MAKE_INC_VAR([$CGM_MAKE],[CGM_DEFINES], [CGM_CPPFLAGS=\"$make_val\"])   \n  FATHOM_MAKE_INC_VAR([$CGM_MAKE],[CGM_INCLUDES],[CGM_CPPFLAGS=\"$CGM_CPPFLAGS $make_val\"])   \n  FATHOM_MAKE_INC_VAR([$CGM_MAKE],[CGM_LTFLAGS], [CGM_LTFLAGS=\"$make_val\"])   \n  FATHOM_MAKE_INC_VAR([$CGM_MAKE],[CGM_LDFLAGS], [CGM_LDFLAGS=\"$make_val\"])   \n  FATHOM_MAKE_INC_VAR([$CGM_MAKE],[CGM_LIBS],    [CGM_LIBS=\"$make_val\"])\n\n  AC_LANG_PUSH([C++])\n  old_CPPFLAGS=\"$CPPFLAGS\"\n  CPPFLAGS=\"$CGM_CPPFLAGS $CPPFLAGS\"\n  HAVE_OCC=no\n  HAVE_FACET=no\n  AC_MSG_CHECKING([for underlying geometry engine in CGM])\n  AC_COMPILE_IFELSE(\n  [AC_LANG_PROGRAM([@%:@include <CGMConfig.h>],\n  [ #ifndef CGM_HAVE_FACET_ENGINE_ONLY\n  // Perfect!\n  #else\n  # error Only Facet engine available\n  #endif\n  ])\n  ],\n  [HAVE_OCC=yes\n   AC_DEFINE(HAVE_CGM_OCC, [1], [MOAB uses CGM configured with OpenCascade])\n   AC_MSG_RESULT(OCC)],\n  [HAVE_FACET=yes\n   AC_DEFINE(HAVE_CGM_FACET, [1], [MOAB uses CGM configured with Facet Engine only])\n  AC_MSG_RESULT(Facets)] )\n  CPPFLAGS=\"$old_CPPFLAGS\"\n  AC_LANG_POP([C++])\n\n  AC_MSG_CHECKING([for GeometryQueryTool::ray_fire(RefFace*,...)])\n  AC_LANG_PUSH([C++])\n  old_CPPFLAGS=\"$CPPFLAGS\"\n  old_LDFLAGS=\"$LDFLAGS\"\n  old_LIBS=\"$LIBS\"\n  CPPFLAGS=\"$CGM_CPPFLAGS $CPPFLAGS\"\n  LDFLAGS=\"$CGM_LDFLAGS $CPPFLAGS\"\n  LIBS=\"$CGM_LIBS $LIBS\"\n  HAVE_CGM_FIRE_RAY=no\n  AC_LINK_IFELSE(\n    [AC_LANG_PROGRAM([#include \"GeometryQueryTool.hpp\"\n                      #include \"CubitVector.hpp\"],\n                    [CubitVector a,b;\n                    DLIList<double> c;\n                    GeometryQueryTool::instance()->fire_ray((RefFace*)0, a, b, c );\n                    ])],\n    [HAVE_CGM_FIRE_RAY=yes;\n    AC_MSG_RESULT(yes)],\n    [AC_MSG_RESULT(no)])\n  CPPFLAGS=\"$old_CPPFLAGS\"\n  LDFLAGS=\"$old_LDFLAGS\"\n  LIBS=\"$old_LIBS\"\n  AC_LANG_POP([C++])\n\n  EXPORT_LDFLAGS=\"$EXPORT_LDFLAGS $CGM_LDFLAGS\"\n  EXPORT_LTFLAGS=\"$EXPORT_LTFLAGS $CGM_LTFLAGS\"\n\n  AC_CHECK_FILE([$IGEOM_DEFS],\n              [IGEOM_CONFIG_OPTIONS=\"include $IGEOM_DEFS\";\n               FATHOM_MAKE_INC_VAR([$IGEOM_DEFS],[IGEOM_DEFINES], [IGEOM_DEFINES=\"$make_val\"],[IGEOM_DEFINES=])\n               FATHOM_MAKE_INC_VAR([$IGEOM_DEFS],[IGEOM_INCLUDES], [IGEOM_INCLUDES=\"$make_val\"],[IGEOM_INCLUDES=])\n               FATHOM_MAKE_INC_VAR([$IGEOM_DEFS],[IGEOM_LDFLAGS], [IGEOM_LDFLAGS=\"$make_val\"],[IGEOM_LDFLAGS=])\n               FATHOM_MAKE_INC_VAR([$IGEOM_DEFS],[IGEOM_LIBS], [IGEOM_LIBS=\"$make_val\"],[IGEOM_LIBS=]) ],\n               [AC_MSG_WARN([$CGM_DIR : not a configured iGeom])]\n              )\n\nfi\n\nAC_SUBST(CGM_CPPFLAGS)\nAC_SUBST(CGM_LDFLAGS)\nAC_SUBST(CGM_LTFLAGS)\nAC_SUBST(CGM_LIBS)\nAC_SUBST(CGM_DIR)\nAC_SUBST(IGEOM_DEFINES)\nAC_SUBST(IGEOM_INCLUDES)\nAC_SUBST(IGEOM_CONFIG_OPTIONS)\nAC_SUBST(IGEOM_LDFLAGS)\nAC_SUBST(IGEOM_LIBS)\n\nAM_CONDITIONAL( HAVE_CGM, [test \"x$CGM_MISSING\" = \"xno\"] )\nAM_CONDITIONAL( HAVE_OCC, [test \"x$HAVE_OCC\" = \"xyes\"] )\n\nif (test \"x$CGM_MISSING\" = \"xno\"); then\n  AC_DEFINE([HAVE_CGM],[1],[\"Define if configured with CGM support.\"])\n  if (test \"x$HAVE_CGM_FIRE_RAY\" != \"xno\"); then\n    AC_DEFINE([HAVE_CGM_FIRE_RAY],[1],[\"Define if configured with CGM and Ray fire support.\"])\n  fi\nfi\n\n\n################################################################################\n#                           iRel/Lasso Part 2 of 2\n################################################################################\n\nAC_MSG_CHECKING([if iRel support is to be built])\nAC_MSG_RESULT([$ENABLE_irel])\nAM_CONDITIONAL([ENABLE_irel],[test \"xyes\" = \"x$ENABLE_irel\"])\n\nif test \"x$ENABLE_irel\" = \"xyes\"; then\n  if (test \"x$ENABLE_imesh\" != \"xyes\" || test \"x$CGM_MISSING\" != \"xno\"); then\n    AC_MSG_ERROR([Cannot build iRel API. Enable both iGeom (CGM) and iMesh implementations.])\n  fi\n  AC_DEFINE([HAVE_IREL],[1],[Define if configured with iRel interfaces.])\nfi\n\nHAVE_IGEOM=\"no\"\nHAVE_IMESH=\"no\"\nHAVE_IREL=\"no\"\ntest \"x$CGM_MISSING\" != \"xno\" || HAVE_IGEOM=\"yes\"\ntest \"x$ENABLE_imesh\" != \"xyes\" || HAVE_IMESH=\"yes\"\ntest \"x$ENABLE_irel\" != \"xyes\" || HAVE_IREL=\"yes\"\nAC_SUBST(HAVE_IGEOM)\nAC_SUBST(HAVE_IMESH)\nAC_SUBST(HAVE_IREL)\nAM_CONDITIONAL([USING_DEV_CGM],[test \"xyes\" = \"x$USING_DEV_CGM\"])\n\n################################################################################\n#                           Mesquite Part 2 of 2\n################################################################################\n\nAC_MSG_CHECKING([if Mesquite support is to be built])\nAC_MSG_RESULT([$enable_mesquite])\nHAVE_MESQUITE=\"no\"\nif (test \"xno\" != \"x$enable_mesquite\"); then\n  if (test \"x$ENABLE_imesh\" != \"xyes\"); then\n    enable_mesquite=no\n    AC_MSG_WARN([** Disabling Mesquite since iGeom or iMesh is not configured correctly.])\n  fi\n  if (test \"xno\" != \"x$enable_mesquite\"); then\n    CONFIGURE_MESQUITE\n    AC_DEFINE(HAVE_MESQUITE,[1],\"MOAB configured with Mesquite support\")\n    HAVE_MESQUITE=\"yes\"\n  fi\nfi\nAM_CONDITIONAL([ENABLE_mesquite],[test \"yes\" = \"$enable_mesquite\"])\nAM_CONDITIONAL([HAVE_CPPUNIT],[test \"$HAVE_CPPUNIT\" = \"yes\"])\nAC_SUBST(HAVE_MESQUITE)\n\n###############################################################################\n#                           Optional Tools\n###############################################################################\n  # Define a macro to avoid typing this for each individual tool\n  # Usage: MB_OPTIONAL_TOOL( name, default, default_if_tools_enabled )\n  #  name      - name of option\n  #  default   - yes/no, $ENABLE_TOOLS overrides this if set\n  # Actions:\n  #  sets ENABLE_${tool} to 'yes' or 'no'\n  #  creates ENABLE_${tool} automake conditional\nAC_DEFUN([MB_OPTIONAL_TOOL],[\n  mb_default_$1=$2\n\n  if test \"x\" != \"x$ENABLE_TOOLS\"; then\n    mb_default_$1=$3\n  fi\n  AC_ARG_ENABLE( [$1],\n[AS_HELP_STRING([--enable-$1],[Build tool: $1])\nAS_HELP_STRING([--disable-$1],[Don't build $1])],\n                 [ENABLE_$1=$enableval],[ENABLE_$1=${mb_default_$1}] )\n  AM_CONDITIONAL([ENABLE_$1],[test \"x${ENABLE_$1}\" != \"xno\"])\n  if (test \"x${ENABLE_$1}\" != \"xno\"); then\n    AC_DEFINE(m4_toupper(HAVE_$1),[1],Configure with tool: m4_toupper($1))\n  fi\n  AC_MSG_CHECKING([if $1 is to be built])\n  AC_MSG_RESULT([${ENABLE_$1}])\n  DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-$1=${ENABLE_$1}\"\n])\n  # The default for all tools\nAC_ARG_ENABLE( [tools], [\nAS_HELP_STRING([--enable-tools],[Build all tools by default])\nAS_HELP_STRING([--disable-tools],[Disable all tools by default])],\n                         [ENABLE_TOOLS=$enableval; DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-tools\"],\n                         [ENABLE_TOOLS=] )\n  # Individual tools\nMB_OPTIONAL_TOOL([mbconvert],    [yes], [yes])\nMB_OPTIONAL_TOOL([hexmodops],    [yes], [yes])\nMB_OPTIONAL_TOOL([vtkMOABReader],[${VTKMOAB_DEFAULT}], [${VTKMOAB_DEFAULT}])\nMB_OPTIONAL_TOOL([mbsize],       [yes], [yes])\nMB_OPTIONAL_TOOL([mbhonodes],    [yes], [yes])\nMB_OPTIONAL_TOOL([mbskin],       [yes], [yes])\nMB_OPTIONAL_TOOL([mbtagprop],    [yes], [yes])\nMB_OPTIONAL_TOOL([mbmem],        [yes], [yes])\nMB_OPTIONAL_TOOL([spheredecomp], [yes], [yes])\nMB_OPTIONAL_TOOL([mbsurfplot],   [yes], [yes])\nif (test \"x$WITH_ZOLTAN\" != \"xno\" || test \"x$METIS_DIR\" != \"x\"); then\n  MB_OPTIONAL_TOOL([mbpart],     [yes], [yes] )\nelse\n  MB_OPTIONAL_TOOL([mbpart],     [no], [no] )\nfi\n\n\nMB_OPTIONAL_TOOL([gsets],        [yes], [yes])\nMB_OPTIONAL_TOOL([mbmerge],      [yes], [yes])\nMB_OPTIONAL_TOOL([mbdepth],      [yes], [yes])\nif test \"x$enablempi\" != \"xno\"; then\n  MB_OPTIONAL_TOOL([mbcoupler],  [no], [yes] )\n  MB_OPTIONAL_TOOL([mcnpmit],    [no], [yes])\n  MB_OPTIONAL_TOOL([mbcslam],    [no], [yes])\nelse\n  AS_ECHO([\"Disabling mbcoupler, mbcslam and mcnpmit since these tools require MPI/parallel configuration\"])\n  MB_OPTIONAL_TOOL([mbcoupler],  [no], [no] )\n  MB_OPTIONAL_TOOL([mcnpmit],    [no], [no])\n  MB_OPTIONAL_TOOL([mbcslam],    [no], [no])\nfi\n\nMB_OPTIONAL_TOOL([refiner],      [no], [no])\nMB_OPTIONAL_TOOL([h5mtools],     [${enablehdf5}], [${enablehdf5}])\nMB_OPTIONAL_TOOL([mbquality],    [yes], [yes])\nMB_OPTIONAL_TOOL([mbtempest],    [${HAVE_TEMPEST}], [${HAVE_TEMPEST}])\nif (test \"xyes\" = \"x$ENABLE_tempestremap\"); then\n  if (test \"xyes\" != \"x$HAVE_TEMPEST\"); then\n    AC_MSG_ERROR([mbtempest requires TempestRemap library. Configure using --with-tempestremap])\n  fi\nfi\n\nMB_OPTIONAL_TOOL([ahf],          [no], [no])\nMB_OPTIONAL_TOOL([mbumr],        [yes], [yes])\nif (test \"xyes\" = \"x$ENABLE_ahf\"); then\n  AC_DEFINE([HAVE_AHF],[1],[Enable use of AHF data-structures for querying adjacency information])\nfi\n\nif test \"xyes\" = \"x$ENABLE_vtkMOABReader\"; then\n  if test \"xno\" = \"x$WITH_VTK\"; then\n    AC_MSG_ERROR([vtkMOABReader requires VTK])\n  elif (test \"x\" = \"x$WITH_VTK\"); then \n    WITH_VTK=yes\n  fi\nfi\n\ndnl Define a function that checks for the existence of a library\ndnl and if it exists, prepends the corresponding link flag to a \ndnl sepecified variable\ndnl Arguments:\ndnl  - The library name\ndnl  - The name of the variable to which to prepend the library link flag\ndnl  - List of extra libraries required for link test\ndnl  - Optional library path linker argument (e.g. -L/opt/foo)\n  AC_DEFUN([FATHOM_CHECK_LIB_LIST],[\n    old_LIBS=\"$LIBS\"\n    LIBS=\"$5 ${$3} $old_LIBS\"\n    AC_CHECK_LIB([$1],[main],[$3=\"-l$1 ${$3}\"],[],[$4])\n    ac_cv_lib_$1=ac_cv_lib_$1_main\n\n    LIBS=\"$old_LIBS\"\n  ])\n  \ndnl Define a function that checks for the existence of a library\ndnl and if it exists, prepends the corresponding link flag to a \ndnl sepecified variable\ndnl Arguments:\ndnl  - The library name\ndnl  - The name of the variable to which to prepend the library link flag\ndnl  - List of extra libraries required for link test\ndnl  - Optional library path linker argument (e.g. -L/opt/foo)\n  AC_DEFUN([FATHOM_CHECK_VTK_LIB_LIST],[\n    old_LIBS=\"$LIBS\"\n    LIBS=\"$5 ${$3} $old_LIBS\"\n    AC_CHECK_LIB([$1$VTK_LIB_SUFFIX], main, \n       [$3=\"-l$1$VTK_LIB_SUFFIX ${$3}\"],\n       [],[$4])dnl\n    LIBS=\"$old_LIBS\"\n  ])\n  \n\n################################################################################\n#                    VTK for vtkMOABReader\n################################################################################\nAC_DEFUN([FATHOM_MERGE_LISTS],[\n  $1=\"$2\"\n  # Reverse list two\n  for item3 in $3; do \n    found=no\n    for item2 in $2; do\n      if test \"x$item2\" = \"x$item3\"; then found=yes; fi\n    done\n    if test \"$found\" = \"no\"; then $1=\"${$1} $item3\"; fi\n  done\n  $1=\"${$1} $2\"\n])\n\nif  (test \"x$WITH_VTK\" != \"xno\" && test \"x$WITH_VTK\" != \"x\"); then\n  AC_PATH_X\n  AC_PATH_XTRA\n  if test \"xyes\" = \"x$no_x\"; then\n    AC_MSG_ERROR([X11 not found])\n  fi\n\n  AC_LANG_PUSH([C++])\n\n  VTK_INCLUDES=  \n  case \"x$WITH_VTK\" in\n    xyes|x)\n      VTK_LIB_DIR=\n      VTK_INC_DIR=\n      for dir in  /usr/local/include/vtk /usr/local/include/vtk-* /usr/include/vtk  /usr/include/vtk-*; do\n        if test \"x\" = \"x$VTK_INC_DIR\"; then\n          AC_CHECK_FILE([${dir}/vtkUnstructuredGrid.h],[VTK_INC_DIR=\"-I$dir\"])\n        fi\n      done\n      if test x = x\"$VTK_INC_DIR\"; then\n        AC_CHECK_HEADER([vtkUnstructuredGrid.h],[],\n                        [AC_MSG_ERROR([VTK includes not found])])\n      else\n        VTK_INCLUDES=\"$VTK_INC_DIR\"\n      fi\n      old_LIBS=\"$LIBS\"\n      for dir in /usr/lib/vtk /usr/lib /usr/bin /usr; do\n        if test \"x\" = \"x$VTK_LIB_DIR\"; then\n          LIBS=\"$old_LIBS -L$dir\"\n          FATHOM_CHECK_VTK_LIB_LIST([vtkCommonCore],[$VTK_LIB_SUFFIX], [VTK_LIB_DIR],[],[-L$dir])\n        fi\n      done\n      if test \"x\" = \"x$VTK_LIB_DIR\"; then\n        AC_MSG_ERROR([VTK libraries not found])\n      fi\n      LIBS=\"$old_LIBS\"\n      ;;\n    x?*)\n      VTK_LIB_DIR=\n      VTK_INC_DIR=\n      for dir in ${WITH_VTK}/include/vtk* ${WITH_VTK}/include ${WITH_VTK}/include/paraview* ${WITH_VTK}/VTK ${WITH_VTK}; do\n        if test \"x\" = \"x$VTK_INC_DIR\"; then\n          AC_CHECK_FILE([${dir}/vtkUnstructuredGrid.h],[VTK_INC_DIR=\"-I$dir\"])\n        fi\n      done\n      if test \"x\" = \"x$VTK_INC_DIR\"; then\n        # Check for non-installed VTK source\n        AC_CHECK_FILE([vtkUnstructuredGrid.h],[\n          for subdir in . Common Common/DataModel Filtering GenericFiltering Graphics Hybrid Imaging Parallel Patented Rendering Utilities Utilities/vtkexpat Utilities/expat Utilities/DICOMParser Utilties/vtkpng Utilities/vtkzlib Utilities/freetype/include/freetype Wrapping; do\n        \t  AC_MSG_CHECKING([for directory ${WITH_VTK}/$subdir])\n        \t  if test -d ${WITH_VTK}/$subdir; then\n        \t    VTK_INC_DIR=\"$VTK_INC_DIR -I${WITH_VTK}/$subdir\"\n        \t    AC_MSG_RESULT([yes])\n        \t  else\n        \t    AC_MSG_RESULT([no])\n        \t  fi\n        \tdone\n        \t],[AC_MSG_ERROR([VTK includes not found])]\n        )\n      fi\n      VTK_INCLUDES=\"$VTK_INC_DIR\"\n      old_LIBS=\"$LIBS\"\n      for dir in ${WITH_VTK}/lib ${WITH_VTK}/lib/vtk ${VTK_DIR}/bin ${WITH_VTK}/bin ${WITH_VTK}; do\n        if test \"x\" = \"x$VTK_LIB_DIR\"; then\n          LIBS=\"$old_LIBS -L$dir\"\n          FATHOM_CHECK_VTK_LIB_LIST([vtkCommonCore],[$VTK_LIB_SUFFIX], [VTK_LIB_DIR],[],[-L$dir])\n        fi\n      done\n      if test \"x\" = \"x$VTK_LIB_DIR\"; then\n        AC_MSG_ERROR([VTK libraries not found])\n      else\n        AC_DEFINE([HAVE_VTK],[1],[\"Define if configured with VTK I/O library support.\"])\n      fi\n      LIBS=\"$old_LIBS\"\n      ;;\n  esac\n\n   # These are ordered such that a given library depends only on those libraries\n   # that preceed it in the list.\n  FATHOM_CHECK_LIB_LIST([pthread],[AC_DEFINE([HAVE_PTHREAD],[1],[\"Define if configured with pthread support.\"])],[vtk_sys_libs])\n  FATHOM_CHECK_LIB_LIST([dl],[AC_DEFINE([HAVE_LDL],[1],[\"Define if configured with dynamic library loading support.\"])],     [vtk_sys_libs])\n  FATHOM_CHECK_LIB_LIST([m],[AC_DEFINE([HAVE_LM],[1],[\"Define if configured with math library support.\"])],      [vtk_sys_libs])\n  FATHOM_CHECK_LIB_LIST([gcc],[],    [vtk_sys_libs])\n  x_libs_arg=\"$X_EXTRA_LIBS -lX11 $X_PRE_LIBS\"\n  FATHOM_CHECK_LIB_LIST([Xext],[],[vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) \n  FATHOM_CHECK_LIB_LIST([ICE],[], [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) \n  FATHOM_CHECK_LIB_LIST([SM],[],  [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) \n  FATHOM_CHECK_LIB_LIST([Xt],[],  [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) \n  FATHOM_CHECK_LIB_LIST([GL],[AC_DEFINE([HAVE_GL],[1],[\"Define if configured with openGL library support.\"])],  [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) \n  FATHOM_CHECK_LIB_LIST([GLU],[], [vtk_x_libs],[$x_libs_arg],[-L$x_libraries]) \n  vtk_libs_arg=\"-L$x_libraries $vtk_x_libs $X_EXTRA_LIBS -lX11 $X_PRE_LIBS $vtk_sys_libs\"\n  \n  FATHOM_CHECK_VTK_LIB_LIST([vtksys],[$VTK_LIB_SUFFIX],        [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkCommonCore],[$VTK_LIB_SUFFIX], [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkDICOMParser],[$VTK_LIB_SUFFIX],[vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkfreetype],[$VTK_LIB_SUFFIX],   [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkexpat],[$VTK_LIB_SUFFIX],      [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkzlib],[$VTK_LIB_SUFFIX],       [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkpng],[$VTK_LIB_SUFFIX],        [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkjpeg],[$VTK_LIB_SUFFIX],       [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtktiff],[$VTK_LIB_SUFFIX],       [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkftgl],[$VTK_LIB_SUFFIX],       [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkFiltersCore],[$VTK_LIB_SUFFIX],  [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkImagingCore],[$VTK_LIB_SUFFIX],    [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([verdict],[$VTK_LIB_SUFFIX],       [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkGraphics],[$VTK_LIB_SUFFIX],   [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkNetCDF],[$VTK_LIB_SUFFIX],     [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkexoIIc],[$VTK_LIB_SUFFIX],     [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkmetaio],[$VTK_LIB_SUFFIX],     [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkIOCore],[$VTK_LIB_SUFFIX],         [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkRenderingCore],[$VTK_LIB_SUFFIX],  [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  FATHOM_CHECK_VTK_LIB_LIST([vtkParallelCore],[$VTK_LIB_SUFFIX],   [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  #FATHOM_CHECK_VTK_LIB_LIST([vtkHybrid],[$VTK_LIB_SUFFIX],     [vtk_libs],[$vtk_libs_arg],[-L$VTK_LIB_DIR])\n  \n   # Make sure we found at least vtkCommonCore and vtkRendering\n  if ! echo \"x $vtk_libs\" | grep lvtkCommonCore >/dev/null; then\n    AC_MSG_ERROR(\"VTK library 'vtkCommonCore' not found.\")\n  fi\n  \n  AC_LANG_POP([C++])\n\n  FATHOM_MERGE_LISTS([XLIBS_tmp],[$X_EXTRA_LIBS -lX11 $X_PRE_LIBS],[$vtk_x_libs])\n  FATHOM_MERGE_LISTS([XLIBS],[$vtk_sys_libs],[$XLIBS_tmp])\n  VTK_LIBS=\"$LIBS -L$VTK_LIB_DIR $vtk_libs $XLIBS\"\n  VTK_INCLUDES=\"$VTK_INCLUDES\"\n  AC_SUBST(VTK_LIBS)\n  AC_SUBST(VTK_INCLUDES)\n  AC_SUBST(VTK_LIB_DIR)\n  AC_SUBST(VTK_INC_DIR)\nfi\n\n################################################################################\n#                           Output Files\n################################################################################\nrm -r -f a.out\n\n# --------------------------------------------------------------\n# Print configuration info to the header file\n# --------------------------------------------------------------\nAC_DEFINE_UNQUOTED(CONFIGURE_INFO, [\"$0 run on `date`\"], [Configuration information.])\nAC_DEFINE_UNQUOTED(CONFIGURE_COMMAND, [\"$USER_CONFIGURE_CMD\"], [Configuration command along with user-specified options.])\nAC_SUBST(USER_CONFIGURE_CMD)\n\n# Some old versions of autoconf don't define docdir.  \n# Define it if autoconf did not.\nif test \"x\" = \"x$docdir\"; then\n  docdir='${datadir}/doc/moab'\n  AC_SUBST(docdir)\nfi\n\n# Let us define examplesdir. \n# Define it if autoconf did not already.\nif test \"x\" = \"x$examplesdir\"; then\n  examplesdir='${datadir}/examples'\n  AC_SUBST(examplesdir)\nfi\n\nCPPFLAGS=\"$MB_CPPFLAGS $CPPFLAGS\"\nFCPPFLAGS=`echo $MB_CPPFLAGS | sed -e \"s/-D/$FC_DEFINE/g\"`\nFCDEFS=`echo $MB_DEFS | sed -e \"s/-D/$FC_DEFINE/g\"`\nAC_SUBST([CPPFLAGS])\nAC_SUBST([FCPPFLAGS])\nAC_SUBST([MB_DEFS])\nAC_SUBST([FCDEFS])\nAM_LDFLAGS=\"$AM_LDFLAGS $EXPORT_LTFLAGS $EXPORT_LDFLAGS\"\nAC_SUBST([AM_LDFLAGS])\nAC_SUBST([EXPORT_LTFLAGS])\nAC_SUBST([EXPORT_LDFLAGS])\n\nAC_CONFIG_HEADERS([src/moab/EntityHandle.hpp\n                   src/parallel/moab_mpi_config.h\n                   src/moab/MOABConfig.h:config/MOABConfig.h.in])\nAX_PREFIX_CONFIG_H([src/moab/MOABConfig.h],[MOAB],[src/moab/MOABConfig.h])\n\nAC_CONFIG_FILES([Makefile \n                 moab.make                  \n                 MOABConfig.cmake:config/MOABConfig.cmake.in\n                 examples/makefile.config\n                 src/Makefile\n                 src/io/Makefile\n                 src/io/mhdf/Makefile\n                 test/Makefile\n                 test/h5file/Makefile\n                 test/dual/Makefile\n                 test/obb/Makefile\n                 test/perf/Makefile\n                 test/perf/point_location/Makefile\n                 test/io/Makefile\n                 test/parallel/Makefile\n                 pymoab/Makefile\n                 pymoab/setup.py\n                 itaps/iBase_f.h\n                 itaps/Makefile\n                 itaps/imesh/Makefile\n                 itaps/imesh/iMesh-Defs.inc\n                 itaps/fbigeom/Makefile\n                 itaps/fbigeom/FBiGeom-Defs.inc\n                 itaps/irel/Makefile\n                 itaps/irel/iRel-Defs.inc\n                 tools/Makefile\n                 tools/refiner/Makefile\n                 tools/mbcoupler/Makefile\n                 tools/mbcslam/Makefile\n                 tools/mcnpmit/Makefile\n                 tools/geometry/Makefile\n                 tools/vtkMOABReader/CMakeLists.txt\n                 doc/user.dox\n\t\t doc/cython_filter.py\n                 doc/config.tex\n                 MeshFiles/Makefile\n                 MeshFiles/unittest/Makefile\n                 MeshFiles/unittest/io/Makefile\n                 MeshFiles/unittest/fbigeom/Makefile\n                 MeshFiles/unittest/irel/Makefile\n                 MeshFiles/unittest/mbcslam/Makefile\n                 MeshFiles/unittest/h5file/Makefile\n                 MeshFiles/examples/Makefile\n                 ])\n\n# Specify the headers to create for mesquite\nAC_CONFIG_FILES([src/mesquite/Makefile\n                 itaps/mesquite/Makefile\n                 test/mesquite/Makefile\n                 test/mesquite/convert/Makefile\n                 test/mesquite/igeom/Makefile\n                 test/mesquite/imesh/Makefile\n                 test/mesquite/unit/Makefile\n                 test/mesquite/parallel_untangle_shape/Makefile \n                 test/mesquite/parallel_smooth_laplace/Makefile\n                 test/mesquite/wrapper_tests/Makefile\n                 test/mesquite/higher_order/Makefile\n                 test/mesquite/slaved/Makefile\n                 tools/mesquite/Makefile\n                 MeshFiles/mesquite/Makefile\n                 ])\n\nDISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS --enable-static=$enable_static --enable-shared=$enable_shared\"\n# DISTCHECK_CONFIGURE_FLAGS=\"$USER_CONFIGURE_CMD\"\n# make distcheck will use this DISTCHECK_CONFIGURE_FLAGS \n# variable to be passed to configure line\n# some people include a lot of env vars here\n# I think we need only those; only distcheck is affected by this\n## original is commented out below; we use only a few \n## for var in CC CFLAGS CPPFLAGS CXX CXXCPP LDFLAGS LIBS F90 FC F77; do\nfor var in CC CXX F90 FC F77 LDFLAGS LIBS; do\n  eval isset=\\${$var+set}\n  if test \"$isset\" = 'set' ; then\n    eval val=$`echo $var`\n    DISTCHECK_CONFIGURE_FLAGS=\"$DISTCHECK_CONFIGURE_FLAGS  $var=\\\"$val\\\"\"\n  fi\ndone\n\nAC_SUBST([DISTCHECK_CONFIGURE_FLAGS])\n\ndnl Before configuring libtool check for --enable-all-static option\nAC_ARG_ENABLE(all-static,\n  AS_HELP_STRING([--enable-all-static],\n                 [Build completely static (standalone) binaries.]),\n  [\n    if ( test \"x$enable_static\" != \"xno\" ); then\n      if ( test \"$enableval\" = \"yes\" ); then\n        LDFLAGS=\"-all-static $LDFLAGS\"\n      fi\n    else\n      AC_MSG_WARN([ Static linking disabled. Ignoring --enable-all-static option. Please add --enable-static also. ])\n    fi\n])\n\nAC_OUTPUT\n\nAC_MSG_RESULT([C:   $CC $CFLAGS $CPPFLAGS])\nAC_MSG_RESULT([C++: $CXX $CXXFLAGS $CPPFLAGS])\nif (test \"xno\" != \"x$ENABLE_FORTRAN\"); then\n  AC_MSG_RESULT([Fortran90: $FC $FCFLAGS $FCPPFLAGS])\nfi\nif (test \"xno\" != \"x$ENABLE_FORTRAN\"); then\n  AC_MSG_RESULT([Fortran77: $F77 $FFLAGS $FCPPFLAGS])\nfi\nAC_MSG_RESULT([Linker: $LD $EXPORT_LDFLAGS $CXX_LDFLAGS $LDFLAGS -L${PWD}/src/.libs -lMOAB $PNETCDF_LIBS $NETCDF_LIBS $CGNS_LIBS $HDF5_LIBS $CCMIO_LIBS $CGM_LIBS $ZOLTAN_LIBS $PARMETIS_LIBS $METIS_LIBS $LIBS])\n\nif test \"x$enablehdf5\" = \"xno\"; then\n  AC_MSG_WARN([\n*************************************************************************\n*            MOAB has been configured w/out the HDF5 library.\n*              Support for native file format is disabled!\n*************************************************************************])\nfi\n\nif test \"x$enablenetcdf\" = \"xno\"; then\n  AC_MSG_WARN([\n*************************************************************************\n*           MOAB has been configured w/out the NetCDF library.\n*     Support for ExodusII/Genesis and other file formats is disabled!\n*************************************************************************])\nelif test \"xno\" = \"x$NETCDF_SUFFICIENT_DIMS_VARS\"; then\n  AC_MSG_WARN([\n*************************************************************************\n*  The configured NetCDF library does not have sufficient constant limits\n*  to support reading of ExodusII with large numbers of blocks or sidesets\n*  or nodesets.  Please consider re-compiling your NetCDF library after\n*  increasing the constants NC_MAX_DIMS and NC_MAX_VARS in netcdf.h to\n*  65536 and 524288, respectively.  See: \n*  http://cubit.sandia.gov/help-version11.1/finite_element_model/export/exporting_exodus2_file.htm\n*************************************************************************])\nfi\n\nif test \"x$WARN_PARALLEL_HDF5\" = \"xyes\"; then\n  AC_MSG_WARN([\n*************************************************************************\n*        MOAB has been configured with parallel and HDF5 support\n*     but the configured HDF5 library does not support parallel IO.\n*            Some parallel IO capabilities will be disabled.\n*************************************************************************])\nfi\n\nif test \"x$WARN_PARALLEL_HDF5_NO_COMPLEX\" = \"xyes\"; then\n  AC_MSG_WARN([\n*************************************************************************\n*     Your parallel HDF5 library is configured without \n*     H5_MPI_COMPLEX_DERIVED_DATATYPE_WORKS .  For the types of IO\n*     patterns MOAB typically does this will result in degrading\n*     collective IO calls to independent IO, which may have a very\n*     significant impact on IO performance.\n*************************************************************************])\nfi\n\n\n# echo \"Other details\"\n# echo \"Static: $enable_static\"\n# echo \"Shared: $enable_shared\"\n# echo \"BLAS: $enableblas\"\n# echo \"LAPACK: $enablelapack\"\n# echo \"Zoltan: $enablezoltan\"\n# echo \"Zlib: $enablezlib\"\n# echo \"SZip: $enableszip\"\n\n\nif test \"x$enable_pymoab\" != \"xno\" && test \"x$pymoab_custom_install\" = \"xyes\" ; then\nAC_MSG_NOTICE([\n*************************************************************************\n*     The PyMOAB interface will be installed to a custom location.\n*     In order to access this module from a python interpreter, please add\n*     its install location to the PYTHONPATH environment variable:\n*\n*     export PYTHONPATH=$pythondir:\\$PYTHONPATH\n*\n*************************************************************************])\nfi\n\n# define([ConfigurationSuggestion], [`esyscmd(config/suggest_configure_command)'])\n# m4_echo(echo \"m4_expand([ConfigurationSuggestion])\")\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/itaps/imesh/quad9.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/examples/earth/poly2000.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/8hex.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/Homme_2pt.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/testtet.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/mbtest1.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/64bricks_512hex.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/1hex.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/onepart.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/spectral.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/quads.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/quad_1000.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/sphere_quads_5_ML_1.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/surfrandomtris-4part.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/mpas_p8.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/cell2.gen.gz",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/disk.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/mbtest3.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/testquad-cyl.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/32hex_ef.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/64bricks_512hex_256part.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/testquad-cyl.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/4tet.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/surfrandom.facet",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/125hex.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/mbtest2.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/3k-tri-cube.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/SECrop2.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/16_unmerged_hex.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/test_geom.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/1tet.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/cell1.gen.gz",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/mb_big_test.g.gz",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/ptest.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/triangles.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/1khex.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/BedCrop2.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/test.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/64bricks_1khex.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/testquad.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/twoPolyh.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/merge_with_tag.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/sphere_quads_5_ML_0.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/64bricks_12ktet.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/PB.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/hex_2048.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/mbcslam/outCSMesh.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/mbcslam/fine4.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/mbcslam/outRLLMesh.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/oneside.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/singlecyl.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/brick_cubit10.1.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/eul3x48x96.t0.nc",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/gcrm_r3.nc",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/2d_naca0012.cgns",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/eul3x48x96.t.3.nc",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/mpasx1.642.t.2.nc",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/p8ex1.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/singlecyl.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/eul3x48x96.t2.nc",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/eul3x48x96.t1.nc",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/hex_2x2x2_ss.exo",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/fv3x46x72.t.3.nc",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/mix.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/singlecyl.ccmg",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/homme3x3458.t.3.nc",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/cube_5x5.lnx64.ccmg",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/brick_cubit10.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/polyg.exo",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/ho_test.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/polyh.exo",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/HommeMapping.nc",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/cubtest14.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/test.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/brick_cubit10.2.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/ho_test.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/io/cubtest12.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/fbigeom/shell.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/fbigeom/shellQuad.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/fbigeom/shell2.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/irel/brick.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/irel/cyl2.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/irel/brick.facet",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/h5file/portable_x86_64.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/h5file/v3_dodec.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/h5file/rocket_ents_in_assm.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/h5file/portable_x86_32.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/MeshFiles/unittest/h5file/portable_power_32.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/.git/objects/pack/pack-d600c8125e0b2e5cd5f976db2525ed5c9d311a2e.pack",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/.git/objects/pack/pack-d600c8125e0b2e5cd5f976db2525ed5c9d311a2e.idx",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/pymoab/tests/cyl_grps.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/examples/old/deform_mesh/MeshFiles/rodquad-fine.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/examples/old/deform_mesh/MeshFiles/rodquad-finest.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/examples/old/deform_mesh/MeshFiles/rodtri-finest.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/examples/old/deform_mesh/MeshFiles/rodtri-fine.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/examples/old/deform_mesh/MeshFiles/rodtri-coarse.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/examples/old/deform_mesh/MeshFiles/rodquad-finer.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/examples/old/deform_mesh/MeshFiles/rodtri-finer.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/examples/old/deform_mesh/MeshFiles/rodquad-coarse.g",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/tools/refiner/fourVolsBare.cub",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/tools/mbcoupler/conjHexParti.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/tools/mbcoupler/conjTetPartiField.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/tools/mbcoupler/conjTetParti.h5m",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/doc/DG/figure3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/doc/DG/figure2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/doc/DG/figure1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/doc/UG/simple.png",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/doc/UG/uref_timeEtype.png",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/doc/UG/vis_part.png",
        "/tmp/vanessa/spack-stage/spack-stage-moab-5.0.1-nsbxfbhzy7nigtpaie3nejse7p76v3vh/spack-src/doc/UG/uref_allEtype.png"
    ],
    "total_files": 1807
}