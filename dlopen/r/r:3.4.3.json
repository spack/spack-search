{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/configure.ac": "### configure.ac\t\t\t\t\t-*- Autoconf -*-\n###\n### Process this file with autoconf to produce a configure script.\n###\n### Copyright (C) 1998-2017 R Core Team\n###\n### This file is part of R.\n###\n### R is free software; you can redistribute it and/or modify it under\n### the terms of the GNU General Public License as published by the Free\n### Software Foundation; either version 2 of the License, or (at your\n### option) any later version.\n###\n### R is distributed in the hope that it will be useful, but WITHOUT ANY\n### WARRANTY; without even the implied warranty of MERCHANTABILITY or\n### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n### License for more details.\n###\n### You should have received a copy of the GNU General Public License\n### along with R; if not, a copy is available at\n### https://www.r-project.org/Licenses/\n\nAC_PREREQ(2.62)\n\n## We want to get the version number from file 'VERSION' (rather than\n## specifying the version info in 'configure.ac'.  Hence, we need a bit\n## of M4 magic.  Note that M4 esyscmd has a trailing newline because the\n## shell command output has one, hence the patsubst() trick.\nm4_define([R_VERSION],\n          m4_bpatsubst(m4_esyscmd([cat VERSION]),\n                       [\\([0-9.]*\\)\\(\\w\\|\\W\\)*],\n                       [\\1]))\nAC_INIT([R],[R_VERSION],[https://bugs.r-project.org],[R],[https://www.r-project.org])\nAC_CONFIG_SRCDIR([src/include/Defn.h])\nAC_CONFIG_AUX_DIR([tools])\n\n### * Information on the package.\n\ndnl ## Automake initialization.\ndnl Not needed, and possibly resulting in non-portable configure scripts\ndnl with hard-wired Automake API numbers (aclocal-1.x) ...\ndnl AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)\ndnl Nevertheless, we need to provide PACKAGE and VERSION ...\nPACKAGE=[${PACKAGE_NAME}]\nAC_DEFINE_UNQUOTED(PACKAGE, \"${PACKAGE}\", [Name of package])\nAC_SUBST(PACKAGE)\nVERSION=[${PACKAGE_VERSION}]\nAC_DEFINE_UNQUOTED(VERSION, \"${VERSION}\", [Version number of package])\nAC_SUBST(VERSION)\nMAJ_MIN_VERSION=`echo ${VERSION} | sed 's/\\.[[0-9]]$//'`\nAC_SUBST(MAJ_MIN_VERSION)\n\n## Autoheader initialization.\nAH_TOP([#ifndef R_CONFIG_H\n#define R_CONFIG_H])\nAH_BOTTOM([\n#endif /* not R_CONFIG_H */])\n\n## We call AC_GNU_SOURCE early (it is a prerequisite for the gettext\n## macros), so all the C compiling makes use of that.  Nowadays it calls\n## AC_USE_SYSTEM_EXTENSIONS ....\n## This sets _GNU_SOURCE, so glibc defines all its extensions\n## (_POSIX_C_SOURCE, _XOPEN_SOURCE, _BSD_SOURCE, __USE_MISC) and these\n## unlock declarations of non-C99 functions and constants.  \n## Ditto for __EXTENSIONS__ on Solaris and _ALL_SOURCE on AIX.\n\n### ** Platform.\n\nAC_CANONICAL_HOST\nAC_DEFINE_UNQUOTED(R_PLATFORM, \"${host}\",\n[Define this to be the canonical name (cpu-vendor-os) of your system.])\nAC_DEFINE_UNQUOTED(R_CPU, \"${host_cpu}\",\n[Define this to be the name of the CPU of your system.])\nAC_DEFINE_UNQUOTED(R_VENDOR, \"${host_vendor}\",\n[Define this to be the name of the vendor of your system.])\nAC_DEFINE_UNQUOTED(R_OS, \"${host_os}\",\n[Define this to be the name of the OS of your system.])\n\n## exclude some unsupported OSes\ncase \"${host_os}\" in\n   ## Darwin 1.3.1 was macOS 10.0, 1.4.1 was 10.1, 5 is 10.2 etc\n   ## with 13 being 10.9.  We no longer support < 10.6 (Snow Leopard, Darwin 10)\n   ## https://en.wikipedia.org/wiki/Darwin_OS\n   darwin1.*)\n     AC_MSG_ERROR([The earliest supported macOS is 10.6.]\n     ;; \n  darwin[[56789]]*)\n     AC_MSG_ERROR([The earliest supported macOS is 10.6.]\n     ;; \n  aix[[123]]*|aix4.[[01]]*)\n    ## These need a form of linking we no longer support\n    AC_MSG_ERROR([AIX prior to 4.2 is not supported])\n    ;;\nesac\n\nR_PLATFORM=\"${host}\"\nAC_SUBST(R_PLATFORM)\nR_OS=\"${host_os}\"\nAC_SUBST(R_OS)\n\ncase \"${host_os}\" in\n  mingw*|windows*|winnt)\n    AC_DEFINE(Win32, 1,\n              [Define according to your operating system type.])\n    R_OSTYPE=\"windows\"\n    ;;\n  *)\n    AC_DEFINE(Unix, 1,\n              [Define according to your operating system type.])\n    R_OSTYPE=\"unix\"\n   ;;\nesac\nAC_SUBST(R_OSTYPE)\n\nR_CONFIG_ARGS=\"${ac_configure_args}\"\nAC_SUBST(R_CONFIG_ARGS)\n\n### ** Defaults.\n\n## NB: autoconf loads such files too\ncfile=\"${srcdir}/config.site\"\nif test -r \"${cfile}\"; then\n  echo \"loading site script '${cfile}'\"\n  . \"${cfile}\"\nfi\ncfile=\"${HOME}/.R/config\"\nif test -r \"${cfile}\"; then\n  echo \"loading user script '${cfile}'\"\n  . \"${cfile}\"\nfi\ncfile=\"./config.site\"\nif test -r \"${cfile}\"; then\n  echo \"loading build-specific script '${cfile}'\"\n  . \"${cfile}\"\nfi\n\n## We need to establish suitable defaults for a 64-bit OS\nlibnn=lib\ncase \"${host_os}\" in\n  linux*)\n    ## Not all distros use this: some choose to march out of step\n    ## Allow for ppc64le (Debian calls ppc64el), powerpc64le ...\n    case \"${host_cpu}\" in\n      x86_64|mips64|ppc64*|powerpc64*|sparc64|s390x)\n        if test -d /usr/lib64; then\n          libnn=lib64\n\tfi\n      ;;\n    esac\n    ;;\n  solaris*)\n    ## libnn=lib/sparcv9 ## on 64-bit only, but that's compiler-specific\n    ;;  \nesac\n: ${LIBnn=$libnn}\n## We provide these defaults so that headers and libraries in\n## '/usr/local' are found (by the native tools, mostly).\nif test -f \"/sw/etc/fink.conf\"; then\n  : ${CPPFLAGS=\"-I/sw/include -I/usr/local/include\"}\n  : ${LDFLAGS=\"-L/sw/lib -L/usr/local/lib\"}\nelse\n  : ${CPPFLAGS=\"-I/usr/local/include\"}\n  : ${LDFLAGS=\"-L/usr/local/${LIBnn}\"}\nfi\nAC_SUBST(LIBnn)\n## take care not to  override the command-line setting\nif test \"${libdir}\" = '${exec_prefix}/lib'; then\n  libdir='${exec_prefix}/${LIBnn}'\nfi\n\n## R installation directories\nm4_divert_once([HELP_BEGIN], [\nR installation directories:\n  --libdir=DIR        R files to R_HOME=DIR/R @<:@EPREFIX/$LIBnn@:>@\n    rdocdir=DIR       R doc files to DIR      @<:@R_HOME/doc@:>@\n    rincludedir=DIR   R include files to DIR  @<:@R_HOME/include@:>@\n    rsharedir=DIR     R share files to DIR    @<:@R_HOME/share@:>@])dnl\n\nif test -z \"${rdocdir}\"; then\n  rdocdir='${rhome}/doc'\nfi\nAC_SUBST([rdocdir])\n\nif test -z \"${rincludedir}\"; then\n  rincludedir='${rhome}/include'\nfi\nAC_SUBST([rincludedir])\n\nif test -z \"${rsharedir}\"; then\n  rsharedir='${rhome}/share'\nfi\nAC_SUBST([rsharedir])\n\n### ** Handle arguments to configure.\n\nconfig_opts=\"${ac_configure_args}\"\nAC_SUBST(config_opts)\n\n### ** Optional features.\n\n## Allow the user to specify support for R profiling.\nAC_ARG_ENABLE([R-profiling],\n[AS_HELP_STRING([--enable-R-profiling],[attempt to compile support for Rprof() @<:@yes@:>@])],\n[if test \"${enableval}\" = no; then\n  want_R_profiling=no\nelif test \"${enableval}\" = yes; then\n  want_R_profiling=yes\nelse\n  want_R_profiling=yes\nfi],\n[want_R_profiling=yes])\n\n## Allow the user to specify support for memory profiling.\nAC_ARG_ENABLE([memory-profiling],\n[AS_HELP_STRING([--enable-memory-profiling],[attempt to compile support for Rprofmem(), tracemem() @<:@no@:>@])],\n[if test \"${enableval}\" = no; then\n  want_memory_profiling=no\nelif test \"${enableval}\" = yes; then\n  want_memory_profiling=yes\nelse\n  want_memory_profiling=no\nfi],\n[want_memory_profiling=no])\n\n## Allow the user to specify building an R framework (Darwin).\nAC_ARG_ENABLE([R-framework],\n[AS_HELP_STRING([--enable-R-framework@<:@=DIR@:>@],[macOS only: build R framework (if possible), and specify\n                 its installation prefix @<:@no, /Library/Frameworks@:>@])],\n[want_R_framework=\"${enableval}\"],\n[want_R_framework=no])\n## Can only build frameworks on Darwin.\nif test \"${want_R_framework}\" != no; then\n  case \"${host_os}\" in\n    darwin*)\n      if test \"${want_R_framework}\" = yes; then\n        ## If we build a framework and 'prefix' was not given, we need\n        ## to set it to '/Library/Frameworks' rather than '/usr/local'.\n        ## Note that Autoconf sets things up so that by default, prefix\n        ## and exec_prefix are set to 'NONE'.  Let's hope for no change.\n\tif test \"x${prefix}\" = xNONE; then\n          prefix=\"/Library/Frameworks\"\n        fi\n      else\n\tprefix=\"${want_R_framework}\"\n\twant_R_framework=yes\n      fi\n      ## FW_VERSION is the sub-directory name used in R.framework/Version\n      ## By default it's the a.b form of the full a.b.c version to simplify\n      ## binary updates.\n      : ${FW_VERSION=`echo \"${PACKAGE_VERSION}\" | sed -e \"s/[[\\.]][[0-9]]$//\"`}\n      ;;\n    *)\n      want_R_framework=no\n      ;;\n  esac\nfi\nAM_CONDITIONAL(WANT_R_FRAMEWORK, [test \"x${want_R_framework}\" = xyes])\n\n## Allow the user to specify building R as a shared library.\n## (but a 'dynamic library' in the terminology of macOS).\n## <NOTE>\n## Building a framework implies building R shared libraries, hence the\n## strange default.\n## We might want to warn about the case where '--disable-R-shlib' was\n## given explicitly ...\n## </NOTE>\nAC_ARG_ENABLE([R-shlib],\n[AS_HELP_STRING([--enable-R-shlib],[build the shared/dynamic library 'libR' @<:@no@:>@])],\n[want_R_shlib=\"${enableval}\"],\n[want_R_shlib=\"${want_R_framework}\"])\nAM_CONDITIONAL(WANT_R_SHLIB, [test \"x${want_R_shlib}\" = xyes])\n\nAC_ARG_ENABLE([R-static-lib],\n[AS_HELP_STRING([--enable-R-static-lib],[build the static library 'libR.a' @<:@no@:>@])],\n[want_R_static=\"${enableval}\"],\n[want_R_static=\"no\"])\nif test \"x${want_R_static}\" = xyes; then\n  if test \"x${want_R_shlib}\" = xyes; then\n    AC_MSG_WARN([--enable-R-static-lib conflicts with --enable-R-shlib and will be ignored])\n    want_R_static=no\n  fi\nfi\nAM_CONDITIONAL(WANT_R_STATIC, [test \"x${want_R_static}\" = xyes])\n\n## Build separate shared/dynamic library containing R's BLAS if desired \nAC_ARG_ENABLE([BLAS-shlib],\n[AS_HELP_STRING([--enable-BLAS-shlib],[build BLAS into a shared/dynamic library @<:@perhaps@:>@])],\n[use_blas_shlib=\"${enableval}\"],\n[use_blas_shlib=\"unset\"])\n\n## As from R 3.2.0 split up -L... and -lR\nif test \"${want_R_shlib}\" = yes; then\n  LIBR0=\"-L\\$(R_HOME)/lib\\$(R_ARCH)\"\n  LIBR1=-lR\nelse\n  LIBR0=\n  LIBR1=\nfi\n\n## Enable maintainer-specific portions of Makefiles.\nAC_ARG_ENABLE([maintainer-mode],\n[AS_HELP_STRING([--enable-maintainer-mode],[enable make rules and dependencies not useful (and\n                 maybe confusing) to the casual installer @<:@no@:>@])],\n[use_maintainer_mode=\"${enableval}\"],\n[use_maintainer_mode=no])\nAM_CONDITIONAL(MAINTAINER_MODE, [test \"x${use_maintainer_mode}\" = xyes])\n\n## Enable testing the write barrier.\nAC_ARG_ENABLE([strict-barrier],\n[AS_HELP_STRING([--enable-strict-barrier],[provoke compile error on write barrier violation\n                 @<:@no@:>@])],\n[use_strict_barrier=\"${enableval}\"],\n[use_strict_barrier=no])\nif test x\"${use_strict_barrier}\" = xyes; then\n  AC_DEFINE(TESTING_WRITE_BARRIER, 1,\n            [Define to enable provoking compile errors on write barrier\n             violation.])\nfi\n\nAC_ARG_ENABLE([prebuilt-html],\n[AS_HELP_STRING([--enable-prebuilt-html],[build static HTML help pages @<:@no@:>@])],\n[want_prebuilt_html=\"${enableval}\"],\n[want_prebuilt_html=no])\nAM_CONDITIONAL(BUILD_HTML, [test \"x${want_prebuilt_html}\" = xyes])\n\nAC_ARG_ENABLE([lto],\n[AS_HELP_STRING([--enable-lto],[enable link-time optimization @<:@no@:>@])],\n[want_lto=\"${enableval}\"], [want_lto=no])\n## FIXME: add a test for gcc >= 4.5.0\nif test \"x${want_lto}\" != xno; then\n  LTO=-flto\nfi\nif test \"x${want_lto}\" = xyes; then\n  LTOALL=-flto\nfi\nAC_SUBST(LTO)\nAC_SUBST(LTOALL)\nAM_CONDITIONAL(BUILD_LTO, [test \"x${want_lto}\" != xno])\n\nAC_ARG_ENABLE([java],\n[AS_HELP_STRING([--enable-java],[enable Java @<:@yes@:>@])],\n[want_java=\"${enableval}\"],\n[want_java=yes])\nAM_CONDITIONAL(WANT_JAVA, [test \"x${want_java}\" = xyes])\n\n### ** Optional packages.\n\n## BLAS.\nAC_ARG_WITH([blas],\n[AS_HELP_STRING([--with-blas],[use system BLAS library (if available), or specify it @<:@no@:>@])],\n[R_ARG_USE(blas)],\n[use_blas=unset])\n# default is \"no\" except on macOS\n\n## LAPACK.\nAC_ARG_WITH([lapack],\n[AS_HELP_STRING([--with-lapack],[use system LAPACK library (if available), or specify it @<:@no@:>@])],\n[R_ARG_USE(lapack)],\n[use_lapack=unset])\n# default is \"no\" except on macOS\n\n## Readline.\nAC_ARG_WITH([readline],\n[AS_HELP_STRING([--with-readline],[use readline library @<:@yes@:>@])],\n[R_ARG_USE(readline)],\n[use_readline=yes])\n\n## Aqua.\nAC_ARG_WITH([aqua],\n[AS_HELP_STRING([--with-aqua],[macOS only: use Aqua (if available) @<:@yes@:>@])],\n[if test \"${withval}\" = no; then\n  want_aqua=no\nelse\n  want_aqua=yes\nfi],\n[want_aqua=yes])\n\n## Tcl/Tk.\nAC_ARG_WITH([tcltk],\n[AS_HELP_STRING([--with-tcltk],[use Tcl/Tk (if available), or specify its library dir @<:@yes@:>@])],\n[if test \"${withval}\" = no; then\n  want_tcltk=no\nelif test \"${withval}\" = yes; then\n  want_tcltk=yes\nelse\n  want_tcltk=yes\n  LDFLAGS=\"${LDFLAGS} -L${withval}\"\n  tcltk_prefix=\"${withval}\"\nfi],\n[want_tcltk=yes])\nAC_ARG_WITH([tcl-config],\n[AS_HELP_STRING([--with-tcl-config=TCL_CONFIG],[specify location of tclConfig.sh @<:@@:>@])],\n[TCL_CONFIG=\"${withval}\"],\n[TCL_CONFIG=\"\"])\nAC_ARG_WITH([tk-config],\n[AS_HELP_STRING([--with-tk-config=TK_CONFIG],[specify location of tkConfig.sh @<:@@:>@])],\n[TK_CONFIG=\"${withval}\"],\n[TK_CONFIG=\"\"])\n\n## cairographics etc\nAC_ARG_WITH([cairo],\n[AS_HELP_STRING([--with-cairo],[use cairo (and pango) if available @<:@yes@:>@])],\n[if test \"${withval}\" = no; then\n  want_cairo=no\nelse\n  want_cairo=yes\nfi], [want_cairo=yes])\n\n## other libraries\nAC_ARG_WITH([libpng],\n[AS_HELP_STRING([--with-libpng],[use libpng library (if available) @<:@yes@:>@])],\n[R_ARG_USE(libpng)],\n[use_libpng=yes])\nAC_ARG_WITH([jpeglib],\n[AS_HELP_STRING([--with-jpeglib],[use jpeglib library (if available) @<:@yes@:>@])],\n[R_ARG_USE(jpeglib)],\n[use_jpeglib=yes])\nAC_ARG_WITH([libtiff],\n[AS_HELP_STRING([--with-libtiff],[use libtiff library (if available) @<:@yes@:>@])],\n[R_ARG_USE(libtiff)],\n[use_libtiff=yes])\nAC_ARG_WITH([system-tre],\n[AS_HELP_STRING([--with-system-tre],[use system tre library (if available) @<:@no@:>@])],\n[R_ARG_USE_SYSTEM(tre)],\n[use_system_tre=no])\n\n## Valgrind instrumentation\nAC_ARG_WITH([valgrind-instrumentation],\n[AS_HELP_STRING([--with-valgrind-instrumentation],[Level of additional instrumentation for Valgrind (0/1/2) @<:@0@:>@])],\n[valgrind_level=${withval}],\n[valgrind_level=0])\n\nAC_ARG_WITH([system-valgrind-headers],\n[AS_HELP_STRING([--with-system-valgrind-headers],[use system valgrind headers (if available) @<:@no@:>@])],\n[R_ARG_USE_SYSTEM(valgrind)],\n[use_system_valgrind=no])\n\nAC_ARG_WITH([internal-tzcode],\n[AS_HELP_STRING([--with-internal-tzcode],[use internal time-zone code @<:@no@:>@])],\n[use_internal_tzcode=${withval}],\n[use_internal_tzcode=default])\n\n\n## <FIXME>\n## Completely disable using libtool for building shlibs until libtool\n## fully supports Fortran and C++.\n## AC_ARG_WITH([libtool],\n## [AS_HELP_STRING([--with-libtool],[use libtool for building shared libraries @<:@yes@:>@])],\n## [use_libtool=\"${withval}\"],\n## [use_libtool=yes])\n## AM_CONDITIONAL(USE_LIBTOOL, [test \"x${use_libtool}\" = xyes])\n## </FIXME>\n\n## Recommended R packages.\nAC_ARG_WITH([recommended-packages],\n[AS_HELP_STRING([--with-recommended-packages],[use/install recommended R packages @<:@yes@:>@])],\n[R_ARG_USE(recommended_packages)],\n[use_recommended_packages=yes])\n\n## ICU\nAC_ARG_WITH([ICU],\n[AS_HELP_STRING([--with-ICU],[use ICU library (if available) @<:@yes@:>@])],\n[R_ARG_USE(ICU)],\n[use_ICU=yes])\n\n## Byte-compilation of packages.\nAC_ARG_ENABLE([byte-compiled-packages],\n[AS_HELP_STRING([--enable-byte-compiled-packages],\n                [byte-compile base and recommended packages @<:@yes@:>@])],\n[want_byte_compiled_packages=\"${enableval}\"],\n[want_byte_compiled_packages=yes])\nAM_CONDITIONAL(BYTE_COMPILE_PACKAGES,\n               [test \"x${want_byte_compiled_packages}\" = xyes])\n\n### ** Precious variables.\n\nAC_ARG_VAR([R_PRINTCMD],\n           [command used to spool PostScript files to the printer])\nAC_ARG_VAR([R_PAPERSIZE],\n           [paper size for the local (PostScript) printer])\nAC_ARG_VAR([R_BATCHSAVE],\n           [set default behavior of R when ending a session])\nAC_ARG_VAR([MAIN_CFLAGS],\n           [additional CFLAGS used when compiling the main binary])\nAC_ARG_VAR([SHLIB_CFLAGS],\n           [additional CFLAGS used when building shared objects])\nAC_ARG_VAR([MAIN_FFLAGS],\n           [additional FFLAGS used when compiling the main binary])\nAC_ARG_VAR([SHLIB_FFLAGS],\n           [additional FFLAGS used when building shared objects])\nAC_ARG_VAR([MAIN_LD],\n           [command used to link the main binary])\nAC_ARG_VAR([MAIN_LDFLAGS],\n           [flags which are necessary for loading a main program which\n            will load shared objects (DLLs) at runtime])\nAC_ARG_VAR([CPICFLAGS],\n           [special flags for compiling C code to be turned into a\n            shared object.])\nAC_ARG_VAR([FPICFLAGS],\n           [special flags for compiling Fortran code to be turned into a\n            shared object.])\nAC_ARG_VAR([FCPICFLAGS],\n           [special flags for compiling Fortran 95 code to be turned into a\n            shared object.])\nAC_ARG_VAR([SHLIB_LD],\n           [command for linking shared objects which contain object\n            files from a C or Fortran compiler only])\nAC_ARG_VAR([SHLIB_LDFLAGS],\n           [special flags used by SHLIB_LD])\nAC_ARG_VAR([DYLIB_LD],\n           [command for linking dynamic libraries which contain object\n            files from a C or Fortran compiler only])\nAC_ARG_VAR([DYLIB_LDFLAGS],\n           [special flags used for make a dynamic library])\nAC_ARG_VAR([CXXPICFLAGS],\n           [special flags for compiling C++ code to be turned into a\n            shared object])\nAC_ARG_VAR([SHLIB_CXXLD],\n           [command for linking shared objects which contain object\n            files from the C++ compiler])\nAC_ARG_VAR([SHLIB_CXXLDFLAGS],\n           [special flags used by SHLIB_CXXLD])\nAC_ARG_VAR([SHLIB_FCLD],\n           [command for linking shared objects which contain object\n            files from the Fortran 95 compiler])\nAC_ARG_VAR([SHLIB_FCLDFLAGS],\n           [special flags used by SHLIB_FCLD])\nAC_ARG_VAR([TCLTK_LIBS],\n           [flags needed for linking against the Tcl and Tk libraries])\nAC_ARG_VAR([TCLTK_CPPFLAGS],\n           [flags needed for finding the tcl.h and tk.h headers])\nAC_ARG_VAR([MAKE], [make command])\nAC_ARG_VAR([TAR], [tar command])\nAC_ARG_VAR([R_BROWSER], [default browser])\nAC_ARG_VAR([R_PDFVIEWER], [default PDF viewer])\nAC_ARG_VAR([BLAS_LIBS],\n           [flags needed for linking against external BLAS libraries])\nAC_ARG_VAR([LAPACK_LIBS],\n           [flags needed for linking against external LAPACK libraries])\nAC_ARG_VAR([LIBnn], ['lib' or 'lib64' for dynamic libraries])\nAC_ARG_VAR([SAFE_FFLAGS],\n\t   [Safe Fortran 77 compiler flags for e.g. dlamc.f])\nAC_ARG_VAR([r_arch],\n           [Use architecture-dependent subdirs with this name])\nAC_ARG_VAR([DEFS], [C defines for use when compiling R])\nAC_ARG_VAR([JAVA_HOME],\n           [Path to the root of the Java environment])\nAC_ARG_VAR([R_SHELL],\n           [shell to be used for shell scripts, including 'R'])\n\nif test -z \"${r_arch}\"; then\n  R_ARCH=\n  R_XTRA_CPPFLAGS2=\"-I\\$(R_INCLUDE_DIR)\"\nelse\n  R_ARCH=\"/${r_arch}\"\n  R_XTRA_CPPFLAGS2=\"-I\\$(R_INCLUDE_DIR) -I\\$(R_INCLUDE_DIR)/${r_arch}\"\nfi\nAC_DEFINE_UNQUOTED(R_ARCH, \"${r_arch}\",\n[Define this to use architecture-dependent subdirectories of this name.])\nAC_SUBST([R_ARCH])\nAC_SUBST([R_XTRA_CPPFLAGS2])\n\n### ** Check whether we build in srcdir.\n\nAC_PATH_PROG(GETWD, pwd, pwd)\nAC_MSG_CHECKING([whether builddir is srcdir])\nif test \"`cd \\\"${srcdir}\\\" && ${GETWD}`\" = \"`${GETWD}`\"; then\n  BUILDDIR_IS_SRCDIR=yes\nelse\n  BUILDDIR_IS_SRCDIR=no\nfi\nAC_SUBST(BUILDDIR_IS_SRCDIR)\nAC_MSG_RESULT([${BUILDDIR_IS_SRCDIR}])\n\n### * Checks for programs.\n\nR_MISSING_PROG(ACLOCAL, aclocal)\nR_MISSING_PROG(AUTOCONF, autoconf)\nR_MISSING_PROG(AUTOMAKE, automake)\nR_MISSING_PROG(AUTOHEADER, autoheader)\nAC_PROG_LN_S\nAC_PROG_YACC\nR_PROG_AR\nR_PROG_INSTALL\n\n## we would like a POSIX sed, and need one on Solaris\nAC_PATH_PROGS(SED, sed, /bin/sed, [/usr/xpg4/bin:$PATH])\n## 'which' is not POSIX, and might be a shell builtin or alias\n##  (but should not be in 'sh')\nAC_PATH_PROGS(WHICH, which, which)\n## Make\n: ${MAKE=make}\nAC_SUBST(MAKE)\n## Pager\nR_PROG_PAGER\n## Tar -- we prefer a GNU version\nAC_PATH_PROGS(TAR, [${TAR} gtar gnutar tar], \"\")\n## TeXMF stuff\nR_PROG_TEXMF\n## Unzip & zip & gzip & bip2\nAC_PATH_PROGS(R_UNZIPCMD, [${UNZIP} unzip], \"\")\nAC_PATH_PROGS(R_ZIPCMD, [${ZIP} zip], \"\")\nAC_PATH_PROGS(R_GZIPCMD, [${GZIP} gzip], true)\nAC_PATH_PROGS(R_BZIPCMD, [${BZIP} bzip2], \"\")\n## Browser\nR_PROG_BROWSER\n## PDF viewer\nR_PROG_PDFVIEWER\n## Noweb - used for maintainer mode only\nAC_PATH_PROG(NOTANGLE, notangle, false)\nif test \"${NOTANGLE}\" = false ; then\n  if test \"x${use_maintainer_mode}\" = xyes; then\n    AC_MSG_WARN([notangle is missing - byte-code compiler source cannot be updated!])\n  fi\n  NOTANGLE=notangle\nfi\n## javareconf needs this\nAC_PATH_PROG(REALPATH, realpath, false)\n\n\n## Search for cairographics needs pkg-config, \n## helps find jpeg, libpng and libtiff.\nAC_PATH_PROG(PKGCONF, pkg-config , [], \n\t     [$PATH:/usr/local/bin:/ext/bin:/ext:/sw/bin:/opt/bin])\nAC_ARG_VAR([PKGCONF], [path to pkg-config utility])\nAC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])\nAC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's default search path])\n\nAC_PROG_CC\nAC_PROG_GCC_TRADITIONAL\nAC_GNU_SOURCE ## see note above\n\nAC_PROG_CPP\nR_PROG_CPP_CPPFLAGS\n\n## see if the user set FFLAGS: used for Intel compilers below\nuserFFLAGS=${FFLAGS}\nR_PROG_F77\n\nAC_PROG_CXX\n## check this actually compiles\nR_PROG_CXX\n\n### R_PROG_CXX98FLAG\n\nAC_PROG_CXXCPP\nif test \"${CXXCPP}\" = \"${CXX} -E\"; then\n  CXXCPP0=\"\\$(CXX) -E\"\nelse\n  CXXCPP0=${CXXCPP}\nfi\nAC_SUBST(CXXCPP0)\n\nR_GCC4_VISIBILITY\n\nAC_PROG_OBJC\n## unfortunately autoconf sets OBJC to gcc even if there is no working compiler\nif test \"${OBJC}\" = gcc; then\n  AC_LANG_PUSH([Objective C])\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[id foo;])],,[OBJC=''])\n  AC_LANG_POP([Objective C])\nfi\nR_PROG_OBJCXX\n\n## This has to be R_DEFS as autoconf overrrides DEFS\nR_DEFS=${DEFS}\nAC_SUBST(R_DEFS)\n\n## Libtool.\n## (Run this after R_PROG_F77, as AC_PROG_LIBTOOL checks for a\n## Fortran 77 compiler and sets F77 accordingly.)\nAC_DISABLE_STATIC\nLT_INIT\nAC_SUBST(LIBTOOL_DEPS)\n\n## cross-compiling: added May 2007, not actually used\nR_CROSS_COMPILING\nAC_SUBST(BUILD_CC)\nAC_SUBST(BUILD_R)\nAM_CONDITIONAL(CROSS_COMPILING, [test \"${cross_compiling}\" = yes])\n\n### * Checks for libraries.\n\n## Set up LD_LIBRARY_PATH or equivalent.\n## <FIXME>\n## What is this doing *HERE*?\n## Should be needed for tests using AC_RUN_IFELSE()?\n## Make sure that non-standard directories specified via '-L' are really\n## searched in the tests.\n## OTOH, R_LD_LIBRARY_PATH in the environment is meant to be the final version.\nR_LD_LIBRARY_PATH_save=${R_LD_LIBRARY_PATH}\nR_LD_LIBRARY_PATH=\ncase \"${host_os}\" in\n  darwin*)\n    ## Darwin provides a full path in the ID of each library such \n    ## that the linker can add library's path to the binary at link time.\n    ## This allows the dyld to find libraries even without xx_LIBRARY_PATH.\n    ## No paths should be added to R_LD_LIBRARY_PATH (which in turn\n    ## changes DYLD_LIBRARY_PATH), because they override the system\n    ## look-up sequence. Such automatic override has proven to break things\n    ## like system frameworks (e.g. ImageIO or OpenGL framework).\n    ## Not so bad in later versions of Darwin, \n    ## where DYLD_FALLBACK_LIBRARY_PATH is used (see below).\n    ;;\n  *)\n    for arg in ${LDFLAGS}; do\n      case \"${arg}\" in\n        -L*)\n\t  lib=`echo ${arg} | sed \"s/^-L//\"`\n\t  R_SH_VAR_ADD(R_LD_LIBRARY_PATH, [${lib}], [${PATH_SEPARATOR}])\n\t  ;;\n      esac\n    done\n    ;;\nesac\n\n## Record name of environment variable which tells the dynamic linker\n## where to find shlibs (typically, 'LD_LIBRARY_PATH').\n## Used in etc/ldpaths: As from R 3.0.0 override what libtool thinks on macOS\n## http://hublog.hubmed.org/archives/001192.html suggests this was in 10.4\n## However, as from 10.11 this variable is not passed down to shells.\ncase \"${host_os}\" in\n  darwin*)\n    Rshlibpath_var=DYLD_FALLBACK_LIBRARY_PATH\n    ;;\n  *)\n    Rshlibpath_var=${shlibpath_var}\nesac\nAC_SUBST(shlibpath_var)\n## Export LD_LIBRARY_PATH or equivalent.\nif eval \"test -z \\\"\\${${Rshlibpath_var}}\\\"\"; then\n  eval \"${Rshlibpath_var}=\\\"${R_LD_LIBRARY_PATH}\\\"\"\nelse\n  eval \"${Rshlibpath_var}=\\\"${R_LD_LIBRARY_PATH}${PATH_SEPARATOR}\\${${Rshlibpath_var}}\\\"\"\nfi\neval \"export ${Rshlibpath_var}\"\nAC_SUBST(Rshlibpath_var)\n\n## record how to strip shared/dynamic libraries.\nAC_SUBST(striplib)\n## record how to strip static libraries.\nstripstaticlib=${old_striplib}\nAC_SUBST(stripstaticlib)\n\n## <NOTE>\n## This actually comes from libtool.m4.\nAC_CHECK_LIBM\nAC_SUBST(LIBM)\n## </NOTE>\n## AC_CHECK_LIBM computes LIBM but does not add to LIBS, hence we do\n## the following as well.\nAC_CHECK_LIB(m, sin)\ncase \"${host_os}\" in\n  darwin*)\n    ## macOS >= 10.3 include dlcompat in libSystem\n    ## This is ancient history\n    ## SI says we want '-lcc_dynamic' on Darwin, although currently\n    ## https://developer.apple.com/documentation/MacOSX/ has nothing\n    ## official.  Bill Northcott <w.northcott@unsw.edu.au> points out\n    ## that it is only needed for GCC 3.x (and earlier) ...\n    if test \"${GCC}\" = yes; then\n      case \"${CC_VERSION}\" in\n        2.*|3.*)\n\t  AC_MSG_ERROR([Your gcc is too old.])\n      esac\n    fi\n    ;;\n  *)\n    AC_CHECK_LIB(dl, dlopen)\n    ;;\nesac\n\n## Readline.\nif test \"${use_readline}\" = yes; then\n  AC_CHECK_HEADERS(readline/history.h readline/readline.h)\n  r_save_LIBS=\"${LIBS}\"\n  LIBS=\n  ## don't use the cached value as we need to rebuild LIBS\n  unset ac_cv_lib_readline_rl_callback_read_char\n  AC_CHECK_LIB(readline, rl_callback_read_char)\n  use_readline=\"${ac_cv_lib_readline_rl_callback_read_char}\"\n  if test \"${use_readline}\" = no; then\n    ## only need ncurses if libreadline is not statically linked against it\n    unset ac_cv_lib_readline_rl_callback_read_char\n    AC_CHECK_LIB(ncurses, main, [],\n                 AC_CHECK_LIB(termcap, main, [],\n                              AC_CHECK_LIB(termlib, main)))\n    AC_CHECK_LIB(readline, rl_callback_read_char)\n    use_readline=\"${ac_cv_lib_readline_rl_callback_read_char}\"\n    if test \"${use_readline}\" = yes; then\n      use_readline=\"${ac_cv_header_readline_readline_h}\"\n    fi\n  fi\n  if test \"${use_readline}\" = no; then\n    AC_MSG_ERROR([--with-readline=yes (default) and headers/libs are not available])\n  else\n    ## the NetBSD emulation supplied by macOS does not have this\n    AC_CHECK_FUNCS(history_truncate_file)\n    ## rl_completion_matches is >= 4.2.\n    ## rl_resize_terminal is >= 4.0 ane we use it only for >= 6.3.\n    ## rl_callback_sigcleanup is in pre-releases for 7.0, not yet used.\n    R_CHECK_FUNCS([rl_callback_sigcleanup rl_completion_matches rl_resize_terminal rl_sort_completion_matches], \n[#include <stdio.h>\n#include <readline/readline.h>]\n                 )\n  fi\n  READLINE_LIBS=\"${LIBS}\"\n  LIBS=\"${r_save_LIBS}\"\nfi\nAC_SUBST(READLINE_LIBS)\n\n### * Checks for header files.\n\nAC_HEADER_STDC\nAC_HEADER_DIRENT\n## we also assume readdir and closedir\nif test \"${ac_cv_search_opendir}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'opendir' system call])\nfi\nAC_HEADER_SYS_WAIT\n## <NOTE>\n## Some of these are also checked for when Autoconf computes the default\n## includes.\n##\n## The following headers are POSIX,\n## We use sched.h for Linux-specific features (affinity)\nAC_CHECK_HEADERS(dlfcn.h fcntl.h glob.h grp.h pwd.h sched.h strings.h \\\n  sys/resource.h sys/select.h sys/socket.h sys/stat.h sys/time.h \\\n  sys/times.h sys/utsname.h unistd.h utime.h)\n## dl.h is used in src/unix/hpdlfcn.c included from src/unix/dynload.c on HP-UX\n## features.h is used by date-time code on Linux.\n## floatingpoint.h is used for fpsetmask on FreeBSD.\n## sys/param.h is one way to get PATH_MAX.\nAC_CHECK_HEADERS(arpa/inet.h dl.h elf.h features.h floatingpoint.h \\\n  langinfo.h netdb.h netinet/in.h sys/param.h)\n## stdalign.h is C11.\nAC_CHECK_HEADERS(stdalign.h)\n## These are C99 headers but some C code (written to work also\n## without assuming C99) may need the corresponding conditionals.\nAC_CHECK_HEADERS(errno.h inttypes.h limits.h locale.h stdarg.h stdbool.h \\\n                 stdint.h string.h)\n## only vsnprintf.c requires stdarg.h\n\n## We also use without checking sys/sysctl.h, but only on *BSD and macOS\n## The default includes check for sys/types.h (POSIX), which we use unconditionally\n## </NOTE>\n\nR_HEADER_SETJMP\nR_HEADER_GLIBC2\n\n### * Checks for types.\n\nAC_TYPE_SIGNAL\n## liblzma uses uint64_t: used unconditionally in src/main/util.c\nAC_TYPE_UINT64_T\nAC_CHECK_TYPES([int64_t, int_fast64_t])\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nR_SIZE_MAX\nAC_CHECK_TYPE(blkcnt_t, long)\nAH_TEMPLATE([blkcnt_t],\n            [Define to 'long' if <sys/types.h> does not define.\n             Apparently necessary to fix a GCC bug on AIX?])\nR_TYPE_SOCKLEN\nAC_CHECK_TYPES([stack_t], , , [#include <signal.h>])\n## These are optional C99 types, which we used to typedef in Defn.h if absent.\n## There seems some confusion as to where they should be defined:\n## the standard says stdint.h but drafts and Solaris 8 have inttypes.h.\n## It seems all systems having stdint.h include it in inttypes.h, and\n## POSIX requires that.  But we will make sure.\nAC_CHECK_TYPES([intptr_t, uintptr_t], , , [#ifdef HAVE_INTTYPES_H\n#include <inttypes.h>\n#endif\n#ifdef HAVE_STDINT_H\n#include <stdint.h>\n#endif])\n\n### * Checks for compiler characteristics.\n\n### ** Generic tests for the C, Fortran 77 and C++ compilers.\n\n### *** C compiler.\n\nR_BIGENDIAN\nAC_C_CONST\nR_C_INLINE\nAC_CHECK_SIZEOF(int)\n## on some platforms this gives a trailing lf, so\ncase \"${ac_cv_sizeof_int}\" in\n    4*)\n    AC_DEFINE(INT_32_BITS, 1, [Define if you have 32 bit ints.])\n    ;;\nesac\n## This is tested in src/main/arithmetic.c and gives a compile error if false\nAC_CHECK_SIZEOF(long)\nAC_CHECK_SIZEOF(long long)\nAC_CHECK_SIZEOF(double)\nAC_CHECK_SIZEOF(size_t)\nAC_ARG_ENABLE([long-double],\n[AS_HELP_STRING([--enable-long-double],[use long double type @<:@yes@:>@])],\n[if test \"${enableval}\" = no; then\n  use_long_double=no\nelse\n  use_long_double=yes\nfi],\n[use_long_double=yes])\n\ndnl also used in intl.\nif test \"x${use_long_double}\" = xyes; then \n  AC_DEFINE(HAVE_LONG_DOUBLE, 1, [Define if you wish to use the 'long double' type.])\n  AC_CHECK_SIZEOF(long double)\nelse\n  AC_MSG_WARN([Not using the 'long double' type])\nfi\n\nR_PROG_CC_MAKEFRAG\nR_PROG_CC_LO_MAKEFRAG\n\nR_OPENMP\n\n### *** Fortran 77 compiler.\n\nR_PROG_F77_FLIBS\nif test -z \"$FLIBS_IN_SO\"; then\n  FLIBS_IN_SO=${FLIBS}\nfi\nAC_SUBST(FLIBS_IN_SO)\nR_PROG_F77_APPEND_UNDERSCORE\nR_PROG_F77_CAN_RUN\nR_PROG_F77_CC_COMPAT\nR_PROG_F77_CC_COMPAT_COMPLEX\n\nAM_CONDITIONAL(COMPILE_FORTRAN_DOUBLE_COMPLEX,\n               [test \"x${HAVE_FORTRAN_DOUBLE_COMPLEX}\" != x])\n\nAC_LANG_PUSH(Fortran 77)\nR_OPENMP\nAC_LANG_POP(Fortran 77)\n\n\n### *** C++ compiler.\n\nR_PROG_CXX_MAKEFRAG\n\nAC_LANG_PUSH(C++)\nR_OPENMP\nAC_LANG_POP(C++)\n\n### *** ObjC compiler\n\nR_PROG_OBJC_MAKEFRAG\nR_PROG_OBJC_RUNTIME\n## FSF builds of gcc (and maybe others?) need -fobjc-exceptions otherwise\n## @try and friends don't work\nR_PROG_OBJC_FLAG([-fobjc-exceptions],\n\t\t R_SH_VAR_ADD(OBJCFLAGS, [-fobjc-exceptions]))\n## FIXME: checks for Foundation are not darwin-specifc at all. In fact the whole\n##        point of R_OBJC_FOUNDATION is to detect foundation classes on other\n##        platforms (on Darwin we already *know* that is it -framework Foundation\n##        but not so on Linux!), so the following was not intended to be conditonal.\ncase \"${host_os}\" in\n  darwin*)\n    R_OBJC_FOUNDATION\n  ;;\nesac\n\n### ** Platform-specific overrides for the C, Fortran 77 and C++ compilers.\n\ncase \"${host_cpu}\" in\n  i*86|x86_64)\n    R_PROG_CC_FLAG_D__NO_MATH_INLINES\n    ## We used to add -mieee-fp here, but it seems it is really a\n    ## linker flag for old Linuxen adding -lieee to a non-shared link.\n    ;;\nesac\n\nAH_TEMPLATE([HAVE_NO_SYMBOL_UNDERSCORE],\n            [Define if module-loading does not need an underscore to\n             be prepended to external names.])\n\ncase \"${host_os}\" in\n  aix*)\n    AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    if test \"${GCC}\" = yes; then\n      if test \"x${OBJECT_MODE}\" = \"x64\"; then\n        R_PROG_CC_FLAG([-mminimal-toc],\n                       R_SH_VAR_ADD(R_XTRA_CFLAGS, [-mminimal-toc]))\n      else\n        R_PROG_CC_FLAG([-mno-fp-in-toc],\n                       R_SH_VAR_ADD(R_XTRA_CFLAGS, [-mno-fp-in-toc]))\n      fi\n    fi\n    ;;\n  darwin*)\n    ## which these days mean macOS\n    AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    ;;\n  hpux*)\n    AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    case \"${CC}\" in\n      cc|c89)\n\t## Luke Tierney says we also need '-Wp,-H16000' which tells the\n\t## pre-processor to increase the size of an internal table.  It\n\t## seems that src/main/vfonts/g_her_glyph.c contains a line\n\t## that is too long for the pre-processor without this flag.\n\tR_SH_VAR_ADD(R_XTRA_CPPFLAGS, [-Wp,-H16000])\n\t;;\n    esac\n    AC_CHECK_LIB(dld, shl_load, [R_XTRA_LIBS=\"-ldld ${R_XTRA_LIBS}\"])\n    ;;\n  linux*)\n    case  \"${CC}\" in\n      ## Intel compiler\n      *icc*)\n\t## icc declares __GNUC__, so it picks up CFLAGS intended for gcc.\n\tif test \"$ac_test_CFLAGS\" != set; then\n          if test $ac_cv_prog_cc_g = yes; then\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        CFLAGS=\"-g -O2 -std=c99\"\n\t\t;;\n\t      *)\n\t        ## on ix86 optimization fails\n                CFLAGS=\"-g -std=c99\"\n\t\t;;\n\t    esac\n          else\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        CFLAGS=\"-O2 -std=c99\"\n\t\t;;\n\t      *)\n                CFLAGS=\"-std=c99\"\n\t\t;;\n\t    esac\n          fi\n        fi\n\t## used to set IEEE flag, but this is version-dependent.\n        ;;\n    esac\n    case  \"${F77}\" in\n      ## Intel compilers\n      *ifc|*ifort)\n\tif test \"x$userFFLAGS\" = x; then\n          if test $ac_cv_prog_f77_g = yes; then\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        FFLAGS=\"-g -O2\"\n\t\t;;\n\t      *)\n                FFLAGS=\"-g\"\n\t\t;;\n\t    esac\n          else\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        FFLAGS=\"-O2\"\n\t\t;;\n\t      *)\n\t        ## on ix86 optimization of dlamc.f fails\n                FFLAGS=\n\t\t;;\n\t    esac\n          fi\n        fi\n        ;;\n    esac\n    case  \"${CXX}\" in\n      ## Intel compilers\n      *icpc|*icc)\n\tif test \"$ac_test_CXXFLAGS\" != set; then\n          if test $ac_cv_prog_cxx_g = yes; then\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        CXXFLAGS=\"-g -O2\"\n\t\t;;\n\t      *)\n                CXXFLAGS=\"-g\"\n\t\t;;\n\t    esac\n          else\n\t    case \"${host_cpu}\" in\n\t      x86_64)\n\t        CXXFLAGS=\"-O2\"\n\t\t;;\n\t      *)\n                CXXFLAGS=\n\t\t;;\n\t    esac\n          fi\n        fi\n        ;;\n    esac\n    ;;\n  mingw*|windows*|winnt)\n    AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    ;;\n  openbsd*)\n    if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n      AC_DEFINE(HAVE_NO_SYMBOL_UNDERSCORE)\n    fi\n    ;;\nesac\n\nif test \"${SAFE_FFLAGS+set}\" != set; then\n  if test \"x${ac_cv_f77_compiler_gnu}\" = xyes; then\n    SAFE_FFLAGS=\"${FFLAGS} -ffloat-store\"\n  else\n    SAFE_FFLAGS=${FFLAGS}\n  fi\nfi\n\n\nAC_SUBST(CFLAGS)\nAC_SUBST(MAIN_CFLAGS)\nAC_SUBST(SHLIB_CFLAGS)\nAC_SUBST(CXXFLAGS)\nAC_SUBST(CXXSTD)\nAC_SUBST(SHLIB_CXXFLAGS)\nAC_SUBST(FFLAGS)\nAC_SUBST(SAFE_FFLAGS)\nAC_SUBST(MAIN_FFLAGS)\nAC_SUBST(SHLIB_FFLAGS)\nAC_SUBST(R_XTRA_CFLAGS)\nAC_SUBST(R_XTRA_CPPFLAGS)\nAC_SUBST(R_XTRA_CXXFLAGS)\nAC_SUBST(R_XTRA_FFLAGS)\nAC_SUBST(R_XTRA_LIBS)\nAC_SUBST(OBJC_LIBS)\nAC_SUBST(OBJCFLAGS)\nAC_SUBST(OBJCXXFLAGS)\n\nR_ABI\n\n### ** DLL stuff.\n\n## We need to determine the following:\n##\n## MAIN_LD, MAIN_LDFLAGS\n##   command and flags for loading the main binary so that it will load\n##   shared objects (DLLs) at runtime, also for profiling.\n## CPICFLAGS, CXXPICFLAGS, FPICFLAGS, FCPICFLAGS\n##   flags for compiling C, C++, and Fortran library code.\n## SHLIB_LD, SHLIB_LDFLAGS\n##   command and flags for creating DLLs (which contain object files\n##   from a C or Fortran compiler).\n## DYLIB_LD, DYLIB_LDFLAGS\n##   ditto for dynamic libraries (where different.)\n## SHLIB_CXXLD, SHLIB_CXXLDFLAGS\n##   command and flags for creating DLLs which contain object files from\n##   a C++ compiler.  According to Autoconf, the C++ compiler/linker\n##   must be used for linking in this case (since special C++-ish things\n##   need to happen at link time like calling global constructors,\n##   instantiating templates, enabling exception support, etc.).\n##\n## The procedure is as follows.\n##   \n## * We use applicable values from imake in case its CC is ours.\n## * Irrespective of that, we think we know what to do with GNU tools\n##   (GNU C, Fortran, and C++ compilers).\n## * Then, use platform specific overrides.\n## * As a final safeguard, values from the environment (as specified in\n##   one of the configuration files or at the configure command line)\n##   override anything we figure out in the case of compiler flags; for\n##   linker flags (*LDFLAGS), environment settings override our results\n##   if the corresponding *LD variable was set, and add otherwise.\n##\n## NOTE: We do not provide defaults for the *LDFLAGS, taking a defensive\n## approach.  In case we cannot figure out {MAIN,SHLIB}_LDFLAGS and the\n## user did not provide defaults, an error results.  A warning is given\n## if nothing was obtained for SHLIB_CXXLDFLAGS.\n##\n## Note also that some systems (formerly AIX) do not allow for unresolved\n## symbols at link time.  For such systems, we link against -lm (in case\n## it exists) when building a shlib module via SHLIB_LIBADD.\n\nmain_ld=\"${CC}\"\nshlib_ld=\"${CC}\"\nshlib_cxxld=\"${CXX}\"\nSHLIB_EXT=\".so\"\nSHLIB_LIBADD=\nuse_exportfiles=no\n\n## Step 1.  Ask imake.\n## <NOTE>\n## Earlier versions had fpicflags=${cpicflags}.  As this really amounts\n## to hoping rather than knowing, we no longer do this.\n## </NOTE>\nr_xtra_path=\"${PATH}\"\nfor dir in /usr/bin/X11 /usr/X11R6/bin /usr/openwin/bin; do\n  r_xtra_path=\"${r_xtra_path}${PATH_SEPARATOR}${dir}\"\ndone\nAC_PATH_PROG(XMKMF, xmkmf, [], [${r_xtra_path}])\nif test -n \"${XMKMF}\"; then\n  echo > Imakefile\n  ${XMKMF} > /dev/null 2>&1 || echo > Makefile\n  cc=`\"${srcdir}/tools/GETMAKEVAL\" CC`\n  cc=`echo ${cc} | sed \"s/ .*//\"`\n  ## Paul Gilbert reported on R-devel 2006-04-13 a system with cc=\"\"\n  if test -n \"${cc}\" ; then\n    r_cc_cmd=`echo ${CC} | sed \"s/ .*//\"`\n    if test \"`which ${cc}`\" = \"`which ${r_cc_cmd}`\"; then\n      shlib_ldflags=`\"${srcdir}/tools/GETMAKEVAL\" SHLIBLDFLAGS`\n      cpicflags=`\"${srcdir}/tools/GETMAKEVAL\" PICFLAGS`\n    fi\n  fi\n  cxx=`\"${srcdir}/tools/GETMAKEVAL\" CXX`\n  cxx=`echo ${cxx} | sed \"s/ .*//\"`\n  if test -n \"${cxx}\" -a  -n \"${CXX}\"; then\n    r_cxx_cmd=`echo ${CXX} | sed \"s/ .*//\"`\n    if test \"`which ${cxx}`\" = \"`which ${r_cxx_cmd}`\"; then\n      cxxpicflags=`\"${srcdir}/tools/GETMAKEVAL\" CXXPICFLAGS`\n    fi\n  fi\n  rm -f Imakefile Makefile\nfi\n\n## Step 2.  GNU compilers.\nif test \"${GCC}\" = yes; then\n  case \"${host_cpu}\" in\n## Sparc has only an 8k global object table, 1024 entries on 64-bit.\n## PowerPC has 32k, not enough on ppc64 for the ca6200 entries in libR.so\n## The only other platform where this is said to matter is m68k, which\n## has 32k and so can use -fpic.\n## However, although the gcc docs do not mention it, it seems s390/s390x\n## also supports and needs -fPIC\n    sparc*|ppc64*|powerpc64*|s390*)\n      cpicflags=\"-fPIC\"\n      ;;\n    *)\n      cpicflags=\"-fpic\"\n      ;;\n  esac\n  shlib_ldflags=\"-shared\"\nfi\nif test \"${G77}\" = yes; then\n  case \"${host_cpu}\" in\n    sparc*|ppc64*|powerpc64*|s390*)\n      fpicflags=\"-fPIC\"\n      ;;\n    *)\n      fpicflags=\"-fpic\"\n      ;;\n  esac\nfi\nif test \"${GXX}\" = yes; then\n  case \"${host_cpu}\" in\n    sparc*|ppc64*|powerpc64*|s390*)\n      cxxpicflags=\"-fPIC\"\n      ;;\n    *)\n      cxxpicflags=\"-fpic\"\n      ;;\n  esac\n  shlib_cxxldflags=\"-shared\"\nfi\n\n## Step 3.  Individual platform overrides.\ndylib_undefined_allowed=yes\ncase \"${host_os}\" in\n  aix*)\n    use_exportfiles=yes\n    ## All AIX code is PIC.\n    cpicflags=\n    cxxpicflags=\n    fpicflags=\n    ## not clear if this is correct for native compilers\n    wl=\"-Wl,\"\n    ## libtool suggests that ia64 needs -Bexport and not -brtl\n    ## but we have no confirmation.\n    dylib_undefined_allowed=no\n    ##ADD: A symbol of memcpy,memset is exported in libR by expall.\n    ##ADD: However, for example, symbol in libc of memcpy is __memmove,__memmove64.\n    ##ADD: This black magic puts lc before lR and pockets this.\n    if test \"x${OBJECT_MODE}\" = \"x64\"; then\n      main_ldflags=\"${wl}-brtl ${wl}-bexpall ${wl}-bpT:0x100000000 ${wl}-bpD:0x110000000 -lc\"\n    else\n      main_ldflags=\"${wl}-brtl ${wl}-bexpall -lc\"\n    fi\n    shlib_ldflags=\"${wl}-brtl ${wl}-G ${wl}-bexpall ${wl}-bnoentry -lc\"\n    SHLIB_LIBADD=\"\\$(LIBM)\"\n    shlib_cxxldflags=\"${shlib_ldflags}\"\n    if test \"${GCC}\" = yes; then\n      shlib_ldflags=\"-shared ${shlib_ldflags}\"\n    fi\n    if test \"${GXX}\" = yes; then\n      shlib_cxxldflags=\"-shared ${shlib_cxxldflags}\"\n    fi \n    ;;\n  darwin*)\n    darwin_pic=\"-fPIC\"\n    dylib_undefined_allowed=no\n    darwin_dylib_ldflags=\"-dynamiclib\"\n    shlib_ldflags=\"-dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress\"\n    ## * recent ld has -single_module so it doesn't need -fno-common\n    ##   we have to use dylib instead of a bundle\n    ## * dylib+single_module+flat_namespace=pretty much what other platforms call .so\n    ##   but there can be no multiple symbols (due to flat namespace)\n    ## * since 10.3 we can also use -undefined dynamic_lookup which allows us to\n    ##   use two-level namespace and still have undefined symbols\n\n    ## FIXME: strictly speaking it should be \"yes\" but libRblas still\n    ## needs -lgfortran because the sharing is a one-way street\n    ## dylib_undefined_allowed=yes\n\n    ## we have to test this in case an outdated linker or non-Apple compiler is used\n    AC_MSG_CHECKING([whether linker supports dynamic lookup])\n    AC_CACHE_VAL([r_cv_has_dynlookup],[\n[cat > conftest.c <<EOF\n  void dummy() { }\nEOF]\necho \"${CC} ${CFLAGS} conftest.c ${shlib_ldflags} -o libconftest${DYLIB_EXT} ${LIBS}\" >&AS_MESSAGE_LOG_FD\nif ${CC} ${CFLAGS} conftest.c ${shlib_ldflags} -o libconftest${DYLIB_EXT} ${LIBS} 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n   r_cv_has_dynlookup=yes\n   AC_MSG_RESULT([yes])\nelse\n   r_cv_has_dynlookup=no\n   AC_MSG_RESULT([no])\n   AC_MSG_WARN([***  Please consider updating your Xcode tools. ***])\nfi\nrm -f libconftest${DYLIB_EXT} conftest.c\n])\n    if test -n \"${FORCE_FLAT_NAMESPACE}\"; then\n       AC_MSG_WARN([Use of flat namespace is requested by user.])\n       r_cv_has_dynlookup=forced-no\n    fi\n    if test \"${r_cv_has_dynlookup}\" != \"yes\"; then\n       shlib_ldflags=\"-dynamiclib -flat_namespace -undefined suppress -single_module -multiply_defined suppress\"\n       dylib_undefined_allowed=yes\n    fi\n\t\n    ## we use the same method for shlib and dylib now\n    darwin_dylib_ldflags=\"${shlib_ldflags}\"\n    ## side note: we could use flat namespace instead, but there is an exception:\n    ## * libRblas must be 2-level, dyn lookup because of xerbla which is undefined\n    cpicflags=\"${darwin_pic}\"\n    cxxpicflags=\"${darwin_pic}\"\n    ## macOS does not have a Fortran compiler, so this is speculative\n    fpicflags=\"${darwin_pic}\"\n    shlib_cxxldflags=\"${shlib_ldflags}\"\n    ;;\n  freebsd*)\n    ## maybe this needs to depend on the compiler:\n    ## -export-dynamic used to work, but does not with clang.\n    ## Seems FreeBSD has used the GNU linker since at least 3.0 (Oct 1998)\n    ## We could also use -rdynamic, which seems to work with clang and gcc.\n    main_ldflags=\"-Wl,--export-dynamic\"\n    shlib_ldflags=\"-shared\"\n    ;;\n  gnu*)\t\t\t\t# GNU Hurd, see FreeBSD comment\n    main_ldflags=\"-Wl,--export-dynamic\"\n    ;;\n  hpux*)\n    SHLIB_EXT=\".sl\"\n    case \"${CC}\" in\n      cc|c89)\n        cpicflags=\"+Z\"\n        ;;\n    esac\n    case \"${F77}\" in\n      f77|fort77|f90)\n        fpicflags=\"+Z\"\n        ;;\n    esac\n    main_ldflags=\"-Wl,-E\"\n    if test \"${GCC}\" = yes; then\n      shlib_ldflags=\"-shared -fPIC -Wl,-Bsymbolic\"\n    else\n      ## <NOTE>\n      ## Native cc insists on tacking on crt0.o when it calls ld, and\n      ## crt0.o is not built with PIC.  As there seems to be no obvious\n      ## way to tell cc not to do this, we use ld for linking shlibs.\n      shlib_ld=ld\n      shlib_ldflags=\"-b -Bsymbolic\"\n      ## </NOTE>\n    fi\n    if test \"${GXX}\" = yes; then\n      shlib_cxxldflags=\"-shared -fPIC\"\n    fi\n    ;;\n  linux*aout)\t\t\t# GNU Linux/aout\n    sed '/HAVE_ELF_H/d' confdefs.h > tmp.h ; mv tmp.h confdefs.h\n    ;;\n  linux*)\t\t\t# GNU Linux/ELF\n    case  \"${CC}\" in\n      ## Intel compiler: note that -c99 may have been appended\n      *icc*)\n        cpicflags=\"-fpic\"\n        ;;\n      ## Portland Group\n      *pgcc*)\n        cpicflags=\"-fpic\"\n\t;;\n    esac\n    case  \"${F77}\" in\n      ## Intel compilers\n      *ifc|*ifort)\n        fpicflags=\"-fpic\"\n        ;;\n      ## Portland Group\n      *pgf77|*pgf90|*pgf95)\n        fpicflags=\"-fpic\"\n        ;;\n    esac\n    case  \"${CXX}\" in\n      ## Intel compilers\n      *icpc|*icc)\n        cxxpicflags=\"-fpic\"\n        ;;\n      ## Portland Group\n      *pgCC)\n        cxxpicflags=\"-fpic\"\n        ;;\n    esac\n    ## Luke Tierney says that just '-export-dynamic' does not work for\n    ## Intel compilers (icc).  It is accepted by clang but ignored.\n    ## Could also use -rdynamic, at least for gcc and clang.\n    main_ldflags=\"-Wl,--export-dynamic\"\n    STATICR1=\"-Wl,--whole-archive\"\n    STATICR2=\"-Wl,--no-whole-archive\"\n    ;;\n  mingw*)\n    SHLIB_EXT=\".dll\"\n    cpicflags=\n    cxxpicflags=\n    fpicflags=\n    fcpicflags=\n    ;;\n  netbsd*)\n    ## See the comments about FreeBSD\n    if ${CPP} - -dM < /dev/null | grep __ELF__ >/dev/null ; then\n      main_ldflags=\"-Wl,--export-dynamic\"\n      shlib_ldflags=\"-shared\"\n    else\n      shlib_ldflags=\"-Bshareable\"\n    fi\n    ;;\n  openbsd*)\n    ## ${wl} is defined by libtool configuration code.\n    ## Both -Wl,-export-dynamic and -Wl,--export-dynamic seem to\n    ## work with the GNU linker, but the second is what is documented.\n    ## libtool seems to use -Wl-E , a GNU ld alias of -Wl,--export-dynamic\n    if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n      main_ldflags=\"${wl}-export-dynamic\"\n      shlib_ldflags=\"-shared -fPIC\"\n    fi\n    case \"${host_cpu}\" in \n      powerpc*)\n\t## GCC -fpic limits to 2**16 on OpenBSD powerpc.\n\t## Error message without -fPIC:\n\t##   relocation truncated to fit: R_PPC_GOT16...\n        if test \"${GCC}\" = yes; then\n          cpicflags=\"-fPIC\"\n        fi  \n        if test \"${G77}\" = yes; then\n          fpicflags=\"-fPIC\"\n        fi\n        if test \"${GXX}\" = yes; then\n          cxxpicflags=\"-fPIC\"\n        fi\n        ;;\n    esac\n    ;;\n  solaris*)\n## SPARC has only an 8k global object table, 1024 entries on 64-bit,\n## so need PIC not pic.  They are the same on other Solaris platforms.\n    shlib_ldflags=\"-G\"\n    shlib_cxxldflags=\"-G\"\n   if test \"${GCC}\" = yes; then\n      cpicflags=\"-fPIC\"\n      ld=`${CC} -print-prog-name=ld`\n      ldoutput=`${ld} -v 2>&1 | grep GNU`\n      if test -n \"${ldoutput}\"; then\n\tmain_ldflags=\"-Wl,-export-dynamic\"\n\tshlib_ldflags=\"-shared\"\n        shlib_cxxldflags=\"-shared\"\n      else\n        ## it seems gcc c 4.6.2 needs this with Solaris linker\n\tshlib_ldflags=\"-shared\"\n        shlib_cxxldflags=\"-shared\"\n      fi\n    else\n      cpicflags=\"-KPIC\"\n      if test \"`basename ${CXX}`\" = \"CC\" ; then\n        ## Forte version 7 needs -lCstd: Forte 6 does not.\t\n        ver=`${CXX} -V 2>&1 | sed 2d | grep 'Forte Developer 7 C++'`\n        if test -n \"${ver}\" ; then\n          shlib_cxxldflags=\"-G -lCstd\"\n        fi\n      fi\n    fi\n    ## G77 include gfortran\n    if test \"${G77}\" != yes; then\n      fpicflags=\"-PIC\"\n    else\n      fpicflags=\"-fPIC\"\n    fi\n    if test \"${GXX}\" = yes; then\n      cxxpicflags=\"-fPIC\"\n      ld=`${CXX} -print-prog-name=ld`\n      ldoutput=`${ld} -v 2>&1 | grep GNU`\n      if test -n \"${ldoutput}\"; then\n        shlib_cxxldflags=\"-shared\"\n      fi\n    else\n      cxxpicflags=\"-KPIC\"\n    fi\n    ;;\nesac\n\n## <FIXME>\n## Completely disable using libtool for building shlibs until libtool\n## fully supports at least Fortran and C++.\n## ## Step 4.  In case we use libtool ...\n## if test \"${use_libtool}\" = yes; then\n##   case \"${host_os}\" in\n##     *)\n##       ;;\n##   esac\n## fi\n## </FIXME>\n\n## Step 5.  Overrides from the environment and error checking.\nif test -z \"${MAIN_LD}\"; then\n   main_ld_was_given=no\n  if test \"${main_ld}\" = \"${CC}\"; then\n     MAIN_LD=\"\\$(CC)\"\n  else\n     MAIN_LD=\"${main_ld}\"\n  fi\nfi\nR_SH_VAR_ADD(MAIN_LDFLAGS, [${main_ldflags}])\n\n: ${CPICFLAGS=\"${cpicflags}\"}\nif test -z \"${CPICFLAGS}\"; then\n  case \"${host_os}\" in\n    aix*|mingw*)\n      ;;\n    *)\n      AC_MSG_WARN([I could not determine CPICFLAGS.])\n      AC_MSG_ERROR([See the file doc/html/R-admin.html for more information.])\n      ;;\n  esac\nfi\n\n: ${FPICFLAGS=\"${fpicflags}\"}\nif test -z \"${FPICFLAGS}\"; then\n  case \"${host_os}\" in\n    aix*|mingw*)\n      ;;\n    *)\n      AC_MSG_WARN([I could not determine FPICFLAGS.])\n      AC_MSG_ERROR([See the file doc/html/R-admin.html for more information.])\n      ;;\n  esac\nfi\n\n: ${CXXPICFLAGS=\"${cxxpicflags}\"}\nif test -n \"${CXX}\" -a -z \"${CXXPICFLAGS}\"; then\n  case \"${host_os}\" in\n    aix*|mingw*)\n      ;;\n    *)\n      warn_cxxpicflags=\"I could not determine CXXPICFLAGS.\"\n      ;;\n  esac\nfi\n\nif test -z \"${SHLIB_LD}\"; then\n  shlib_ld_was_given=no\n  if test \"${shlib_ld}\" = \"${CC}\"; then\n    SHLIB_LD=\"\\$(CC)\"\n  else\n    SHLIB_LD=\"${shlib_ld}\"\n  fi\n  R_SH_VAR_ADD(SHLIB_LDFLAGS, [${shlib_ldflags}])\nfi\nif test -z \"${SHLIB_LDFLAGS}\"; then\n  AC_MSG_WARN([I could not determine SHLIB_LDFLAGS.])\n  AC_MSG_ERROR([See the file doc/html/R-admin.html for more information.])\nfi\n\nif test -z \"${SHLIB_CXXLD}\"; then\n  shlib_cxxld_was_given=no\n  if test \"${shlib_cxxld}\" = \"${CXX}\"; then\n    SHLIB_CXXLD=\"\\$(CXX)\"\n  else\n    SHLIB_CXXLD=\"${shlib_cxxld}\"\n  fi\n  R_SH_VAR_ADD(SHLIB_CXXLDFLAGS, [${shlib_cxxldflags}])\nfi\nif test  -n \"${CXX}\" -a -z \"${SHLIB_CXXLDFLAGS}\"; then\n  warn_shlib_cxxldflags=\"I could not determine SHLIB_CXXLDFLAGS\"\n  AC_MSG_WARN([${warn_shlib_cxxldflags}])\nfi\n\n## Step 6.  We may need flags different from SHLIB_LDFLAGS and SHLIB_EXT\n## for building R as a shared library to link against (the SHLIB_* vars\n## just determined are really for loadable modules).  On ELF there is no\n## difference, but e.g. on Mach-O for Darwin there is.\n##\n## Also need flags to build the Rlapack shared library on some platforms.\nDYLIB_EXT=\"${SHLIB_EXT}\"\ndylib_ldflags=\"${SHLIB_LDFLAGS}\"\nLIBR_LDFLAGS=\"\"\nRLAPACK_LDFLAGS=\"\"\nRBLAS_LDFLAGS=\"\"\nR_DYLIB_VERSION_SUFFIX=\"\"\ncase \"${host_os}\" in\n  aix*)\n    ## Not needed for -brtl linking\n    # RLAPACK_LDFLAGS=\"${wl}-bE:\\$(top_builddir)/etc/Rlapack.exp\"\n    # LAPACK_LDFLAGS=\"${wl}-bI:\\$(R_HOME)/etc/Rlapack.exp\"\n    ;;\n  darwin*)\n    DYLIB_EXT=\".dylib\"\n    dylib_ldflags=\"${darwin_dylib_ldflags}\"\n    MAJR_VERSION=`echo \"${PACKAGE_VERSION}\" | sed  -e \"s/[[\\.]][[1-9]]$/.0/\"` \n    LIBR_LDFLAGS=\"-install_name libR.dylib -compatibility_version ${MAJR_VERSION}  -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names\"\n    RLAPACK_LDFLAGS=\"-install_name libRlapack.dylib -compatibility_version ${MAJR_VERSION} -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names\"\n    ## don't use version in libRblas so we can replace it with any BLAS implementation\n    RBLAS_LDFLAGS=\"-install_name libRblas.dylib -headerpad_max_install_names\"\n    ;;\n  hpux*)\n    ## Needs to avoid embedding a relative path ../../../bin.\n    ## See the above code for shlib_ldflags for reasons why we currently\n    ## cannot always use '-Wl,+s'.\n    if test \"${GCC}\" = yes; then\n      LAPACK_LDFLAGS=\"-Wl,+s\"\n    else\n      LAPACK_LDFLAGS=\"+s\"\n    fi\n    ;;\n  openbsd*)\n    if test -z \"${R_DYLIB_VERSION}\"; then\n      PACKAGE_VERSION_MAJOR=`echo \"${PACKAGE_VERSION}\" | \\\n        sed -e \"s/\\.//\" -e \"s/\\..*$//\"`\n      PACKAGE_VERSION_MINOR=`echo \"${PACKAGE_VERSION}\" | \\\n        sed -e \"s/.*\\.\\([[^.]][[^.]]*$\\)/\\1/\"`\n      R_DYLIB_VERSION=\"${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}\"\n    fi\n    R_DYLIB_VERSION_SUFFIX=\".${R_DYLIB_VERSION}\"\n    ;;\nesac\n\nR_DYLIB_EXT=\"${DYLIB_EXT}${R_DYLIB_VERSION_SUFFIX}\"\n\nif test -z \"${DYLIB_LD}\"; then\n  dylib_ld_was_given=no\n  DYLIB_LD=\"${SHLIB_LD}\"\n  R_SH_VAR_ADD(DYLIB_LDFLAGS, [${dylib_ldflags}])\nelse\n  if test -z \"${DYLIB_LDFLAGS}\"; then\n    DYLIB_LDFLAGS=\"${dylib_ldflags}\"\n  fi\nfi\n\n## some claim Solaris needs -lsocket -lnsl (PR#15815)\n: ${INTERNET_LIBS=\"${internet_libs}\"}\nAC_SUBST(INTERNET_LIBS)\n\nAM_CONDITIONAL(DYLIB_UNDEFINED_ALLOWED, [test \"x${dylib_undefined_allowed}\" = xyes])\n\nAC_SUBST(MAIN_LD)\nAC_SUBST(MAIN_LDFLAGS)\nAC_SUBST(CPICFLAGS)\nAC_SUBST(CXXPICFLAGS)\nAC_SUBST(DYLIB_LD)\nAC_SUBST(DYLIB_LDFLAGS)\nAC_SUBST(FCPICFLAGS)\nAC_SUBST(FPICFLAGS)\nAC_SUBST(SHLIB_CXXLD)\nAC_SUBST(SHLIB_CXXLDFLAGS)\nAC_SUBST(SHLIB_LD)\nAC_SUBST(SHLIB_LDFLAGS)\nAC_SUBST(SHLIB_LIBADD)\nAC_SUBST(SHLIB_EXT)\nAC_DEFINE_UNQUOTED(SHLIB_EXT, \"${SHLIB_EXT}\",\n[Define this to be the extension used for shared objects on your system.])\nAM_CONDITIONAL(USE_EXPORTFILES, [test \"x${use_exportfiles}\" = xyes])\nAC_SUBST(DYLIB_EXT)\nAC_SUBST(LIBR_LDFLAGS)\nAC_SUBST(RBLAS_LDFLAGS)\nAC_SUBST(RLAPACK_LDFLAGS)\nAC_SUBST(LAPACK_LDFLAGS)\nAC_SUBST(FW_VERSION)\nAC_SUBST(STATICR1)\nAC_SUBST(STATICR2)\nAC_SUBST(R_DYLIB_EXT)\n\n## Test support for C++ standards\nR_STDCXX([98], [CXX98], [CXX])\nR_STDCXX([11], [CXX11], [CXX])\nR_STDCXX([14], [CXX14], [CXX11])\nR_STDCXX([17], [CXX17], [CXX14])\n\n### OpenMP.\n\n## The basic checking is performed via AC_OPENMP added in Autoconf 2.62,\n## which we already called for determining the appropriate flags for the\n## C, C++, Fortran 77, Fortran compiler/linker.  Note that this gives\n## variables OPENMP_CFLAGS etc., which are meant to be used for *both*\n## compiling and linking.  So we can really only used them provided that\n## we use the respective compilers for linking as well (or we need a\n## different mechanism for determining what is needed).\n##\n## For compiling R itself, we use MAIN_LD and DYLIB_LD for linking, both\n## defaulting to CC.  Hence:\n## \n##    If both MAIN_LD and DYLIB_LD were not specified by the user and\n##    equal CC and this was determined to support OpenMP, then we (try\n##    to) provide OpenMP support by adding OPENMP_CFLAGS to the linker\n##    flags and OPENMP_CFLAGS and OPENMP_FFLAGS to the C and Fortran 77\n##    compiler flags, and defining HAVE_OPENMP.\n##\n## (The Fortran 77 compiler is never used for linking by default.)\n\nif test -n \"${R_OPENMP_CFLAGS+set}\"; then\n  if test -n \"${R_OPENMP_CFLAGS}\"; then\n    R_SH_VAR_ADD(MAIN_LDFLAGS, [${R_OPENMP_CFLAGS}])\n    R_SH_VAR_ADD(DYLIB_LDFLAGS, [${R_OPENMP_CFLAGS}])\n    AC_DEFINE(HAVE_OPENMP, 1, [Define if you have C OpenMP support.])\n  fi\nelif test \"x${main_ld_was_given}\" = xno -a \"${MAIN_LD}\" = \"\\$(CC)\" -a \\\n        \"x${dylib_ld_was_given}\" = xno -a \"${DYLIB_LD}\" = \"\\$(CC)\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"xunsupported\"; then\n  R_OPENMP_CFLAGS=\"${OPENMP_CFLAGS}\"\n  R_SH_VAR_ADD(MAIN_LDFLAGS, [${OPENMP_CFLAGS}])\n  R_SH_VAR_ADD(DYLIB_LDFLAGS, [${OPENMP_CFLAGS}])\n  AC_DEFINE(HAVE_OPENMP, 1, [Define if you have C OpenMP support.])\nelse\n  R_OPENMP_CFLAGS= \nfi\n## Currently unused: see comment in Makeconf.in\nif test -z \"${R_OPENMP_FFLAGS+set}\" -a \\\n        \"x${ac_cv_prog_f77_openmp}\" != \"xunsupported\"; then\n  R_OPENMP_FFLAGS=\"${OPENMP_FFLAGS}\"\nfi\nAC_SUBST(R_OPENMP_CFLAGS)\nAC_SUBST(R_OPENMP_FFLAGS)\n\n## For compiling package code, we use SHLIB_FCLD, SHLIB_CXXLD or\n## SHLIB_LD for linking, depending on whether the package contains\n## Fortran (90/95) code, C++ (or ObjC) code, or \"just\" C and Fortran 77.\n## However, we (currently) do not conditionalize compilation flags.  So\n## the only \"safe\" thing we can do for now is:\n##\n##    If none of SHLIB_LD, SHLIB_CXXLD and SHLIB_FCLD were specified by\n##    the user and equal CC, CXX and FC, respectively, and these were\n##    determined to support OpenMP, the we try to provide OpenMP support\n##    for packages by adding OPENMP_FCFLAGS, OPENMP_CXXFLAGS and\n##    OPENMP_CFLAGS to the respective linker flags, and add the OPENMP\n##    flags to all (C, C++, Fortran and Fortran 77) compiler flags.\n\n## <FIXME>\n## Need to do this after configuring Fortran 90/95 support, which comes\n## way below: should this be moved up to the compiler section?\n## </FIXME>\n\n### Now we have found all the flags, we need to use them to test appropriately.\n### We don't currently have any C++ tests, but future-proof.\n### In principle we should do this before testing for C-Fortran compatibility.\n\nCPPFLAGS_KEEP=${CPPFLAGS}\nCFLAGS_KEEP=${CFLAGS}\nFFLAGS_KEEP=${FFLAGS}\nCXXFLAGS_KEEP=${CXXFLAGS}\nCPPFLAGS=\"${CPPFLAGS} ${R_XTRA_CPPFLAGS}\"\nif test \"${want_R_shlib}\" = yes; then\n  CFLAGS=\"${CFLAGS} ${CPICFLAGS} ${R_XTRA_CFLAGS}\"\n  FFLAGS=\"${FFLAGS} ${FPICFLAGS} ${R_XTRA_FFLAGS}\"\n  CXXFLAGS=\"${CXXFLAGS} ${CXXPICFLAGS} ${R_XTRA_CXXFLAGS}\"\nelse\n  CFLAGS=\"${CFLAGS} ${R_XTRA_CFLAGS}\"\n  FFLAGS=\"${FFLAGS} ${R_XTRA_FFLAGS}\"\n  CXXFLAGS=\"${CXXFLAGS} ${R_XTRA_CXXFLAGS}\"\nfi\n\n### * Checks for library functions.\n\nAC_CHECK_TYPES([off_t])\nAC_FUNC_ALLOCA\nAC_CHECK_DECLS([alloca], , , \n[#ifdef HAVE_ALLOCA_H\n# include <alloca.h>\n#endif])\n\n## C99 functions: \n## not all C99 runtimes are complete,\n## but we have substitutes for expm1 hypot log1p and (internally) nearbyint[l]\n## FreeBSD used to lack log1pl, but 10 seems to have it.\n## FreeBSD 8.2 lacks log2\n## FreeBSD 7.3 lacks nearbyintl/rintl (nearbyint appeared in 5.2)\n## Apparently rint was once broken on HP-UX: undefine HAVE_RINT for such platforms\n## Cygwin and FreeBSD lacked powl (FreeBSD 10 seems to have it).\n## Cygwin had rintl but not nearbyintl\nR_CHECK_FUNCS([expm1 hypot log1p log1pl log2 log10 nearbyint nearbyintl powl rint rintl], [#include <math.h>])\n## va_copy is C99: required as from R 2.13.0\nR_CHECK_FUNCS([va_copy], [#include <stdarg.h>])\nif test \"${ac_cv_have_decl_va_copy}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'va_copy' system call])\nfi\n## isblank should be a macro according to C99.  It was missing on Solaris 8\nAC_CHECK_FUNCS(isblank)\n\n## Solaris libsunmath\nAC_CHECK_HEADERS(sunmath.h)\nAC_CHECK_LIB(sunmath, cospi)\n\n## Functions from ISO/IEC TS 18661-4:2015 C11 extensions.\n## For now, do not define _GNU_SOURCE here.\n## All but pown have long been in Solaris' libsunmath\n## macOS has __cospi __sinpi __tanpi\nAC_CHECK_FUNCS([atanpi atan2pi cospi exp10 pown sinpi tanpi __cospi __sinpi __tanpi], \n[#define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1\n#include <math.h>\n#ifdef HAVE_SUNMATH_H\n#include <sunmath.h>\n#endif])\n\n## fseeko/ftello are POSIX, may be macros\n## matherr is SVID, redefined in arithmetic.c if present\nAC_CHECK_FUNCS(fseeko ftello matherr)\n\n## POSIX functions\nR_CHECK_FUNCS([fcntl], [#include <fcntl.h>])\nR_CHECK_FUNCS([getgrgid], [#include <grp.h>])\nR_CHECK_FUNCS([getpwuid], [#include <pwd.h>])\nR_CHECK_FUNCS([kill sigaction sigaltstack sigemptyset], [#include <signal.h>])\nR_CHECK_FUNCS([fdopen popen], [#include <stdio.h>])\nif test \"${ac_cv_have_decl_popen}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'popen' system call])\nfi\nR_CHECK_FUNCS([getline], [#include <stdio.h>])\nR_CHECK_FUNCS([select], \n[#ifdef HAVE_SYS_SELECT_H\n#include <sys/select.h>  /* POSIX >= 2001 */\n#endif\n#ifdef HAVE_SYS_TIME_H\n#include <sys/time.h>  /* Earlier POSIX, HP-UX? */\n#endif])\ncase \"${host_os}\" in\n  mingw*|windows*|winnt)\n  ;;\n  *)\n  if test \"${ac_cv_have_decl_select}\" = \"no\"; then\n     AC_MSG_ERROR([Building R on Unix requires the 'select' system call])\n  fi\n  if test \"${ac_cv_header_sys_select_h}\" = \"no\" -a \"${ac_cv_header_sys_times_h} = \"no\"\"; then\n     AC_MSG_ERROR([Building R on Unix requires either <sys/select.h> or <sys/time.h>])\n  fi\n  ;;\nesac\n## Windows has neither setenv nor unsetenv\nR_CHECK_FUNCS([setenv unsetenv], [#include <stdlib.h>])\nR_CHECK_FUNCS([getrlimit getrusage getpriority], [#include <sys/resource.h>])\nR_CHECK_FUNCS([chmod mkfifo stat umask], [#include <sys/stat.h>])\nif test \"${ac_cv_have_decl_stat}\" = \"no\"; then\n   AC_MSG_ERROR([Building R requires the 'stat' system call])\nfi\nR_CHECK_FUNCS([gettimeofday utimes], [#include <sys/time.h>])\nR_CHECK_FUNCS([times], [#include <sys/times.h>])\nR_CHECK_FUNCS([gmtime_r localtime_r], [#include <time.h>])\nR_CHECK_FUNCS([nl_langinfo], [#include <langinfo.h>])\nR_CHECK_FUNCS([access chdir execv ftruncate getcwd geteuid getuid link readlink symlink sysconf],\n[#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif])\n## Linux-specific feature allowing us to fix CPU affinity for parallel\nR_CHECK_FUNCS([sched_setaffinity sched_getaffinity], [#include <sched.h>])\n## utime was declared obsolescent in POSIX 2008 (use utimes instead)\nR_CHECK_FUNCS([utime], [#include <utime.h>])\n## POSIX.1-2008 preferred form\nR_CHECK_FUNCS([utimensat], [#include <sys/stat.h>])\n## Used to avoid a problem with some Xcode 9 updates on macOS 10.12 (Darwin 16)\ncase \"${host_os}\" in\n   darwin1[[0123456]].*)\n     AC_DEFINE(MACOS_SIERRA, 1, [macOS 10.12 (Sierra) or earlier])\n   ;;\nesac\nAC_SUBST(MACOS_SIERRA)\n## clock_gettime is POSIX 1993, but not on macOS prior to 10.12 (Sierra)\n## Some OSes need -lrt: Linux (for glibc versions before 2.17), Solaris,\n## not FreeBSD. \n## Unsurprising, as POSIX 2008 moved it from its timers section to base.\n## timespec_get is C11.\nAC_CHECK_LIB(rt, clock_gettime)\nR_CHECK_FUNCS([clock_gettime timespec_get], [#include <time.h>])\n## We need setenv or putenv.  It seems that everyone does have\n## putenv, as earlier versions of R would have failed without it.\n## It is not always declared, so we do not require a declaration.\nAC_CHECK_FUNCS(putenv)\nAC_CHECK_DECLS([putenv], , , [#include <stdlib.h>])\n## this is a GNU extension so usually hidden.  Not in Solaris 10\nAC_CHECK_FUNCS(vasprintf)\nAC_CHECK_DECLS([vasprintf], , , [#include <stdio.h>])\n## mempcpy is a GNU extension used by the included gettext.  Not in Solaris 10\nAC_CHECK_FUNCS(mempcpy)\n## realpath is POSIX 2001 (and BSD)\n## Some early GNU libc systems had it in unistd.h.\nAC_CHECK_FUNCS(realpath)\nAC_CHECK_DECLS([realpath], , , [#include <stdlib.h>\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif])\n## glob is POSIX: we have a substitute on Windows\n## assume without checking that if we have glob we also have globfree\nR_CHECK_FUNCS([glob], [#ifdef HAVE_GLOB_H\n# include <glob.h>\n#endif])\nAC_CHECK_FUNCS([dladdr dlsym])\nAC_CHECK_DECLS([dladdr,dlsym], , , [#include<dlfcn.h>])\nAC_CHECK_DECLS([RTLD_DEFAULT,RTLD_NEXT], , , [#include<dlfcn.h>])\n\n## Lots of uses of getwd(), file.access(), Sys.glob().\n## We don't need times() except as a fallback for getrusage and\n## clock_gettime/gettimeofday -- but it is older and always there.\ncase \"${host_os}\" in\n  mingw*)\n  ;;\n  *)\n    if test \"${ac_cv_search_glob}\" = \"no\"; then\n       AC_MSG_ERROR([Building R requires the 'glob' system call])\n    fi\n    if test \"${ac_cv_search_access}\" = \"no\"; then\n       AC_MSG_ERROR([Building R requires the 'access' system call])\n    fi\n    if test \"${ac_cv_search_getcwd}\" = \"no\"; then\n       AC_MSG_ERROR([Building R requires the 'getcwd' system call])\n    fi\n    if test \"${ac_cv_search_chdir}\" = \"no\"; then\n       AC_MSG_ERROR([Building R requires the 'chdir' system call])\n    fi\n    if test \"${ac_cv_search_times}\" = \"no\"; then\n      AC_MSG_ERROR([Building R requires the 'times' system call])\n    fi\n  ;;\nesac\n## We also use getlogin isatty rename unlink without checking.\n\n## <NOTE>\n## No need checking for bcopy bzero memcpy even though ifnames\n## might report corresponding HAVE_FOO conditionals.\n## </NOTE>\n\n\nif test $ac_cv_type_off_t=yes -a $ac_cv_func_fseeko=yes -a $ac_cv_func_ftello=yes; then\n   AC_DEFINE(HAVE_OFF_T, 1,\n            [Define if you have off_t, fseeko and ftello.]) \nfi\n\n## IEEE 754. We rely on this in e.g. the working log test.\nR_IEEE_754\n\n## check if putenv can substitute for unsetenv\nR_PUTENV_AS_UNSETENV\n\n\n## check whether nl_langinfo(CODESET) is in langinfo.h\n## defines HAVE_LANGINFO_CODESET if it's there\nAM_LANGINFO_CODESET\n\n## Used to build src/include/Rmath.h.\n## <NOTE>\n## we don't use AC_CONFIG_HEADERS on Rmath.h.in because\n## a) that would comment out #undef statements in Rmath.h.in and\n## b) Rmath.h should be a self-contained file for standalone Rmath use.\n## </NOTE>\nif test \"${ac_cv_have_decl_expm1}\" = yes; then\n  RMATH_HAVE_EXPM1=\"# define HAVE_EXPM1 1\"\nelse\n  RMATH_HAVE_EXPM1=\"# undef HAVE_EXPM1\"\nfi\nAC_SUBST(RMATH_HAVE_EXPM1)\nif test \"${ac_cv_have_decl_hypot}\" = yes; then\n  RMATH_HAVE_HYPOT=\"# define HAVE_HYPOT 1\"\nelse\n  RMATH_HAVE_HYPOT=\"# undef HAVE_HYPOT\"\nfi\nAC_SUBST(RMATH_HAVE_HYPOT)\nif test \"${ac_cv_have_decl_log1p}\" = yes; then\n  RMATH_HAVE_LOG1P=\"# define HAVE_LOG1P 1\"\nelse\n  RMATH_HAVE_LOG1P=\"# undef HAVE_LOG1P\"\nfi\nAC_SUBST(RMATH_HAVE_LOG1P)\n\n## Do we need substitutes?\n## mkdtemp is not on Solaris 10, added in POSIX 2008\n## strdup strncasecmp were first required in POSIX 2001.\nAC_REPLACE_FUNCS([mkdtemp strdup strncasecmp])\n## Enable declarations in Defn.h?\nAC_CHECK_DECLS([mkdtemp, strdup, strncasecmp])\n\nAC_SEARCH_LIBS(connect, [socket])\n# gethostbyname was removed in POSIX 2008 (in favour of getaddrinfo, POSIX 2001)\nAC_SEARCH_LIBS(gethostbyname, [nsl socket])\nAC_SEARCH_LIBS(xdr_string, [nsl tirpc])\nR_FUNC_CALLOC\nif test \"${ac_cv_have_decl_isfinite}\" = \"yes\"; then\nR_FUNC_ISFINITE\nfi\n## check accuracy of log1p\nR_FUNC_LOG1P\nR_FUNC_FTELL\nR_FUNC_SIGACTION\n\nif test x${use_internal_tzcode} = xdefault; then\ncase \"${host_os}\" in\n   darwin*)\n     use_internal_tzcode=yes;\n     ;; \nesac\nfi\nif test \"${use_internal_tzcode}\" != yes; then\n  R_MKTIME_ERRNO\n  R_FUNC_MKTIME\nfi\n\nR_C99_COMPLEX\nR_FUNC_CTANH\n\n## BSD extensions\nAC_CACHE_CHECK([whether 'struct tm' includes tm_zone],\n                [r_cv_have_tm_zone],\n[AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n// glibc needs this defined.\n#define _BSD_SOURCE\n#include <time.h>\n\nint main() {\n    struct tm x;\n    x.tm_zone = \"\";\n}\n]])],\n              [r_cv_have_tm_zone=yes],\n              [r_cv_have_tm_zone=no])])\nif test \"x${r_cv_have_tm_zone}\" = xyes; then\n  AC_DEFINE(HAVE_TM_ZONE, 1, [Define to 1 if your 'struct tm' has tm_zone.])\nfi\n\nAC_CACHE_CHECK([whether 'struct tm' includes tm_gmtoff],\n                [r_cv_have_tm_gmtoff],\n[AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n// glibc needs this defined, second for >= 2.20\n#define _BSD_SOURCE\n#define _DEFAULT_SOURCE\n#include <time.h>\n\nint main() {\n    struct tm x;\n    x.tm_gmtoff = +3600;\n}\n]])],\n              [r_cv_have_tm_gmtoff=yes],\n              [r_cv_have_tm_gmtoff=no])])\nif test \"x${r_cv_have_tm_gmtoff}\" = xyes; then\n  AC_DEFINE(HAVE_TM_GMTOFF, 1, [Define to 1 if your 'struct tm' has tm_gmtoff.])\nfi\n\n## BLAS.\n## <NOTE>\n## This has to come *after* checking for Fortran 77 compiler/converter\n## characteristics (notably name mangling and FLIBS).\n## </NOTE>\n\nif test \"${use_blas}\" = yes; then\n  ## may acx_blas_ok to yes\n  R_BLAS_LIBS\nfi\n\nif test \"${acx_blas_ok}\" != \"yes\"; then\n  case \"${host_os}\" in\n    aix*)\n      ;;\n    *)\n      if test \"${use_blas_shlib}\" = \"unset\"; then\n        use_blas_shlib=\"yes\"\n      fi\n      ;;\n  esac\nfi\n\nAM_CONDITIONAL(BLAS_SHLIB, [test \"x${use_blas_shlib}\" = xyes])\n\ncase \"${host_os}\" in\n  darwin*)\n    ## In order to allow the R build to be relocatable, we strip paths\n    ## from all shlibs and rely on DYLD_LIBRARY_PATH. Unfortunately\n    ## Darwin linker ignores it at build-time and doesn't use -L to\n    ## resolve dylib dependencies, so libRblas will not be found unless\n    ## we tell ld where it lives. I don't know of any more elegant solution :/\n    if test \"x${use_blas_shlib}\" = xyes; then\n      LIBR=\"${LIBR} -dylib_file libRblas.dylib:\\$(R_HOME)/lib\\$(R_ARCH)/libRblas.dylib\"\n    fi\n  ;;\nesac\n## LIBR0 is for the -L part, LIBR1 for -lR (if needed)\nAC_SUBST(LIBR0)\nAC_SUBST(LIBR1)\n\n## This version is used to build a shared BLAS lib\nBLAS_LIBS0=${BLAS_LIBS}\n\n## external BLAS + shared BLAS lib = we need to pass symbols through\n## this may require some magic\nif test \"${acx_blas_ok}\" = yes -a \"${use_blas_shlib}\" = yes; then\n  case \"${host_os}\" in\n    darwin*)\n    ## test whether we can see symbols through the proxy BLAS library\n    ## this test could be modified to not be Darwin-specific,\n    ## however the fix is darwin-specific\n    if test \"${r_cv_prog_f77_append_underscore}\" = yes; then\n      dgemm=dgemm_\n      xerbla=xerbla_\n    else\n      dgemm=dgemm\n      xerbla=xerbla\n    fi\n    AC_MSG_CHECKING([whether external BLAS is visible through libRblas])\n    AC_CACHE_VAL([r_cv_blas0_passthrough],[\n[cat > conftestl.c <<EOF\n  void ${dgemm}();\n  void dummy() { ${dgemm}(); }\nEOF]\necho \"${CC} ${CFLAGS} conftestl.c ${SHLIB_LDFLAGS} -o libconftest${DYLIB_EXT} ${LIBS} ${BLAS_LIBS}\" >&AS_MESSAGE_LOG_FD\n${CC} ${CFLAGS} conftestl.c ${SHLIB_LDFLAGS} -o libconftest${DYLIB_EXT} ${LIBS} ${BLAS_LIBS} 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD\n[cat > conftest.c <<EOF\nvoid ${dgemm}();\nvoid ${xerbla}(char *srname, int *info){};\nint main(int argc, char **argv) { if (argc<0) ${dgemm}(); return 0; }\nEOF]\nif ${CC} ${CFLAGS} -c conftest.c 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n  if ${CC} ${LDFLAGS} -o conftest${ac_exeext} \\\n       conftest.${ac_objext} -L. -lconftest \\\n       1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD;\n  then\n    ## redirect error messages to config.log\n    output=`./conftest${ac_exeext} 2>&AS_MESSAGE_LOG_FD`\n    if test ${?} = 0; then\n\tr_cv_blas0_passthrough=yes\n    fi\n  fi\nfi\n])\nif test -n \"${r_cv_blas0_passthrough}\"; then\nr_cv_blas0_passthrough=yes\nAC_MSG_RESULT([yes])\nelse\nAC_MSG_RESULT([no])\nAC_MSG_CHECKING([can it be fixed by using -sub_umbrella])\nac_test_BLAS_LIBS=`echo \"${BLAS_LIBS}\"|sed -e s/-framework/-sub_umbrella/`\nrm -f libconftest.dylib\necho \"${CC} ${CFLAGS} conftestl.c ${SHLIB_LDFLAGS} -o libconftest${DYLIB_EXT} ${LIBS} ${BLAS_LIBS} ${ac_test_BLAS_LIBS}\" >&AS_MESSAGE_LOG_FD\n${CC} ${CFLAGS} conftestl.c ${SHLIB_LDFLAGS} -o libconftest${DYLIB_EXT} ${LIBS} ${BLAS_LIBS} ${ac_test_BLAS_LIBS} 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD\nif ${CC} ${CFLAGS} -c conftest.c 1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n  if ${CC} ${LDFLAGS} -o conftest${ac_exeext} \\\n       conftest.${ac_objext} -L. -lconftest \\\n       1>&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD;\n  then\n    ## redirect error messages to config.log\n    output=`./conftest${ac_exeext} 2>&AS_MESSAGE_LOG_FD`\n    if test ${?} = 0; then\n        r_cv_blas0_passthrough=yes\n    fi\n  fi\nfi\nif test -n \"${r_cv_blas0_passthrough}\"; then\nr_cv_blas0_passthrough=yes\nAC_MSG_RESULT([yes])\nBLAS_LIBS0=\"${BLAS_LIBS} ${ac_test_BLAS_LIBS}\"\nelse\nAC_MSG_RESULT([no])\nAC_MSG_ERROR([Cannot build Rblas shared library such that it makes external BLAS visible.\nAn alternative is to use internal BLAS instead and replace\nlibRblas.dylib with the external BLAS library after R is built.])\nfi\nfi\n    rm -f conftest.c conftest.o conftestl.c libconftest.dylib\n    ;;\n  esac\nfi\nAC_SUBST(BLAS_LIBS0)\n\nif test \"${use_blas_shlib}\" = yes; then\n  ## set BLAS_LIBS to point at local version\n  BLAS_LIBS=\"-L\\$(R_HOME)/lib\\$(R_ARCH) -lRblas\"\nfi\n\nAM_CONDITIONAL(USE_VECLIB_G95FIX, [test \"x${use_veclib_g95fix}\" = xyes])\nAM_CONDITIONAL(USE_EXTERNAL_BLAS, [test \"${acx_blas_ok}\" = \"yes\"])\n\n## LAPACK.\n## The default has already been set on macOS: otherwise it is \"no\"\n## and so this test fails.\nif test \"${use_lapack}\" = \"yes\"; then\n  R_LAPACK_LIBS\nfi\nif test \"${acx_lapack_ok}\" != \"yes\"; then\n  LAPACK_LIBS=\"-L\\$(R_HOME)/lib\\$(R_ARCH) -lRlapack\"\nfi\nAC_SUBST(LAPACK_LIBS)\nAM_CONDITIONAL(USE_EXTERNAL_LAPACK, [test \"${acx_lapack_ok}\" = \"yes\"])\n\n### * Checks for system services.\n\n## iconv headers and function.\nR_ICONV\n\n## check sufficient support for MBCS\nR_MBCS\n\n## support for ICU\nif test \"$use_ICU\" = yes ; then\n  R_ICU\n  if test \"$use_ICU\" = no ; then\n    case \"${host_os}\" in\n      darwin*)\n        AC_CHECK_LIB(icucore, ucol_open, [],\n            [AC_MSG_ERROR([library 'icucore' is required for ICU])])\n        AC_DEFINE(USE_ICU_APPLE, 1, [Define to use Apple's ICU.])\n        AC_DEFINE(USE_ICU, 1, [Define to use ICU for collation.])\n\tuse_ICU=yes\n      ;;\n    esac\n  fi\nfi\nAC_SUBST(USE_ICU)\nAC_SUBST(USE_ICU_APPLE)\n\n## X11.\nR_X11\nAM_CONDITIONAL(BUILD_X11, [test \"x${use_X11}\" = \"xyes\"])\n## check if X11 typedefs KeySym\nR_TYPE_KEYSYM\n## check if Xmu is supported\nR_X11_Xmu\n\nif test \"x${want_cairo}\" = \"xyes\"; then\nR_PANGO_CAIRO\nfi\nAM_CONDITIONAL(BUILD_DEVCAIRO, [test \"x${r_cv_cairo_works}\" = xyes])\n\n\n## Aqua\ncase \"${host_os}\" in\n  darwin*)\n    ## check for CoreFoundation framework (chances are much higher\n    ## that we can build AQUA if this one is present)\n    R_CHECK_FRAMEWORK(CFStringGetSystemEncoding, CoreFoundation)\n    ## FIXME: we should verify that we can use Obj-C exceptions\n    ##        such as @try and friends. The OBJC compiler tests\n    ##\t      above add -fobjc-exceptions where possible, but\n    ##\t      they don't check that the exceptions are available.\n    R_AQUA\n    ## That sets HAVE_AQUA, which is used to enable support of R.app\n    ## and also in C headers and files related to quartz()\n  ;;\n  *)\n    use_aqua=no\n  ;;\nesac\n## Now used:\n## - to compile src/unix/aqua.c\n## - in etc/Renviron to set the personal library,\n## - in grDevices to select building quartz()\nAM_CONDITIONAL(BUILD_AQUA, [test \"x${use_aqua}\" = xyes])\n\n## Tcl/Tk.\nR_TCLTK\n\n## BSD networking.\nR_BSD_NETWORKING\n\n## XDR headers and library routines.\nR_XDR\n\n## zlib headers and libraries.\nR_ZLIB\n\n## bzlib headers and libraries.\nR_BZLIB\n\n## LZMA headers and libraries from xz-utils\nR_LZMA\n\n## PCRE headers and libraries.\nR_PCRE\n\n## tre headers and libraries.\nR_TRE\n\n## libcurl\nR_LIBCURL\n\n\n## Bitmap headers and libraries.\nif test -n \"${PKGCONF}\"; then\nR_BITMAPS2\nelse\nR_BITMAPS\nfi\n\n## POSIX times.\nR_SYS_POSIX_LEAPSECONDS\n\n## stat times\ngl_STAT_TIME\n \n## R profiling.\nif test \"${want_R_profiling}\" = yes; then\n  AC_CHECK_FUNCS(setitimer,\n                 [AC_DEFINE(R_PROFILING, 1,\n\t\t            [Define this to enable R-level profiling.])],\n                 [want_R_profiling=\"no\"])\nfi\nAC_SUBST(R_PROFILING)\n\n## R profiling.\nif test \"${want_memory_profiling}\" = yes; then\n  AC_DEFINE(R_MEMORY_PROFILING, 1, [Define this to enable memory profiling.])\nfi\n\n## Large-file-support\nAC_SYS_LARGEFILE\nAC_FUNC_FSEEKO\n\n## Valgrind instrumentation\nif test ${valgrind_level} -eq 0; then\n  AC_DEFINE(NVALGRIND, 1, [Define to disable Valgrind instrumentation])\nelif test \"${use_system_valgrind}\" = yes; then\n  AC_CHECK_HEADERS([valgrind/memcheck.h])\nfi\n\nAC_DEFINE_UNQUOTED(VALGRIND_LEVEL, ${valgrind_level}, [Define as 1 or 2 to specify levels of Valgrind instrumentation])\n\n\nif test \"x${use_internal_tzcode}\" = xyes; then\n  AC_DEFINE(USE_INTERNAL_MKTIME, 1, [Define to use internal time-zone code])\nfi\nAM_CONDITIONAL(BUILD_TZONE, [test \"x${use_internal_tzcode}\" = xyes])\n\n\n## KERN_USRSTACK support (BSD, Darwin, ...)\nR_KERN_USRSTACK\n\n## check for visible __libc_stack_end on Linux\ncase \"${host_os}\" in\n  linux*)\n    AC_CACHE_CHECK([for visible __lib_stack_end], \n    [r_cv_libc_stack_end],\n    [AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include \"confdefs.h\"\n#include <stdlib.h>\n/* This might get optimized out if not used */\nextern void * __libc_stack_end;\n\nint main () {\n    if(!__libc_stack_end) exit(1);\n    exit(0);\n}\n  ]])], [r_cv_libc_stack_end=yes], [r_cv_libc_stack_end=no], \n    [r_cv_libc_stack_end=no])])\n\n  if test \"${r_cv_libc_stack_end}\" = yes; then\n    AC_DEFINE(HAVE_LIBC_STACK_END, 1, [Define if __libc_stack_end is visible.])\n  fi\nesac\n\n### * Miscellaneous.\n\n## Printing.\n## We look to see whether we have 'lpr' or 'lp'.  Some platforms\n## provide both (SunOS and HPUX), and in those cases we choose lpr.\nif test -z \"${R_PRINTCMD}\"; then\n  AC_CHECK_PROGS(R_PRINTCMD, [lpr lp])\nfi\nAC_DEFINE_UNQUOTED(R_PRINTCMD, \"${R_PRINTCMD}\",\n[Define this to be printing command on your system.])\n\n## Default paper size.\nAC_PATH_PROG(PAPERCONF, paperconf, false)\n: ${PAPERSIZE=a4}\npapersize=`${PAPERCONF}`\ntest -z \"${papersize}\" && papersize=\"${PAPERSIZE}\"\n: ${R_PAPERSIZE=\"${papersize}\"}\nAC_SUBST(R_PAPERSIZE)\n\n## Saving.\nAC_SUBST(R_BATCHSAVE)\n\n## Java support\n## R_JAVA\ncustom_JAVA_HOME=\"${JAVA_HOME}\"\n: ${JAVA_LIBS=~autodetect~}\n: ${JAVA_CPPFLAGS=~autodetect~}\n: ${JAVA_LD_LIBRARY_PATH=~autodetect~}\ncustom_JAVA_LIBS=\"${JAVA_LIBS}\"\ncustom_JAVA_CPPFLAGS=\"${JAVA_CPPFLAGS}\"\ncustom_JAVA_LD_LIBRARY_PATH=\"${JAVA_LD_LIBRARY_PATH}\"\nAC_SUBST(custom_JAVA_HOME)\nAC_SUBST(custom_JAVA_CPPFLAGS)\nAC_SUBST(custom_JAVA_LIBS)\nAC_SUBST(custom_JAVA_LD_LIBRARY_PATH)\nJAVA_LD_LIBRARY_PATH=\nAC_SUBST(JAVA)\nAC_SUBST(JAVAC)\nAC_SUBST(JAVAH)\nAC_SUBST(JAR)\nAC_SUBST(JAVA_LD_LIBRARY_PATH)\nAC_SUBST(JAVA_LIBS0)\nAC_SUBST(JAVA_CPPFLAGS0)\nAC_SUBST(R_JAVA_LD_LIBRARY_PATH)\n\n\n## F90/F95 support\nAC_PROG_FC()\nAC_LANG_PUSH(Fortran)\nAC_FC_SRCEXT(f90, [dummy=1], [dummy=0])\nAC_FC_SRCEXT(f95, [dummy=1], [dummy=0])\nR_OPENMP\nAC_LANG_POP()\nif test -z \"${SHLIB_FCLD}\"; then\n  shlib_fcld_was_given=no\n  SHLIB_FCLD=\"\\$(FC)\"\nfi\n: ${SHLIB_FCLDFLAGS=\"${SHLIB_LDFLAGS}\"}\nAC_SUBST(SHLIB_FCLD)\nAC_SUBST(SHLIB_FCLDFLAGS)\n## x86 Solaris' f95 needs additional libs when building a DSO\nFCLIBS=${FCLIBS}\nAC_SUBST(FCLIBS)\n\n## OpenMP package stuff (needs to come *after* configuration of all\n## compilers).\n## We allow the users to override this for packages only (for now)\n## FIXME: what if SHLIB_OPENMP_?FLAGS is set but empty? (could use -n \"${VAR+set}\")\nif test \"x${shlib_ld_was_given}\" = xno -a \\\n        \"${SHLIB_LD}\" = \"\\$(CC)\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"xunsupported\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"x\" -a \\\n        \"x${shlib_cxxld_was_given}\" = xno -a \\\n        \"${SHLIB_CXXLD}\" = \"\\$(CXX)\" -a \\\n        \"x${ac_cv_prog_cxx_openmp}\" != \"xunsupported\" -a \\\n        \"x${shlib_fcld_was_given}\" = xno -a \\\n        \"${SHLIB_FCLD}\" = \"\\$(FC)\" -a \\\n        \"x${ac_cv_prog_fc_openmp}\" != \"xunsupported\"; then\n  ## next macro is copied into Rconfig.h\n  AC_DEFINE(SUPPORT_OPENMP, 1,\n            [Define if you have C/C++/Fortran OpenMP support for package code.])\nfi\n## This assumes that OpenMP support in the C compiler includes compilation by F77\nif test -z \"${SHLIB_OPENMP_CFLAGS+set}\" -a \\\n        \"x${shlib_ld_was_given}\" = xno -a \\\n        \"${SHLIB_LD}\" = \"\\$(CC)\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"xunsupported\" -a \\\n        \"x${ac_cv_prog_c_openmp}\" != \"x\"; then\n  SHLIB_OPENMP_CFLAGS=\"${OPENMP_CFLAGS}\"\n  if test -z \"${SHLIB_OPENMP_FFLAGS+set}\" -a \\\n          \"x${ac_cv_prog_f77_openmp}\" != \"xunsupported\"; then\n    SHLIB_OPENMP_FFLAGS=\"${OPENMP_FFLAGS}\"\n  fi\nfi\nif test -z \"${SHLIB_OPENMP_CXXFLAGS+set}\" -a \\\n        \"x${shlib_cxxld_was_given}\" = xno -a \\\n        \"${SHLIB_CXXLD}\" = \"\\$(CXX)\" -a \\\n        \"x${ac_cv_prog_cxx_openmp}\" != \"xunsupported\"; then\n  SHLIB_OPENMP_CXXFLAGS=\"${OPENMP_CXXFLAGS}\"\nfi\nif test -z \"${SHLIB_OPENMP_FCFLAGS+set}\" -a \\\n        \"x${shlib_fcld_was_given}\" = xno -a \\\n        \"${SHLIB_FCLD}\" = \"\\$(FC)\" -a \\\n        \"x${ac_cv_prog_fc_openmp}\" != \"xunsupported\"; then\n  SHLIB_OPENMP_FCFLAGS=\"${OPENMP_FCFLAGS}\"\nfi\n\nAC_SUBST(SHLIB_OPENMP_CFLAGS)\nAC_SUBST(SHLIB_OPENMP_CXXFLAGS)\nAC_SUBST(SHLIB_OPENMP_FCFLAGS)\nAC_SUBST(SHLIB_OPENMP_FFLAGS)\n\n\n## Look for FCPICFLAGS\n## Debian in their wisdom have f95 as a link to gfortran, so\n## use this to pick out gfortran (even though it is unreliable).\nif test \"${ac_cv_fc_compiler_gnu}\" = yes; then\n  case \"${host_cpu}\" in\n    sparc*|ppc64*|powerpc64*|s390*)\n      fcpicflags=\"-fPIC\"\n      ;;\n    *)\n      fcpicflags=\"-fpic\"\n      ;;\n  esac\nfi\ncase \"${host_os}\" in\n  darwin*)\n     ## macOS does not have a Fortran compiler, so this is speculative\n    fcpicflags=\"${darwin_pic}\"\n    ;;\n  hpux*)\n    case \"${FC}\" in\n      f90)\n        fcpicflags=\"+Z\"\n        ;;\n    esac\n    ;;\n  linux*)\n    case  \"${FC}\" in\n      ## Intel compilers: probably get identified as GNU, but make sure.\n      *ifc|*ifort)\n        fcpicflags=\"-fpic\"\n        ;;\n      ## Portland Group\n      *pgf95|*pgf90)\n        fcpicflags=\"-fpic\"\n        ;;\n    esac\n    ;;\n  solaris*)\n    if test \"${ac_cv_fc_compiler_gnu}\" = yes; then\n      fcpicflags=\"-fPIC\"\n    else\n      fcpicflags=\"-PIC\"\n    fi\n    ;;\nesac\n: ${FCPICFLAGS=\"${fcpicflags}\"}\nif test -z \"${FCPICFLAGS}\"; then\n  case \"${host_os}\" in\n    aix*|mingw*)\n      ;;\n    *)\n      AC_MSG_WARN([I could not determine FCPICFLAGS.])\n      ;;\n  esac\nfi\n\n\n## Make sure -L terms come first in LIBS.\nLIBS1=\"\"\nLIBS2=\"\"\nfor arg in ${LIBS}; do\n  case \"${arg}\" in\n    -L*)\n      R_SH_VAR_ADD(LIBS1, [${arg}])\n      ;;\n    *)\n      R_SH_VAR_ADD(LIBS2, [${arg}])\n      ;;\n  esac\ndone\nLIBS=\"${LIBS1} ${LIBS2}\"\n\n## R_LD_LIBRARY_PATH.\n\n## On Linux, do not add the ld.so system directories such as '/lib' and\n## '/usr/lib', so that the entries from '/etc/ld.so.conf' are not\n## shadowed (otherwise, e.g. optimized ATLAS libs would not be used).\n\n## On macOS (Darwin) this used to have /usr/X11R6/lib\n## which shadows the OpenGL framework but we add nothing on macOS ....\ncase \"${host_os}\" in\n  linux*)\n    r_ld_library_defaults=\"/usr/lib64:/lib64:/usr/lib:/lib\"\n    ;;\n  solaris*)\n    r_ld_library_defaults=\"/usr/lib:/lib\"\n    ;;\n  *)\n    r_ld_library_defaults=\n    ;;\nesac\nif test -n \"${R_LD_LIBRARY_PATH_save}\"; then\n  R_LD_LIBRARY_PATH=${R_LD_LIBRARY_PATH_save}\nelse\n## We already added -L's from LDFLAGS (except on Darwin): \n## seem to be doing it again\nfor arg in ${LDFLAGS} ${FLIBS} ${BLAS_LIBS} ${LAPACK_LIBS} ${X_LIBS} \\\n           ${TCLTK_LIBS}; do\n  case \"${arg}\" in\n    -L*)\n      lib=`echo ${arg} | sed \"s/^-L//\"`\n      r_want_lib=true\n      ## don't add anything for Darwin\n      case \"${host_os}\" in darwin*) r_want_lib=false ;; esac\n      ## Do not add non-existent directories.\n      test -d \"${lib}\" || r_want_lib=false\n      if test x\"${r_want_lib}\" = xtrue; then\n        ## Canonicalize (/usr/lib/gcc-lib/i486-linux/3.3.4/../../..).\n        lib=`cd \"${lib}\" && ${GETWD}`\n        ## Do not add something twice, or default paths.\n        r_save_IFS=\"${IFS}\"; IFS=\"${PATH_SEPARATOR}\"\n        for dir in ${R_LD_LIBRARY_PATH}${IFS}${r_ld_library_defaults}; do\n          if test x\"${dir}\" = x\"${lib}\"; then\n            r_want_lib=false\n            break\n          fi\n        done\n        IFS=\"${r_save_IFS}\"\n        if test x\"${r_want_lib}\" = xtrue; then\n          R_SH_VAR_ADD(R_LD_LIBRARY_PATH, [${lib}], [${PATH_SEPARATOR}])\n        fi\n      fi\n      ;;\n  esac\ndone\nfi\n\nAC_SUBST(R_LD_LIBRARY_PATH)\n\n## Recommended packages.\nif test \"${use_recommended_packages}\" = yes; then\n  R_RECOMMENDED_PACKAGES\nfi\nAM_CONDITIONAL(USE_RECOMMENDED_PACKAGES,\n               [test \"x${use_recommended_packages}\" = xyes])\n\n# i18n support.\nAM_NLS\nif test \"${USE_NLS}\" = \"yes\"; then\n  echo\n  echo \"Configuring src/extra/intl directory\"\n  AM_GNU_GETTEXT_VERSION(0.16.1)\n  AM_GNU_GETTEXT([no-libtool], [need-ngettext], [../extra/intl])\n  if test -n \"$INTL_MACOSX_LIBS\"; then\n    XTRA_INTL_CPPFLAGS=-I/System/Library/Frameworks/CoreFoundation.framework/Headers\n  fi\n  echo \"Finished configuring src/extra/intl directory\"\n  echo\nelse\n  USE_INCLUDED_LIBINTL=no\nfi\nAC_SUBST(XTRA_INTL_CPPFLAGS)\n\nAM_CONDITIONAL(USE_NLS, [test \"x${USE_NLS}\" = xyes])\nAM_CONDITIONAL(BUILD_LIBINTL, [test \"x${USE_INCLUDED_LIBINTL}\" = xyes])\n\nR_OPENMP_SIMDRED\n\n### shell for use in scripts: we allow R_SHELL to set the script,\n### since some AIX systems have zsh as sh.\n: ${R_SHELL=${SHELL}}\nAC_SUBST(R_SHELL)\nAC_MSG_RESULT([using as R_SHELL for scripts ... ${R_SHELL}])\n\n\n### * Win32 overrides\ncase \"${host_os}\" in\n  mingw*)\n    AC_DEFINE(HAVE_ICONV, 1, [Define if you have the iconv() function.])\n    AC_DEFINE(HAVE_ICONVLIST, 1, [Define if you have the `iconvlist' function.])\n    AC_DEFINE(HAVE_ICONV_H, 1, [Define to 1 if you have the <iconv.h> header file.])\n    AC_DEFINE(HAVE_JPEG, 1,[Define if you have the JPEG headers and libraries.])\n    AC_DEFINE(HAVE_PNG, 1, [Define if you have the PNG headers and libraries.])\n    AC_DEFINE(HAVE_POSIX_SETJMP, 1, [Define if you have POSIX.1 compatible\n                                     sigsetjmp/siglongjmp.])\n    AC_DEFINE(HAVE_TCLTK, 1, [Define if you have the Tcl/Tk headers and \n                              libraries and want Tcl/Tk support to be built.] )\n    AC_DEFINE(HAVE_TIFF, 1, [Define this if libtiff is available.])\n    AC_DEFINE(HAVE_TIMES, 1, [Define to 1 if you have the `times' function.])\n    want_R_profiling=yes\n    AC_DEFINE(R_PROFILING, 1, [Define this to enable R-level profiling.])\n    ;;\nesac\n\n### * Output.\n\nAC_CONFIG_HEADERS([src/include/config.h])\nAC_CONFIG_FILES(\n[Makeconf\n  Makefile\n  doc/Makefile\n  doc/html/Makefile\n  doc/manual/Makefile\n  etc/Makefile\n  etc/Makeconf\n  etc/Renviron\n  etc/javaconf\n  etc/ldpaths\n  m4/Makefile\n  po/Makefile \n  share/Makefile\n  src/Makefile\n  src/appl/Makefile\n  src/extra/Makefile\n  src/extra/blas/Makefile\n  src/extra/intl/Makefile\n  src/extra/tre/Makefile\n  src/extra/tzone/Makefile\n  src/extra/xdr/Makefile\n  src/include/Makefile\n  src/include/Rmath.h0\n  src/include/R_ext/Makefile\n  src/library/Recommended/Makefile\n  src/library/Makefile\n  src/library/base/DESCRIPTION\n  src/library/base/Makefile\n  src/library/compiler/DESCRIPTION\n  src/library/compiler/Makefile\n  src/library/datasets/DESCRIPTION\n  src/library/datasets/Makefile\n  src/library/graphics/DESCRIPTION\n  src/library/graphics/Makefile\n  src/library/graphics/src/Makefile\n  src/library/grDevices/DESCRIPTION\n  src/library/grDevices/Makefile\n  src/library/grDevices/src/Makefile\n  src/library/grDevices/src/cairo/Makefile\n  src/library/grid/DESCRIPTION\n  src/library/grid/Makefile\n  src/library/grid/src/Makefile\n  src/library/methods/DESCRIPTION\n  src/library/methods/Makefile\n  src/library/methods/src/Makefile\n  src/library/parallel/DESCRIPTION\n  src/library/parallel/Makefile\n  src/library/parallel/src/Makefile\n  src/library/profile/Makefile\n  src/library/stats/DESCRIPTION\n  src/library/stats/Makefile\n  src/library/stats/src/Makefile\n  src/library/stats4/DESCRIPTION\n  src/library/stats4/Makefile\n  src/library/splines/DESCRIPTION\n  src/library/splines/Makefile\n  src/library/splines/src/Makefile\n  src/library/tcltk/DESCRIPTION\n  src/library/tcltk/Makefile\n  src/library/tcltk/src/Makefile\n  src/library/tools/DESCRIPTION\n  src/library/tools/Makefile\n  src/library/tools/src/Makefile\n  src/library/translations/DESCRIPTION\n  src/library/translations/Makefile\n  src/library/utils/DESCRIPTION\n  src/library/utils/Makefile\n  src/library/utils/src/Makefile\n  src/main/Makefile\n  src/modules/Makefile\n  src/modules/X11/Makefile\n  src/modules/internet/Makefile\n  src/modules/lapack/Makefile\n  src/nmath/Makefile\n  src/nmath/standalone/Makefile\n  src/scripts/Makefile\n  src/scripts/R.sh\n  src/scripts/Rcmd\n  src/scripts/f77_f2c\n  src/scripts/javareconf\n  src/scripts/mkinstalldirs\n  src/scripts/pager\n  src/scripts/rtags\n  src/unix/Makefile\n  tests/Makefile\n  tests/Embedding/Makefile\n  tests/Examples/Makefile\n  tools/Makefile\n])\n\nAC_CONFIG_COMMANDS([stamp-h],\n[test -f src/include/stamp-h || echo timestamp > src/include/stamp-h])\n\n### now reset flags\nCPPFLAGS=${CPPFLAGS_KEEP}\nCFLAGS=${CFLAGS_KEEP}\nFFLAGS=${FFLAGS_KEEP}\nCXXFLAGS=${CXXFLAGS_KEEP}\n\nAC_OUTPUT\n\n## Summarize configure results.\n## <NOTE>\n## Doing this via AC_CONFIG_COMMANDS would require explicitly passing all\n## configure variables to config.status.\n## </NOTE>\nr_c_compiler=\"${CC} ${R_XTRA_CFLAGS} ${CFLAGS}\"\nr_cxx_compiler=\"${CXX} ${CXXSTD} ${R_XTRA_CXXFLAGS} ${CXXFLAGS}\"\nr_cxx98_compiler=\"${CXX98} ${CXX98STD} ${CXX98FLAGS}\"\nr_cxx11_compiler=\"${CXX11} ${CXX11STD} ${CXX11FLAGS}\"\nr_cxx14_compiler=\"${CXX14} ${CXX14STD} ${CXX14FLAGS}\"\nr_cxx17_compiler=\"${CXX17} ${CXX17STD} ${CXX17FLAGS}\"\nr_f77_compiler=\"${F77} ${R_XTRA_FFLAGS} ${FFLAGS}\"\nr_f95_compiler=\"${FC} ${FCFLAGS}\"\nr_objc_compiler=\"${OBJC} ${OBJCFLAGS}\"\nr_interfaces=\n## we will not have tested for X11 under some configure options, so\n## need to test protect the test.\nfor item in X11 aqua tcltk; do\n  if eval \"test x\\${use_${item}} = xyes\"; then\n    R_SH_VAR_ADD(r_interfaces, [${item}], [, ])\n  fi\ndone\nr_external_libs=\nif test \"${use_readline}\" = yes; then\n  r_external_libs=readline\nfi\nif test \"${acx_blas_ok}\" = \"yes\"; then\n  ## Try to figure out which BLAS was used.\n  case \"${BLAS_LIBS0}\" in\n    *-latlas*) r_blas=ATLAS ;;\n    *-lgoto*) r_blas=Goto ;;\n    *-lopenblas*) r_blas=OpenBLAS ;;\n    *-lacml*) r_blas=ACML ;;\n    *-lmkl*) r_blas=MKL ;;\n    *-lsgemm*) r_blas=PhiPack ;;\n    *sunperf*) r_blas=SunPerf ;;\n    *-lessl*)  r_blas=ESSL ;;\n    *Accelerate*)  r_blas=Accelerate ;;\n    \"\")        r_blas=none ;;\n    *)         r_blas=generic ;;\n  esac\n  R_SH_VAR_ADD(r_external_libs, [BLAS(${r_blas})], [, ])\nfi\nif test \"${acx_lapack_ok}\" = \"yes\"; then\n  ## Try to figure out which LAPACK was used.\n  case \"${LAPACK_LIBS}\" in\n    *sunperf*) r_lapack=SunPerf ;;\n    \"\")        r_lapack=\"in blas\" ;;\n    *)         r_lapack=generic ;;\n  esac\n  R_SH_VAR_ADD(r_external_libs, [LAPACK(${r_lapack})], [, ])\nfi\nif test \"${have_tre}\" = yes; then\n  R_SH_VAR_ADD(r_external_libs, [tre], [, ])\nfi\nif test \"x$ac_cv_header_curl_curl_h\" = xyes; then\n  R_SH_VAR_ADD(r_external_libs, [curl], [, ])\nfi\n\nr_capabilities=\nr_no_capabilities=\nif test \"${have_png}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [PNG], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [PNG], [, ])\nfi\nif test \"${have_jpeg}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [JPEG], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [JPEG], [, ])\nfi\nif test \"${have_tiff}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [TIFF], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [TIFF], [, ])\nfi\nif test \"${USE_NLS}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [NLS], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [NLS], [, ])\nfi\nif test \"${r_cv_cairo_works}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [cairo], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [cairo], [, ])\nfi\nif test \"${use_ICU}\" = yes; then\n  R_SH_VAR_ADD(r_capabilities, [ICU], [, ])\nelse\n  R_SH_VAR_ADD(r_no_capabilities, [ICU], [, ])\nfi\n\nr_options=\nr_no_options=\nif test \"${want_R_framework}\" = yes; then\n  R_SH_VAR_ADD(r_options, [framework], [, ])\nelif test \"${want_R_shlib}\" = yes; then\n  R_SH_VAR_ADD(r_options, [shared R library], [, ])\nelif test \"${want_R_static}\" = yes; then\n  R_SH_VAR_ADD(r_options, [static R library], [, ])\nfi\nif test \"${use_blas_shlib}\" = yes; then\n  R_SH_VAR_ADD(r_options, [shared BLAS], [, ])\nelse\n  R_SH_VAR_ADD(r_no_options, [shared BLAS], [, ])\nfi\nif test \"${want_R_profiling}\" = yes; then\n  R_SH_VAR_ADD(r_options, [R profiling], [, ])\nelse\n  R_SH_VAR_ADD(r_no_options, [R profiling], [, ])\nfi\nif test \"${want_memory_profiling}\" = yes; then\n  R_SH_VAR_ADD(r_options, [memory profiling], [, ])\nelse\n  R_SH_VAR_ADD(r_no_options, [memory profiling], [, ])\nfi\nif test \"${use_maintainer_mode}\" = yes; then\n  R_SH_VAR_ADD(r_options, [maintainer mode], [, ])\nfi\nif test \"${use_strict_barrier}\" = yes; then\n  R_SH_VAR_ADD(r_options, [strict barrier], [, ])\nfi\nif test \"${want_prebuilt_html}\" = yes; then\n  R_SH_VAR_ADD(r_options, [static HTML], [, ])\nfi\n\nAC_MSG_RESULT(\n[\nR is now configured for ${host}\n\n  Source directory:          ${srcdir}\n  Installation directory:    ${prefix}\n\n  C compiler:                ${r_c_compiler}\n  Fortran 77 compiler:       ${r_f77_compiler}\n\n  Default C++ compiler:      ${r_cxx_compiler}\n  C++98 compiler:            ${r_cxx98_compiler}\n  C++11 compiler:            ${r_cxx11_compiler}\n  C++14 compiler:            ${r_cxx14_compiler}\n  C++17 compiler:            ${r_cxx17_compiler}\n  Fortran 90/95 compiler:    ${r_f95_compiler}\n  Obj-C compiler:\t     ${r_objc_compiler}\n\n  Interfaces supported:      ${r_interfaces}\n  External libraries:        ${r_external_libs}\n  Additional capabilities:   ${r_capabilities}\n  Options enabled:           ${r_options}\n\n  Capabilities skipped:      ${r_no_capabilities}\n  Options not enabled:       ${r_no_options}\n\n  Recommended packages:      ${use_recommended_packages} \n])\nif test -n \"${warn_f77_cc_double_complex}\"; then\n  AC_MSG_WARN([${warn_f77_cc_double_complex}])\nfi\nif test -n \"${warn_xcompile_sizeof_long}\"; then\n  AC_MSG_WARN([${warn_xcompile_sizeof_long}])\nfi\nif test -n \"${warn_type_socklen}\"; then\n  AC_MSG_WARN([${warn_type_socklen}])\nfi\nif test -n \"${warn_cxxpicflags}\"; then\n  AC_MSG_WARN([${warn_cxxpicflags}])\nfi\nif test -n \"${warn_shlib_cxxldflags}\"; then\n  AC_MSG_WARN([${warn_shlib_cxxldflags}])\nfi\nif test -n \"${warn_cxxpicflags}\"; then\n  AC_MSG_WARN([${warn_cxxpicflags}])\nfi\nif test -n \"${warn_fcpicflags}\"; then\n  AC_MSG_WARN([${warn_fcpicflags}])\nfi\nif test -n \"${warn_tcltk_version}\"; then\n  AC_MSG_WARN([${warn_tcltk_version}])\nfi\nif test -n \"${warn_pcre_version}\"; then\n  AC_MSG_WARN([${warn_pcre_version}])\nfi\nif test -n \"${warn_info}\"; then\n  AC_MSG_WARN([${warn_info}])\nfi\nif test -n \"${warn_pdf1}\"; then\n  AC_MSG_WARN([${warn_pdf1}])\nfi\nif test -n \"${warn_pdf2}\"; then\n  AC_MSG_WARN([${warn_pdf2}])\nfi\nif test -n \"${warn_pdf3}\"; then\n  AC_MSG_WARN([${warn_pdf3}])\nfi\nif test -n \"${warn_pager}\"; then\n  AC_MSG_WARN([${warn_pager}])\nfi\nif test -n \"${warn_browser}\"; then\n  AC_MSG_WARN([${warn_browser}])\nfi\nif test -n \"${warn_pdfviewer}\"; then\n  AC_MSG_WARN([${warn_pdfviewer}])\nfi\n\n### Local variables: ***\n### mode: outline-minor ***\n### outline-regexp: \"### [*]+\" ***\n### End: ***\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/main/Rdynload.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995-1996 Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1997-2017 The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n\n/*\n  This is an effort to merge the 3 different dynload.c files in the\n  distribution from the unix/, macintosh/dll/ and gnuwin32/ directories.\n  The aim is to consolidate these different implementations into\n      i) a generic or platform-independent common core\n     ii) platform-dependent routines that are registered\n\t as function pointers.\n  The reason for using function pointers rather than explicit\n  linking of symbols is\n     a) to avoid confusion in the linking\n     b) to allow for easily overriding these in embedded applications\n\tin which a host application needs to control how R finds\n\tsymbols. This may be necessary for security reasons.\n */\n\n/*  Dynamic Loading Support\n *\n *  This module provides support for run-time loading of shared objects\n *  access to symbols within such objects via .C and .Fortran.  This is\n *  done under Unix with dlopen, dlclose and dlsym (the exception is\n *  hpux, where we use compatibility code provided by Luke Tierney).\n *  There are two cases:\n *\n *\n *  1. The dlopen interface is available.\n *\n *  In this case all symbol location in packages is done using the\n *  dlopen routines.  We maintain a list of currently loaded shared\n *  objects in an array called \"LoadedDLL\" with the number of currently\n *  loaded objects being \"CountDLL\".  To locate a symbol, we probe\n *  the loaded objects in order until the symbol is located.  If we\n *  do not find a symbol in the loaded objects, we search the\n *  executable itself.  This search is not very efficient, but this\n *  probably pales into insignificance when compared with the\n *  inefficiencies in the R interpreter.\n *\n *  Loading and unloading of shared objects is done via the routines\n *  AddDLL and DeleteDLL.  These routines maintain the list of\n *  currently loaded objects.  When an object is added, any existing\n *  reference to that object is deleted and then the object is\n *  inserted at the start of the search list.  This way, symbols in\n *  more recently loaded objects are found first.\n *\n *\n *  Accessing native routines in base (the R executable).\n *\n *  In this case, we use the registration mechanism and the DllInfo array\n *  in ../main/Rdynload.c to locate functions in the executable. We do this\n *  by straight linear search through the table.\n *  Note that the base routines registered are listed in\n *               ../main/registration.c\n *  and are registered during the initialization of the R engine.\n *  (This replaces the previous mechanism that built a table\n *  from ../appl/ROUTINES using Perl/sed).\n *\n *\n *  If speed is ever an issue in the lookup of registered symbols, we can\n *  store the registered routines in a hashtable or binary tree as they\n *  are being registered.\n */\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <Defn.h>\n#include <Internal.h>\n\n#include <string.h>\n#include <stdlib.h>\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n#include <Rmath.h>\n#include <Rdynpriv.h>\n\n#ifdef Unix\n/* HP-UX 11.0 has dlfcn.h, but according to libtool as of Dec 2001\n   this support is broken. So we force use of shlib even when dlfcn.h\n   is available */\n# ifdef __hpux\n#  ifdef HAVE_DL_H\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# else\n#  ifdef HAVE_DLFCN_H\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# endif /* __hpux */\n# ifndef HAVE_NO_SYMBOL_UNDERSCORE\n#  ifdef HAVE_ELF_H\n#   define HAVE_NO_SYMBOL_UNDERSCORE\n#  endif /* HAVE_ELF_H */\n# endif /* HAVE_NO_SYMBOL_UNDERSCORE */\n#endif\n\n#ifdef Win32\n# define HAVE_DYNAMIC_LOADING\n#endif\n\n\n#ifdef CACHE_DLL_SYM  /* Used on Windows */\n#define MAX_CACHE\t100\n/* keep a record of symbols that have been found, about 70 bytes each */\nR_CPFun CPFun[MAX_CACHE];\nint nCPFun = 0;\n#endif\n\nstatic int MaxNumDLLs = 0; /* initialized in initLoadedDLL */\n\nstatic int CountDLL = 0;\n\n#include <R_ext/Rdynload.h>\n\n/* Allocated in initLoadedDLL at R session start. Never free'd */\nstatic DllInfo* LoadedDLL = NULL;\n\nstatic int addDLL(char *dpath, char *name, HINSTANCE handle);\nstatic SEXP Rf_MakeDLLInfo(DllInfo *info);\n\nstatic SEXP createRSymbolObject(SEXP sname, DL_FUNC f,\n\t\t\t\tR_RegisteredNativeSymbol *symbol,\n\t\t\t\tRboolean withRegistrationInfo);\n\nstatic DllInfo *R_RegisterDLL(HINSTANCE handle, const char *path);\n\nattribute_hidden OSDynSymbol Rf_osDynSymbol;\nattribute_hidden OSDynSymbol *R_osDynSymbol = &Rf_osDynSymbol;\n\nvoid R_init_base(DllInfo *); /* In Registration.c */\n\nstatic void initLoadedDLL();\n\nvoid attribute_hidden\nInitDynload()\n{\n    initLoadedDLL();\n    int which = addDLL(strdup(\"base\"), \"base\", NULL);\n    DllInfo *dll = &LoadedDLL[which];\n    R_init_base(dll);\n    InitFunctionHashing();\n}\n\n/* Allocate LoadedDLL. Errors are reported via R_Suicide, because this is\n   called too early during startup to use error(.) */\nstatic void initLoadedDLL()\n{\n    if (CountDLL != 0 || LoadedDLL != NULL)\n\tR_Suicide(\"DLL table corruption detected\"); /* not translated */\n\n    /* Note that it is likely that dlopen will use up at least one file\n       descriptor for each DLL loaded (it may load further dynamically\n       linked libraries), so we do not want to get close to the fd limit\n       (which may be as low as 256). By default, the maximum number of DLLs\n       that can be loaded is 100. When the fd limit is known, we allow\n       increasing the maximum number of DLLs via environment variable up to\n       60% of the limit on open files, but to no more than 1000.\n    */\n    int maxlimit;\n    int fdlimit = R_GetFDLimit();\n    if (fdlimit > 0) { /* fd limit known */\n\tmaxlimit = (int) (0.6 * fdlimit);\n\tif (maxlimit > 1000) maxlimit = 1000;\n\tif (maxlimit < 100)\n\t    R_Suicide(_(\"the limit on the number of open files is too low\"));\n    } else\n\tmaxlimit = 100;\n\n    char *req = getenv(\"R_MAX_NUM_DLLS\");\n    if (req != NULL) {\n\tint reqlimit = atoi(req);\n\tif (reqlimit < 100)\n\t    R_Suicide(_(\"R_MAX_NUM_DLLS must be at least 100\"));\n\tif (reqlimit > maxlimit) {\n\t    if (maxlimit == 1000)\n\t\tR_Suicide(_(\"R_MAX_NUM_DLLS cannot be bigger than 1000\"));\n\t    \n\t    char msg[128];\n\t    snprintf(msg, 128,\n\t      _(\"R_MAX_NUM_DLLS bigger than %d may exhaust open files limit\"),\n\t      maxlimit);\n\t    R_Suicide(msg);\n\t}\n\tMaxNumDLLs = reqlimit;\n    } else\n\tMaxNumDLLs = 100;\n\n    /* memory is set to zero */\n    LoadedDLL = (DllInfo *) calloc(MaxNumDLLs, sizeof(DllInfo));\n    if (LoadedDLL == NULL)\n\tR_Suicide(_(\"could not allocate space for DLL table\"));\n}\n\n/* returns DllInfo used by the embedding application.\n   the underlying \"(embedding)\" entry is created if not present */\nDllInfo *R_getEmbeddingDllInfo()\n{\n    DllInfo *dll = R_getDllInfo(\"(embedding)\");\n    if (dll == NULL) {\n\tint which = addDLL(strdup(\"(embedding)\"), \"(embedding)\", NULL);\n\tdll = &LoadedDLL[which];\n\t/* make sure we don't attempt dynamic lookup */\n\tR_useDynamicSymbols(dll, FALSE);\n    }\n    return dll;\n}\n\nRboolean R_useDynamicSymbols(DllInfo *info, Rboolean value)\n{\n    Rboolean old;\n    old = info->useDynamicLookup;\n    info->useDynamicLookup = value;\n    return old;\n}\n\nRboolean R_forceSymbols(DllInfo *info, Rboolean value)\n{\n    Rboolean old;\n    old = info->forceSymbols;\n    info->forceSymbols = value;\n    return old;\n}\n\nstatic void\nR_addCRoutine(DllInfo *info, const R_CMethodDef * const croutine,\n\t      Rf_DotCSymbol *sym);\nstatic void\nR_addCallRoutine(DllInfo *info,\n\t\t const R_CallMethodDef * const croutine,\n\t\t Rf_DotCallSymbol *sym);\nstatic void\nR_addFortranRoutine(DllInfo *info,\n\t\t    const R_FortranMethodDef * const croutine,\n\t\t    Rf_DotFortranSymbol *sym);\nstatic void\nR_addExternalRoutine(DllInfo *info,\n\t\t     const R_ExternalMethodDef * const croutine,\n\t\t     Rf_DotExternalSymbol *sym);\n\n\n/*\n Returns a reference to the DllInfo object associated with the shared object\n with the path name `path'. This ensures uniqueness rather than having the\n undesirable situation of two objects with the same name but in different\n directories.\n This is available so that it can be called from arbitrary C routines\n that need to call R_registerRoutines(). The initialization routine\n R_init_<object name> is passed the DllInfo reference as an argument.\n Other routines must explicitly request it using this routine.\n */\nDllInfo *\nR_getDllInfo(const char *path)\n{\n    int i;\n    for(i = 0; i < CountDLL; i++) {\n\tif(strcmp(LoadedDLL[i].path, path) == 0) return(&LoadedDLL[i]);\n    }\n    return (DllInfo*) NULL;\n}\n\n/*\n  Explicitly register the native routines for use in .Call(), .C() and\n  .Fortran() functions. These registered values are used to resolve\n  symbols in an object that makes a call to this routine, rather than\n  the usual dynamic resolution done by dlsym() or the equivalent on\n  the different platforms.\n */\nint\nR_registerRoutines(DllInfo *info, const R_CMethodDef * const croutines,\n\t\t   const R_CallMethodDef * const callRoutines,\n\t\t   const R_FortranMethodDef * const fortranRoutines,\n\t\t   const R_ExternalMethodDef * const externalRoutines)\n{\n    int i, num;\n\n    if(info == NULL)\n\terror(_(\"R_RegisterRoutines called with invalid DllInfo object.\"));\n\n    /* Default is to look in registered and then dynamic (unless\n       the is no handle such as in \"base\" or \"embedded\")\n       Potentially change in the future to be only registered\n       if there are any registered values.\n    */\n    info->useDynamicLookup = (info->handle) ? TRUE : FALSE;\n    info->forceSymbols = FALSE;\n\n    if(croutines) {\n\tfor(num = 0; croutines[num].name != NULL; num++) {;}\n\tinfo->CSymbols = (Rf_DotCSymbol*)calloc((size_t) num,\n\t\t\t\t\t\tsizeof(Rf_DotCSymbol));\n\tinfo->numCSymbols = num;\n\tfor(i = 0; i < num; i++) {\n\t    R_addCRoutine(info, croutines+i, info->CSymbols + i);\n\t}\n    }\n\n    if(fortranRoutines) {\n\tfor(num = 0; fortranRoutines[num].name != NULL; num++) {;}\n\tinfo->FortranSymbols =\n\t    (Rf_DotFortranSymbol*)calloc((size_t) num,\n\t\t\t\t\t sizeof(Rf_DotFortranSymbol));\n\tinfo->numFortranSymbols = num;\n\tfor(i = 0; i < num; i++)\n\t    R_addFortranRoutine(info, fortranRoutines+i,\n\t\t\t\tinfo->FortranSymbols + i);\n    }\n\n    if(callRoutines) {\n\tfor(num = 0; callRoutines[num].name != NULL; num++) {;}\n\tinfo->CallSymbols =\n\t    (Rf_DotCallSymbol*)calloc((size_t) num, sizeof(Rf_DotCallSymbol));\n\tinfo->numCallSymbols = num;\n\tfor(i = 0; i < num; i++)\n\t    R_addCallRoutine(info, callRoutines+i, info->CallSymbols + i);\n    }\n\n    if(externalRoutines) {\n\tfor(num = 0; externalRoutines[num].name != NULL; num++) {;}\n\tinfo->ExternalSymbols =\n\t    (Rf_DotExternalSymbol*)calloc((size_t) num,\n\t\t\t\t\t  sizeof(Rf_DotExternalSymbol));\n\tinfo->numExternalSymbols = num;\n\n\tfor(i = 0; i < num; i++)\n\t    R_addExternalRoutine(info, externalRoutines+i,\n\t\t\t\t info->ExternalSymbols + i);\n    }\n\n    return(1);\n}\n\nstatic void\nR_setPrimitiveArgTypes(const R_FortranMethodDef * const croutine,\n\t\t       Rf_DotFortranSymbol *sym)\n{\n    sym->types = (R_NativePrimitiveArgType *)\n\tmalloc(sizeof(R_NativePrimitiveArgType) * (size_t) croutine->numArgs);\n    if(!sym->types)\n\terror(\"allocation failure in R_setPrimitiveArgTypes\");\n    if(sym->types)\n\tmemcpy(sym->types, croutine->types,\n\t       sizeof(R_NativePrimitiveArgType) * (size_t) croutine->numArgs);\n\n}\n\nstatic void\nR_addFortranRoutine(DllInfo *info,\n\t\t    const R_FortranMethodDef * const croutine,\n\t\t    Rf_DotFortranSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n    if(croutine->types)\n\tR_setPrimitiveArgTypes(croutine, sym);\n}\n\nstatic void\nR_addExternalRoutine(DllInfo *info,\n\t\t     const R_ExternalMethodDef * const croutine,\n\t\t     Rf_DotExternalSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n}\n\nstatic void\nR_addCRoutine(DllInfo *info, const R_CMethodDef * const croutine,\n\t      Rf_DotCSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n    if(croutine->types)\n\tR_setPrimitiveArgTypes(croutine, sym);\n}\n\nstatic void\nR_addCallRoutine(DllInfo *info, const R_CallMethodDef * const croutine,\n\t\t Rf_DotCallSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n}\n\nstatic void\nRf_freeCSymbol(Rf_DotCSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeCallSymbol(Rf_DotCallSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeExternalSymbol(Rf_DotCallSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeFortranSymbol(Rf_DotFortranSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeDllInfo(DllInfo *info)\n{\n    int i;\n    free(info->name);\n    free(info->path);\n    if(info->CSymbols) {\n\tfor(i = 0; i < info->numCSymbols; i++)\n\t    Rf_freeCSymbol(info->CSymbols+i);\n\tfree(info->CSymbols);\n    }\n    if(info->CallSymbols) {\n\tfor(i = 0; i < info->numCallSymbols; i++)\n\t    Rf_freeCallSymbol(info->CallSymbols+i);\n\tfree(info->CallSymbols);\n    }\n    if(info->ExternalSymbols) {\n\tfor(i = 0; i < info->numExternalSymbols; i++)\n\t    Rf_freeExternalSymbol(info->ExternalSymbols+i);\n\tfree(info->ExternalSymbols);\n    }\n    if(info->FortranSymbols) {\n\tfor(i = 0; i < info->numFortranSymbols; i++)\n\t    Rf_freeFortranSymbol(info->FortranSymbols+i);\n\tfree(info->FortranSymbols);\n    }\n}\n\n\ntypedef void (*DllInfoUnloadCall)(DllInfo *);\ntypedef DllInfoUnloadCall DllInfoInitCall;\n\nstatic Rboolean\nR_callDLLUnload(DllInfo *dllInfo)\n{\n    char buf[1024];\n    DllInfoUnloadCall f;\n    R_RegisteredNativeSymbol symbol;\n    symbol.type = R_ANY_SYM;\n\n    snprintf(buf, 1024, \"R_unload_%s\", dllInfo->name);\n    f = (DllInfoUnloadCall) R_dlsym(dllInfo, buf, &symbol);\n    if(f) f(dllInfo);\n\n    return(TRUE);\n}\n\n\t/* Remove the specified DLL from the current DLL list */\n\t/* Returns 1 if the DLL was found and removed from */\n\t/* the list and returns 0 otherwise. */\n\nstatic int DeleteDLL(const char *path)\n{\n    int   i, loc;\n\n    for (i = 0; i < CountDLL; i++) {\n\tif (!strcmp(path, LoadedDLL[i].path)) {\n\t    loc = i;\n\t    goto found;\n\t}\n    }\n    return 0;\nfound:\n#ifdef CACHE_DLL_SYM\n    if(R_osDynSymbol->deleteCachedSymbols)\n\tR_osDynSymbol->deleteCachedSymbols(&LoadedDLL[loc]);\n#endif\n    R_callDLLUnload(&LoadedDLL[loc]);\n    R_osDynSymbol->closeLibrary(LoadedDLL[loc].handle);\n    Rf_freeDllInfo(LoadedDLL+loc);\n    /* FIXME: why not use memcpy here? */\n    for(i = loc + 1 ; i < CountDLL ; i++) {\n\tLoadedDLL[i - 1].path = LoadedDLL[i].path;\n\tLoadedDLL[i - 1].name = LoadedDLL[i].name;\n\tLoadedDLL[i - 1].handle = LoadedDLL[i].handle;\n\tLoadedDLL[i - 1].useDynamicLookup = LoadedDLL[i].useDynamicLookup;\n\tLoadedDLL[i - 1].numCSymbols = LoadedDLL[i].numCSymbols;\n\tLoadedDLL[i - 1].numCallSymbols = LoadedDLL[i].numCallSymbols;\n\tLoadedDLL[i - 1].numFortranSymbols = LoadedDLL[i].numFortranSymbols;\n\tLoadedDLL[i - 1].numExternalSymbols = LoadedDLL[i].numExternalSymbols;\n\tLoadedDLL[i - 1].CSymbols = LoadedDLL[i].CSymbols;\n\tLoadedDLL[i - 1].CallSymbols = LoadedDLL[i].CallSymbols;\n\tLoadedDLL[i - 1].FortranSymbols = LoadedDLL[i].FortranSymbols;\n\tLoadedDLL[i - 1].ExternalSymbols = LoadedDLL[i].ExternalSymbols;\n\tLoadedDLL[i - 1].forceSymbols = LoadedDLL[i].forceSymbols;\n    }\n    CountDLL--;\n    return 1;\n}\n\nattribute_hidden\nDL_FUNC Rf_lookupCachedSymbol(const char *name, const char *pkg, int all)\n{\n#ifdef CACHE_DLL_SYM\n    int i;\n    for (i = 0; i < nCPFun; i++)\n\tif (!strcmp(name, CPFun[i].name) &&\n\t    (all || !strcmp(pkg, CPFun[i].pkg)))\n\t    return CPFun[i].func;\n#endif\n\n    return((DL_FUNC) NULL);\n}\n\n\n\n#ifdef Win32\n#define DLLerrBUFSIZE 4000\n#else  /* Not Windows */\n#define DLLerrBUFSIZE 1000\n#endif\n\nstatic char DLLerror[DLLerrBUFSIZE] = \"\";\n\n/* the error message; length taken from ERRBUFSIZE in ./hpdlfcn.c  */\n\n\t/* Inserts the specified DLL at the head of the DLL list */\n\t/* Returns 1 if the DLL was successfully added */\n\t/* and returns 0 if the DLL table is full or */\n\t/* or if dlopen fails for some reason. */\n\n\nstatic DllInfo* AddDLL(const char *path, int asLocal, int now,\n\t\t       const char *DLLsearchpath)\n{\n    HINSTANCE handle;\n    DllInfo *info = NULL;\n\n    DeleteDLL(path);\n    if(CountDLL == MaxNumDLLs) {\n\tstrcpy(DLLerror, _(\"`maximal number of DLLs reached...\"));\n\treturn NULL;\n    }\n\n    handle = R_osDynSymbol->loadLibrary(path, asLocal, now, DLLsearchpath);\n\n    if(handle == NULL) {\n\tR_osDynSymbol->getError(DLLerror, DLLerrBUFSIZE);\n\treturn NULL;\n    }\n\n    info = R_RegisterDLL(handle, path);\n\n    /* Now look for an initializing routine named R_init_<object name>.\n       If it is present, we call it. It should take a reference to the\n       DllInfo object currently being initialized.\n    */\n    if(info) {\n\tconst char *nm = info->name;\n\tsize_t len = strlen(nm) + 9;\n\tchar tmp[len]; // R_init_ + underscore + null\n\tDllInfoInitCall f;\n#ifdef HAVE_NO_SYMBOL_UNDERSCORE\n\tsnprintf(tmp, len,  \"%s%s\",\"R_init_\", info->name);\n#else\n\tsnprintf(tmp, len, \"_%s%s\",\"R_init_\", info->name);\n#endif\n\tf = (DllInfoInitCall) R_osDynSymbol->dlsym(info, tmp);\n\t/* If that failed, might have used the package name with\n\t   . replaced by _ (as . it not valid in symbol names). */\n\tif(!f) {\n\t    /* This is potentially unsafe in MBCSs, as '.' might be\n\t       part of a character: but is not in UTF-8 */\n\t    for(char *p = tmp; *p; p++) if(*p == '.') *p = '_';\n\t    f = (DllInfoInitCall) R_osDynSymbol->dlsym(info, tmp);\n\t}\n\tif(f) f(info);\n    }\n\n    return info;\n}\n\n\nstatic DllInfo *R_RegisterDLL(HINSTANCE handle, const char *path)\n{\n    char *dpath,  DLLname[PATH_MAX], *p;\n    DllInfo *info;\n\n    dpath = (char *) malloc(strlen(path)+1);\n    if(dpath == NULL) {\n\tstrcpy(DLLerror, _(\"could not allocate space for 'path'\"));\n\tR_osDynSymbol->closeLibrary(handle);\n\treturn 0;\n    }\n    strcpy(dpath, path);\n\n    if(R_osDynSymbol->fixPath) R_osDynSymbol->fixPath(dpath);\n\n    /* keep only basename from path */\n    p = Rf_strrchr(dpath, FILESEP[0]);\n    if(!p) p = dpath; else p++;\n    if(strlen(p) < PATH_MAX) strcpy(DLLname, p);\n    else error(_(\"DLLname '%s' is too long\"), p);\n\n    /* remove SHLIB_EXT if present */\n    p = DLLname + strlen(DLLname) - strlen(SHLIB_EXT);\n#ifdef Win32  /* case-insensitive file system */\n    if(p > DLLname && stricmp(p, SHLIB_EXT) == 0) *p = '\\0';\n#else\n    if(p > DLLname && strcmp(p, SHLIB_EXT) == 0) *p = '\\0';\n#endif\n\n    if (addDLL(dpath, DLLname, handle)) {\n\tinfo = &LoadedDLL[CountDLL-1];\n\t/* default is to use old-style dynamic lookup.  The object's\n\t   initialization routine can limit access by setting this to FALSE.\n\t*/\n\tinfo->useDynamicLookup = TRUE;\n\tinfo->forceSymbols = FALSE;\n\treturn info;\n    } else\n\treturn NULL;\n\n    return(info);\n}\n\nstatic int\naddDLL(char *dpath, char *DLLname, HINSTANCE handle)\n{\n    int ans = CountDLL;\n    char *name = (char *) malloc(strlen(DLLname)+1);\n    if(name == NULL) {\n\tstrcpy(DLLerror, _(\"could not allocate space for 'name'\"));\n\tif(handle)\n\t    R_osDynSymbol->closeLibrary(handle);\n\tfree(dpath);\n\treturn 0;\n    }\n\n    strcpy(name, DLLname);\n    LoadedDLL[CountDLL].path = dpath;\n    LoadedDLL[CountDLL].name = name;\n    LoadedDLL[CountDLL].handle = handle;\n\n    LoadedDLL[CountDLL].numCSymbols = 0;\n    LoadedDLL[CountDLL].numCallSymbols = 0;\n    LoadedDLL[CountDLL].numFortranSymbols = 0;\n    LoadedDLL[CountDLL].numExternalSymbols = 0;\n    LoadedDLL[CountDLL].CSymbols = NULL;\n    LoadedDLL[CountDLL].CallSymbols = NULL;\n    LoadedDLL[CountDLL].FortranSymbols = NULL;\n    LoadedDLL[CountDLL].ExternalSymbols = NULL;\n    CountDLL++;\n\n    return(ans);\n}\n\nstatic Rf_DotCSymbol *\nRf_lookupRegisteredCSymbol(DllInfo *info, const char *name)\n{\n    for(int i = 0; i < info->numCSymbols; i++) {\n\tif(strcmp(name, info->CSymbols[i].name) == 0)\n\t    return(&(info->CSymbols[i]));\n    }\n    return NULL;\n}\n\nstatic Rf_DotFortranSymbol *\nRf_lookupRegisteredFortranSymbol(DllInfo *info, const char *name)\n{\n    for(int i = 0; i < info->numFortranSymbols; i++) {\n\tif(strcmp(name, info->FortranSymbols[i].name) == 0)\n\t    return(&(info->FortranSymbols[i]));\n    }\n\n    return (Rf_DotFortranSymbol*) NULL;\n}\n\nstatic Rf_DotCallSymbol *\nRf_lookupRegisteredCallSymbol(DllInfo *info, const char *name)\n{\n\n    for(int i = 0; i < info->numCallSymbols; i++) {\n\tif(strcmp(name, info->CallSymbols[i].name) == 0)\n\t    return(&(info->CallSymbols[i]));\n    }\n    return (Rf_DotCallSymbol*) NULL;\n}\n\nstatic Rf_DotExternalSymbol *\nRf_lookupRegisteredExternalSymbol(DllInfo *info, const char *name)\n{\n    for(int i = 0; i < info->numExternalSymbols; i++) {\n\tif(strcmp(name, info->ExternalSymbols[i].name) == 0)\n\t    return(&(info->ExternalSymbols[i]));\n    }\n    return (Rf_DotExternalSymbol*) NULL;\n}\n\nstatic DL_FUNC\nR_getDLLRegisteredSymbol(DllInfo *info, const char *name,\n\t\t\t R_RegisteredNativeSymbol *symbol)\n{\n    NativeSymbolType purpose = R_ANY_SYM;\n\n    if(symbol)\n\tpurpose = symbol->type;\n\n    if((purpose == R_ANY_SYM || purpose == R_C_SYM) &&\n       info->numCSymbols > 0) {\n\tRf_DotCSymbol *sym;\n\tsym = Rf_lookupRegisteredCSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_C_SYM;\n\t\tsymbol->symbol.c = sym;\n\t\tsymbol->dll = info;\n\t    }\n\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    if((purpose == R_ANY_SYM || purpose == R_CALL_SYM) &&\n       info->numCallSymbols > 0) {\n\tRf_DotCallSymbol *sym;\n\tsym = Rf_lookupRegisteredCallSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_CALL_SYM;\n\t\tsymbol->symbol.call = sym;\n\t\tsymbol->dll = info;\n\t    }\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    if((purpose == R_ANY_SYM || purpose == R_FORTRAN_SYM) &&\n       info->numFortranSymbols > 0) {\n\tRf_DotFortranSymbol *sym;\n\tsym = Rf_lookupRegisteredFortranSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_FORTRAN_SYM;\n\t\tsymbol->symbol.fortran = sym;\n\t\tsymbol->dll = info;\n\t    }\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    if((purpose == R_ANY_SYM || purpose == R_EXTERNAL_SYM) &&\n       info->numExternalSymbols > 0) {\n\tRf_DotExternalSymbol *sym;\n\tsym = Rf_lookupRegisteredExternalSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_EXTERNAL_SYM;\n\t\tsymbol->symbol.external = sym;\n\t\tsymbol->dll = info;\n\t    }\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    return((DL_FUNC) NULL);\n}\n\nDL_FUNC attribute_hidden\nR_dlsym(DllInfo *info, char const *name,\n\tR_RegisteredNativeSymbol *symbol)\n{\n    size_t len = strlen(name) + 4;\n    char buf[len]; /* up to 3 additional underscores */\n    DL_FUNC f;\n\n    f = R_getDLLRegisteredSymbol(info, name, symbol);\n    if(f) return(f);\n\n\n    if(info->useDynamicLookup == FALSE) return(NULL);\n\n#ifdef HAVE_NO_SYMBOL_UNDERSCORE\n    snprintf(buf, len, \"%s\", name);\n#else\n    snprintf(buf, len, \"_%s\", name);\n#endif\n\n#ifdef HAVE_F77_UNDERSCORE\n    if(symbol && symbol->type == R_FORTRAN_SYM) {\n\tstrcat(buf, \"_\");\n# ifdef HAVE_F77_EXTRA_UNDERSCORE\n\tif(strchr(name, '_')) strcat(buf, \"_\");\n# endif\n    }\n#endif\n\n    f = (DL_FUNC) R_osDynSymbol->dlsym(info, buf);\n#ifdef HAVE_F77_UNDERSCORE\n    if (!f && symbol && symbol->type == R_ANY_SYM) {\n\tstrcat(buf, \"_\");\n# ifdef HAVE_F77_EXTRA_UNDERSCORE\n\tif(strchr(name, '_')) strcat(buf, \"_\");\n# endif\n\tf = (DL_FUNC) R_osDynSymbol->dlsym(info, buf);\n    }\n#endif\n\n    return f;\n}\n\n/* R_FindSymbol checks whether one of the objects that have been\n   loaded contains the symbol name and returns a pointer to that\n   symbol upon success.\n*/\n\nDL_FUNC R_FindSymbol(char const *name, char const *pkg,\n\t\t     R_RegisteredNativeSymbol *symbol)\n{\n    DL_FUNC fcnptr = (DL_FUNC) NULL;\n    int i, all = (strlen(pkg) == 0), doit;\n\n    if(R_osDynSymbol->lookupCachedSymbol)\n\tfcnptr = R_osDynSymbol->lookupCachedSymbol(name, pkg, all);\n\n    if(fcnptr) return(fcnptr);\n\n    /* The following is not legal ANSI C. */\n    /* It is only meant to be used in systems supporting */\n    /* the dlopen() interface, in which systems data and  */\n    /* function pointers _are_ the same size and _can_   */\n    /* be cast without loss of information.\t     */\n\n    for (i = CountDLL - 1; i >= 0; i--) {\n\tdoit = all;\n\tif(!doit && !strcmp(pkg, LoadedDLL[i].name)) doit = 2;\n\tif(doit && LoadedDLL[i].forceSymbols) doit = 0;\n\tif(doit) {\n\t    fcnptr = R_dlsym(&LoadedDLL[i], name, symbol); /* R_osDynSymbol->dlsym */\n\t    if (fcnptr != (DL_FUNC) NULL) {\n\t\tif(symbol)\n\t\t    symbol->dll = LoadedDLL+i;\n#ifdef CACHE_DLL_SYM\n\t\tif(strlen(pkg) <= 20 && strlen(name) <= 40 && nCPFun < MAX_CACHE\n\t\t   && (!symbol || !symbol->symbol.c)) {\n\t\t    strcpy(CPFun[nCPFun].pkg, LoadedDLL[i].name);\n\t\t    strcpy(CPFun[nCPFun].name, name);\n\t\t    CPFun[nCPFun++].func = fcnptr;\n\t\t}\n#endif\n\t\treturn fcnptr;\n\t    }\n\t}\n\tif(doit > 1) return (DL_FUNC) NULL;  /* Only look in the first-matching DLL */\n    }\n\n    return (DL_FUNC) NULL;\n}\n\n\nstatic void GetFullDLLPath(SEXP call, char *buf, const char *const path)\n{\n    R_osDynSymbol->getFullDLLPath(call, buf, path);\n}\n\n\t/* do_dynload implements the R-Interface for the */\n\t/* loading of shared objects */\n\n/*\n  Extended to support 2 additional arguments (3 in total).\n  First argument is the name of the DLL.\n  Second argument is a logical indicating whether we\n  want the symbols to be kept in their own local symbol table\n  or added to the global symbol table of the application.\n  Third argument is a logical indicating whether the\n  dynamic loading should relocate all routine symbols\n  now and signal any errors immediately or lazily relocate\n  the symbols as they are invoked. This is useful for\n  developers so that they can ensure that all the symbols\n  are available before they release, and allows users to\n  call routines from \"incomplete\" DLLs.\n */\n\nSEXP attribute_hidden do_dynload(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    char buf[2 * PATH_MAX];\n    DllInfo *info;\n\n    checkArity(op,args);\n    if (!isString(CAR(args)) || LENGTH(CAR(args)) != 1)\n\terror(_(\"character argument expected\"));\n    GetFullDLLPath(call, buf, translateChar(STRING_ELT(CAR(args), 0)));\n    /* AddDLL does this DeleteDLL(buf); */\n    info = AddDLL(buf, LOGICAL(CADR(args))[0], LOGICAL(CADDR(args))[0],\n\t\t  translateChar(STRING_ELT(CADDDR(args), 0)));\n    if(!info)\n\terror(_(\"unable to load shared object '%s':\\n  %s\"), buf, DLLerror);\n    return(Rf_MakeDLLInfo(info));\n}\n\nSEXP attribute_hidden do_dynunload(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    char buf[2 * PATH_MAX];\n\n    checkArity(op,args);\n    if (!isString(CAR(args)) || LENGTH(CAR(args)) != 1)\n\terror(_(\"character argument expected\"));\n    GetFullDLLPath(call, buf, translateChar(STRING_ELT(CAR(args), 0)));\n    if(!DeleteDLL(buf))\n\terror(_(\"shared object '%s\\' was not loaded\"), buf);\n    return R_NilValue;\n}\n\nint R_moduleCdynload(const char *module, int local, int now)\n{\n    char dllpath[PATH_MAX], *p = getenv(\"R_HOME\");\n    DllInfo *res;\n\n    if(!p) return 0;\n#ifdef R_ARCH\n    snprintf(dllpath, PATH_MAX, \"%s%smodules%s%s%s%s%s\", p, FILESEP, FILESEP,\n\t     R_ARCH, FILESEP, module, SHLIB_EXT);\n#else\n    snprintf(dllpath, PATH_MAX, \"%s%smodules%s%s%s\", p, FILESEP, FILESEP,\n\t     module, SHLIB_EXT);\n#endif\n    res = AddDLL(dllpath, local, now, \"\");\n    if(!res)\n\twarning(_(\"unable to load shared object '%s':\\n  %s\"),\n\t\tdllpath, DLLerror);\n    return res != NULL ? 1 : 0;\n}\n\nint R_cairoCdynload(int local, int now)\n{\n    char dllpath[PATH_MAX], *p = getenv(\"R_HOME\"), *module = \"cairo\";\n    DllInfo *res;\n\n    if(!p) return 0;\n#ifdef R_ARCH\n    snprintf(dllpath, PATH_MAX, \"%s/library/grDevices/libs/%s/%s%s\",\n\t     p, R_ARCH, module, SHLIB_EXT);\n#else\n    snprintf(dllpath, PATH_MAX, \"%s/library/grDevices/libs/%s%s\",\n\t     p, module, SHLIB_EXT);\n#endif\n    res = AddDLL(dllpath, local, now, \"\");\n    if(!res)\n\twarning(_(\"unable to load shared object '%s':\\n  %s\"),\n\t\tdllpath, DLLerror);\n    return res != NULL ? 1 : 0;\n}\n\n/**\n  Creates an R object representing the value of the\n  function pointer given by `f'. This object has class\n  NativeSymbol and can be used to relay symbols from\n  one DLL to another.\n */\nstatic SEXP\nRf_MakeNativeSymbolRef(DL_FUNC f)\n{\n    SEXP ref, klass;\n\n    PROTECT(ref = R_MakeExternalPtrFn(f, install(\"native symbol\"),\n\t\t\t\t      R_NilValue));\n    PROTECT(klass = mkString(\"NativeSymbol\"));\n    setAttrib(ref, R_ClassSymbol, klass);\n    UNPROTECT(2);\n    return(ref);\n}\n\nstatic void\nfreeRegisteredNativeSymbolCopy(SEXP ref)\n{\n   void *ptr;\n   ptr = R_ExternalPtrAddr(ref);\n   if (ptr)\n       free(ptr);\n}\n\nstatic SEXP\nRf_MakeRegisteredNativeSymbol(R_RegisteredNativeSymbol *symbol)\n{\n    SEXP ref, klass;\n    R_RegisteredNativeSymbol *copy;\n    copy = (R_RegisteredNativeSymbol *) malloc(1 * sizeof(R_RegisteredNativeSymbol));\n    if(!copy) {\n\terror(ngettext(\"cannot allocate memory for registered native symbol (%d byte)\",\n\t\t       \"cannot allocate memory for registered native symbol (%d bytes)\",\n\t\t      (int) sizeof(R_RegisteredNativeSymbol)),\n\t\t      (int) sizeof(R_RegisteredNativeSymbol));\n    }\n    *copy = *symbol;\n\n    PROTECT(ref = R_MakeExternalPtr(copy,\n\t\t\t\t    install(\"registered native symbol\"),\n\t\t\t\t    R_NilValue));\n    R_RegisterCFinalizer(ref, freeRegisteredNativeSymbolCopy);\n\n    PROTECT(klass = mkString(\"RegisteredNativeSymbol\"));\n    setAttrib(ref, R_ClassSymbol, klass);\n\n    UNPROTECT(2);\n    return(ref);\n}\n\n\nstatic SEXP\nRf_makeDllObject(HINSTANCE inst)\n{\n    SEXP ans;\n\n    PROTECT(ans = R_MakeExternalPtr(inst, install(\"DLLHandle\"),\n\t\t\t\t    R_NilValue));\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLHandle\"));\n    UNPROTECT(1);\n\n    return(ans);\n}\n\nstatic SEXP\nRf_makeDllInfoReference(HINSTANCE inst)\n{\n    SEXP ans;\n\n    PROTECT(ans = R_MakeExternalPtr(inst, install(\"DLLInfo\"),\n\t\t\t\t    install(\"DLLInfo\")));\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLInfoReference\"));\n    UNPROTECT(1);\n\n    return(ans);\n}\n\n\n/**\n Creates an R object representing the public DLL information stored in\n info. Currently this is only the short and the long, fully qualified\n name of the DLL and whether we only look for symbols that have been\n registered in this DLL or do we also use dynamic lookup.\n */\nstatic SEXP\nRf_MakeDLLInfo(DllInfo *info)\n{\n    SEXP ref, elNames, tmp;\n    int i, n;\n    const char *const names[] = {\"name\", \"path\", \"dynamicLookup\",\n\t\t\t\t \"handle\", \"info\"};\n\n    n = sizeof(names)/sizeof(names[0]);\n\n    PROTECT(ref = allocVector(VECSXP, n));\n    SET_VECTOR_ELT(ref, 0, tmp = allocVector(STRSXP, 1));\n    if(info->name)\n\tSET_STRING_ELT(tmp, 0, mkChar(info->name));\n    SET_VECTOR_ELT(ref, 1, tmp = allocVector(STRSXP, 1));\n    if(info->path)\n\tSET_STRING_ELT(tmp, 0, mkChar(info->path));\n    SET_VECTOR_ELT(ref, 2, ScalarLogical(info->useDynamicLookup));\n\n    SET_VECTOR_ELT(ref, 3, Rf_makeDllObject(info->handle));\n\n    SET_VECTOR_ELT(ref, 4, Rf_makeDllInfoReference((HINSTANCE) info));\n\n    PROTECT(elNames = allocVector(STRSXP, n));\n    for(i = 0; i < n; i++)\n\tSET_STRING_ELT(elNames, i, mkChar(names[i]));\n    setAttrib(ref, R_NamesSymbol, elNames);\n\n    setAttrib(ref, R_ClassSymbol, mkString(\"DLLInfo\"));\n\n    UNPROTECT(2);\n\n    return(ref);\n}\n\n/*\n  This is the routine associated with the getNativeSymbolInfo()\n  function and it takes the name of a symbol and optionally an\n  object identifier (package usually) in which to restrict the search\n  for this symbol. It resolves the symbol and returns it to the caller\n  giving the symbol address, the package information (i.e. name and\n  fully qualified shared object name). If the symbol was explicitly\n  registered (rather than dynamically resolved by R), then we pass\n  back that information also, giving the number of arguments it\n  expects and the interface by which it should be called.\n  The returned object has class NativeSymbol. If the symbol was\n  registered, we add a class identifying the interface type\n  for which it is intended (i.e. .C(), .Call(), etc.)\n */\nSEXP attribute_hidden\nR_getSymbolInfo(SEXP sname, SEXP spackage, SEXP withRegistrationInfo)\n{\n    const void *vmax = vmaxget();\n    const char *package, *name;\n    R_RegisteredNativeSymbol symbol = {R_ANY_SYM, {NULL}, NULL};\n    SEXP sym = R_NilValue;\n    DL_FUNC f = NULL;\n\n    package = \"\";\n\n    name = translateChar(STRING_ELT(sname, 0));\n\n    if(length(spackage)) {\n\tif(TYPEOF(spackage) == STRSXP)\n\t    package = translateChar(STRING_ELT(spackage, 0));\n\telse if(TYPEOF(spackage) == EXTPTRSXP &&\n\t\tR_ExternalPtrTag(spackage) == install(\"DLLInfo\")) {\n\t    f = R_dlsym((DllInfo *) R_ExternalPtrAddr(spackage), name, &symbol);\n\t    package = NULL;\n\t} else\n\t    error(_(\"must pass package name or DllInfo reference\"));\n    }\n\n    if(package)\n\tf = R_FindSymbol(name, package, &symbol);\n\n    if(f)\n\tsym = createRSymbolObject(sname, f, &symbol,\n\t\t\t\t  LOGICAL(withRegistrationInfo)[0]);\n\n    vmaxset(vmax);\n    return sym;\n}\n\nSEXP attribute_hidden\nR_getDllTable()\n{\n    int i;\n    SEXP ans;\n\n again:\n    PROTECT(ans = allocVector(VECSXP, CountDLL));\n    for(i = 0; i < CountDLL; i++) {\n\tSET_VECTOR_ELT(ans, i, Rf_MakeDLLInfo(&(LoadedDLL[i])));\n    }\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLInfoList\"));\n    UNPROTECT(1);\n\n    /* There is a problem here: The allocations can cause gc, and gc\n       may result in no longer referenced DLLs being unloaded.  So\n       CountDLL can be reduced during this loop.  A simple work-around\n       is to just try again until CountDLL at the end is the same as\n       it was at the beginning.  LT */\n    if (CountDLL != LENGTH(ans))\n\tgoto again;\n\n    return(ans);\n}\n\nstatic SEXP\ncreateRSymbolObject(SEXP sname, DL_FUNC f, R_RegisteredNativeSymbol *symbol,\n\t\t    Rboolean withRegistrationInfo)\n{\n    SEXP tmp, klass, sym, names;\n    int n = (symbol->type != R_ANY_SYM) ? 4 : 3;\n    int numProtects = 0;\n\n    PROTECT(sym = allocVector(VECSXP, n));    numProtects++;\n    PROTECT(names = allocVector(STRSXP, n));    numProtects++;\n\n    if(!sname || sname == R_NilValue) {\n\tPROTECT(sname = mkString(symbol->symbol.call->name));\n\tnumProtects++;\n    }\n\n    SET_VECTOR_ELT(sym, 0, sname);\n    SET_STRING_ELT(names, 0, mkChar(\"name\"));\n\n    SET_VECTOR_ELT(sym, 1,\n\t\t   withRegistrationInfo && symbol && symbol->symbol.c && symbol->dll\n\t\t   ? Rf_MakeRegisteredNativeSymbol(symbol)\n\t\t   : Rf_MakeNativeSymbolRef(f));\n    SET_STRING_ELT(names, 1, mkChar(\"address\"));\n    if(symbol->dll)\n\tSET_VECTOR_ELT(sym, 2, Rf_MakeDLLInfo(symbol->dll));\n    SET_STRING_ELT(names, 2, mkChar(\"dll\"));\n\n\n    PROTECT(klass = allocVector(STRSXP, (symbol->type != R_ANY_SYM ? 2 : 1)));\n    numProtects++;\n    SET_STRING_ELT(klass, LENGTH(klass) - 1, mkChar(\"NativeSymbolInfo\"));\n\n    if(n > 3) {\n\t/* Add the registration information:\n\t   the number of arguments and the classname.\n\t*/\n\tint nargs = -1;\n\tchar *className = \"\";\n\tswitch(symbol->type) {\n\tcase R_C_SYM:\n\t    nargs = symbol->symbol.c->numArgs;\n\t    className = \"CRoutine\";\n\t    break;\n\tcase R_CALL_SYM:\n\t    nargs = symbol->symbol.call->numArgs;\n\t    className = \"CallRoutine\";\n\t    break;\n\tcase R_FORTRAN_SYM:\n\t    nargs = symbol->symbol.fortran->numArgs;\n\t    className = \"FortranRoutine\";\n\t    break;\n\tcase R_EXTERNAL_SYM:\n\t    nargs = symbol->symbol.external->numArgs;\n\t    className = \"ExternalRoutine\";\n\t    break;\n\tdefault:\n\t    /* Something unintended has happened if we get here. */\n\t    error(_(\"unimplemented type %d in 'createRSymbolObject'\"),\n\t\t  symbol->type);\n\t    break;\n\t}\n\tSET_VECTOR_ELT(sym, 3, tmp = ScalarInteger(nargs));\n\tSET_STRING_ELT(klass, 0, mkChar(className));\n\tSET_STRING_ELT(names, 3, mkChar(\"numParameters\"));\n    }\n\n    setAttrib(sym, R_ClassSymbol, klass);\n    setAttrib(sym, R_NamesSymbol, names);\n\n    UNPROTECT(numProtects);\n    return(sym);\n}\n\nstatic SEXP\nR_getRoutineSymbols(NativeSymbolType type, DllInfo *info)\n{\n    SEXP ans;\n    int i, num;\n    R_RegisteredNativeSymbol  sym;\n    DL_FUNC address = NULL;\n\n    sym.dll = info;\n    sym.type =type;\n\n    switch(type) {\n    case R_CALL_SYM: num = info->numCallSymbols;\n\tbreak;\n    case R_C_SYM: num = info->numCSymbols;\n\tbreak;\n    case R_FORTRAN_SYM: num = info->numFortranSymbols;\n\tbreak;\n    case R_EXTERNAL_SYM: num = info->numExternalSymbols;\n\tbreak;\n    default:\n\tnum = 0;\n    }\n\n    PROTECT(ans = allocVector(VECSXP, num));\n\n    for(i = 0; i < num ; i++) {\n\tswitch(type) {\n\tcase R_CALL_SYM:\n\t    sym.symbol.call = &info->CallSymbols[i];\n\t    address = sym.symbol.call->fun;\n\t    break;\n\tcase R_C_SYM:\n\t    sym.symbol.c = &info->CSymbols[i];\n\t    address = sym.symbol.c->fun;\n\t    break;\n\tcase R_FORTRAN_SYM:\n\t    sym.symbol.fortran = &info->FortranSymbols[i];\n\t    address = sym.symbol.fortran->fun;\n\t    break;\n\tcase R_EXTERNAL_SYM:\n\t    sym.symbol.external = &info->ExternalSymbols[i];\n\t    address = sym.symbol.external->fun;\n\t    break;\n\tdefault:\n\t    continue;\n\t}\n\tSET_VECTOR_ELT(ans, i, createRSymbolObject(NULL,  address, &sym, TRUE));/* XXX */\n    }\n\n    setAttrib(ans, R_ClassSymbol, mkString(\"NativeRoutineList\"));\n    UNPROTECT(1);\n    return(ans);\n}\n\n\nSEXP attribute_hidden\nR_getRegisteredRoutines(SEXP dll)\n{\n    DllInfo *info;\n    SEXP ans, snames;\n    int i;\n    const char * const names[] = {\".C\", \".Call\", \".Fortran\", \".External\"};\n\n    if(TYPEOF(dll) != EXTPTRSXP &&\n       R_ExternalPtrTag(dll) != install(\"DLLInfo\"))\n\terror(_(\"R_getRegisteredRoutines() expects a DllInfo reference\"));\n\n    info = (DllInfo *) R_ExternalPtrAddr(dll);\n    if(!info) error(_(\"NULL value passed for DllInfo\"));\n\n\n    PROTECT(ans = allocVector(VECSXP, 4));\n\n    SET_VECTOR_ELT(ans, 0, R_getRoutineSymbols(R_C_SYM, info));\n    SET_VECTOR_ELT(ans, 1, R_getRoutineSymbols(R_CALL_SYM, info));\n    SET_VECTOR_ELT(ans, 2, R_getRoutineSymbols(R_FORTRAN_SYM, info));\n    SET_VECTOR_ELT(ans, 3, R_getRoutineSymbols(R_EXTERNAL_SYM, info));\n\n    PROTECT(snames = allocVector(STRSXP, 4));\n    for(i = 0; i < 4; i++)\n\tSET_STRING_ELT(snames, i, mkChar(names[i]));\n    setAttrib(ans, R_NamesSymbol, snames);\n    UNPROTECT(2);\n    return(ans);\n}\n\nSEXP attribute_hidden\ndo_getSymbolInfo(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    const char *package = \"\", *name;\n    R_RegisteredNativeSymbol symbol = {R_ANY_SYM, {NULL}, NULL};\n    SEXP sym = R_NilValue;\n    DL_FUNC f = NULL;\n\n    checkArity(op, args);\n    SEXP sname = CAR(args), spackage = CADR(args),\n\twithRegistrationInfo = CADDR(args);\n\n    if (!isString(sname) || LENGTH(sname) != 1)\n\terror(_(\"invalid '%s' argument\"), \"name\");\n    name = translateChar(STRING_ELT(sname, 0));\n    if(length(spackage)) {\n\tif(TYPEOF(spackage) == STRSXP)\n\t    package = translateChar(STRING_ELT(spackage, 0));\n\telse if(TYPEOF(spackage) == EXTPTRSXP &&\n\t\tR_ExternalPtrTag(spackage) == install(\"DLLInfo\")) {\n\t    f = R_dlsym((DllInfo *) R_ExternalPtrAddr(spackage), name, &symbol);\n\t    package = NULL;\n\t} else\n\t    error(_(\"must pass package name or DllInfo reference\"));\n    }\n    if(package)\n\tf = R_FindSymbol(name, package, &symbol);\n    if(f)\n\tsym = createRSymbolObject(sname, f, &symbol,\n\t\t\t\t  LOGICAL(withRegistrationInfo)[0]);\n    return sym;\n}\n\n/* .Internal(getLoadedDLLs()) */\nSEXP attribute_hidden\ndo_getDllTable(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP ans, nm;\n\n    checkArity(op, args);\n\n again:\n    PROTECT(ans = allocVector(VECSXP, CountDLL));\n    for(int i = 0; i < CountDLL; i++)\n\tSET_VECTOR_ELT(ans, i, Rf_MakeDLLInfo(&(LoadedDLL[i])));\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLInfoList\"));\n    UNPROTECT(1);\n\n    /* There is a problem here: The allocations can cause gc, and gc\n       may result in no longer referenced DLLs being unloaded.  So\n       CountDLL can be reduced during this loop.  A simple work-around\n       is to just try again until CountDLL at the end is the same as\n       it was at the beginning.  LT */\n    if (CountDLL != LENGTH(ans)) goto again;\n\n    PROTECT(ans);\n    PROTECT(nm = allocVector(STRSXP, CountDLL));\n    setAttrib(ans, R_NamesSymbol, nm);\n    for(int i = 0; i < CountDLL; i++)\n\tSET_STRING_ELT(nm, i,\n\t\t       STRING_ELT(VECTOR_ELT(VECTOR_ELT(ans, i), 0), 0));\n    UNPROTECT(2);\n    return ans;\n}\n\nSEXP attribute_hidden\ndo_getRegisteredRoutines(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    const char * const names[] = {\".C\", \".Call\", \".Fortran\", \".External\"};\n\n    checkArity(op, args);\n    SEXP dll = CAR(args), ans, snames;\n\n    if(TYPEOF(dll) != EXTPTRSXP &&\n       R_ExternalPtrTag(dll) != install(\"DLLInfo\"))\n\terror(_(\"R_getRegisteredRoutines() expects a DllInfo reference\"));\n\n    DllInfo *info = (DllInfo *) R_ExternalPtrAddr(dll);\n    if(!info) error(_(\"NULL value passed for DllInfo\"));\n\n\n    PROTECT(ans = allocVector(VECSXP, 4));\n\n    SET_VECTOR_ELT(ans, 0, R_getRoutineSymbols(R_C_SYM, info));\n    SET_VECTOR_ELT(ans, 1, R_getRoutineSymbols(R_CALL_SYM, info));\n    SET_VECTOR_ELT(ans, 2, R_getRoutineSymbols(R_FORTRAN_SYM, info));\n    SET_VECTOR_ELT(ans, 3, R_getRoutineSymbols(R_EXTERNAL_SYM, info));\n\n    PROTECT(snames = allocVector(STRSXP, 4));\n    for(int i = 0; i < 4; i++)\n\tSET_STRING_ELT(snames, i, mkChar(names[i]));\n    setAttrib(ans, R_NamesSymbol, snames);\n    UNPROTECT(2);\n    return(ans);\n}\n\n\n\n/* Experimental interface for exporting and importing functions and\n   data from one package for use from C code in a package.  The\n   registration part probably ought to be integrated with the other\n   registrations.  The naming of these routines may be less than\n   ideal. */\n\nstatic SEXP CEntryTable = NULL;\n\nstatic SEXP get_package_CEntry_table(const char *package)\n{\n    SEXP penv, pname;\n\n    if (CEntryTable == NULL) {\n\tCEntryTable = R_NewHashedEnv(R_NilValue, ScalarInteger(0));\n\tR_PreserveObject(CEntryTable);\n    }\n    pname = install(package);\n    penv = findVarInFrame(CEntryTable, pname);\n    if (penv == R_UnboundValue) {\n\tpenv = R_NewHashedEnv(R_NilValue, ScalarInteger(0));\n\tdefineVar(pname, penv, CEntryTable);\n    }\n    return penv;\n}\n\n\nvoid R_RegisterCCallable(const char *package, const char *name, DL_FUNC fptr)\n{\n    SEXP penv = get_package_CEntry_table(package);\n    PROTECT(penv);\n    SEXP eptr = R_MakeExternalPtrFn(fptr, R_NilValue, R_NilValue);\n    PROTECT(eptr);\n    defineVar(install(name), eptr, penv);\n    UNPROTECT(2);\n}\n\nDL_FUNC R_GetCCallable(const char *package, const char *name)\n{\n    SEXP penv = get_package_CEntry_table(package);\n    PROTECT(penv);\n    SEXP eptr = findVarInFrame(penv, install(name));\n    UNPROTECT(1);\n    if (eptr == R_UnboundValue)\n\terror(_(\"function '%s' not provided by package '%s'\"), name, package);\n    else if (TYPEOF(eptr) != EXTPTRSXP)\n\terror(_(\"table entry must be an external pointer\"));\n    return R_ExternalPtrAddrFn(eptr);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/man/dynload.Rd": "% File src/library/base/man/dynload.Rd\n% Part of the R package, https://www.R-project.org\n% Copyright 1995-2017 R Core Team\n% Distributed under GPL 2 or later\n\n\\name{dyn.load}\n\\alias{dyn.load}\n\\alias{dyn.unload}\n\\alias{is.loaded}\n#ifdef windows\n\\alias{DLLpath}\n#endif\n\\title{Foreign Function Interface}\n\\description{\n  Load or unload DLLs (also known as shared objects), and test whether a\n  C function or Fortran subroutine is available.\n}\n\\usage{\ndyn.load(x, local = TRUE, now = TRUE, ...)\ndyn.unload(x)\n\nis.loaded(symbol, PACKAGE = \"\", type = \"\")\n}\n\\arguments{\n  \\item{x}{a character string giving the pathname to a DLL, also known\n    as a dynamic shared object.  (See \\sQuote{Details} for what these\n    terms mean.)}\n  \\item{local}{a logical value controlling whether the symbols in the\n    DLL are stored in their own local table and not shared\n    across DLLs, or added to the global symbol table.  Whether this has\n    any effect is system-dependent.\n#ifdef windows\n    It is ignored on Windows.\n#endif\n  }\n  \\item{now}{a logical controlling whether all symbols are resolved (and\n    relocated) immediately the library is loaded or deferred until they\n    are used.  This control is useful for developers testing whether a\n    library is complete and has all the necessary symbols, and for users\n    to ignore missing symbols.  Whether this has any effect is system-dependent.\n#ifdef windows\n    It is ignored on Windows.\n#endif\n  }\n  \\item{\\dots}{other arguments for future expansion.\n#ifdef windows\n    See section \\sQuote{Windows} below.\n#endif\n  }\n  \\item{symbol}{a character string giving a symbol name.}\n  \\item{PACKAGE}{if supplied, confine the search for the \\code{name} to\n    the DLL given by this argument (plus the conventional extension,\n    \\file{.so}, \\file{.sl}, \\file{.dll}, \\dots).  This is intended to\n    add safety for packages, which can ensure by using this argument\n    that no other package can override their external symbols.  This is\n    used in the same way as in \\code{\\link{.C}}, \\code{\\link{.Call}},\n    \\code{\\link{.Fortran}} and \\code{\\link{.External}} functions.}\n  \\item{type}{The type of symbol to look for: can be any (\\code{\"\"}, the\n    default), \\code{\"Fortran\"}, \\code{\"Call\"} or \\code{\"External\"}.}\n}\n\\details{\n  \n  The objects \\code{dyn.load} loads are called \\sQuote{dynamically\n    loadable libraries} (abbreviated to \\sQuote{DLL}) on all platforms\n  except macOS, which uses the term for a different sort\n  of object.  On Unix-alikes they are also called \\sQuote{dynamic\n    shared objects} (\\sQuote{DSO}), or \\sQuote{shared objects} for\n  short.  (The POSIX standards use \\sQuote{executable object file},\n  but no one else does.)\n\n  See \\sQuote{See Also} and the \\sQuote{Writing R Extensions} and\n  \\sQuote{R Installation and Administration} manuals for how to create\n  and install a suitable DLL.\n\n  Unfortunately a very few platforms (e.g., Compaq Tru64) do not handle\n  the \\code{PACKAGE} argument correctly, and may incorrectly find\n  symbols linked into \\R.\n\n  The additional arguments to \\code{dyn.load} mirror the different\n  aspects of the mode argument to the \\code{dlopen()} routine on POSIX\n  systems.  They are available so that users can exercise greater control\n  over the loading process for an individual library.  In general, the\n  default values are appropriate and you should override them only if\n  there is good reason and you understand the implications.\n\n#ifdef unix\n  The \\code{local} argument allows one to control whether the symbols in\n  the DLL being attached are visible to other DLLs.  While maintaining\n  the symbols in their own namespace is good practice, the ability to\n  share symbols across related \\sQuote{chapters} is useful in many\n  cases.  Additionally, on certain platforms and versions of an\n  operating system, certain libraries must have their symbols loaded\n  globally to successfully resolve all symbols.\n\n  One should be careful of the potential side-effect of using lazy\n  loading via the \\code{now} argument as \\code{FALSE}.  If a routine is\n  called that has a missing symbol, the process will terminate\n  immediately.  The intended use is for library developers to call with\n  value \\code{TRUE} to check that all symbols are actually resolved and\n  for regular users to call with \\code{FALSE} so that missing symbols\n  can be ignored and the available ones can be called.\n\n  The initial motivation for adding these was to avoid such termination\n  in the \\code{_init()} routines of the Java virtual machine library.\n  However, symbols loaded locally may not be (read probably) available\n  to other DLLs.  Those added to the global table are available to all\n  other elements of the application and so can be shared across two\n  different DLLs.\n\n  Some (very old) systems do not provide (explicit) support for\n  local/global and lazy/eager symbol resolution.  This can be the source\n  of subtle bugs.  One can arrange to have warning messages emitted when\n  unsupported options are used.  This is done by setting either of the\n  options \\code{verbose} or \\code{warn} to be non-zero via the\n  \\code{\\link{options}} function.\n\n  There is a short discussion of these additional arguments with some\n  example code available at\n  \\url{http://www.stat.ucdavis.edu/~duncan/R/dynload/}.\n#endif\n#ifdef windows\n\n  External code must not change the floating point control word, but\n  many DLLs do so.  Common changes are to set it to use 53 bit\n  precision instead of R's default 64 bit precision, or to unmask\n  some exceptions.  \\code{dyn.load} detects such changes,\n  and restores R's control word to its default value of hex 8001F.\n  This may cause the DLL to malfunction; if so, it should be rewritten\n  to save and restore the control word itself.  If \\code{warn.FPU}\n  is set to \\code{TRUE} using the \\code{\\link{options}} function,\n  a warning will be printed.  (If the warning says\n  that the control word was changed from some other value than 8001F,\n  please report the circumstances to the Windows maintainers:\n  that probably indicates an internal bug.)\n#endif\n}\n\\value{\n  The function \\code{dyn.load} is used for its side effect which links\n  the specified DLL to the executing \\R image.  Calls to \\code{.C},\n  \\code{.Call}, \\code{.Fortran} and \\code{.External} can then be used to\n  execute compiled C functions or Fortran subroutines contained in the\n  library.  The return value of \\code{dyn.load} is an object of class\n  \\code{DLLInfo}.  See \\code{\\link{getLoadedDLLs}} for information about\n  this class.\n\n  The function \\code{dyn.unload} unlinks the DLL.  Note that unloading a\n  DLL and then re-loading a DLL of the same name may or may not work: on\n  Solaris it uses the first version loaded.\n\n  \\code{is.loaded} checks if the symbol name is loaded \\emph{and\n  searchable} and hence available for use as a character string value\n  for argument \\code{.NAME} in \\code{.C} or \\code{.Fortran} or\n  \\code{.Call} or \\code{.External}.  It will succeed if any one of the\n  four calling functions would succeed in using the entry point unless\n  \\code{type} is specified.  (See \\code{\\link{.Fortran}} for how Fortran\n  symbols are mapped.)  Note that symbols in base packages are not\n  searchable, and other packages can be so marked.\n}\n\\note{\n  \\code{is.loaded} requires the name you would give to \\code{.C} etc\n  and \\strong{not} (as in S) that remapped by the defunct functions\n  \\code{symbol.C} or \\code{symbol.For}.\n\n  By default, the maximum number of DLLs that can be loaded is 100,\n  which should be sufficient in almost all cases.  As from \\R 3.4.0, the\n  maximum can be increased up to 1000 \\emph{via} the environment\n  variable \\env{R_MAX_NUM_DLLS}, which has to be set before starting an\n  \\R{} session.  On Unix, \\env{R_MAX_NUM_DLLS} is in addition not\n  allowed to be greater than 60\\% of the OS limit on the number of open\n  files (typically 1024, but 256 on macOS), which can sometimes be\n  modified using command \\command{ulimit -n} (\\command{sh},\n  \\command{bash}) or \\command{limit descriptors} (\\command{csh}) in the\n  shell used to launch \\R{} .  Increasing \\env{R_MAX_NUM_DLLS} comes\n  with some memory overhead.\n\n  The creation of DLLs and the runtime linking of them into executing\n  programs is very platform dependent.  In recent years there has been\n  some simplification in the process because the C subroutine call\n  \\code{dlopen} has become the POSIX standard for doing this.  Under\n  Unix-alikes \\code{dyn.load} uses the \\code{dlopen} mechanism and\n  should work on all platforms which support it.  On Windows it uses the\n  standard mechanism (\\code{LoadLibrary}) for loading DLLs.\n\n  The original code for loading DLLs in Unix-alikes was provided by\n  Heiner Schwarte.\n}\n#ifdef windows\n\\section{Windows}{\n  The \\sQuote{standard mechanisms for loading DLLs} include a\n  search order for where a DLL is found (if not given as an absolute\n  path, which is preferred), \\emph{and} of where its dependent DLLs will\n  be found.  This search path depends on the version of Windows and its\n  security settings, but for versions since Windows XP SP1 it is\n  \\itemize{\n    \\item The directory from which the application was launched.\n    \\item The various system directories,\n    e.g.\\sspace{}\\file{c:/Windows/system32}, \\file{c:/Windows/system} and\n    \\file{c:/Windows}.\n    \\item The current directory.\n    \\item Along the search path for executables given by the environment\n    variable \\env{PATH}.\n  }\n\n  Packages often want to supply dependent DLLs in their \\file{libs}\n  directory, and do this by setting the \\env{PATH} variable\n  (\\code{\\link{library.dynam}} does that automatically in recent\n  versions of \\R), but the DLL search order means that DLLs in the\n  launch directory and in system directories will be preferred.  On\n  Windows XP SP1 and later there is a way to modify the search order.\n  If argument \\code{DLLpath} is supplied to \\code{dyn.load}, the latter\n  makes use of the Windows system call \\code{SetDllDirectory} to insert\n  the value of \\code{DLLpath} in second place, and removes the current\n  directory, for the duration of that \\code{dyn.load} call.  (Note that\n  only one directory can be inserted in this way.)\n\n  Users have been confused by messages like\n\\preformatted{\n error: unable to load shared object\n '.../library/rJava/libs/x64/rJava.dll':\n LoadLibrary failure:  The specified module could not be found.\n}\n   The final line is a Windows (not \\R) diagnostic: the \\sQuote{module}\n   that could not be found is not \\file{rJava.dll} but something else\n   Windows is looking for (here most likely Java DLLs): if you are lucky\n   there will be a dialog box with more details.\n}\n#endif\n\\section{Warning}{\n  Do not use \\code{dyn.unload} on a DLL loaded by\n  \\code{\\link{library.dynam}}: use \\code{\\link{library.dynam.unload}}.\n  This is needed for system housekeeping.\n}\n\\references{\n  Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988)\n  \\emph{The New S Language}.\n  Wadsworth & Brooks/Cole.\n}\n\\seealso{\n  \\code{\\link{library.dynam}} to be used inside a package's\n  \\code{\\link{.onLoad}} initialization.\n\n  \\code{\\link{SHLIB}} for how to create suitable DLLs.\n\n  \\code{\\link{.C}},\n  \\code{\\link{.Fortran}},\n  \\code{\\link{.External}},\n  \\code{\\link{.Call}}.\n}\n\\examples{\n## expect all of these to be false in R >= 3.0.0.\nis.loaded(\"supsmu\") # Fortran entry point in stats\nis.loaded(\"supsmu\", \"stats\", \"Fortran\")\nis.loaded(\"PDF\", type = \"External\") # pdf() device in grDevices\n}\n\\keyword{interface}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/extra/intl/libgnuintl.h.in": "/* Message catalogs for internationalization.\n   Copyright (C) 1995-1997, 2000-2007 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify it\n   under the terms of the GNU Library General Public License as published\n   by the Free Software Foundation; either version 2, or (at your option)\n   any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Library General Public License for more details.\n\n   You should have received a copy of the GNU Library General Public\n   License along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n   USA.  */\n\n#ifndef _LIBINTL_H\n#define _LIBINTL_H\t1\n\n#include <locale.h>\n\n/* The LC_MESSAGES locale category is the category used by the functions\n   gettext() and dgettext().  It is specified in POSIX, but not in ANSI C.\n   On systems that don't define it, use an arbitrary value instead.\n   On Solaris, <locale.h> defines __LOCALE_H (or _LOCALE_H in Solaris 2.5)\n   then includes <libintl.h> (i.e. this file!) and then only defines\n   LC_MESSAGES.  To avoid a redefinition warning, don't define LC_MESSAGES\n   in this case.  */\n#if !defined LC_MESSAGES && !(defined __LOCALE_H || (defined _LOCALE_H && defined __sun))\n# define LC_MESSAGES 1729\n#endif\n\n/* We define an additional symbol to signal that we use the GNU\n   implementation of gettext.  */\n#define __USE_GNU_GETTEXT 1\n\n/* Provide information about the supported file formats.  Returns the\n   maximum minor revision number supported for a given major revision.  */\n#define __GNU_GETTEXT_SUPPORTED_REVISION(major) \\\n  ((major) == 0 || (major) == 1 ? 1 : -1)\n\n/* Resolve a platform specific conflict on DJGPP.  GNU gettext takes\n   precedence over _conio_gettext.  */\n#ifdef __DJGPP__\n# undef gettext\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Version number: (major<<16) + (minor<<8) + subminor */\n#define LIBINTL_VERSION 0x001100\nextern int libintl_version;\n\n\n/* We redirect the functions to those prefixed with \"libintl_\".  This is\n   necessary, because some systems define gettext/textdomain/... in the C\n   library (namely, Solaris 2.4 and newer, and GNU libc 2.0 and newer).\n   If we used the unprefixed names, there would be cases where the\n   definition in the C library would override the one in the libintl.so\n   shared library.  Recall that on ELF systems, the symbols are looked\n   up in the following order:\n     1. in the executable,\n     2. in the shared libraries specified on the link command line, in order,\n     3. in the dependencies of the shared libraries specified on the link\n        command line,\n     4. in the dlopen()ed shared libraries, in the order in which they were\n        dlopen()ed.\n   The definition in the C library would override the one in libintl.so if\n   either\n     * -lc is given on the link command line and -lintl isn't, or\n     * -lc is given on the link command line before -lintl, or\n     * libintl.so is a dependency of a dlopen()ed shared library but not\n       linked to the executable at link time.\n   Since Solaris gettext() behaves differently than GNU gettext(), this\n   would be unacceptable.\n\n   The redirection happens by default through macros in C, so that &gettext\n   is independent of the compilation unit, but through inline functions in\n   C++, in order not to interfere with the name mangling of class fields or\n   class methods called 'gettext'.  */\n\n/* The user can define _INTL_REDIRECT_INLINE or _INTL_REDIRECT_MACROS.\n   If he doesn't, we choose the method.  A third possible method is\n   _INTL_REDIRECT_ASM, supported only by GCC.  */\n#if !(defined _INTL_REDIRECT_INLINE || defined _INTL_REDIRECT_MACROS)\n# if __GNUC__ >= 2 && !(__APPLE_CC__ > 1) && !defined __MINGW32__ && !(__GNUC__ == 2 && defined _AIX) && (defined __STDC__ || defined __cplusplus)\n#  define _INTL_REDIRECT_ASM\n# else\n#  ifdef __cplusplus\n#   define _INTL_REDIRECT_INLINE\n#  else\n#   define _INTL_REDIRECT_MACROS\n#  endif\n# endif\n#endif\n/* Auxiliary macros.  */\n#ifdef _INTL_REDIRECT_ASM\n# define _INTL_ASM(cname) __asm__ (_INTL_ASMNAME (__USER_LABEL_PREFIX__, #cname))\n# define _INTL_ASMNAME(prefix,cnamestring) _INTL_STRINGIFY (prefix) cnamestring\n# define _INTL_STRINGIFY(prefix) #prefix\n#else\n# define _INTL_ASM(cname)\n#endif\n\n/* _INTL_MAY_RETURN_STRING_ARG(n) declares that the given function may return\n   its n-th argument literally.  This enables GCC to warn for example about\n   printf (gettext (\"foo %y\")).  */\n#if __GNUC__ >= 3 && !(__APPLE_CC__ > 1 && defined __cplusplus)\n# define _INTL_MAY_RETURN_STRING_ARG(n) __attribute__ ((__format_arg__ (n)))\n#else\n# define _INTL_MAY_RETURN_STRING_ARG(n)\n#endif\n\n/* Look up MSGID in the current default message catalog for the current\n   LC_MESSAGES locale.  If not found, returns MSGID itself (the default\n   text).  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_gettext (const char *__msgid)\n       _INTL_MAY_RETURN_STRING_ARG (1);\nstatic inline char *gettext (const char *__msgid)\n{\n  return libintl_gettext (__msgid);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define gettext libintl_gettext\n#endif\nextern char *gettext (const char *__msgid)\n       _INTL_ASM (libintl_gettext)\n       _INTL_MAY_RETURN_STRING_ARG (1);\n#endif\n\n/* Look up MSGID in the DOMAINNAME message catalog for the current\n   LC_MESSAGES locale.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_dgettext (const char *__domainname, const char *__msgid)\n       _INTL_MAY_RETURN_STRING_ARG (2);\nstatic inline char *dgettext (const char *__domainname, const char *__msgid)\n{\n  return libintl_dgettext (__domainname, __msgid);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dgettext libintl_dgettext\n#endif\nextern char *dgettext (const char *__domainname, const char *__msgid)\n       _INTL_ASM (libintl_dgettext)\n       _INTL_MAY_RETURN_STRING_ARG (2);\n#endif\n\n/* Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY\n   locale.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_dcgettext (const char *__domainname, const char *__msgid,\n\t\t\t\tint __category)\n       _INTL_MAY_RETURN_STRING_ARG (2);\nstatic inline char *dcgettext (const char *__domainname, const char *__msgid,\n\t\t\t       int __category)\n{\n  return libintl_dcgettext (__domainname, __msgid, __category);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dcgettext libintl_dcgettext\n#endif\nextern char *dcgettext (const char *__domainname, const char *__msgid,\n\t\t\tint __category)\n       _INTL_ASM (libintl_dcgettext)\n       _INTL_MAY_RETURN_STRING_ARG (2);\n#endif\n\n\n/* Similar to `gettext' but select the plural form corresponding to the\n   number N.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_ngettext (const char *__msgid1, const char *__msgid2,\n\t\t\t       unsigned long int __n)\n       _INTL_MAY_RETURN_STRING_ARG (1) _INTL_MAY_RETURN_STRING_ARG (2);\nstatic inline char *ngettext (const char *__msgid1, const char *__msgid2,\n\t\t\t      unsigned long int __n)\n{\n  return libintl_ngettext (__msgid1, __msgid2, __n);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define ngettext libintl_ngettext\n#endif\nextern char *ngettext (const char *__msgid1, const char *__msgid2,\n\t\t       unsigned long int __n)\n       _INTL_ASM (libintl_ngettext)\n       _INTL_MAY_RETURN_STRING_ARG (1) _INTL_MAY_RETURN_STRING_ARG (2);\n#endif\n\n/* Similar to `dgettext' but select the plural form corresponding to the\n   number N.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_dngettext (const char *__domainname, const char *__msgid1,\n\t\t\t\tconst char *__msgid2, unsigned long int __n)\n       _INTL_MAY_RETURN_STRING_ARG (2) _INTL_MAY_RETURN_STRING_ARG (3);\nstatic inline char *dngettext (const char *__domainname, const char *__msgid1,\n\t\t\t       const char *__msgid2, unsigned long int __n)\n{\n  return libintl_dngettext (__domainname, __msgid1, __msgid2, __n);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dngettext libintl_dngettext\n#endif\nextern char *dngettext (const char *__domainname,\n\t\t\tconst char *__msgid1, const char *__msgid2,\n\t\t\tunsigned long int __n)\n       _INTL_ASM (libintl_dngettext)\n       _INTL_MAY_RETURN_STRING_ARG (2) _INTL_MAY_RETURN_STRING_ARG (3);\n#endif\n\n/* Similar to `dcgettext' but select the plural form corresponding to the\n   number N.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_dcngettext (const char *__domainname,\n\t\t\t\t const char *__msgid1, const char *__msgid2,\n\t\t\t\t unsigned long int __n, int __category)\n       _INTL_MAY_RETURN_STRING_ARG (2) _INTL_MAY_RETURN_STRING_ARG (3);\nstatic inline char *dcngettext (const char *__domainname,\n\t\t\t\tconst char *__msgid1, const char *__msgid2,\n\t\t\t\tunsigned long int __n, int __category)\n{\n  return libintl_dcngettext (__domainname, __msgid1, __msgid2, __n, __category);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define dcngettext libintl_dcngettext\n#endif\nextern char *dcngettext (const char *__domainname,\n\t\t\t const char *__msgid1, const char *__msgid2,\n\t\t\t unsigned long int __n, int __category)\n       _INTL_ASM (libintl_dcngettext)\n       _INTL_MAY_RETURN_STRING_ARG (2) _INTL_MAY_RETURN_STRING_ARG (3);\n#endif\n\n\n#ifndef IN_LIBGLOCALE\n\n/* Set the current default message catalog to DOMAINNAME.\n   If DOMAINNAME is null, return the current default.\n   If DOMAINNAME is \"\", reset to the default of \"messages\".  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_textdomain (const char *__domainname);\nstatic inline char *textdomain (const char *__domainname)\n{\n  return libintl_textdomain (__domainname);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define textdomain libintl_textdomain\n#endif\nextern char *textdomain (const char *__domainname)\n       _INTL_ASM (libintl_textdomain);\n#endif\n\n/* Specify that the DOMAINNAME message catalog will be found\n   in DIRNAME rather than in the system locale data base.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_bindtextdomain (const char *__domainname,\n\t\t\t\t     const char *__dirname);\nstatic inline char *bindtextdomain (const char *__domainname,\n\t\t\t\t    const char *__dirname)\n{\n  return libintl_bindtextdomain (__domainname, __dirname);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define bindtextdomain libintl_bindtextdomain\n#endif\nextern char *bindtextdomain (const char *__domainname, const char *__dirname)\n       _INTL_ASM (libintl_bindtextdomain);\n#endif\n\n/* Specify the character encoding in which the messages from the\n   DOMAINNAME message catalog will be returned.  */\n#ifdef _INTL_REDIRECT_INLINE\nextern char *libintl_bind_textdomain_codeset (const char *__domainname,\n\t\t\t\t\t      const char *__codeset);\nstatic inline char *bind_textdomain_codeset (const char *__domainname,\n\t\t\t\t\t     const char *__codeset)\n{\n  return libintl_bind_textdomain_codeset (__domainname, __codeset);\n}\n#else\n#ifdef _INTL_REDIRECT_MACROS\n# define bind_textdomain_codeset libintl_bind_textdomain_codeset\n#endif\nextern char *bind_textdomain_codeset (const char *__domainname,\n\t\t\t\t      const char *__codeset)\n       _INTL_ASM (libintl_bind_textdomain_codeset);\n#endif\n\n#endif /* IN_LIBGLOCALE */\n\n\n/* Support for format strings with positions in *printf(), following the\n   POSIX/XSI specification.\n   Note: These replacements for the *printf() functions are visible only\n   in source files that #include <libintl.h> or #include \"gettext.h\".\n   Packages that use *printf() in source files that don't refer to _()\n   or gettext() but for which the format string could be the return value\n   of _() or gettext() need to add this #include.  Oh well.  */\n\n#if !@HAVE_POSIX_PRINTF@\n\n#include <stdio.h>\n#include <stddef.h>\n\n/* Get va_list.  */\n#if __STDC__ || defined __cplusplus || defined _MSC_VER\n# include <stdarg.h>\n#else\n# include <varargs.h>\n#endif\n\n#undef fprintf\n#define fprintf libintl_fprintf\nextern int fprintf (FILE *, const char *, ...);\n#undef vfprintf\n#define vfprintf libintl_vfprintf\nextern int vfprintf (FILE *, const char *, va_list);\n\n#undef printf\n#if defined __NetBSD__ || defined __BEOS__ || defined __CYGWIN__ || defined __MINGW32__\n/* Don't break __attribute__((format(printf,M,N))).\n   This redefinition is only possible because the libc in NetBSD, Cygwin,\n   mingw does not have a function __printf__.  */\n# define libintl_printf __printf__\n#endif\n#define printf libintl_printf\nextern int printf (const char *, ...);\n#undef vprintf\n#define vprintf libintl_vprintf\nextern int vprintf (const char *, va_list);\n\n#undef sprintf\n#define sprintf libintl_sprintf\nextern int sprintf (char *, const char *, ...);\n#undef vsprintf\n#define vsprintf libintl_vsprintf\nextern int vsprintf (char *, const char *, va_list);\n\n#if @HAVE_SNPRINTF@\n\n#undef snprintf\n#define snprintf libintl_snprintf\nextern int snprintf (char *, size_t, const char *, ...);\n#undef vsnprintf\n#define vsnprintf libintl_vsnprintf\nextern int vsnprintf (char *, size_t, const char *, va_list);\n\n#endif\n\n#if @HAVE_ASPRINTF@\n\n#undef asprintf\n#define asprintf libintl_asprintf\nextern int asprintf (char **, const char *, ...);\n#undef vasprintf\n#define vasprintf libintl_vasprintf\nextern int vasprintf (char **, const char *, va_list);\n\n#endif\n\n#if @HAVE_WPRINTF@\n\n#undef fwprintf\n#define fwprintf libintl_fwprintf\nextern int fwprintf (FILE *, const wchar_t *, ...);\n#undef vfwprintf\n#define vfwprintf libintl_vfwprintf\nextern int vfwprintf (FILE *, const wchar_t *, va_list);\n\n#undef wprintf\n#define wprintf libintl_wprintf\nextern int wprintf (const wchar_t *, ...);\n#undef vwprintf\n#define vwprintf libintl_vwprintf\nextern int vwprintf (const wchar_t *, va_list);\n\n#undef swprintf\n#define swprintf libintl_swprintf\nextern int swprintf (wchar_t *, size_t, const wchar_t *, ...);\n#undef vswprintf\n#define vswprintf libintl_vswprintf\nextern int vswprintf (wchar_t *, size_t, const wchar_t *, va_list);\n\n#endif\n\n#endif\n\n\n/* Support for relocatable packages.  */\n\n/* Sets the original and the current installation prefix of the package.\n   Relocation simply replaces a pathname starting with the original prefix\n   by the corresponding pathname with the current prefix instead.  Both\n   prefixes should be directory names without trailing slash (i.e. use \"\"\n   instead of \"/\").  */\n#define libintl_set_relocation_prefix libintl_set_relocation_prefix\nextern void\n       libintl_set_relocation_prefix (const char *orig_prefix,\n\t\t\t\t      const char *curr_prefix);\n\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* libintl.h */\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/unix/hpdlfcn.c": "/*\n *  R : A Computer Langage for Statistical Data Analysis\n *  Copyright (C) 1995, 1996  Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1998--2000  The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <dl.h>\n\n#undef DEBUG\n\n#define RTLD_LAZY (BIND_DEFERRED | BIND_NONFATAL)\n\n/* these are added to shut up warnings that cause make check to fail. */\n#define RTLD_LOCAL 0\n#define RTLD_GLOBAL 0\n#define RTLD_NOW 0\n\n#include \"hpdlfcn.h\"\n\n/*\n * This is a minimal implementation of the ELF dlopen, dlclose, dlsym\n * and dlerror routines based on HP's shl_load, shl_unload and\n * shl_findsym. */\n\n/*\n * Reference Counting.\n *\n * Empirically it looks like the HP routines do not mainain a\n * reference count, so I maintain one here.\n */\n\ntypedef struct lib_entry {\n  shl_t handle;\n  int count;\n  struct lib_entry *next;\n} *LibEntry;\n\n#define lib_entry_handle(e) ((e)->handle)\n#define lib_entry_count(e) ((e)->count)\n#define lib_entry_next(e) ((e)->next)\n#define set_lib_entry_handle(e,v) ((e)->handle = (v))\n#define set_lib_entry_count(e,v) ((e)->count = (v))\n#define set_lib_entry_next(e,v) ((e)->next = (v))\n#define increment_lib_entry_count(e) ((e)->count++)\n#define decrement_lib_entry_count(e) ((e)->count--)\n\nstatic LibEntry Entries = NULL;\n\nstatic LibEntry find_lib_entry(shl_t handle)\n{\n  LibEntry entry;\n\n  for (entry = Entries; entry != NULL; entry = lib_entry_next(entry))\n    if (lib_entry_handle(entry) == handle)\n      return entry;\n  return NULL;\n}\n\nstatic LibEntry new_lib_entry(shl_t handle)\n{\n  LibEntry entry;\n\n  if ((entry = (LibEntry) malloc(sizeof(struct lib_entry))) != NULL) {\n    set_lib_entry_handle(entry, handle);\n    set_lib_entry_count(entry, 1);\n    set_lib_entry_next(entry, Entries);\n    Entries = entry;\n  }\n  return entry;\n}\n\nstatic void free_lib_entry(LibEntry entry)\n{\n  if (entry == Entries)\n    Entries = lib_entry_next(entry);\n  else {\n    LibEntry last, next;\n    for (last = Entries, next = lib_entry_next(last);\n\t next != NULL;\n\t last = next, next = lib_entry_next(last)) {\n      if (entry == next) {\n\tset_lib_entry_next(last, lib_entry_next(entry));\n\tbreak;\n      }\n    }\n  }\n  free(entry);\n}\n\n\n/*\n * Error Handling.\n */\n\n#define ERRBUFSIZE 1000\n\nstatic char errbuf[ERRBUFSIZE];\nstatic int dlerrno = 0;\n\nchar *dlerror(void)\n{\n  return dlerrno ? errbuf : NULL;\n}\n\n\n/*\n * Opening and Closing Liraries.\n */\n\nvoid *dlopen(const char *fname, int mode)\n{\n  shl_t handle;\n  LibEntry entry = NULL;\n\n  dlerrno = 0;\n  if (fname == NULL)\n    handle = PROG_HANDLE;\n  else {\n    handle = shl_load(fname, mode | BIND_VERBOSE, 0L);\n    if (handle != NULL) {\n      if ((entry = find_lib_entry(handle)) == NULL) {\n\tif ((entry = new_lib_entry(handle)) == NULL) {\n\t  shl_unload(handle);\n\t  handle = NULL;\n\t}\n      }\n      else\n\tincrement_lib_entry_count(entry);\n    }\n    if (handle == NULL) {\n      dlerrno = 1;\n      sprintf(errbuf, \"can't open %s\", fname);\n    }\n  }\n#ifdef DEBUG\n  printf(\"opening library %s, handle = %x, count = %d\\n\",\n\t fname, handle, entry ? lib_entry_count(entry) : -1);\n  if (dlerrno) printf(\"%s\\n\", dlerror());\n#endif\n  return (void *) handle;\n}\n\nint dlclose(void *handle)\n{\n  LibEntry entry;\n#ifdef DEBUG\n  entry = find_lib_entry(handle);\n  printf(\"closing library handle = %x, count = %d\\n\",\n\t handle, entry ? lib_entry_count(entry) : -1);\n#endif\n\n  dlerrno = 0;\n  if ((shl_t) handle == PROG_HANDLE)\n    return 0; /* ignore attempts to close main program */\n  else {\n\n    if ((entry = find_lib_entry((shl_t) handle)) != NULL) {\n      decrement_lib_entry_count(entry);\n      if (lib_entry_count(entry) > 0)\n\treturn 0;\n      else {\n\t/* unload once reference count reaches zero */\n\tfree_lib_entry(entry);\n\tif (shl_unload((shl_t) handle) == 0)\n\t  return 0;\n      }\n    }\n    /* if you get to here, an error has occurred */\n    dlerrno = 1;\n    sprintf(errbuf, \"attempt to close library failed\");\n#ifdef DEBUG\n    printf(\"%s\\n\", dlerror());\n#endif\n    return -1;\n  }\n}\n\n\n/*\n * Symbol Lookup.\n */\n\nvoid *dlsym(void *handle, const char *name)\n{\n  void *f;\n  shl_t myhandle;\n\n  dlerrno = 0;\n  myhandle = (handle == NULL) ? PROG_HANDLE : (shl_t) handle;\n\n  if (shl_findsym(&myhandle, name, TYPE_PROCEDURE, &f) != 0) {\n    dlerrno = 1;\n    sprintf(errbuf, \"symbol %s not found\", name);\n#ifdef DEBUG\n    printf(\"symbol %s not found\", name);\n#endif\n\n    f = NULL;\n  }\n\n  return(f);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/unix/dynload.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995-1996 Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1997-2016 The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  https://www.R-project.org/Licenses/\n */\n\n/* <UTF8> char here is handled as a whole string */\n\n\n/* This provides a table of built-in C and Fortran functions.\n   We include this table, even when we have dlopen and friends.\n   This is so that the functions are actually loaded at link time. */\n\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <Defn.h>\n#include <Rdynpriv.h>\n\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n/* HP-UX 11.0 has dlfcn.h, but according to libtool as of Dec 2001\n   this support is broken. So we force use of shlib even when dlfcn.h\n   is available */\n# ifdef __hpux\n#  ifdef HAVE_DL_H\n#   include \"hpdlfcn.c\"\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# else\n#  ifdef HAVE_DLFCN_H\n#   include <dlfcn.h>\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# endif\n\n#ifdef HAVE_DYNAMIC_LOADING\n\nstatic void *loadLibrary(const char *path, int asLocal, int now,\n\t\t\t const char *search);\nstatic void closeLibrary(void *handle);\nstatic void deleteCachedSymbols(DllInfo *);\nstatic DL_FUNC R_local_dlsym(DllInfo *info, char const *name);\nstatic void getFullDLLPath(SEXP call, char *buf, const char *path);\nstatic void getSystemError(char *buf, int len);\n\nstatic int computeDLOpenFlag(int asLocal, int now);\n\nvoid attribute_hidden InitFunctionHashing()\n{\n    R_osDynSymbol->loadLibrary = loadLibrary;\n    R_osDynSymbol->dlsym = R_local_dlsym;\n    R_osDynSymbol->closeLibrary = closeLibrary;\n    R_osDynSymbol->getError = getSystemError;\n\n    R_osDynSymbol->deleteCachedSymbols = deleteCachedSymbols;\n    R_osDynSymbol->lookupCachedSymbol = Rf_lookupCachedSymbol;\n\n    R_osDynSymbol->getFullDLLPath = getFullDLLPath;\n}\n\nstatic void getSystemError(char *buf, int len)\n{\n    strcpy(buf, dlerror());\n}\n\nstatic void *loadLibrary(const char *path, int asLocal, int now,\n\t\t\t const char *search)\n{\n    void *handle;\n    int openFlag = 0;\n\n    openFlag = computeDLOpenFlag(asLocal, now);\n    handle = (void *) dlopen(path,openFlag);\n\n    return(handle);\n}\n\nstatic void closeLibrary(HINSTANCE handle)\n{\n    dlclose(handle);\n}\n\n /*\n   If we are caching the native level symbols, this routine\n   discards the ones from the DLL identified by loc.\n   This is called as the initial action of DeleteDLL().\n  */\nstatic void deleteCachedSymbols(DllInfo *dll)\n{\n#ifdef CACHE_DLL_SYM\n    int i;\n    /* Wouldn't a linked list be easier here?\n       Potentially ruin the contiguity of the memory.\n    */\n    for(i = nCPFun - 1; i >= 0; i--)\n\tif(!strcmp(CPFun[i].pkg, dll->name)) {\n\t    if(i < nCPFun - 1) {\n\t\tstrcpy(CPFun[i].name, CPFun[--nCPFun].name);\n\t\tstrcpy(CPFun[i].pkg, CPFun[nCPFun].pkg);\n\t\tCPFun[i].func = CPFun[nCPFun].func;\n\t    } else nCPFun--;\n\t}\n#endif /* CACHE_DLL_SYM */\n}\n\n\n /*\n    Computes the flag to be passed as the second argument to dlopen(),\n    controlling whether the local or global symbol integration\n    and lazy or eager resolution of the undefined symbols.\n    The arguments determine which of each of these possibilities\n    to use and the results are or'ed together. We need a separate\n    routine to keep things clean(er) because some symbolic constants\n    may not  be defined, such as RTLD_LOCAL on certain Solaris 2.5.1\n    and Irix 6.4    boxes. In such cases, we emit a warning message and\n    use the default by not modifying the value of the flag.\n\n    Called only by AddDLL().\n  */\nstatic int computeDLOpenFlag(int asLocal, int now)\n{\n#if !defined(RTLD_LOCAL) || !defined(RTLD_GLOBAL) || !defined(RTLD_NOW) || !defined(RTLD_LAZY)\n    static char *warningMessages[] = {\n\tN_(\"Explicit local dynamic loading not supported on this platform. Using default.\"),\n\tN_(\"Explicit global dynamic loading not supported on this platform. Using default.\"),\n\tN_(\"Explicit non-lazy dynamic loading not supported on this platform. Using default.\"),\n\tN_(\"Explicit lazy dynamic loading not supported on this platform. Using default.\")\n    };\n    /* Define a local macro for issuing the warnings.\n       This allows us to redefine it easily so that it only emits the\n       warning once as in\n       DL_WARN(i) if(warningMessages[i]) {\\\n       warning(warningMessages[i]); \\\n       warningMessages[i] = NULL; \\\n       }\n       or to control the emission via the options currently in effect at\n       call time.\n    */\n# define DL_WARN(i) \\\n    if(asInteger(GetOption1(install(\"warn\"))) == 1 || \\\n       asInteger(GetOption1(install(\"verbose\"))) > 0) \\\n\twarning(_(warningMessages[i]))\n#endif\n\n    int openFlag = 0;\t\t/* Default value so no-ops for undefined\n\t\t\t\t   flags should do nothing in the\n\t\t\t\t   resulting dlopen(). */\n\n    if(asLocal != 0) {\n#ifndef RTLD_LOCAL\n\tDL_WARN(0);\n#else\n\topenFlag = RTLD_LOCAL;\n#endif\n    } else {\n#ifndef RTLD_GLOBAL\n\tDL_WARN(1);\n#else\n\topenFlag = RTLD_GLOBAL;\n#endif\n    }\n\n    if(now != 0) {\n#ifndef RTLD_NOW\n\tDL_WARN(2);\n#else\n\topenFlag |= RTLD_NOW;\n#endif\n    } else {\n#ifndef RTLD_LAZY\n\tDL_WARN(3);\n#else\n\topenFlag |= RTLD_LAZY;\n#endif\n    }\n\n    return(openFlag);\n}\n\n\n/*\n  This is the system/OS-specific version for resolving a\n  symbol in a shared object.  A cast would not be legal C.\n */\n/*\n  We are not interested in NULL symbols in the shared object.\n  If we were, this would need to use dlerror() before and after\n  dlsym, and check the second value is NULL.\n */\ntypedef union {void *p; DL_FUNC fn;} fn_ptr;\nstatic DL_FUNC R_local_dlsym(DllInfo *info, char const *name)\n{\n    fn_ptr tmp;\n    tmp.p = dlsym(info->handle, name);\n    return tmp.fn;\n}\n\n\n/*\n  In the future, this will receive an additional argument\n  which will specify the nature of the symbol expected by the\n  caller, specifically whether it is for a .C(), .Call(),\n  .Fortran(), .External(), generic, etc. invocation. This will\n  reduce the pool of possible symbols in the case of a library\n  that registers its routines.\n */\n\n\n\nstatic void getFullDLLPath(SEXP call, char *buf, const char *path)\n{\n    if(path[0] == '~')\n\tstrcpy(buf, R_ExpandFileName(path));\n    else if(path[0] != '/') {\n#ifdef HAVE_GETCWD\n\tif(!getcwd(buf, PATH_MAX))\n#endif\n\t    errorcall(call, _(\"cannot get working directory!\"));\n\tstrcat(buf, \"/\");\n\tstrcat(buf, path);\n    }\n    else strcpy(buf, path);\n}\n\n#endif /* end of `ifdef HAVE_DYNAMIC_LOADING' */\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/unix/hpdlfcn.h": "void *dlopen(const char *, int);\nvoid *dlsym(void *, const char *);\nint dlclose(void *);\nchar *dlerror(void);\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\ndnl commented out to avoid autoconf warnings\ndnl # serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\ndnl # serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[(libtool) build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[(libtool) build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [(libtool) optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [(libtool) shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[(libtool) try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/m4/gettext-lib.m4": "## concatentation of files in gettext-0.19.5.1/gettext-runtime/gnulib-m4\n## cat lib-ld.m4 lib-link.m4 lib-prefix.m4 > gettext-lib.m4\n\n# lib-ld.m4 serial 6\ndnl Copyright (C) 1996-2003, 2009-2015 Free Software Foundation, Inc.\ndnl This file is free software; the Free Software Foundation\ndnl gives unlimited permission to copy and/or distribute it,\ndnl with or without modifications, as long as this notice is preserved.\n\ndnl Subroutines of libtool.m4,\ndnl with replacements s/_*LT_PATH/AC_LIB_PROG/ and s/lt_/acl_/ to avoid\ndnl collision with libtool.m4.\n\ndnl From libtool-2.4. Sets the variable with_gnu_ld to yes or no.\nAC_DEFUN([AC_LIB_PROG_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], [acl_cv_prog_gnu_ld],\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  acl_cv_prog_gnu_ld=yes\n  ;;\n*)\n  acl_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$acl_cv_prog_gnu_ld\n])\n\ndnl From libtool-2.4. Sets the variable LD.\nAC_DEFUN([AC_LIB_PROG_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n        [assume the C compiler uses GNU ld [default=no]])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\n# Prepare PATH_SEPARATOR.\n# The user is always right.\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  # Determine PATH_SEPARATOR by trying to find /bin/sh in a PATH which\n  # contains only /bin. Note that ksh looks also at the FPATH variable,\n  # so we have to set that as well for the test.\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 \\\n    && { (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 \\\n           || PATH_SEPARATOR=';'\n       }\nfi\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`echo \"$ac_prog\"| sed 's%\\\\\\\\%/%g'`\n      while echo \"$ac_prog\" | grep \"$re_direlt\" > /dev/null 2>&1; do\n        ac_prog=`echo $ac_prog| sed \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL([acl_cv_path_LD],\n[if test -z \"$LD\"; then\n  acl_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$acl_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      acl_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$acl_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n        test \"$with_gnu_ld\" != no && break\n        ;;\n      *)\n        test \"$with_gnu_ld\" != yes && break\n        ;;\n      esac\n    fi\n  done\n  IFS=\"$acl_save_ifs\"\nelse\n  acl_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$acl_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT([$LD])\nelse\n  AC_MSG_RESULT([no])\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\nAC_LIB_PROG_LD_GNU\n])\n# lib-link.m4 serial 26 (gettext-0.18.2)\ndnl Copyright (C) 2001-2015 Free Software Foundation, Inc.\ndnl This file is free software; the Free Software Foundation\ndnl gives unlimited permission to copy and/or distribute it,\ndnl with or without modifications, as long as this notice is preserved.\n\ndnl From Bruno Haible.\n\nAC_PREREQ([2.54])\n\ndnl AC_LIB_LINKFLAGS(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets and AC_SUBSTs the LIB${NAME} and LTLIB${NAME} variables and\ndnl augments the CPPFLAGS variable.\ndnl Sets and AC_SUBSTs the LIB${NAME}_PREFIX variable to nonempty if libname\ndnl was found in ${LIB${NAME}_PREFIX}/$acl_libdirstem.\nAC_DEFUN([AC_LIB_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  pushdef([Name],[m4_translit([$1],[./+-], [____])])\n  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],\n                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  AC_CACHE_CHECK([how to link with lib[]$1], [ac_cv_lib[]Name[]_libs], [\n    AC_LIB_LINKFLAGS_BODY([$1], [$2])\n    ac_cv_lib[]Name[]_libs=\"$LIB[]NAME\"\n    ac_cv_lib[]Name[]_ltlibs=\"$LTLIB[]NAME\"\n    ac_cv_lib[]Name[]_cppflags=\"$INC[]NAME\"\n    ac_cv_lib[]Name[]_prefix=\"$LIB[]NAME[]_PREFIX\"\n  ])\n  LIB[]NAME=\"$ac_cv_lib[]Name[]_libs\"\n  LTLIB[]NAME=\"$ac_cv_lib[]Name[]_ltlibs\"\n  INC[]NAME=\"$ac_cv_lib[]Name[]_cppflags\"\n  LIB[]NAME[]_PREFIX=\"$ac_cv_lib[]Name[]_prefix\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  AC_SUBST([LIB]NAME[_PREFIX])\n  dnl Also set HAVE_LIB[]NAME so that AC_LIB_HAVE_LINKFLAGS can reuse the\n  dnl results of this search when this library appears as a dependency.\n  HAVE_LIB[]NAME=yes\n  popdef([NAME])\n  popdef([Name])\n])\n\ndnl AC_LIB_HAVE_LINKFLAGS(name, dependencies, includes, testcode, [missing-message])\ndnl searches for libname and the libraries corresponding to explicit and\ndnl implicit dependencies, together with the specified include files and\ndnl the ability to compile and link the specified testcode. The missing-message\ndnl defaults to 'no' and may contain additional hints for the user.\ndnl If found, it sets and AC_SUBSTs HAVE_LIB${NAME}=yes and the LIB${NAME}\ndnl and LTLIB${NAME} variables and augments the CPPFLAGS variable, and\ndnl #defines HAVE_LIB${NAME} to 1. Otherwise, it sets and AC_SUBSTs\ndnl HAVE_LIB${NAME}=no and LIB${NAME} and LTLIB${NAME} to empty.\ndnl Sets and AC_SUBSTs the LIB${NAME}_PREFIX variable to nonempty if libname\ndnl was found in ${LIB${NAME}_PREFIX}/$acl_libdirstem.\nAC_DEFUN([AC_LIB_HAVE_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  pushdef([Name],[m4_translit([$1],[./+-], [____])])\n  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],\n                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n\n  dnl Search for lib[]Name and define LIB[]NAME, LTLIB[]NAME and INC[]NAME\n  dnl accordingly.\n  AC_LIB_LINKFLAGS_BODY([$1], [$2])\n\n  dnl Add $INC[]NAME to CPPFLAGS before performing the following checks,\n  dnl because if the user has installed lib[]Name and not disabled its use\n  dnl via --without-lib[]Name-prefix, he wants to use it.\n  ac_save_CPPFLAGS=\"$CPPFLAGS\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n\n  AC_CACHE_CHECK([for lib[]$1], [ac_cv_lib[]Name], [\n    ac_save_LIBS=\"$LIBS\"\n    dnl If $LIB[]NAME contains some -l options, add it to the end of LIBS,\n    dnl because these -l options might require -L options that are present in\n    dnl LIBS. -l options benefit only from the -L options listed before it.\n    dnl Otherwise, add it to the front of LIBS, because it may be a static\n    dnl library that depends on another static library that is present in LIBS.\n    dnl Static libraries benefit only from the static libraries listed after\n    dnl it.\n    case \" $LIB[]NAME\" in\n      *\" -l\"*) LIBS=\"$LIBS $LIB[]NAME\" ;;\n      *)       LIBS=\"$LIB[]NAME $LIBS\" ;;\n    esac\n    AC_LINK_IFELSE(\n      [AC_LANG_PROGRAM([[$3]], [[$4]])],\n      [ac_cv_lib[]Name=yes],\n      [ac_cv_lib[]Name='m4_if([$5], [], [no], [[$5]])'])\n    LIBS=\"$ac_save_LIBS\"\n  ])\n  if test \"$ac_cv_lib[]Name\" = yes; then\n    HAVE_LIB[]NAME=yes\n    AC_DEFINE([HAVE_LIB]NAME, 1, [Define if you have the lib][$1 library.])\n    AC_MSG_CHECKING([how to link with lib[]$1])\n    AC_MSG_RESULT([$LIB[]NAME])\n  else\n    HAVE_LIB[]NAME=no\n    dnl If $LIB[]NAME didn't lead to a usable library, we don't need\n    dnl $INC[]NAME either.\n    CPPFLAGS=\"$ac_save_CPPFLAGS\"\n    LIB[]NAME=\n    LTLIB[]NAME=\n    LIB[]NAME[]_PREFIX=\n  fi\n  AC_SUBST([HAVE_LIB]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  AC_SUBST([LIB]NAME[_PREFIX])\n  popdef([NAME])\n  popdef([Name])\n])\n\ndnl Determine the platform dependent parameters needed to use rpath:\ndnl   acl_libext,\ndnl   acl_shlibext,\ndnl   acl_libname_spec,\ndnl   acl_library_names_spec,\ndnl   acl_hardcode_libdir_flag_spec,\ndnl   acl_hardcode_libdir_separator,\ndnl   acl_hardcode_direct,\ndnl   acl_hardcode_minus_L.\nAC_DEFUN([AC_LIB_RPATH],\n[\n  dnl Tell automake >= 1.10 to complain if config.rpath is missing.\n  m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([config.rpath])])\n  AC_REQUIRE([AC_PROG_CC])                dnl we use $CC, $GCC, $LDFLAGS\n  AC_REQUIRE([AC_LIB_PROG_LD])            dnl we use $LD, $with_gnu_ld\n  AC_REQUIRE([AC_CANONICAL_HOST])         dnl we use $host\n  AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT]) dnl we use $ac_aux_dir\n  AC_CACHE_CHECK([for shared library run path origin], [acl_cv_rpath], [\n    CC=\"$CC\" GCC=\"$GCC\" LDFLAGS=\"$LDFLAGS\" LD=\"$LD\" with_gnu_ld=\"$with_gnu_ld\" \\\n    ${CONFIG_SHELL-/bin/sh} \"$ac_aux_dir/config.rpath\" \"$host\" > conftest.sh\n    . ./conftest.sh\n    rm -f ./conftest.sh\n    acl_cv_rpath=done\n  ])\n  wl=\"$acl_cv_wl\"\n  acl_libext=\"$acl_cv_libext\"\n  acl_shlibext=\"$acl_cv_shlibext\"\n  acl_libname_spec=\"$acl_cv_libname_spec\"\n  acl_library_names_spec=\"$acl_cv_library_names_spec\"\n  acl_hardcode_libdir_flag_spec=\"$acl_cv_hardcode_libdir_flag_spec\"\n  acl_hardcode_libdir_separator=\"$acl_cv_hardcode_libdir_separator\"\n  acl_hardcode_direct=\"$acl_cv_hardcode_direct\"\n  acl_hardcode_minus_L=\"$acl_cv_hardcode_minus_L\"\n  dnl Determine whether the user wants rpath handling at all.\n  AC_ARG_ENABLE([rpath],\n    [  --disable-rpath         do not hardcode runtime library paths],\n    :, enable_rpath=yes)\n])\n\ndnl AC_LIB_FROMPACKAGE(name, package)\ndnl declares that libname comes from the given package. The configure file\ndnl will then not have a --with-libname-prefix option but a\ndnl --with-package-prefix option. Several libraries can come from the same\ndnl package. This declaration must occur before an AC_LIB_LINKFLAGS or similar\ndnl macro call that searches for libname.\nAC_DEFUN([AC_LIB_FROMPACKAGE],\n[\n  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],\n                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  define([acl_frompackage_]NAME, [$2])\n  popdef([NAME])\n  pushdef([PACK],[$2])\n  pushdef([PACKUP],[m4_translit(PACK,[abcdefghijklmnopqrstuvwxyz./+-],\n                                     [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  define([acl_libsinpackage_]PACKUP,\n    m4_ifdef([acl_libsinpackage_]PACKUP, [m4_defn([acl_libsinpackage_]PACKUP)[, ]],)[lib$1])\n  popdef([PACKUP])\n  popdef([PACK])\n])\n\ndnl AC_LIB_LINKFLAGS_BODY(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets the LIB${NAME}, LTLIB${NAME} and INC${NAME} variables.\ndnl Also, sets the LIB${NAME}_PREFIX variable to nonempty if libname was found\ndnl in ${LIB${NAME}_PREFIX}/$acl_libdirstem.\nAC_DEFUN([AC_LIB_LINKFLAGS_BODY],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])\n  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],\n                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  pushdef([PACK],[m4_ifdef([acl_frompackage_]NAME, [acl_frompackage_]NAME, lib[$1])])\n  pushdef([PACKUP],[m4_translit(PACK,[abcdefghijklmnopqrstuvwxyz./+-],\n                                     [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])\n  pushdef([PACKLIBS],[m4_ifdef([acl_frompackage_]NAME, [acl_libsinpackage_]PACKUP, lib[$1])])\n  dnl Autoconf >= 2.61 supports dots in --with options.\n  pushdef([P_A_C_K],[m4_if(m4_version_compare(m4_defn([m4_PACKAGE_VERSION]),[2.61]),[-1],[m4_translit(PACK,[.],[_])],PACK)])\n  dnl By default, look in $includedir and $libdir.\n  use_additional=yes\n  AC_LIB_WITH_FINAL_PREFIX([\n    eval additional_includedir=\\\"$includedir\\\"\n    eval additional_libdir=\\\"$libdir\\\"\n  ])\n  AC_ARG_WITH(P_A_C_K[-prefix],\n[[  --with-]]P_A_C_K[[-prefix[=DIR]  search for ]PACKLIBS[ in DIR/include and DIR/lib\n  --without-]]P_A_C_K[[-prefix     don't search for ]PACKLIBS[ in includedir and libdir]],\n[\n    if test \"X$withval\" = \"Xno\"; then\n      use_additional=no\n    else\n      if test \"X$withval\" = \"X\"; then\n        AC_LIB_WITH_FINAL_PREFIX([\n          eval additional_includedir=\\\"$includedir\\\"\n          eval additional_libdir=\\\"$libdir\\\"\n        ])\n      else\n        additional_includedir=\"$withval/include\"\n        additional_libdir=\"$withval/$acl_libdirstem\"\n        if test \"$acl_libdirstem2\" != \"$acl_libdirstem\" \\\n           && ! test -d \"$withval/$acl_libdirstem\"; then\n          additional_libdir=\"$withval/$acl_libdirstem2\"\n        fi\n      fi\n    fi\n])\n  dnl Search the library and its dependencies in $additional_libdir and\n  dnl $LDFLAGS. Using breadth-first-seach.\n  LIB[]NAME=\n  LTLIB[]NAME=\n  INC[]NAME=\n  LIB[]NAME[]_PREFIX=\n  dnl HAVE_LIB${NAME} is an indicator that LIB${NAME}, LTLIB${NAME} have been\n  dnl computed. So it has to be reset here.\n  HAVE_LIB[]NAME=\n  rpathdirs=\n  ltrpathdirs=\n  names_already_handled=\n  names_next_round='$1 $2'\n  while test -n \"$names_next_round\"; do\n    names_this_round=\"$names_next_round\"\n    names_next_round=\n    for name in $names_this_round; do\n      already_handled=\n      for n in $names_already_handled; do\n        if test \"$n\" = \"$name\"; then\n          already_handled=yes\n          break\n        fi\n      done\n      if test -z \"$already_handled\"; then\n        names_already_handled=\"$names_already_handled $name\"\n        dnl See if it was already located by an earlier AC_LIB_LINKFLAGS\n        dnl or AC_LIB_HAVE_LINKFLAGS call.\n        uppername=`echo \"$name\" | sed -e 'y|abcdefghijklmnopqrstuvwxyz./+-|ABCDEFGHIJKLMNOPQRSTUVWXYZ____|'`\n        eval value=\\\"\\$HAVE_LIB$uppername\\\"\n        if test -n \"$value\"; then\n          if test \"$value\" = yes; then\n            eval value=\\\"\\$LIB$uppername\\\"\n            test -z \"$value\" || LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$value\"\n            eval value=\\\"\\$LTLIB$uppername\\\"\n            test -z \"$value\" || LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$value\"\n          else\n            dnl An earlier call to AC_LIB_HAVE_LINKFLAGS has determined\n            dnl that this library doesn't exist. So just drop it.\n            :\n          fi\n        else\n          dnl Search the library lib$name in $additional_libdir and $LDFLAGS\n          dnl and the already constructed $LIBNAME/$LTLIBNAME.\n          found_dir=\n          found_la=\n          found_so=\n          found_a=\n          eval libname=\\\"$acl_libname_spec\\\"    # typically: libname=lib$name\n          if test -n \"$acl_shlibext\"; then\n            shrext=\".$acl_shlibext\"             # typically: shrext=.so\n          else\n            shrext=\n          fi\n          if test $use_additional = yes; then\n            dir=\"$additional_libdir\"\n            dnl The same code as in the loop below:\n            dnl First look for a shared library.\n            if test -n \"$acl_shlibext\"; then\n              if test -f \"$dir/$libname$shrext\"; then\n                found_dir=\"$dir\"\n                found_so=\"$dir/$libname$shrext\"\n              else\n                if test \"$acl_library_names_spec\" = '$libname$shrext$versuffix'; then\n                  ver=`(cd \"$dir\" && \\\n                        for f in \"$libname$shrext\".*; do echo \"$f\"; done \\\n                        | sed -e \"s,^$libname$shrext\\\\\\\\.,,\" \\\n                        | sort -t '.' -n -r -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 \\\n                        | sed 1q ) 2>/dev/null`\n                  if test -n \"$ver\" && test -f \"$dir/$libname$shrext.$ver\"; then\n                    found_dir=\"$dir\"\n                    found_so=\"$dir/$libname$shrext.$ver\"\n                  fi\n                else\n                  eval library_names=\\\"$acl_library_names_spec\\\"\n                  for f in $library_names; do\n                    if test -f \"$dir/$f\"; then\n                      found_dir=\"$dir\"\n                      found_so=\"$dir/$f\"\n                      break\n                    fi\n                  done\n                fi\n              fi\n            fi\n            dnl Then look for a static library.\n            if test \"X$found_dir\" = \"X\"; then\n              if test -f \"$dir/$libname.$acl_libext\"; then\n                found_dir=\"$dir\"\n                found_a=\"$dir/$libname.$acl_libext\"\n              fi\n            fi\n            if test \"X$found_dir\" != \"X\"; then\n              if test -f \"$dir/$libname.la\"; then\n                found_la=\"$dir/$libname.la\"\n              fi\n            fi\n          fi\n          if test \"X$found_dir\" = \"X\"; then\n            for x in $LDFLAGS $LTLIB[]NAME; do\n              AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n              case \"$x\" in\n                -L*)\n                  dir=`echo \"X$x\" | sed -e 's/^X-L//'`\n                  dnl First look for a shared library.\n                  if test -n \"$acl_shlibext\"; then\n                    if test -f \"$dir/$libname$shrext\"; then\n                      found_dir=\"$dir\"\n                      found_so=\"$dir/$libname$shrext\"\n                    else\n                      if test \"$acl_library_names_spec\" = '$libname$shrext$versuffix'; then\n                        ver=`(cd \"$dir\" && \\\n                              for f in \"$libname$shrext\".*; do echo \"$f\"; done \\\n                              | sed -e \"s,^$libname$shrext\\\\\\\\.,,\" \\\n                              | sort -t '.' -n -r -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 \\\n                              | sed 1q ) 2>/dev/null`\n                        if test -n \"$ver\" && test -f \"$dir/$libname$shrext.$ver\"; then\n                          found_dir=\"$dir\"\n                          found_so=\"$dir/$libname$shrext.$ver\"\n                        fi\n                      else\n                        eval library_names=\\\"$acl_library_names_spec\\\"\n                        for f in $library_names; do\n                          if test -f \"$dir/$f\"; then\n                            found_dir=\"$dir\"\n                            found_so=\"$dir/$f\"\n                            break\n                          fi\n                        done\n                      fi\n                    fi\n                  fi\n                  dnl Then look for a static library.\n                  if test \"X$found_dir\" = \"X\"; then\n                    if test -f \"$dir/$libname.$acl_libext\"; then\n                      found_dir=\"$dir\"\n                      found_a=\"$dir/$libname.$acl_libext\"\n                    fi\n                  fi\n                  if test \"X$found_dir\" != \"X\"; then\n                    if test -f \"$dir/$libname.la\"; then\n                      found_la=\"$dir/$libname.la\"\n                    fi\n                  fi\n                  ;;\n              esac\n              if test \"X$found_dir\" != \"X\"; then\n                break\n              fi\n            done\n          fi\n          if test \"X$found_dir\" != \"X\"; then\n            dnl Found the library.\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$found_dir -l$name\"\n            if test \"X$found_so\" != \"X\"; then\n              dnl Linking with a shared library. We attempt to hardcode its\n              dnl directory into the executable's runpath, unless it's the\n              dnl standard /usr/lib.\n              if test \"$enable_rpath\" = no \\\n                 || test \"X$found_dir\" = \"X/usr/$acl_libdirstem\" \\\n                 || test \"X$found_dir\" = \"X/usr/$acl_libdirstem2\"; then\n                dnl No hardcoding is needed.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n              else\n                dnl Use an explicit option to hardcode DIR into the resulting\n                dnl binary.\n                dnl Potentially add DIR to ltrpathdirs.\n                dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                haveit=\n                for x in $ltrpathdirs; do\n                  if test \"X$x\" = \"X$found_dir\"; then\n                    haveit=yes\n                    break\n                  fi\n                done\n                if test -z \"$haveit\"; then\n                  ltrpathdirs=\"$ltrpathdirs $found_dir\"\n                fi\n                dnl The hardcoding into $LIBNAME is system dependent.\n                if test \"$acl_hardcode_direct\" = yes; then\n                  dnl Using DIR/libNAME.so during linking hardcodes DIR into the\n                  dnl resulting binary.\n                  LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                else\n                  if test -n \"$acl_hardcode_libdir_flag_spec\" && test \"$acl_hardcode_minus_L\" = no; then\n                    dnl Use an explicit option to hardcode DIR into the resulting\n                    dnl binary.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    dnl Potentially add DIR to rpathdirs.\n                    dnl The rpathdirs will be appended to $LIBNAME at the end.\n                    haveit=\n                    for x in $rpathdirs; do\n                      if test \"X$x\" = \"X$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      rpathdirs=\"$rpathdirs $found_dir\"\n                    fi\n                  else\n                    dnl Rely on \"-L$found_dir\".\n                    dnl But don't add it if it's already contained in the LDFLAGS\n                    dnl or the already constructed $LIBNAME\n                    haveit=\n                    for x in $LDFLAGS $LIB[]NAME; do\n                      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                      if test \"X$x\" = \"X-L$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir\"\n                    fi\n                    if test \"$acl_hardcode_minus_L\" != no; then\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    else\n                      dnl We cannot use $acl_hardcode_runpath_var and LD_RUN_PATH\n                      dnl here, because this doesn't fit in flags passed to the\n                      dnl compiler. So give up. No hardcoding. This affects only\n                      dnl very old systems.\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n                    fi\n                  fi\n                fi\n              fi\n            else\n              if test \"X$found_a\" != \"X\"; then\n                dnl Linking with a static library.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_a\"\n              else\n                dnl We shouldn't come here, but anyway it's good to have a\n                dnl fallback.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir -l$name\"\n              fi\n            fi\n            dnl Assume the include files are nearby.\n            additional_includedir=\n            case \"$found_dir\" in\n              */$acl_libdirstem | */$acl_libdirstem/)\n                basedir=`echo \"X$found_dir\" | sed -e 's,^X,,' -e \"s,/$acl_libdirstem/\"'*$,,'`\n                if test \"$name\" = '$1'; then\n                  LIB[]NAME[]_PREFIX=\"$basedir\"\n                fi\n                additional_includedir=\"$basedir/include\"\n                ;;\n              */$acl_libdirstem2 | */$acl_libdirstem2/)\n                basedir=`echo \"X$found_dir\" | sed -e 's,^X,,' -e \"s,/$acl_libdirstem2/\"'*$,,'`\n                if test \"$name\" = '$1'; then\n                  LIB[]NAME[]_PREFIX=\"$basedir\"\n                fi\n                additional_includedir=\"$basedir/include\"\n                ;;\n            esac\n            if test \"X$additional_includedir\" != \"X\"; then\n              dnl Potentially add $additional_includedir to $INCNAME.\n              dnl But don't add it\n              dnl   1. if it's the standard /usr/include,\n              dnl   2. if it's /usr/local/include and we are using GCC on Linux,\n              dnl   3. if it's already present in $CPPFLAGS or the already\n              dnl      constructed $INCNAME,\n              dnl   4. if it doesn't exist as a directory.\n              if test \"X$additional_includedir\" != \"X/usr/include\"; then\n                haveit=\n                if test \"X$additional_includedir\" = \"X/usr/local/include\"; then\n                  if test -n \"$GCC\"; then\n                    case $host_os in\n                      linux* | gnu* | k*bsd*-gnu) haveit=yes;;\n                    esac\n                  fi\n                fi\n                if test -z \"$haveit\"; then\n                  for x in $CPPFLAGS $INC[]NAME; do\n                    AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                    if test \"X$x\" = \"X-I$additional_includedir\"; then\n                      haveit=yes\n                      break\n                    fi\n                  done\n                  if test -z \"$haveit\"; then\n                    if test -d \"$additional_includedir\"; then\n                      dnl Really add $additional_includedir to $INCNAME.\n                      INC[]NAME=\"${INC[]NAME}${INC[]NAME:+ }-I$additional_includedir\"\n                    fi\n                  fi\n                fi\n              fi\n            fi\n            dnl Look for dependencies.\n            if test -n \"$found_la\"; then\n              dnl Read the .la file. It defines the variables\n              dnl dlname, library_names, old_library, dependency_libs, current,\n              dnl age, revision, installed, dlopen, dlpreopen, libdir.\n              save_libdir=\"$libdir\"\n              case \"$found_la\" in\n                */* | *\\\\*) . \"$found_la\" ;;\n                *) . \"./$found_la\" ;;\n              esac\n              libdir=\"$save_libdir\"\n              dnl We use only dependency_libs.\n              for dep in $dependency_libs; do\n                case \"$dep\" in\n                  -L*)\n                    additional_libdir=`echo \"X$dep\" | sed -e 's/^X-L//'`\n                    dnl Potentially add $additional_libdir to $LIBNAME and $LTLIBNAME.\n                    dnl But don't add it\n                    dnl   1. if it's the standard /usr/lib,\n                    dnl   2. if it's /usr/local/lib and we are using GCC on Linux,\n                    dnl   3. if it's already present in $LDFLAGS or the already\n                    dnl      constructed $LIBNAME,\n                    dnl   4. if it doesn't exist as a directory.\n                    if test \"X$additional_libdir\" != \"X/usr/$acl_libdirstem\" \\\n                       && test \"X$additional_libdir\" != \"X/usr/$acl_libdirstem2\"; then\n                      haveit=\n                      if test \"X$additional_libdir\" = \"X/usr/local/$acl_libdirstem\" \\\n                         || test \"X$additional_libdir\" = \"X/usr/local/$acl_libdirstem2\"; then\n                        if test -n \"$GCC\"; then\n                          case $host_os in\n                            linux* | gnu* | k*bsd*-gnu) haveit=yes;;\n                          esac\n                        fi\n                      fi\n                      if test -z \"$haveit\"; then\n                        haveit=\n                        for x in $LDFLAGS $LIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LIBNAME.\n                            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                        haveit=\n                        for x in $LDFLAGS $LTLIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LTLIBNAME.\n                            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                      fi\n                    fi\n                    ;;\n                  -R*)\n                    dir=`echo \"X$dep\" | sed -e 's/^X-R//'`\n                    if test \"$enable_rpath\" != no; then\n                      dnl Potentially add DIR to rpathdirs.\n                      dnl The rpathdirs will be appended to $LIBNAME at the end.\n                      haveit=\n                      for x in $rpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        rpathdirs=\"$rpathdirs $dir\"\n                      fi\n                      dnl Potentially add DIR to ltrpathdirs.\n                      dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                      haveit=\n                      for x in $ltrpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        ltrpathdirs=\"$ltrpathdirs $dir\"\n                      fi\n                    fi\n                    ;;\n                  -l*)\n                    dnl Handle this in the next round.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's/^X-l//'`\n                    ;;\n                  *.la)\n                    dnl Handle this in the next round. Throw away the .la's\n                    dnl directory; it is already contained in a preceding -L\n                    dnl option.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's,^X.*/,,' -e 's,^lib,,' -e 's,\\.la$,,'`\n                    ;;\n                  *)\n                    dnl Most likely an immediate library name.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$dep\"\n                    LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$dep\"\n                    ;;\n                esac\n              done\n            fi\n          else\n            dnl Didn't find the library; assume it is in the system directories\n            dnl known to the linker and runtime loader. (All the system\n            dnl directories known to the linker should also be known to the\n            dnl runtime loader, otherwise the system is severely misconfigured.)\n            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-l$name\"\n          fi\n        fi\n      fi\n    done\n  done\n  if test \"X$rpathdirs\" != \"X\"; then\n    if test -n \"$acl_hardcode_libdir_separator\"; then\n      dnl Weird platform: only the last -rpath option counts, the user must\n      dnl pass all path elements in one option. We can arrange that for a\n      dnl single library, but not when more than one $LIBNAMEs are used.\n      alldirs=\n      for found_dir in $rpathdirs; do\n        alldirs=\"${alldirs}${alldirs:+$acl_hardcode_libdir_separator}$found_dir\"\n      done\n      dnl Note: acl_hardcode_libdir_flag_spec uses $libdir and $wl.\n      acl_save_libdir=\"$libdir\"\n      libdir=\"$alldirs\"\n      eval flag=\\\"$acl_hardcode_libdir_flag_spec\\\"\n      libdir=\"$acl_save_libdir\"\n      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n    else\n      dnl The -rpath options are cumulative.\n      for found_dir in $rpathdirs; do\n        acl_save_libdir=\"$libdir\"\n        libdir=\"$found_dir\"\n        eval flag=\\\"$acl_hardcode_libdir_flag_spec\\\"\n        libdir=\"$acl_save_libdir\"\n        LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n      done\n    fi\n  fi\n  if test \"X$ltrpathdirs\" != \"X\"; then\n    dnl When using libtool, the option that works for both libraries and\n    dnl executables is -R. The -R options are cumulative.\n    for found_dir in $ltrpathdirs; do\n      LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-R$found_dir\"\n    done\n  fi\n  popdef([P_A_C_K])\n  popdef([PACKLIBS])\n  popdef([PACKUP])\n  popdef([PACK])\n  popdef([NAME])\n])\n\ndnl AC_LIB_APPENDTOVAR(VAR, CONTENTS) appends the elements of CONTENTS to VAR,\ndnl unless already present in VAR.\ndnl Works only for CPPFLAGS, not for LIB* variables because that sometimes\ndnl contains two or three consecutive elements that belong together.\nAC_DEFUN([AC_LIB_APPENDTOVAR],\n[\n  for element in [$2]; do\n    haveit=\n    for x in $[$1]; do\n      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n      if test \"X$x\" = \"X$element\"; then\n        haveit=yes\n        break\n      fi\n    done\n    if test -z \"$haveit\"; then\n      [$1]=\"${[$1]}${[$1]:+ }$element\"\n    fi\n  done\n])\n\ndnl For those cases where a variable contains several -L and -l options\ndnl referring to unknown libraries and directories, this macro determines the\ndnl necessary additional linker options for the runtime path.\ndnl AC_LIB_LINKFLAGS_FROM_LIBS([LDADDVAR], [LIBSVALUE], [USE-LIBTOOL])\ndnl sets LDADDVAR to linker options needed together with LIBSVALUE.\ndnl If USE-LIBTOOL evaluates to non-empty, linking with libtool is assumed,\ndnl otherwise linking without libtool is assumed.\nAC_DEFUN([AC_LIB_LINKFLAGS_FROM_LIBS],\n[\n  AC_REQUIRE([AC_LIB_RPATH])\n  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])\n  $1=\n  if test \"$enable_rpath\" != no; then\n    if test -n \"$acl_hardcode_libdir_flag_spec\" && test \"$acl_hardcode_minus_L\" = no; then\n      dnl Use an explicit option to hardcode directories into the resulting\n      dnl binary.\n      rpathdirs=\n      next=\n      for opt in $2; do\n        if test -n \"$next\"; then\n          dir=\"$next\"\n          dnl No need to hardcode the standard /usr/lib.\n          if test \"X$dir\" != \"X/usr/$acl_libdirstem\" \\\n             && test \"X$dir\" != \"X/usr/$acl_libdirstem2\"; then\n            rpathdirs=\"$rpathdirs $dir\"\n          fi\n          next=\n        else\n          case $opt in\n            -L) next=yes ;;\n            -L*) dir=`echo \"X$opt\" | sed -e 's,^X-L,,'`\n                 dnl No need to hardcode the standard /usr/lib.\n                 if test \"X$dir\" != \"X/usr/$acl_libdirstem\" \\\n                    && test \"X$dir\" != \"X/usr/$acl_libdirstem2\"; then\n                   rpathdirs=\"$rpathdirs $dir\"\n                 fi\n                 next= ;;\n            *) next= ;;\n          esac\n        fi\n      done\n      if test \"X$rpathdirs\" != \"X\"; then\n        if test -n \"\"$3\"\"; then\n          dnl libtool is used for linking. Use -R options.\n          for dir in $rpathdirs; do\n            $1=\"${$1}${$1:+ }-R$dir\"\n          done\n        else\n          dnl The linker is used for linking directly.\n          if test -n \"$acl_hardcode_libdir_separator\"; then\n            dnl Weird platform: only the last -rpath option counts, the user\n            dnl must pass all path elements in one option.\n            alldirs=\n            for dir in $rpathdirs; do\n              alldirs=\"${alldirs}${alldirs:+$acl_hardcode_libdir_separator}$dir\"\n            done\n            acl_save_libdir=\"$libdir\"\n            libdir=\"$alldirs\"\n            eval flag=\\\"$acl_hardcode_libdir_flag_spec\\\"\n            libdir=\"$acl_save_libdir\"\n            $1=\"$flag\"\n          else\n            dnl The -rpath options are cumulative.\n            for dir in $rpathdirs; do\n              acl_save_libdir=\"$libdir\"\n              libdir=\"$dir\"\n              eval flag=\\\"$acl_hardcode_libdir_flag_spec\\\"\n              libdir=\"$acl_save_libdir\"\n              $1=\"${$1}${$1:+ }$flag\"\n            done\n          fi\n        fi\n      fi\n    fi\n  fi\n  AC_SUBST([$1])\n])\n# lib-prefix.m4 serial 7 (gettext-0.18)\ndnl Copyright (C) 2001-2005, 2008-2015 Free Software Foundation, Inc.\ndnl This file is free software; the Free Software Foundation\ndnl gives unlimited permission to copy and/or distribute it,\ndnl with or without modifications, as long as this notice is preserved.\n\ndnl From Bruno Haible.\n\ndnl AC_LIB_ARG_WITH is synonymous to AC_ARG_WITH in autoconf-2.13, and\ndnl similar to AC_ARG_WITH in autoconf 2.52...2.57 except that is doesn't\ndnl require excessive bracketing.\nifdef([AC_HELP_STRING],\n[AC_DEFUN([AC_LIB_ARG_WITH], [AC_ARG_WITH([$1],[[$2]],[$3],[$4])])],\n[AC_DEFUN([AC_][LIB_ARG_WITH], [AC_ARG_WITH([$1],[$2],[$3],[$4])])])\n\ndnl AC_LIB_PREFIX adds to the CPPFLAGS and LDFLAGS the flags that are needed\ndnl to access previously installed libraries. The basic assumption is that\ndnl a user will want packages to use other packages he previously installed\ndnl with the same --prefix option.\ndnl This macro is not needed if only AC_LIB_LINKFLAGS is used to locate\ndnl libraries, but is otherwise very convenient.\nAC_DEFUN([AC_LIB_PREFIX],\n[\n  AC_BEFORE([$0], [AC_LIB_LINKFLAGS])\n  AC_REQUIRE([AC_PROG_CC])\n  AC_REQUIRE([AC_CANONICAL_HOST])\n  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  dnl By default, look in $includedir and $libdir.\n  use_additional=yes\n  AC_LIB_WITH_FINAL_PREFIX([\n    eval additional_includedir=\\\"$includedir\\\"\n    eval additional_libdir=\\\"$libdir\\\"\n  ])\n  AC_LIB_ARG_WITH([lib-prefix],\n[  --with-lib-prefix[=DIR] search for libraries in DIR/include and DIR/lib\n  --without-lib-prefix    don't search for libraries in includedir and libdir],\n[\n    if test \"X$withval\" = \"Xno\"; then\n      use_additional=no\n    else\n      if test \"X$withval\" = \"X\"; then\n        AC_LIB_WITH_FINAL_PREFIX([\n          eval additional_includedir=\\\"$includedir\\\"\n          eval additional_libdir=\\\"$libdir\\\"\n        ])\n      else\n        additional_includedir=\"$withval/include\"\n        additional_libdir=\"$withval/$acl_libdirstem\"\n      fi\n    fi\n])\n  if test $use_additional = yes; then\n    dnl Potentially add $additional_includedir to $CPPFLAGS.\n    dnl But don't add it\n    dnl   1. if it's the standard /usr/include,\n    dnl   2. if it's already present in $CPPFLAGS,\n    dnl   3. if it's /usr/local/include and we are using GCC on Linux,\n    dnl   4. if it doesn't exist as a directory.\n    if test \"X$additional_includedir\" != \"X/usr/include\"; then\n      haveit=\n      for x in $CPPFLAGS; do\n        AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n        if test \"X$x\" = \"X-I$additional_includedir\"; then\n          haveit=yes\n          break\n        fi\n      done\n      if test -z \"$haveit\"; then\n        if test \"X$additional_includedir\" = \"X/usr/local/include\"; then\n          if test -n \"$GCC\"; then\n            case $host_os in\n              linux* | gnu* | k*bsd*-gnu) haveit=yes;;\n            esac\n          fi\n        fi\n        if test -z \"$haveit\"; then\n          if test -d \"$additional_includedir\"; then\n            dnl Really add $additional_includedir to $CPPFLAGS.\n            CPPFLAGS=\"${CPPFLAGS}${CPPFLAGS:+ }-I$additional_includedir\"\n          fi\n        fi\n      fi\n    fi\n    dnl Potentially add $additional_libdir to $LDFLAGS.\n    dnl But don't add it\n    dnl   1. if it's the standard /usr/lib,\n    dnl   2. if it's already present in $LDFLAGS,\n    dnl   3. if it's /usr/local/lib and we are using GCC on Linux,\n    dnl   4. if it doesn't exist as a directory.\n    if test \"X$additional_libdir\" != \"X/usr/$acl_libdirstem\"; then\n      haveit=\n      for x in $LDFLAGS; do\n        AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n        if test \"X$x\" = \"X-L$additional_libdir\"; then\n          haveit=yes\n          break\n        fi\n      done\n      if test -z \"$haveit\"; then\n        if test \"X$additional_libdir\" = \"X/usr/local/$acl_libdirstem\"; then\n          if test -n \"$GCC\"; then\n            case $host_os in\n              linux*) haveit=yes;;\n            esac\n          fi\n        fi\n        if test -z \"$haveit\"; then\n          if test -d \"$additional_libdir\"; then\n            dnl Really add $additional_libdir to $LDFLAGS.\n            LDFLAGS=\"${LDFLAGS}${LDFLAGS:+ }-L$additional_libdir\"\n          fi\n        fi\n      fi\n    fi\n  fi\n])\n\ndnl AC_LIB_PREPARE_PREFIX creates variables acl_final_prefix,\ndnl acl_final_exec_prefix, containing the values to which $prefix and\ndnl $exec_prefix will expand at the end of the configure script.\nAC_DEFUN([AC_LIB_PREPARE_PREFIX],\n[\n  dnl Unfortunately, prefix and exec_prefix get only finally determined\n  dnl at the end of configure.\n  if test \"X$prefix\" = \"XNONE\"; then\n    acl_final_prefix=\"$ac_default_prefix\"\n  else\n    acl_final_prefix=\"$prefix\"\n  fi\n  if test \"X$exec_prefix\" = \"XNONE\"; then\n    acl_final_exec_prefix='${prefix}'\n  else\n    acl_final_exec_prefix=\"$exec_prefix\"\n  fi\n  acl_save_prefix=\"$prefix\"\n  prefix=\"$acl_final_prefix\"\n  eval acl_final_exec_prefix=\\\"$acl_final_exec_prefix\\\"\n  prefix=\"$acl_save_prefix\"\n])\n\ndnl AC_LIB_WITH_FINAL_PREFIX([statement]) evaluates statement, with the\ndnl variables prefix and exec_prefix bound to the values they will have\ndnl at the end of the configure script.\nAC_DEFUN([AC_LIB_WITH_FINAL_PREFIX],\n[\n  acl_save_prefix=\"$prefix\"\n  prefix=\"$acl_final_prefix\"\n  acl_save_exec_prefix=\"$exec_prefix\"\n  exec_prefix=\"$acl_final_exec_prefix\"\n  $1\n  exec_prefix=\"$acl_save_exec_prefix\"\n  prefix=\"$acl_save_prefix\"\n])\n\ndnl AC_LIB_PREPARE_MULTILIB creates\ndnl - a variable acl_libdirstem, containing the basename of the libdir, either\ndnl   \"lib\" or \"lib64\" or \"lib/64\",\ndnl - a variable acl_libdirstem2, as a secondary possible value for\ndnl   acl_libdirstem, either the same as acl_libdirstem or \"lib/sparcv9\" or\ndnl   \"lib/amd64\".\nAC_DEFUN([AC_LIB_PREPARE_MULTILIB],\n[\n  dnl There is no formal standard regarding lib and lib64.\n  dnl On glibc systems, the current practice is that on a system supporting\n  dnl 32-bit and 64-bit instruction sets or ABIs, 64-bit libraries go under\n  dnl $prefix/lib64 and 32-bit libraries go under $prefix/lib. We determine\n  dnl the compiler's default mode by looking at the compiler's library search\n  dnl path. If at least one of its elements ends in /lib64 or points to a\n  dnl directory whose absolute pathname ends in /lib64, we assume a 64-bit ABI.\n  dnl Otherwise we use the default, namely \"lib\".\n  dnl On Solaris systems, the current practice is that on a system supporting\n  dnl 32-bit and 64-bit instruction sets or ABIs, 64-bit libraries go under\n  dnl $prefix/lib/64 (which is a symlink to either $prefix/lib/sparcv9 or\n  dnl $prefix/lib/amd64) and 32-bit libraries go under $prefix/lib.\n  AC_REQUIRE([AC_CANONICAL_HOST])\n  acl_libdirstem=lib\n  acl_libdirstem2=\n  case \"$host_os\" in\n    solaris*)\n      dnl See Solaris 10 Software Developer Collection > Solaris 64-bit Developer's Guide > The Development Environment\n      dnl <http://docs.sun.com/app/docs/doc/816-5138/dev-env?l=en&a=view>.\n      dnl \"Portable Makefiles should refer to any library directories using the 64 symbolic link.\"\n      dnl But we want to recognize the sparcv9 or amd64 subdirectory also if the\n      dnl symlink is missing, so we set acl_libdirstem2 too.\n      AC_CACHE_CHECK([for 64-bit host], [gl_cv_solaris_64bit],\n        [AC_EGREP_CPP([sixtyfour bits], [\n#ifdef _LP64\nsixtyfour bits\n#endif\n           ], [gl_cv_solaris_64bit=yes], [gl_cv_solaris_64bit=no])\n        ])\n      if test $gl_cv_solaris_64bit = yes; then\n        acl_libdirstem=lib/64\n        case \"$host_cpu\" in\n          sparc*)        acl_libdirstem2=lib/sparcv9 ;;\n          i*86 | x86_64) acl_libdirstem2=lib/amd64 ;;\n        esac\n      fi\n      ;;\n    *)\n      searchpath=`(LC_ALL=C $CC -print-search-dirs) 2>/dev/null | sed -n -e 's,^libraries: ,,p' | sed -e 's,^=,,'`\n      if test -n \"$searchpath\"; then\n        acl_save_IFS=\"${IFS= \t}\"; IFS=\":\"\n        for searchdir in $searchpath; do\n          if test -d \"$searchdir\"; then\n            case \"$searchdir\" in\n              */lib64/ | */lib64 ) acl_libdirstem=lib64 ;;\n              */../ | */.. )\n                # Better ignore directories of this form. They are misleading.\n                ;;\n              *) searchdir=`cd \"$searchdir\" && pwd`\n                 case \"$searchdir\" in\n                   */lib64 ) acl_libdirstem=lib64 ;;\n                 esac ;;\n            esac\n          fi\n        done\n        IFS=\"$acl_save_IFS\"\n      fi\n      ;;\n  esac\n  test -n \"$acl_libdirstem2\" || acl_libdirstem2=\"$acl_libdirstem\"\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tools/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/NEWS.1": "\t\t\t\tDear Emacs, please make this -*-Text-*- mode!\n\n\tThis file covers NEWS for the 1.x series\n\tSee 'NEWS.2' for subsequent changes.\n\n\t**************************************************\n\t*\t\t\t\t\t\t *\n\t*\t       1.9 SERIES NEWS\t\t\t *\n\t*\t\t\t\t\t\t *\n\t**************************************************\n\n\n\t\tCHANGES IN R VERSION 1.9.1 Patched\n\n\nINSTALLATION ISSUES\n\n    o\tInstallation will now work even in Norwegian and Danish locales\n\twhich sort AA at the end (for package stats4 which has AAA.R).\n\n\nBUG FIXES\n\n    o\tVarious memory leaks have been plugged and uses of strcpy()\n\twith overlapping src and dest corrected.\n\n    o\tR CMD INSTALL now also works for /bin/sh's such as the one from\n\tSolaris 8 which fail when a function has the same name as a variable.\n\n    o\tThe Date method for trunc() failed.\n\n    o\twindow() failed if both start and end were outside the time\n\trange of the original series (possible if extend = TRUE).\n\n    o\tcoplot(..) doesn't give an extraneous warning anymore when called\n\ton a fresh device.\n\n    o\thasArg() used wrong logic to get the parent function. (sys.function()\n\tbehaves differently from what is documented.)\n\n    o\tprompt(f) now gives proper \\usage{..} for\n\tf <- function(x, g = function(u) { v <- u^2 ; sin(v)/v }) { g(x) }\n\n    o\tpackage.skeleton() now uses the supplied name in the DESCRIPTION\n\tfile.\n\n    o\toptions(list('digits', 'scipen')) no longer seg.faults, the\n\tproblem being the misuse of a list (PR#7078).\n\n    o\tsummary.Date() now has a more sensible default for 'digits'.\n\n    o\tlist.files(all.files = TRUE, recursive = TRUE) died on infinite\n\trecursion. (PR#7100)\n\n    o\tcor(as.array(c(a=1,b=2)), cbind(1:2)) no longer seg.faults (PR#7116).\n\tcor(), cov() and var() no longer accidentally work with list()\n\targuments as if they were unlist()ed.\n\n    o\tas.matrix(data.frame(d=as.POSIXct(\"2004-07-20\"))) doesn't give a\n\twrong warning anymore.\n\n    o\tgsub(perl=TRUE) code got the R length of return strings wrong\n\tin some circumstances (when the string was shortened).\n\t(Fixed also PR#7108)\n\n    o\tsummaryRprof() was ignoring functions whose name begins with dot,\n\te.g. .C, .Call, .Fortran. (PR#7137)\n\n    o\tloglin() could segfault if 'start' was of the wrong length.  (PR#7123)\n\n    o\tmodel.tables(type=\"means\") could fail in a design where a\n\tprojection gave all zeros. (PR#7132)\n\n    o\tApplying attributes() to a pairlist, e.g. .Options, could segfault.\n\n    o\tThe checking of R versions incorrectly assumed 1.9.1 >= 1.50.\n\n    o\tstr(Surv(..)) failed for  type = \"counting\"  Surv objects and for\n\tpromises.\n\n    o\tapprox(c(1,2),c(NA,NA),1.5,rule=2) does not segfault anymore\n\t(PR#7177), but gives an error.\n\n    o\tnls(model = TRUE) was broken.\n\n    o\tSubsetted assignments of the form A[i1, i2, i3] <- B stopped as\n\tsoon as an NA was encountered in an index so subsequent non-NA\n\tindices were ignored.  (PR#7210)\n\n    o\tFixed bug in handling of lwd=NA in contour().\n    \n    o\tis.na() was returning undefined results on nested lists.\n\n\n\n\n\t\tCHANGES IN R VERSION 1.9.1\n\n\nNEW FEATURES\n\n    o\tas.Date() now has a method for \"POSIXlt\" objects.\n\n    o\tmean() has a method for \"difftime\" objects and so summary()\n\tworks for such objects.\n\n    o\tlegend() has a new argument 'pt.cex'.\n\n    o\tplot.ts() has more arguments, particularly 'yax.flip'.\n\n    o\theatmap() has a new 'keep.dendro' argument.\n\n    o\tThe default barplot method now handles vectors and 1-d arrays\n\t(e.g., obtained by table()) the same, and uses grey instead of\n\theat color palettes in these cases.  (Also fixes PR#6776.)\n\n    o\tnls() now looks for variables and functions in its formula in\n\tthe environment of the formula before the search path, in the\n\tsame way lm() etc look for variables in their formulae.\n\n\nINSTALLATION ISSUES\n\n    o\tsrc/modules/X11/dataentry.c would not build on some XFree\n\t4.4.0 systems.\t(This is a bug in their header files but we have\n\tadded a workaround.)\n\n    o\tBuilding with gcc/g77 3.4.0 on ix86 platforms failed to produce\n\ta working build: the critical LAPACK routines are now compiled\n\twith -ffloat-store.\n\n    o\tAdded patches to enable 64-bit builds on AIX 5.1: see the R-admin\n\tmanual for details.\n\n    o\tAdded some patches to allow non-IEEE-754 installations to work\n\treasonably well.  (Infs and NAs are still not handled properly\n\tin complex arithmetic and functions such as sin().  See also\n\tDeprecated, as support for non-IEEE-754 installations is about\n\tto be removed.)\n\n    o\tInstallation will now work in Estonian (et_EE*) locales, which\n\tsort z before u.  (PR#6958)\n\n\nDEPRECATED & DEFUNCT\n\n    o\tSupport for non-IEEE-754 arithmetic (which has been untested\n\tfor some time) will be removed in the next full release.\n\n    o\tDirect use of R INSTALL|REMOVE|BATCH|COMPILE|SHLIB is\n\tdeprecated: use R CMD instead.\n\n    o\tThe gnome/GNOME graphics device is deprecated and will be\n\tremoved in the next full release.\n\n\nBUG FIXES\n\n    o\tpbinom(q, N, prob) is now more accurate when prob is close to 0.\n\t(PR#6757)\n\n    o\tpcauchy(x, .., log.p) is now more accurate for large x,\n\tparticularly when log.p = TRUE.\t(PR#6756)\n\n    o\tpgeom(q, prob, lower.tail, log.p) is now (sometimes much) more\n\taccurate when prob is very small. (PR#6792)\n\n\tThe code for pgeom(prob=1) assumed IEEE 754 arithmetic, and\n\tgave NaNs under gcc 3.4.0 -fPIC, for example.\n\n    o\tmakeARIMA() was not handling an ARMA(0, 0) model correctly.\n\n    o\tas.Date() was failing on factors.  (PR#6779)\n\n    o\tmin(), max() and range() were failing on \"difftime\" objects.\n\n    o\tas.data.frame.list() could fail on some unusual list names.\n\t(PR#6782)\n\n    o\ttype.convert() ignored na.strings when no conversion was done.\n\t(PR#6781, not needed for its primary use in read.table.)\n\n    o\tFixed a clipping problem in the quartz() device.\n\n    o\tSubsetting a factor swapped the order of the attributes, which\n\tidentical() cares about.  (PR#6799)\n\n    o\tThe L-BFGS-B option of optim() apparently needs part of its\n\tworkspace zeroed.  (PR#6720)\n\n    o\textractAIC.survreg() needed updating.\n\n    o\tWhen using the header Rmath.h in standalone mode, the case where\n\tTRUE, FALSE are already defined is now handled correctly.\n\n    o\tPackage utils now exports several functions that are needed for\n\twriting Sweave drivers.\n\n    o\tComparison of two lists/expressions was giving nonsensical\n\t(and often random) answers, and is now an error.\n\n    o\tThe C-level function ncols was returning a random answer\n\t(often 0) for a 1D array.  This caused model.matrix to\n\tmisbehave (perhaps segfault) if a term was a 1D array.\t(PR#6838)\n\n    o\tThe configure script now finds the pdf viewers ggv and gpdf.\n\n    o\tWorkaround for the problems strptime on MacOS X has with dates\n\tbefore 1900.\n\n    o\t'R CMD build' works in a directory whose path contains spaces.\n\t(PR#6830 under Unix/Linux: it already worked under Windows.)\n\tAlso 'R CMD check'.\n\n    o\tmosaicplot() stops cleanly if given a table containing missing values.\n\n    o\tinstall.packages() from a local CRAN was broken.\n\n    o\tbxp() fixed for e.g.,  boxplot(..., border=2:4)\n\n    o\tapprox(list(x=rep(NaN,9), y=1:9), xout=NaN) does not seg.fault\n\tanymore (PR#6809).\n\n    o\tplot(1, pch=NA) does not give an error anymore and\n\tplot(1:2, pch=c(\"o\",NA)) only prints one symbol\t (PR#6876).\n\n    o\tdiffinv(matrix(3, 7,0)) now works.\n\n    o\tplot.ts(z) for multivariate 'z' now properly draws all 'nc' xlab`s\n\twhen nc > 1 and obeys 'ann=FALSE' or 'axes=FALSE'.\n\n    o\taggregate(.data.frame) failed if the answer would have had one\n\trow.\n\n    o\trecordPlot() and replayPlot() failed to duplicate the display\n\tlist, so further plotting altered the saved or replayed object.\n\n    o\tAssignments of the form adf[i,j] <- value now accept a\n\tdata-frame value as well as a list value.\n\n    o\tdir.create() sometimes erroneously continued to report a directory\n\talready existed after the first instance.  (PR#6892)\n\n    o\tarima.sim() allows a null model.\n\n    o\twhich.min() & which.max()'s C code now PROTECT()'s its result.\n\n    o\tBuilding standalone nmath did not support some of the DEBUG options.\n\n    o\tmle() got confused if start value list was not in same order as\n\targuments of likelihood function (reported by Ben Bolker)\n\n    o\tbacksolve(r, x, k) now allows k < nrow(x) - as its documentation\n\talways claimed.\n\n    o\tupdate.packages(\"mgcv\") and old.packages(*) now give a better error\n\tmessage; and installed.packages(\"mgcv\") properly returns <empty>.\n\n    o\tstats:::as.dendrogram.hclust() is documented and no longer re-sorts\n\tthe two children at each node.\tThis fixes as.dendrogram(hh) for\n\tthe case where hh is a \"reordered\" hclust object.\n\n\tplot.dendrogram(x) now draws leaves 'x' more sensibly.\n\n\treorder.dendrogram() now results in a dendrogram with correct\n\t\"midpoint\"s, and hence reordered dendrograms are plotted correctly.\n\n\tstats:::midcache.dendrogram() and hence the reorder() and rev()\n\tdendrogram methods do not return bloated dendrograms.\n\n    o\theatmap(*, labRow=., labCol=.) now also reorders the labels when\n\tspecified---not only when using default labels.\n\n    o\tCopying lattice (grid) output to another device now works again\n\t(There were intermittent problems in 1.9.0 - PR#6915, #6947/8.)\n\n    o\thist() uses a more robust choice of its 'diddle' factor, used\n\tto detect if an observation is on a bin boundary.  (PR#6931)\n\n    o\tjitter(x) now returns x when length(x) == 0.\n\n    o\tUnder some rare circumstances the locale-specific tables used by\n\tthe perl=TRUE option to grep() etc were being corrupted and so\n\tmatches were missed.\n\n    o\tqbinom(*, prob = 0, lower.tail = FALSE) now properly gives 0.\n\t(PR#6972)\n\n    o\tClass \"octmode\" needed a \"[\" method to preserve the class: see\n\texample(file.info) for an example.\n\n\n\n\t\tCHANGES IN R VERSION 1.9.0\n\n\nUSER-VISIBLE CHANGES\n\n    o\tUnderscore '_' is now allowed in syntactically valid names, and\n\tmake.names() no longer changes underscores.  Very old code\n\tthat makes use of underscore for assignment may now give\n\tconfusing error messages.\n\n    o\tPackage 'base' has been split into packages 'base', 'graphics',\n\t'stats' and 'utils'.  All four are loaded in a default\n\tinstallation, but the separation allows a 'lean and mean'\n\tversion of R to be used for tasks such as building indices.\n\n\tPackages ctest, eda, modreg, mva, nls, stepfun and ts have been\n\tmerged into stats, and lqs has been returned to MASS.  In all\n\tcases a stub has been left that will issue a warning and ensure\n\tthat the appropriate new home is loaded.  All the time series\n\tdatasets have been moved to package stats.  Sweave has been\n\tmoved to utils.\n\n\tPackage mle has been moved to stats4 which will become the\n\tcentral place for statistical S4 classes and methods\n\tdistributed with base R.  Package mle remains as a stub.\n\n\tUsers may notice that code in .Rprofile is run with only the\n\tnew base loaded and so functions may now not be found.\tFor\n\texample, ps.options(horizontal = TRUE) should be preceded by\n\tlibrary(graphics) or called as graphics::ps.options or,\n\tbetter, set as a hook -- see ?setHook.\n\n    o\tThere has been a concerted effort to speed up the startup of\n\tan R session: it now takes about 2/3rds of the time of 1.8.1.\n\n    o\tA warning is issued at startup in a UTF-8 locale, as currently R\n\tonly supports single-byte encodings.\n\n\nNEW FEATURES\n\n    o\t$, $<-, [[, [[<- can be applied to environments. Only character\n\targuments are allowed and no partial matching is done.\tThe\n\tsemantics are basically that of get/assign to the environment with\n\tinherits=FALSE.\n\n    o\tThere are now print() and [ methods for \"acf\" objects.\n\n    o\taov() will now handle singular Error() models, with a warning.\n\n    o\tarima() allows models with no free parameters to be fitted (to\n\tfind log-likelihood and AIC values, thanks to Rob Hyndman).\n\n    o\tarray() and matrix() now allow 0-length `data' arguments for\n\tcompatibility with S.\n\n    o\tas.data.frame() now has a method for arrays.\n\n    o\tas.matrix.data.frame() now coerces an all-logical data frame\n\tto a logical matrix.\n\n    o\tNew function assignInNamespace() parallelling fixInNamespace.\n\n    o\tThere is a new function contourLines() to produce contour\n\tlines (but not draw anything).\tThis makes the CRAN package\n\tclines (with its clines() function) redundant.\n\n    o\tD(), deriv(), etc now also differentiate asin(), acos(), atan(),\n\t(thanks to a contribution of Kasper Kristensen).\n\n    o\tThe `package' argument to data() is no longer allowed to be a\n\t(unquoted) name and so can be a variable name or a quoted\n\tcharacter string.\n\n    o\tThere is a new class \"Date\" to represent dates (without times)\n\tplus many utility functions similar to those for date-times.\n\tSee ?Date.\n\n    o\tDeparsing (including using dump() and dput()) an integer\n\tvector now wraps it in as.integer() so it will be source()d\n\tcorrectly.  (Related to PR#4361.)\n\n    o\t.Deprecated() has a new argument `package' which is used in\n\tthe warning message for non-base packages.\n\n    o\tThe print() method for \"difftime\" objects now handles arrays.\n\n    o\tdir.create() is now an internal function (rather than a call to\n\tmkdir) on Unix as well as on Windows.  There is now an option\n\tto suppress warnings from mkdir, which may or may not have\n\tbeen wanted.\n\n    o\tdist() has a new method to calculate Minkowski distances.\n\n    o\texpand.grid() returns appropriate array dimensions and dimnames\n\tin the attribute \"out.attrs\", and this is used by the\n\tpredict() method for loess to return a suitable array.\n\n    o\tfactanal(), loess() and princomp() now explicitly check for\n\tnumerical inputs; they might have silently coded factor\n\tvariables in formulae.\n\n    o\tNew functions factorial(x) defined as gamma(x+1) and for\n\tS-PLUS compatibility, lfactorial(x) defined as lgamma(x+1).\n\n    o\tfindInterval(x, v) now allows +/-Inf values, and NAs in x.\n\n    o\tformula.default() now looks for a \"terms\" component before a\n\t'formula' argument in the saved call: the component will have\n\t`.' expanded and probably will have the original environment\n\tset as its environment.\t And what it does is now documented.\n\n    o\tglm() arguments `etastart' and `mustart' are now evaluated via\n\tthe model frame in the same way as `subset' and `weights'.\n\n    o\tFunctions grep(), regexpr(), sub() and gsub() now coerce their\n\targuments to character, rather than give an error.\n\n\tThe perl=TRUE argument now uses character tables prepared for\n\tthe locale currently in use each time it is used, rather than\n\tthose of the C locale.\n\n    o\tNew functions head() and tail() in package `utils'.\n\t(Based on a contribution by Patrick Burns.)\n\n    o\tlegend() has a new argument 'text.col'.\n\n    o\tmethods(class=) now checks for a matching generic, and so no\n\tlonger returns methods for non-visible generics (and\n\teliminates various mismatches).\n\n    o\tA new function mget() will retrieve multiple values from an\n\tenvironment.\n\n    o\tmodel.frame() methods, for example those for \"lm\" and \"glm\",\n\tpass relevant parts of ... onto the default method.  (This has\n\tlong been documented but not done.)  The default method is now\n\table to cope with model classes such as \"lqs\" and \"ppr\".\n\n    o\tnls() and ppr() have a `model' argument to allow the model frame\n\tto be returned as part of the fitted object.\n\n    o\t\"POSIXct\" objects can now have a \"tzone\" attribute that\n\tdetermines how they will be converted and printed.  This means\n\tthat date-time objects which have a timezone specified will\n\tgenerally be regarded as in their original time zone.\n\n    o\tpostscript() device output has been modified to work around\n\trounding errors in low-precision calculations in gs >= 8.11.\n\t(PR#5285, which is not a bug in R.)\n\n\tIt is now documented how to use other Computer Modern fonts,\n\tfor example italic rather than slanted.\n\n    o\tppr() now fully supports categorical explanatory variables,\n\n\tppr() is now interruptible at suitable places in the\n\tunderlying FORTRAN code.\n\n    o\tprincomp() now warns if both `x' and `covmat' are supplied,\n\tand returns scores only if the centring used is known.\n\n    o\tpsigamma(x, deriv=0), a new function generalizes, digamma() etc.\n\tAll these (psigamma, digamma, trigamma,...) now also work for  x < 0.\n\n    o\tpchisq(*, ncp > 0) and hence qchisq() now work with much higher\n\tvalues of ncp; it has become much more accurate in the left tail.\n\n    o\tread.table() now allows embedded newlines in quoted fields. (PR#4555)\n\n    o\trep.default(0-length-vector, length.out=n) now gives a vector\n\tof length n and not length 0, for compatibility with S.\n\n\tIf both `each' and `length.out' have been specified, it now\n\trecycles rather than fills with NAs for S compatibility.\n\n\tIf both `times' and `length.out' have been specified, `times'\n\tis now ignored for S compatibility.  (Previously padding with\n\tNAs was used.)\n\n\tThe \"POSIXct\" and \"POSIXlt\" methods for rep() now pass ... on\n\tto the default method (as expected by PR#5818).\n\n    o\trgb2hsv() is new, an R interface the C API function with the same name.\n\n    o\tUser hooks can be set for onLoad, library, detach and\n\tonUnload of packages/namespaces: see ?setHook.\n\n    o\tsave() default arguments can now be set using option\n\t\"save.defaults\", which is also used by save.image() if option\n\t\"save.image.defaults\" is not present.\n\n    o\tNew function shQuote() to quote strings to be passed to OS shells.\n\n    o\tsink() now has a split= argument to direct output to both the\n\tsink and the current output connection.\n\n    o\tsplit.screen() now works for multiple devices at once.\n\n    o\tOn some OSes (including Windows and those using glibc)\n\tstrptime() did not validate dates correctly, so we have added\n\textra code to do so.  However, this cannot correct scanning\n\terrors in the OS's strptime (although we have been able to\n\twork around these on Windows).\tSome examples are now tested for\n\tduring configuration.\n\n    o\tstrsplit() now has `fixed' and `perl' arguments and\n\tsplit=\"\" is optimized.\n\n    o\tsubset() now allows a `drop' argument which is passed on to\n\tthe indexing method for data frames.\n\n    o\ttermplot() has an option to smooth the partial residuals.\n\n    o\tvarimax() and promax() add class \"loadings\" to their loadings\n\tcomponent.\n\n\n    o\tModel fits now add a \"dataClasses\" attribute to the terms, which\n\tcan be used to check that the variables supplied for\n\tprediction are of the same type as those used for fitting.\n\t(It is currently used by predict() methods for classes \"lm\",\n\t\"mlm\", \"glm\" and \"ppr\", as well as methods in packages MASS,\n\trpart and tree.)\n\n    o\tNew command-line argument --max-ppsize allows the size of the\n\tpointer protection stack to be set higher than the previous\n\tlimit of 10000.\n\n    o\tThe fonts on an X11() device (also jpeg() and png() on Unix)\n\tcan be specified by a new argument `fonts' defaulting to the\n\tvalue of a new option \"X11fonts\".\n\n    o\tNew functions in the tools package: pkgDepends, getDepList and\n\tinstallFoundDepends.  These provide functionality for assessing\n\tdependencies and the availability of them (either locally or\n\tfrom on-line repositories).\n\n    o\tThe parsed contents of a NAMESPACE file are now stored at\n\tinstallation and if available used to speed loading the\n\tpackage, so packages with namespaces should be reinstalled.\n\n    o\tArgument `asp' although not a graphics parameter is accepted\n\tin the ... of graphics functions without a warning.  It now\n\tworks as expected in contour().\n\n    o\tPackage stats4 exports S4 generics for AIC() and BIC().\n\n    o\tThe Mac OS X version now produces an R framework for easier linking\n\tof R into other programs.  As a result, R.app is now relocatable.\n\n    o\tAdded experimental support for conditionals in NAMESPACE files.\n\n    o\tAdded as.list.environment to coerce environments to lists\n\t(efficiently).\n\n    o\tNew function addmargins() in the stats package to add marginal\n\tsummaries to tables, e.g. row and column totals.  (Based on a\n\tcontribution by Bendix Carstensen.)\n\n    o\tdendrogam edge and node labels can now be expressions (to be\n\tplotted via stats:::plotNode called from plot.dendrogram).\n\tThe diamond frames around edge labels are more nicely scaled\n\thorizontally.\n\n    o\tMethods defined in the methods package can now include\n\tdefault expressions for arguments.  If these arguments are\n\tmissing in the call, the defaults in the selected method will\n\toverride a default in the generic.  See ?setMethod.\n\n    o\tChanges to package 'grid':\n\n\t- Renamed push/pop.viewport() to push/popViewport().\n\n\t- Added upViewport(), downViewport(), and seekViewport() to\n\t  allow creation and navigation of viewport tree\n\t  (rather than just viewport stack).\n\n\t- Added id and id.lengths arguments to grid.polygon() to allow\n\t  multiple polygons within single grid.polygon() call.\n\n\t- Added vpList(), vpStack(), vpTree(), and current.vpTree()\n\t  to allow creation of viewport \"bundles\" that may be pushed\n\t  at once (lists are pushed in parallel, stacks in series).\n\n\t  current.vpTree() returns the current viewport tree.\n\n\t- Added vpPath() to allow specification of viewport path\n\t  in downViewport() and seekViewport().\n\n\t  See ?viewports for an example of its use.\n\n\t  NOTE: it is also possible to specify a path directly,\n\t  e.g., something like \"vp1::vp2\", but this is only\n\t  advised for interactive use (in case I decide to change the\n\t  separator :: in later versions).\n\n\t- Added \"just\" argument to grid.layout() to allow justification\n\t  of layout relative to parent viewport *IF* the layout is not\n\t  the same size as the viewport.  There's an example in\n\t  help(grid.layout).\n\n\t- Allowed the \"vp\" slot in a grob to be a viewport name or a\n\t  vpPath.  The interpretation of these new alternatives is to\n\t  call downViewport() with the name or vpPath before drawing the\n\t  grob and upViewport() the appropriate amount after drawing the\n\t  grob.\t Here's an example of the possible usage:\n\n\t      pushViewport(viewport(w=.5, h=.5, name=\"A\"))\n\t      grid.rect()\n\t      pushViewport(viewport(w=.5, h=.5, name=\"B\"))\n\t      grid.rect(gp=gpar(col=\"grey\"))\n\t      upViewport(2)\n\t      grid.rect(vp=\"A\", gp=gpar(fill=\"red\"))\n\t      grid.rect(vp=vpPath(\"A\", \"B\"), gp=gpar(fill=\"blue\"))\n\n\t- Added engine.display.list() function.\t This allows the user to\n\t  tell grid NOT to use the graphics engine display list and to handle\n\t  ALL redraws using its own display list (including redraws after\n\t  device resizes and copies).\n\n\t  This provides a way to avoid some of the problems with resizing\n\t  a device when you have used grid.convert(), or the gridBase package,\n\t  or even base functions such as legend().\n\n\t  There is a document discussing the use of display lists in grid\n\t  on the grid web site\n\t  (http://www.stat.auckland.ac.nz/~paul/grid/grid.html)\n\n\t- Changed the implementation of grob objects.  They are no longer\n\t  implemented as external references.  They are now regular R objects\n\t  which copy-by-value.\tThis means that they can be saved/loaded\n\t  like normal R objects.  In order to retain some existing grob\n\t  behaviour, the following changes were necessary:\n\n\t  + grobs all now have a \"name\" slot.  The grob name is used to\n\t    uniquely identify a \"drawn\" grob (i.e., a grob on the display\n\t    list).\n\t  + grid.edit() and grid.pack() now take a grob name as the first\n\t    argument instead of a grob.\t (Actually, they take a gPath -\n\t    see below)\n\t  + the \"grobwidth\" and \"grobheight\" units take either a grob\n\t    OR a grob name (actually a gPath - see below).  Only in the\n\t    latter case will the unit be updated if the grob \"pointed to\"\n\t    is modified.\n\n\t  In addition, the following features are now possible with grobs:\n\n\t  + grobs now save()/load() like any normal R object.\n\t  + many grid.*() functions now have a *Grob() counterpart.  The\n\t    grid.*() version is used for its side-effect of drawing\n\t    something or modifying something which has been drawn;  the\n\t    *Grob() version is used for its return value, which is a grob.\n\t    This makes it more convenient to just work with grob\n\t    objects without producing any graphical output\n\t    (by using the *Grob() functions).\n\t  + there is a gTree object (derived from grob), which is a grob\n\t    that can have children.  A gTree also has a \"childrenvp\" slot\n\t    which is a viewport which is pushed and then \"up\"ed before the\n\t    children are drawn;\t this allows the children of a gTree to\n\t    place themselves somewhere in the viewports specified in the\n\t    childrenvp by having a vpPath in their vp slot.\n\t  + there is a gPath object, which is essentially a concatenation\n\t    of grob names.  This is used to specify the child of\n\t    (a child of ...) a gTree.\n\t  + there is a new API for creating/accessing/modifying grob objects:\n\t    grid.add(), grid.remove(), grid.edit(), grid.get() (and their\n\t    *Grob() counterparts can be used to add, remove, edit, or extract\n\t    a grob or the child of a gTree.  NOTE: the new grid.edit() API\n\t    is incompatible with the previous version.\n\n\t- Added stringWidth(), stringHeight(), grobWidth(), and grobHeight()\n\t  convenience functions (they produce \"strwidth\", \"strheight\",\n\t  \"grobwidth\", and \"grobheight\" unit objects, respectively).\n\n\t- Allowed viewports to turn off clipping altogether.\n\t  Possible settings for viewport clip arg are now:\n\n\t    \"on\"      = clip to the viewport (was TRUE)\n\t    \"inherit\" = clip to whatever parent says (was FALSE)\n\t    \"off\"     = turn off clipping\n\n\t  Still accept logical values (and NA maps to \"off\")\n\n\nUTILITIES\n\n    o\tR CMD check  now runs the (Rd) examples with default RNGkind\n\t(uniform & normal) and set.seed(1).\n\texample(*, setRNG = TRUE) does the same.\n\n    o\tundoc() in package `tools' has a new default of `use.values =\n\tNULL' which produces a warning whenever the default values of\n\tfunction arguments differ between documentation and code.\n\tNote that this affects \"R CMD check\" as well.\n\n    o\tTesting examples via massage-examples.pl (as used by R CMD\n\tcheck) now restores the search path after every help file.\n\n    o\tcheckS3methods() in package 'tools' now also looks for generics\n\tin the loaded namespaces/packages listed in the Depends fields\n\tof the package's DESCRIPTION file when testing an installed\n\tpackage.\n\n    o\tThe DESCRIPTION file of packages may contain a 'Suggests:'\n\tfield for packages that are only used in examples or\n\tvignettes.\n\n    o\tAdded an option to package.dependencies() to handle the\n\t'Suggests' levels of dependencies.\n\n    o\tVignette dependencies can now be checked and obtained via\n\tvignetteDepends.\n\n    o\tOption 'repositories' to list URLs for package repositories\n\tadded.\n\n    o\tpackage.description() has been replaced by packageDescription().\n\n    o\tR CMD INSTALL/build now skip Subversion's .svn directories as\n\twell as CVS directories.\n\n\nC-LEVEL FACILITIES\n\n    o\tarraySubscript and vectorSubscript take a new argument which\n\tis a function pointer that provides access to character\n\tstrings (such as the names vector) rather than assuming these\n\tare passed in.\n\n    o\tR_CheckUserInterrupt is now described in `Writing R Extensions'\n\tand there is a new equivalent subroutine rchkusr for calling\n\tfrom FORTRAN code.\n\n    o\thsv2rgb and rgb2hsv are newly in the C API.\n\n    o\tSalloc and Srealloc are provided in S.h as wrappers for S_alloc\n\tand S_realloc, since current S versions use these forms.\n\n    o\tThe type used for vector lengths is now R_len_t rather than\n\tint, to allow for a future change.\n\n    o\tThe internal header nmath/dpq.h has slightly improved macros\n\tR_DT_val() and R_DT_Cval(), a new R_D_LExp() and improved\n\tR_DT_log() and R_DT_Clog();  this improves accuracy in several\n\t[dpq]-functions {for \"extreme\" arguments}.\n\n\nDEPRECATED & DEFUNCT\n\n    o\tprint.coefmat() is defunct, replaced by printCoefmat().\n\n    o\tcodes() and codes<-() are defunct.\n\n    o\tanovalist.lm (replaced in 1.2.0) is now defunct.\n\n    o\tglm.fit.null(), lm.fit.null() and lm.wfit.null() are defunct.\n\n    o\tprint.atomic() is defunct.\n\n    o\tThe command-line arguments --nsize and --vsize are no longer\n\trecognized as synonyms for --min-nsize and --min-vsize (which\n\treplaced them in 1.2.0).\n\n    o\tUnnecessary methods coef.{g}lm and fitted.{g}lm have been\n\tremoved: they were each identical to the default method.\n\n    o\tLa.eigen() is deprecated now eigen() uses LAPACK by default.\n\n    o\ttetragamma() and pentagamma() are deprecated, since they are\n\tequivalent to psigamma(, deriv=2) and psigamma(, deriv=3).\n\n    o\tLTRUE/LFALSE in Rmath.h have been removed: they were\n\tdeprecated in 1.2.0.\n\n    o\tpackage.contents() and package.description() have been deprecated.\n\n\nINSTALLATION CHANGES\n\n    o\tThe defaults for configure are now --without-zlib\n\t--without-bzlib --without-pcre.\n\n\tThe included PCRE sources have been updated to version 4.5 and\n\tPCRE >= 4.0 is now required if --with-pcre is used.\n\n\tThe included zlib sources have been updated to 1.2.1, and this\n\tis now required if --with-zlib is used.\n\n    o\tconfigure no longer lists bzip2 and PCRE as `additional\n\tcapabilities' as all builds of R have had them since 1.7.0.\n\n    o\t--with-blas=goto to use K. Goto's optimized BLAS will now work.\n\n\nBUG FIXES\n\n    o\tWhen lm.{w}fit() disregarded arguments in ... they reported\n\tthe values and not the names.\n\n    o\tlm(singular.ok = FALSE) was looking for 0 rank, not rank < p.\n\n    o\tThe substitution code for strptime in the sources no longer\n\tfollows glibc in silently `correcting' invalid inputs.\n\n    o\tThe cor() function did not remove missing values in the\n\tnon-Pearson case.\n\n    o\t[l]choose() use a more accurate formula which also slightly\n\timproves p- and qhyper(); choose(n, k) now returns 0 instead\n\tof NaN for k < 0 or > n.\n\n    o\tfind(simple.words=TRUE) (the default) was still using regular\n\texpressions for e.g. \"+\" and \"*\".  Also, it checked the mode\n\tonly of the first object matching a regular expression found\n\tin a package.\n\n    o\tMemory leaks in [dpq]wilcox and [dqr]signrank have been plugged.\n\tThese only occurred when multiple values of m or n > 50 were\n\tused in a single call. (PR#5314, plus another potential leak.)\n\n    o\tNon-finite input values to eigen(), La.eigen(), svd() and\n\tLa.svd() are now errors: they often caused infinite\n\tlooping.  (PR#5406, PR#4366, PR#3723: the fix for 3723/4366\n\treturned a vector of NAs, not a matrix, for the eigenvectors.)\n\n    o\tstepfun(x,y) now gives an error when `x' has length 0 instead\n\tof an invalid result (that could lead to a segmentation\n\tfault).\n\n    o\tbuildVignettes() uses file.remove() instead of unlink() to\n\tremove temporary files.\n\n    o\tmethods(class = \"lqs\") does not produce extraneous entries anymore.\n\n    o\tDirectly calling a method that uses NextMethod() no longer\n\tproduces the erroneous error message 'function is not a\n\tclosure'.\n\n    o\tchisq.test(x, simulate.p.value = TRUE) could hang in an infinite\n\tloop or segfault, as r2dtable() did, when the entries in x where\n\tlarge. (PR#5701)\n\n    o\tfisher.test(x) could give a P-value of 'Inf' in similar cases which\n\tnow result in an error (PR#4688).  It silently truncated\n\tnon-integer 'x' instead of rounding.\n\n    o\tcutree(a, h=h) silently gave wrong results when 'a' was an\n\tagnes object; now gives an error and reminds of as.hclust().\n\n    o\tpostscript() could crash if given a font value outside the\n\tvalid range 1...5.\n\n    o\tqchisq(1-e, .., ncp=.) did not terminate for small e.\n\t(PR#6421 (PR#875))\n\n    o\tcontrasts() turns a logical variable into a factor.  This now\n\talways has levels c(\"FALSE\", \"TRUE\") even if only one (or\n\tnone) of these occur in the variable.\n\n    o\tmodel.frame()'s lm and glm methods had 'data' and 'na.action'\n\targuments which they ignored and have been removed.\n\n    o\tThe defaults data=list() in lm() and glm() could never be\n\tused and have been removed.  glm had na.action=na.fail, again\n\tnever used.\n\n    o\tThe internal tools function for listing all internal S3 generics\n\twas omitting all the members of the S3 group generics, which\n\talso accept methods for members.\n\n    o\tSome BLASes were returning NA %*% 0 as 0 and some as NA.  Now\n\tslower but more careful code is used if NAs are present. (PR#4582)\n\n    o\tpackage.skeleton() no longer generates invalid filenames for\n\tcode and help files.  Also, care is taken not to generate\n\tfilenames that differ only by case.\n\n    o\tpairs() now respects axis graphical parameters such as\n\tcex.main, font.main and las.\n\n    o\tSaving images of packages with namespaces (such as mle) was\n\tnot compressing the image.\n\n    o\tWhen formula.default() returned a terms object, it returned a\n\tresult of class c(\"terms\", \"formula\") with different\n\tsubsetting rules from an object of class \"formula\".\n\n    o\tThe standalone Rmath library did not build correctly on systems\n\twith inaccurate log1p.\n\n    o\tSpecifying asp is now respected in calls like plot(1, 10, asp=1)\n\twith zero range on both axes.\n\n    o\touter() called rep() with an argument the generic does not\n\thave, and discarded the class of the answer.\n\n    o\tobject.size() now returns a real (not integer) answer and so\n\tcan cope with objects occupying more than 2Gb.\n\n    o\tLookups base:: and ::: were not confining their search to the\n\tnamed package/namespace.\n\n    o\tqbinom() was returning NaN for prob = 0 or 1 or size = 0 even\n\tthough the result is well-defined.  (In part, PR#5900.)\n\n    o\tpar(mgp)[2] was being interpreted as relative to par(mgp)[3].\n\t(PR#6045)\n\n    o\tVersioned install was broken both with and without namespaces:\n\tno R code was loaded.\n\n    o\tmethods(), getS3method() and the registration of S3 methods in\n\tnamespaces were broken if the S3 generic was converted into an\n\tS4 generic by setting an S4 method.\n\n    o\tTitle and copyright holder of the reference manual are now in\n\tsync with the citation() command.\n\n    o\tThe validation code for POSIXlt dates and hence\n\tseq(, by=\"DSTdays\") now works for large mday values (not\n\tjust those in -1000...1000).  (PR#6212)\n\n    o\tThe print() method for data frames now copes with data frames\n\tcontaining arrays (other than matrices).\n\n    o\ttexi2dvi() and buildVignettes() use clean=FALSE as default\n\tbecause the option is not supported on some Solaris\n\tmachines. For buildVignettes() this makes no difference as it\n\tuses an internal cleanup mechanism.\n\n    o\tThe biplot() method for \"prcomp\" was not registered nor exported.\n\t(PR#6425)\n\n    o\tLatex conversion of .Rd files was missing newline before\n\t\\end{Section} etc which occasionally gave problems, as fixed for\n\tsome other \\end{Foo} in 1.8.1.\t(PR#5645)\n\n    o\tWork around a glibc bug to make the %Z format usable in strftime().\n\n    o\tThe glm method for rstandard() was wrongly scaled for cases where\n\tsummary(model)$dispersion != 1.\n\n    o\tCalling princomp() with a covariance matrix (rather than a\n\tlist) failed to predict scores rather than predict NA as\n\tintended.  (PR#6452)\n\n    o\ttermplot() is more tolerant of variables not in the data= argument.\n\t(PR#6327)\n\n    o\tisoreg() could segfault on monotone input sequences.  (PR#6494)\n\n    o\tRdconv detected \\link{\\url{}} only very slowly.\t (PR#6496)\n\n    o\taov() with Error() term and no intercept incorrectly assigned\n\tterms to strata. (PR#6510)\n\n    o\tftable() incorrectly handled arguments named \"x\".  (PR#6541)\n\n    o\tvector(), matrix(), array() and their internal equivalents\n\treport correctly that the number of elements specified was too\n\tlarge (rather than reporting it as negative).\n\n    o\tMinor copy-paste error in example(names).  (PR#6594)\n\n    o\tlength<-() now works correctly on factors (and is now generic\n\twith a method for factors).\n\n    o\tx <- 2^32; x:(x+3) no longer generates an error (but gives a\n\tresult of type \"double\").\n\n    o\tpgamma(30, 100, lower=FALSE, log=TRUE) is not quite 0, now.\n\tpgamma(x, alph) now only uses a normal approximation for\n\talph > 1e5 instead of alph > 1000.  This also improves the accuracy\n\tof ppois().\n\n    o\tqgamma() now does one or more final Newton steps, increasing\n\taccuracy from around 2e-8 to 3e-16 in some cases.  (PR#2214).\n\tIt allows values p close to 1 not returning Inf, with accuracy for\n\t'lower=FALSE', and values close to 0 not returning 0 for\n\t'log=TRUE'.  These also apply to qchisq(), e.g.,\n\tqchisq(1e-13, 4, lower=FALSE) is now finite and\n\tqchisq(1e-101, 1) is positive.\n\n    o\tgamma(-n) now gives NaN for all negative integers -n.\n\n    o\tThe Unix version of browseURL() now protects the URL from the\n\tshell, for example allowing & and $ to occur in the URL.\n\n\tIt was incorrectly attempting to use -remote \"openURL()\" for\n\tunknown browsers.\n\n    o\textractAIC.coxph() works around an inconsistency in the\n\t$loglik output from coxph.  (PR#6646)\n\n    o\tstem() was running into integer overflows with nearly-constant\n\tinputs, and scaling badly for constant ones.  (Partly PR#6645)\n\n    o\tsystem() under Unix was losing the 8095th char if the output\n\twas split.  (PR#6624)\n\n    o\tplot.lm() gave incorrect results if there were zero weights.\n\t(PR#6640)\n\n    o\tBinary operators warned for inconsistent lengths on vector op\n\tvector operations, but not on vector op matrix ones.  (PR#6633\n\tand more.)\n\n\tComparison operators did not warn about inconsistent lengths\n\tfor real vectors, but did for integer, logical and character\n\tvectors.\n\n    o\tspec.pgram(x, ..., pad, fast, ...) computed the periodogram with\n\ta bias (downward) whenever 'pad > 0' (non-default) or 'fast = TRUE'\n\t(default) and nextn(n) > n where n = length(x); similarly for\n\t'df' (approximate degrees of freedom for chisq).\n\n    o\tdgamma(0, a) now gives Inf for a < 1 (instead of NaN), and\n\tso does dchisq(0, 2*a, ncp).\n\n    o\tpcauchy() is now correct in the extreme tails.\n\n    o\tfile.copy() did not check that any existing `from' file had\n\tbeen truncated before appending the new contents.\n\n    o\tThe QC files now check that their file operations succeeded.\n\n    o\treplicate() worked by making the supplied expression the\n\tbody of an anonymous function(x), leading to a variable\n\tcapture issue. Now, function(...) is used instead.\n\n    o\tchisq.test(simulate.p.value = TRUE) was returning slightly\n\tincorrect p values, notably p = 0 when the data gave the most\n\textreme value.\n\n    o\tterms.formula(simplify = TRUE) was losing offset terms.\n\tMultiple offset terms were not being removed correctly if two\n\tof them appeared first or last in the formula.\t(PR#6656)\n\n    o\tRd conversion to latex did not add a new line before\n\t\\end{Section} in more cases than were corrected in 1.8.1.\n\n    o\tsplit.default() dropped NA levels in its internal code but\n\treturned them as NA in all components in the interpreted code\n\tfor factors.  (PR#6672)\n\n    o\tpoints.formula() had problems if there was a subset argument\n\tand no data argument.  (PR#6652)\n\n    o\tas.dist() does a bit more checking of its first argument and now\n\twarns when applied to non-square matrices.\n\n    o\tmle() gives a more understandable error message when its 'start'\n\targument is not ok.\n\n    o\tAll uses of dir.create() check the return value.\n\tdownload.packages() checks that destdir exists and is a directory.\n\n    o\tMethods dispatch corrects an error that failed to find\n\tmethods for classes that extend sealed classes (class unions\n\tthat contain basic classes, e.g.).\n\n    o\tSweave no longer wraps the output of code chunks with\n\techo=false and results=tex in Schunk environments.\n\n    o\ttermplot() handles models with missing data better, especially\n\twith na.action=na.exclude.\n\n    o\t1:2 * 1e-100  now prints with correct number of spaces.\n\n    o\tNegative subscripts that were out of range or NA were not handled\n\tcorrectly.  Mixing negative and NA subscripts is now caught as\n\tan error: it was not caught on some platforms and segfaulted\n\ton others.\n\n    o\tgzfile() connections had trouble at EOF when used on uncompressed\n\tfile.\n\n    o\tThe Unix version of dataentry segfaulted if the `Copy' button\n\twas used.  (PR#6605)\n\n    o\tunlist on lists containing expressions now works (PR#5628)\n\n    o\tD(), deriv() and deriv3() now also can deal with gamma and lgamma.\n\n    o\tThe X11 module can now be built against XFree86 4.4.0 headers (still\n\twith some warnings).\n\n    o\tseq.POSIXt(from, to, by=\"DSTdays\") was shorter than expected\n\tfor rare times in the UK time zone.  (PR#4558)\n\n    o\tc/rbind() did not support vectors/matrices of mode \"list\".  (PR#6702)\n\n    o\tsummary() methods for POSIX[cl]t and Date classes coerced the\n\tnumber of NAs to a date on printing.\n\n    o\tKalmanSmooth would sometimes return NA values with NA inputs.\n\t(PR#6738)\n\n    o\tfligner.test() worked correctly only if data were already sorted\n\tby group levels. (PR#6739)\n\n\n\n\t**************************************************\n\t*\t\t\t\t\t\t *\n\t*\t       1.8 SERIES NEWS\t\t\t *\n\t*\t\t\t\t\t\t *\n\t**************************************************\n\n\n\t\tCHANGES IN R VERSION 1.8.1\n\n\nNEW FEATURES\n\n    o\tThere is now a \"Complex\" S3 group generic (a side-effect of\n\tfixing up the corresponding S4 group generic).\n\n    o\thelp(\"regex\") now gives a description of the regular expressions\n\tused in R.\n\n    o\tThe startup message now shows the R Foundation as copyright\n\tholder, and includes the R ISBN number and a pointer to the new\n\tcitation() function.\n\n    o\tThe solve() function now uses the `tol' argument for all\n\tnon-complex cases.  The default tolerance for LINPACK is 1e-7,\n\tas before.  For LAPACK it currently is .Machine$double.eps but\n\tmay be changed in later versions of R.\n\n    o\thelp.search() now defaults to agrep = FALSE when keyword= is\n\tspecified, since no one wants fuzzy matching of categories.\n\n    o\tFunction texi2dvi() in package tools can be used to compile\n\tlatex files from within R, provided the OS has a command\n\ttexi2dvi or texify.\n\n    o\tObjects with formal S4 classes saved in pre-1.8 versions and\n\tloaded into the current version have incompatible class\n\tattributes (no package information).  A new function,\n\tfixPre1.8() in package methods, will fix the class attributes.\n\tSee the help for this function.\n\n    o\theatmap() allows Rowv/Colv = NA, suppressing the corresponding\n\tdendrogram.\n\n    o\tAn \"antifeature\": Tcl 8.0 is now officially unsupported. In 1.8.0\n\tit just didn't work. This very old version lacks several features\n\tthat are needed for the new version of the tcltk package. R will\n\tstill build the tcltk package against Tcl 8.0 but the resulting\n\tpackage will not load.\n\n\nBUG FIXES\n\n    o\tsymnum(x) now behaves as documented when length(x) == 0 and uses\n\tlower.triangular = FALSE for logical arrays.\n\n    o\tc() now has a method for \"noquote\" objects and hence works as\n\texpected.\n\n    o\tsplit(1:10, c(1,2)) no longer gives a spurious warning.\n\n    o\tThe \"Complex\" S4 group generic now works.\n\n    o\tabbreviate() doesn't get into infinite loops on input that differs\n\tonly by leading/trailing space\n\n    o\tAdded check for user interrupt in Rvprintf to allow printing to be\n\tinterrupted.\n\n    o\tFixed bug that would cause segfault on protect stack overflow.\n\n    o\tcrossprod() on matrices with zero extents would return an\n\tuninitialized matrix (rather than one filled with zeros).\n\n    o\tDF[[i,j]] for a data frame used row j and col i, not as intended\n\trow i and col j.\n\n    o\tEven more user errors in recursive indexing of lists are now\n\tcaught.\t (PR#4486)\n\n    o\tcor(<matrix>, use = \"pairwise\") gave wrong result in 1.8.0 (only).\n\t(PR#4646)\n\n    o\tmerge.data.frame() could give incorrect names when one of the\n\targuments had only one column.\t(PR#4299)\n\n    o\tSubsetting a one-dimensional array dropped dimensions even when\n\tthey were not of length one.  (Related to PR#4110)\n\n    o\tThe plot() method for `ecdf' objects, plot.ecdf(), now allows to\n\tset a `ylab' argument (different from the default).\n\n    o\tcor.test(*, method=\"spearman\") gave wrong results `randomly'\n\t(because of a wrong type passed to C; PR#4718).\n\n    o\tdist() objects with NA's didn't print these, now do. (PR#4866).\n\n    o\tregexpr(fixed = TRUE) returned 0-based indices.\n\n    o\tdf[, length_1_index] <- value did not recycle short rhs. (PR#4820)\n\n    o\tmedian() no longer `works' for odd-length factor variables.\n\n    o\tpackageStatus() is more robust to failing to contact a\n\trepository, and contacts the correct paths in the repositories\n\tunder Windows.\n\n    o\t.setOldIs (methods) contained a typo stopping POSIXct objects (etc)\n\tbeing included in formal classes.\n\n    o\tterms() sometimes removed offset() terms incorrectly, since it\n\tcounted by variables and not terms.  Its \"offset\" attribute\n\twas incorrectly documented as referring to terms not\n\tvariables. (Related to PR#4941)\n\n    o\tbuildVignettes() and pkgVignettes() in package tools are now\n\tdocumented.  The call to texi2dvi is wrapped in the new\n\tfunction texi2dvi() which also works on Windows.\n\n    o\thclust() was sometimes not finding the correct inter-cluster\n\tdistances with non-monotone methods.  (PR#4195)\n\n    o\tplot.hclust() now tolerates mode changes on dumped objects. (PR#4361)\n\n    o\tprompt() no longer insists files are in the current directory.\n\t(PR#4978)\n\n    o\tfilter() did not use init in reverse order as documented. (PR#5017)\n\n    o\tcontrasts<-() and model.matrix() now have sanity checks that\n\tfactors having at least 2 levels (or one level and a contrast\n\tmatrix): model.matrix() gave nonsensical results for 0-level\n\tfactors.\n\n    o\twriteChar() could segfault if more characters were requested\n\tthan exist. (PR#5090)\n\n    o\tround() and signif() dropped attributes with 0-length inputs,\n\tonly. (PR#4710)\n\n    o\tThe default graphics device in the GNOME interface was gtk,\n\twhich is no longer in the base package. It is now X11.\n\n    o\tThe print button on the toolbar of the GNOME graphics device\n\tdid not work.\n\n    o\tThe example code on the man page for TkWidgetcmds had not been\n\tupdated after the change that made tkget (et al.) return\n\ttclObj objects, so the \"Submit\" button didn't work.\n\n    o\tRd conversion to latex did not add a new line before\n\t\\end{Section} for the section environments, which caused\n\tproblems if the last thing in a section was \\preformatted{}\n\t(and potentially elsewhere).\n\n    o\tUnder some circumstances mosaicplot() failed if main was\n\tsupplied as it was passed on to model.frame.default().\n\n    o\tConversion to POSIXlt (including printing) of POSIXct dates\n\tbefore 1902 and after 2038 computed which were leap years from\n\t(year-1900) so got some xx00 years wrong.\n\n\n\t\tCHANGES IN R VERSION 1.8.0\n\n\nMACOS CHANGES\n\n    o\tAs from this release there is only one R port for the\n\tMacintosh, which runs only on Mac OS X.\t(The `Carbon' port has\n\tbeen discontinued, and the `Darwin' port is part of the new\n\tversion.)   The current version can be run either as a\n\tcommand-line application or as an `Aqua' console.  There is a\n\t`Quartz' device quartz(), and the download and installation of\n\tboth source and binary packages is supported from the Aqua\n\tconsole.  Those CRAN and BioC packages which build under Mac OS X\n\thave binary versions updated daily.\n\n\nUSER-VISIBLE CHANGES\n\n    o\tThe defaults for glm.control(epsilon=1e-8, maxit=25) have been\n\ttightened: this will produce more accurate results, slightly\n\tslower.\n\n    o\tsub, gsub, grep, regexpr, chartr, tolower, toupper, substr,\n\tsubstring, abbreviate and strsplit now handle missing values\n\tdifferently from \"NA\".\n\n    o\tSaving data containing name space references no longer warns\n\tabout name spaces possibly being unavailable on load.\n\n    o\tOn Unix-like systems interrupt signals now set a flag that is\n\tchecked periodically rather than calling longjmp from the\n\tsignal handler.\t This is analogous to the behavior on Windows.\n\tThis reduces responsiveness to interrupts but prevents bugs\n\tcaused by interrupting computations in a way that leaves the\n\tsystem in an inconsistent state.  It also reduces the number\n\tof system calls, which can speed up computations on some\n\tplatforms and make R more usable with systems like Mosix.\n\n\nCHANGES TO THE LANGUAGE\n\n    o\tError and warning handling has been modified to incorporate a\n\tflexible condition handling mechanism.\tSee the online\n\tdocumentation of 'tryCatch' and 'signalCondition'.  Code that\n\tdoes not use these new facilities should remain unaffected.\n\n    o\tA triple colon operator can be used to access values of internal\n\tvariables in a name space (i.e. a:::b is the value of the internal\n\tvariable b in name space a).\n\n    o\tNon-syntactic variable names can now be specified by inclusion\n\tbetween backticks `Like This`.\tThe deparse() code has been\n\tchanged to output non-syntactical names with this convention,\n\twhen they occur as operands in expressions.  This is controlled\n\tby a `backtick' argument, which is by default TRUE for\n\tcomposite expressions and FALSE for single symbols.  This\n\tshould give minimal interference with existing code.\n\n    o\tVariables in formulae can be quoted by backticks, and such\n\tformulae can be used in the common model-fitting functions.\n\tterms.formula() will quote (by backticks) non-syntactic names\n\tin its \"term.labels\" attribute.\t [Note that other code using\n\tterms objects may expect syntactic names and/or not accept\n\tquoted names: such code will still work if the new feature is\n\tnot used.]\n\n\nNEW FEATURES\n\n    o\tNew function bquote() does partial substitution like LISP backquote.\n\n    o\tcapture.output() takes arbitrary connections for `file' argument.\n\n    o\tcontr.poly() has a new `scores' argument to use as the base set\n\tfor the polynomials.\n\n    o\tcor() has a new argument `method = c(\"pearson\",\"spearman\",\"kendall\")'\n\tas cor.test() did forever. The two rank based measures do work with\n\tall three missing value strategies.\n\n    o\tNew utility function cov2cor() {Cov -> Corr matrix}.\n\n    o\tcut.POSIXt() now allows `breaks' to be more general intervals\n\tas allowed for the `by' argument to seq.POSIXt().\n\n    o\tdata() now has an 'envir' argument.\n\n    o\tdet() uses an LU decomposition and LAPACK.  The `method'\n\targument to det() no longer has any effect.\n\n    o\tdev.control() now accepts \"enable\" as well as \"inhibit\".\n\t(Wishlist PR#3424)\n\n    o\t*, - and / work more generally on \"difftime\" objects, which now\n\thave a diff() method.\n\n    o\tdt(*, ncp = V)\tis now implemented, thanks to Claus Ekstrom.\n\n    o\tdump() only quotes object names in the file where necessary.\n\n    o\teval() of a promise forces the promise\n\n    o\tfile.path() now returns an empty character vector if given at\n\tleast one zero-length argument.\n\n    o\tformat() and hence print() make an effort to handle corrupt\n\tdata frames, with a warning.\n\n    o\tformat.info() now also works with `nsmall' in analogy with\n\tformat.default().\n\n    o\tgamma(n) is very slightly more precise for integer n in 11:50.\n\n    o\t? and help() will accept more un-quoted arguments, e.g. NULL.\n\n    o\tThe \"?\" operator has new forms for querying documentation on\n\tS4 methods.  See the online documentation.\n\n    o\tNew argument frame.plot = axes (== TRUE)  for filled.contour().\n\n    o\tNew argument fixed = TRUE for grep() and regexpr() to avoid the\n\tneed to escape strings to match.\n\n    o\tgrep(x, ..., value = TRUE) preserves names of x.\n\n    o\thist.POSIXt() can now pass arguments to hist.default()\n\n    o\tlegend() and symbols() now make use of xy.coords() and accept\n\ta wider range of coordinate specifications.\n\n    o\tAdded function library.dynam.unload() to call dyn.unload() on\n\ta loaded DLL and tidy up.  This is called for all the standard\n\tpackages in namespaces with DLLs if their namespaces are unloaded.\n\n    o\tlm(singular.ok = FALSE) is now implemented.\n\n    o\tEmpty lm() and glm() fits are now handled by the normal\n\tcode: there are no methods for classes \"lm.null\" and\n\t\"glm.null\".  Zero-rank fits are handled consistently.\n\n    o\tmake.names() has improvements, and there is a new auxiliary\n\tfunction make.unique().\t (Based on code contributed by Tom\n\tMinka, since converted to a .Internal function.)  In\n\tparticular make.names() now recognises that names beginning\n\twith a dot are valid and that reserved words are not.\n\n    o\tmethods() has a print method which asterisks functions which\n\tare not user-visible.  methods(class = \"foo\") now lists\n\tnon-visible functions, and checks that there is a matching generic.\n\n    o\tmodel.matrix() now warns when it removes the response from the\n\trhs of the formula: that this happens is now documented on its\n\thelp page.\n\n    o\tNew option `locatorBell' to control the confirmation beep\n\tduring the use of locator() and identify().\n\n    o\tNew option(\"scipen\") provides some user control over the\n\tprinting of numbers in fixed-point or exponential notation.\n\t(Contributed by David Brahm.)\n\n    o\tplot.formula() now accepts horizontal=TRUE and works correctly\n\twhen boxplots are produced.  (Wishlist PR#1207)\t The code has\n\tbeen much simplified and corrected.\n\n    o\tpolygon() and rect() now interpret density < 0 or NA to mean\n\tfilling (by colour) is desired: this allows filling and\n\tshading to be mixed in one call, e.g. from legend().\n\n    o\tThe predict() methods for classes lm, glm, mlm and lqs take a\n\t`na.action' argument that controls how missing values in\n\t`newdata' are handled (and defaults to predicting NA).\n\t[Previously the value of getOption(\"na.action\") was used and\n\tthis by default omitted cases with missing values, even if set\n\tto `na.exclude'.]\n\n    o\tprint.summary.glm() now reports omitted coefficients in the\n\tsame way as print.summary.lm(), and both show them as NAs in\n\tthe table of coefficients.\n\n    o\tprint.table() has a new argument `zero.print' and is now\n\tdocumented.\n\n    o\trank(x, na.last = \"keep\") now preserves NAs in `x', and the\n\targument `ties.method' allows to use non-averaging ranks in the\n\tpresence of ties.\n\n    o\tread.table()'s 'as.is' argument can be character, naming columns\n\tnot to be converted.\n\n    o\trep() is now a generic function, with default, POSIXct and\n\tPOSIXlt methods.  For efficiency, the base code uses rep.int()\n\trather than rep() where possible.\n\n    o\tNew function replicate() for repeated evaluation of expression\n\tand collection of results, wrapping a common use of sapply()\n\tfor simulation purposes.\n\n    o\trev() is now a generic function, with default and dendrogram\n\tmethods.\n\n    o\tserialize() and unserialize() functions are available for\n\tlow-level serialization to connections.\n\n    o\tsocketSelect() allows waiting on multiple sockets.\n\n    o\tsort(method = \"quick\", decreasing = TRUE) is now implemented.\n\n    o\tsort.list() has methods \"quick\" (a wrapper for sort(method =\n\t\"quick\", index.return = TRUE) and \"radix\" (a very fast method\n\tfor small integers).  The default \"shell\" method works faster\n\ton long vectors with many ties.\n\n    o\tstripchart() now has `log', `add' and `at' arguments.\n\n    o\tstrsplit(x, *) now preserves names() but won't work for\n\tnon-character `x' anymore {formerly used as.character(x),\n\tdestroying names(x)}.\n\n    o\ttextConnection() now has a local argument for use with output\n\tconnections.  local = TRUE means the variable containing the\n\toutput is assigned in the frame of the caller.\n\n    o\tUsing UseMethod() with more than two arguments now gives a\n\twarning (as R-lang.texi has long claimed it did).\n\n    o\tNew function vignette() for viewing or listing vignettes.\n\n    o\twhich.min(x) and which.max(x) now preserve names.\n\n    o\txy.coords() coerces \"POSIXt\" objects to \"POSIXct\", allowing\n\tlines etc to added to plot.POSIXlt() plots.\n\n    o\t.Machine has a new entry, sizeof.pointer.\n\n    o\t.Random.seed is only looked for and stored in the user's\n\tworkspace.  Previously the first place a variable of that name\n\twas found on the search path was used.\n\n    o\tSubscripting for data.frames has been rationalized:\n\n\t- Using a single argument now ignores any `drop' argument\n\t  (with a warning).  Previously using `drop' inhibited list-like\n\t  subscripting.\n\n\t- adf$name <- value now checks for the correct length of\n\t  `value', replicating a whole number of times if needed.\n\n\t- adf[j] <- value and adf[[j]] <- value did not convert\n\t  character vectors to factors, but adf[,j] <- value did.\n\t  Now none do.\tNor is a list `value' coerced to a data frame\n\t  (thereby coercing character elements to factors).\n\n\t- Where replicating the replacement value a whole number of\n\t  times will produce the right number of values, this is\n\t  always done (rather than some times but not others).\n\n\t- Replacement list values can include NULL elements.\n\n\t- Subsetting a data frame can no longer produce duplicate\n\t  column names.\n\n\t- Subsetting with drop=TRUE no longer sometimes drops\n\t  dimensions on matrix or data frame columns of the data frame.\n\n\t- Attributes are no longer stripped when replacing part of a column.\n\n\t- Columns added in replacement operations will always be\n\t  named, using the names of a list value if appropriate.\n\n\t- as.data.frame.list() did not cope with list names such as\n\t  `check.rows',\t and formatting/printing data frames with such\n\t  column names now works.\n\n\t- Row names in extraction are still made unique, but without\n\t  forcing them to be syntactic names.\n\n\t- adf[x] <- list() failed if x was of length zero.\n\n\n    o\tSetting dimnames to a factor now coerces to character, as S\n\tdoes.  (Earlier versions of R used the internal codes.)\n\n    o\tWhen coercion of a list fails, a meaningful error message is given.\n\n    o\tAdding to NULL with [[ ]] generates a list if more than one\n\telement is added (as S does).\n\n    o\tThere is a new command-line flag --args that causes the rest of\n\tthe command line to be skipped (but recorded in commandArgs()\n\tfor further processing).\n\n    o\tS4 generic functions and method dispatch have been modified to\n\tmake the generic functions more self-contained (e.g., usable\n\tin apply-type operations) and potentially to speed dispatch.\n\n    o\tThe data editor is no longer limited to 65535 rows, and will\n\tbe substantially faster for large numbers of columns.\n\n    o\tStandalone Rmath now has a get_seed function as requested (PR#3160).\n\n    o\tGC timing is not enabled until the first call to gc.time(); it\n\tcan be disabled by calling gc.time(FALSE).  This can speed up\n\tthe garbage collector and reduce system calls on some\n\tplatforms.\n\n\nSTANDARD PACKAGES\n\n    o\tNew package 'mle'. This is a simple package to find maximum\n\tlikelihood estimates, and perform likelihood profiling and\n\tapproximate confidence limits based upon it.  A well-behaved\n\tlikelihood function is assumed, and it is the responsibility\n\tof the user to gauge the applicability of the asymptotic\n\ttheory.\t This package is based on S4 methods and classes.\n\n    o\tChanges in package 'mva':\n\n\t- factanal() now returns the test statistic and P-value formerly\n\t  computed in the print method.\n\n\t- heatmap() has many more arguments, partly thanks to Wolfgang\n\t  Huber and Andy Liaw.\n\n\t- Arguments `unit' and `hmin' of plclust() are now implemented.\n\n\t- prcomp() now accepts complex matrices, and there is biplot()\n\t  method for its output (in the real case).\n\n\t- dendrograms are slightly better documented, methods working with\n\t  \"label\", not \"text\" attribute.  New rev() method for dendrograms.\n\n\t- plot.dendrogram() has an explicit `frame.plot' argument\n\t  defaulting to FALSE (instead of an implicit one defaulting to TRUE).\n\n    o\tChanges in package 'tcltk':\n\n\t- The package is now in a namespace.  To remove it you will\n\t  now need to use unloadNamespace(\"tcltk\").\n\n\t- The interface to Tcl has been made much more efficient by\n\t  evaluating Tcl commands via a vector of Tcl objects rather\n\t  than by constructing the string representation.\n\n\t- An interface to Tcl arrays has been introduced.\n\n\t- as.tclObj() has gained a `drop' argument to resolve an\n\t  ambiguity for vectors of length one.\n\n    o\tChanges in package 'tools':\n\n\t- Utilities for testing and listing files, manipulating file\n\t  paths, and delimited pattern matching are now exported.\n\n\t- Functions checkAssignFuns(), checkDocArgs() and checkMethods()\n\t  have been renamed to checkReplaceFuns(), checkDocFiles(), and\n\t  checkS3methods, to given better descriptions of what they do.\n\n\t- R itself is now used for analyzing the markup in the \\usage\n\t  sections.  Hence in particular, replacement functions or S3\n\t  replacement methods are no longer ignored.\n\n\t- checkDocFiles() now also determines 'over-documented' arguments\n\t  which are given in the \\arguments section but not in \\usage.\n\n\t- checkDocStyle() and checkS3Methods() now know about internal S3\n\t  generics and S3 group generics.\n\n\t- S4 classes and methods are included in the QC tests.\n\t  Warnings will be issued from undoc() for classes  and\n\t  methods defined but not documented.  Default methods\n\t  automatically generated from nongeneric functions do not\n\t  need to be documented.\n\n\t- New (experimental) functions codocClasses() and codocData()\n\t  for code/documentation consistency checking for S4 classes and\n\t  data sets.\n\n    o\tChanges in package 'ts':\n\n\t- arima.sim() now checks for inconsistent order specification\n\t  (as requested in PR#3495: it was previously documented not to).\n\n\t- decompose() has a new argument `filter'.\n\n\t- HoltWinters() has new arguments `optim.start' and\n\t  `optim.control', and returns more components in the fitted\n\t  values.  The plot method allows `ylim' to be set.\n\n\t- plot.ts() has a new argument `nc' controlling the number of\n\t  columns (with default the old behaviour for plot.mts).\n\n\t- StructTS() now allows the first value of the series to be\n\t  missing (although it is better to omit leading NAs). (PR#3990)\n\n\nUSING PACKAGES\n\n    o\tlibrary() has a pos argument, controlling where the package is\n\tattached (defaulting to pos=2 as before).\n\n    o\trequire() now maintains a list of required packages in the\n\ttoplevel environment (typically, .GlobalEnv).  Two features\n\tuse this:  detach() now warns if a package is detached that is\n\trequired by an attached package, and packages that install\n\twith saved images no longer need to use require() in the\n\t.First as well as in the main source.\n\n    o\tPackages with name spaces can now be installed using --save.\n\n    o\tPackages that use S4 classes and methods should now work with\n\tor without saved images (saved images are still recommended\n\tfor efficiency), writing setMethod(), etc. calls with the\n\tdefault for argument `where'.  The topenv() function and\n\tsys.source() have been changed correspondingly.\t See the\n\tonline help.\n\n    o\tUsers can specify in the DESCRIPTION file the collation order\n\tfor files in the R source directory of a package.\n\n\nDOCUMENTATION CHANGES\n\n    o\tChanges in R documentation format:\n\n\t- New logical markup commands for emphasizing (\\strong) and\n\t  quoting (\\sQuote and \\dQuote) text, for indicating the usage\n\t  of an S4 method (\\S4method), and for indicating specific kinds\n\t  of text (\\acronym, \\cite, \\command, \\dfn, \\env, \\kbd, \\option,\n\t  \\pkg, \\samp, \\var).\n\n\t- New markup \\preformatted for pre-formatted blocks of text\n\t  (like \\example but within another section).  (Based on a\n\t  contribution by Greg Warnes.)\n\n\t- New markup \\concept for concept index entries for use by\n\t  help.search().\n\n    o\tRdconv now produces more informative output from the special\n\t\\method{GENERIC}{CLASS} markup for indicating the usage of S3\n\tmethods, providing the CLASS info in a comment.\n\n    o\t\\dontrun sections are now marked within comments in the\n\tuser-readable versions of the converted help pages.\n\n    o\t\\dontshow is now the preferred name for \\testonly.\n\n\nINSTALLATION CHANGES\n\n    o\tThe zlib code in the sources is used unless the external\n\tversion found is at least version 1.1.4 (up from 1.1.3).\n\n    o\tThe regression checks now have to be passed exactly, except\n\tthose depending on recommended packages (which cannot be\n\tassumed to be present).\n\n    o\tThe target make check-all now runs R CMD check on all the\n\trecommended packages (and not just runs their examples).\n\n    o\tThere are new macros DYLIB_* for building dynamic libraries,\n\tand these are used for the dynamic Rmath library (which was\n\tpreviously built as a shared object).\n\n    o\tIf a system function log1p is found, it is tested for accuracy\n\tand if inadequate the substitute function in src/nmath is\n\tused, with name remapped to Rlog1p.  (Apparently needed on\n\tOpenBSD/NetBSD.)\n\n\nC-LEVEL FACILITIES\n\n    o\tThere is a new installed header file R_ext/Parse.h which\n\tallows R_ParseVector to be called by those writing extensions.\n\t(Note that the interface is changed from that used in the\n\tunexported header Parse.h in earlier versions, and is not\n\tguaranteed to remain unchanged.)\n\n    o\tThe header R_ext/Mathlib.h has been removed.  It was replaced by\n\tRmath.h in R 1.2.0.\n\n    o\tPREXPR has been replaced by two macros, PREXPR for obtaining the\n\texpression and PRCODE for obtaining the code for use in eval.\n\tThe macro BODY_EXPR has been added for use with closures.\n\tFor a closure with a byte compiled body, the macro BODY_EXPR\n\treturns the expression that was compiled; if the body is not\n\tcompiled then the body is returned.  This is to support byte\n\tcompilation.\n\n    o\tInternal support for executing byte compiled code has been added.\n\tA compiler for producing byte compiled code will be made available\n\tseparately and should become part of a future R release.\n\n    o\tOn Unix-like systems calls to the popen() and system() C library\n\tfunctions now go through R_popen and R_system.\tOn Mac OS X these\n\tsuspend SIGALRM interrupts around the library call.  (Related to\n\tPR#1140.)\n\n\nUTILITIES\n\n    o\tR CMD check accepts \"ORPHANED\" as package maintainer. Package\n\tmaintainers can now officially orphan a package, i.e., resign\n\tfrom maintaining a package.\n\n    o\tR CMD INSTALL (Unix only) is now 'safe': if the attempt to\n\tinstall a package fails, leftovers are removed.\t If the package\n\twas already installed, the old version is restored.\n\n    o\tR CMD build excludes possible (obsolete) data and vignette\n\tindices in DCF format (and hence also no longer rebuilds them).\n\n    o\tR CMD check now tests whether file names are valid across file\n\tsystems and supported operating system platforms.  There is some\n\tsupport for code/documentation consistency checking for data\n\tsets and S4 classes.  Replacement functions and S3 methods in\n\t\\usage sections are no longer ignored.\n\n    o\tR CMD Rdindex has been removed.\n\n\nDEPRECATED & DEFUNCT\n\n    o\tThe assignment operator `_' has been removed.\n\n    o\tprintNoClass() is defunct.\n\n    o\tThe classic Mac OS port is no longer supported, and its files\n\thave been removed from the sources.\n\n    o\tThe deprecated argument 'white' of parse() has been removed.\n\n    o\tMethods pacf/plot.mts() have been removed and their functionality\n\tincorporated into pacf.default/plot.ts().\n\n    o\tprint.coefmat() is deprecated in favour of printCoefmat()\n\t(which is identical apart from the default for na.print which\n\tis changed from \"\" to \"NA\", and better handling of the 0-rank\n\tcase where all coefficients are missing).\n\n    o\tcodes() and codes<-() are deprecated, as almost all uses\n\tmisunderstood what they actually do.\n\n    o\tThe use of multi-argument return() calls is deprecated: use a\n\t(named) list instead.\n\n    o\tanovalist.lm (replaced in 1.2.0) is now deprecated.\n\n    o\t- and Ops methods for POSIX[cl]t objects are removed: the\n\tPOSIXt methods have been used since 1.3.0.\n\n    o\tglm.fit.null(), lm.fit.null() and lm.wfit.null() are deprecated.\n\n    o\tClasses \"lm.null\" and \"glm.null\" are deprecated and all of their\n\tmethods have been removed.\n\n    o\tMethod weights.lm(), a copy of weights.default(), has been removed.\n\n    o\tprint.atomic() is now deprecated.\n\n    o\tThe back-compatibility entry point Rf_log1p in standalone\n\tRmath has been removed.\n\n\nBUG FIXES\n\n    o\tARMAacf() sometimes gave too many results or failed if `lag.max'\n\twas used.\n\n    o\ttermplot() with a subset of terms now gives correct partial residuals\n\n    o\tFunctions anova.glm(), contrasts(), getS3method(), glm() and\n\tmake.tables() were applying get() without asking for a\n\tfunction and/or not starting the search in the environment of\n\tthe caller.\n\n    o\tas.data.frame.matrix() ignored the `row.names' argument.\n\n    o\tas.data.frame.list(optional = TRUE) was converting names, and\n\thence data.frame(list(...), check.names = FALSE) was.  (PR#3280)\n\n    o\tas.dist(m) {mva} now obeys `diag=TRUE' or `upper=TRUE' in all cases.\n\n    o\tas.double(list()) etc was regarded as an error, because of a\n\tbug in isVectorizable.\n\n    o\tOn some platforms the wday component of the result of\n\tas.POSIXlt() was corrupted when trying to guess the DST offset\n\tat dates the OS was unable to handle.\n\n    o\tave(x, g) didn't work when `g' had unused levels.\n\n    o\tbiplot.default() allows xlim and ylim to be set.  (PR#3168)\n\n    o\tbgroup with a null (.) delimiter was setting font to Greek.  (PR#3099)\n\n    o\tbody() and formals() were looking for named functions in\n\tdifferent places: they now both look starting at the\n\tenvironment in which they are called.  Several documentation\n\terrors for these functions have been corrected.\n\n    o\tboxplot() was ignoring cex.axis.  (PR#2628)\n\n    o\tcut.POSIXt() now passes on ... to cut.default(), as documented.\n\n    o\tcrossprod() now works for 1d arrays with unnamed dimnames (PR#4092).\n\n    o\tdata() sometimes failed with multiple files, as the paths\n\tvariable got corrupted.\n\n    o\tdata.frame() failed with a nonsensical error message if it\n\tgrabbed row names from an argument that was subsequently\n\trecycled.  Now they are discarded, with a warning.\n\n    o\tdata.matrix() was documented to replace factors by their\n\tcodes, but in fact re-coded into the alphabetical ordering of\n\tthe levels.\n\n    o\tdecompose() with even frequency used an asymmetric moving\n\taverage window.\n\n    o\tdemo() was using `topic' as a regexp rather than an exact match.\n\n    o\tdotchart() now does recycle the `color' argument and better\n\tdocuments the `bg' one (PR#4343).\n\n    o\tgetAnywhere() didn't not correctly check for S3 methods, when\n\tthe generic or the class name contains a \".\" (PR#4275).\n\n    o\tfile.copy() ignored the overwrite argument.  (PR#3529)\n\n    o\tfilter(method=\"recursive\") was unnecessarily requiring the\n\ttime series to be longer than the filter.\n\n    o\tformat(*, nsmall = m) with m > 0 now returns exponential format\n\tless often.\n\n    o\tget() and exists() were ignoring the `mode' argument for\n\tvariables in base.  The error message for get() now mentions\n\tthe mode requested if not \"any\".  A bug in setting the NAMED\n\tfield in do_get was fixed.\n\n    o\tgetS3method(f, cl, optional=TRUE) now returns NULL if `f' does\n\tnot exist.\n\n    o\tHoltWinters() would segfault if only gamma was optimized, and\n\tnot converge if gamma=0 and seasonal=\"mult\".\n\n    o\thyperref.cfg now contains definitions for colors it uses.\n\n    o\tidentify.default() detects zero-length arguments.  (PR#4057)\n\n    o\tlegend() allows shading without filling again.\n\n    o\tlegend(x, y, leg) doesn't triple `leg' anymore when it is a call.\n\n    o\tCorrected many problems with 0-rank (but not necessarily empty\n\tmodel) lm() and glm() fits.\n\n    o\tlm.influence() now handles 0-rank models, and names its output\n\tappropriately.\tIt also ensures that hat values are not greater\n\tthan one, and rounds values within rounding error of one.\n\n    o\tThe `method' argument to loess() did not work.\t(PR#3332)\n\n    o\tlsfit() was returning incorrect residuals for 0-rank fits.\n\n    o\tmethods(\"$\") and methods(\"$<-\") were failing to find methods.\n\n    o\tmethods() and getS3method() find methods if the generic\n\tdispatches on a name other than its own.  (The cases of\n\tcoefficients() and fitted.values() were fixed in 1.7.1.)\n\n    o\tmodel.matrix.default() was throwing an error on 0-term models,\n\tbut now handles them correctly.\n\n    o\tPrinting `nls' objects misbehaved when `data' was a composite\n\texpression.\n\n    o\t.NotYetImplemented() gave \"Error in .NotYet...(): ..\"\n\n    o\tnumericDeriv() was failing if the first argument was a name\n\trather than a call.  (PR#3746)\n\n    o\tpacf() was failing if called on a one-column matrix.\n\n    o\tpaste() applied to 0-length vectors gave \"\" not a 0-length vector.\n\n    o\tThe length of a string specification of par(lty=) is now checked: it\n\tshould be 2, 4, 6 or 8.\n\n    o\tUsing lty=as.integer(NA) and as.double(NA) were being accepted\n\tbut giving nonsensical results.\t Those are not documented\n\tvalid values for lty.  (PR#3217)\n\n    o\tErroneously calling par(new=TRUE) with no plot was not caught\n\tand so could result in invalid graphics files.\t(PR#4037)\n\n    o\tpar(tck=) was being interpreted incorrectly.  It is now\n\tdocumented in the same way as S, and now behaves as\n\tdocumented.  (PR#3504)\n\n    o\tplclust() [and hence plot.hclust()] sometimes now uses correct `ylim's\n\talso in unusual cases.\t(PR#4197)\n\n    o\tplot.POSIX[cl]t no longer passes col, lty, lwd to axis.POSIXt.\n\n    o\tThe png(), jpeg(), png() and win.metafile() devices now\n\tenforce the length limit on the filename.  (PR#3466)\n\n    o\tpnorm(x, 1, 0) does not give NaN anymore;\n\talso, pnorm(x, m, s=Inf) == lim{s -> Inf} pnorm(x,m,s).\n\tSimilar changes for dnorm(), cf PR#1218.\n\n    o\tOn some machines the internal rounding used in postscript() was\n\timperfect, causing unnecessarily verbose output (-0.00 instead of\n\t0) and problems with make check.\n\n    o\tqqnorm()'s result now keeps NAs from its input. (PR#3750)\n\n    o\trank() sometimes preserved and sometimes dropped names.\n\n    o\treadBin(what = \"foo\") didn't convert `what' to its type.  (PR#4043)\n\n    o\treorder.dendrogram() now properly resets the \"midpoint\" attributes\n\tsuch that reorder()ed dendrograms now plot properly.\n\n    o\trmultinom(1,100, c(3, 4, 2, 0,0))[3] was NA. (PR#4431)\n\n    o\tsapply() for matrix result does not return list(NULL,NULL) dimnames\n\tanymore.\n\n    o\tscan() now interprets quoting in fields to be skipped.\t(PR#4128)\n\n    o\tseq.POSIXt(from, to, by=\"DSTday\") was failing or calculating\n\tthe length incorrectly.\n\n    o\tsort() and unique.default() were failing on 0-level factors.\n\n    o\tstep() adds a fuzz for reduction in AIC for 0-df terms.\t (PR#3491)\n\n    o\tstr(x) gives better output when x is of mode \"(\".  Its \"dendrogram\"\n\tmethod obeys the `give.attr' argument which now defaults to FALSE.\n\n    o\tstrwidth(f) and strheight(f) could seg.fault when `f' was a\n\tfunction.  The fix [to C-level coerceVector()] now gives an error\n\tinstead of passing through.  This may catch other potential\n\tproblems.\n\n    o\tSweave() reports the chunk number rather than the driver call when\n\ta try error gets caught.\n\n    o\ttrunc.POSIXt(x) for 0-length x does not return invalid structures\n\tanymore.  (PR#3763).\n\n    o\twarnings() now returns NULL instead of an error when no warnings\n\thave occured yet.  (PR#4389)\n\n    o\tUsing write.table() setting the `dec' argument and with no\n\tnumeric columns failed.\t (PR#3532)\n\n    o\t$<- did not duplicate when it needed to.\n\n    o\tRecursive indexing of lists had too little error-checking.\n\t(related to PR#3324)\n\n    o\tRemoved warning about names in persistent strings when a\n\tnamespace is saved.\n\n    o\tFixed some malformed error messages in the methods package.\n\n    o\tpipes were not opening properly when profiling on a Mac OS.\n\t(PR#1140)\n\n    o\tLapack error messages (PR#3494) and call to DGEQP3 (PR#2867) are\n\tcorrected.\n\n    o\tRd conversion was limiting a file to 1000 pairs of braces,\n\twithout any warning.  Now the limit is 10000, with a warning.\n\t(PR#3400)\n\n    o\tIn the tcltk package, the tkimage.*() commands were defined\n\tnonsensically as widget commands. They have been redefined to be\n\tmore useful now.\n\n    o\tRegistered group generics were not being used. (PR#3536)\n\n    o\tSubsetting data frames did not always correctly detect that\n\tnon-existent columns were specified.\n\n    o\tThere are many more checks for over-running internal buffers,\n\talmost always reporting errors.\n\n    o\tAdded some buffer overflow checking in gram.y.\n\n    o\tInternals for complex assignment did not check that function name\n\twas a symbol, which could cause a segfault.\n\n    o\tFixed bug in S4 methods dispatch that made local variables in the\n\tgeneric visible when executing the body of a method, thus violating\n\tlexical scope.\n\n\n\n\n\t**************************************************\n\t*\t\t\t\t\t\t *\n\t*\t       1.7 SERIES NEWS\t\t\t *\n\t*\t\t\t\t\t\t *\n\t**************************************************\n\n\n\t\tCHANGES IN R VERSION 1.7.1\n\n\nNEW FEATURES\n\n    o\tThe help pages give appropriate references to the Blue,\n\tWhite or Green books for functions based on the descriptions\n\tof S functions given there. (E&OE)\n\n    o\tFunction getAnywhere() can find non-exported objects, for\n\tnamespaces or registered methods.\n\n\nDEPRECATED & DEFUNCT\n\n    o\tThe (unimplemented) argument 'white' of parse() is deprecated.\n\n    o\tThe tkfilefind demo in the tcltk library is deprecated, since\n\tit never worked well, and apparently not at all with Tcl/Tk 8.4.\n\n\nBUG FIXES\n\n    o\tprint.table() used too much white space in some cases in 1.7.0.\n\n    o\tselectMethod() failed if `f' was a non-generic and\n\toptional=TRUE, and gave a confusing error message if\n\toptional=FALSE.\n\n    o\tpchisq(*, ncp) and qchisq(*, ncp) work in more cases for large ncp\n\tor quantile and give warning or error messages otherwise.\n\n    o\tstr(x) now also works when x is an \"externalptr\" (or \"weakref\").\n\n    o\trbeta(), rf(), and rt() now support infinite parameter values;\n\tother distributions return NaN instead of NA for such.\n\n    o\tRedefining a class is now safer if the new definition\n\tgenerates an error (previously some invalid metadata could be\n\tleft behind).\n\n    o\tA number of errors are now caught in setClass() that\n\tpreviously either went unchecked or waited until new() to\n\tappear:\n\t- classes may not contain themselves, directly or indirectly;\n\t- classes appearing either as slots or as superclasses must\n\t  themselves be defined;\n\t- slot names (direct or inherited) must be unique.\n\tIn related changes, prototype() now works as documented, and is the\n\trecommended way to provide prototype objects.\n\n    o\tSorting an ordered factor would return an unordered one.\n\tThis caused some trouble with panel.superpose (PR#974).\n\n    o\tmethods() could return duplicates if a method in a namespace\n\twas both exported and registered.\n\n    o\tThe internal zip.unpack() could crash if more than 500 files\n\twere to be extracted. (PR#2818)\n\n    o\tThe \"r+\" and \"r+b\" modes of opening file connections disallowed\n\twriting.\n\n    o\tlibrary() now warns the user if the chosen package name\n\tdoesn't match the internal package name, and corrects the\n\terror. (PR#2816)\n\n    o\tqr(LAPACK=TRUE) (and qr for complex arguments) might have failed\n\tto pivot for rank-deficient inputs. (PR#2867)\n\n    o\tOnly re-mapped symbols are exported by regex.o, to avoid\n\tproblems with embedded R on RedHat 9.\n\n    o\tarima() did not set transform.pars to FALSE if AR parameters\n\twere fixed, although it claimed to.\n\n    o\tpnorm() was slower than necessary in the outer tails in some\n\tcases due to a typo in the improvements from PR#699.  (PR#2883)\n\n    o\tsetGeneric() and setMethod() now catch some examples where the\n\tgeneric and the method have different argument lists; the\n\tevaluator checks for internal consistency of these argument lists.\n\n    o\texpand.grid(x) {the rare case of one argument} now treats factor\n\tlevels as in the typical case of two or more arguments.\n\n    o\tSome implicit coercions to lists could cause segfaults, e.g.\n\t  x <- matrix(nrow=20000, ncol=20); x$any <- numeric(0)\n\tdue to a PROTECT bug. (PR#2923)\n\n    o\tThe replacement functions for colnames() and rownames() did not\n\twork for arrays with more than two dimensions.\tThey could\n\tcreate dimnames of the form list(NULL, NULL) rather than\n\tremove the dimnames attribute.\n\n    o\ttermplot() gave incorrect answers with rug=TRUE or\n\tpartial=TRUE for factors whose levels were not in\n\tlexicographical order.\n\n    o\tA serious performance flaw in as() computations was fixed (the\n\tmethods were not being cached properly.)\n\n    o\tmodel.frame(~1, data) always returned 1 row. (PR#2958)\n\n    o\tThe data editor was truncating objects to 65535 rows.  Pro\n\ttem, editing objects with more than 65535 rows is an error,\n\tand objects cannot be extended beyond that row. This restriction\n\twill be removed in 1.8.0.  (PR#2962)\n\n    o\tA bug could produce apparent loops in formal method selection\n\twhen inheritance was restricted (used for the as() function).\n\tA related problem sometimes broke attaching a package that had\n\tmethods for basic functions, such as names(), used in method\n\tselection.\n\n    o\tEmpty expressions as in return(x,) could generate subsequent\n\tsegfaults: they are now errors.\t (PR#2880)\n\n    o\tThe Kinderman-Ramage Normal Random Generator had several\n\tproblems leading to not-quite normally distributed variates\n\t(PR#2846).  One problem was traced to an error in the original\n\t1976 JASA paper!  Thanks to Josef Leydold and his team for\n\tinvestigating this. The old generator has been retained for\n\treproducibility of older results, under the name\n\t\"Buggy Kinderman-Ramage\".  A warning is issued if you select it\n\t(also indirectly via RNGversion()).\n\n    o\tpromptMethods() now puts the \\alias lines for methods in the\n\tnormal place, near the top of the file, and quotes class\n\t names in signatures.\n\n    o\tgetS3method() and methods() were not finding methods for\n\tcoefficients() and fitted.values() (which dispatch on \"coef\"\n\tand \"fitted\" respectively).\n\n    o\tscan() (and hence read.table) was not finding matches for\n\tseparator chars with the upper bit set.\t (PR#3035)\n\n    o\tlm.(w)fit failed if the fit had rank 0.\n\n    o\tlqs() did not report explicitly that it had failed if all\n\tsamples gave singular fits.\n\n    o\tpredict.lm(*, se=TRUE) {w/ weights, w/o newdata} now gives correct\n\tSE's.  (PR#3043)\n\n    o\tcor.test(x, y, method=\"spearman\") now also works for\n\tlength(x) > 1290.\n\n    o\tMatrices were printed mis-aligned if right=TRUE and na.print\n\twas specified.\t(PR#3058)\n\n    o\tR CMD check gives now a clearer message when latex produces\n\terrors on the package manual.  (PR#3070)\n\n    o\tisSeekable() was incorrectly returning FALSE on all file connections.\n\n    o\ttkpager() wasn't quite using its title and header arguments in\n\tthe way prescribed by file.show()\n\n    o\tlegend(*, pch=p, lty=l) now works better when `p' or `l' have\n\tNAs.\n\n    o\tAll braces in regular expressions used by Sweave() are now\n\tescaped by a backslash.\n\n    o\tunloadNamespace() failed because getNamespaceImports() now coerces a\n\tstring argument to a name space.\n\n    o\tderiv3 gave incorrect Hessians for some very simple\n\texpressions such as expression(x*y) (since the comments in the\n\tC code were incorrect).\t (PR#2577)\n\n    o\tpower.t.test(..., delta=NULL,alternative='two.sided') failed. (PR#2993)\n\n    o\tLines on postscript() plots with thousands of segments might\n\thave been plotted inaccurately in 1.7.0. (PR#3132)\n\n\tSolid lines in postscript() output are split into groups of 1000\n\tsegments to help some PostScript interpreters (typically old\n\tlevel-1 interpreters).\n\n    o\tcut.POSIXt failed when the breaks were date/time objects. (PR#3181)\n\n    o\tUsage of methods in dist.Rd is now correctly documented\n\t(as.matrix.dist() is not an exported symbol).\n\n    o\tThe predict() method for ar fits was not retrieving the series\n\tfrom the parent environment.\n\n    o\teigen() and La.eigen() were not returning a matrix of\n\teigenvectors for a 1x1 input.\n\n    o\thsv() and rgb() now return character(0) when one of their args has\n\tlength 0.  This also fixes terrain.color(1). (PR#3233)\n\n    o\t[[<-.data.frame checked if a replacment was too short, but not\n\tif it was too long.  (related to PR#3229)\n\n    o\tqt(x, df) was quite inaccurate for df=1+epsilon; it is now much more\n\taccurate for df in (1,2) and more precise for other df. (PR#2991)\n\n    o\tqbeta() now has slightly improved C code in two places, as suggested\n\tin the 2nd followup to PR#2894.\n\n\n\n\t\tCHANGES IN R VERSION 1.7.0\n\n\nUSER-VISIBLE CHANGES\n\n    o\tsolve(), chol(), eigen() and svd() now use LAPACK routines\n\tunless a new back-compatibility option is turned on.  The\n\tsigns and normalization of eigen/singular vectors may change\n\tfrom earlier versions.\n\n    o\tThe `methods', `modreg', `mva', `nls' and `ts' packages\n\tare now attached by default at startup (in addition to `ctest').\n\tThe option \"defaultPackages\" has been added which contains the\n\tinitial list of packages.  See ?Startup and ?options for details.\n\tNote that .First() is no longer used by R itself.\n\n\tclass() now always (not just when `methods' is attached) gives\n\ta non-null class, and UseMethod() always dispatches on the\n\tclass that class() returns.  This means that methods like\n\tfoo.matrix and foo.integer will be used.  Functions oldClass()\n\tand oldClass<-() get and set the \"class\" attribute as R\n\twithout `methods' used to.\n\n    o\tThe default random number generators have been changed to\n\t`Mersenne-Twister' and `Inversion'.  A new RNGversion()\n\tfunction allows you to restore the generators of an earlier R\n\tversion if reproducibility is required.\n\n    o\tNamespaces can now be defined for packages other than `base':\n\tsee `Writing R Extensions'.  This hides some internal objects\n\tand changes the search path from objects in a namespace.  All\n\tthe base packages (except methods and tcltk) have namespaces,\n\tas well as the recommended packages `KernSmooth', `MASS',\n\t`boot', `class', `nnet', `rpart' and `spatial'.\n\n    o\tFormulae are not longer automatically simplified when terms()\n\tis called, so the formulae in results may still be in the\n\toriginal form rather than the equivalent simplified form\n\t(which may have reordered the terms): the results are now\n\tmuch closer to those of S.\n\n    o\tThe tables for plotmath, Hershey and Japanese have been moved\n\tfrom the help pages (example(plotmath) etc) to demo(plotmath) etc.\n\n    o\tErrors and warnings are sent to stderr not stdout on\n\tcommand-line versions of R (Unix and Windows).\n\n    o\tThe R_X11 module is no longer loaded until it is needed, so\n\tdo test that x11() works in a new Unix-alike R installation.\n\n\nNEW FEATURES\n\n    o\tif() and while() give a warning if called with a vector condition.\n\n    o\tInstalled packages under Unix without compiled code are no\n\tlonger stamped with the platform and can be copied to other\n\tUnix-alike platforms (but not to other OSes because of\n\tpotential problems with line endings and OS-specific help files).\n\n    o\tThe internal random number generators will now never return\n\tvalues of 0 or 1 for runif.  This might affect simulation\n\toutput in extremely rare cases.\t Note that this is not\n\tguaranteed for user-supplied random-number generators, nor\n\twhen the standalone Rmath library is used.\n\n    o\tWhen assigning names to a vector, a value that is too short is\n\tpadded by character NAs. (Wishlist part of PR#2358)\n\n    o\tIt is now recommended to use the 'SystemRequirements:' field in\n\tthe DESCRIPTION file for specifying dependencies external to the\n\tR system.\n\n    o\tOutput text connections no longer have a line-length limit.\n\n    o\tOn platforms where vsnprintf does not return the needed buffer\n\tsize the output line-length limit for fifo(), gzfile() and\n\tbzfile() has been raised from 10k to 100k chars.\n\n    o\tThe Math group generic does not check the number of arguments\n\tsupplied before dispatch: it used to if the default method had\n\tone argument but not if it had two.  This allows trunc.POSIXt()\n\tto be called via the group generic trunc().\n\n    o\tLogical matrix replacement indexing of data frames is now\n\timplemented (interpreted as if the lhs was a matrix).\n\n    o\tRecursive indexing of lists is allowed, so x[[c(4,2)]] is\n\tshorthand for x[[4]][[2]] etc.\t(Wishlist PR#1588)\n\n    o\tMost of the time series functions now check explicitly for a\n\tnumeric time series, rather than fail at a later stage.\n\n    o\tThe postscript output makes use of relative moves, and so is\n\tsomewhat more compact.\n\n    o\t%*% and crossprod() for complex arguments make use of BLAS\n\troutines and so may be much faster on some platforms.\n\n    o\tarima() has coef(), logLik() (and hence AIC) and vcov() methods.\n\n    o\tNew function as.difftime() for time-interval data.\n\n    o\tbasename() and dirname() are now vectorized.\n\n    o\tbiplot.default() {mva} allows `xlab' and `ylab' parameters to\n\tbe set (without partially matching to `xlabs' and `ylabs').\n\t(Thanks to Uwe Ligges.)\n\n    o\tNew function capture.output() to send printed output from an expression\n\tto a connection or a text string.\n\n    o\tccf() (pckage ts) now coerces its x and y arguments to class \"ts\".\n\n    o\tchol() and chol2inv() now use LAPACK routines by default.\n\n    o\tas.dist(.) is now idempotent, i.e., works for \"dist\" objects.\n\n    o\tGeneric function confint() and `lm' method (formerly in\n\tpackage MASS, which has `glm' and `nls' methods).\n\n    o\tNew function constrOptim() for optimisation under linear inequality\n\tconstraints.\n\n    o\tAdd `difftime' subscript method and methods for the group\n\tgenerics. (Thereby fixing PR#2345)\n\n    o\tdownload.file() can now use HTTP proxies which require `basic'\n\tusername/password authentication.\n\n    o\tdump() has a new argument `envir'.  The search for named\n\tobjects now starts by default in the environment from which\n\tdump() is called.\n\n    o\tThe edit.matrix() and edit.data.frame() editors can now handle\n\tlogical data.\n\n    o\tNew argument `local' for example() (suggested by Andy Liaw).\n\n    o\tNew function file.symlink() to create symbolic file links\n\twhere supported by the OS.\n\n    o\tNew generic function flush() with a method to flush connections.\n\n    o\tNew function force() to force evaluation of a formal argument.\n\n    o\tNew functions getFromNamespace(), fixInNamespace() and\n\tgetS3method() to facilitate developing code in packages with\n\tnamespaces.\n\n    o\tglm() now accepts `etastart' and `mustart' as alternative ways\n\tto express starting values.\n\n    o\tNew function gzcon() which wraps a connection and provides\n\t(de)compression compatible with gzip.\n\n\tload() now uses gzcon(), so can read compressed saves from\n\tsuitable connections.\n\n    o\thelp.search() can now reliably match individual aliases and\n\tkeywords, provided that all packages searched were installed\n\tusing R 1.7.0 or newer.\n\n    o\thist.default() now returns the nominal break points, not those\n\tadjusted for numerical tolerances.\n\n\tTo guard against unthinking use, `include.lowest' in\n\thist.default() is now ignored, with a warning, unless `breaks'\n\tis a vector.  (It either generated an error or had no effect,\n\tdepending how prettification of the range operated.)\n\n    o\tNew generic functions influence(), hatvalues() and dfbeta()\n\twith lm and glm methods; the previously normal functions rstudent(),\n\trstandard(), cooks.distance() and dfbetas() became generic.\n\tThese have changed behavior for glm objects -- all originating from\n\tJohn Fox' car package.\n\n    o\tinteraction.plot() has several new arguments, and the legend\n\tis not clipped anymore by default.  It internally uses axis(1,*)\n\tinstead of mtext().\n\tThis also addresses \"bugs\" PR#820, PR#1305, PR#1899.\n\n    o\tNew isoreg() function and class for isotonic regression\n\t(`modreg' package).\n\n    o\tLa.chol() and La.chol2inv() now give interpretable error\n\tmessages rather than LAPACK error codes.\n\n    o\tlegend() has a new `plot' argument.  Setting it `FALSE' gives\n\tsize information without plotting (suggested by U.Ligges).\n\n    o\tlibrary() was changed so that when the methods package is\n\tattached it no longer complains about formal generic functions\n\tnot specific to the library.\n\n    o\tlist.files()/dir() have a new argument `recursive'.\n\n    o\tlm.influence() has a new `do.coef' argument allowing *not* to\n\tcompute casewise changed coefficients.\tThis makes plot.lm() much\n\tquicker for large data sets.\n\n    o\tload() now returns invisibly a character vector of the names\n\tof the objects which were restored.\n\n    o\tNew convenience function loadURL() to allow loading data files\n\tfrom URLs (requested by Frank Harrell).\n\n    o\tNew function mapply(), a multivariate lapply().\n\n    o\tNew function md5sum() in package tools to calculate MD5\n\tchecksums on files (e.g. on parts of the R installation).\n\n    o\tmedpolish() {package eda} now has an `na.rm' argument (PR#2298).\n\n    o\tmethods() now looks for registered methods in namespaces, and\n\tknows about many objects that look like methods but are not.\n\n    o\tmosaicplot() has a new default for `main', and supports the\n\t`las' argument (contributed by Uwe Ligges and Wolfram Fischer).\n\n    o\tAn attempt to open() an already open connection will be detected\n\tand ignored with a warning.  This avoids improperly closing\n\tsome types of connections if they are opened repeatedly.\n\n    o\toptim(method = \"SANN\") can now cover combinatorial optimization\n\tby supplying a move function as the `gr' argument (contributed\n\tby Adrian Trapletti).\n\n    o\tPDF files produced by pdf() have more extensive information\n\tfields, including the version of R that produced them.\n\n    o\tOn Unix(-alike) systems the default PDF viewer is now determined\n\tduring configuration, and available as the 'pdfviewer' option.\n\n    o\tpie(...) has always accepted graphical pars but only passed\n\tthem on to title().  Now pie(, cex=1.5) works.\n\n    o\tplot.dendrogram (`mva' package) now draws leaf labels if present\n\tby default.\n\n    o\tNew plot.design() function as in S.\n\n    o\tThe postscript() and PDF() drivers now allow the title to be set.\n\n    o\tNew function power.anova.test(), contributed by Claus Ekstrom.\n\n    o\tpower.t.test() now behaves correctly for negative delta in the\n\ttwo-tailed case.\n\n    o\tpower.t.test() and power.prop.test() now have a `strict'\n\targument that includes rejections in the \"wrong tail\" in the\n\tpower calculation. (Based in part on code suggested by Ulrich\n\tHalekoh.)\n\n    o\tprcomp() is now fast for n x m inputs with m >> n.\n\n    o\tprincomp() no longer allows the use of more variables than\n\tunits: use prcomp() instead.\n\n    o\tprincomp.formula() now has principal argument `formula', so\n\tupdate() can be used.\n\n    o\tPrinting an object with attributes now dispatches on the\n\tclass(es) of the attributes. See ?print.default for the fine\n\tprint. (PR#2506)\n\n    o\tprint.matrix() and prmatrix() are now separate functions.\n\tprmatrix() is the old S-compatible function, and\n\tprint.matrix() is a proper print method, currently identical\n\tto print.default().  prmatrix() and the old print.matrix()\n\tdid not print attributes of a matrix, but the new print.matrix()\n\tdoes.\n\n    o\tprint.summary.{lm,glm} now default to symbolic.cor = FALSE, but\n\tsymbolic.cor can be passed to the print methods from the\n\tsummary methods.  print.summary.{lm,glm} print correlations to\n\t2 decimal places, and the symbolic printout avoids abbreviating\n\tlabels.\n\n    o\tIf a prompt() method is called with 'filename' as 'NA', a\n\tlist-style representation of the documentation shell generated\n\tis returned.  New function promptData() for documenting objects\n\tas data sets.\n\n    o\tqqnorm() and qqline() have an optional logical argument\n\t`datax' to transpose the plot (S-PLUS compatibility).\n\n    o\tqr() now has the option to use LAPACK routines, and the\n\tresults can be used by the helper routines qr.coef(), qr.qy()\n\tand qr.qty().  The LAPACK-using versions may be much faster\n\tfor large matrices (using an optimized BLAS) but are less\n\tflexible.\n\n    o\tQR objects now have class \"qr\", and solve.qr() is now just the\n\tmethod for solve() for the class.\n\n    o\tNew function r2dtable() for generating random samples of two-way\n\ttables with given marginals using Patefield's algorithm.\n\n    o\trchisq() now has a non-centrality parameter `ncp', and there's a\n\tC API for rnchisq().\n\n    o\tNew generic function reorder() with a dendrogram method;\n\tnew order.dendrogram() and heatmap().\n\n    o\trequire() has a new argument, character.only,\n\t  -- to make it align with library.\n\n    o\tNew functions rmultinom() and dmultinom(), the first one with\n\ta C API.\n\n    o\tNew function runmed() for fast runnning medians (`modreg' package).\n\n    o\tNew function slice.index() for identifying indexes with respect\n\tto slices of an array.\n\n    o\tsolve.default(a) now gives the dimnames one would expect.\n\n    o\tstepfun() has a new `right' argument for right-continuous step\n\tfunction construction.\n\n    o\tstr() now shows ordered factors different from unordered ones.\n\tIt also differentiates \"NA\" and as.character(NA), also for factor\n\tlevels.\n\n    o\tsymnum() has a new logical argument `abbr.colnames'.\n\n    o\tsummary(<logical>) now mentions NA's as suggested by\n\tGoran Brostrom.\n\n    o\tsummaryRprof() now prints times with a precision appropriate\n\tto the sampling interval, rather than always to 2dp.\n\n    o\tNew function Sys.getpid() to get the process ID of the R session.\n\n    o\ttable() now allows exclude= with factor arguments (requested by\n\tMichael Friendly).\n\n    o\tThe tempfile() function now takes an optional second argument\n\tgiving the directory name.\n\n    o\tThe ordering of terms for terms.formula(keep.order=FALSE) is\n\tnow defined on the help page and used consistently, so that\n\trepeated calls will not alter the ordering (which is why\n\tdelete.response() was failing: see the bug fixes).  The\n\tformula is not simplified unless the new argument `simplify'\n\tis true.\n\n    o\tadded \"[\" method for terms objects.\n\n    o\tNew argument `silent' to try().\n\n    o\tts() now allows arbitrary values for y in start/end = c(x, y):\n\tit always allowed y < 1 but objected to y > frequency.\n\n    o\tunique.default() now works for POSIXct objects, and hence so\n\tdoes factor().\n\n\n    o\tPackage tcltk now allows return values from the R side to the\n\tTcl side in callbacks and the R_eval command. If the return\n\tvalue from the R function or expression is of class \"tclObj\"\n\tthen it will be returned to Tcl.\n\n    o\tA new HIGHLY EXPERIMENTAL graphical user interface using the tcltk\n\tpackage is provided. Currently, little more than a proof of concept.\n\tIt can be started by calling \"R -g Tk\" (this may change in later\n\tversions) or by evaluating tkStartGUI(). Only Unix-like systems\n\tfor now. It is not too stable at this point; in particular, signal\n\thandling is not working properly.\n\n\n    o\tChanges to support name spaces:\n\n\t- Placing base in a name space can no longer be disabled by\n\t  defining the environment variable R_NO_BASE_NAMESPACE.\n\n\t- New function topenv() to determine the nearest top level\n\t  environment (usually .GlobalEnv or a name space environment).\n\n\t- Added name space support for packages that do not use methods.\n\n    o\tFormal classes and methods can be `sealed', by using the\n\tcorresponding argument to setClass or setMethod.  New\n\tfunctions isSealedClass() and isSealedMethod() test sealing.\n\n    o\tpackages can now be loaded with version numbers. This allows\n\tfor multiple versions of files to be installed (and potentially\n\tloaded). Some serious testing will be going on, but it should\n\thave no effect unless specifically asked for.\n\n\nINSTALLATION CHANGES\n\n    o\tTITLE files in packages are no longer used, the Title field\n\tin the DESCRIPTION file being preferred.  TITLE files will be\n\tignored in both installed packages and source packages.\n\n    o\tWhen searching for a Fortran 77 compiler, configure by default\n\tnow also looks for Fujitsu's frt and Compaq's fort, but no\n\tlonger for cf77 and cft77.\n\n    o\tConfigure checks that mixed C/Fortran code can be run before\n\tchecking compatibility on ints and doubles: the latter test\n\twas sometimes failing because the Fortran libraries were not\n\tfound.\n\n    o\tPCRE and bzip2 are built from versions in the R sources if the\n\tappropriate library is not found.\n\n    o\tNew configure option --with-lapack to allow high-performance\n\tLAPACK libraries to be used: a generic LAPACK library will be\n\tused if found.\tThis option is not the default.\n\n    o\tNew configure options --with-libpng, --with-jpeglib, --with-zlib,\n\t--with-bzlib and --with-pcre, principally to allow these\n\tlibraries to be avoided if they are unsuitable.\n\n    o\tIf the precious variable R_BROWSER is set at configure time\n\tit overrides the automatic selection of the default browser.\n\tIt should be set to the full path unless the browser appears\n\tat different locations on different client machines.\n\n    o\tPerl requirements are down again to 5.004 or newer.\n\n    o\tAutoconf 2.57 or later is required to build the configure\n\tscript.\n\n    o\tConfigure provides a more comprehensive summary of its results.\n\n    o\tIndex generation now happens when installing source packages\n\tusing R code in package tools.\tAn existing 'INDEX' file is used\n\tas is; otherwise, it is automatically generated from the \\name\n\tand \\title entries in the Rd files.  Data, demo and vignette\n\tindices are computed from all available files of the respective\n\tkind, and the corresponding index information (in the Rd files,\n\tthe 'demo/00Index' file, and the \\VignetteIndexEntry{} entries,\n\trespectively).\tThese index files, as well as the package Rd\n\tcontents data base, are serialized as R objects in the 'Meta'\n\tsubdirectory of the top-level package directory, allowing for\n\tfaster and more reliable index-based computations (e.g., in\n\thelp.search()). For vignettes an HTML index is generated\n\tand linked into the HTML help system.\n\n    o\tThe Rd contents data base is now computed when installing source\n\tpackages using R code in package tools.\t The information is\n\trepresented as a data frame without collapsing the aliases and\n\tkeywords, and serialized as an R object.  (The 'CONTENTS' file\n\tin Debian Control Format is still written, as it is used by the\n\tHTML search engine.)\n\n    o\tA NAMESPACE file in root directory of a source package is copied\n\tto the root of the package installation directory.  Attempting to\n\tinstall a package with a NAMESPACE file using --save signals an\n\terror; this is a temporary measure.\n\n    o\tThe defaults for configure for Darwin systems is\n\t--with-blas='-framework vecLib' --with-lapack --with-aqua\n\tthat by default builds R as a framework and installs it in\n\t/Library/Frameworks as R.framework. Then, make install just\n\tinstalls the R.framework in /Library/Frameworks unless specified\n\tat configure time using the -enable-R-framework=[DIR] or using\n\tthe --prefix flag at installation time.\n\nDEPRECATED & DEFUNCT\n\n    o\tThe assignment operator `_' will be removed in the next\n\trelease and users are now warned on every usage: you may even see\n\tmultiple warnings for each usage.\n\n\tIf environment variable R_NO_UNDERLINE is set to anything of\n\tpositive length then use of `_' becomes a syntax error.\n\n    o\tmachine(), Machine() and Platform() are defunct.\n\n    o\trestart() is defunct.  Use try(), as has long been recommended.\n\n    o\tThe deprecated arguments `pkg' and `lib' of system.file() have\n\tbeen removed.\n\n    o\tprintNoClass() {methods} is deprecated (and moved to base,\n\tsince it was a copy of a base function).\n\n    o\tPrimitives dataClass() and objWithClass() have been replaced\n\tby class() and class<-(); they were internal support functions\n\tfor use by package methods.\n\n    o\tThe use of SIGUSR2 to quit a running R process under Unix is\n\tdeprecated, the signal may need to be reclaimed for other\n\tpurposes.\n\n\nUTILITIES\n\n    o\tR CMD check more compactly displays the tests of DESCRIPTION\n\tmeta-information.  It now reports demos and vignettes without\n\tavailable index information.  Unless installation tests are\n\tskipped, checking is aborted if the package dependencies cannot\n\tbe resolved at run time.  Rd files are now also explicitly\n\tchecked for empty \\name and \\title entries.  The examples are\n\talways run with T and F redefined to give an error if used\n\tinstead of TRUE and FALSE.\n\n    o\tThe Perl code to build help now removes an existing example\n\tfile if there are no examples in the current help file.\n\n    o\tR CMD Rdindex is now deprecated in favor of function Rdindex()\n\tin package tools.\n\n    o\tSweave() now encloses the Sinput and Soutput environments of\n\teach chunk in an Schunk environment. This allows to fix some\n\tvertical spacing problems when using the latex class slides.\n\n\nC-LEVEL FACILITIES\n\n    o\tA full double-precision LAPACK shared library is made\n\tavailable as -lRlapack.\t To use this include\n\t$(LAPACK_LIBS) $(BLAS_LIBS) in PKG_LIBS.\n\n    o\tHeader file R_ext/Lapack.h added.  C declarations of BLAS\n\troutines moved to R_ext/BLAS.h and included in R_ext/Applic.h\n\tand R_ext/Linpack.h for backward compatibility.\n\n    o\tR will automatically call initialization and unload routines, if\n\tpresent, in shared libraries/DLLs during dyn.load() and\n\tdyn.unload() calls. The routines are named R_init_<dll name>\n\tand R_unload_<dll name>, respectively.\tSee the Writing R\n\tExtensions Manual for more information.\n\n    o\tRoutines exported directly from the R executable for use with\n\t.C(), .Call(), .Fortran() and .External() are now accessed via\n\tthe registration mechanism (optionally) used by packages.  The\n\tROUTINES file (in src/appl/) and associated scripts to\n\tgenerate FFTab.h and FFDecl.h are no longer used.\n\n    o\tEntry point Rf_append is no longer in the installed headers\n\t(but is still available).  It is apparently unused.\n\n    o\tMany conflicts between other headers and R's can be avoided by\n\tdefining STRICT_R_HEADERS and/or R_NO_REMAP -- see `Writing R\n\tExtensions' for details.\n\n    o\tNew entry point R_GetX11Image and formerly undocumented\n\tptr_R_GetX11Image are in new header R_ext/GetX11Image.\tThese\n\tare used by package tkrplot.\n\n\nBUG FIXES\n\n    o\tThe redefinition of the internal do_dataentry by both the aqua and X11\n\tmodules, casued a bus error when launching R without the --gui=aqua option\n\tunder X11 using a version of R built to use the aqua module. This has\n\tnow been fixed. (PR#6438)\n\n    o\tSys.sleep() on Unix was having trouble with waits of less than 0.5s\n\n    o\tThe fix to PR#2396 broke read.table() on files with CR line\n\tendings. (PR#2469)   Separate problem with this on Carbon Mac OS\n\tbuild fixed as well.\n\n    o\tConverting Sweave files to noweb syntax using SweaveSyntConv()\n\twas broken.\n\n    o\tPrinting numbers near the minimum could get the number of\n\tsignificant figures wrong due to underflow: for example 4e-308\n\tmight print as 4.00000e-308.  (Seen on some Windows builds,\n\tand also on numbers around 1e-317 on Linux.)\n\n    o\twilcox.test() could give integer overflow warnings on very long\n\tvectors.  Also added tests for numeric inputs, as per the help\n\tpage.  (PR#2453)\n\n    o\tPrinting unquoted character vectors containing escape\n\tcharacters was computing the wrong length and hence\n\tmisaligning names.  This was due to a bug in Rstrlen which\n\tmight have had other effects.\n\n    o\tif(logical(0)) and while(logical(0)) now report zero length,\n\tnot `missing value where logical is needed'.\n\n    o\tThe gaussian() and inverse.gaussian() families were documented\n\tto allow only one link, which has not been true in R for at\n\tleast four years.\n\n    o\tprmatrix() forced conversion to character if `na.print' was\n\tused, and that conversion neither respected `digits' nor\n\t`quote'.\n\n    o\tRprof() might give misleading results for too small values of\n\t`interval' and in practice the default 20ms was about as small\n\tas is advisable on Linux.  Now the interval is forced to be at\n\tleast one clock tick.\n\n    o\tsummary.data.frame() was not giving interpretable results when\n\tthe data frame contained a data frame as a column. (PR#1891)\n\n    o\tdelete.response() might re-order the rhs terms so prediction\n\tmight fail or even give incorrect results. (PR#2206)\n\n    o\tStructTS() now accepts numeric time series of integer storage mode.\n\n    o\tall(), any() now handle NAs as documented.\n\n    o\tSubsetting arrays to a result with 0 dimension(s) failed if\n\tthe array had dimnames. (PR#2507)\n\n    o\tIf the call to data.frame() included 0-row arguments, it tried\n\tto replicate them to the maximum number of rows, and failed if\n\tthis was 1 or more.\n\n    o\treplicate() now understands data frames to which na.omit() has\n\tbeen applied.\n\n    o\tis.ts() was too liberal: a time series must have at least one point.\n\n    o\tmethods() was sorting by package, not by name.\n\n    o\tsymbols(thermometers=) was often giving a spurious warning about\n\tthe range.\n\n    o\ttcltk was using deprecated internals of the Tcl library when\n\taccessing error messages.  Not likely to be a user-visible\n\tchange.\n\n    o\tThe automatic search for BLAS libs now tries Sun's libsunperf\n\tthe way the latest versions require. (PR#2530)\n\n    o\tstr(array(1)) now does show the array.\n\tstr(Surv(...)) now works again.\n\n    o\tstep(), add1.default() and drop1.default() now work somewhat\n\tbetter if called from a function.\n\n    o\tpage() was searching from the wrong environment, and so\n\tsearching base before the workspace.\n\n    o\tcrossprod(Z) for complex Z was returning nonsense.\n\n    o\tLa.chol2inv() gave incorrect results unless the matrix was square.\n\n    o\tWhen the POSIXt date functions were required to guess DST,\n\tthey sometimes guessed correctly that DST was in force but\n\tconverted a POSIXlt time as if standard time was given.\n\n    o\tc/rbind were not handling zero col/row matrices correctly.\n\t(PR#2541 was one symptom.)\n\n    o\tapprox() and approxfun() now work with 1 knot if\n\tmethod = \"constant\".  stepfun(), ecdf() and plot.stepfun() do so\n\tas well.\n\n    o\tAIC.lm/default was failing if multiple objects and k were\n\tspecified.  (PR#2518)\n\n    o\tremoveMethods{methods} was broken. (PR#2519)\n\n    o\tsummary.glm() had two `aic' components in the returned object.\n\n    o\tautoload() was returning the value of its last command, a\n\tpromise, even though it was documented to have no value.\n\tAs a result some packages (e.g. nlme) were loading packages\n\tthey meant to autoload.\n\n    o\tFixes to methods and classes:\n\t   - show() is consistent with using setOldClass for S3 classes.\n\t   - several problems with the coerce and replace methods\n\t     generated by setIs have been fixed.\n\t   - more thorough tests & informative messages for invalid\n\t     `def' arguments to setGeneric\n\t   - setGeneric will now create the generic function even when\n\t     a generic of the same name already exists (it does issue\n\t     a warning).\n\n    o\tunz() connections could no longer be opened. (PR#2579)\n\n    o\tunique(ordered factor) returned an unordered factor. (PR#2591)\n\n    o\tx[] <- value coerced x to the mode of value if and only if x\n\thad length 0!  (Should only happen if x is null: PR#2590)\n\n    o\tlm() mislabelled the cols of the qr decomposition. (cause of PR#2586)\n\n    o\tdata() looks for file extensions in an order prescribed in the\n\thelp file: previously whether foo.R or foo.csv was used was\n\tlocale-dependent.\n\n    o\tsys.function() now returns the actual function being evaluated in\n\tthe specified frame rather than one inferred from the call.\n\n    o\tmatch.call() now uses the definition of the actual function being\n\tevaluated rather than one inferred from the call.\n\n    o\tabbreviate(*, dot = TRUE) now only adds a \".\" where abbreviations\n\tdid happen.\n\n    o\tChanging timezones in the POSIXt functions was not working on\n\tsome Linux systems, and this has been corrected.\n\n    o\tks.test() in package ctest had numerical problems in the lower\n\ttail of the asymptotic distribution (PR#2571).\n\n    o\tSweave() now handles empty chunks at the end of files correctly.\n\n    o\t[<-() lost the object bit if coercion was involved.\n\n    o\tpackage::object wasn't being deparsed properly.\n\n    o\tseq.POSIXt() with `by' an object of class \"difftime\" ignored\n\tthe units.\n\n    o\trank(c(\"B\", NA)) no longer returns character.\n\n    o\treference to by() added in ?tapply\n\n    o\t?lm describes what happens with matrix response\n\n    o\tThe X11 device has improved event handling. In particular it\n\tused to often miss the last of a series of resize events.\n\n    o\tlm.influence() and related functions now work again for the\n\tmultivariate case and when there are zero weights.\n\n    o\tformat( <character> ) now always keeps names and dimnames.\n\n    o\ttable(factor(c(2,NA), exclude=NULL)) prints better now.\n\n    o\tpredict(foo, type = \"terms\") and hence\n\tresiduals(foo, type = \"partial\") now work for lm and glm objects\n\twith weights zero.  Further, model.matrix() is now only called once.\n\n    o\tR CMD config now works correctly when called from a Makefile\n\tusing GNU make.\n\n    o\tThe data.frame method for rbind() was\n\t- converting character columns to factors,\n\t- converting ordered factor columns to unordered factors,\n\t- failing to append correctly a factor to a character column\n\t  and vice versa.\n\n    o\tas.hclust.twins() now does provide proper `labels', `method' and\n\t`call' components.\n\n    o\tcycle() sometimes failed on a time series which started at a cycle\n\tother than 1.\n\n    o\tread.dcf() read incorrectly files which did not end in a new line.\n\n    o\tread.socket() dropped certain non-alphanumeric characters. (PR#2639)\n\n    o\ttermplot() handles missing data better (PR#2687,\n\t <Mark.Bravington@csiro.au>)\n\n    o\tCorrected MacRoman encoding for Icircumflex etc.\n\n\n\n\t**************************************************\n\t*\t\t\t\t\t\t *\n\t*\t       1.6 SERIES NEWS\t\t\t *\n\t*\t\t\t\t\t\t *\n\t**************************************************\n\n\n\t\tCHANGES IN R VERSION 1.6.2\n\n\nBUG FIXES\n\n    o\tplot.stepfun() now obeys a `ylim=.' specification.\n\n    o\tremoveClass() does a better job of removing inheritance\n\tinformation.\n\n    o\tsetIs() will not allow mismatched representations between two\n\tclasses (without an explicit coerce method).\n\n    o\tThe code underlying polygon drawing contained a memory leak.\n\tThis showed up in persp, but did not affect other graphics\n\tfunctions.  It is now possible to draw big DEMs.\n\n    o\tlogLik.nls() gave wrong df. (PR#2295)\n\n    o\trbind() with a mixture of data frames and matrices treated the\n\tmatrices as vectors. (PR#2266)\n\n    o\tstripchart(method=\"stack\") was not handling missing values. (PR#2018)\n\n    o\tArithmetic functions such as log() lost the object bit from\n\tclassed objects if coercion was needed. (PR#2315)\n\n    o\texp_rand would go into an infinite loop if unif_rand returned 0.\n\n    o\tformatC(x, format=\"fg\") could return exponential format if\n\trounding pushed x over a positive power of 10. (PR#2299)\n\n    o\tattr(x, foo) used partial matching for `foo' (even though not\n\tdocumented to do so), and failed to find `foo' if there were\n\ttwo or more partial matches before the exact match in the list\n\tof attributes.\n\n    o\tRdconv now creates direct HTML hyperlinks when linking to\n\tdocumentation in the same package.  The code now ensures that\n\tlinks which can be resolved within the package are so resolved,\n\teven when there are possible resolutions in other packages.\n\n    o\tIf readBin(what=character()) is used incorrectly on a file which\n\tdoes not contain C-style character strings, warnings (usually\n\tmany) are now given.\n\n    o\tBuilding libR.so with the zlib in the R sources was not\n\tfinding the local zlib headers.\n\n    o\tsystem(intern=TRUE) has an undocumented line length limit of\n\t119 chars both on Unix and Windows.  The limit is now 8096 and\n\tdocumented.  On Unix (only) every 120th character used to be\n\tdiscarded.\n\n    o\tplot.POSIX[cl]t were not passing graphics parameters on to\n\taxis.POSIXct.\n\n    o\tOn some HP-UX systems, installed scripts were not executable\n\twhen using the BSD-compatible install system program found by\n\tconfigure.  We now always use install-sh on HP-UX. (PR#2091)\n\n    o\tc() was converting NA names to \"NA\": now proper NA strings are\n\tused wherever possible. (PR#2358)\n\n    o\tChecks in the C code prevent possible memory faults when\n\tstandardGeneric is called invalidly.\n\n    o\tMacros NEW_OBJECT (aka NEW) and MAKE_CLASS added; required by\n\tthe .Call interface to generate arbitrary objects.\n\n    o\tA typo was causing segfaults when using data.entry under SuSE.\n\n    o\tmostattributes<-() was failing to copy across dimnames when\n\tone component was NULL, affecting pmax() and pmin() when the\n\tfirst argument was a matrix.  (root cause of PR#2357)\n\n    o\tThe pdf() device now initialises graphical parameters\n\tproperly.  (PR#2281)\n\n    o\tChecks in the C code prevent possible memory faults when\n\tstandardGeneric is called invalidly.\n\n    o\tMacros NEW_OBJECT (aka NEW) and MAKE_CLASS added; required by\n\tthe .Call interface to generate arbitrary objects.\n\n    o\tProblem that prevented package tcltk from working with Tcl/Tk\n\t8.4 (crash on initialization) resolved.\t (Notice that binaries\n\tmay still require an older Tcl/Tk, for example on Windows).\n\n    o\ttype.convert() was not getting the levels right if passed a\n\tcharacter vector containing <NA>s, and `na.strings' did not\n\tcontain \"NA\".  This affected read.table().\n\n    o\tInternal match function did not check for nor handle 0-length\n\tvectors.  (The R function match() did.)\t This could cause\n\ttype.convert() to segfault.\n\n    o\tThe line length limit in output text connections has been\n\traised to 8095 chars.\n\n    o\tSweave now uses anonymous file rather than text connections\n\tto avoid the limits of the latter (see previous item).\n\n    o\tparsing did not work on connections when pushback was used (as\n\tit had never been implemented).\t (PR#2396)\n\n    o\tmax.col() only found NAs in the first column (typo).\n\n    o\tAdded a workaround for recent versions of glibc (e.g. RedHat 8.0)\n\twith inconsistent mktime/localtime functions which caused\n\tconversion to/from POSIXct times prior to 1970-01-01 to be\n\tinconsistent.  On such platforms this is a run-time test to\n\tallow e.g. R compiled on RH7.2 to run on RH8.0.\n\n    o\tClipping was not being reset properly between plots on the gtk()\n\tdevice (the default under the GNOME interface). (PR#2366)\n\n    o\taxis(*, fg= cc) now works (again) the same as axis(*, col = cc).\n\n\n\n\t\tCHANGES IN R VERSION 1.6.1\n\n\nNEW FEATURES\n\n    o\tAdded a few \"trivial and obviously missing\" functions to tcltk:\n\ttkchooseDirectory, tkpopup, tkdialog, tkread\n\n    o\tbarplot() has a new argument `axis.lty', which if set to 1\n\tallows the pre-1.6.0 behaviour of plotting the axis and tick\n\tmarks for the categorical axis.\t (This was apparently not\n\tintentional, but axis() used to ignore lty=0.)\n\tThe argument `border' is no longer \".NotYetUsed\".\n\n\nBUG FIXES\n\n    o\thist(<datetime>, cex.axis = f)\tnow works for x-axis too.\n\n    o\tprompt() gave wrong \\usage{.} for long argument default expressions.\n\n    o\tsummary(x) gives more information when `x' is a logical\n\t(or a data frame with a logical column which is now quite customary).\n\n    o\tseq.POSIXt(from, to, length.out= . ) could give too long results\n\n    o\tsummaryRprof() was counting nested calls to the same function\n\ttwice.\n\n    o\tPrinting of objects of mode \"expression\" did strange things if\n\tthere were \"%\" characters in the deparsed expression (PR#2120).\n\n    o\tas.matrix.data.frame converted missings to \"NA\" not character NA.\n\t(PR#2130)\n\n    o\tspec.pgram() was only interpolating zero freq for one series. (PR#2123)\n\n    o\thelp(randu) had % unescaped in the example. (PR#2141)\n\n    o\tMaking html links would fail if packages-head.html was not\n\twritable. (PR#2133)\n\n    o\tSweave.sty was not installed to $R_HOME/share/texmf when\n\tbuilddir != srcdir. On Windows backslashes in latex paths have\n\tto be replaced by slashes.\n\n    o\tA memory leak in deparsing was introduced when eliminating\n\tstatic variables (thanks to Achim Zeileis for spotting this).\n\tA similar problem in loading workspaces has been corrected.\n\n    o\tTclInterface.Rd incorrectly used \\synopsis for \\usage so that\n\tthe usage section wasn't output.\n\n    o\tReadline stack off-by-one error. (PR#2165)\n\n    o\tR_ExpandFileName had a memory leak in the case libreadline was\n\tused under Unix-alikes.\n\n    o\tsys.save.image() now closes all connections so it will work even\n\tif the connection list has become full.\n\n    o\tloess() had an unstated limit of four predictors: this is now\n\tdocumented and enforced.\n\n    o\t${R_HOME}/etc/Renviron.site is now not read if R_ENVIRON is\n\tset, as documented.  Previously it was read unless R_ENVIRON\n\tpointed to an actual file.\n\n    o\tStartup.Rd described the processing under Unix-alikes but\n\tincorrectly implied it happened that way on the Windows and\n\tMac OS ports.  Neither use Renviron.site, for example.\n\n    o\tbesselK(x,*) now returns 0 instead of Inf for large x. (PR#2179)\n\n    o\tThe Tcl console code didn't work with Tcl/TK 8.0, and has been\n\t#ifdef'd out.  (PR#2090)\n\n    o\tformat.AsIs() was not handling matrices.\n\n    o\tsd() was not passing na.rm to var() for matrices and data frames.\n\n    o\tdist() {mva} silently treated +/-Inf as NA.\n\n    o\tsetwd() now returns NULL invisibly.\n\n    o\tbasename() and dirname() did not check the length of their\n\tinput and ignored elements after the first.  This affected\n\tundoc {tools}.\n\n    o\tIf A had dimnames, eigen(A) had inappropriate dimnames. (PR#2116)\n\n    o\tas.POSIXct.dates had a sign error for the origin (PR#2222)\n\n    o\tThe claim that pie charts should be avoided (in pie.Rd) is now\n\tsupported by a quote from Cleveland (1985).\n\n    o\tThe vsnprintf() functions supplied for systems that don't\n\tsupply their own had a bug in the output of fractional parts,\n\tcorrupting data if using save() with ascii=TRUE. (PR#2144)\n\n    o\tpretty() values close to 0 in some cases which are now 0 (PR#1032\n\tand D.Brahm's mails).\n\n    o\tfactor.scope() was giving an error rather than a reasonable\n\tdefault in some cases when it was called incorrectly (e.g. via\n\tincorrect formula in add1()).\n\n\nBUILD ISSUES\n\n    o\tToplevel Makefile was missing dependency of \"docs\" on \"R\" (causing\n\tparallel makes to go wrong)\n\n    o\tWhen building with recommended packages those were installed\n\tinto the first path in R_LIBS, if the environment variable was\n\tpresent.\n\n\n\n\t\tCHANGES IN R VERSION 1.6.0\n\n\nUSER-VISIBLE CHANGES\n\n    o\tThe default colour palette now has \"grey\" instead of \"white\"\n\tin location 8.\tSee palette().\n\n    o\tgrid(nx) behaves differently (but the same as in R versions <= 0.64).\n\n\nNEW FEATURES\n\n    o\tNew operator :: in the grammar, for name spaces.\n\n    o\tNew faster rowsum(), also works on data frames.\n\n    o\tgrep(), (g)sub() and regexpr() have a new argument `perl'\n\twhich if TRUE uses Perl-style regexps from PCRE (if installed).\n\tNew capabilities option \"PCRE\" to say if PCRE is available.\n\n    o\tPreparations for name space support:\n\n\t- Functions in the base package are now defined in a name space.\n\t  As a temporary measure, you can disable this by defining the\n\t  environment variable R_NO_BASE_NAMESPACE.\n\n\t- UseMethod dispatching now searches for methods in the\n\t  environment of the caller of the generic function rather\n\t  than the environment where the generic is defined.\n\n    o\tThe objects created in the methods package to represent\n\tclasses, generic functions, method definitions, and\n\tinheritance relations now themselves belong to true classes.  In\n\tparticular, the \"classRepresentation\" objects follow the description\n\tin \"Programming with Data\" (section 7.6).\n\n    o\tOther additions and changes to the methods package:\n\n\t- The function setOldClass() has been added, following the\n\t  description on page 450 of \"Programming with Data\".  Use it\n\t  if old-style classes are to be supplied in signatures for\n\t  setMethod, particularly if the old-style classes have\n\t  inheritance.\tMany of the old-style classes in the base\n\t  package should be pre-specified; try getClass(\"mlm\"), e.g.\n\n\t- The setGeneric() function applies some heuristics to warn\n\t  about possibly erroneous generic function definitions.\n\t  (Before, obscure bugs could result.)\n\n\t- The function promptMethods() has been revised to work better\n\t  and to provide aliases for individual methods.\n\n\t- The behavior of the as() function has been generalized, in\n\t  particular with a strict= argument, the general goal being\n\t  to let simple extensions of classes pass through in method\n\t  dispatch and related computations without altering the\n\t  objects. More to make method behavior more \"natural\" than\n\t  for direct use.\n\n\t- Some inconsistencies following detach(\"package:methods\")\n\t  have been removed, so it _should_ be possible to\n\t  detach/re-attach the methods package.\n\n    o\tNew methods ([[, print, str) and extended plot() method\n\t(incl. logical `horiz') for \"dendrogram\" class.\n\n    o\tsprintf() now checks the agreement between formats and object\n\ttypes, and handles special values (NA, Inf, ...) correctly.\n\n    o\tchol() now uses a tolerance for non-positive-definiteness and\n\tso should give more consistent results across platforms.\n\n    o\tNew function agrep() for approximate (fuzzy) string matching.\n\n    o\thelp.search() can now use both approximate (fuzzy) and regular\n\texpression matching.  By default, if the pattern to be matched\n\tconsists of only alphanumeric characters, whitespace or a dash,\n\tapproximate matching is used.\n\n    o\taxis() has three new optional arguments `col', `lty', and `lwd'\n\tall for drawing the axis line and tick marks.\n\n    o\tFunction vcov() (formerly in MASS), a generic function to\n\treturn the variance-covariance matrix of the parameter\n\testimates of a fitted model.\n\n    o\tduplicated() and unique() have methods for matrices and arrays\n\t(based on ideas from Jens Oehlschlaegel).\n\n    o\tInternally memory sizes and counts of cons cells are now stored\n\tin unsigned longs.  This allows memory limits to be set and\n\tobjects created in the range 2-4Gb on 32-bit platforms, and\n\tallows 64-bit platforms to use much larger amounts of memory.\n\n    o\tCommand-line flags to set memory can now use the suffix `G'\n\tfor gigabytes.\tThe setting of maximum vsize is now only\n\tlimited by the platform's address space.\n\n    o\tAll warning and error messages are truncated to a length set\n\tby options(warning.length=), defaulting to 1000.  (Previously\n\tmost (but not quite all) were truncated at 8192 characters.)\n\n    o\t[dpqr]gamma() check for shape parameter > 0.\n\n    o\tas.POSIX[cl]t can now convert logical NAs.\n\n    o\tAll installed packages (even those shipped with R) are\n\tgiven a `Built' field in the DESCRIPTION file.\n\n    o\tas.data.frame() now coerces logical matrices into logical\n\tcolumns (rather than factors).\n\n    o\t[[<-.data.frame no longer coerces character replacement values\n\tto factor.  This is consistent with using $ to replace and\n\twith S4.\n\n    o\tlibrary() attempts to detect improperly installed packages, so\n\tas from this version an installed package must have a\n\tDESCRIPTION file and that file must have been stamped with a\n\t`Built:' line (which was introduced in 1.2.0).\tUnder\n\tUnix-alikes, the platform is checked against that used for\n\tinstallation.\n\n    o\tprint.factor() has new arguments `max.levels' (with a smart default)\n\tand `width'.  print.ordered() is no longer needed.\n\n    o\tRNGkind() has an additional option for normal random generators:\n\t\"Inversion\".\n\n    o\tdata.frame() recycles factors and \"AsIs\" objects as well as\n\tatomic vectors.\n\n    o\tpredict.lm() warns if `newdata' is supplied and the fit was\n\trank-deficient, as this can be misleading.\n\n    o\trect() accepts additional graphics parameters through a ...\n\targument (in the same way as polygon).\n\n    o\tstrwidth/strheight() now coerce their first argument in exactly\n\tthe same way text() does, so a wider range of inputs is allowed.\n\n    o\tprompt()'s default and data.frame methods have a new 3rd argument\n\t`name' allowing them to used more easily in scripts and loops.\n\n    o\trgb() has a new `maxColorValue' argument, allowing r,g,b in [0,M],\n\tparticularly in {0:255}, efficiently and non-error-prone.\n\n    o\tsummaryRprof() provides the functionality of R CMD Rprof in R\n\tcode, though more slowly.\n\n    o\tstop() accepts multiple arguments (which are concatenated)\n\tjust as warning() does.\n\n    o\tscan() now throws an error with incorrect logical input (which\n\twas previously taken as FALSE).\n\n    o\tpdf() now uses PDF not R code for clipping, which ensures that\n\tpartially visible text strings are (partially) shown.\n\n    o\tEach R session uses a per-session temporary directory which\n\tis removed at normal termination.  The directory name is given\n\tby the tempdir() function, and filenames returned by\n\ttempfile() will be within that directory.\n\n    o\thelp.start() on Unix now uses a .R subdirectory of the\n\tper-session temporary directory and not ~/.R.  A side effect\n\tis that ~/.R is now never deleted by R.\n\n\tThis now uses the remote control mechanism only if the X\n\tdisplay is local to the R process (as otherwise it might use a\n\tbrowser running on an arbitrary machine).\n\n    o\t*Very* experimental browseEnv() for browsing objects in an\n\tenvironment.\n\n    o\tcbind/rbind() used to ignore all zero-length vectors, an\n\tundocumented quirk for S-compatibility.\t This caused problems\n\twhen combining zero-extent matrices and zero-length vectors, and\n\tnow zero-length vectors are ignored unless the result would\n\thave zero rows/columns.\n\n    o\tread.table(stdin()) will now work.\n\n    o\tplot.spec(x) now also works for other x than AR and Pgram results.\n\n    o\tNew functions La.chol() and La.chol2inv() for Cholesky\n\tdecomposition and inverse of positive definite matrices using\n\tLapack.\n\n    o\tChanges to the tcltk package\n\n\t- on Unix systems, the Tcl event loop has been integrated with\n\t  R's own (so that tkwait.variable() no longer halts updates of\n\t  plot windows).\n\n\t- also on Unix, stubs have been created to divert R's input\n\t  and output routines to go via Tcl commands. (Nothing\n\t  uses this at present, but packages might be developed to\n\t  take advantage of it.)\n\n\t- return value from Tcl commands is no longer invisible. A new\n\t  print method, print.tclObj(), has been introduced.\n\n\t- Tcl variables created by tclVar() are now explicitly put into\n\t  Tcl's global namespace, removing potential scoping problems.\n\n\t- The tcltk dynamic library now loads with local=FALSE since\n\t  the default had trouble when loading Tcl extensions\n\t  (e.g. Tix)\n\n\t- The tkpager() function had not been updated for the return\n\t  value change from 1.5.0\n\n    o\tThe bmp(), jpeg() and png() devices can produce multiple\n\tbitmap files, one for each page.  The default filenames have been\n\tchanged to include a sequence number.\n\n    o\tNew function axTicks() returning tick mark locations like axis().\n\n    o\tgrid() has a more sensible default behavior.  Tick axis alignment\n\tonly happens when no numbers of grid cells are specified.  New\n\targuments lwd and equilogs; nx/ny = NA for not drawing, see ?grid.\n\n    o\tinstalled.packages() has a new argument `priority'.\n\n    o\ttermplot() uses factor levels rather than 1,2,3... for x-axis.\n\n    o\tWorkaround for optimization bugs on gcc 3.1/2 on 32-bit Solaris.\n\n    o\tThe trace() function has been robustified and a new function\n\ttracingState() added to turn tracing temporarily on and off.\n\n    o\tNew cophenetic() in \"mva\" as utility for hierarchical clustering.\n\n    o\tp.adjust() has two new methods, 'Hommel' and 'FDR', contributed\n\tby Gordon Smyth <smyth@wehi.edu.au>.\n\n    o\tstars() now has add and plot arguments.\n\n\nDEPRECATED & DEFUNCT\n\n    o\tThe assignment operator `_' is deprecated: a warning is\tgiven\n\tonce per R session.\n\n    o\tmachine() is deprecated in favour of .Platform$OS.type.\n\tMachine() and Platform() are deprecated in favour of .Machine\n\tand .Platform.\n\n    o\tarima0.diag() (package ts) is defunct.\n\n    o\tpiechart() is defunct.\n\n    o\tprint.ordered() has been removed, so print.factor() is used.\n\n    o\tThe global internal variables .Dyn.libs and .lib.loc are\n\tremoved in favor of the internal functions .dynLibs() and\n\t.libPaths().\n\n    o\trestart() is deprecated in preparation for proper exception\n\thandling.  Use try(), as has long been recommended.\n\n\nDOCUMENTATION CHANGES\n\n    o\tNew demo(persp) containing some of the former example(persp) ones\n\tand more.\n\n\nC-LEVEL FACILITIES\n\n    o\tRversion.h is no longer automatically included by R.h.\n\tInclude it explicitly if you need it.\n\n    o\tNew entry point R_tmpnam in Utils.h.\n\n    o\tThe Unix event loop interface has been changed to facilitate\n\tintegration with other loops. R_checkActivity and\n\tR_runHandlers should eventually replace getSelectedHandler.\n\n\nINSTALLATION CHANGES\n\n    o\tPerl 5.005 or newer is now required.\n\n    o\tR CMD INSTALL is now guaranteed to sort the R source files in\n\tASCII order.\n\n\nUTILITIES\n\n    o\tR CMD check now tests for mis-use on an installed or binary\n\tpackage, and sets 'T' and 'F' to 'NULL' when running the\n\texamples.\n\n    o\tNew function SweaveSyntConv() converts between Sweave file\n\tsyntaxes. RweaveLatex() now gets its prompt from options() and\n\tuses the text width as linebreak cutoff for deparsing input\n\tstatements.\n\n\nBUG FIXES\n\n    o\taxis() was not respecting par(\"mgp\")[3] by default.\n\t(PR#916)\n\n    o\ttcltk back-compatibility fix for tcl8.0\n\n    o\thist.POSIXct(*, breaks) now works for `breaks = #{breaks}' and\n\twhen `x' has NAs; the latter applies to cut.POSIXct() as well.\n\n    o\tThe internal download.file() methods were setting the proxy\n\tport to 0 unless it was specified.\n\n    o\tpoly() did not work for >=3 column matrices.\n\n    o\tcut.default() was not handling infinite values with infinite\n\tbreaks.\t (PR#1694)\n\n    o\tks.test() could fail due to integer overflow if n.x and n.y\n\twere both large.\n\n    o\tall.equal(3., 3:3) wasn't TRUE when the methods package was\n\tpresent.\n\n    o\tread.table() could remap non-syntactic names to duplicates,\n\tand did not check for duplicated names.\n\n    o\tls.str(envir = environment(F)) now works (when F is a function).\n\n    o\tpie() now has a `border' (and 'lty') argument which allows empty\n\tslice borders and makes pie() useable for hundreds of slices.\n\n    o\tall.equal.character() now works correctly also when NAs don't\n\tmatch (PR#1767).\n\n    o\tall.equal.numeric() now gives character {instead of list} when\n\tlengths don't match.\n\n    o\tread.dcf() had a memory leak.\n\n    o\tSetting \"tcl = a\" in a highlevel graphic function worked almost\n\tas if par(tcl = a) was called (i.e. was persistent).  Further,\n\tafter par(tcl= <.>), highlevel graphic setting of tcl didn't work\n\tanymore.  \"tck\" has now S's default of -0.01 (when tcl=NA).\n\n    o\tdata() was not checking if ./data was a directory before\n\twarning.\n\n    o\tAssignment beyond the end of character strings was filling\n\twith \"\", whereas changing the length extended with NA_STRING.\n\tNow NA_STRING is used for both.\n\n    o\tboxplot()s with logarithmic scale in \"width-direction\" now have\n\tproper widths, i.e. typically constant.\n\n    o\tUsing GNU readline in asynchronous event callbacks (e.g. TclTk\n\tor Gtk) works correctly, i.e. doesn't cause readline to abort\n\tthe process.\n\n    o\tUsing Q to exit a browser invoked at the top-level could lead to\n\tthe browser being invoked on all future top-level loops (PR#1721)\n\n    o\tstep(fit, direction=\"both\") now uses both directions even if\n\tno scope is supplied.\n\n    o\tstrwidth(), strheight() now give 0 on NA strings (as they\n\tare no longer plotted). (PR#1739)\n\n    o\tmtext(), persp(), plot.hclust() and title() no longer plot NA\n\tcharacter strings.\n\n    o\tpdf() has been protected against the user who specified\n\tnon-existent fonts. (PR#1748)\n\n    o\tdlnorm() returns zero for negative x argument. (PR#1781)\n\n    o\tPrinting 0 in octmode gave \"\" not \"0\". (PR#1759)\n\n    o\tanova.glm() was ignoring a `dispersion' argument if given\n\tmultiple objects. (PR#1807)\n\n    o\tmodel.matrix() with a `rhs ~ .' formula included columns with\n\tduplicated names in the data frame, which caused subsequent\n\tconfusion (e.g. in prediction from the object).\n\n\tmodel.matrix() was sometimes incorrectly determining the first\n\tfactor in a formula without an intercept.\n\n    o\ttermplot() now needs data= argument more rarely. (PR#828)\n\n    o\tabline() on log scale doesn't draw -ve points. (PR#1243)\n\n    o\tThe Java search engine now works within Mozilla 1.0 and\n\tNetscape 6.2.x / 7.0pr1.\n\n    o\tunsplit() failed if f was a list of factors. (PR#1843)\n\n    o\tThe methods package generic version of primitives is now \"sealed\"\n\tand cannot be redefined (it was always a bad idea to do so).\n\n    o\tquantile() gave -Inf not NaN in some examples. (Related to PR#1852)\n\n    o\tread.table() read too far in checking the file structure if\n\t0 < nrows < 5 and more rows existed on the file. (PR1809)\n\n    o\tloess() was not checking for too small a span (so no points\n\twere included in the smoothing window).\n\n    o\tmatch() was assuming that there was only one possible bit\n\tpattern for a numeric NA, so some matches failed on Solaris\n\tunder some compiler options.\n\n    o\tidentical() no longer thinks NaN and as.double(NA) are identical.\n\n    o\tpipe() can open in a binary mode even on Linux (where popen\n\tcannot).\n\n    o\tzero-column matrices were not being printed at all, not even\n\tthe row names.\n\n    o\tpolygon()'s `border' argument was incorrectly documented: in\n\tparticular `border = 0' plots in background colour.\n\n    o\tdelete.response() was losing the attribute set for safe\n\tprediction. (PR#1840)\n\n    o\tpoly() was checking the degree against the number of points\n\teven when predicting.\n\n    o\tComparison of a data frame and list failed due to typo. (PR#1889)\n\n    o\tdput() and dump() attempt to check if writing succeeded. (PR#1884)\n\n    o\trep(1:2, 0) and hence array(1:2, 0) fail no longer.\n\n    o\tapply(matrix(\"\", 3, 0), 2, length) now works.\n\n    o\torder(na.last = NA, decreasing = TRUE) now sorts in decreasing\n\torder.\t(PR#1906)\n\n    o\torder(na.last=NA) failed if all args were of length 1 or all\n\twere NA. (PR#1913, 1981)\n\n    o\tsource() would crash if the `keep.source = TRUE' and the input\n\tcontained a function with a line longer than 1024 chars. (PR#1900)\n\n\tThe limits on nesting of functions and on total function size\n\twhen the source is kept are now enforced.  As (incorrectly)\n\tthe source was always kept, this meant functions longer than\n\t128Kb could crash R, even in packages.\n\n    o\tlqs() and cov.rob() check that the quantile argument does not\n\texceed n-1.\n\n    o\tgrid() now also works with log coordinates active.\n\n    o\tplot.table(tab, xlab=\"X\", ylab=\"Y\") now works as expected.\n\n    o\tplot.formula(ask=FALSE) now works. (PR#1923)\n\n    o\tas.list(<logical>) now works properly. (PR#1926).\n\n    o\tThe residual SSq printed from an aov() fit with weights is\n\tnow the weighted SSq.  (PR#1930)\n\n    o\taov() could still fail on multistrata models with very long\n\tError formulae.\n\n    o\ttry() could fail in BATCH use due to use of fflush(stdin).\n\tOnly seen on Solaris. (PR#1934)\n\n    o\ttitle(main=list(\"main\")) printed garbage, as did similar calls\n\tusing quote() instead of expression() for plotmath. (PR#1939)\n\n    o\tdeparse() dropped parentheses in some case where they were\n\tneeded. (PR#1119, 1737, 1928, at least)\n\n    o\tpdf(onefile = FALSE) never incremented the file number beyond\n\ttwo.\n\n    o\tOn Unix, protect against broken pipes where popen calls succeed\n\teven though the command does not exist (and the glibc manual\n\tsays it should return NULL).  (PR#1959)\n\n    o\tdata.frame() was allowing explicit row.names with missing\n\tvalues, but row names are required to be unique.\n\n    o\tas.character(expression) was silently truncating to 60\n\tcharacters: the help page claimed 500 which is now true.\n\n    o\tas.hclust(x) now also works (as identity) for \"hclust\" objects.\n\n    o\tNextMethod didn't work right in Ops.\n\n    o\tdotchart() now obeys `xlim ='.\n\n    o\tt(x) behaves when x is a (multivariate) time series. (PR#1998)\n\n    o\tparse(text=x) no longer parses from stdin if length(x) is zero\n\n    o\tbinom.test() miscalculated p-value in some extreme cases\n\n    o\tget(\"print.ts\")(1) would segfault. It's now just an error.\n\n    o\tcbind(NULL) {and similar} gave an error instead of NULL.\n\n    o\tthe complex version of solve(a,b) now also works if b is a\n\tvector\n\n\n\t\tCHANGES IN R VERSION 1.5.1\n\n\nNEW FEATURES\n\n    o\tEnhancements to mathematical annotation of plots:\n\n\t- expressions involving dot(<something>) now produce a dot accent\n\t  above the <something> (initial patch from Ben Bolker).\n\n\t- within an expression, the symbol partialdiff is now converted\n\t  to a partial differential symbol (greek delta).\n\n    o\tsmooth.spline() has a new argument `nknots' allowing to set the\n\tdefault number of knots (when `all.knots = FALSE' as per default).\n\n\nBUG FIXES\n\n    o\tRdconv now skips CRs in input files, even on Unix.\n\n    o\treadBin() had a (very slow) memory leak if changing size or reading\n\tcharacter strings.  writeChar() had a memory leak.\n\n    o\tpolygon() and rect() with lty = \"blank\" were omitting the fill\n\tcolour (if present).  symbols(circles=, lty=\"blank\") was\n\tdrawing the border of the disks.\n\n    o\tSubsetting non-existent rows in a data frame would produce\n\tmissing row names, which are not allowed.\n\n    o\tOn Unix, R_PAPERSIZE was set to '' instead of 'a4' as default on\n\tsystems without paperconf.\n\n    o\tUnder GNOME, capabilities() now reports correctly that X11, png\n\tand jpeg are available (if they are under X11).\n\n    o\tThe names of some results of unlist() had the wrong internal\n\tlength, which confused paste().\t Both have been corrected. (PR#1524)\n\n    o\tRweaveLatex.Rd had unbalanced braces in section \"Supported\n\tOptions\".\n\n    o\tmerge() with multiple and differently-named match columns\n\tfailed. (PR#1510)\n\n    o\tNAs in right-justified unquoted character matrices were being\n\tmis-aligned.  This mainly affected printing data frames.\n\n    o\tpredict.*bSpline() bugs extrapolating for deriv >= 1 (PR#1473),\n\tand predict.[bn]s bug e.g. for bs(x), reported by Ch.Sangiorgio.\n\n    o\tqr.X was failing if n < p.  Fixed, but only in the case when\n\tpivoting does not occur. (PR#1519)\n\n    o\txx[, 1:3] was returning a list if xx had only one row, even\n\tthough xx[1, 1:3] was a data frame. (PR#1530)\n\n    o\tnls() was reporting incorrectly the number of iterations if the\n\tmaximum was reached.\n\n    o\trbind.data.frame() was coercing logical columns to factors.\n\t(PR#1536)\n\n    o\tRprof(NULL) or Rprof(\"\") called when not profiling caused a\n\tsegfault: now silently ignored.\t (PR#1471)\n\n    o\tOn systems (e.g. Windows) using R's own code for expm1, the\n\tvalues were wrong for large negative x, and this affected\n\tpweibull(), for example.\n\n    o\tprettyNum(*, bigmark=*) added extra marks in some cases. (PR#1548)\n\n    o\tcut.dendrogram() failed in some cases. (PR#1552)\n\n    o\tThe links in refman.pdf were broken by a single invalid\n\t\\alias{}. Now Rdconv checks more comprehensively. (PR#1550)\n\n    o\tpredict(smooth.spline(x,*), deriv =1) did not predict at all `x'\n\tvalues, and\n\tsmooth.spline(x,*, all.knots = TRUE) used much too much memory\n\twhen length(x) was largish.\n\tsmooth.spline(*, .... trace = TRUE ..) is a bit more self-explaining.\n\n    o\tpexp(x, log=TRUE) and pweibull(*) were losing precision for large x.\n\n    o\tWorkaround for NetBSD bug in compiling dounzip.c. (PR#1565/6)\n\n    o\tConversions to numeric in type.convert were always treating \"NA\" as\n\tmissing whatever the setting of na.strings. (PR#1568)\n\n    o\tR CMD check now deals correctly with package names containing a\n\t'.' in the Depends field of a DESCRIPTION file. (PR#1591)\n\n    o\tpbinom() and pbinom() were misssing the \"fuzz\" that other discrete\n\tdistributions have in order to guard against truncation.\n\n    o\tThe \"=\" assignment operator behaved as \"<<-\" in some constructions\n\twith composite left-hand sides.\n\n    o\tAdded print.AsIs() method to ensure \"AsIs\" objects are printed\n\tby the method for their real class. (PR#1587)\n\n    o\tmosaicplot(*, color = v) now recycles v[] if needed.\n\n    o\tCalling dev.control(\"inhibit\") with no graphics device open\n\tcrashed R. (PR#1605)\n\n    o\tread.dcf() was not checking that memory allocation succeeded.\n\n    o\tThe C function fprec might overflow for > 16 digits, showing\n\tup in example(str) on some platforms.\n\n    o\tChanges to the methods package:\n\n\t- Nonstandard generic function definitions given to\n\t  setGeneric now work; these were previously ignored.\n\n\t- Classes that extend matrix, etc. as the data part previously lost\n\t  their attributes.\n\n\t- There were bugs in distinguishing methods for \"missing\" from\n\t  methods for \"ANY\".\n\n\t- Some coerce methods were not selected correctly when the two classes\n\t  were related by an \"is\" relation.\n\n\t- extends() now works correctly if given a class definition rather\n\t  than a name.\n\n\t- class()<- was leaving in an explicit class attribute for basic data\n\t  types.\n\n\t- Method signatures including arguments following \"...\" in the\n\t  argument list of the generic didn't work.\n\n    o\tpar(mgp = v) now allows negative `v' (S-compatibly and sensibly).\n\n    o\tidentify.hclust() masked its `x' argument and so failed.\n\n    o\tSystem rint was never being used in fround.c.\n\n    o\tround/trunc.POSIXt were erroneously retaining information on\n\tDST. (PR#1543)\n\n    o\ttcltk package didn't work with tcl8.0.x.  Compatibility code\n\tinserted (PR#1640, thanks to Rene' Bertin for helping out with\n\tthis).\n\n    o\tselfStart() {pkg \"nls\"} now works again when parameter names are\n\tnot specified (but implicit).\n\n    o\tlegend() now treats lty=\"0\" properly (as solid).\n\n    o\tARMAacf was failing if 0 < p < q+1: it failed to say that ar needed\n\tto be padded with zeroes, and now the code does that.\n\n    o\told.packages() was assuming a bundle was installed in only one\n\tlibrary, and so update.packages() would only update a bundle\n\tin the first location in lib.loc.\n\n    o\tfisher.test() could miscalculate odds ratio and confidence\n\tinterval for tables with large entries, due to numerical\n\toverflow.\n\n    o\tUsing lty = \"1\" (or \"10\") does no longer produce invalid\n\tpostscript or pdf.  Using \"0\" in a character lty is currently not\n\timplemented device-independently and needs more fixing.\n\n    o\tccf(plot = FALSE) was returning a spurious extra 0 at lag 0.\n\n    o\tOn console-based versions of R (Windows, GNOME, probably\n\tMac OS) warning/error messages longer than 8192 chars could\n\tcrash R. (PR#1651)\n\n    o\tComparisons between objects of mode \"call\" using \"==\" now return\n\tTRUE if both sides deparse to the same string (as always intended).\n\n    o\tHoltWinters() now initializes correctly in the exponential\n\tsmoothing case, and plot.HoltWinters() allows lty to be set.\n\n    o\tfisher.test() crashed due to corruption on some large\n\tproblems.  It also crashed on tables with total one. (PR#1662)\n\n    o\tThe substitution code for strptime (used e.g. on Windows)\n\tcached the month names and so did not recognise locale changes\n\tduring an R session, as used by get.hist.quote{tseries}.\n\tCaching has been supressed.  (PR#1116)\n\n    o\tSome functions used the non-existing error() function instead\n\tof stop().\n\n    o\tvector(\"complex\",n)  doesn't return random garbage anymore.\n\n\n\t\tCHANGES IN R VERSION 1.5.0\n\n\nUSER-VISIBLE CHANGES\n\n    o\tXDR support is now guaranteed to be available, so the default\n\tsave format will always be XDR binary files, and it is safe to\n\tdistribute data in that format.\t (We are unaware of any\n\tplatform that did not support XDR in recent versions of R.)\n\n\tgzfile() is guaranteed to be available, so the preferred\n\tmethod to distribute sizeable data objects is now via\n\tsave(compress = TRUE).\n\n    o\tpie() replaces piechart() and defaults to using pastel colours.\n\n    o\tformatC has new arguments (see below) and formatC(*, d = <dig>)\n\tis no longer valid and must be written as formatC(*, digits = <dig>).\n\n    o\tMissingness of character strings is treated much more\n\tconsistently, and the character string \"NA\" can be used as a\n\tnon-missing value.\n\n    o\tsummary.factor() now uses a stable sort, so the output will\n\tchange where there are ties in the frequencies.\n\n\nNEW FEATURES\n\n    o\tChanges in handling missing character strings:\n\n\t-  \"NA\" is no longer automatically coerced to a missing value\n\t   for a character string.  Use as.character(NA) where a missing\n\t   value is required, and test via is.na(x) not x == \"NA\".\n\t   String \"NA\" is still converted to missing by scan() and\n\t   read.table() unless `na.strings' is changed from the default.\n\n\t-  A missing character string is now printed as `NA' (no quotes)\n\t   amongst quoted character strings, and `<NA>' if amongst\n\t   unquoted character strings.\n\n\t-  axis() and text.default() omit missing values of their\n\t   `labels' argument (rather than plotting \"NA\").\n\n\t-  Missing character strings are treated as missing much more\n\t   consistently, e.g. in logical comparisons and in sorts.\n\t   identical() now differentiates \"NA\" from the missing string.\n\n\n    o\tChanges in package methods:\n\n\t-  New function validSlotNames().\n\n\t-  Classes can explicitly have a \"data part\", formally\n\t   represented as a .Data slot in the class definition, but\n\t   implemented consistently with informal structures.  While the\n\t   implementation is different, the user-level behavior largely\n\t   follows the discussion in \"Programming with Data\".\n\n       -   A \"next method\" facility has been provided, via the function\n\t   callNextMethod().  This calls the method that would have been\n\t   selected if the currently active method didn't exist.  See\n\t   ?callNextMethod().  This is an extension to the API.\n\n       -   Classes can have initialize methods, which will be called\n\t   when the function new() is used to create an object from the\n\t   class.  See ?initialize.  This is an extension to the API.\n\n       -   The logic of setGeneric() has been clarified, simplifying\n\t   nonstandard generic functions and default methods.\n\n\n    o\tChanges in package tcltk:\n\n\t-  Now works with the GNOME user interface.\n\n\t-  Several new functions allow access to C level Tcl objects.\n\t   These are implemented using a new `tclObj' class, and this\n\t   is now the class of the return value from .Tcl() and tkcmd().\n\n\n    o\tChanges in package ts:\n\n\t-  More emphasis on handling time series with missing values\n\t   where possible, for example in acf() and in the\n\t   ARIMA-fitting functions.\n\n\t-  New function arima() which will replace arima0() in due\n\t   course.  Meanwhile, arima0() has been enhanced in several\n\t   ways.  Missing values are accepted.\tParameter values can\n\t   be initialized and can held fixed during fitting.  There is\n\t   a new argument `method' giving the option to use\n\t   conditional-sum-of-squares estimation.\n\n\t-  New function arima.sim().\n\n\t-  New datasets AirPassengers, Nile, UKgas and WWWusage,\n\t   and a expanded version of UKDriverDeaths (as a multiple\n\t   time series Seatbelts).\n\n\t-  New generic function tsdiag() and methods for arima and arima0,\n\t   to produce diagnostic plots.\t Supersedes arima0.diag().\n\n\t-  New functions ARMAacf() and ARMAtoMA() to compute\n\t   theoretical quantities for an ARMA process.\n\n\t-  New function acf2AR() to compute the AR process with a given\n\t   autocorrelation function.\n\n\t-  New function StructTS() to fit structural time series, and\n\t   new generic function tsSmooth() for fixed-interval\n\t   state-space smoothing of such models.\n\n\t-  New function monthplot() (contributed by Duncan Murdoch).\n\n\t-  New functions decompose() and HoltWinters() (contributed by\n\t   David Meyer) for classical seasonal decomposition and\n\t   exponentially-weighted forecasting.\n\n\n    o\tAn extensible approach to safe prediction for models with e.g.\n\tpoly(), bs() or ns() terms, using the new generic function\n\tmakepredictcall().  Used by most model-fitting functions\n\tincluding lm() and glm().  See ?poly, ?cars and ?ns for\n\texamples.\n\n    o\tacosh(), asinh(), atanh() are guaranteed to be available.\n\n    o\taxis() now omits labels which are NA (but still draws the\n\ttick mark.\n\n    o\tConnections to bzip2-ed files via bzfile().\n\n    o\tchol() allows pivoting via new argument `pivot'.\n\n    o\tcmdscale() now takes rownames from a dist object `d' as well\n\tas from a matrix; it has new arguments `add' (as S) and `x.ret'.\n\n    o\tcrossprod() handles the case of real matrices with y = x\n\tseparately (by accepting y = NULL).  This gives a small\n\tperformance gain (suggestion of Jonathan Rougier).\n\n    o\tderiv/deriv3() can now handle expressions involving pnorm and\n\tdnorm (with a single argument), as in S-PLUS.\n\n    o\tNew function expm1() both in R and in C API, for accurate exp(x)-1;\n\tprecision improvement in pexp() and pweibull() in some cases.\n\t(PR#1334-5)\n\n    o\tNew function findInterval() {using new C entry point\n\tfindInterval, see below}.\n\n    o\tformatDL() now also works if both items and descriptions are\n\tgiven in a suitable list or matrix.\n\n    o\tgzfile() is guaranteed to be available, and hence the\n\t`compress' option to save() and save.image().\n\n    o\thist() now has a method for date-time objects.\n\n    o\tlibrary() now checks the dependence on R version (if any) and\n\twarns if the package was built under a later version of R.\n\n    o\tlibrary(help = PKG) now also returns the information about the\n\tpackage PKG.\n\n    o\tAdded function logb(), same as log() but for S-PLUS\n\tcompatibility (where log now has only one argument).\n\n    o\tNew na.action function na.pass() passes through NAs unaltered.\n\n    o\tpiechart() has been renamed to pie(), as piechart is a Trellis\n\tfunction for arrays of pie charts.  The default fill colours\n\tare now a set of pastel shades, rather than par(\"bg\").\n\n    o\tplclust() in package mva, for more S-PLUS compatibility.\n\n    o\tpoly() now works with more than one vector or a matrix as input,\n\tand has a predict method for objects created from a single\n\tvector.\n\n    o\tpolyroot() now handles coefficient vectors with terminal\n\tzeroes (as in S).\n\n    o\tNew prettyNum() function used in formatC() and format.default()\n\twhich have new optional arguments `big.mark', `big.interval',\n\t`small.mark', `small.interval', and `decimal.mark'.\n\n    o\tprint.coefmat() has a new argument 'eps.Pvalue' for determining\n\twhen small P-values should be printed as  \"< {...}\".\n\n    o\tThe recover() function has been moved to the base package.\n\tThis is an interactive debugging function, usually a good\n\tchoice for options(error=).  See ?recover.\n\n    o\trep() has a new argument `each' for S-PLUS compatibility.\n\tThe internal call is made available as rep.int(), again for\n\thelp in porting code.\n\n    o\tNew functions rowSums(), colSums(), rowMeans() and colMeans():\n\tversions of apply() optimized for these cases.\n\n    o\trug() now has a \"...\" argument allowing its location to be specified.\n\n    o\tscan() can have NULL elements in `what', useful to save space\n\twhen columns need to be discarded.\n\n    o\tNew option by = \"DSTday\" for seq.POSIXt().\n\n    o\tChanges to sorting:\n\n\t-  sort(), sort.list() and order() have a new argument\n\t   `decreasing' to allow the order to be reversed whilst\n\t   still preserving ties.\n\n\t-  sort() has an option to use quicksort in some cases\n\t   (currently numeric vectors and increasing order).\n\n\t-  The default Shell sort is Sedgewick's variant, around 20%\n\t   faster, and pre-screening for NAs speeds cases without any\n\t   NAs several-fold.\n\n\t-  sort.list() (and order with just one vector) is several\n\t   times faster for numeric, integer and logical vectors, and\n\t   faster for character vectors.\n\n    o\tNew assignment forms of split(); new function unsplit().\n\n    o\tNew sprintf() function for general C like formatting, from\n\tJonathan Rougier.\n\n    o\tArgument `split' of summary.{aov,aovlist} is now implemented.\n\n    o\tsummary.princomp() now has a separate print() method, and\n\t`digits' is now an argument to the print method and not to\n\tsummary.princomp itself.\n\n    o\tAn extended version of the trace() function is available,\n\tcompatible with the function in S-PLUS.\t Calls to R functions\n\tcan be inserted on entry, on exit, and before any\n\tsubexpressions. Calls to browser() and recover() are useful.\n\tSee ?trace.\n\n    o\tNew function TukeyHSD() for multiple comparisons in the results\n\tof aov().  (Formerly function Tukey in package Devore5 by\n\tDouglas Bates.)\n\n    o\tNew read-only connections to files in zip files via unz().\n\n    o\twarning() has new argument `call.', like stop()'s.\n\n    o\tzip.file.extract() is no longer provisional and has an\n\t\"internal\" method available on all platforms.\n\n    o\tMethods for [, [<- and as.data.frame() for class \"POSIXlt\".\n\n    o\tMuch improved printing of matrices and arrays of type \"list\".\n\n    o\tThe \"Knuth-TAOCP\" option for random-number generation has been\n\tgiven an option of using the 2002 revision.  See ?RNG for the\n\tdetails: the R usage already protected against the\n\treported `weakness'.\n\n    o\tmin/max of integer(0) (or NULL) is now Inf/-Inf, not an\n\textreme integer.\n\n\nDEPRECATED & DEFUNCT\n\n    o\t.Alias, reshapeLong(), reshapeWide() are defunct.\n\n    o\tarima0.diag() (package ts) is deprecated: use tsdiag() instead.\n\n    o\tpiechart() is deprecated; renamed to pie().\n\n\nDOCUMENTATION CHANGES\n\n    o\t`Writing R Extensions' now has an example of calling R's\n\trandom numbers from FORTRAN via C.\n\n    o\tR itself and all R manuals now have ISBN numbers, please use\n\tthem when citing R or one of the manuals.\n\n\nINSTALLATION CHANGES\n\n    o\tThe configure script used when building R from source under Unix\n\tis now generated using Autoconf 2.50 or later, which has the\n\tfollowing 'visible' consequences:\n\n\t- By default, configure no longer uses a cache file.  Use the\n\t  command line option '--config-cache' (or '-C') to enable\n\t  caching.\n\n\t- Key configuration variables such as 'CC' are now *precious*,\n\t  implying that the variables\n\n\t  * no longer need to be exported to the environment and can and\n\t    should be set as command line arguments;\n\n\t  * are kept in the cache even if not specified on the command\n\t    line, and checked for consistency between two configure runs\n\t    (provided that caching is used, see above);\n\n\t  * are kept during automatic reconfiguration as if having been\n\t    passed as command line arguments, even if no cache is used.\n\n\t  See the variable output section of 'configure --help' for a\n\t  list of all these variables.\n\n    o\tConfigure variable 'FC' is deprecated, and options '--with-g77',\n\t'--with-f77' and '--with-f2c' are defunct.  Use configure\n\tvariable 'F77' to specify the FORTRAN 77 compiler, and 'F2C' to\n\tspecify the FORTRAN-to-C compiler and/or that it should be used\n\teven if a FORTRAN 77 compiler is available.\n\n    o\tNon-standard directories containing libraries are specified\n\tusing configure variable 'LDFLAGS' (not 'LIBS').\n\n\nUTILITIES\n\n    o\tSweave(), Stangle() and friends in package tools.  Sweave allows\n\tmixing LaTeX documentation and R code in a single source file:\n\tthe R code can be replaced by its output (text, figures) to\n\tallow automatic report generation.  Sweave files found in\n\tpackage subdir 'inst/doc' are automatically tested by R CMD\n\tcheck and converted to PDF by R CMD build, see the section on\n\tpackage vignettes in the 'Writing R Extensions' manual.\n\n    o\tRdconv can convert to the S4 '.sgml' format.\n\n    o\tR::Utils.pm masks some platform dependencies in perl code by\n\tproviding global variables like R_OSTYPE or wrapper functions\n\tlike R_runR().\n\n    o\tIf a directory 'inst/doc' is present in the sources of a\n\tpackage, the HTML index of the installed package has a link to\n\tthe respective subdirectory.\n\n    o\tR CMD check is more stringent: it now also fails on malformed\n\t'Depends' and 'Maintainer' fields in 'DESCRIPTION' files, and on\n\tunbalanced braces in Rd files.\tIt now also provides pointers to\n\tdocumentation for problems it reports.\n\n    o\tR CMD check, build and INSTALL produce outline-type output.\n\n    o\tQC functions in package 'tools' now return the results of their\n\tcomputations as objects with suitable print() methods.\tBy\n\tdefault, output\tis only produced if a problem was found.\n\n    o\tNew utility R CMD config to get the values of basic R configure\n\tvariables, or the header and library flags necessary for linking\n\tagainst R.\n\n    o\tRdindex and maketitle.pl require perl 5.005, as Text::Wrap::fill\n\twas only introduced at 5.004_05.\n\n\nC-LEVEL FACILITIES\n\n    o\tAll the double-precision BLAS routines are now available,\n\tand package writers are encouraged not to include their own\n\t(so enhanced ones will be used if requested at configuration).\n\n    o\tfindInterval(xt[],n,x,...) gives the index (or interval number)\n\tof x in the sorted sequence xt[].  There's an\n\tF77_SUB(interv)(.) to be called from Fortran; this used to be\n\tpart of predict.smooth.spline's underlying Fortran code.\n\n    o\tSubstitutes for (v)snprintf will be used if the OS does not\n\tsupply one, so tests for HAVE_(V)SNPRINTF are no longer needed.\n\n    o\tThe DUP and NAOK arguments in a .C() call are not passed on\n\tto the native routine being invoked.  Any code that relied on\n\tthe old behaviour will need to be modified.\n\n    o\tlog1p is only provided in Rmath.h if it is not provided by the\n\tplatform, in which case its name is not remapped, but a\n\tback-compatibility entry point Rf_log1p is provided.\n\tApplications using libRmath may need to be re-compiled.\n\n    o\tThe methods used by optim() and integrate() have entry points in\n\tR_ext/Applic.h and have a more general interface documented in\n\t`Writing R Extensions'.\n\n    o\tThe bessel_? entry points are now suitable to be called\n\trepeatedly from code loaded by .C().  (They did not free\n\tmemory until .C() returned in earlier versions of R.)\n\n    o\tServer sockets on non-Windows platforms now set the SO_REUSEADDR\n\tsocket option.\tThis allows a server to create simultanous\n\tconnections to several clients.\n\n    o\tNew quicksort sorting (for numeric no-NA data), accessible from\n\tC as R_qsort() etc and from Fortran as qsort4() and qsort3().\n\n    o\tRinternals.h no longer includes fcntl.h, as this is not an\n\tISO C header and cannot be guaranteed to exist.\n\n    o\tFortran subroutines are more correctly declared as `extern void'\n\tin R_exts/Applic.h and R_exts/Linpack.h.\n\n\nBUG FIXES\n\n    o\tThe calculation of which axes to label on a persp() plot was\n\tincorrect in some cases.\n\n    o\tInsufficient information was being recorded in the display list\n\tfor the identify() function.  In particular, the \"plot=\"\n\targument was ignored when replaying the display list. (PR#1157)\n\n    o\tThe vertical alignment of mathematical annotations was wrong.\n\tWhen a vertical adjustment was not given, it was bottom-adjusting\n\ti.e,. it was treating adj=0 as adj=c(0, 0).  It now treats\n\tadj=0 as adj=c(0, 0.5) as for \"normal\" text. (PR#1302)\n\n    o\tthe man page (doc/R.1) wasn't updated with the proper VERSION.\n\n    o\tsmooth.spline() had a \"df = 5\" default which was never used and\n\thence extraneous and misleading.\n\n    o\tread.fwf() was interpreting comment chars in its call to scan:\n\treplaced by a call to readlines(). (PR#1297/8)\n\n    o\tThe default has been changed to scan(comment.char=\"\") for\n\tconsistency with earlier code (as in the previous item).\n\n    o\tbxp(*, notch.frac = f) now draws the median line correctly.\n\n    o\tCurrent versions of gs were rotating the output of\n\tbitmap(type = \"pdfwrite\") and when converting the output\n\tof postscript() to PDF; this has been circumvented by\n\tsuppressing the %%Orientation comment for non-standard\n\tpaper sizes.\n\n    o\tplot.ts(x, log = \"y\") works again when x has 0s, also for matrix x.\n\n    o\tadd1(), drop1(), step() work again on glm objects with\n\tformulae with rhs's containing `.'.  (Broken by a `bug fix'\n\t(in reality an API change) in 1.2.1.)\n\n    o\toptim(method=\"BFGS\") was not reporting reaching `maxit'\n\titerations in the convergence component of the return value.\n\n    o\taov() and model.tables() were failing on multistrata models with\n\texcessively long Error formula. (PR#1315)\n\n    o\tTransparent backgrounds on png() devices on Unix-alikes had\n\tbeen broken during the driver changes just prior to 1.4.0.\n\t(They worked correctly on Windows.)\n\n    o\tdemo(is.things) didn't work properly when the methods package was\n\tattached.\n\n    o\tmatch(), unique() and duplicated() were not declaring all NaNs to be\n\tequal, yet not always distinguishing NA and NaN.  This was\n\tvery rare except for data imported as binary numbers.\n\n    o\tThe error handler recover() protects itself against errors in\n\tdump.frames and uses a new utility, limitedLabels, to generate\n\tnames for the dump that don't inadvertently blow the limit on\n\tsymbol length.\t(TODO:\teither fix dump.frames accordingly or\n\tremove the limit--say by truncating very long symbols?)\n\n    o\tse.contrasts() works more reliably with multistratum models,\n\tand its help page has an example.\n\n    o\tsummary.lm() was not returning r.squared nor adj.r.squared for\n\tintercept-only models, but summary.lm.null() was returning\n\tr.squared but not adj.r.squared.  Now both are always\n\treturned.  Neither returned f.statistic, and that is now\n\tdocumented.\n\n    o\tSubsetting of matrices of mode list (or other non-atomic\n\tmodes) was not implemented and gave incorrect results without\n\twarning. (PR#1329)\n\tUnder some circumstances subsetting of a character matrix\n\tinserted NA in the wrong place.\n\n    o\tabs() was not being treated as member of the Math group\n\tgeneric function, so e.g. its method for data frames was not\n\tbeing used.\n\n    o\tset.seed(seed, \"default\") was not using the `seed' value (only\n\tfor kind = \"default\").\n\n    o\tlogLik.lm() now uses  \"df = p + 1\" again (`+ sigma'!).\n\n    o\tlogLik.glm() was incorrect for families with estimated dispersion.\n\n    o\tAdded strptime() workaround for those platforms (such as\n\tSolaris) that returned missing components as 0.\t Missing\n\tdays are now detected, but missing years will still\n\tbe interpreted as 1900 on such platforms.\n\n    o\tInheritance in formal classes (the methods package) works\n\tbreadth-first as intuition would expect.\n\n    o\tThe new() function in package `methods' works better (maybe even\n\tcorrectly?) for the various combinations of super-classes and\n\tprototypes that can be supplied as unnamed arguments.\n\n    o\tInternal code allowed one more connection to be allocated than\n\tthe table size, leading to segfaults. (PR#1333)\n\n    o\tIf a user asks to open a connection when it is created and\n\tit cannot be opened, the connection is destroyed before returning\n\tfrom the creation call.\t (related to PR#1333)\n\n    o\tSys.putenv() was not using permanent storage. (PR#1371)\n\n    o\tLa.svd() was not coercing integer matrices. (PR#1363)\n\n    o\tderiv(3) now reports correctly the function it cannot find\n\tthe derivatives table.\n\n    o\tThe GNOME user interface was over-enthusiastic about setting\n\tlocale information.  Now only LC_CTYPE, LC_COLLATE and LC_TIME\n\tare determined by the user's environment variables (PR#1321)\n\n    o\tIn X11, locator() would sound the bell even if \"xset b off\"\n\thad been set.\n\n    o\tmerge() could be confused by inconsistent use of as.character()\n\tgiving leading spaces.\n\n    o\t[pqr]binom() no longer silently round the `size' argument,\n\tbut return NaN (as dbinom() does). (PR#1377)\n\n    o\tFixed socket writing code to block until all data is written.\n\tFixed socket reading code to properly handle long reads and reads\n\twith part of the data in the connection buffer.\n\n    o\tAllow sockets to be opened in binary mode with both open=\"ab\" and\n\topen=\"a+b\".\n\n    o\tlevels<-.factor() was using incorrectly list values longer than\n\tthe number of levels (PR#1394), and incorrectly documented\n\tthat a character value could not be longer than the existing\n\tlevels.\n\n    o\tThe pdf() device was running out of objects before the\n\tdocumented 500 page limit.  Now there is no limit.\n\n    o\tlegend() did not deal correctly with `angle' arguments. (PR#1404)\n\n    o\tsum() tried to give an integer result for integer arguments,\n\tbut (PR#1408)\n\t- this was not documented\n\t- it sometimes warned on overflow, sometimes not\n\t- it was order-dependent for a mixture of integer and numeric args.\n\n    o\tmean() gave (numeric) NA if integer overflow occurred in sum(),\n\tbut now always works internally with numeric (or complex) numbers.\n\n    o\tsort.list() and order() were treating NA_STRING as \"NA\".\n\n    o\tsort.list(na.last = NA) was not implemented.\n\n    o\tseq.default() was returning only one element for a relative\n\trange of less than about 1e-8, which was excessively conservative.\n\t(PR#1416)\n\n    o\ttsp(x) <- NULL\tnow also works after library(methods).\n\n    o\tpersp(shade=) was not working correctly with the default\n\tcol=NULL if this was transparent. (PR#1419)\n\n    o\tmin/max(complex(0)) was returning a random value.\n\n    o\trange() gave c(1, 1).\n\n    o\trange(numeric(0)) is now c(Inf, -Inf), as it was documented to be.\n\n    o\tprint.ts() was occasionally making rounding errors in the labels\n\tfor multiple calendar time series.\n\n    o\tRdconv was not handling nested \\describe{} constructs when\n\tconverting to HTML (PR#1257) and not fixing up mal-formed\n\t\\item fields in \\describe{} when converting to text (PR#1330).\n\n    o\tfilled.contour() was not checking consistency of x, y, z.\n\t(PR#1432)\n\n    o\tpersp.default() no longer crashes with non-character labels.\n\t(PR#1431)\n\n    o\tfft() gave incorrect answers for input sizes 392, 588, 968, 980 ....\n\t(PR#1429)\n\n    o\tdet(method = \"qr\") gave incorrect results for numerically\n\tsingular matrices. (PR#1244)\n\n    o\tbarplot() now allows the user to control `xpd'. (PR#1088, 1398)\n\n    o\tlibrary() (with no arguments) no longer fails on empty TITLE files.\n\n    o\tglm() was failing if both offset() and start were specified. (PR#1421)\n\n    o\tglm() might have gotten confused if both step-shortening and\n\tpivoting had occurred (PR#1331).  Step-halving to avoid the\n\tboundary of feasible values was not working.\n\n    o\tInternal representation of logical values was not being\n\ttreated consistently. (Related to PR#1439)\n\n    o\tThe c() function sometimes inserted garbage in the name vector\n\tfor some types of objects, e.g.\t names(c(ls, a=1)).\n\n    o\tFixed bug in `$' that could cause mutations on assignment (PR#1450).\n\n    o\tSome X servers displayed random bytes in the window title of\n\tgraphics windows (PR#1451)\n\n    o\tThe X11 data editor would segfault if closed with window manager\n\tcontrols (PR#1453)\n\n    o\tInterrupt of Sys.sleep() on UNIX no longer causes subsequent\n\tSys.sleep() calls to segfault due to infinite recusion.\n\n    o\tEliminated a race condition that could cause segfaults when a SIGINT\n\twas received while handling an earlier SIGINT.\n\n    o\trect(lty = \"blank\") was incorrectly drawing with a dashed line.\n\n    o\ttype.convert() was not reporting incorrectly formatted complex\n\tinputs. (PR#1477)\n\n    o\treadChar() was not resetting vmax, so causing memory build-up.\n\t(PR#1483)\n\n\n\n\t**************************************************\n\t*\t\t\t\t\t\t *\n\t*\t       1.4 SERIES NEWS\t\t\t *\n\t*\t\t\t\t\t\t *\n\t**************************************************\n\n\n\t\tCHANGES IN R VERSION 1.4.1\n\n\nBUG FIXES\n\n    o\tscan(multi.line = FALSE) now always gives an immediate error\n\tmessage if a line is incomplete. (As requested in PR#1210)\n\n    o\tread.table() is no longer very slow in processing comments:\n\tmoved to C code and fewer lines checked.\n\n    o\ttype.convert() could give stack imbalance warnings if used\n\twith as.is = TRUE.\n\n    o\tpredict.mlm ignored newdata (PR#1226) and also offsets.\n\n    o\tdemo(tkttest) was inadvertently changed in 1.4.0 so that it would\n\tevaluate the requested test, but not display the result.\n\n    o\tstars(scale = TRUE) (the default) now works as documented (and\n\tas S does).  Previously it only scaled the maximum to 1. (PR#1230)\n\n    o\td0 <- data.frame(a = 0); data.matrix(d0[0, 0]) and\n\tdata.matrix(d0[, 0]) now work.\n\n    o\tplot(multiple time series, plot.type = \"single\") was computing\n\t`ylim' from the first series only.\n\n    o\tplot.acf() has a new `xpd = par(\"xpd\")' argument which by default\n\t*does* clipping (of the horizontal lines) as desired (xpd = NA was\n\tused before, erronously in most cases).\n\n    o\tpredict(smooth.spline(.), deriv = 1) now works.\n\n    o\tidentify() failed when x is a structure/matrix. (PR#1238)\n\n    o\tgetMethod() returns NULL when optional=TRUE as promised in the\n\tdocumentation.\n\n    o\tsetMethod() allows \"...\" to be one of the arguments omitted in\n\tthe method definition (but so far no check for ... being missing)\n\n    o\tAllow round() to work again on very large numbers (introduced\n\tin fixing PR#1138). (PR#1254)\n\n    o\tRinternals.h is now accepted by a C++ compiler.\n\n    o\ttype.convert() was failing to detect integer overflow.\n\n    o\tpiechart() was defaulting to foreground colour (black) fills\n\trather than background (as used in 1.3.1 and earlier).\tNow\n\tbackground is used, but be aware that as from 1.4.0 this may\n\tbe transparent.\n\n    o\tLa.eigen(*, only.values=TRUE) does not segfault anymore in one\n\tbranch (PR#1262).\n\n    o\tcut() now produces correct default labels even when\n\tinclude.lowest = TRUE (PR#1263).\n\n    o\treformulate() works properly with a response.\n\n    o\tcmdscale(*, k = 1) now works properly.\n\n    o\tOptions by = \"month\" and \"year\" to seq.POSIXt() will always\n\ttake account of changes to/from daylight savings time: this\n\twas not working on some platforms.\n\n    o\tglm.fit.null() now accepts all the arguments of glm.fit() (it\n\tcould be called from glm.fit with arguments it did not\n\taccept), and is now documented.\n\n    o\tcov.wt(cbind(1), cor = TRUE) now works.\n\n    o\tpredict(glm.object, se.fit = TRUE) was failing if the fit\n\tinvolved an offset.\n\n    o\tdetach() on package:base would crash R. (PR#1271)\n\n    o\tprint or summary on a manova() object with no terms, no names on\n\tthe response and intercept = FALSE (which is not sensible)\n\twould give an error.\n\n    o\tseek() on file connections was ignoring the `origin' argument.\n\n    o\tFixed new environment handling in library() to avoid forcing\n\tpromises created by delay()\n\n    o\tarima0() could leak memory: now released via on.exit().\n\n    o\tqr.coef(qr,*) now keeps the names of qr$qr.\n\n    o\tread.00Index() no longer fails on data indexes not generated by\n\tRdindex (PR#1274).\n\n\n\t\tCHANGES IN R VERSION 1.4.0\n\n\nUSER-VISIBLE CHANGES\n\n    [This is a new section to highlight changes in behaviour, which\n    may be given in more detail in the following sections.\n    Many bug fixes are also user-visible changes.]\n\n    o\tThe default save format has been changed, so saved workspaces\n\tand objects cannot (by default) be read in earlier versions of R.\n\n    o\tThe number of bins selected by default in a histogram uses\n\tthe correct version of Sturges' formula and will usually be\n\tone larger.\n\n    o\tdata.frame() no longer converts logical arguments to factors\n\t(following S4 rather than S3).\n\n    o\tread.table() has new arguments `nrows' and `colClasses'.  If the\n\tlatter is NA (the default), conversion is attempted to\n\tlogical, integer, numeric or complex, not just to numeric.\n\n    o\tmodel.matrix() treats logical variables as a factors with\n\tlevels c(FALSE, TRUE) (rather than 0-1 valued numerical\n\tvariables).  This makes R compatible with all S versions.\n\n    o\tTransparency is now supported on most graphics devices.\n\tThis means that using par(\"bg\"), for example in legend(), will\n\tby default give a transparent rather than opaque background.\n\n    o\t[dpqr]gamma now has third argument `rate' for S-compatibility\n\t(and for compatibility with exponentials).  Calls which use\n\tpositional matching may need to be altered.\n\n    o\tThe meaning of spar = 0 in smooth.spline() has changed.\n\n    o\tsubstring() and substring()<- do nothing silently on a\n\tcharacter vector of length 0, rather than generating an\n\terror.\tThis is consistent with other functions and with S.\n\n    o\tFor compatibility with S4, any arithmetic operation using a\n\tzero-length vector has a zero-length result.  (This was\n\talready true for logical operations, which were compatible\n\twith S4 rather than S3.)\n\n    o\tundoc() and codoc() have been moved to the new package `tools'.\n\n    o\tThe name of the site profile now defaults to\n\t`R_HOME/etc/Rprofile.site'.\n\n    o\tThe startup process for setting environment variables now first\n\tsearches for a site environment file (given by the environment\n\tvariable `R_ENVIRON' if set or `R_HOME/etc/Renviron.site' if\n\tnot), *and* then for a user `.Renviron' file in the current or\n\tthe user's home directory.\n\n    o\tFormer stars(*, colors = v) must now be stars(*, col.segments = v).\n\n    o\tThe default methods for La.svd and La.eigen have changed and\n\tso there may be sign changes in singular/eigen vectors,\n\tincluding in cancor, cmdscale, factanal, princomp and varimax.\n\n\nNEW FEATURES\n\n    o\tTransparency is now supported on most graphics devices.\n\tInternally colors include an alpha channel for opacity, but at\n\tpresent there is only visible support for transparent/opaque.\n\tThe new color \"transparent\" (or NA or \"NA\") is transparent,\n\tand is the default background color for most devices.  Those\n\tdevices (postscript, XFig, PDF, Windows metafile and printer)\n\tthat previously treated bg = \"white\" as transparent now have\n\t\"transparent\" as the default and will actually print \"white\".\n\t(NB: you may have bg = \"white\" saved in .Postscript.options in\n\tyour workspace.)\n\n    o\tA package `methods' has been added, containing formal classes\n\tand methods (\"S4\" methods), implementing the description in\n\tthe book \"Programming with Data\".  See \"?Methods\" and the\n\treferences there for more information.\n\n\t- In support of this, the \"@\" operator has been added to the\n\t  grammar.\n\n\t- Method dispatch for formal methods (the standardGeneric\n\t  function), is now a primitive. Aside from efficiency issues,\n\t  this allows S3-style generics to also have formal methods\n\t  (not really recommended in the long run, but it should at\n\t  least work).\tThe C-level dispatch is now implemented for\n\t  primitives that use either DispatchGroup or DispatchOrEval\n\t  internally.\n\n\t- A version of the function \"plot\" in the methods package has\n\t  arguments \"x\" and \"y\", to allow methods for either or both.\n\t  See \"?setMethod\" for examples of such methods.\n\n\t- The methods package now uses C-level code (from within\n\t  DispatchOrEval) to dispatch any methods defined for\n\t  primitive functions.\tAs with S3-style methods, methods can\n\t  only be defined if the first argument satisfies is.object(x)\n\t  (not strictly required for formal methods, but imposed for\n\t  now for simplicity and efficiency).\n\n    o\tChanges to the tcltk package:\n\n\t- New interface for accessing Tcl variables, effectively\n\t  making the R representations lexically scoped. The old form\n\t  is being deprecated.\n\n\t- Callbacks can now be expressions, with slightly unorthodox\n\t  semantics. In particular this allows bindings to contain\n\t  \"break\" expressions (this is necessary to bind code to\n\t  e.g. Alt-x without having the key combination also insert an\n\t  \"x\" in a text widget.)\n\n\t- A bunch of file handling and dialog functions (previously\n\t  only available via tkcmd) have been added\n\n    o\tThe \"?\" operator is now an actual function.  It can be used\n\t(as always) as a unary operator (?plot) and the grammar now\n\tallows it as a binary operator, planned to allow\n\tdifferentiating documentation on the same name but different\n\ttype (class?matrix, for example).  So far, no such\n\tdocumentation exists.\n\n    o\tNew methods AIC.default() and logLik.glm(), also fixing\n\tAIC(<glm obj>).\n\n    o\taxis.POSIXct() allows the label date/times to be specified\n\tvia the new `at' argument.\n\n    o\tarrows() now allows length = 0 (and draws no arrowheads).\n\n    o\tModifications to the access functions for more consistency with S:\n\targuments `name', `pos' and `where' are more flexible in\n\tassign(), exists(), get(), ls(), objects(), remove() and rm().\n\n    o\tThree new primitive functions have been added to base:\n\tdataClass(), objWithClass(), and as.environment().  The first two\n\tare support routines for class() and class<-() in package\n\tmethods.  The third replaces pos.to.env() in the functions get(),\n\texists(), and friends.\n\n    o\tbarplot() now respects an inline `cex.axis' argument and has a\n\tseparate `cex.names' argument so names and the numeric axis\n\tlabels can be scaled separately.  Also, graphics parameters\n\tintended for axis() such as `las' can now be used.\n\n    o\tShading by lines added to functions barplot(), hist(),\n\tlegend(), piechart(), polygon() and rect().\n\n    o\tbxp() has a show.names argument allowing labels on a single\n\tboxplot; it and hence boxplot() now makes use of pch, cex, and bg\n\tfor outlier points().\n\n\tbxp() and boxplot() also have an argument `outline' to suppress\n\toutlier drawing {S-PLUS compatibly}.\n\n    o\tNew capabilities() options \"GNOME\" and \"IEEE754\".\n\n    o\tNew function casefold(), a wrapper for tolower/toupper\n\tprovided for compatibility with S-PLUS.\n\n    o\tcontour() is now generic.\n\n    o\tcor.test() in package ctest now also gives an asymptotic\n\tconfidence interval for the Pearson product moment correlation\n\tcoefficient.\n\n    o\tdata(), demo() and library() now also return the information\n\tabout available data sets, demos or packages.  Similarly,\n\thelp.search() returns its results.\n\n    o\tdensity() allows `bw' or `width' to specify a rule to choose the\n\tbandwidth, and rules \"nrd0\" (the previous default), \"nrd\",\n\t\"ucv\", \"bcv\", \"SJ-ste\" and \"SJ-dpi\" are supplied (based on\n\tfunctions in package MASS).\n\n    o\tdf.residual() now has a default method, used for classes\n\t\"lm\" and \"glm\".\n\n    o\tNew argument `cacheOK' to download.file() to request cache\n\tflushing.\n\n\tAll methods for download.file() do tilde-expansion on the path\n\tname.\n\n\tThe internal download.file() etc now allow URLs of the form\n\tftp://user@foo.bar/ and ftp://user:pass@foo.bar/\n\n    o\tduplicated() and unique() are now generic functions with\n\tmethods for data frames (as well as atomic vectors).\n\n    o\tfactanal() and princomp() use napredict() on their scores, so\n\tna.action = na.exclude is supported.\n\n    o\tFunction getNativeSymbolInfo() returns details about a native\n\troutine, potentially including its address, the library in\n\twhich it is located, the interface by which it can be called\n\tand the number of parameters.\n\n    o\tFunctions such as help() which perform library or package index\n\tsearches now use NULL as default for their `lib.loc' argument so\n\tthat missingness can be propagated more easily.\t The default\n\tcorresponds to all currently known libraries as before.\n\n    o\tAdded function file.rename().\n\n    o\thist.default() allows `breaks' to specify a rule to choose the\n\tnumber of classes, and rules \"Sturges\" (the previous default),\n\t\"Scott\" and \"FD\" (Freedman-Diaconis) are supplied (based on\n\tpackage MASS).\n\n    o\tFunction identical(), a fast and reliable way to test for exact\n\tequality of two objects.\n\n    o\tNew generic function is.na<-(), from S4.  This is by default\n\tequivalent to x[value] <- NA but may differ, e.g. for factors\n\twhere \"NA\" is a level.\n\n    o\tis.xxx reached through do_is are now generic.\n\n    o\tLa.eigen() and La.svd() have new default methods to use later\n\t(and often much faster) LAPACK routines.  The difference\n\tis most noticeable on systems with optimized BLAS libraries.\n\n    o\tlength() is now generic.\n\n    o\tNew function .libPaths() for getting or setting the paths to the\n\tlibrary trees R knows about.  This is still stored in .lib.loc,\n\twhich however should no longer be accessed directly.\n\n    o\tUsing lm/glm/... with `data' a matrix rather than a data frame\n\tnow gives a specific error message.\n\n    o\tloess(), lqs(), nls() and ppr() use the standard NA-handling\n\tand so support na.action = na.exclude.\n\n    o\tmahalanobis() now has a `tol' argument to be passed to solve().\n\n    o\tmean() has `data frame' method applying mean column-by-column.\n\tWhen applied to non-numeric data mean() now returns NA rather\n\tthan a confusing error message (for compatibility with S4).\n\tLogicals are still coerced to numeric.\n\n    o\tThe formula interface to mosaicplot() now allows a contingency\n\ttable as data argument.\n\n    o\tnew.env() is now internal and allows you to set hashing. Also,\n\tparent.env() and parent.env<-() are included to provide direct\n\taccess to setting and retrieving environments.\n\n    o\tFunction nsl() to look up IP addresses of hosts: intended as\n\ta way to test for internet connectivity.\n\n    o\tOps(), cbind(), diff() and na.omit() methods for time series\n\tobjects moved from package ts to package base.\n\n    o\tNew option `download.file.method' can be used to set the\n\tdefault method for download.file() and functions which use it\n\tsuch as update.packages().\n\n    o\torder() and sort.list() now implement na.last = FALSE, NA.\n\n    o\tStarted work on new package management system: packageStatus()\n\tand friends.\n\n    o\tpage() has a new `method' argument allowing `method = print'.\n\n    o\tpng(), jpeg() and bmp() devices now have a `bg' argument to\n\tset the background color: useful to set \"transparent\" on png().\n\n    o\tChanges to the postscript() device:\n\n\t- The symbol font can now be set on a postscript() device, and\n\t  support has been added for using Computer Modern type-1\n\t  fonts (including for symbols). (Contributed by Brian D'Urso.)\n\n\t- There is now support for URW font families: this will give\n\t  access to more characters and more appropriate metrics on\n\t  PostScript devices using URW fonts (such as ghostscript).\n\n\t- %%IncludeResource comments have been added to the output.\n\t  (Contributed by Brian D'Urso.)\n\n    o\tpredict.ppr() now predicts on `newdata' containing NAs.\n\n    o\tprincomp() now has a formula interface.\n\n    o\treadChar() now returns what is available if fewer characters\n\tthan requested are on the file.\n\n    o\treadline() allows up to 256 chars for the prompt.\n\n    o\tread.table(), scan() and count.fields() have a new argument\n\t`comment.char', default `#', that can be used to start\n\tcomments on a line.\n\n    o\tNew function reg.finalizer() to provide R interface to\n\tfinalization.\n\n    o\treshape() extends reshapeLong, reshapeWide, which are deprecated.\n\n    o\trle() now returns a classed object, has a print method and\n\tan inverse.\n\n    o\tChanges to save() and friends:\n\n\t- save() now takes an envir argument for specifying where\n\t  items to be saved are to be found.\n\n\t- A new default format for saved workspaces has been\n\t  introduced.  This format provides support for some new\n\t  internal data types, produces smaller save files when saving\n\t  code, and provides a basis for a more flexible serialization\n\t  mechanism.\n\n\t- Modified `save' internals to improve performance when saving\n\t  large collections of code.\n\n\t- save() and save.image() now take a `version' argument to\n\t  specify the workspace file-format version to use.  The\n\t  version used from R 0.99.0 to 1.3.1 is version 1.  The new\n\t  default format is version 2.\tload() can read a version 2\n\t  saved workspace if it is compressed.\n\n\t- save() and save.image() now take a `compress' argument to\n\t  specify that the saved image should be written using the zlib\n\t  compression facilities.\n\n\t- save.image() now takes an argument `ascii'.\n\n\t- save.image() now takes an argument `safe'.  If TRUE, the\n\t  default, a temporary file is used for creating the saved\n\t  workspace.  The temporary file is renamed if the save\n\t  succeeds.  This preserves an existing workspace if the save\n\t  fails, but at the cost of using extra disk space during the\n\t  save.\n\n\t- save.image() default arguments can be specified in the\n\t  `save.image.defaults' option.\t These specifications are used\n\t  when save.image() is called from q() or GUI analogs.\n\n\n    o\tscan() allows unlimited (by R) lengths of input lines, instead\n\tof a limit of 8190 chars.\n\n    o\tsmooth.spline() has a new `control.spar' argument and returns\n\t`lambda' besides `spar'.  spar <= 0 is now valid and allows\n\tto go more closely towards interpolation (lambda -> 0) than before.\n\tThis also fixes smooth.spline() behavior for \"df ~= n - 2\". Better\n\terror messages in several situations.\n\n\tNote that spar = 0 is no longer the default and no longer entails\n\tcross-validation.\n\n    o\tstars() has been enhanced; new `mar' argument uses smaller\n\tmar(gins) by default; further `nrow and `ncol' as S-PLUS,\n\t`frame.plot', `flip.labels', `lty' and explicit `main', `sub',\n\t`xlab' and `ylab'.  Note that `colors' has been replaced by\n\t`col.segments' and there's a new `col.stars'.\n\n\tstars() now returns the locations invisibly.\n\n    o\tstep() is now closer to stepAIC() and so handles a wider range\n\tof objects (but stepAIC [in MASS] is still more powerful).\n\n    o\tsymbols() now has automatic xlab and ylab and a main argument\n\twhich eliminates an incorrect warning.\tIt better checks wrongly\n\tscaled arguments.\n\n    o\tSys.setlocale() now issues a warning if it fails.\n\n    o\tAn enhanced function type.convert() is now a documented\n\tfunction, rather than just internal to read.table().\n\n    o\twarning() allows multiple arguments, following S4's style.\n\n    o\tNew function with() for evaluating expressions in environments\n\tconstructed from data.\n\n    o\tUnix x11() devices can now have a canvas color set, which can\n\thelp to distinguish plotting \"white\" from plotting\n\t\"transparent\".\n\n    o\tOn Unix, X11(), png() and jpeg() now give informative warnings\n\tif they fail to open the device.\n\n\n    o\tThe startup processing now interprets escapes in the values of\n\tenvironment variables set in R_HOME/etc/Renviron in a similar\n\tway to most shells.\n\n    o\tThe operator \"=\" is now allowed as an assignment\n\toperator in the grammar, for consistency with other languages,\n\tincluding recent versions of S-PLUS.  Assignments with \"=\" are\n\tbasically allowed only at top-level and in braced or\n\tparenthesized expressions, to make famous errors such as\n\t\"if(x=0) 1 else 2\" illegal in the grammar.\n\t(There is a plan to gradually eliminate the underscore as an\n\tassignment in future versions of R.)\n\n    o\tFinalizers can be registered to be run on system exit for both\n\treachable and unreachable objects.\n\n    o\tinteger addition, subtraction, and multiplication now return NA's\n\ton overflow and issue a warning.\n\n    o\tPrinting factors with both level \"NA\" and missing values\n\tuses `<NA>' for the missing values to distinguish them.\n\n    o\tAdded an experimental interface for locking environments and\n\tindividual bindings.  Also added support for \"active bindings\"\n\tthat link a variable to a function (useful for example for linking\n\tan R variable to an internal C global).\n\n    o\tGNOME interface now has separate colours for input and output\n\ttext (like the windows GUI). These can be modified via the\n\tproperties dialogue.\n\n    o\tOutput from the GNOME console is block buffered for increased\n\tspeed\n\n    o\tThe GNOME console inherits standard emacs-style keyboard\n\tshortcuts from the GtkText widget for cursor motion, editing\n\tand selection.\tThese have been modified to allow for the prompt\n\tat the beginning of the command line.\n\n    o\tOne can register R functions and C routines to be called at the\n\tend of the successful evaluation of each top-level expression,\n\tfor example to perform auto-saves, update displays, etc. See\n\taddTaskCallback() and taskCallbackManager(). See\n\thttp://developer.r-project.org/TaskHandlers.pdf.\n\n\nDEPRECATED & DEFUNCT\n\n    o\t.Alias has been removed from all R sources and deprecated.\n\n    o\treshapeLong(), reshapeWide() are deprecated in favour of reshape().\n\n    o\tPreviously deprecated functions read.table.url(), scan.url(),\n\tsource.url(), httpclient() and parse.dcf() are defunct.\n\tMethod \"socket\" for download.file() no longer exists.\n\n\nDOCUMENTATION CHANGES\n\n    o\t`Writing R Extensions' has a new chapter on generic/method\n\tfunctions.\n\n\nUTILITIES\n\n    o\tNew package `tools' for package development and administration\n\ttools, containing the QC tools checkFF(), codoc() and undoc()\n\tpreviously in package base, as well as the following new ones:\n\n\t-  checkAssignFuns() for checking whether the final argument of\n\t   replacement functions in a package is named `value'.\n\n\t-  checkDocArgs() for checking whether all arguments shown in\n\t   \\usage of Rd files are documented in the corresponding\n\t   \\arguments.\n\n\t-  checkMethods() for checking whether all methods defined in a\n\t   package have all arguments of their generic.\n\n\t-  checkTnF() for finding expressions containing the symbols `T'\n\t   and `F'.\n\n    o\tR CMD Rd2dvi has more convenient defaults for its output file.\n\n    o\tR CMD check now also fully checks the Depends field in the\n\tpackage DESCRIPTION file.  It also tests for syntax errors in\n\tthe R code, whether all methods in the code have all arguments\n\tof the corresponding generic, for arguments shown in \\usage but\n\tnot documented in \\arguments, and whether replacement functions\n\thave their final argument named `value'.\n\n\nC-LEVEL FACILITIES\n\n    o\tarraySubscript and vectorSubscript are now available to package\n\tusers.\tAll \"array-like\" packages can use a standard method for\n\tcalculating subscripts.\n\n    o\tThe C routine type2symbol, similar to type2str, returns a symbol\n\tcorresponding to the type supplied as an argument.\n\n    o\tThe macro SHLIB_EXT now includes `.', e.g. \".so\" or \".dll\",\n\tsince the Mac uses \"Lib\" without a `.'.\n\n    o\tNew Fortran entry points rwarn() and rexit() for warnings and\n\terror exits from compiled Fortran code.\n\n    o\tA new serialization mechanism is available that can be used to\n\tserialize R objects to connections or to strings.  This\n\tmechanism is used for the version 2 save format.  For now,\n\tonly an internal C interface is available.\n\n    o\tR_tryEval() added for evaluating expressions from C code with\n\terrors handled but guaranteed to return to the calling C\n\troutine. This is used in embedding R in other applications and\n\tlanguages.\n\n    o\tSupport for attach()'ing user-defined tables of variables\n\tis available and accessed via the RObjectTables package\n\tcurrently at http://www.omegahat.org/RObjectTables.\n\n\nBUG FIXES\n\n    o\tFixed share/perl/massage-examples.pl to detect instances of\n\tpar() at the very start of a line.\n\n    o\tFixed Pearson residuals for glms with non-canonical\n\tlink.(PR#1123). Fixed them again for weights (PR#1175).\n\n    o\tFixed an inconsistency in the evaluation context for on.exit\n\texpressions between explicit calls to `return' and falling off\n\tthe end returns.\n\n    o\tThe code in model.matrix.default() handling contrasts was\n\tassuming a response was present, and so without a response was\n\tfailing to record the contrasts for the first variable if it\n\twas a factor.\n\n    o\tdiffinv() could get the time base wrong in some cases.\n\n    o\tfile.append() was opening all files in text mode: mattered\n\ton Windows and classic Macintosh. (PR#1085)\n\n    o\tf[] <- g  now works for factor f.\n\n    o\tsubstr<-() was misbehaving if the replacement was too short.\n\n    o\tThe version of `packages.html' generated when building R or\n\tinstalling packages had an incorrect link to the style sheet.\n\tThe version used by help.start() was correct. (PR#1090)\n\n    o\trowsum() now gives character (not factor codes) as rownames.\n\t(PR#1092)\n\n    o\tplot.POSIX[cl]t now respect the `xaxt' parameter.\n\n    o\tIt is now possible to predict from an intercept-only model:\n\tpreviously model.matrix.default() objected to a 0-column\n\tmodel frame.\n\n    o\tc.POSIXct was not setting the right classes in 1.3.x.\n\n    o\tcor(*, use = \"all.obs\") <= 1 is now guaranteed which ensures\n\tthat sqrt(1 - r^2) is always ok in cor.test(). (PR#1099)\n\n    o\tanova.glm() had a missing drop=FALSE and so failed for some\n\tintercept-less models.\n\n    o\tpredict.arima0() now accepts vector as well as matrix\n\t`newxreg' arguments.\n\n    o\tcbind(d,f) now works for 0-column dataframes. This fixes PR#1102.\n\n    o\tplot(ts(0:99), log = \"y\") now works\n\n    o\tmethod \"gnudoit\" of bug.report() was incorrectly documented as\n\t\"gnuclient\" (PR#1108)\n\n    o\tsaving with ascii=TRUE mangled backslashes. (PR#1115)\n\n    o\tfrac(,) {and others} now adds a gap appropriately. (PR#1101)\n\n    o\tlogLik.lm() now uses the correct \"df\" (nlme legacy code).\n\n    o\tcloseAllConnections() works again, and closes all sink() diversions.\n\n    o\tsink(type=\"message\") works again.\n\n    o\tsink.number was (accidentally) returning the result invisibly.\n\n    o\tas.POSIXct(\"NA\") (or ..lt) now work; hence, merge(*, all=TRUE) now\n\tworks with dataframes containing POSIXt date columns.\n\n    o\tinteger(2^30+1) and similar ones do not segfault anymore but duly\n\treport allocation errors.\n\n    o\tseq(0, 0, 1) now works (PR#1133).\n\n    o\treshapeWide() got it wrong if the \"i\" factor was not sorted (the\n\tfunction is now deprecated since reshape() is there, but the bug\n\tstill needed fixing...)\n\n    o\tPR#757 was fixed incorrectly, causing improper subsetting of\n\tpch etc. in plot.formula().\n\n    o\tlibrary() no longer removes environments of functions that are\n\tnot defined in the top-level package scope.  Also, packages\n\tloaded by require() when sourcing package code are now visible\n\tin the remaining source evaluations.\n\n    o\tnames(d) <- v  now works (again) for \"dist\" objects d. (PR#1129)\n\n    o\tWorkarounds for problems with incompletely specified date-times\n\tin strptime() which were seen only on glibc-based systems\n\t(PR#1155).\n\n    o\tpromax() was returning the wrong rotation matrix. (PR#1146)\n\n    o\tThe [pqr]signrank and [pqr]wilcox functions failed to check that\n\tmemory has been allocated (PR#1149), and had (often large)\n\tmemory leaks if interrupted.  They now can be interrupted on\n\tWindows and Mac OS and don't leak memory.\n\n    o\trange(numeric(0)) is now c(NA, NA) not NA.\n\n    o\tround(x, digits) for digits <= 0 always gives an integral\n\tanswer.\t Previously it might not due to rounding errors in\n\tfround. (PR#1138/9)\n\n    o\tSeveral memory leaks on interrupting functions have been\n\tcircumvented.  Functions lqs() and mve() can now be\n\tinterrupted on Windows and Mac OS.\n\n    o\timage() was finding incorrect breakpoints from\n\tirregularly-spaced midpoints. (PR#1160)\n\n    o\tUse fuzz in the 2-sample Kolmogorov-Smirnov test in package\n\tctest to avoid rounding errors (PR#1004, follow-up).\n\n    o\tUse exact Hodges-Lehmann estimators for the Wilcoxon tests in\n\tpackage ctest (PR#1150).\n\n    o\tArithmetic which coerced types could lose the class\n\tinformation, for example `table - real' had a class attribute\n\tbut was not treated as a classed object.\n\n    o\tInternal ftp client could crash R under error conditions such\n\tas failing to parse the URL.\n\n    o\tInternal clipping code for circles could attempt to allocate\n\ta vector of length -1 (related to PR#1174)\n\n    o\tThe hash function used internally in match(), unique() and\n\tduplicated() was very inefficient for integers stored as\n\tnumeric, on little-endian chips.  It was failing to hash the\n\timaginary part of complex numbers.\n\n    o\tfifo() no longer tries to truncate on opening in modes\n\tincluding \"w\". (Caused the fifo example to fail on HP-UX.)\n\n    o\tOutput over 1024 characters was discarded from the GNOME\n\tconsole.\n\n    o\trug() now correctly warns about clipped values also for logarithmic\n\taxes and has a `quiet' argument for suppressing these (PR#1188).\n\n    o\tmodel.matrix.default was not handling correctly contrasts.arg\n\twhich did not supply a full set of contrasts (PR#1187).\n\n    o\tThe `width' argument of density() was only compatible with S\n\tfor a Gaussian kernel: now it is compatible in all cases.\n\n    o\tThe rbinom() C code had a transcription error from the original\n\tFortran which led to a small deviation from the intended\n\tdistribution. (PR#1190)\n\n    o\tpt(t, , ncp=0) was wrong if t was +/-Inf.\n\n    o\tSubsetting grouping factors gave incorrect degrees of freedom\n\tfor some tests in package ctests. (PR#1124)\n\n    o\twriteBin() had a memory leak.\n\n    o\tqbeta(0.25, 0.143891, 0.05) was (incorrectly) 3e-308. (PR#1201)\n\n    o\tFixed alignment problem in ppr.f on Irix. (PR#1002, 1026)\n\n    o\tglm() failed on null binomial models. (PR#1216)\n\n    o\tLa.svd() with nu = 0 or nv = 0 could fail as the matrix passed\n\tto DGESVD was not of dimension at least one (it was a vector).\n\n    o\tRownames in xcoef and ycoef of cancor() were wrong if x or y\n\twas rank-deficient.\n\n    o\tlqs() could give warnings if there was an exact fit. (PR#1184)\n\n    o\taov() didn't find free-floating variables for Error() terms when\n\tcalled from inside another function\n\n    o\twrite.table() failed if asked to quote a numerical matrix with\n\tno row names. (PR#1219)\n\n    o\trlnorm( *, *, sd=0) now returns the mean,\n\trnbinom(*, *, prob=1) gives 0, (PR#1218).\n\n\n\t**************************************************\n\t*\t\t\t\t\t\t *\n\t*\t       1.3 SERIES NEWS\t\t\t *\n\t*\t\t\t\t\t\t *\n\t**************************************************\n\n\n\t\tCHANGES IN R VERSION 1.3.1\n\n\nNEW FEATURES\n\n    o\tmassage-examples is now a Perl script and about 50x faster.\n\n    o\tOn Unix(-alike) systems the default pager is now determined\n\tduring configuration, and is `less' if available, otherwise\n\t`more' (and not `more -s' as previously).\n\n    o\tconfigure now tests for strptime functions that fail on inputs\n\tbefore 1970 (found on Irix).  It no longer checks for the SCSL\n\tand SGIMATH libraries on Irix.\n\n    o\tNew formula interface to cor.test() in package ctest.\n\n    o\t\"NA\" is now a valid color name (as NA has been a valid integer\n\tcolor).\n\n    o\tpairs() function has a new `gap' argument for adjusting the\n\tspacing between panels.\n\n    o\tR CMD check has a new test for unbalanced braces in Rd files.\n\n    o\treadBin() has a new argument `signed' to simplify reading\n\tunsigned 8- and 16-bit integers.\n\n    o\tNew capabilities() option \"cledit\".\n\n    o\tModified restore code to give clearer error messages in some cases.\n\n\n\nBUG FIXES\n\n    o\tFixed placement of mtext() output (including tick labels)\n\twhen text is perpendicular to axis AND axis is logged\n\t(PR#997 and PR#865).\n\n    o\trect() and arrows() now respond to setting of par(xpd)\n\n    o\tabline() now responds to the setting of par(xpd), including\n\tvia the \"...\" argument (PR#750).\n\n    o\tUsing cat() to a gzfile() connection no longer compresses poorly\n\t(at the expense of some latency).\n\n    o\tThe `exact' p-values for the two-sided two-sample\n\tKolmogorov-Smirnov test in 1.3.0 were for the wrong tail.\n\n    o\tIn the HTML conversion of .Rd files, \\link[foo]{bar} was\n\tignoring [foo] outside \\code{} statements.\n\n    o\tlm.influence(), plot.lm(), influence.measures() and the\n\trelated diagnostic measures now handle lm() fits with\n\tna.action=na.exclude.\n\n    o\tEliminated segmentation fault in while loops without braces\n\tin their bodies.\n\n    o\tbarplot did not accept NA heights unless ylim was specified.\n\n    o\tpredict.lm() failed with single-column model matrix (PR#1018).\n\n    o\tlegend() now also works with 100s of entries (thanks to\n\tM. Schlather).\n\n    o\tA long-standing bug leading to inaccuracy in polyroot() has been\n\tfixed (PR#751)\n\n    o\tA very old bug with eval() not handling a numeric `envir' argument\n\taccording to specifications has been fixed. [This in particular\n\tbroke ported S-PLUS code that used eval(..., sys.parent())]. Also,\n\teval() now checks that a numeric `envir' has length one to prevent\n\taccidental passing of matrices instead of data frames.\n\n    o\tThe C code underlying nlm(f, *) now also works correctly when f(x)\n\treturns +Inf {nlm() itself *did* work!}.\n\n    o\tpdfcolor.tex is now included in doc/manual, as pdftex seems no\n\tlonger to include it.\n\n    o\tFixed protect bug in save() code that might have been responsible\n\tfor occasionally saving corrupted workspaces.\n\n    o\tcapabilities(\"X11\") now reports if X11 is available in this\n\tsession, thereby giving the correct answer if --gui=none was\n\tspecified.\n\n    o\tRd files with ,, inside \\code{} were treating this as a\n\tligature in LaTeX: now corrected in Rdconv.\n\n    o\tdlopen on Compaq Tru64 was finding the wrong entry points:\n\tworked-around by using different names in the modules.\n\n    o\tplot.mts() allows a type argument again (broken in 1.3.0: PR#1010).\n\n    o\tscan() has a limit of 8190 on the length of char strings, and\n\tnow warns if it is exceeded (when the string has always been\n\ttruncated).\n\n    o\tpar adj now accepts values of integer mode (such as text(adj=0:1)).\n\n    o\thorizontal adj values outside the range [0, 1] are now\n\tsupported on devices with canHAdj==1 (Windows devices, xfig).\n\n    o\txtabs() without a response was ignoring drop.unused.levels=TRUE.\n\n    o\treadLines(ok=FALSE) was not generating an error when it should.\n\n    o\tprincomp(covmat=) has been broken.\n\n    o\tMany documentation clean-ups: formerly undocumented arguments,\n\tuse of T/F rather than TRUE/FALSE.\n\n    o\tdf[] <- foo now works for data frames (PR#1047).\n\n    o\tnargs() was documented incorrectly.\n\n    o\tUsing seq.POSIXt(by=\"2 weeks\") was stepping by single weeks\n\t(PR#1046).\n\n    o\tdummy.coef.lm was not handling complex terms like z:I(x).\n\tIt now either does or warns and gives NAs (PR#1048).\n\n    o\tpredict.mlm() was broken (PR#1049).\n\n    o\tksmooth (in package modreg) was using points to the left\n\tof the kernel under some circumstances (PR#1050).\n\n    o\tattr(x, \"class\") <- character(0) was segfaulting.  Similar problem\n\twith \"comment\" attribute also fixed.\n\n    o\tloadings() results from PCA (as well as from factor analysis)\n\tare now printed by print.loadings.\n\n    o\tUsing chol() on an non-positive-definite matrix gave an\n\tmisleading error message (PR#1061).\n\n    o\tas.character() on a language object was truncating to about 70\n\tcharacters: the internal limit (from the deparse code) is now the\n\tmaximum possible 500.\n\n    o\tX11() device was failing to re-initialize correctly after all\n\tdevices were shut down, so the colortype could not be changed\n\tand some systems showed protocol errors. (PR#1065)\n\n    o\tConverting Inf and NaN values by as.character() and reading by\n\tscan() was supported by strtod on some platforms and not\n\tothers: these are now handled by R itself. (PR#1072)\n\n    o\thclust(dist(1)) doesn't loop infinitely but signal an error.\n\n    o\tcutree() can now cut outside heights and does not return\n\tgarbage\tfor h >= max(tree$heights) anymore. (PR#1067)\n\n    o\tinteraction(...,drop=F) returned an object looking like a\n\tfactor, but with storage mode \"double\", confusing\n\tmodel.matrix.default (PR#1003)\n\n    o\tsplineDesign(*, ord=) and others give better error messages for\n\twrong `ord' (and have slightly improved documentation).\n\n\n\t\tCHANGES IN R VERSION 1.3.0\n\n\nNEW FEATURES\n\n    o\tChanges to connections:\n\n\t-  New function url() to read from URLs.  file() will also\n\t   accept URL specifications, as will all the functions which\n\t   use it.\n\n\t-  file connections can now be opened for both reading and writing.\n\n\t-  Anonymous file connections (via file()) are now supported.\n\n\t-  New function gzfile() to read from / write to compressed files.\n\n\t-  New function fifo() for connections to / from fifos (on Unix).\n\n\t-  Text input from file, pipe, fifo, gzfile and url connections\n\t   can be read with a user-specified encoding.\n\n\t-  New functions readChar() and writeChar() to read character\n\t   strings with known lengths and no terminators, and to write\n\t   user-specified lengths from strings.\n\n\t-  sink() now has a stack of output connections, following S4.\n\n\t-  sink() can also be applied to the message stream, to capture\n\t   error messages to a connection.  Use carefully!\n\n\t-  seek() has a new `origin' argument.\n\n\t-  New function truncate() to truncate a connection open for\n\t   writing at the current position.\n\n\t-  Socket connections via function socketConnection().\n\n\t-  The `blocking' argument for file, fifo  and socket connections\n\t   is now operational.\n\n    o\tChanges to date/time classes and functions:\n\n\t-  Date/time objects now all inherit from class \"POSIXt\".\n\n\t-  New function difftime() and corresponding class for date/time\n\t   differences, and a round() method.\n\n\t-  Subtraction and logical comparison of objects from different\n\t   date/time classes is now supported.\tNB: the format for the\n\t   difference of two objects of the same date/time class has\n\t   changed, but only for objects generated by this version, not\n\t   those generated by earlier ones.\n\n\t-  Methods for cut(), seq(), round() and trunc() for date/time\n\t   classes.\n\n\t-  Convenience generic functions weekdays(), months(), quarters()\n\t   and julian() with methods for \"POSIXt\" objects.\n\n    o\tCoercion from real to integer now gives NA for out-of-range\n\tvalues, rather than the most extreme integer of the same sign.\n\n    o\tThe Ansari-Bradley, Bartlett, Fligner-Killeen, Friedman,\n\tKruskal-Wallis, Mood, Quade, t, and Wilcoxon tests as well as\n\tvar.test() in package ctest now have formula interfaces.\n\n    o\tMatrix multiplication functions %*% and crossprod() now use a\n\tlevel-3 BLAS routine dgemm.  When R is linked with the ATLAS\n\tor other enhanced BLAS libraries this can be substantially\n\tfaster than the previous code.\n\n    o\tNew functions La.eigen() and La.svd() for eigenvector and\n\tsingular value decompositions, based on LAPACK.\t These are\n\tpreferred to eigen() and svd() for new projects and can make\n\tuse of enhanced BLAS routines such as ATLAS.  They are\n\tused in cancor(), cmdscale(), factanal() and princomp()\n\tand this may lead to sign reversals in some of the output of\n\tthose functions.\n\n    o\tProvided the Fortran compiler can handle COMPLEX*16, the\n\tfollowing routines now handle complex arguments, based on\n\tLAPACK code.\n\n\tqr, qr.coef, qr.solve, qr.qy, qr.qty, solve.default, svd, La.svd.\n\n\n\n    o\taperm() uses strides in the internal C code and so is\n\tsubstantially faster (by Jonathan Rougier).\n\n    o\tThe four bessel[IJKY](x,nu) functions are now defined for nu < 0.\n\n    o\t[dpqr]nbinom also accept an alternative parametrization via the\n\tmean and the dispersion parameter (thanks to Ben Bolker).\n\n    o\tGeneralised \"birthday paradox\" functions [pq]birthday.\n\n    o\tboxplot() and bxp() have a new argument `at'\n\n    o\tNew function capabilities() to report optional capabilities\n\tsuch as jpeg, png, tcltk, gzfile and url support.\n\n    o\tNew function checkFF() for checking foreign function calls.\n\n    o\tNew function col2rgb() for color conversion of names, hex, or\n\tinteger.\n\n    o\tcoplot() has a new argument `bar.bg' (color of conditioning bars),\n\tgives nicer plots when the conditioners are factors, and allows\n\tfactors for x and y (treated almost as if unclass()ed) using new\n\targument `axlabels'.  [original ideas by Thomas Baummann]\n\n    o\t`hessian' argument added to deriv() and its methods.  A new function\n\tderiv3() provides identical capabilities to deriv() except that\n\t`hessian' is TRUE by default.\n\tderiv(*, *, func = TRUE) for convenience.\n\n    o\tNew dev.interactive() function, useful for setting defaults for\n\tpar(ask=*) in multifigure plots.\n\n    o\tdist() in package mva can now handle missing values, and\n\tzeroes in the Canberra distance.\n\n    o\tThe default method for download.file() (and functions which use\n\tit such as update.packages()) is now \"internal\", and uses code\n\tcompiled into R.\n\n    o\teigen() tests for symmetry with a numerical tolerance.\n\n    o\tNew function formatDL() for formatting description lists.\n\n    o\tNew argument `nsmall' to format.default(), for S-PLUS\n\tcompatibility (and used in various packages).\n\n    o\t?/help() now advertises help.search() if it fails to find a topic.\n\n    o\timage() is now a generic function.\n\n    o\tNew function integrate() with S-compatible call.\n\n    o\tNew function is.unsorted() the C version of which also speeds up\n\t.Internal(sort()) for sorted input.\n\n    o\tis.loaded() accepts an argument PACKAGE to search within\n\ta specific DLL/shared library.\n\n    o\tExact p-values are available for the two-sided two-sample\n\tKolmogorov-Smirnov test.\n\n    o\tlm() now passes `...' to the low level functions for regression\n\tfitting.\n\n    o\tGeneric functions logLik() and AIC() moved from packages nls\n\tand nlme to base, as well as their *.lm methods.\n\n    o\tNew components in .Machine give the sizes of long, long long and\n\tlong double C types (or 0 if they do not exist).\n\n    o\tmerge.data.frame() has new arguments, `all[.xy]' and `suffixes',\n\tfor S compatibility.\n\n    o\tmodel.frame() now calls na.action with the terms attribute set\n\ton the data frame (needed to distiguish the response, for\n\texample).\n\n    o\tNew generic functions naresid(), napredict() and naprint()\n\t(formerly in packages survival5 and MASS, also used in rpart).\n\tAlso na.exclude(), a variant on na.omit() that is handled\n\tdifferently by naresid() and napredict().\n\n\tThe default, lm and glm methods for fitted, residuals, predict\n\tand weights make use of these.\n\n    o\tNew function oneway.test() in package ctest for testing for\n\tequal means in a one-way layout, assuming normality but not\n\tnecessarily equal variances.\n\n    o\toptions(error) accepts a function, as an alternative to\n\tan expression.\t(The Blue Book only allows a function; current\n\tS-PLUS a function or an expression.)\n\n    o\touter() has a speed-up in the default case of a matrix outer\n\tproduct (by Jonathan Rougier).\n\n    o\tpackage.skeleton() helps with creating new packages.\n\n    o\tNew pdf() graphics driver.\n\n    o\tpersp() is now a generic function.\n\n    o\tplot.acf() makes better use of white space for `nser > 2', has\n\tnew optional arguments and uses a much better layout when more\n\tthan one page of plots is produced.\n\n    o\tplot.mts() has a new argument `panel' providing the same\n\tfunctionality as in coplot().\n\n    o\tpostscript() allows user-specified encoding, with encoding files\n\tsupplied for Windows, Mac, Unicode and various others, and with\n\tan appropriate platform-specific default.\n\n    o\tprint.htest() can now handle test names that are longer than\n\tone line.\n\n    o\tprompt() improved for data sets, particularly non-dataframes.\n\n    o\tqqnorm() is now a generic function.\n\n    o\tread.fwf() has a new argument `n' for specifying the number of\n\trecords (lines) read in.\n\n    o\tread.table() now uses a single pass through the dataset.\n\n    o\trep() now handles lists (as generic vectors).\n\n    o\tscan() has a new argument `multi.line' for S compatibility,\n\tbut the default remains the opposite of S (records can cross\n\tline boundaries by default).\n\n    o\tsort(x) now produces an error when x is not atomic instead of\n\tjust returning x.\n\n    o\tsplit() now allows splitting on a list of factors in which case\n\ttheir interaction defines the grouping.\n\n    o\tstl() has more optional arguments for fine tuning, a summary()\n\tand an improved plot() method.\n\n    o\tNew function strwrap() for formatting character strings into\n\tparagraphs.\n\n    o\tNew replacement functions substr<-() and substring<-().\n\n    o\tDataset swiss now has row names.\n\n    o\tArguments `pkg' and `lib' of system.file() have been renamed to\n\t`package' and `lib.loc', respectively, to be consistent with\n\trelated functions.  The old names are deprecated.  Argument\n\t`package' must now specify a single package.\n\n    o\tThe Wilcoxon and Ansari-Bradley tests now return point\n\testimators of the location or scale parameter of interest along\n\twith confidence intervals for these.\n\n    o\tNew function write.dcf() for writing data in Debian Control File\n\tformat.\t parse.dcf() has been replaced by (much faster)\tinternal\n\tread.dcf().\n\n    o\tContingency tables created by xtabs() or table() now have a\n\tsummary() method.\n\n    o\tFunctions httpclient(), read.table.url(), scan.url() and\n\tsource.url() are now deprecated, and hence method=\"socket' in\n\tdownload.file() is.  Use url connections instead: in\n\tparticular URLs can be specified for read.table(), scan() and\n\tsource().\n\n    o\tFormerly deprecated function getenv() is now defunct.\n\n    o\tSupport for package-specific demo scripts (R code).  demo() now\n\thas new arguments to specify the location of demos and to allow\n\tfor running base demos as part of `make check'.\n\n    o\tIf not explicitly given a library tree to install to or remove\n\tfrom, respectively, R CMD INSTALL and R CMD REMOVE now operate\n\ton the first directory given in `R_LIBS' if this is set and\n\tnon-null, and the default library otherwise.\n\n    o\tR CMD INSTALL and package.description() fix some common problems\n\tof DESCRIPTION files (blank lines, ...)\n\n    o\tThe INSTALL command for package installation allows a `--save'\n\toption.\t Using it causes a binary image of the package contents\n\tto be created at install time and loaded when the package is\n\tattached.  This saves time, but also uses a more standard way\n\tof source-ing the package.  Packages that do more than just\n\tassign object definitions may need to install with `--save'.\n\tPutting a file `install.R' in the package directory makes\n\t`--save' the default behavior.\tIf that file is not empty, its\n\tcontents should be R commands executed at the end of loading\n\tthe image.\n\n\tThere is also a new command line option `--configure-vals' for\n\tpassing variables to the configure script of a package.\n\n    o\tR CMD check now also checks the keyword entries against the list\n\tof standard keywords, for code/documentation mismatches (this\n\tcan be turned off by the command line option `--no-codoc'), and\n\tfor sufficient file permissions (Unix only).  There is a new check\n\tfor the correct usage of library.dynam.\n\n\tIt also has a new command line option `--use-gct' to use\n\t`gctorture(TRUE)' when running R code.\n\n    o\tR CMD Rd2dvi has better support for producing reference manuals\n\tfor packages and package bundles.\n\n    o\tconfigure now tests for the versions of jpeg (>= 6b), libpng (>=\n\t1.0.5) and zlib (>= 1.1.3).  It no longer checks for the\n\tCXML/DXML BLAS libraries on Alphas.\n\n    o\tPerl scripts now use Cwd::cwd() in place of Cwd::getcwd(), as\n\tcwd() can be much faster.\n\n    o\tR::Dcf.pm can now also handle files with more than one record\n\tand checks (a little bit) for continuation lines without leading\n\twhitespace.\n\n    o\tNew manual `R Installation and Administration' with fuller\n\tdetails on the installation process: file `INSTALL' is now a\n\tbrief introduction referencing that manual.\n\n    o\tNew keyword `internal' which can be used to hide objects that\n\tare not part of the API from indices like the alphabetical lists\n\tin the HTML help system.\n\n    o\tUnder Unix, shlib modules for add-on packages are now linked\n\tagainst R as a shared library (`libR') if this exists.\t(This\n\tallows for improved embedding of R into other applications.)\n\n    o\tNew mechanism for explicitly registering native routines in a\n\tDLL/shared library accessible via .C(), .Call(), .Fortran() and\n\t.External().  This is potentially more robust than the existing\n\tdynamic lookup, since it checks the number of arguments, type of\n\tthe routine.\n\n    o\tNew mechanism allowing registration of C routines for converting\n\tR objects to C pointers in .C() calls.\tUseful for references to\n\tdata in other languages and libraries (e.g. C and hdf5).\n\n    o\tThe internal ftp/http access code maintains the event loop, so\n\tyou can download whilst running tcltk or Rggobi, say.  It can\n\tbe hooked into package XML too.\n\n\n\nBUG FIXES\n\n    o\tboxplot.stats() now returns the correct `n' component in the case of\n\tNAs. This also affects `conf', the notch length (PR#967).\n\n    o\tthe \"coef = 0\" fix (PR#917) to boxplot.stats() broke\n\tboxplot.stats(do.out = FALSE).\n\n    o\tcurve(* , add = FALSE) now works correctly again if used when\n\tpar(\"xlog\") is true.\n\n    o\tPrinting a dataframe with a column called \"row.names\" or\n\t\"check.names\" omitted the column.\n\n    o\tdata.frame(a=1, b=2)[1, -(1:2)]\t now works, giving an empty\n\tdata frame.  as.matrix(df), deparse(), dput() and str() now work\n\tfor empty data frames.\n\n    o\tdbeta() could return zero erroneously on some platforms where\n\troundoff makes e.g. 1.3 - 1 > (1.3 + 1) - 2 (Solaris and HP-UX\n\twere affected). (PR#970)\n\n    o\tpointer protection in deriv() (PR#953)\n\n    o\texpand.data.frame() didn't interpret its subset= argument in\n\tthe data frame. (PR#979 et al., fix from Greg Warnes)\n\n    o\tformat() on character arrays was losing the dimensions.\n\n    o\thist.default() was ignoring its `probability' argument for\n\tequi-spaced breaks.\n\n    o\tOccasionally insane results of is.nan(NULL), is.na(NULL) (PR#952)\n\n    o\tks.test() in package ctest now had the one-sided alternatives in\n\tthe one-sample case reversed (PR#934).\n\n    o\tls.str() and lsf.str() now work better with pos > 1, and are\n\tcorrectly documented (PR#899).\n\n    o\tplot(1:2, xaxs = \"i\") now gives both \"1.0\" and \"2.0\" x-axis labels.\n\n    o\tpromax() was not using its `m' argument (m=4 was always used).\n\n    o\tqr.X() was ignoring pivoting (which happens only in\n\trank-deficient cases).\n\n    o\tsign of Pearson residuals was wrong for reciprocal link (PR#862)\n\n    o\tThe algorithm for determining starting estimates in the SSfpl\n\tself-starting model in the nls package was changed following a\n\tsuggestion by Phillipe Grosjean <phgrosje@ulb.ac.be>\n\n    o\tsvd(x)$v was not a matrix when x had only 1 row (PR#963).\n\n    o\tsymnum(x) behaves more reasonably for zero length or non-numeric x.\n\n    o\tThe implementation of sys.function() did not work when the\n\tcurrent function was already a function (e.g., a closure).\n\n    o\ttapply() had \"...\" argument after simplify=, which made it\n\tincompatible with S when passing additional unnamed arguments to FUN.\n\n    o\tuse formula environments in xy.coords() (PR#932)\n\n\n    o\tUnused entry points in `src/appl/fortran.c' and `Fortran.h'\n\thave been removed.\n\n    o\tUnused directory `src/f2clib' and header `src/include/R_ext/f2c.h'\n\thave been removed.\n\n    o\tThe documentation and parts of the parse/deparse mechanism\n\tindicated that there was an operator `%'. Corrected (PR#925).\n\n    o\tFixed some cases where the deparser gave code that threw a\n\tsyntax error when parsed.\n\n    o\tUsing a pushback with more than two lines at a time could crash.\n\n    o\tEliminate or warn on use of .Last.value in help examples, since\n\t.Last.value is only set from top-level expressions (and was\n\tincorrectly documented).\n\n    o\tasInteger was ignoring integer overflow (PR#929 and others).\n\n    o\tapproxfun(*, ties = <fun>) could return garbage when there were ties;\n\tties = \"ordered\" was incorrect--also for approx()-- when there was\n\ta tie at the very right.\n\n\n\t**************************************************\n\t*\t\t\t\t\t\t *\n\t*\t       1.2 SERIES NEWS\t\t\t *\n\t*\t\t\t\t\t\t *\n\t**************************************************\n\n\n\t\tCHANGES IN R VERSION 1.2.3\n\nNEW FEATURES\n\n    o\tSupport for configuration and building the Unix version of R\n\tunder Mac OS X.\t (The `classic' Macintosh port is `Carbonized'\n\tand also runs under that OS.)\n\n    o\tdotchart() and stripchart() become the preferred names for\n\tdotplot() and stripplot(), respectively.  The old names are now\n\tdeprecated.\n\n    o\tFunctions in package ctest now consistently use +/-Inf rather\n\tthan NA for one-sided confidence intervals.\n\n\n\nBUG FIXES\n\n    o\t`Writing R Extensions' incorrectly described an entry point\n\t`fmod' which was not included in the R binary on most systems.\n\tThe entry point has been removed, to avoid any confusion with\n\tthe standard C entry point of the same name.\n\n    o\tPrinting of kernels in package ts was unreliable: the internal\n\trepresentation was correct.\n\n    o\tA problem with \"...\" in substitutions has been fixed (PR#860).\n\n    o\tVarious strangeness with match.call() and \"...\" has been fixed\n\t(PR#813).\n\n    o\tsys.function() could return an unevaluated promise, messing up\n\tformals() and match.arg() (PR#872)\n\n    o\tDeparsing or dumping attributes with non-standard names was\n\tnot quoting the name (PR#871).\n\n    o\tWe now use match.fun() in tapply() so that it won't get trapped\n\tby non-functions masking FUN.\n\n    o\tThe `nmax' argument in scan(what=list(...), nmax=300) was\n\tcounting blank lines, although they were said to be ignored.\n\tThis affected using read.table on files with blank lines in\n\t1.2.2, and using `n' with `what' a list.\n\n    o\tas.numeric(), as.integer(), as.complex() returned zero on\n\tcompletely blank strings. Now they return NA. (PR#870)\n\n    o\tOverflow in deparse() in terms(formula) with very long left-hand\n\tside fixed.  (PR#873)\n\n    o\tlowess(c(1:3, 7:5)) now should give the same on different platforms,\n\tsince now in the C code (int)(f*n + 1e-7) is used.\n\n    o\tcurve(*, add = TRUE) now works properly with active log scales.\n\n    o\trt() could give different results on different platforms as\n\tthe order of evaluation of calls to random numbers was not\n\tfully defined.\tThis affected the Mac port.\n\n    o\tppr() inside nested calls sometimes failed to find objects\n\tdue to a typo in the eval call in ppr.formula.\n\n    o\tqchisq(0.025, 31, ncp=1, lower.tail=FALSE) now works.  (PR#875)\n\n    o\tdchisq with integer x, df and ncp sometimes gave incorrect\n\tresults on i686 Linux.\n\n    o\tCancelling a quit caused quit() not to ask next time it was called.\n\n    o\tSome complicated operations with \"...\" didn't work.\n\n    o\tMissingness was not correctly propagated in some cases.\n\n    o\teigen() segfaulted on 0-dimensional matrices.\n\n    o\tnls( ~ rhs, ..)\t now works (formula with empty left hand side).\n\n    o\tThe fuzz added in hist() for 1.2.2 broke the logic testing for\n\tequidistant breakpoints.\n\n    o\tCalls to replacement functions (\"f<-\") lost argument names\n\t(PR#888).\n\n    o\tis.na() and is.nan() gave random results on lists containing\n\tzero-length objects.\n\n    o\tcor(), cov() and var() gave a result on a zero-length argument\n\t(now an error).\t cov(x, NULL) and cor(x, NULL) are now errors\n\tif x is a vector.  (PR#883).\n\n    o\t?smooth.spline now properly describes `spar' which is *not*\n\tlambda.\t smooth.spline(1:20, spar = 50) gives an error instead\n\tof silent nonsense.  print.smooth.spline() now makes use of a\n\tdigits argument.\n\n    o\tConfidence intervals for wilcox.test() had the samples reversed\n\tin the two-sided case (PR#895), and sometimes got continuity\n\tcorrection wrong (PR#896).\n\n    o\tUsing out-of-range font values in text() on a postscript()\n\tdevice on Windows could crash.\t.ps.prolog was incorrectly\n\tnamed in some of the documentation.  (PR#914)\n\n    o\tWarning messages of > 8191 chars could crash R (PR#902), as\n\tcould errors.  Now they are truncated to 8191 chars on\n\tmachines which have vsnprintf (almost all).\n\n    o\trange() now works properly for date-time objects.\n\n    o\tcontour() could loop infinitely (PR#897).\n\n    o\tR-lang manual had precedence of %% wrong (PR#879).\n\n    o\ttry() constructs lost protection of R_alloc'ed memory (PR#877).\n\n    o\tDocumented that as.numeric() dispatches to as.double.foo methods\n\t(PR#918.1).\n\n    o\thttpclient() (and the \"socket\" method of download.file) skipped ^V\n\trather than ^Z in input (if drop.ctrl.z = TRUE, the default).\n\n    o\tboxplot(*, range = 0) and boxplot.stats(*, coef = 0) now\n\tdon't return outliers anymore (PR#917).\n\n    o\tsegmentation fault with tmp[[1,]] (PR#904)\n\n    o\tincorrect \"...\" handling in plot.factor (PR#830)\n\n\n\n\t\tCHANGES IN R VERSION 1.2.2\n\n\nNEW FEATURES\n\n    o\tThe Macintosh port becomes a full member of the R family and its\n\tsources are incorporated as from this release.\n\tSee `src/macintosh/INSTALL' for how that port is built.\n\n    o\tThe API header files and export files `R.exp' are released under\n\tLGPL rather than GPL to allow dynamically loaded code to be\n\tdistributed under licences other than GPL.\n\n    o\tpostscript() and xfig() devices now make use of genuine Adobe\n\tafm files, and warn if characters are used in string width or\n\theight calculations that are not in the afm files.\n\n    o\tConfigure now uses a much expanded search list for finding a\n\tFORTRAN 77 compiler, and no longer disallows wrapper scripts for\n\tthis compiler.\n\n    o\tNew Rd markup \\method{GENERIC}{CLASS} for indicating the usage\n\tof methods.\n\n    o\tprint.ftable() and write.ftable() now have a `digits' argument.\n\n    o\tundoc() has a new `lib.loc' argument, and its first argument is\n\tnow called `package'.\n\n\nBUG FIXES\n\n    o\tThe behaviour of polygon() with NA coordinate values is now\n\tdocumented.\n\n    o\tpolygon() now correctly recycles the values of border and lty.\n\tThanks to Denis White.\n\n    o\treadBin() and writeBin() were not always making good use of\n\tlong types (such as long double) when available.\n\n    o\tThe C function fprec was not handling very small denormalized\n\tnumbers correctly.  This affected the way they were printed on\n\tWindows, for example.\n\n    o\tlegend() now draws points after lines allowing \"empty dots on\n\tlines\" thanks to Ben Bolker.\n\n    o\tSetting row/column names preserves the names of the dimnames\n\t(PR#809).\n\n    o\tUsing help() after help.start() on Unix was failing to find\n\tthe linked help files if more than one package was loaded (as\n\tnow happens by default).\n\n    o\tscan now sets the maximal sizes internally when `what' is a list\n\tfrom `nmax' and failing that `nlines'.\tThis uses memory much\n\tmore efficiently if `nmax' is specified.  read.table() makes use\n\tof this.\n\n    o\tThe FORTRAN code used is now much closer to ANSI compliance.\n\n    o\tcov.rob() gives a useful error message on nearly-degenerate\n\tmatrices.\n\n    o\tsummary() on a data frame was computing results to a precision\n\tbased on options(\"digits\") (default 4), not its `digits'\n\targument.  Now results are computed to full precision but\n\tformatted using `digits'.\n\n    o\tsummary(m, digits=*) also properly works for matrices.\n\n    o\tWhen returning parameters from .C/.Fortran, the OBJECT field was\n\tnot copied even though class attributes were (PR#834).\n\n    o\tThere was a spurious warning from the X11 driver on 100 dpi\n\tdisplays (PR#840, fix from Tom Vogels).\n\n    o\tscan() was reading all-blank numeric fields as zero.\n\tShould be read as NA, and are now.\n\n    o\tdnbinom(*, size, *) now works again for size < 1 (PR#842).\n\n    o\tdgeom(*, p = 0) and pgeom(*, p = 0) don't give NaN anymore.\n\n    o\tsmooth.spline() allows zero weights again.\n\n    o\taperm() fix for list arg; aperm(*, resize=FALSE) now works with\n\tdimnames (by dropping them).\n\n    o\tThe xfig() driver was not closing unclosed polygons as the R\n\tdriver expected (but did not document).\n\n    o\tspec.ar() now handles order 1 correctly.\n\n    o\tAdd fuzz to prevent anomalies with hist().\n\n    o\tprint.matrix() checks length of rowlab, collab (PR#850)\n\n    o\tadd1.glm() was using the wrong weights for binomial glms in\n\tcbind(successes, failures) ~ lhs  form, since 1.2.0.\n\n    o\tEliminate packing of the `structRstart' structure, which was\n\tprobably non-ISO C and caused some compilers problems (PR#852).\n\n    o\tall.vars() no longer returns empty `names' (PR#829).\n\n    o\tdotplot() passes `cex' down to the mtext() calls used for the\n\tlabels (PR#816).\n\n    o\tThe pictex() driver was drawing polylines incorrectly (PR#845).\n\n    o\tIn the event of a fatal X11 error (this can be generated under FVWM\n\tby selecting Destroy), the input handler would loop, leaving the\n\t\"please save work and shut down R\" advice useless. There should now\n\tbe an opportunity for a relatively graceful exit.\n\n    o\tpolyroot() misbehaved if all coefficients except that of the highest\n\tdegree term were zero (partial fix for PR#751)\n\n    o\tspline(method=\"natural\") was extrapolating incorrectly (both\n\tto the left and to the right, for different reasons).  (PR#653)\n\n    o\tLine clipping was incorrect for log-plots. (PR#839)\n\n    o\tAdd explicit test for rank-deficient residuals to summary.manova().\n\n    o\tThe help search data bases did not contain the data from the\n\tplatform-specific help files.\n\n    o\tparse.dcf() and hence package.contents() now work with a warning\n\tfor empty contents' files.\n\n    o\twhich.min() and which.max() now properly work for 0-length and\n\tNA-only arguments.\n\n\n\n\t\tCHANGES IN R VERSION 1.2.1\n\n\nNEW FEATURES\n\n    o\tNew functions factanal(), varimax(), promax() and examples in\n\tpackage mva.\n\n    o\tNew functions readBin() and writeBin() to transfer binary data\n\tto and from connections.\n\n    o\tmerge() is partially moved to C to reduce its memory usage.\n\n    o\tlibrary(help = PKG) now displays the contents of the package's\n\tDESCRIPTION file in addition to its INDEX.\n\n    o\tSd2Rd can handle S4-style documentation too: see `Writing R\n\tExtensions'.\n\n    o\tprompt() now also works with a character argument (useful for\n\tproducing many *.Rd files in a loop).\n\n    o\tThe Unix front-end shell script now ignores a value for R_HOME\n\tfound in the environment.\n\n    o\tConnections functions such as file() now accept a description of\n\tlength > 1, with a warning.\n\n    o\tAll text-mode connections now accept input with LF, CR or CRLF\n\tline endings.  This means that readLines() can be used on DOS\n\tfiles and source() on Mac files, for example.\n\n\tAlso, CRLF-terminated files can be used as stdin on Unix, and\n\tfiles with last lines without an EOL mark can be used as stdin\n\tand source()-ed on Unix and Windows.\n\n    o\tDESCRIPTION file has a new recommended `Maintainer:' field.\n\n    o\tstars() now uses a larger \"cex\" for the labels, and cex and lwd\n\tare now arguments. Further, the argument names (xlim, ylim,\n\taxes) are now consistent with other plot functions.  The key symbol\n\tis not clipped anymore into the plot region by default.\n\n    o\tDate-time quantities are now printed with the timezone, if known.\n\n    o\tR CMD build now ignores all files specified (via Perl regexps)\n\tin file `.Rbuildignore' in the top-level source\tdirectory of a\n\tpackage.\n\n    o\tHorizontal boxplots are possible with  horizontal = TRUE.\n\n    o\tall.equal() on lists now compares them as generic vectors, that\n\tis they are equal if have identical names attributes and\n\tall components are equal.\n\n    o\tInvalid lines in .Renviron now give warnings when R is started.\n\n    o\tArgument `na.last' implemented for rank().\n\n\nBUG FIXES\n\n    o\tThere have been many small improvements/corrections in the\n\tdocumentation. In particular:\n\n\tThe help pages for lm and glm now describe the fitted objects.\n\n\tis.vector() is now correctly documented: complex vectors and\n\tlists return TRUE.\n\n    o\tThe default sortedXyData constructor in the nls package now\n\thandles missing values in the response.\n\n    o\tOn startup, file .RData is now restored *after* the site and\n\tuser profiles are loaded (if at all).  This is as previously\n\tdocumented.\n\n    o\tas.POSIXlt (and *ct) operating on a character string\n\tonly extracted the date (and not the time) in some cases.\n\n    o\tas.POSIXct() on character objects was ignoring `tz'.\n\n    o\tcodoc(ignore.generic.functions = TRUE) works again.\n\n    o\tExplicitly close files opened by sink() for OSes (such as\n\tWindows) that benefit from it.\n\n    o\tPrevent closing the sink connection (which would be a silly\n\tthing to do).\n\n    o\tshowConnections(all = TRUE) was sometimes counting connections\n\tincorrectly, and so not showing some closed ones.\n\n    o\tts(1:10, start= c(1999,6), end = c(2000,3), frequency = 12)\n\tnow prints both years (as it should).\n\n    o\tMonthly multivariate time series now print proper month names\n\tin all cases.\n\n    o\tprint.stl(), print.princomp() and print.prcomp() now pass on\n\t`digits =' etc.\n\n    o\tprompt() now produces a \\usage{} line for data frames and\n\tother datasets, as documented in `Writing R Extensions'.\n\n    o\tglm() now returns correct linear predictor and fitted values\n\tfor zero-weight cases.\n\n    o\tscan(strip.white=TRUE) and readline() could give incorrect\n\tanswers when an input field was empty or blank.\n\n    o\tdchisq() now behaves better for large values of its ncp parameter.\n\n    o\tbesselJ(*, nu) is now ok for nu < 1; fix improves accuracy of\n\tother values by a few bits as well.\n\n    o\tThe convergence criterion in the Fortran SVD code has been\n\tchanged to circumvent spurious convergence errors when\n\tcomparing extended-precision quantities on ix86 Linux (and\n\tsome compilers and options).\n\n    o\tRdindex now handles multi-line \\title{}'s correctly.\n\n    o\tAdd weights.glm() so that plot.lm() gets the correct weights from\n\tglm objects (the ones that go with deviance residuals not the\n\tworking residuals).\n\n    o\tPrinting a language object (e.g. a formula) in a list was\n\tclobbering the buffer holding the tag labels which then were\n\tlost in subsequent lines of printout (PR#746).\n\n    o\taic in family() objects is now computed more precisely using\n\tdxxxx(log=TRUE).  For binomial fits the value was wrong for\n\tmodels specified via proportions and weights (PR#796).\n\n\tAvoid NaN values in aic where n = 0 occurs.\n\n    o\tUsing non-integer numbers of successes in a binomial glm (as\n\tformerly in demo(lm.glm)) now gives a warning, as the theory and\n\tin particular the AIC value is not applicable.\n\n    o\tdemo(is.things) works again {is.ALL() doesn't call methods\n\tanymore}.\n\n    o\tpersp(*, nticks = nn) now works (better) for too small nn.\n\tpersp(*, main = t1, sub= t2) now work (as always documented).\n\n    o\tPrinting of attributes of a list element no longer precedes\n\t`attr' by the tag (PR#715).\n\n    o\tIt is no longer possible to use df[foo] to select non-existent\n\tcolumns in df and so create an invalid object of class\n\t\"data.frame\" (PR#698).\n\n    o\tedit.data.frame() was trying to set row.names on a list, which\n\tis no longer allowed.\n\n    o\tIn the \\link[pkg]{topic}, `pkg' was not being used if `topic'\n\twas found in a package in .lib.loc.  Now `pkg' is always used.\n\n    o\tplot() with small relative ranges gave an error, which e.g. broke\n\tlibrary(ts); plot(stl(ts(rep(1:7, 15), freq = 7), s.win = \"per\"))\n\n    o\tUsing scan() with a 0-length `what' argument now gives an error\n\tmessage rather than a segfault.\n\n    o\tLoading .Random.seed could extremely rarely and with some\n\tgenerators reject a value as NA_INTEGER when it was valid.\n\n    o\tsave(..., ascii=TRUE) created broken files when saving strings\n\tcontaining special characters (ASCII code > 127).\n\n    o\tmean(c(1,NA,NA,NA)[-1], trim = .1, na.rm = TRUE) doesn't give an\n\terror anymore.\n\n    o\tAs the supplied afm files are not properly in the ISOLatin1\n\tencoding, the font metric for \"-\" was wrong since 0.63 on a\n\tpostscript/xfig device, and randomly wrong in 1.2.0.  It will\n\tnow be correct (but the files remain incorrect: C45 is \"minus\"\n\tnot \"hyphen\" and there are missing slots).\n\n\tMetrics for the duplicated characters (acute, dieresis,\n\tmacron, space) in ISOLatin1 encoding are now correct for both\n\toccurrences: previously only one was present.\n\n    o\tThe data-time functions try harder to guess the DST setting\n\twhen the OS does not know, as some OSes were printing times\n\tin DST if this was marked as unknown.\n\n    o\tSetting par(pty=) after par(pin=) or par(plt=) was having no\n\teffect until the margins were set.\n\n    o\tNested \\describe sections in .Rd files have (again) nested\n\tindentation when converted to text.\n\n    o\tConcatenation of C strings by ## is no longer used, to avoid\n\tspurious warnings from some recent versions of gcc.\n\n    o\tdev.copy2eps() allows a `paper' argument to be passed to\n\tpostscript().\n\n    o\tfile.show() handles the case of zero files better.\n\n    o\tformula.lm uses object$formula if it exists, in preference\n\tto object$terms.\n\n    o\tstrsplit() is corrected for an empty split pattern.\n\n    o\tkronecker() now does a better job when creating dimnames.\n\n    o\tBetter handling of input dimnames in fourfoldplot().\n\n\n\n\t\tCHANGES IN R VERSION 1.2.0\n\n\nNEW FEATURES\n\n    o\tThere is a new memory management system using a generational\n\tgarbage collector.  This improves performance, sometimes\n\tmarginally but sometimes by double or more.  The workspace is\n\tno longer statically sized and both the vector heap and the\n\tnumber of nodes can grow as needed.  (They can shrink again,\n\tbut never below the initially allocated sizes.)\t See ?Memory\n\tfor a longer description, including the new command-line\n\toptions to manage the settings.\n\n    o\tvalues of `--min-nsize' up to 50M (2Gb on 64-bit Solaris) are\n\tallowed.\n\n    o\tA (preliminary) version of S4-like connections has been added,\n\tand most functions which take a \"file\" argument can now work\n\twith a connection as well as a file name.  For more details,\n\tsee the chapter on Connections in the R Data Import/Export\n\tmanual.\n\n    o\tNew command-line option `--no-restore-history' implied by\n\t`--vanilla'.\n\n    o\tCommand-line option `--no-restore' is now `--no-restore-data'\n\tand `--no-restore' implies `--no-restore-*' (currently `data'\n\tand `history').\n\n    o\tThe more recent GNU regex from grep-2.4.2 is used.  This uses\n\tlocale-based ordering for ranges on platforms with strcoll.\n\n    o\tThe print routines now escape \" (as \\\") in a character string\n\tonly when it is printed as a quoted string.  This makes\n\tprint(, quote=FALSE) and cat() consistent.\n\n\n    o\tThe standard methods for add1() and drop1() now attempt to cope\n\twith missing values by using a subset of the data that is\n\t`cleaned' by na.action for the maximal model under consideration.\n\n    o\tanova() for 3 or more lm objects now behaves compatibly\twith S\n\tand anova.glmlist().  The old behaviour is still available by\n\tcalling anovalist.lm() directly.\n\n    o\tanova() for multiple lm and glm objects no longer truncates the\n\tformula printed. There is much more extensive documentation\n\tfor anova() methods.\n\n    o\tNew method as.data.frame.table() for converting the array-based\n\trepresentation of a contingency table to a data frame containing\n\tthe classifying factors and the corresponding counts.\n\n    o\tNew function assocplot() for producing Cohen-Friendly\n\tassociation plots.\n\n    o\tautoload() accepts lib.loc and other arguments to library()\n\n    o\tbxp() has new argument `frame.plot', as plot.default().\n\n    o\tcontour() now has `axes' and `frame.plot' args.\n\n    o\tcontrasts(, FALSE) now always returns an identity matrix,\n\tto make model.matrix compatible with S. This affects models\n\tsuch as lm(y ~ o - 1) where o is an ordered factor.\n\n    o\t`where' command added to debug().\n\n    o\tdemo(dynload) (which used the superseded call_R interface)\n\thas been removed.\n\n    o\tClass \"dendrogram\" in package mva providing general support\n\tfor tree-like structures (plotting, cutting, ...).\n\n    o\tdev.copy2eps() and dev2bitmap() preserve the aspect ratio of the\n\tcopied device if just one of `width' and `height' is specified.\n\n    o\tdump() has new argument append, argument `fileout' has been\n\trenamed to `file' (for consistency with all other functions).\n\n    o\tedit.default() now checks for an unset `editor' argument, and\n\tterminates with an error if the editor cannot be run.\n\n    o\tThe `mode' argument of exists() and get() is interpreted\n\tas mode(x) rather than typeof(x), following S.\n\n    o\tNew functions file.access() and file.info() for information on\n\tfiles on the user's file systems.\n\n    o\tNew convenience function file.copy().\n\n    o\tfile.show() allows `pager' argument to be an R function, and\n\tconsequently, the `pager' option can be an R function.\n\n    o\tFormatting (and printing) of data.frames with complex objects is\n\timproved.  toString was added as a new function.\n\n    o\tformat() has a new argument `justify' controlling the\n\tjustification of character strings (and factors).\n\n    o\tFormula objects now have an environment and code manipulating\n\tthem needs to take care to preserve it or set an appropriate\n\tenvironment.\n\n    o\tNew function fourfoldplot() for producing fourfold displays of\n\t2 by 2 by k contingency tables.\n\n    o\tgc() now reports the space allocated, not the space free,\n\tsince the total space is now variable.\n\n    o\tNew primitive gc.time() to report on time spent in garbage\n\tcollection.\n\n    o\thclust() takes new argument `members' allowing dissimilarity\n\tmatrices both for singletons (as until now) and clusters.\n\n    o\thelp() has an additional `pager' argument which may be passed to\n\tfile.show()  {useful for ESS fans}.\n\n    o\tThere is now an R `Hershey' list object for Hershey vector font\n\tcomputations and documentation.\n\n    o\thist() now returns a \"histogram\" object and calls the new\n\tfunction plot.histogram() for plotting.\n\tIt now also allows character labels.\n\n    o\tif(*) now gives a more intelligible error message\n\twhen \"*\" cannot be coerced to logical.\n\n    o\tinherits() is now an internal function and compatible with S.\n\n    o\tNew function lag.plot() in package ts.\n\n    o\tlegend() has a new argument pt.bg.\n\n    o\tThe commands history can be loaded with loadhistory(), saved\n\twith savehistory() and displayed with history(), under Windows\n\tand under Unix using the readline or GNOME interfaces.\n\n    o\tmad() has new (logical) arguments \"low\" and \"high\" (the first\n\tgiving S compatibility).\n\n    o\tNew function manova() and summary method.\n\n    o\tFunction mantelhaen.test() in package ctest now can deal with\n\tgeneral I x J x K tables.  In addition, in the 2 x 2 x K case,\n\tit can also perform an exact conditional test of independence,\n\tand gives confidence intervals for the common odds ratio.\n\n    o\tmodel.frame() now uses the environment of its formula argument,\n\trather than the parent environment, to evaluate variables not\n\tfound in the data argument. See help(formula).\n\n    o\tmosaicplot() can now also create extended mosaic plots, which\n\tvisualize the residuals from a log-linear model using color and\n\toutline.\n\n    o\tNew utility function n2mfrow().\n\n    o\tnlm(check.analyticals = TRUE) now warns if the supplied\n\tgradient and/or hessian are of the wrong length.\n\n    o\tNew function object.size() to give approximate memory allocation.\n\n    o\toptim() now checks the length of an analytical gradient at\n\teach evaluation.\n\n    o\tThe L-BFGS-B method of optim() now support tracing, at several\n\tlevels of detail.\n\n    o\toptions(check.bounds = TRUE)  makes each vector extension\n\tby sub-assignment (\"x[.] <- .\") produce a warning.\n\n    o\toptions(width) now admits to a limit (previously 200, now\n\t10000) and gives a more informative message if out of range\n\t(as it does now for digits and expressions).\n\n    o\tFunction path.expand() to do tilde-expansion on file paths.\n\tThis provides an interface to R_ExpandFileName, which is now\n\ta documented entry point.\n\n    o\t.Platform has new component \"endian\", useful for binary file\n\tmanipulations.\n\n    o\tplot.function() and curve() now take xlim as default for (from,to)\n\tif the former is specified.\n\n    o\tplot.hclust() allows arguments main, sub, etc, and has non-empty\n\tdefaults for these.\n\n    o\tplot.ts(x,y) now allows to suppress labels and lines;\n\tit is better documented.\n\n    o\tThe postscript() driver now allows a user-specified family so,\n\tfor example, one can use the same fonts in diagrams as in\n\trunning text.\n\n    o\tThe postscript() driver allows its prolog to be changed (by an\n\texpert) via object .ps.prolog.\n\n    o\tprop.table() and margin.table() now work with an empty `margin'.\n\n    o\tFormerly deprecated function provide() is now defunct.\n\n    o\tNew functions read.delim() and read.delim2() to make it\n\teasier to read delimited files as Windows programs tend to\n\tcreate (usually TAB separated).\n\n    o\tNew readLines() function to read a file line-by-line.\n\n    o\tNew functions reshapeLong() and reshapeWide() emulating Stata's\n\treshape command. These are still labeled experimental and\n\tmight be improved (or removed) in later versions.\n\n    o\trow.names() and row.names<-() are now generic functions which\n\tcall rownames() as their default method and have methods for\n\tclass \"data.frame\".\n\n    o\tNew function Rprof() for profiling R expressions under Unix.\n\tConfigure with `--enable-R-profiling' (on by default) to make\n\tthis operational.\n\n    o\tsave(, oldstyle=TRUE) has been withdrawn.\n\n    o\tscan() and read.table() have a new argument `fill' which can\n\tbe set TRUE to allow reading files with unequal number of\n\tfields per line. (Programs like Excel have a habit of creating\n\tsuch files when exporting.)\n\n    o\tscan() and read.table() have a new argument `blank.lines.skip'\n\tto allow blank lines to be read.\n\n    o\tscan() now reads empty character fields as \"\" not \"NA\" unless\n\t\"\" is included in na.strings.\n\n    o\tsmooth() in package eda has a better default (3RS3R instead of\n\t3RSR) and more arguments, e.g. `twiceit' for some S\n\tcompatibility and `kind = \"3R\"' for running medians of 3.\n\n    o\tstrsplit() has a new argument `extended' controlling whether to\n\tuse extended (the default) or basic regular expressions for\n\tsplitting.\n\n    o\tSys.getenv() becomes the preferred name for getenv(), which is\n\tnow deprecated.\n\n    o\tNew functions Sys.getlocale() and Sys.setlocale() to query and\n\tset aspects of the locale of the R process, and\n\tSys.localeconv() to find the default decimal point, etc.\n\n    o\tNew function Sys.info() for platform, host and user information.\n\n    o\tNew function Sys.putenv() to set environment variables.\n\n    o\tNew function Sys.sleep() to suspend execution for a while.\n\n    o\tDate-time support functions with classes \"POSIXct\" and\n\t\"POSIXlt\" to represent dates/times (resolution 1 second) in\n\tthe POSIX formats.  Functions include Sys.time(), as.POSIXct(),\n\tstrftime(), strptime(),\t and methods for format, plot, c, ....\n\tThere are conversion functions for objects from packages\n\t`date' and `chron'; unlike those packages these support\n\tfunctions know about time zones (if the OS does).\n\n    o\ttcltk package now has tkpager() which is designed to be used\n\tby file.show() and shows help pages etc. in separate text\n\twidgets.\n\n    o\ttcltk is now more careful about removing the objects\n\trepresenting widgets in the R workspace when the windows are\n\tdestroyed (e.g. using window manager controls)\n\n    o\ttcltk package has had several canvas functions implemented.\n\n    o\ttcltk now wraps callbacks to R in a try() construct - the\n\tnonlocal return from R's error handling could bring the Tk\n\tsystem into a strange state.\n\n    o\tNew demos for tcltk: tkfaq, tkfilefind, tkcanvas.\n\n    o\ttermplot() now has an `ask' argument.\n\n    o\tterms() creates objects which now inherit from class \"formula\",\n\tso for example as.formula(terms.object) needs to be replaced by\n\tformula(terms.object).\n\n    o\ttraceback() is now printed un-quoted and labelled by the\n\tframe number.\n\n    o\tNew argument `recursive' to unlink(). The default behaviour on\n\tUnix is now that of rm -f, not rm -rf.\tunlink() is now\n\tcompatible across platforms.\n\n    o\tNew functions write.ftable() and read.ftable() for writing out\n\tand reading in flat contingency tables.\n\n    o\twrite.table() now quotes factor columns if quote=TRUE, and has\n\ta new argument `qmethod' to control the escaping of\n\tembedded quotes in character or factor columns.\n\n    o\tNew function xtabs() providing a formula interface to cross\n\ttabulation.\n\n\n    o\tThe R Data Import/Export Manual (`R-data.texi') has been added.\n\n    o\tThe set of valid R names is now described (at last) in R-intro.\n\n    o\tThe R Language Manual (`R-lang.texi') is now included and built\n\tin the same way as the other manuals.\n\n    o\tThe R manuals (R-intro, R-exts, ...) are converted to HTML\n\tformat (if the necessary texinfo tools are available) and\n\tlinked into the top HTML help page.\n\n    o\tThe header file `R.h' and those included from it are now usable\n\twith C++ code.\n\n    o\tNew header file `R_ext/Boolean.h': Rboolean type with TRUE and\n\tFALSE enum constants.\n\n    o\tNew header file `Rgraphics.h' to allow addons to use graphics\n\tstructures.\n\n    o\tRecommended include file `Rmath.h' replaces `R_ext/Mathlib.h'.\n\n    o\tBessel, beta and gamma functions are now documented as part of\n\tthe API.  Undocumented entry points are no longer in the\n\theader files, and some are no longer visible.\n\n    o\tCalloc & Realloc failures now give size information.\n\n    o\tDESCRIPTION file in installed packages has a new `Built:' field\n\tgiving build information (R version, platform, date).\n\n    o\tMuch improved support for C++ code in add-on packages under Unix.\n\tNew configure/build variables SHLIB_CXXLD and SHLIB_CXXLDFLAGS\n\tfor specifying the command and flags needed for building shared\n\tlibraries containing objects from a C++ compiler.\n\tConfigure tries to get these right in typical cases (GNU tools\n\tand/or common platforms).\n\tC++ source suffixes `.cpp' and `.C' are now recognized in\n\taddition to `.cc'.\n\n    o\tConfigure/build variables MAINLD and MAINLDFLAGS are renamed to\n\tMAIN_LD and MAIN_LDFLAGS for consistency with other MAIN_* vars,\n\tsimilarly for SHLIBLD and SHLIBLDFLAGS.\n\n    o\tConfigure/build variable FLIBS now only contains the Fortran 77\n\tintrinsic and run-time libraries needed for linking a Fortran 77\n\tprogram or shared library (as determined by configure).\t BLAS\n\tlibrary detection was extended, with results saved to the Make\n\tvariable BLAS_LIBS which is also available to add-on packages.\n\n    o\tR CMD build and check have been completely re-written in Perl.\n\tIn addition to running examples, check now also checks the\n\tdirectory structure and control files, makes a temporary\n\tinstallation and runs LaTeX on the help pages.\tBuild has been\n\treduced to cleaning, rewriting indices and creating tar files.\n\n\tThe same files of Perl code are now also used under Windows.\n\n    o\tAdd-ons for utilities like Perl or LaTeX have now a central\n\tplace in $R_HOME/share. Migration of existing files might take\n\ta while, though.\n\n    o\tPreliminary support for building R as a shared library (`libR')\n\tunder Unix.  Use configure with option `--enable-R-shlib' or do\n\t`make libR' in directory `src/main' to create the shared\n\tlibrary.\n\n\tThere is also a linker front-end `R CMD LINK' which is useful\n\tfor creating executable programs linked against the R shared\n\tlibrary.\n\n\nBUG FIXES\n\n    o\tNew \"[.AsIs\" function fixing PR#665.\n\n    o\tEffectively zero-length arrows() are omitted (rather than getting\n\ta system- and device-dependent arbitrary angle).\n\n    o\tbarplot() passes \"...\" down to plot.window as documented.\n\n    o\tbxp(*) now obeys axes, xaxt, yaxt & ylim arguments (again?).\n\n    o\tcontour(.., labcex = 0.6, .. , vfont = c(\"sans serif\", \"plain\"), ..)\n\tnow behaves as it has been documented, PR#740.\n\n    o\tD(.) is now more correctly documented, has second argument\n\t\"name\" instead of \"namevec\" (S compatibility), and gives a warning\n\twhen name has not length 1.\n\n    o\tdbinom() and dpois() now use a the accurate algorithm of C.Loader;\n\te.g., 1 - 2*sum(dbinom(0:999, 1999, 1/2)) is now zero instead of 1e-12.\n\n    o\tdbeta(), df(), dt(), dnbinom(), dgeom(), dgamma(),\n\tnow all use the more accurate algorithms of dbinom() and dpois();\n\tMore limits are computed correctly, e.g. dgeom(Inf,*), or\n\tdnbinom(*,*,p=0), and integer argument coercion is more consistent.\n\n    o\tdbeta(x, a,b) was giving NaN and Inf for large a and b.\n\n    o\tThe math functions now (again!) return NaN (not NA)\n\twhen the warning message says so (e.g. gamma(-1)).\n\n    o\tPaper sizes for \"a4\" and \"legal\" were interchanged in dev.print().\n\n    o\tImproved logic in the re-scaling of plots in dev.print().\n\n    o\tdev.print() and dev.copy2eps() now evaluate arguments as\n\tneeded, so e.g. dev.print(file=\"junk.ps\", horizontal=F) will\n\twork (previously =FALSE was needed).\n\n    o\tNow dweibull(0,1) == dexp(0) == 1 for consistency.\n\n    o\tChanging column modes from factor/character to numeric in\n\tedit.data.frame() (and fix() on data frames) is now allowed.\n\n    o\tgctorture() did return a value although documented not to, that of\n\tgcinfo.\t It now returns the previous setting of gctorture.\n\n    o\tglm() now follows lm() in dropping unused factor levels when fitting.\n\n    o\thist() now labels y-axis Density rather than Relative Frequency\n\tif freq=FALSE. The `intensities' component of the result is\n\tnow deprecated and `density' should be used instead.\n\n    o\thsv() truncation bug fixed (hopefully correctly this time...)\n\n    o\tlibrary.dynam() no longer fails if the library appears more than\n\tonce in lib.loc.\n\n    o\tlm.fit & lm.wfit (and hence lm) now give understandable error\n\tmessages when there are 0 non-NA cases.\n\n    o\tmatch() does not always use \"as.character()\" anymore, fixes PR#741.\n\n    o\tTrimmed mean() and median() are no longer attempted for complex\n\tdata.\n\n    o\tmedian() of empty vector is now NA.\n\n    o\tmodel.matrix() can now handle NAs in factors.\n\n    o\tmodel.matrix() now uses \":\" not \".\" in labelling interaction\n\tterms, as terms() and the prototype do (PR#701).\n\n    o\told.packages() now sorts version strings correctly by\n\tsplitting at \".\" and \"-\".\n\n    o\toptim() has several new precautions against bugs, one of which was\n\tan infinite loop in the L-BFGS-B method if the derivatives\n\twere inaccurate (or if numerical derivatives were used and the\n\tproblem was badly scaled).\n\n    o\tpairs() now obeys an \"cex = \" argument, and so does panel.smooth().\n\n    o\tpf() had a bug in the code handling large noncentrality\n\tparameters, going all the way back to the original Appl.Stat.\n\talgorithm (PR#752). This affected pbeta() as well.\n\n    o\tphantom(expr) in plotmath was used to calculate the bounding\n\tboxes, but the space was not actually used in typesetting the\n\texpression (PR#622).\n\n    o\tProblem with subsetting and \"...\" arguments in plot.formula()\n\t(PR#757)\n\n    o\tplot.lm() has a better default for its `ask' argument.\n\n    o\tplot.new() does *NOT* allow an argument (`ask') anymore.\n\tThis has not been working (since ~ R 0.49), is low-level and\n\thence should not break anything.\n\n    o\tplot.stl() now uses correct time labels for tickmarks of x-axes.\n\n    o\tpnorm() is somewhat more accurate (SIXTEN=16; PR#699) and\n\t`infinitesimally faster' in some cases, thanks to James M. Rath.\n\n    o\tFailure to open a postscript() device now gives diagnostic warnings.\n\n    o\tZero the widths of undefined chars in postscript().\n\n    o\tMake font metrics local to the device in postscript(), so\n\tthat simultaneous instances of postscript/xfig/bitmap can use\n\tdifferent values for `family'.\n\n    o\tpostscript() no longer uses the initclip operator, which\n\twas against the EPSF specifications and broke inclusion of\n\tgraphics in some documents.\n\n    o\tIn postscript(), cleaned up the internals to fix some\n\tcases where it was unclear whether a variable was meant to set\n\tor track device status.\n\n    o\tIn some cases, emitted postscript violated the PS Document\n\tStructuring Conventions since some settings were carried over from\n\tone page to the next. (Caused breakage when turning\n\tantialiasing on/off in \"gv\" for instance.)\n\n    o\tThe DocumentMedia comment in postscript() output was wrong,\n\tand the font DSC comments have been changed to the preferred\n\tstyle for DSC 3.0.\n\n    o\tpretty(x <- c(2.8,3))[1] - x[1] is now 0; in general,\n\tp <- pretty(x) now again fulfills  p[1] <= x[] <= p[length(p)].\n\n    o\tprint.dist() {mva} now passes \"...\" to print.default.\n\n    o\tprint.noquote(\"ABC\") now works.\n\n    o\tprompt(fn) uses fn's \"source\" attribute if it has one.\n\n    o\tIn prop.test(), the conf.int. now contains the estimate,\n\teven when that is 0 or 1 (PR#714).\n\n    o\tqnorm(0) and qnorm(1) now give -/+ Inf (again!).\n\n    o\tqt(*, log = TRUE) has a somewhat extended working range.\n\n    o\tSpecifying col.names in read.table() now overrides any header\n\tline in the data file.\n\n    o\tBug caused rpois() to generate biased variables in some cases.\n\n    o\tscale(scale=TRUE) gave all NAs in any columns containing NAs.\n\n    o\teda's smooth() now computes Tukey's endrule properly.\n\n    o\tsmooth.spline()'s GCV method now uses a more accurate formula\n\twhen there are repeated x points.\n\n    o\tstars() fix (for 0/NA columns) PR#739.\n\n    o\tdata(state)'s  state.abb  has been corrected to use official\n\t2-letter abbrevations.\n\n    o\tstrsplit() had two memory leaks.\n\n    o\ttcltk interface now has better string quoting and no longer breaks on\n\tstrings with unbalanced braces\n\n    o\ttcltk callbacks used to include a \"%...\" argument on the call if the\n\tcallback function had a \"...\" argument. This is no longer the case.\n\n    o\tt.test() allows an input vector of length 2.\n\n    o\tMethod dispatch in primitive functions such as `c' only\n\toccurred if they were called by that name, and in particular\n\tnot if used in lapply or called as .Primitive(\"c\").  It now\n\talways occurs.\n\n    o\tMethod dispatching now forces evaluation of promises, so\n\tautoloading works with methods.\n\n    o\tc(0.099999994, 0.2) prints as 0.1 0.2 not 0.10 0.20 after\n\tcorrecting the precision calculations.\n\n    o\tInternal function fprec was overflowing for numbers around\n\t1e-305.\n\n    o\t[internal] .C(\"strsignif\",*) doesn't use fixed size strings anymore\n\t(possible overflow).\n\n    o\tff[i] <- r  now works for formula (and potentially other\n\tnon-standard) objects ff.\n\n    o\tErrors in argument matching could cause crashes if error\n\thandler was used.\n\n    o\tNULL == ... now gives logical(0) instead of an error.\n\tThis fixes a bug with e.g. apply(X,2,median, na.rm = TRUE) and\n\tall(NULL == NULL) is now TRUE.\n\n    o\tpolylines with more than 64K pieces will now work on more X\n\tservers with the x11 device.\n\n    o\tR CMD Rd2dvi now again works with file names containing \"_\" or \"$\".\n\n    o\tR CMD Rdconv now handles .rd as input file extension correctly\n\tin all cases.\n\n    o\tmake install could fail if there were no shared libraries to\n\tinstall (e.g. on vanilla Solaris).\n\n    o\tRd's \\describe{} constructs are converted better to text\n\toutput, and \\items of >=22 chars now work.\n\n    o\tHelp aliases \"(\" and \"{\" now work, apart from as PDF hyperlinks.\n\n    o\tNA || x , NA && y (etc) do not give errors anymore, but work as\n\tthe \"|\" and \"&\" operators and as documented (PR#749).\n\n    o\tCoercing lists to functions failed if argument list was empty.\n\t(PR#743). Also coercing functions to lists was wrong when the\n\tbody was a single constant.\n\n\n\t**************************************************\n\t*\t\t\t\t\t\t *\n\t*\t       1.1 SERIES NEWS\t\t\t *\n\t*\t\t\t\t\t\t *\n\t**************************************************\n\n\n\t\tCHANGES IN R VERSION 1.1.1\n\n\nNEW FEATURES\n\n    o\tdata(), example() and help() now search the loaded packages, then\n\tin their .lib.loc argument, the latter as pre-0.99.0.  See\n\ttheir help pages for the precise details.\n\n    o\thelp() has a new argument `try.all.packages' set by the option\n\t\"help.try.all.packages\". If help is not found in the normal\n\tpath and this is TRUE then a search is made of all packages\n\tfor possible matches.\n\n    o\tImproved detection of Tcl/Tk at configure time.\t One can either\n\tset configure variables TCLTK_CPPFLAGS and TCLTK_LIBS, or give\n\tthe locations of the tclConfig.sh and tkConfig.sh scripts via\n\tthe `--with-tcl-config' and `--with-tk-config' arguments.\n\n    o\tprop.trend.test() - test for trend in proportions.\n\n    o\twrite.table() has new argument `dec' for setting the decimal\n\tseparator (SPSS/Windows and probably others want commas in\n\tcontinental European locales).\n\n    o\tAdvance warning: save(, oldstyle=TRUE) will no longer be\n\tavailable after this release.\n\n    o\tSymbols can now be coerced to expressions, making\n\tas.expression(quote(a)) work\n\n\nBUG FIXES\n\n    o\tdata() now works correctly with data-only packages.\n\n    o\tStandalone Mathlib can now be made if builddir = srcdir\n\t(working around an undocumented autoconf `feature').\n\n    o\tCheck for pre-1.1.0 saved object .Postscript.options in postscript().\n\n    o\tMore stringent checks on the arguments to dataentry().\n\n    o\tSpecifying xlab as an expression now works again.\n\n    o\tdev2bitmap() works again.\n\n    o\tNumerous uses of `F' and `T' replaced by `FALSE' and `TRUE'.\n\n    o\tbxp() now extends `ylim' properly when notch=TRUE (and a\n\tnotch is more extreme than other stats).\n\tAlso, varwidth is okay again, see example(split).\n\n    o\tMaking manuals without making R first now works.\n\n    o\tprincomp() now works when some eigenvalues are tiny negative\n\tvalues (which are treated as zero).\n\n    o\tSearchEngine.html was not installed when builddir != srcdir.\n\n    o\tlm.{w}fit(x,y,..) now work when x has no column names.\n\tThese functions no longer add and subtract n zeros when there's no\n\toffset.\t They are now documented somewhat.\n\n    o\tSome HTML files used src=\"R.css\" instead of href=\"R.css\" causing\n\tsome browsers to ignore the style sheet.  `R.css' now passes the\n\tw3c CSS validator and gives the intended results with Internet\n\tExplorer.  `R.css' is copied to all library directories.\n\n    o\tThe data editor no longer crashes when entries contain more than\n\t45 characters, and works correctly if the field width is\n\tlarger than the window width.\n\n    o\tRecording plots used to ignore graphics events before the last\n\treplay.\n\n    o\tplot(), points(), etc now give warnings and error for invalid\n\t`type' arguments.\n\n    o\tmatplot() now allows the same `type's as plot().\n\n    o\tdev.print() and dev.copy2eps() now work when called from a\n\tfunction, such as dev2bitmap().\n\n    o\tanova.glmlist works correctly with decreasing models and\n\ttest=\"F\" now gets the correct residual df.\n\n    o\tFunctions created (not just edited) with fix() now get\n\tenvironment .GlobalEnv not the body of fix.\n\n    o\tRdconv was ignoring OS-specific parts of the files with some\n\tPerl versions. (This did not affect installing packages.)\n\n    o\tR CMD check  did not run more than one specific test.\n\n    o\tkeyword2html omitted items when changing up a level, so\n\tthe HTML search engine keyword list was missing `data' and\n\t`utilities', for example.\n\n    o\taov() with multiple strata was setting some spurious options.\n\n    o\tUnder UNIX, help(, htmlhelp=TRUE) uses the linked copy of the\n\tHTML file in ~/.R if help.start() has been run recently in the\n\tsession, so the style sheet and hyperlinks should now be found.\n\n    o\tdotplot's arguments `color' and `lcolor' are now interpreted\n\tcorrectly if they are vectors of length > 1.  (It is not clear\n\tfrom the help that this was ever intended.)\n\n    o\tError messages of e.g. do.call() are now spaced properly.\n\n    o\tsummary(.matrix | .data.frame) now respects a `digits' argument.\n\n    o\tscan() recognises quoted strings by default again. The default\n\tfor the quote= argument got set wrongly when it was\n\tintroduced. They are, however, turned off when using sep=\"\\n\",\n\tsince you probably want unprocessed lines of text in that\n\tcase.\n\n    o\tfixed buglet where scan() would double a character following a\n\tterminating quote symbol.\n\n    o\tkmeans was failing on vector inputs (although not documented\n\tto accept such).\n\n    o\tfixes in predict.lm (John Maindonald)\n\n    o\tNCOL got confused by 1D arrays, which it now reports have 1\n\tcolumn rather than NA.\n\n    o\trep(1:2,c(1,-1)) segfaulted (PR 619)\n\n    o\tx[[\"a\"]] <- y rejected some object types for y (e.g.\n\texpressions) which were accepted in x$a <- y (PR\n\n    o\tdata editor froze on empty data frame, and more generally on\n\tzero-length cols.\n\n    o\tdata editor did not handle factors properly in numeric-edit\n\tmode.\n\n    o\ttable() misbehaved on empty (or all-NA) data\n\n    o\tdata editor now handles empty data frames, allowing data entry\n\tto begin with  dd<-edit(data.frame())  or\n\tdd<-data.frame() ; fix(dd)\n\n    o\tplotting math expressions when specified as a LANGSXP or\n\tSYMSXP didn't work in several cases: plot(1,main=quote(a))\n\twould segfault and there were problems with title(), text(),\n\tand mtext() as well.\n\n    o\toptim(): no more segfault for REPORT=0; corrected error msg; ..\n\tmaxit default is now okay also when \"L-*-B\" is chosen automatically.\n\tUsing (abs|rel)tol with that method now gives a warning.\n\n    o\ttext() did not respect its `xpd' argument, the default of which\n\tis still to use par(\"xpd\"); gave a wrong error message in one case.\n\n    o\tpolygon() had an incorrect documentation and silently disregarded\n\t\"...\" arguments.\n\n    o\tpredict.loess was giving incorrect results (those for the\n\tnon-robust fit) in the case of a fit with family = \"symmetric\"\n\tand surface = \"direct\" and prediction with se = FALSE.\tThe\n\tfitted values were missing for such fits.\n\n    o\tBetter rendering of ^ and ~ in latex in \\code{} (and they should\n\tnot appear outside code and verbatim sections).\n\n    o\tFixed unterminated string problem with lty (PR 584)\n\n    o\tFixed scoping problem with quasi() family (PR 614)\n\n\n\t\tCHANGES IN R VERSION 1.1.0\n\n\nNEW FEATURES\n\n\n    o\tThere are several changes to the compile and link flags, and\n\tan attempt is made to use /usr/local/include and\n\t/usr/local/lib on all platforms.  Please read config.site and\n\tINSTALL if you have set flags for previous versions.\n\n    o\tNew package tcltk, providing interface and language bindings for\n\tthe Tcl/Tk graphical interface toolkit. This makes it possible\n\tto do some rather nifty things with buttons and entry fields\n\tand so forth in very few lines of code.\t It is still somewhat\n\texperimental so don't go churning out thousands of lines of\n\tGUI code and then blame us for changing the API later on. It does\n\tnot currently work with GNOME because of event loop differences.\n\tSee demo(tkttest) and demo(tkdensity).\n\n    o\tInternally using global R_Expressions [getOption(\"expressions\")]\n\tdramatically speeds up eval.c.\n\n    o\tThe X11 support code is now in a separate shared library, and\n\toption `--gui=none' will run R without X11 support (and so x11()\n\tand data.entry() will not be available).  R BATCH sets --gui=none.\n\n    o\tConfiguring without X (e.g., `--without-x') does work (at last).\n\tconfigure will report if X11 support has been included.\n\tIf R has been built without X11 the default GUI is \"none\".\n\n    o\tGNOME support files have moved from src/gnome to src/unix/gnome\n\tand the code is now in a separate shared library.  Both\n\t`--gui=GNOME' and `--gui=gnome' are allowed.\n\n\tThe main graphics device for use with GNOME is now called\n\tgtk(); the x11() device from the X11 support can also be used.\n\t(The gnome() device remains unreliable, and is by default\n\tunavailable.)\n\n\tAll GNOME support now installs in R_HOME/gnome to make it\n\teasier to package separately.\n\n    o\tCommand line option `-g' can now be used as short version of\n\t`--gui'.\n\n    o\tThe \"keep.source\" option now defaults to interactive()\n\tinstead of TRUE.\n\n    o\tMany interface enhancements to the data editor, which now uses\n\t(by default) variable-width columns and much less redrawing.\n\tSee ?dataentry for a description of the current user interface.\n\n    o\tR under Unix can be sent SIGUSR1 to quit and save or SIGUSR2\n\tto quit and save without running .Last and on.exit\n\texpressions.\n\n    o\tAdded ability to use the graphics device driver to perform\n\thorizontal justification of strings.  This is used in the\n\tx11(), windows(), postscript() and xfig() drivers and will\n\tlead to more accurate placing of centred or right-justified\n\tstrings.\n\n    o\tFormulas created with the tilde operator now contain the\n\tenvironment in which they were created.\t The environment of a\n\tformula can be accessed with the environment() function.  This\n\tfacility is still experimental; it is intended to help\n\tsimplify writing modeling functions.\n\n\n    o\t$ and $<- are now generic functions.\n\n    o\tadd1.glm() and drop1.glm() now allow test=\"F\", which is\n\tappropriate for models with estimated dispersion.\n\n    o\tapprox() and approxfun() have an extra argument ties= to control\n\thandling of tied x values\n\n    o\tNew function as.symbol(), identical to as.name().\n\tis.symbol and is.name() are now identical by definition;\n\tbefore, they were equivalent by implementation.\n\n    o\tattach() now works for R data files.\n\n    o\taxis() now has additional arguments.  The argument \"tick\" turns\n\ttick drawing on and off (on by default).  Additional arguments\n\tline, pos, and outer; allow more flexible placement of axes.\n\n    o\tNew device bitmap(), like dev2bitmap() but a stand-alone device.\n\n    o\tboxplot() returns (and bxp() accepts) a list containing the summary\n\tstatistics for the boxes (changed from a list of elements one for\n\teach box).\n\n    o\tfile=\"|cmd\" is allowed (to pipe output to `cmd'), under cat()\n\tand postscript() and functions that use them (for example, write()).\n\n    o\tNew functions chartr() for general-purpose character translation\n\tin character vectors, and tolower() and toupper() for converting\n\talphabetic characters to lower-case and upper-case, respectively.\n\n    o\tcoplot() has new option subscripts=TRUE to pass the indices\n\tto the panel function.\n\n    o\tcor.test(method=\"spearman\") might give slightly better P values,\n\tsince it now relies on pnorm() (with proper tail) instead of alnorm.\n\n    o\tdbinom() works for size=0 (where appropriate).\n\n    o\tNew trivial function det() for determinant computation\n\t(the example in ?qr did not seem to be sufficient).\n\n    o\tIf present in the package, a function .Last.lib will be called\n\twhen a package is detached.\n\n    o\tNew function dev.copy2eps() copies the current device to an eps\n\tfile, taking the size from that of the device.\n\n    o\tdev.print() now prints if possible, and takes the size from\n\tthe device being copied.\n\n    o\tedit() or fix() applied to a numeric or character matrix now\n\tuses the data editor, if available.\n\n    o\tedit.data.frame() edits factors in character mode by default,\n\tand will allow the row names to be edited, by default if they\n\tare not 1:nrow(name).\n\n    o\texpand.model.frame() for adding variables to a model frame.\n\n    o\tThe handling of estimating the dispersion in glm() fits has been\n\tchanged for consistency across methods.\t For `binomial' and\n\t`poisson' families the dispersion is always taken as one.\n\tFor `quasibinomial' and `quasipoisson' families it is always\n\testimated (by residual chisq/residual df).\n\n    o\tUsing \"~\" when specifying lib.loc (for example to help() or\n\tlibrary()) is now supported.\n\n    o\timage() has a new argument \"breaks\" and divides the zlim range\n\tinto equal-length intervals.\n\n    o\tinstall.packages() and update.packages() have a new `destdir'\n\targument for the directory to which to download the packages.\n\n    o\tNew function interaction.plot().\n\n    o\tInternal cleanup of lapply()'s C code.\n\n    o\tlibrary(), require(), and sys.source() have a new argument\n\t` keep.source = getOption(\"keep.source.pkgs\") '.\n\tThis defaults to false, but can be set (also for base) to true\n\tby setting the environment variable R_KEEP_PKG_SOURCE to \"yes\"\n\n    o\tPar `lty' in lines() now defaults to par(\"lty\") not \"solid\",\n\tfor consistency with plot().\n\n    o\tlist.files() [aka dir()]: path argument has now default = \".\"\n\n    o\tlocator() allows inline graphics parameters (for the plotting\n\tit does with type !=\"n\").\n\n    o\tNew function max.col() from MASS, thanks to V&R.\n\n    o\tnlm() can now take additional arguments in ... to be passed to f.\n\n    o\tpar() returns elements in alphabetical order, and \"ann\" as a\n\tlogical (not integer).\n\n    o\t.Platform has a new component GUI specifying the GUI in use\n\t(which might be \"unknown\").\n\n    o\tplot.formula() searches for a plot method for the left-side of the\n\tformula before searching for a plot method for the right-side of\n\tthe formula.\n\n    o\tNew bitmap devices png() and jpeg() on Unix/X11. (They were\n\talready available on Windows.)\n\n    o\tpostscript(print.it=TRUE) now does print the plot file.\n\tpostscript(onefile=FALSE) now produces multiple separate files.\n\n    o\tprovide() is now deprecated.\n\n    o\tNew function quade.test() in package ctest for the Quade test\n\tfor unreplicated blocked data.\n\n    o\tquantile(x, probs) now propagates NA/NaN in probs.\n\n    o\tOption for user-supplied normal random generator in RNGkind().\n\n    o\tread.fwf() is no longer dependent on Perl.\n\n    o\tNew arguments check.names and strip.white to read.table() and\n\tfriends.\n\n    o\tFunctions recordPlot() and replayPlot() save a plot to an R\n\tvariable and replay it.\n\n    o\tresiduals.lm() also allows types \"partial\" and \"response\"\n\tas residuals.glm().\n\n    o\tAdded col option to rug().\n\n    o\tscale() is now generic with scale.default method.\n\n    o\tNew \"call. = TRUE\" argument for stop(), and\n\tnew function  stopifnot(.) -- to be used in \"make check\".\n\n    o\tstr(.) has a new optional argument \"nchar.max = 128\" and truncates\n\tstrings longer than that.  Also eliminated a few minor glitches.\n\n    o\tThe symbols() function is now implemented.\n\n    o\tNew function termplot() with similar functionality to\n\tplot.gam() in S.\n\n    o\tThe parameters to title() which specify the labels may now\n\tbe specified as a list containing the parameter together\n\twith additional modifying par values (cex, col, font) which\n\taffect just that label.\n\n\ttitle() also has new line and outer arguments which provide\n\tfunctionality which matches that in axis().\n\n    o\tNew functions which.min() amd which.max().\n\n    o\tThe Wilcoxon and Ansari-Bradley tests now optionally return\n\tconfidence intervals for the location or scale parameter of\n\tinterest.\n\n    o\tNew argument `extend' to window() (and updated documentation).\n\n    o\twrite.table() can now write CSV files in the format Excel expects.\n\n    o\tNew device xfig() to produce XFig files.\n\n    o\tNew xyz.coords() utility function to be used for 3D highlevel plots.\n\n\n    o\tR CMD build now also works for package bundles.\n\n    o\tRdconv allows an output file to be specified.\n\n    o\tInitial support for C++ source code in add-on packages under Unix.\n\n    o\tMathlib can be built as a standalone library: see directory\n\tsrc/nmath/standalone.\n\n    o\tThe trace() function has two new features.  Giving where= as a\n\tfunction name allows tracing of functions called from a\n\tnamespace.  A new argument edit= allows inserting arbitrary\n\ttracing code in the function.  See the online help for\n\tdetails.\n\n    o\tNamespaces and S4 classes/methods should work better\n\ttogether.  Generic function and class definition objects are\n\tused in many places where the name of the function or class\n\twas used before, which caused problems for non-exported objects.\n\n\nBUG FIXES\n\n    o\tThe Mathlib functions now use exactly the same values for\n\t+/-Inf, NaN and NA as the rest of R in all cases.\n\n    o\tImproved automatic remaking.\n\n\n    o\toption keep.source was not set correctly before the base\n\tpackage was loaded: some functions in the base package had\n\tthe source kept.  The memory usage should now be reduced by ca 1Mb.\n\n    o\tThe base file is no longer closed twice in case of a syntax\n\terror (caused segfault on Linux).\n\n    o\tThe X11 data editor scrolls cells and so allows more than ca 10\n\tcharacters to be entered.  Several interface/redraw errors\n\thave been corrected.\n\n    o\tUsing `destroy' or `close' on the X11 data editor window killed R.\n\n    o\tMultiple `destroy' events or X11 errors killed R (PR#400).\n\n    o\tWarnings from .Last or closing devices are printed where\n\tsensible (e.g. not on GNOME nor Windows console).\n\n    o\tadd1.glm() and drop1.glm() gave incorrect results in the \"Chisq\"\n\ttest option when the scale was estimated.\n\n    o\taggregate() applied to multiple time series lost the series names.\n\n    o\tas.hclust.twins() in package mva sets method=NA (PR#538)\n\n    o\tave(1:3) now works (as when is.null(list()) was TRUE years ago).\n\n    o\tbarplot(c(0.1, 0.5, 1), ylim = c(0, 1)) now works: [xy]axs=\"i\"\n\tand exact limits now labels the limits.\n\n    o\tby() works when embedded in a function.\n\n    o\tThe xlab and ylab in coplot() now set the x and y axis labels,\n\tas in S.  Supply a second component to label the conditioning\n\tvariables.\n\n    o\tcount.fields() and read.table() now have the same default\n\tquote = \"\\\"'\".\n\n    o\tguard against segfault in dataentry(x<-1, Modes = plot), and the like.\n\n    o\tdev.print() now checks if the current device is replayable\n\t(and not all devices were, despite the documentation).\n\n    o\tThe gtk() device (formerly x11() under GNOME) was incorrectly\n\treturning character information, so in particular `*' was\n\twrongly centred as a plotting symbol.\n\n    o\tis.qr() checks not only for $qr, but also for $rank & $qraux, PR#482.\n\n    o\tlibrary() will not leave the package on the search path if\n\tloading fails (including if .First.lib fails).\n\n    o\tlqs(, method=\"S\") rounded k0 on passing to C.\n\n    o\tna.omit() now handles vectors and matrices as well as data\n\tframes.\n\n    o\tplot.lm(*, which=4) now works thanks to Marcel Wolbers.\n\n    o\tpostscript() now uses the options \"papersize\" and \"printcmd\"\n\trather than the values of R_PAPERSIZE in the environment\n\tand R_PRINTCMD found at build time.\n\n    o\tpostscript() now makes use of kerning information in computing\n\tstring widths.\n\n    o\tM <- 2 ; print(ppr(.., nterms = M))  now works.\n\n    o\tppr(, sm.method=\"spline\") had an internal limit of 250 rows:\n\tthis is now 2500 and is now checked.\n\n    o\tpredict.lm(,type=\"terms\",se.fit=T) gives correct standard errors\n\t(thanks to John Maindonald)\n\n    o\tprint.ftable() now returns its argument.\n\n    o\tproj.aovlist() now gives a non-zero result for strata with\n\tno fitted effects.\n\n    o\tqnorm() is now based on AS 241 instead of AS 111, and should\n\tgive precise results up to 16 digits precision.\n\n    o\trgeom(, prob=1) gives 0 rather than NA\n\n    o\trpois(*, lambda) now works when lambda > .Machine$integer.max\n\n    o\tstrheight(\"X\") with no active device would segfault.\n\n    o\tsystem() is now (partially) functional on systems without popen.\n\n    o\tFixed bug in undoc() - requiring new `chdir' argument\n\tfor sys.source()\n\n    o\tFixed problem in usemethod() where CAR(call) could be non-symbol.\n\n    o\tThe x11() device no longer crashes R if a font is not found,\n\tand will warn if there is a size mismatch of more than 10%.\n\n\n    o\tR CMD Rd2dvi now sorts files alphabetically.\n\n    o\tRdconv now reports if an invalid type is specified (rather\n\tthan using latex).\n\n    o\tSupport for Rd conversion to Sd has been reinstated (it was\n\tunintentionally removed along with nroff-based conversion to text).\n\n    o\t\\deqn{} fix in R-exts.texi, PR#523.\n\n\n    o\tLinpack.h now makes clear which routines are actually in R.\n\n    o\tEntry-point \"pythag\" is now loaded even though it is not\n\tnecessarily used in R.\tWhere \"hypot\" is available pythag\n\tjust calls hypot after checking for special values.\n\n    o\tcall_R will now correctly handle character vector arguments.\n\n    o\tThe alphabet links on top of HTML function indices with more than\n\t100 entries now contain only the letters which are really\n\tfirst letters of at least one entry.\n\n\n\n\t\tCHANGES IN R VERSION 1.0.1\n\n\nBUG FIXES\n\n    o\tpgamma(Inf, 1, Inf) gives NaN instead of an infinite loop, PR#462.\n\n    o\tInline xaxt and yaxt parameters were ignored.\n\n    o\tSetting the normal RNG was not always recorded in .Random.seed.\n\n    o\t\\link[pkg]{foo} links were wrongly translated to HTML.\n\n    o\tDirect use of show.data() with no args was incorrect.\n\n    o\tprint.coefmat does sensible things if options\n\tshow.signif.stars and show.coef.Pvalues are not set correctly.\n\n    o\tx <- list(a=1, b=2) ; x[\"c\"] <- 3 now (again) stretches the list\n\trather than give a \"subscript out of bounds\" error.\n\n    o\tModels with response appearing on rhs could cause segfault.\n\n    o\tas.data.frame.matrix will now ensure the columns added have\n\tnon-empty names.\n\n    o\tSome (strange?) model formulas could cause memory corruption\n\t(thanks to John Fox for digging this up).\n\n    o\tMatrix multiplication in cases such as 1:3 %*% t(1:2) is accepted.\n\n    o\tOptions --nsize and --vsize to R CMD check gave warning\n\tmessages and only one was accepted.\n\n    o\tThe autoload()s during startup are \"wrapped\" such\n\tthat conflicting objects don't break startup.\n\n    o\tcor.test(*, meth=\"spear\") {pkg ctest} now works (again) for n <= 6\n\n    o\tscale = 0 in biplot.princomp() now works.\n\n    o\tThe scores given by princomp(, cor = TRUE) and the rotated\n\tvalues given by prcomp(, scale = TRUE) are now computed from the\n\tscaled data.\n\n    o\tbarplot now works okay when length(col) < length(legend.txt),\n\tthanks to Ben Bolker, PR#494.\n\n    o\tlegend has new args `ncol' and `horiz' thanks to Ben Bolker.\n\n    o\tkernel(\"dirichlet\", m=10, r=1) in package ts now works.\n\n    o\tsave/restore of\t environments containing \"...\" object should\n\twork now.\n\n    o\tqhyper should work better for large N.\n\n    o\tqbinom(1-1e-16, n, p) , qpois() and qnbinom(*) looped for ever.\n\n    o\tas.matrix.data.frame no longer escapes quotes in character\n\tvectors.\n\n    o\tR would try to save the readline history at the end of\n\tnon-interactive sessions, causing crashes on some systems.\n\n    o\tSubtle roundoff problems caused arrays to be allocated short in\n\tloess.c in some cases, leading to segfaults.\n\n    o\tDocument that postscript(file=\"\") sends the output directly to\n\tthe default printer.\n\n    o\tts.union(, dframe=TRUE) had a long-standing typo, now works.\n\n    o\tsave(, ascii=TRUE) had problem with octal escapes in strings\n\twhen there was a digit following, should work now.\n\n    o\tmatpoints() and matlines() now also have a \"type =\" argument\n\twith defaults \"p\" and \"l\", respectively; PR#506.\n\n    o\tThe new Perl 5.6 broke our version-detection mechanism. A\n\tbetter one has been inserted.\n\n    o\tX11(colortype=\"gray\") failed to work on 8-bit screens, and\n\tmore generally when colour allocation failed X11() did not\n\trevert to monochrome correctly (and did not say it was doing so).\n\n\tIt was not documented in the help that to change the X11\n\tcolortype one needs to close all open X11 devices.\n\n    o\tloessf.f in modreg defined DSIGN unecessarily and this caused\n\ta conflict on AIX.\n\n    o\tplot.lm will now work with rlm objects.\n\n    o\tstart and end behave better when the frequency is not an integer.\n\n    o\taggregate.ts is closer to S-PLUS's aggregate.rts.\n\n    o\tquantile(x) now works when x contains several +/- Inf's.\n\n    o\tguard against segfault in dataentry(0,0) (or, more\n\trealistically, when mistyping data.entry(x,y) as\n\tdataentry(x,y))\n\n    o\tfixed special cases that caused bad behavior for methods,\n\tparticularly with nested use of primitive operators when\n\tsetMethod had been called.  Also fixed some situations that\n\tprevented caching methods (and therfore slowed down dispatch\n\tseriously) in similar cases.\n\n    o\tPackages can now have non-exported classes.  Previously this\n\tfailed because computations could not find methods for objects\n\tfrom private classes.  Adding a \"package\" attribute to an\n\tobject's class attribute (along with a large number of changes\n\tto use the package information) fixes this for most cases.\n\t(Methods for primitive functions still use global information\n\tabout classes because of imposed efficiency constraints on\n\tprimitives.)\n\n    o\tuntrace() now works with package::function-style references.\n\n\n\t**************************************************\n\t*\t\t\t\t\t\t *\n\t*\t       1.0 SERIES NEWS\t\t\t *\n\t*\t\t\t\t\t\t *\n\t**************************************************\n\n\n\t\tCHANGES IN R VERSION 1.0.0\n\n\nNEW FEATURES\n\n    o\tThe entry points [dpq]norm no longer exist: the header file\n\tR_ext/Mathlib.h must be used and such code re-compiled.\n\n    o\tHeader files in R_ext must be given explicitly as e.g.\n\t\"R_ext/Mathlib.h\".\n\n    o\tNew function  log1p(x) := log(1 + x) , accurate for |x| << 1.\n\n    o\tHTML searches can now select between any combination of\n\ttitles, keywords and object names. The keyword list of\n\tSearchEngine.html is automatically built from KEYWORDS.db.\n\tMissing links are now resolved using the search engine.\n\n    o\tA data subdirectory of the working directory will be\n\tsearched for data, by default after all the loaded packages\n\t(including base).\n\n    o\tData directories can now be zipped as Rdata.zip, provided a\n\tlist of contents is provided in file `filelist'.\n\n    o\tNew function try(expr) which provides a user-friendly wrapper\n\tto restart().\n\n    o\tNew function geterrmessage() to retrieve the last error\n\tmessage, for use in try() and user's error handlers, and new\n\toption \"show.error.messages\" to control the printing of error\n\tmessages.\n\n    o\tpersp() now labels its axes.\n\n    o\t?plotmath documents the plotting expressions facility much\n\tmore comprehensively, with tables in the examples.\n\n    o\tNew functions dump.frames() and debugger() allow post-mortem\n\tdebugging.  See the help on debugger.\n\n    o\tNew functions by() and merge() to split and join data frames.\n\n    o\tGeneric methods now do \"match before dispatch\", so\n\tplot(pch=2, y ~ x) invokes plot.formula.  Notice that this will\n\tbreak user code if it has renamed the dispatch argument and\n\tuses the original name for a different argument.\n\n    o\tLong-named command-line options also allow `--name VALUE'.\n\n    o\tarima0() now uses optim() rather than nlm(), and is thereby\n\tnormally faster and gives more accurate solutions.  Perhaps\n\tmore importantly, it fails to converge much less often.\n\n    o\tEnhanced pairs() function allowing separate upper, lower and\n\tdiagonal panel functions and control of diagonal labels.\n\t(Much of this was contributed by Jens Oehlschlaegel-Akiyoshi.)\n\n    o\tLinks to R objects in other packages in help files can now be\n\tspecified explicitly as \\link[pkg]{topic} or\n\t\\link[pkg:maintopic]{topic}\n\n    o\toptim() has a new simulated annealing method contributed by\n\tAdrian Trapletti.\n\n    o\tHershey vector fonts are available in text() and contour().\n\tDocumentation for Hershey vector fonts is in help(Hershey).\n\n    o\tThe HTML function indices (for packages and for all installed\n\tfunctions) and the index to the reference manual now omit\n\tmethods for generic functions if they would immediately follow\n\tthe generic and refer to the same file. This reduces the\n\tclutter considerably.\n\n    o\tNew functions points.formula() and lines.formula() to supplement\n\tplot.formula(). The latter has been enhanced so that all\n\targuments are now evaluated in the supplied data frame and all\n\tsubsettable arguments are subsetted. Notice that the data=\n\targument can no longer be given as a positional argument but\n\tmust be given in keyword form.\n\n    o\tThe behaviour of pmatch() has been changed to be S-compatible:\n\tin particular the meaning of duplicates.ok=TRUE has changed.\n\tThe help for pmatch and charmatch now gives more precise\n\tdescriptions, including of their differences.\n\n    o\tprint.hclust(), hclust() and dist() now store the method\n\tthat has been used.\n\n    o\tIf there are unmatched function argument(s), the first found\n\tis named in the message, for example\n\t`unused argument(s) (xlabel ...)'.\n\n    o\tConversion from Rd to raw nroff is no longer available.\n\n    o\ttext() now accepts vector \"col\", \"cex\" and \"font\" arguments.\n\n    o\t\"default\" is now a valid argument to RNGkind().\n\n    o\tnlm() and optim() will now give up immediately they try to\n\tstep to a non-finite value: nlm at least would go into an\n\tinfinite loop.\n\n    o\t\"mostattributes(obj) <- value\" utility useful for careful\n\tattributes' inheritance; e.g. for fixing pmax/pmin (see below).\n\n\nBUG FIXES\n\n    o\t(0.99.0a) The internal code for strsplit no longer destroys\n\tother internal structures, e.g. postscript file output on\n\tLinux.\n\n    o\t(0.99.0a) nlm() no longer segfaults with Hessian specified.\n\n    o\t(0.99.0a) Gnome version plotmath works, kind of\n\n    o\t(0.99.0a) edit.data.frame() now handles character vectors\n\tbetter, provided they were generated with I().\n\n    o\t(0.99.0a) Attempt to special-case print-buffer allocation\n\twith just a format argument was abandoned, since there is\n\tno portable way of doing it and it caused compile problem\n\ton Alpha.\n\n    o\ttempfile(\"\") now works on all Unix platforms, and\n\ttempfile(\"a b c\") returns a single name (with spaces in).\n\tThe file names are now unique across processes (Unix), are\n\tguaranteed not to exist and very likely to be unique within\n\tan R session.\n\n    o\tThe search semantics of data(), example() and help() have changed\n\t(see their help pages). In particular, they will normally\n\tlook in the package which was loaded, even if it is not in\n\tone of the libraries given in .lib.loc.\t Autoloads are no\n\tlonger included in the search (as they searched whole packages,\n\tnot just the autoloaded objects).\n\n    o\tThe documentation for .Rd files said & must be entered as \\&\n\tbut only the unescaped form was processed correctly. Now both\n\tare accepted but & is preferred.\n\n    o\tlist.files now skips non-existent/unreadable directories with\n\ta warning, rather that failing with an error.\n\n    o\tLots of help examples now tidy up the files they created, and\n\tdetach data frames and libraries they attach.\n\n    o\tlibrary(help=foo) lists only contents of first version if\n\tmultiple matches are found on lib.loc.\n\n    o\tround(2.345e-99, 100) now works (not giving 0).\n\tC functions fprec() and fround() [= R's signif() and round()],\n\tnow use R_pow_di(10.0, n) which is clean and more efficient.\n\tThis changes some results in the least significant bits.\n\n    o\trpois sometimes had problems with mu=0, now special-cased\n\n    o\tRare memory overrun in rpois fixed.\n\n    o\t--nsize and --vsize arguments to R CMD check now work.\n\n    o\tplot.stepfun had renamed the dispatch argument and used the\n\toriginal name \"x\" for a different argument which broke on the\n\tnew `match & dispatch' code. Changed to \"xval\".\n\n    o\tThe return value for par() was incorrectly documented, and in\n\tconsequence cpgram() was not re-setting \"pty\".\n\n    o\tpackage.dependencies() printed unnecessary debugging messages\n\t(version comparison): these have been removed.\n\n    o\tbackslashes in examples in help files are now converted\n\tcorrectly to latex.\n\n    o\tqchisq with non-centrality parameter now does something.\n\n    o\tGreek symbols are now converted correctly in HTML help (but\n\tonly rendered correctly on a few browsers).\n\n    o\trbind(x, y) works when x has no columns.\n\n    o\t\\tabular in Rd files is rendered better in latex, and long\n\ttabular material is now acceptable (and split over pages).\n\n    o\tevaluation depth wasn't properly reset by  \"next\"\n\n    o\tOld (pre-0.63.1) .Random.seed would cause problems if used.\n\n    o\tRow indexing of data.frames by characters (e.g. y[\"ab\", ])\n\twas wrong, as pmatch was not S-compatible.\n\n    o\tContour labels used to be rounded to integers.\n\n    o\tCalling rbinom() repeatedly with the same p but different n\n\tgave incorrect results.\n\n    o\tRd2contents assumed the \\name field was the file name, so\n\tsearches could lead to non-existent links.\n\n    o\tAssigning functions to list elements is not longer disallowed.\n\n    o\tUnified usage statement to R CMD xxx for all commands\n\n    o\tUsing duplicated new string indices in [<- caused a crash on\n\tsome platforms, e.g. x <- 1:2; x[c(\"3\", \"3\")] <- 3; x.\n\n    o\trle() can now handle character vectors, as documented.\n\n    o\tprint.default failed to reset its settings, so, e.g. na.print\n\tcould persist when printing a list.\n\n    o\t[cr]bind could sometimes return an invisible value.\n\n    o\taxis() and rug() sometimes extended the axis line too far.\n\trug() always clipped x values to the plot region, but now\n\tadmits to doing so with a warning.\n\n    o\tplot() and axis() got into trouble with very small relative\n\tranges: these are now required to be at least 100x the machine\n\tprecision.\n\n    o\tsplit.screen(, erase=TRUE) failed to create a new plot, so\n\tfailed if it was used on a postscript device before other plots.\n\n    o\tplotting with lwd = 0 also set the dash length to 0: now\n\tdash lengths are scaled up for lwd > 1 but not reduced for\n\t0 <= lwd < 1.\n\n    o\tplotting a \" \" vertically caused an X11 error with some fonts,\n\t(notably URW fonts on RedHat) causing plot.lm to crash R\n\n    o\tF distributions with huge DF now behave more sensibly\n\n    o\tCrashes could occur if there was an error in inline\n\tparameters, because the call was not being recorded. It is\n\tnow.\n\n    o\tTitle field of DESCRIPTION now overrides TITLE file.\n\n    o\tR now reports `50 or more warnings', not just 50, as it only\n\tdisplays the first 50.\n\n    o\tResetting the RNG state resets the state of the Box-Muller\n\tgenerator too.\n\n    o\tPointer protection bug in load() code.\n\n    o\tAssignment with unknown string index caused memory corruption\n\twhen used on matrices.\n\n    o\tIt is now possible to call Fortran routines d1mach and 11mach\n\ton platforms which do not append underscores.\n\n    o\tAdditions to plots by identify() and locator() were not being\n\trecorded, and so did not appear when a plot was copied or\n\tprinted.\n\n    o\tThe defaults for `na.action' arguments were inconsistently\n\tdocumented. In R the default is taken from the\n\toptions(na.action) setting, and that defaults to `na.omit'.\n\tIf there is no `na.action' setting, the default is `na.fail'.\n\tFor consistency, the default for replications() has been\n\tchanged.\n\n    o\tFix cases with lambda==0 in Poisson distribution\n\n    o\tdemo(is.things) had been broken by the introduction of is.element.\n\n    o\tpalette() didn't check for overflow and was limited to 256\n\tcolors, so palette(colors()) would segfault. Limit increased\n\tto 1024 and check inserted.\n\n    o\tC functions fprec() and fround() [= R's signif() and round()],\n\tnow use R_pow_di(10., n) which is clean and more efficient.\n\tThis changes some results in the least significant bits.\n\n    o\tpmin(c(a=1), 2:3) now works {and pmax(.) too}.\n\n\n\t*********************************************************\n\t*\t\t\t\t\t\t\t*\n\t*\tNews of 0.99.0 and earlier is in file 'NEWS.0'\t*\n\t*\t\t\t\t\t\t\t*\n\t*********************************************************\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/nmath/dnt.c",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/main/g_cntrlify.h",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/parallel/inst/doc/parallel.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/parallel/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/parallel/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/parallel/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/parallel/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/moveline.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/saveload.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/displaylist.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/plotexample.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/sharing.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/grid.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/viewports.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/locndimn.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/grobs.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/frame.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/rotated.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/interactive.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/inst/doc/nonfinite.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grid/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/foreign.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/rpart.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/MASS.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/nnet.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/spatial_7.3-11.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/class_7.3-14.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/survival_2.41-3.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/nlme_3.1-131.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/lattice_0.20-35.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/rpart_4.1-11.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/cluster_2.0.6.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/lattice.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/KernSmooth_2.23-15.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/mgcv.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/class.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/foreign_0.8-69.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/Matrix_1.2-12.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/codetools_0.2-15.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/boot_1.3-20.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/cluster.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/nlme.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/spatial.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/codetools.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/survival.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/mgcv_1.8-22.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/nnet_7.3-12.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/Matrix.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/MASS_7.3-47.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/KernSmooth.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/Recommended/boot.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/stats4/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/stats4/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/utils/R/sysdata.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/utils/inst/doc/Sweave.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/utils/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/utils/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/RGui-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/RGui-it.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/RGui-pt_BR.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/RGui-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/RGui-zh_CN.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/RGui-es.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/RGui-zh_TW.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/base/po/RGui-de.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/compiler/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ja/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en_GB/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en_GB/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en_GB/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/es/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/es/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/es/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fa/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fa/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fa/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fa/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ru/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/tr/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/tr/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/nn/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/nn/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/nn/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/nn/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/fr/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/de/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/da/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/en/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/it/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/pl/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_TW/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_TW/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/zh_TW/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/translations/inst/ko/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/methods/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/methods/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/methods/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/methods/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/datasets/data/UScitiesD.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/datasets/data/crimtab.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/datasets/data/npk.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/datasets/data/CO2.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/man/figures/mai.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/man/figures/mai.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/man/figures/pch.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/man/figures/oma.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/man/figures/pch.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/graphics/man/figures/oma.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/stats/tests/hills.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/stats/tests/anorexia.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/stats/tests/birthwt.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/stats/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/stats/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/stats/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/stats/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grDevices/inst/afm/ArialMT-BoldItalic.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grDevices/inst/afm/ArialMT-Italic.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grDevices/inst/afm/ArialMT.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grDevices/inst/afm/ArialMT-Bold.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grDevices/inst/icc/srgb.flate",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grDevices/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grDevices/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grDevices/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/grDevices/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/tcltk/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/tcltk/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/tcltk/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/tcltk/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/tools/R/sysdata.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/tools/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/tools/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/tools/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/tools/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/splines/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/splines/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/splines/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/library/splines/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/gnuwin32/e_pow.S",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/gnuwin32/installer/ChineseTraditional.isl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/gnuwin32/installer/R.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/gnuwin32/installer/ChineseSimplified.isl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/gnuwin32/installer/Korean.isl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/gnuwin32/front-ends/R.ico",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/extra/tzone/zoneinfo.zip",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/src/extra/tre/tre-match-parallel.c",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tests/WinUnicode.dat",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tests/reg-plot.pdf.save",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tests/utf8-regex.R",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tests/arima.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tests/reg-plot-latin1.pdf.save",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tests/nanbug.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tests/reg-tests-2.Rout.save",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tests/reg-tests-1a.R",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/share/dictionaries/en_stats.rds",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/share/java/getsp.class",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/tools/help2man.pl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/NEWS.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/html/up.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/html/left.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/html/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/html/right.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/html/Rlogo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/html/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/hist.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/QQ.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/fig11.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/ecdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/QQ.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/hist.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/fig11.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/ice.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/fig12.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/fig12.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/ice.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.4.3-pa4qmewjlwqp4ohlbau625bhzrcur2o3/spack-src/doc/manual/images/ecdf.pdf"
    ],
    "total_files": 4150
}