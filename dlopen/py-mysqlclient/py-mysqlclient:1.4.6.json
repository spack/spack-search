{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-mysqlclient-1.4.6-witrnfmmjqrrx3sp676roax7zshtdwzt/spack-src/doc/FAQ.rst": "====================================\n MySQLdb Frequently Asked Questions\n====================================\n\n.. contents::\n..\n\n\nBuild Errors\n------------\n\n  mysql.h: No such file or directory\n\nThis almost always mean you don't have development packages\ninstalled. On some systems, C headers for various things (like MySQL)\nare distributed as a separate package. You'll need to figure out\nwhat that is and install it, but often the name ends with -devel.\n\nAnother possibility: Some older versions of mysql_config behave oddly\nand may throw quotes around some of the path names, which confused\nMySQLdb-1.2.0. 1.2.1 works around these problems. If you see things\nlike -I'/usr/local/include/mysql' in your compile command, that's\nprobably the issue, but it shouldn't happen any more.\n\n\nImportError\n-----------\n\n  ImportError: No module named _mysql\n\nIf you see this, it's likely you did some wrong when installing\nMySQLdb; re-read (or read) README. _mysql is the low-level C module\nthat interfaces with the MySQL client library.\n\nVarious versions of MySQLdb in the past have had build issues on\n\"weird\" platforms; \"weird\" in this case means \"not Linux\", though\ngenerally there aren't problems on Unix/POSIX platforms, including\nBSDs and Mac OS X. Windows has been more problematic, in part because\nthere is no `mysql_config` available in the Windows installation of\nMySQL. 1.2.1 solves most, if not all, of these problems, but you will\nstill have to edit a configuration file so that the setup knows where\nto find MySQL and what libraries to include.\n\n\n  ImportError: libmysqlclient_r.so.14: cannot open shared object file: No such file or directory\n\nThe number after .so may vary, but this means you have a version of\nMySQLdb compiled against one version of MySQL, and are now trying to\nrun it against a different version. The shared library version tends\nto change between major releases.\n\nSolution: Rebuilt MySQLdb, or get the matching version of MySQL.\n\nAnother thing that can cause this: The MySQL libraries may not be on\nyour system path.\n\nSolutions:\n\n* set the LD_LIBRARY_PATH environment variable so that it includes\n  the path to the MySQL libraries.\n\n* set static=True in site.cfg for static linking\n\n* reconfigure your system so that the MySQL libraries are on the\n  default loader path. In Linux, you edit /etc/ld.so.conf and run\n  ldconfig. For Solaris, see `Linker and Libraries Guide\n  <http://docs.oracle.com/cd/E19253-01/817-1984/chapter6-63352/>`_.\n\n\n  ImportError: ld.so.1: python: fatal: libmtmalloc.so.1: DF_1_NOOPEN tagged object may not be dlopen()'ed\n\nThis is a weird one from Solaris. What does it mean? I have no idea.\nHowever, things like this can happen if there is some sort of a compiler\nor environment mismatch between Python and MySQL. For example, on some\ncommercial systems, you might have some code compiled with their own\ncompiler, and other things compiled with GCC. They don't always mesh\ntogether. One way to encounter this is by getting binary packages from\ndifferent vendors.\n\nSolution: Rebuild Python or MySQL (or maybe both) from source.\n\n  ImportError: dlopen(./_mysql.so, 2): Symbol not found: _sprintf$LDBLStub\n  Referenced from: ./_mysql.so\n  Expected in: dynamic lookup\n\nThis is one from Mac OS X. It seems to have been a compiler mismatch,\nbut this time between two different versions of GCC. It seems nearly\nevery major release of GCC changes the ABI in some why, so linking\ncode compiled with GCC-3.3 and GCC-4.0, for example, can be\nproblematic.\n\n\nMy data disappeared! (or won't go away!)\n----------------------------------------\n\nStarting with 1.2.0, MySQLdb disables autocommit by default, as\nrequired by the DB-API standard (`PEP-249`_). If you are using InnoDB\ntables or some other type of transactional table type, you'll need\nto do connection.commit() before closing the connection, or else\nnone of your changes will be written to the database.\n\nConversely, you can also use connection.rollback() to throw away\nany changes you've made since the last commit.\n\nImportant note: Some SQL statements -- specifically DDL statements\nlike CREATE TABLE -- are non-transactional, so they can't be\nrolled back, and they cause pending transactions to commit.\n\n\nOther Errors\n------------\n\n  OperationalError: (1251, 'Client does not support authentication protocol requested by server; consider upgrading MySQL client')\n\nThis means your server and client libraries are not the same version.\nMore specifically, it probably means you have a 4.1 or newer server\nand 4.0 or older client. You can either upgrade the client side, or\ntry some of the workarounds in `Password Hashing as of MySQL 4.1\n<http://dev.mysql.com/doc/refman/5.0/en/password-hashing.html>`_.\n\n\nOther Resources\n---------------\n\n* Help forum. Please search before posting.\n\n* `Google <http://www.google.com/>`_\n\n* READ README!\n\n* Read the User's Guide\n\n* Read `PEP-249`_\n\n.. _`PEP-249`: https://www.python.org/dev/peps/pep-0249/\n\n"
    },
    "skipped": [],
    "total_files": 44
}