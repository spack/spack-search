{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/configure.ac": "dnl Process this file with autoconf to produce a configure script.\ndnl configure.in for gnuplot on Unix.\ndnl\ndnl $Id: configure.ac,v 1.30.2.16 2017/11/02 04:14:15 sfeam Exp $\ndnl\ndnl this is actually major.minor ...\ndnl note that for a non-beta release, we need to disable DEVELOPMENT_RELEASE\ndnl\nAC_INIT([gnuplot],[5.2.8])\nAC_CONFIG_SRCDIR(src/graphics.c)\nAC_PREREQ([2.69])\nAC_CONFIG_HEADERS(config.h:config.hin)\ndnl AC_DEFINE(DEVELOPMENT_VERSION,1,[Provide contact info for gnuplot develoment])\nAM_INIT_AUTOMAKE([1.10 subdir-objects])\n\nAM_MAINTAINER_MODE\n\nVERSION_MAJOR=\"`cat $srcdir/VERSION`\"\nPATCHLEVEL=\"`cat $srcdir/PATCHLEVEL`\"\nAC_DEFINE_UNQUOTED(VERSION_MAJOR,[\"$VERSION_MAJOR\"],[The main version number])\nAC_DEFINE_UNQUOTED(PATCHLEVEL,[\"$PATCHLEVEL\"],[The patch level, a.k.a. micro version number])\n\ndnl configure.in body\n\ndnl Compiler characteristics\ndnl Check for the const and inline keywords and ANSI style stringification\ndnl automake 1.12 dropped support for AM_C_PROTOTYPES and ansi2knr\ndnl But our code still tests for #ifdef PROTOTYPES, so define it here\nAC_DEFINE(PROTOTYPES,1,[Automake 1.12 dropped support for building without prototypes])\nAC_USE_SYSTEM_EXTENSIONS\nAC_PROG_CC\nAC_PROG_CPP\nAC_PROG_OBJC\nAC_C_CONST\nAC_C_INLINE\nAC_C_STRINGIZE\nAC_PROG_LN_S\n\nif test \"${build}\" != \"${host}\"\nthen\n  CC=${CC-${host_alias-gcc}}\n  CFLAGS=${CFLAGS-\"-g -O2\"}\n  CXX=${CXX-${host_alias-c++}}\n  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n  CC_FOR_BUILD=${CC_FOR_BUILD-gcc}\nelse\n  # The cross-compilation patch originally had CC_FOR_BUILD = \"\\$(CC)\"\n  # but that causes a recursive definition in docs/Makefile. EAM Dec 2009.\n  CC_FOR_BUILD=\"${CC}\"\n  AC_PROG_CC\n\n  # We must set the default linker to the linker used by gcc for the correct\n  # operation of libtool.  If LD is not defined and we are using gcc, try to\n  # set the LD default to the ld used by gcc.\n  if test -z \"$LD\"\n  then\n    if test \"$GCC\" = yes\n    then\n      case $build in\n      *-*-mingw*)\n        gcc_prog_ld=`$CC -print-prog-name=ld 2>&1 | tr -d '\\015'` ;;\n      *)\n        gcc_prog_ld=`$CC -print-prog-name=ld 2>&1` ;;\n      esac\n      case $gcc_prog_ld in\n      # Accept absolute paths.\n      [[\\\\/]* | [A-Za-z]:[\\\\/]*)]\n        LD=\"$gcc_prog_ld\" ;;\n      esac\n    fi\n  fi\n\n  CXX=${CXX-\"c++\"}\n  CFLAGS=${CFLAGS-\"-g -O2\"}\n  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\nfi\nAM_PROG_CC_C_O\nAC_SUBST(CC_FOR_BUILD)\n\ndnl large file support\nAC_CHECK_TYPES([off_t])\nAC_FUNC_FSEEKO\nAC_SYS_LARGEFILE\n\nAC_ARG_WITH(libcerf,dnl\n[  --without-libcerf       build without special functions from libcerf (default enabled)],,\n  [test -z \"${with_libcerf}\" && with_libcerf=yes])\n\nif test \"${with_libcerf}\" = yes ; then\n  dnl The libcerf library contains a set of complex-valued special functions\n  dnl related to the error function (cerf, erfi, Dawson's integral, Voigt profile).\n  dnl If libcerf is installed then we can use them.\n  PKG_CHECK_MODULES_NOFAIL([LIBCERF], [libcerf],\n      [\n      CPPFLAGS=\"$CPPFLAGS $LIBCERF_CFLAGS\"\n      LDFLAGS=\"$LDFLAGS $LIBCERF_LIBS\"\n      ],\n  )\n  AC_SEARCH_LIBS([cdawson], [cerf],\n      [AC_DEFINE([HAVE_LIBCERF], 1, [define if you have libcerf])\n      have_libcerf=yes]\n  )\nfi\n\ndnl Various programs\ndnl X/Emacs for building .texi version of docs\ntest x\"$EMACS\" = xt && EMACS=\nAC_CHECK_PROGS(EMACS, emacs xemacs, no)\n\ndnl Allow manual specification of tex\nAC_ARG_WITH(latex,[  --without-latex         disable installation of latex support files],[],[with_latex=\"yes\"])\nif test \"$with_latex\" = yes; then\n  AC_CHECK_PROGS(PLAINTEX, tex, no)\n  AC_CHECK_PROGS(LATEX, latex latex2e, no)\n  AC_CHECK_PROGS(PDFLATEX, pdflatex, no)\n  test \"$PLAINTEX\" = \"no\" -o \"$LATEX\" = no -o \"$PDFLATEX\" = \"no\" && with_latex=\"no\"\nelse\n    PLAINTEX=\"no\"\n    LATEX=\"no\"\n    PDFLATEX=\"no\"\nfi\nAM_CONDITIONAL(HAVE_LATEX, test \"$with_latex\" != no)\nAC_CHECK_PROGS(DVIPS, dvips, no)\nAC_CHECK_PROGS(TROFF, troff, no)\nAC_CHECK_PROGS(LATEX2HTML, latex2html, no)\n\nAC_ARG_WITH(texdir,dnl\n  [--with-texdir=DIR       where to install latex style files\n                          (default by kpsexpand in subdir PACKAGE)],\n  TEXDIR=\"$withval\",\n  TEXDIR=\"no\")\ndnl Allow manual specification of kpsexpand \nAC_CHECK_PROGS(KPSEXPAND, kpsexpand, no)\nAC_CHECK_PROGS(TEXHASH, texhash, true)\nAC_ARG_WITH(kpsexpand,dnl\n  [--with-kpsexpand        search for kpsexpand at run-time (default disabled)],\n  [if test \"$withval\" = yes; then\n    test \"$KPSEXPAND\" != \"no\" || AC_MSG_ERROR(dnl\n      [You tell me to use kpsexpand, but there is no kpsexpand])\n    AC_DEFINE(HAVE_KPSEXPAND,1,[ Define if you want to use kpsexpand (TeX). ])\n  fi])\n\ndnl we only care about texdir if latex is enabled\nif test \"$with_latex\" = yes; then\n  test \"$KPSEXPAND\" = \"no\" -a \"$TEXDIR\" = \"no\" && AC_MSG_ERROR(dnl\n    [texdir is not given and there is no kpsexpand, please tell where to install])\n  dnl texdir has priority\n  if test \"$TEXDIR\" = \"no\"; then\n    TEXDIR=`$KPSEXPAND '$TEXMFLOCAL'`\n    if test \"x$TEXDIR\" = \"x\" -o \"$TEXDIR\" = \"\\$TEXMFLOCAL\"; then\n      if test \"x$prefix\" != \"xNONE\"; then\n        TEXDIR=${prefix}/share/texmf\n      else\n        TEXDIR=${ac_default_prefix}/share/texmf\n      fi\n    fi\n    TEXDIR=${TEXDIR}/tex/latex/gnuplot\n  fi\nfi\n\ndnl X Window System files.\nAC_SUBST(LIBRARIES_FOR_X)\nAC_PATH_XTRA\n\ndnl Needed for LynxOS until AC_PATH_XTRA is fixed\nif test \"$ac_cv_func_gethostbyname\" = no; then\n  if test \"$ac_cv_lib_nsl_gethostbyname\" = no; then\n    AC_CHECK_LIB(bsd, gethostbyname, X_EXTRA_LIBS=\"$X_EXTRA_LIBS -lbsd\")\n  fi\nfi\n\nif test \"$no_x\" != yes; then\n  CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n  LIBRARIES_FOR_X=\"$X_LIBS -lX11 $X_EXTRA_LIBS\"\n  AC_DEFINE(X11,1,[ Define if you are using the X11 window system. ])\n  AC_ARG_WITH(x-dcop,dnl\n  [--with-x-dcop           gnuplot_x11 can use KDE3/DCOP for space-raises-console],\n  AC_DEFINE(USE_KDE3_DCOP,1,[ Define if gnuplot_x11 can use KDE3 DCOP to raise konsole]))\nfi\nAM_CONDITIONAL(BUILD_GNUPLOT_X11, test \"$no_x\" != yes)\n\ndnl change location of X11 defaults\nAC_ARG_WITH(x-app-defaultdir,dnl\n[  --with-x-app-defaultdir=DIR       location of X11 application defaults\n                          (default /etc/X11/app-defaults/)],\n  X11_APPDEFAULTS_DIR=\"$withval\",\n  X11_APPDEFAULTS_DIR=\"/etc/X11/app-defaults/\")\n\ndnl Operating systems.\ndnl FIXME AC_DEFINE(ISC22)\ndnl FIXME AC_DEFINE(KSR)\ndnl Check for MSDOS and djgpp, Apple MacOsX, BeOS\nGP_MSDOS\nGP_APPLE\nGP_BEOS\nGP_ALPHA\nAM_CONDITIONAL(BUILD_SRC_BEOS_SUBDIR, test x$build_beos_subdir = xyes)\n\ndnl _instead_ of -lm ...\nAC_CHECK_FUNC(sin,,[AC_CHECK_LIB(m,sin)])\n\ndnl Header files. ANSI first\ndnl We prefer that the absense of a macro is the norm, so in syscfg.h\ndnl configure's HAVE_XXXX defines are translated into NO_XXXX for ANSI\ndnl headers and functions\nAC_HEADER_STDC\n\ndnl Header files\ndnl ANSI/ISO C, POSIX, others\nAC_CHECK_HEADERS(dirent.h errno.h float.h langinfo.h limits.h locale.h math.h \\\n  stdlib.h string.h time.h sys/time.h sys/types.h \\\n  sys/bsdtypes.h sys/ioctl.h sys/param.h sys/select.h sys/socket.h \\\n  sys/stat.h sys/systeminfo.h sys/timeb.h sys/utsname.h \\\n  libc.h malloc.h poll.h sgtty.h termios.h values.h dirent.h \\\n  dlfcn.h dl.h\n)\n\nAC_HEADER_STDBOOL\n\nif test \"$ac_cv_header_math_h\" = yes ; then\n  AC_MSG_CHECKING([for struct exception in math.h])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <math.h>]], [[struct exception *x; x->type; x->name;]])],[AC_MSG_RESULT(yes)\n     AC_DEFINE(HAVE_STRUCT_EXCEPTION_IN_MATH_H,1,\n               [ Define if math.h declares struct exception for matherr(). ])],[AC_MSG_RESULT(no)])\nfi\n\nif test \"$ac_cv_header_sys_stat_h\" = yes; then\n  AC_HEADER_STAT\nfi\n\nAC_HEADER_SYS_WAIT\n\ndnl Check for external functions plugin infrastructure\nAC_ARG_ENABLE(plugins,dnl\n[  --disable-plugins       disable support for importing external functions],,)\n\nif test \"$enable_plugins\" != no; then\n  if test \"$ac_cv_header_dl_h\" = yes; then\n    AC_SEARCH_LIBS(shl_load, dld,\n      [AC_DEFINE(HAVE_EXTERNAL_FUNCTIONS,1,[ Define if external function plugins are to be supported. ])\n       have_external_functions=yes\n      ])\n  fi\n  if test \"$ac_cv_header_dlfcn_h\" = yes; then\n    AC_SEARCH_LIBS(dlopen, dl,\n      [AC_DEFINE(HAVE_EXTERNAL_FUNCTIONS,1,[ Define if external function plugins are to be supported. ])\n       have_external_functions=yes\n      ])\n  fi\nfi\nAM_CONDITIONAL(BUILD_PLUGIN, test \"$have_external_functions\" = yes)\n\ndnl check if unistd actually declares anything.\nAC_MSG_CHECKING(for unistd.h)\nAC_EGREP_HEADER(execv, unistd.h,\n  [AC_DEFINE(HAVE_UNISTD_H) AC_MSG_RESULT(yes)],\n   AC_MSG_RESULT(no))\n\ndnl check if errno.h header declares errno\nAC_MSG_CHECKING(if errno variable is declared)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdio.h>\n#ifdef HAVE_ERRNO_H\n#include <errno.h>\n#endif]], [[errno=0]])],[AC_MSG_RESULT(yes)],[AC_DEFINE(EXTERN_ERRNO,1,[ Define if <errno.h> declares errno. ])\n   AC_MSG_RESULT(no)])\n\n\ndnl Types.\nAC_TYPE_SIZE_T\nAC_MSG_CHECKING(for time_t in time.h)\nAC_EGREP_HEADER(time_t,time.h,\n  [AC_MSG_RESULT(yes)\n   AC_DEFINE(HAVE_TIME_T_IN_TIME_H,1,\n             [ Define if time_t is declared in time.h. ])])\n \n\ndnl Functions. Standard first, then others\n\ndnl ANSI/ISO and their predecessors\ndnl sunos 4 has on_exit() in place of atexit()\ndnl gamma is called lgamma linux\ndnl we prefer lgamma over gamma, see specfun.c\ndnl math lib is already available, see operating systems part\nAC_CHECK_FUNCS(atexit memcpy memmove memset \\\n  on_exit bcopy bzero \\\n  setvbuf strerror strchr strrchr strstr \\\n  index rindex \\\n  erf erfc gamma lgamma \\\n  getcwd poll pclose popen fdopen select sleep stpcpy \\\n  strcspn strdup strndup strnlen strcasecmp stricmp strncasecmp strnicmp \\\n  sysinfo tcgetattr vfprintf doprnt uname usleep\n)\n\nAC_CHECK_FUNCS(snprintf, ,\n [  AC_MSG_RESULT([ \n  WARNING: Could not find a working version of snprintf.\n           If a user provides gnuplot with an improper format statement\n\t   then a buffer overflow and/or segfault can result.\n\t   Please consider providing snprintf via an external library.\n  ])\n])\n\n\ndnl HBB 20030624: see if signgam is declared by math.h\nAC_CHECK_DECLS([signgam],,,\n[#if HAVE_MATH_H\n#include <math.h>\n#endif\n])\n\ndnl check, if we have sigsetjmp and siglongjmp.\ndnl a trivial AC_CHECK_FUNCS(sigsetjmp) won't do\ndnl because sigsetjmp() might be a macro declared\ndnl in <setjmp.h>. (joze)\nAC_MSG_CHECKING(for sigsetjmp)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <setjmp.h>]], [[jmp_buf env; sigsetjmp(env, 1);]])],[AC_MSG_RESULT(yes)\n   AC_DEFINE(HAVE_SIGSETJMP,1,\n             [ Define if we have sigsetjmp(). ])],[AC_MSG_RESULT(no)])\n\nif test \"$ac_cv_func_pclose\" = yes -a \"$ac_cv_func_popen\" = yes ; then\n  AC_DEFINE(PIPES,1,[ Define if you do have the popen and pclose functions. ])\nfi\n\nAC_MSG_CHECKING(if malloc(0) returns 0)\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#ifdef HAVE_STDLIB_H\n#include <stdlib.h>\n#endif\n]],\n[[if(malloc(0)==0) return 1;]])],\n[malloc_zero_returns_zero=no],\n[malloc_zero_returns_zero=yes],\n[malloc_zero_returns_zero=yes])\nAC_MSG_RESULT([$malloc_zero_returns_zero])\nAS_IF([test x$malloc_zero_returns_zero = xyes],\n      [AC_DEFINE([MALLOC_ZERO_RETURNS_ZERO],[1],[Define to 1 if malloc(0)==0])])\n\ndnl Argument types of select()\nAC_FUNC_SELECT_ARGTYPES\n\ndnl On SVR3.\ndnl FIXME AC_DEFINE(CRIPPLED_SELECT)\n\ndnl .gih help file location\neval gp_datadir=$datadir\nif test \"$gp_datadir\" = NONE/share; then\n  datadir=\"/usr/local/share\"\nfi\npkgdatadir=\"$datadir/$PACKAGE\"\nAC_ARG_WITH(gihdir,dnl\n[  --with-gihdir=DIR       location of .gih help text file\n                          (default PREFIX/share/PACKAGE/VERSION)],\n  GIHDIR=\"$withval\",\n  GIHDIR=\"$pkgdatadir/$VERSION_MAJOR\")\n\ndnl The Linux console driver\nAC_ARG_WITH(linux-vga,dnl\n[  --with-linux-vga        (DEPRECATED) linux SVGA console driver],,\n  test -z \"$with_linux_vga\" && with_linux_vga=no)\n\ndnl check for installed linux vgalib\nif test \"$with_linux_vga\" = yes; then\n  AC_MSG_CHECKING(for linux vga library)\n  AC_CHECK_LIB(vga, vga_init,\n    [AC_DEFINE(LINUXVGA,1,\n               [ Define if this is a Linux system with SuperVGA library. ])\n     LINUXSUID='chown root $(bindir)/gnuplot; chmod u+s $(bindir)/gnuplot'\n     TERMLIBS=\"-lvga $TERMLIBS\"],\n    with_linux_vga=no)\nfi\n\ndnl TODO: simplify, get rid of GGI_SUPPORT\ndnl new ggi driver\nGGI_SUPPORT=no\nAC_ARG_WITH(ggi,dnl\n[  --with-ggi[=DIR]          enable the ggi driver],\n  [if test \"$withval\" != no; then\n     if test -d $withval/include; then\n       CPPFLAGS=\"$CPPFLAGS -I$withval/include\"\n     fi\n     if test -d $withval/lib; then\n       LDFLAGS=\"$LDFLAGS -L$withval/lib\"\n     fi\n     AC_CHECK_LIB(ggi,ggiInit,\n       [TERMLIBS=\"-lggi $TERMLIBS\"\n        AC_DEFINE(USE_GGI_DRIVER,1,\n                  [ Define if you want to use the experimental ggi driver. ])\n        GGI_SUPPORT=yes\n        dnl check if libggiwmh and ggi/wmh.h are found\n        AC_CHECK_LIB(ggiwmh,ggiWmhInit,\n          [TERMLIBS=\"-lggiwmh $TERMLIBS\"\n           AC_CHECK_HEADERS(ggi/wmh.h,,\n             AC_MSG_WARN([found ggiwmh library but not ggi/wmh.h\nplease add path to ggi/wmh.h to CPPFLAGS in Makefile]))\n          ])])\n   fi])\n\nAC_ARG_WITH(xmi,dnl\n[  --with-xmi[=DIR]          ggi's xmi support for pm3d (EXPERIMENTAL)],\n  [if test \"$withval\" != no -a \"$GGI_SUPPORT\" = yes; then\n     if test -d $withval/include; then\n       CPPFLAGS=\"$CPPFLAGS -I$withval/include\"\n     fi\n     if test -d $withval/lib; then\n       LDFLAGS=\"$LDFLAGS -L$withval/lib\"\n     fi\n     AC_CHECK_LIB(xmi,xmiInit,\n       [TERMLIBS=\"-lxmi $TERMLIBS\"\n        AC_CHECK_HEADERS(ggi/xmi.h)])\n   fi])\n\ndnl Use builtin readline or GNU readline or NetBSD editline\nAC_ARG_WITH(readline,dnl\n[  --with-readline=builtin  use the built-in readline\n  --with-readline=gnu      use the GNU readline library (default if present)\n  --with-readline=bsd      use the NetBSD editline library (NB: does not handle UTF-8!)\n  --with-readline=DIR      specify the location of readline/editline\n  --without-readline       do not use any readline function], ,\n  test -z \"$with_readline\" && with_readline=gnu)\n\ndnl Gnuplot history\nAC_ARG_ENABLE(history-file,dnl\n[  --disable-history-file  do not use history file],,\n  test -z \"$enable_history_file\" && enable_history_file=yes)\n\ndnl GNU readline and the required terminal library\nif test \"$with_readline\" != no; then\n  _libs=\"$LIBS\"\n  if test \"$with_readline\" != builtin; then\n\n    dnl check for terminal library\n    dnl this is a very cool solution from octave's configure.in\n    gp_tcap=\"\"\n    for termlib in ncurses curses termcap terminfo termlib; do\n      AC_CHECK_LIB(${termlib}, tputs, [gp_tcap=\"$gp_tcap -l$termlib\"])\n      case \"$gp_tcap\" in\n        *-l${termlib}*)\n          break\n        ;;\n      esac\n    done\n\n    dnl explicit path to readline/editline\n    if test \"$with_readline\" != gnu -a \"$with_readline\" != bsd; then\n      if test -d $with_readline/include; then\n        CPPFLAGS=\"$CPPFLAGS -I$with_readline/include\"\n      fi\n      if test -d $with_readline/lib; then\n        LDFLAGS=\"$LDFLAGS -L$with_readline/lib\"\n      fi\n      dnl Could be either libedit or readline!\n      if test ! -d $with_readline/include/readline; then\n        if test -d $with_readline/include/editline; then\n          AC_MSG_WARN([$with_readline contains libedit, not readline!])\n          with_readline=bsd\n        else\n          AC_MSG_ERROR([No readline found in $with_readline])\n        fi\n      fi\n    fi\n\n    if test \"$with_readline\" = bsd; then\n\n      AC_CHECK_LIB(edit, readline,\n        [TERMLIBS=\"-ledit $TERMLIBS\"],\n\t [AC_MSG_WARN([Could not find BSD editline library ])\n\t  with_readline=builtin],)\n\n      if test \"$ac_cv_lib_edit_readline\" = yes; then\n        AC_DEFINE(HAVE_LIBEDITLINE,1,\n                [ Define if you are using the BSD editline library. ])\n        AC_CHECK_HEADERS(editline/readline.h,,\n          AC_MSG_WARN([found BSD editline library but not readline.h please add path to readline.h to CPPFLAGS in Makefile]))\n\n        if test \"$enable_history_file\" = yes; then\n            AC_DEFINE(GNUPLOT_HISTORY,1,\n                      [ Define if you want to use a gnuplot history file. ])\n        fi\n      fi\n\n    else # !bsd\n\n    AC_CHECK_LIB(readline, remove_history,\n      [TERMLIBS=\"-lreadline $gp_tcap $TERMLIBS\"],,[${gp_tcap}])\n    if test \"$ac_cv_lib_readline_remove_history\" = no; then\n      dnl OSX keeps history functions in a separate library\n      AC_CHECK_LIB(history, remove_history,\n        [TERMLIBS=\"-lreadline -lhistory $gp_tcap $TERMLIBS\"],\n        [ AC_MSG_WARN([GNU readline not found - falling back to builtin readline])\n          with_readline=builtin ]\n        ,[${gp_tcap}])\n    fi\n\n    dnl Work around some functions missing from the OSX readline library.\n    dnl Would it be better to simply switch to with_readline=bsd in this case?\n    AC_SEARCH_LIBS(rl_ding, readline, ,\n\tAC_DEFINE(MISSING_RL_DING,1,[ Define if your libreadline has no rl_ding]),\n        [${TERMLIBS}])\n    AC_SEARCH_LIBS(rl_forced_update_display, readline, ,\n\tAC_DEFINE(MISSING_RL_FORCED_UPDATE_DISPLAY,1,[ Define if your libreadline has no rl_force_update_display]),\n        [${TERMLIBS}])\n    AC_SEARCH_LIBS(rl_reset_after_signal, readline,\n\tAC_DEFINE(HAVE_READLINE_RESET,1,[ Define if your libreadline has rl_reset_after_signal]),\n\t,\n        [${TERMLIBS}])\n    AC_SEARCH_LIBS(_rl_signal_handler, readline,\n\tAC_DEFINE(HAVE_READLINE_SIGNAL_HANDLER,1,[ Define if your libreadline has _rl_signal_handler]),\n\t,\n        [${TERMLIBS}])\n    AC_SEARCH_LIBS(rl_pending_signal, readline,\n\tAC_DEFINE(HAVE_READLINE_PENDING_SIGNAL,1,[ Define if your libreadline has rl_pending_signal]),\n\t,\n        [${TERMLIBS}])\n    # Warning: rl_complete_with_tilde_expansion is an int, not a function.\n    # I.e., it is not callable.  AC_CHECK_LIB seems to work anyhow, but...\n    AC_SEARCH_LIBS(rl_complete_with_tilde_expansion, readline, , \n\tAC_DEFINE(MISSING_RL_TILDE_EXPANSION,1,[ Define if your libreadline has no rl_complete_with_tilde_expansion]),\n        [${TERMLIBS}])\n\n    if [test \"$ac_cv_lib_readline_remove_history\" != no || test \"$ac_cv_lib_history_remove_history\" != no]; then\n      if test \"$with_readline\" = bsd; then\n          AC_DEFINE(HAVE_LIBEDITLINE,1,\n                [ Define if you are using the BSD editline library. ])\n      else\n          AC_DEFINE(HAVE_LIBREADLINE,1,\n                [ Define if you are using the GNU readline library. ])\n      fi\n      AC_CHECK_HEADERS(readline/readline.h,,\n        AC_MSG_WARN([found GNU readline library but not readline.h\nplease add path to readline.h to CPPFLAGS in Makefile]))\n      AC_CHECK_HEADERS(readline/history.h,,\n        AC_MSG_WARN([found GNU readline library but not history.h\nplease add path to history.h to CPPFLAGS in Makefile]))\n\n      if test \"$enable_history_file\" = yes; then\n          AC_DEFINE(GNUPLOT_HISTORY,1,\n                    [ Define if you want to use a gnuplot history file. ])\n      fi\n\n    fi # ! ac_cv_lib_readline_readline = no\n\n   fi # ! with_readline = bsd\n\n  fi # ! with_readline != builtin \n\n  if test \"$with_readline\" = builtin; then\n    AC_CHECK_FUNCS(wcwidth)\n    AC_CHECK_HEADERS(wchar.h,,\n        AC_MSG_WARN([please add path to wchar.h to CPPFLAGS in Makefile]))\n    AC_DEFINE(READLINE,1,\n              [ Define if you want to use the included readline function. ])\n    if test \"$enable_history_file\" = yes; then\n       AC_DEFINE(GNUPLOT_HISTORY,1,\n                [ Define if you want to use a gnuplot history file. ])\n    fi\n  fi\n\n  LIBS=\"$_libs\"\nfi\ndnl end readline\n\ndnl check presence of z library\ndnl TODO: path to zlib includes; -lz -lm specified multiple times\ndnl       we don't do anything about missing png/gd includes either\nAC_CHECK_LIB(z,deflate,\n  [TERMLIBS=\"$TERMLIBS -lz\"\n   AC_DEFINE(HAVE_LIBZ,1,[ Define if you have zlib. ])\n   AC_CHECK_HEADER(zlib.h,,\n     [AC_MSG_WARN([found z library but not zlib.h\nplease add path to zlib.h to CPPFLAGS in Makefile])])],\n  AC_MSG_WARN([zlib is required - see http://www.gzip.org/zlib/]))\n\ndnl check presence of gd library\ndnl we don't check for libfreetype and libjpeg locations - if gd requires\ndnl them, the gdlib-config scipt contains all the required information\nAC_ARG_WITH(gd,dnl\n[  --with-gd[=DIR]           location of gd library (png jpeg gif terminals)],,\n  with_gd=yes)\n\nif test \"$with_gd\" != no; then\n  AC_PATH_PROG([GDLIB_CONFIG], [gdlib-config])\n  if test -n \"$GDLIB_CONFIG\"; then\n    libgd_CPPFLAGS=`$GDLIB_CONFIG --cflags`\n    libgd_LDFLAGS=`$GDLIB_CONFIG --ldflags`\n    libgd_LIBS=`$GDLIB_CONFIG --libs`\n  elif test -d \"$with_gd\"; then\n    libgd_CPPFLAGS=\"-I$with_gd/include\"\n    libgd_LDFLAGS=\"-L$with_gd/lib\"\n    libgd_LIBS=\"-ljpeg -lpng -lfreetype -lz\"\n  fi\n\n  _cppflags=\"$CPPFLAGS\"\n  _ldflags=\"$LDFLAGS\"\n  _libs=\"$LIBS\"\n  CPPFLAGS=\"$CPPFLAGS $libgd_CPPFLAGS\"\n  LDFLAGS=\"$LDFLAGS $libgd_LDFLAGS\"\n  LIBS=\"$LIBS $libgd_LIBS\"\n\n  AC_CHECK_LIB(gd,gdImageCreateTrueColor,\n    [dnl found gd library\n     AC_DEFINE(HAVE_LIBGD,1,[ Define if you have gd library. ])\n     AC_CHECK_HEADERS(gd.h,,\n       AC_MSG_WARN([please add path to gd.h to CPPFLAGS in Makefile]))\n\n     dnl gif support in libgd\n     AC_CHECK_LIB(gd,gdImageGif,\n       [AC_DEFINE(HAVE_GD_GIF,1,[ Define if libgd supports gif. ])])\n     AC_CHECK_LIB(gd,gdImageGifAnimBegin,\n       [AC_DEFINE(GIF_ANIMATION,1,[ Define if libgd supports animated gifs. ])])\n\n     dnl jpeg support in libgd\n     AC_CHECK_LIB(gd,gdImageJpeg,\n       [AC_DEFINE(HAVE_GD_JPEG,1,[ Define if libgd supports jpeg. ])])\n\n     dnl freetype support in libgd\n     AC_CHECK_LIB(gd,gdImageStringFT,\n       AC_DEFINE(HAVE_GD_TTF,1,\n           [ Define if libgd supports TrueType fonts through libfreetype. ]))\n\n     dnl png support in libgd\n     AC_CHECK_LIB(gd,gdImagePng,\n       [AC_DEFINE(HAVE_GD_PNG,1,[ Define if libgd supports png. ])])\n\n    ],[dnl gd library not found\n       AC_MSG_WARN([libgd not found or too old, version >= 2.0 is required])\n       with_gd=no\n    ])\n\n  dnl piece it all together\n  if test \"$with_gd\" = no; then\n    CPPFLAGS=\"$_cppflags\"\n    LDFLAGS=\"$_ldflags\"\n    LIBS=\"$_libs\"\n  else\n    LIBS=\"$_libs\"\n    TERMLIBS=\"$TERMLIBS -lgd $libgd_LIBS\"\n  fi\n\nfi\ndnl end gd\n\ndnl The iconv library can be used to switch character encodings.\ndnl So far this is only used by gd.trm and emf.trm.\nAC_SEARCH_LIBS([iconv_open], [iconv],\n  [AC_CHECK_HEADER([iconv.h],\n    [AC_DEFINE([HAVE_ICONV], 1, [define if you have libiconv and iconv.h])]\n  )]\n)\n\ndnl check presence of lua/TikZ support\nAC_ARG_WITH(lua,dnl\n[  --without-lua           disable lua/TikZ terminal (default enabled)],,\n  [test -z \"${with_lua}\" && with_lua=yes])\n\ndnl Some distributions allow for parallel installation of different\ndnl lua versions.  We test for that in order of pereference.\nif test \"${with_lua}\" = yes ; then\n  LUA=lua\n  PKG_CHECK_MODULES([LUA], [lua], LUAFOUND=yes,\n    [PKG_CHECK_MODULES([LUA], [lua5.3], LUA=lua5.3, \n      [PKG_CHECK_MODULES([LUA], [lua5.2], LUA=lua5.2, \n        [PKG_CHECK_MODULES([LUA], [lua5.1], LUA=lua5.1, \n          [LUAFOUND=no])])])])\n  if test $pkg_failed != no; then\n    AC_MSG_WARN([Could not find support for lua using pkg-config.])\n    with_lua=no\n  fi\n\n  if test \"$with_lua\" != no; then\n    TERMLIBS=\"$TERMLIBS $LUA_LIBS\"\n    CPPFLAGS=\"$CPPFLAGS $LUA_CFLAGS\"\n  else\n    dnl if pkg-config didn't work, we migh still find it manually\n    AC_SEARCH_LIBS(luaL_openlibs, lua lua5.3 lua5.2 lua5.1,\n       with_lua=yes, with_lua=no)\n  fi\n  if test \"$with_lua\" = yes; then\n     AC_DEFINE(HAVE_LUA,1, [ Define if you want the lua/TikZ terminal. ])\n     AC_CHECK_HEADERS(lua.h,,\n       AC_MSG_WARN([please add path to lua.h to CPPFLAGS in Makefile]))\n  fi\n  AC_SUBST(LUA)\nfi\nAM_CONDITIONAL(BUILD_LUA, test \"${with_lua}\" = yes)\ndnl end lua\n\ndnl check presence of caca library\nAC_ARG_WITH(caca,dnl\n[  --with-caca[=DIR]         where to find the caca library],,\n  with_caca=no)\n\nif test \"$with_caca\" != no; then\n  if test -d \"$with_caca\"; then\n    dnl path to libcaca was specified manually\n    caca_CPPFLAGS=\"-I$with_caca/include\"\n    caca_LDFLAGS=\"-L$with_caca/lib -Wl,-rpath -Wl,$with_caca/lib\"\n    caca_LIBS=\"-lcaca\"\n    with_caca=yes\n  else\n    dnl try to use pkg-config first\n    PKG_CHECK_MODULES(caca, [caca], [with_caca=yes], [with_caca=no])\n    if test $pkg_failed != no; then\n      dnl try to locate libcaca using its config tool\n      AC_PATH_PROG([CACA_CONFIG], [caca-config])\n      if test -n \"$CACA_CONFIG\"; then\n        caca_CPPFLAGS=`$CACA_CONFIG --cflags`\n        caca_LDFLAGS=`$CACA_CONFIG --ldflags`\n        caca_LIBS=`$CACA_CONFIG --libs`\n        with_caca=yes\n      else\n        dnl libcaca was not found\n        AC_MSG_WARN([libcaca not found or too old, version >= 0.99.beta15 is required])\n        with_caca=no\n      fi\n    fi\n  fi\n\n  dnl test usability\n  _cppflags=\"$CPPFLAGS\"\n  _ldflags=\"$LDFLAGS\"\n  CPPFLAGS=\"$caca_CPPFLAGS $CPPFLAGS\"\n  LDFLAGS=\"$caca_LDFLAGS $LDFLAGS\"\n  AC_CHECK_LIB(caca,caca_get_version,\n    [dnl found caca library, test for version >= 0.99.beta15 (libcucul merged back)\n     AC_CHECK_LIB([caca],[caca_export_canvas_to_memory],,\n       [AC_DEFINE(USE_CACA_EXPORT_MEMORY,1,[ Define if your libcaca does not have caca_export_canvas_to_memory but the old caca_export_memory])],[])\n     AC_CHECK_DECL([CACA_DEPRECATED],\n       [AC_DEFINE(HAVE_LIBCACA,1,[ Define if you have the caca library. ])],\n       [AC_MSG_WARN([libcaca header not found or too old, version >= 0.99.beta15 is required])\n        with_caca=no],\n       [[#include <caca.h>]])\n    ],\n    [dnl caca library not found\n       AC_MSG_WARN([libcaca not found or too old, version >= 0.99.beta15 is required])\n       with_caca=no\n    ])\n\n  dnl piece it all together\n  if test \"$with_caca\" = no; then\n    CPPFLAGS=\"$_cppflags\"\n    LDFLAGS=\"$_ldflags\"\n  else\n    TERMLIBS=\"$TERMLIBS $caca_LIBS\"\n  fi\nfi\ndnl end caca\n\ndnl Process rest of with and enable options\n\ndnl Use .gnuplot file in current directory\nAC_ARG_WITH(cwdrc,dnl\n[  --with-cwdrc            check current directory for .gnuplot file,\n                          normally disabled for security reasons],,)\nif test \"$with_cwdrc\" = yes; then\n     AC_DEFINE(USE_CWDRC,1,\n               [ Define if you want to read .gnuplot from current directory (SECURITY RISK!).])\nfi\n\ndnl Disable experimental support for nonlinear axes\nAC_ARG_WITH(nonlinear-axes,dnl\n[  --without-nonlinear-axes     disable support for nonlinear axes])\nif test \"$with_nonlinear_axes\" = no; then\n    AC_DEFINE(DISABLE_NONLINEAR_AXES, 1,\n               [ Define if you want to disable support for nonlinear axes ])\nfi\n\ndnl Sort help/subtopic tables by row or column\nAC_ARG_WITH(row-help,dnl\n[  --with-row-help         format help and subtopic tables by row (default)\n  --without-row-help      format help and subtopic tables by column],\n  [if test \"$with_row_help\" = no; then\n     AC_DEFINE(COLUMN_HELP,1,\n               [ Define if you want online help and subtopic tables sorted by column. ])\n   fi])\n\ndnl Whether we want to create the LaTeX tutorial\nTUTORIAL=notutorial\nAC_ARG_WITH(tutorial,dnl\n[  --with-tutorial         process the LaTeX tutorial when building])\ndnl only if latex/2e is found\nif test \"$with_latex\" != no -a \"$with_tutorial\" = yes ; then\n  TUTORIAL=tutorial\nfi\n\ndnl enable multi-byte font support in x11 terminal\nAC_ARG_ENABLE(x11-mbfonts,dnl\n[  --disable-x11-mbfonts   disable multi-byte font support for x11 ],,\n  test -z \"$enable_x11_mbfonts\" && enable_x11_mbfonts=yes)\n  if test \"$enable_x11_mbfonts\" = yes; then\n\n    _ldflags=\"$LDFLAGS\"\n    LDFLAGS=\"$LDFLAGS $LIBRARIES_FOR_X\"\n\n    AC_MSG_CHECKING([for multi-byte support in x11])\n    AC_CHECK_LIB(X11, XmbDrawString,\n      AC_DEFINE(USE_X11_MULTIBYTE,1,[ Define to enable multi-byte font support for x11 ]),\n      enable_x11_mbfonts=no )\n    \n    LDFLAGS=\"$_ldflags\"\n  \n  fi\n\ndnl x11_external\nAC_ARG_ENABLE(x11_external,dnl\n[  --disable-x11-external  disable drawing to windows belonging to external apps],,\n  test -z \"$enable_x11_external\" && enable_x11_external=yes)\n\nif test \"$enable_x11_external\" = yes; then\n  AC_DEFINE(EXTERNAL_X11_WINDOW,1,[ Define if you want to supply pre-existing X11 windows. ])\nfi\n\ndnl check for installed linux vgagl lib if\ndnl both linux_vga is defined.\nif test \"$with_linux_vga\" = yes; then\n  _LIBS=\"$LIBS\"\n  dnl make sure LIBS contains -lvga\n  LIBS=\"$TERMLIBS $LIBS\"\n  AC_MSG_CHECKING(for the vgagl library)\n  AC_CHECK_LIB(vgagl, gl_hline,\n    [LIBS=\"-lvgagl $LIBS\"\n     AC_CHECK_HEADERS(vgagl.h,\n      [AC_DEFINE(VGAGL,1,[ Define if the vgagl libray is present. ])\n       dnl yup, we've the libvgagl.\n       dnl check now, if lib3dkit is found.\n       AC_CHECK_LIB(3dkit, gl_striangle,\n         [AC_CHECK_HEADERS(3dkit.h,\n            [dnl success! If we're here, all checks for\n             dnl the vgagl terminal driver succeeded.\n             AC_DEFINE(THREEDKIT,1,[ Define if the 3dkit libray is present. ])\n             AC_DEFINE(EXTENDED_COLOR_SPECS,1,\n                       [ Define if color information should be passed for each vertex. ])\n             VGAGLLIB=\"-l3dkit -lvgagl\"\n             with_vgagl=yes\n            ],dnl <-- 3dkit.h found\n            [with_vgagl=no\n             AC_MSG_RESULT([unable to find 3dkit.h])\n            ]dnl <-- 3dkit.h not found\n          )\n         ],dnl <-- 3dkit is present\n         [\n          with_vgagl=no\n          AC_MSG_RESULT([unable to find lib3dkit])\n         ]dnl <-- 3dkit is not present\n       )\n      ],dnl <-- vgagl.h is present\n      [\n       with_vgagl=no\n       AC_MSG_RESULT([unable to find vgagl.h])\n      ]dnl <-- vgagl.h is not present\n     )\n    ],dnl <-- libvgagl was found\n    [with_vgagl=no\n     AC_MSG_RESULT([unable to find libvgagl])\n    ]dnl <-- libvgagl was not found\n  )\n  dnl restore LIBS\n  LIBS=\"$_LIBS\"\nelse\n  with_vgagl=no\nfi\n\nTERMLIBS=\"$VGAGLLIB $TERMLIBS\"\n\ndnl labels with boxes around them\nAC_ARG_ENABLE(boxed_text,dnl\n[  --disable-boxed-text    disable support for boxed labels],,\n  test -z \"$enable_boxed_text\" && enable_boxed_text=yes)\n\n  if test \"$enable_boxed_text\" = yes; then\n  AC_DEFINE(EAM_BOXED_TEXT,1,\n               [ Define to support boxed labels ])\n  fi\n\ndnl disable the \"space raises console\" behaviour\nAC_ARG_ENABLE(raise-console,dnl\n[  --disable-raise-console spacebar in plot window does not raise console],,\n  test -z \"$enable_raise_console\" && enable_raise_console=yes)\n  if test \"$enable_raise_console\" != yes; then\n      AC_DEFINE(DISABLE_SPACE_RAISES_CONSOLE,1,\n                [ Define to treat spacebar like any other keystroke. ])\n  fi\n\ndnl rectangles and other objects\nAC_ARG_ENABLE(objects,dnl\n[  --disable-objects       disable rectangles and other objects ],,\n  test -z \"$enable_objects\" && enable_objects=yes)\n\n  if test \"$enable_objects\" = yes; then\n  AC_DEFINE(EAM_OBJECTS,1,\n               [ Define to allow placement of rectangles and other objects ])\n  fi\n\ndnl hidden3d compile-time options...\ndnl NOTE: have to check that they're not both turned on --- the code\ndnl doesn't allow that choice.\nAC_ARG_ENABLE(h3d-quadtree,dnl\n[  --disable-h3d-quadtree  disable quadtree optimization in hidden3d code],,\n  [test -z \"${enable_h3d_quadtree}\" && enable_h3d_quadtree=yes])\nif test \"$enable_h3d_quadtree\" = yes; then\n     AC_DEFINE(HIDDEN3D_QUADTREE,1,\n\t       [ Define to enable quadtree optimization in hidden3d code.])\nfi\n\nAC_ARG_ENABLE(h3d-gridbox,dnl\n[  --enable-h3d-gridbox    enable gridbox optimization in hidden3d code],\n  [if test \"$enable_h3d_quadtree\" = yes; then\n     AC_MSG_ERROR(dnl\n[Only one of the hidden3d options quadtree and gridbox may be enabled.])\n   fi\n   if test \"$enableval\" = yes; then\n     AC_DEFINE(HIDDEN3D_GRIDBOX,1,\n               [ Define to enable gridbox optimization in hidden3d code.])\n   fi])\n\nAC_DEFINE(HIDDEN3D_VAR_PTSIZE,1,\n\t[ Define to enable handling point size in hidden3d code.])\n\n\ndnl\nif test ! -f src/graphics.c ; then\n  AC_MSG_RESULT([Compiling outside source directory - copying needed files])\n  mkdir tutorial >/dev/null 2>&1\n  cp ${srcdir}/tutorial/eg3.dat tutorial\nfi\n\ndnl explicit call to PKG_PROG_PKG_CONFIG because the first call to\ndnl PKG_CHECK_MODULES may not happen\nPKG_PROG_PKG_CONFIG\n\ndnl  wxWidgets terminal\n\ndnl wxWidgets terminal needs C++\ndnl These tests cannot be called conditionally.\ndnl These tests are non-fatal on autoconf 2.58 and 2.59,\ndnl but it may change in future versions, so we redefine AC_MSG_ERROR.\ndnl Even if there is no C++ compiler on the system,\ndnl autoconf will set CXX as g++ : this must be reverted.\n\nm4_pushdef([AC_MSG_ERROR],[cxxerror=yes])\nAC_PROG_CXX\nm4_popdef([AC_MSG_ERROR])\n\nif test \"x${cxxerror}\" != \"xyes\"; then\n  AC_LANG_PUSH([C++])\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <iostream>]],\n\t[[const char hw[] = \"Hello, World\\n\"; std::cout << hw;]])],\n\t[cxxerror=no\n\tAC_PROG_CXXCPP],\n\t[cxxerror=yes\n\tCXX=$CC])\n  AC_LANG_POP([C++])\nfi\n\nAC_ARG_ENABLE(wxwidgets,dnl\n[  --disable-wxwidgets     wxWidgets terminal (default enabled)],,\n  [test -z \"${enable_wxwidgets}\" && enable_wxwidgets=yes])\n\nif test \"${enable_wxwidgets}\" = yes ; then\n  dnl variable used to determine if all checks pass\n  enable_wxwidgets_ok=yes\n\n  dnl Check for the C++ compiler\n  if test \"x${cxxerror}\" = \"xyes\"; then\n    AC_MSG_WARN([No C++ compiler found. The wxWidgets terminal will not be compiled.])\n      enable_wxwidgets_ok=no\n  fi\n\n  dnl The user can specify another path for wx-config\n  WXWIDGETS_PATH=\"${PATH}\"\n  AC_ARG_WITH(wx,dnl\n  [--with-wx=DIR           Where to find wx-config, a wxWidgets confinguration tool],\n    [ if test \"${with_wx}\" != \"no\" ; then\n\tWXWIDGETS_PATH=\"${with_wx}:${PATH}\"\n     fi ])\n\n  dnl Look for wx-config in the path\n  AC_PATH_PROG(WX_CONFIG, wx-config, no, ${WXWIDGETS_PATH})\n  if test \"${WX_CONFIG}\" = \"no\"; then\n    AC_MSG_WARN([wxWidgets can't be found. You can try --with-wx=DIR to give the right path to wx-config. The wxWidgets terminal will not be compiled.])\n    enable_wxwidgets_ok=no\n  else\n\n    dnl Ckeck for wxWidgets version\n    WXWIDGETS_VERSION=`${WX_CONFIG} --release`\n    if expr 2.6 \\> ${WXWIDGETS_VERSION} >/dev/null; then\n      AC_MSG_WARN([Your development package for wxWidgets is too old, you need at least version 2.6. The wxWidgets terminal will not be compiled.])\n      enable_wxwidgets_ok=no\n    fi\n    if expr ${WXWIDGETS_VERSION} \\> 2.8 >/dev/null; then\n      AC_DEFINE(WX_NEEDS_XINITTHREADS, 1, [wxWidgets >= 2.9 wants calling program to invoke XInit()])\n    fi\n\n    dnl Make sure we're using more than the 'base' wxWidgets. Those \n    if expr `${WX_CONFIG} --basename` : '.*base' >/dev/null; then\n      AC_MSG_WARN([You only have the 'base' flavor of wxWidgets. A full wxWidgets library is required. On Debian/Ubuntu, please make sure that you have a 'libwx...-dev' package other than just 'libwxbase...-dev' installed. The wxWidgets terminal will not be compiled.])\n      enable_wxwidgets_ok=no\n    fi\n  fi\n\n  dnl Check for Cairo\n  PKG_CHECK_MODULES_NOFAIL(CAIROPANGO, [cairo >= 0.9.0 pango >= 1.22 pangocairo >= 1.10])\n  if test $pkg_failed != no; then\n    AC_MSG_WARN([The wxWidgets terminal will not be compiled.])\n    enable_wxwidgets_ok=no\n  fi\nfi\n\nif test \"${enable_wxwidgets_ok}\" = yes ; then\n  WX_CXXFLAGS=\"`$WX_CONFIG --cxxflags | sed 's/-fno-exceptions//'` $CAIROPANGO_CFLAGS\"\n  WX_LIBS=\"`$WX_CONFIG --libs` $CAIROPANGO_LIBS $LIBRARIES_FOR_X\"\n\n  dnl Check for fork(), used for the 'persist' effect\n  AC_FUNC_FORK\n\n  dnl Check if wxWidgets uses gtk on this platform\n  WX_TOOLKIT=\"`$WX_CONFIG --query-toolkit`\"\n  if test \"${WX_TOOLKIT}\" = gtk2 ; then\n    PKG_CHECK_MODULES(GTK, [gtk+-2.0], have_gtk=yes, have_gtk=no)\n    want_gtk=yes\n  elif test \"${WX_TOOLKIT}\" = gtk3 ; then\n    PKG_CHECK_MODULES(GTK, [gtk+-3.0], have_gtk=yes, have_gtk=no)\n    want_gtk=yes\n  fi\n  if  test \"${have_gtk}\" = yes ; then\n    AC_DEFINE(HAVE_GTK, 1, [define if your wxWidgets uses the gtk toolkit])\n    WX_CXXFLAGS=\"$WX_CXXFLAGS $GTK_CFLAGS\"\n    WX_LIBS=\"$WX_LIBS $GTK_LIBS\"\n  fi\n\n  dnl Default to single-threaded\n  AC_ARG_WITH(wx-multithreaded, dnl\n  [--with-wx-multithreaded  use multithreaded wxgtk (known problems, not recommended)],\n  , WX_CXXFLAGS=\"$WX_CXXFLAGS -DWXT_MONOTHREADED\"\n  )\n\n  CPPFLAGS=\"$CPPFLAGS $CAIROPANGO_CFLAGS\"\n  CXXFLAGS=\"$CXXFLAGS $WX_CXXFLAGS\"\n  AC_SUBST(WX_LIBS)\n  AC_DEFINE(WXWIDGETS, 1, [ Define if you want the wxwidgets terminal. ])\nfi\n\nAM_CONDITIONAL(BUILD_WXWIDGETS, test \"${enable_wxwidgets_ok}\" = yes)\n\ndnl  End wxWidgets terminal\n\ndnl  Allow to disable terminals requiring bitmap support.\nAC_ARG_WITH(bitmap_terminals,dnl\n[  --with-bitmap-terminals dot-matrix printers and pbm])\nAS_IF([test \"x${with_bitmap_terminals}\" = \"xyes\"],,\n  AC_DEFINE(NO_BITMAP_SUPPORT,1,\n          [ Define to disable terminals that depend on code in bitmap.c ]))\nAM_CONDITIONAL(BUILD_BITMAP, test \"${with_bitmap_terminals}\" = yes)\n\ndnl  Allow to include gpic terminal\nAC_ARG_WITH(gpic,dnl\n[  --with-gpic             gpic terminal])\nAS_IF([test \"x${with_gpic}\" = \"xyes\"],\n  AC_DEFINE(HAVE_GPIC,1,\n          [ Define to include support for gpic terminal ],))\n\ndnl  Allow to include mif (FrameMaker 3) terminal\nAC_ARG_WITH(mif,dnl\n[  --with-mif              mif terminal (FrameMaker 3)])\nAS_IF([test \"x${with_mif}\" = \"xyes\"],\n  AC_DEFINE(HAVE_MIF,1,\n          [ Define to include support for mif terminal ],))\n\nAC_ARG_WITH(cairo,dnl\n[  --without-cairo         cairo-based terminals (default enabled)],,\n  [test -z \"${with_cairo}\" && with_cairo=yes])\n\nif test \"${with_cairo}\" = yes ; then\n  dnl cairo terminals\n  PKG_CHECK_MODULES_NOFAIL(CAIROPDF,dnl\n       [cairo >= 1.2 cairo-pdf >= 1.2 pango >= 1.22 pangocairo >= 1.10 glib-2.0 >= 2.28])\n  if test $pkg_failed != no; then\n    AC_MSG_WARN([The cairo terminals will not be compiled.])\n    with_cairo=no\n  else\n    AC_DEFINE(HAVE_CAIROPDF,1, [ Define if you want the cairo-based terminals. ])\n    CPPFLAGS=\"$CPPFLAGS $CAIROPDF_CFLAGS\"\n    LIBS=\"$LIBS $CAIROPDF_LIBS\"\n    with_cairo=yes\n    PKG_CHECK_MODULES(CAIROEPS, [cairo >= 1.6.0],\n        AC_DEFINE([HAVE_CAIROEPS], 1, [libcairo support for eps (cairo >= 1.6)]),\n        AC_MSG_WARN([Your version of cairo is too old to support epscairo output]))\n  fi\nfi\n\nbuild_gpcairo=no\nif test \"${enable_wxwidgets_ok}\" = yes; then\n  build_gpcairo=yes\nfi\nif test \"${with_cairo}\" = yes; then\n  build_gpcairo=yes\nfi\n\nAM_CONDITIONAL(BUILD_GPCAIRO, test \"${build_gpcairo}\" = yes)\n\ndnl Enable subsystem to generate statistical summary of file contents\nAC_ARG_ENABLE(stats,dnl\n[  --disable-stats         Omit calculation of statistical summary of data],\n  [if test \"$enableval\" != no; then\n    AC_DEFINE(USE_STATS,1,\n               [ Define to add support for generating a statistical summary of data])\n   fi],\n    AC_DEFINE(USE_STATS,1,\n               [ Define to add support for generating a statistical summary of data])\n   )\n\ndnl Enable parsing of deprecated syntax\nAC_ARG_ENABLE(backwards-compatibility,dnl\n[  --enable-backwards-compatibility       enable some deprecated syntax ],\n  [if test \"$enableval\" = yes; then\n    AC_DEFINE(BACKWARDS_COMPATIBLE,1,\n               [ Define to allow use of certain deprecated syntax. ])\n  fi])\n\ndnl Qt terminal\n\nAC_ARG_WITH(qt,dnl\n[  --with-qt [=qt4 =qt5 =no] Qt terminal (default autodetect)],\n  [if test \"x${with_qt}\" != \"xno\"; then\n     enable_qt=yes;\n   fi],\n  enable_qt=yes)\n\nif test \"${enable_qt}\" = yes ; then\n  dnl variable used to determine if all checks pass\n  enable_qt_ok=yes\n\n  dnl Check for the C++ compiler\n  if test \"x${cxxerror}\" = \"xyes\"; then\n    AC_MSG_WARN([No C++ compiler found. The Qt terminal will not be compiled.])\n      enable_qt_ok=no\n  fi\n\n  dnl First check for Qt5\n  if test \"x${with_qt}\" = \"xqt5\"; then\n    try_qt4=no\n  else\n    try_qt4=yes\n  fi\n  if test \"x${with_qt}\" != \"xqt4\"; then\n    PKG_CHECK_MODULES_NOFAIL(QT, [Qt5Core Qt5Gui Qt5Network Qt5Svg Qt5PrintSupport])\n    if test $pkg_failed = no; then\n      try_qt4=no\n      QT5LOC=`$PKG_CONFIG --variable=host_bins Qt5Core`\n      if test \"x${QT5LOC}\" != \"x\"; then\n        UIC=${QT5LOC}/uic\n        MOC=${QT5LOC}/moc\n        RCC=${QT5LOC}/rcc\n        LRELEASE=${QT5LOC}/lrelease\n      fi\n      CXXFLAGS=\"$CXXFLAGS -fPIC\"\n    fi \n  fi\n\n  dnl No Qt5, check for Qt4.5 or greater\n  if test ${try_qt4} != no; then\n    PKG_CHECK_MODULES_NOFAIL(QT, [QtCore >= 4.5 QtGui >= 4.5 QtNetwork >= 4.5 QtSvg >= 4.5])\n    if test $pkg_failed != no; then\n      enable_qt_ok=no\n      AC_MSG_WARN([The Qt terminal will not be compiled.])\n    else\n      QT4LOC=`$PKG_CONFIG --variable=exec_prefix QtCore`\n      UIC=`$PKG_CONFIG --variable=uic_location QtCore`\n      MOC=`$PKG_CONFIG --variable=moc_location QtCore`\n      RCC=`$PKG_CONFIG --variable=rcc_location QtCore`\n      LRELEASE=`$PKG_CONFIG --variable=lrelease_location QtCore`\n      AC_MSG_WARN([The Qt terminal will use Qt4.])\n      QTVER=\"4\"\n    fi\n  else\n    AC_MSG_WARN([The Qt terminal will use Qt5.])\n    QTVER=\"5\"\n  fi\nfi\n\nif test \"${enable_qt_ok}\" = yes ; then\n  dnl Check for fork()\n  AC_FUNC_FORK\n\n  CPPFLAGS=\"$CPPFLAGS $QT_CFLAGS\"\n  CXXFLAGS=\"$CXXFLAGS $QT_CXXFLAGS\"\n\n  if test x\"$MOC\" = x; then\n    MOC=moc\n  fi\n  if test x\"$UIC\" = x; then\n    UIC=uic\n  fi\n  if test x\"$RCC\" = x ; then\n    if test x\"$QT4LOC\" != x ; then\n        RCC=$QT4LOC/bin/rcc\n    else\n        RCC=rcc\n    fi\n  fi\n  if test x\"$LRELEASE\" = x ; then\n    if test x\"$QT4LOC\" != x ; then\n        LRELEASE=$QT4LOC/bin/lrelease\n    else\n        LRELEASE=lrelease\n    fi\n  fi\n  AC_SUBST(RCC)\n  AC_SUBST(MOC)\n  AC_SUBST(UIC)\n  AC_SUBST(QT_LIBS)\n  AC_SUBST(LRELEASE)\n  AC_DEFINE(QTTERM,1, [ Define if you want the Qt terminal. ])\n  AC_DEFINE_UNQUOTED(QTVER,$QTVER,[ only used for docs])\nfi\nAM_CONDITIONAL(BUILD_QT, test \"${enable_qt_ok}\" = yes)\n\ndnl build mouse support if any mouse-requiring terminal is selected\nif test \"${enable_qt_ok}\" = yes \\\n  || test \"${enable_wxwidgets_ok}\" = yes \\\n  || test \"$GGI_SUPPORT\" = yes \\\n  || test \"$no_x\" != yes; then\n    enable_mouse=yes;\nfi\n\nif test \"$enable_mouse\" = yes; then\n  AC_DEFINE(USE_MOUSE,1,\n            [ Define if you have interactive terminals that use mouse support. ])\n  AC_DEFINE(PIPE_IPC,1,\n            [ Unix-type of Interprocess Communication is required for mouse support. ])\nfi\n\ndnl translation tools\nAM_CONDITIONAL(HAVE_LRELEASE, test \"${LRELEASE}\" != no)\n\nAC_ARG_VAR(DIST_CONTACT,[Contact address for modified and binary distributed gnuplot versions])\nif test -n \"${DIST_CONTACT}\"; then\n  AC_DEFINE_UNQUOTED([DIST_CONTACT],[\"$DIST_CONTACT\"],[Contact address for modified and binary distributed gnuplot versions])\nfi\n\ndnl Substitute variables\nAC_SUBST(PACKAGE)\nAC_SUBST(VERSION_MAJOR)\nAC_SUBST(VERSION)\nAC_SUBST(PATCHLEVEL)\nAC_SUBST(GIHDIR)\nAC_SUBST(TEXDIR)\nAC_SUBST(LINUXSUID)\nAC_SUBST(TERMLIBS)\nAC_SUBST(TERMXLIBS)\nAC_SUBST(TUTORIAL)\nAC_SUBST(X11_APPDEFAULTS_DIR)\n\ndnl Write Makefiles and configuration header\nAC_CONFIG_FILES([Makefile\n           config/Makefile\n           demo/Makefile\n           demo/plugin/Makefile\n           docs/Makefile\n           m4/Makefile\n           man/Makefile\n           share/Makefile\n           share/LaTeX/Makefile\n           src/Makefile\n           src/beos/Makefile\n           src/wxterminal/Makefile\n           src/qtterminal/Makefile\n           term/Makefile\n           tutorial/Makefile])\nAC_CONFIG_COMMANDS([default],[test -z \"$CONFIG_HEADERS\" || echo timestamp >stamp-h],[])\nAC_OUTPUT\n\ndnl Report configuration\ndnl Rationale:\ndnl - if something is disabled by default, show arguments to use to enable.\ndnl - if something has particular dependencies, show them all when they are\ndnl missing (the detailed output will give more details anyway).\ndnl The goal is to give sensible and easily accessible information to users\ndnl and packagers.\n\nAC_MSG_RESULT([])\nAC_MSG_RESULT([** Configuration summary for $PACKAGE $VERSION:])\nAC_MSG_RESULT([])\n\nAC_MSG_RESULT([gnuplot will be compiled with the following terminals:])\nAC_MSG_RESULT([])\n\nAC_MSG_RESULT([  Standalone terminals: yes (always builtin)])\nAC_MSG_RESULT([    canvas, cgm, context, dumb, dxf, eepic, emf, emtex,])\nAC_MSG_RESULT([    epslatex, fig, hpgl, latex, metafont, metapost, mif, pcl5,])\nAC_MSG_RESULT([    postscript, pslatex, pstex, pstricks, qms, svg,])\nAC_MSG_RESULT([    tek40xx, tek410x, texdraw, tgif, tkcanvas, tpic, vttek])\nAC_MSG_RESULT([])\n\nif test \"$with_bitmap_terminals\" == yes; then\n  AC_MSG_RESULT([  dot-matrix terminals: yes ( --without-bitmap-terminals to disable)])\nelse\n  AC_MSG_RESULT([  dot-matrix terminals: no (use --with-bitmap-terminals to enable)])\nfi\nAC_MSG_RESULT([    epson, nec, okidata, tandy, and seiko dp414 printers])\nAC_MSG_RESULT([    hp500c, hpdj, hpljii, hppj, pbm, sixel, starc])\nAC_MSG_RESULT([])\n\nif test \"$no_x\" != yes; then\n  AC_MSG_RESULT([  X Window System terminal: yes])\n  if test \"$enable_x11_mbfonts\" = yes; then\n    AC_MSG_RESULT([    (with multi-byte fonts)])\n  else\n    AC_MSG_RESULT([    (without multi-byte fonts, requires support in libX11)])\n  fi\n\n  if test \"$enable_x11_external\" = yes; then\n    AC_MSG_RESULT([    (enable plotting to windows opened by external apps) ])\n  else\n    AC_MSG_RESULT([    (disable plotting to windows opened by external apps) ])\n  fi\n\n  if test \"$with_x_dcop\" = yes; then\n    AC_MSG_RESULT([    (gnuplot_x11 can use KDE3/DCOP to raise konsole) ])\n  fi\n\n  AC_MSG_RESULT([    (with application defaults, in $X11_APPDEFAULTS_DIR)])\nelse\n  AC_MSG_RESULT([  X Window System terminal: no (requires X libraries)])\nfi\n\nif test \"$with_linux_vga\" = yes; then\n    AC_MSG_RESULT([  DEPRECATED linux terminal (vga console): yes])\n  if test \"$with_vgagl\" = yes; then\n    AC_MSG_RESULT([  DEPRECATED vgagl terminal ((s)vga console): yes])\n  else\n    AC_MSG_RESULT([  vgagl terminal ((s)vga console): no (requires vgagl)])\n  fi\n  AC_MSG_RESULT([    SECURITY NOTICE: SVGAlib requires that gnuplot is installed suid root!])\nelse\n  AC_MSG_RESULT([  linux terminal (vga console): no (use --with-linux-vga to enable)])\n  AC_MSG_RESULT([  vgagl terminal ((s)vga console): no (use --with-linux-vga to enable)])\nfi\n\nif test \"$GGI_SUPPORT\" = yes; then\n  if test \"$ac_cv_header_ggi_xmi_h\" = yes; then\n    AC_MSG_RESULT([  ggi terminal: yes (with pm3d support)])\n  else\n    AC_MSG_RESULT([  ggi terminal: yes (without pm3d support, requires libxmi)])\n  fi\nelse\n  AC_MSG_RESULT([  ggi terminal: no (use --with-ggi to enable, requires libggi)])\nfi\n\nif test \"$with_gpic\" == yes; then\n  AC_MSG_RESULT([  gpic terminal: yes])\nelse\n  AC_MSG_RESULT([  gpic terminal: no   (use --with-gpic to enable)])\nfi\n\nif test \"$with_mif\" == yes; then\n  AC_MSG_RESULT([  mif terminal: yes])\nelse\n  AC_MSG_RESULT([  mif terminal: no   (use --with-mif to enable)])\nfi\n\nif test \"$is_msdos\" = yes; then\n  AC_MSG_RESULT([  svga terminal (MSDOS/djgpp): yes])\nfi\n\nif test \"$build_src_beos_subdir\" = yes; then\n  AC_MSG_RESULT([  be terminal (BeOS): yes])\nfi\n\nif test \"$with_caca\" = yes; then\n  AC_MSG_RESULT([  caca terminal: yes (EXPERIMENTAL)])\nelse\n  AC_MSG_RESULT([  caca terminal: no (use --with-caca to enable)])\nfi\n\nif test \"$gnuplot_framework_AquaTerm\" = yes; then\n  AC_MSG_RESULT([  aqua terminal (OSX): yes])\nelse\n  AC_MSG_RESULT([  aqua terminal (OSX): no])\nfi\n\nif test \"$ac_cv_lib_gd_gdImageJpeg\" = yes && \n   test \"$ac_cv_lib_gd_gdImagePng\" = yes && \n   test \"$ac_cv_lib_gd_gdImageGif\" = yes; then\n    if test \"$ac_cv_lib_gd_gdImageGifAnimBegin\" = yes; then\n      AC_MSG_RESULT([  libgd-based png, jpeg, and gif terminals: yes (with animated gif)])\n    else\n      AC_MSG_RESULT([  libgd-based png, jpeg, and gif terminals: yes (no animated gif)])\n    fi\nelse\n    AC_MSG_RESULT([  libgd-based png, jpeg, and gif terminals: no (requires libgd,  see config.log) ])\nfi\n\nif test \"$with_cairo\" = yes; then\n  AC_MSG_RESULT([  cairo-based pdf and png terminals: yes ])\nelse\n  AC_MSG_RESULT([  cairo-based terminals: no (requires cairo>=1.2, pango>=1.22, glib>=2.28)])\nfi\n\nif test \"$with_lua\" = yes; then\n  AC_MSG_RESULT([  lua/TikZ terminal: yes ])\nelse\n  AC_MSG_RESULT([  lua/TikZ terminal: no ])\nfi\n\nif test \"$enable_wxwidgets_ok\" = yes; then\n  if test \"$with_wx_multithreaded\" = yes; then\n    AC_MSG_RESULT([  wxt terminal: yes (multithreaded)])\n  else\n    AC_MSG_RESULT([  wxt terminal: yes ])\n  fi\nelse\n  AC_MSG_RESULT([  wxt terminal: no (requires C++, wxWidgets>2.6, cairo>0.9, pango>1.22)])\nfi\n\nif test \"$enable_qt_ok\" = yes; then\n  if test \"$QTVER\" = 4; then\n      AC_MSG_RESULT([  Qt terminal: yes (qt4)])\n  fi\n  if test \"$QTVER\" = 5; then\n      AC_MSG_RESULT([  Qt terminal: yes (qt5)])\n  fi\nelse\n  AC_MSG_RESULT([  Qt terminal: no (use --with-qt or --with-qt=qt4 to enable])\nfi\n\nAC_MSG_RESULT([])\nAC_MSG_RESULT([  Additional platform-specific or older terminals omitted by default:])\nAC_MSG_RESULT([   gpic, mif (FrameMaker 3), hp2623a, hp2648, imagen, kyocera ])\nAC_MSG_RESULT([   pm (makefile.os2), be (BeOS), svga (MSDOS/djgpp)])\nAC_MSG_RESULT([   windows (several options)])\n\nAC_MSG_RESULT([])\nAC_MSG_RESULT([gnuplot will be compiled with the following configurable features:])\nAC_MSG_RESULT([])\n\nif test \"$enable_mouse\" = yes; then\n  AC_MSG_RESULT([  Mouse support in interactive terminals: yes])\nelse\n  AC_MSG_RESULT([  Mouse support in interactive terminals: no])\nfi\n\nif test \"$enable_raise_console\" = yes; then\n  AC_MSG_RESULT([  Typing <space> in plot window raises console])\nelse\n  AC_MSG_RESULT([  Treat <space> in plot window like any other key: yes])\nfi\n\nif test \"$enable_objects\" = yes; then\n  AC_MSG_RESULT([  Placement of rectangles and other objects: yes ])\nelse\n  AC_MSG_RESULT([  Placement of rectangles and other objects: no])\nfi\n\nif test \"$with_readline\" = no; then\n  AC_MSG_RESULT([  No readline support (use --with-readline=gnu or --with-readline=builtin)])\nfi\n\n  if test \"$with_readline\" = bsd; then\n    if test -n \"$gp_tcap\"; then\n      AC_MSG_RESULT([  Readline library: BSD editline with $gp_tcap])\n    else\n      AC_MSG_RESULT([  Readline library: BSD editline library])\n    fi\n    AC_MSG_RESULT(  [           WARNING:     editline cannot handle multi-byte characters!])\n  else if test \"$with_readline\" != builtin; then\n    if test -n \"$gp_tcap\"; then\n      AC_MSG_RESULT([  Readline library: GNU readline library with $gp_tcap])\n    else\n      AC_MSG_RESULT([  Readline library: GNU readline library])\n    fi\n    if test \"$ac_cv_lib_readline_rl_forced_update_display\" = no; then\n      AC_MSG_RESULT([                    missing some features (OSX version?)])\n    fi\n  else\n    AC_MSG_RESULT([  Readline library: builtin minimal (use --with-readline=gnu for GNU readline)])\n  fi\nfi\n\nif test \"$enable_history_file\" = yes; then\n  AC_MSG_RESULT([  Command-line history file: yes])\nelse\n  AC_MSG_RESULT([  Command-line history file: no])\nfi\n\nif test \"$with_cwdrc\" = yes; then\n  AC_MSG_RESULT([  Check current directory for .gnuplot file: yes (warning: security risk)])\nelse\n  AC_MSG_RESULT([  Check current directory for .gnuplot file: no (use --with-cwdrc to enable)])\nfi\n\nif test \"$with_row_help\" = no; then\n  AC_MSG_RESULT([  Sort help/subtopic tables by column: yes])\nelse\n  AC_MSG_RESULT([  Sort help/subtopic tables by column: no (use --without-row-help to enable)])\nfi\n\nif test \"$have_libcerf\" = yes; then\n  AC_MSG_RESULT([  cerf() and other special functions from libcerf: yes])\nelse\n  AC_MSG_RESULT([  cerf() and other special functions: no (libcerf not found)])\nfi\n\nif test \"$have_external_functions\" = yes; then\n  AC_MSG_RESULT([  plugin support for loading external functions: yes ])\nelse\n  AC_MSG_RESULT([  plugin support for loading external functions: no ])\nfi\n\nif test \"$with_kpsexpand\" = yes; then\n  AC_MSG_RESULT([  Use TeX kpsexpand to search for fonts: yes])\nelse\n  AC_MSG_RESULT([  Use TeX kpsexpand to search for fonts: no (use --with-kpsexpand to enable)])\nfi\n\nif test \"$enable_h3d_gridbox\" = yes; then\n  AC_MSG_RESULT([  Hidden3d optimization (gridbox/quadtree/none): gridbox])\nelse\n  if test \"$enable_h3d_quadtree\" = no; then\n    AC_MSG_RESULT([  Hidden3d optimization (gridbox/quadtree/none): none])\n  else\n    AC_MSG_RESULT([  Hidden3d optimization (gridbox/quadtree/none): quadtree])\n  fi\nfi\n\nif test \"$enable_backwards_compatibility\" = yes; then\n  AC_MSG_RESULT([  Allow deprecated syntax: yes])\nelse\n  AC_MSG_RESULT([  Allow deprecated syntax: no (use --enable-backwards-compatibility)])\nfi\n\nif test \"$enable_stats\" != no; then\n  AC_MSG_RESULT([  Statistical summary of data (\"stats\" command): yes])\nelse\n  AC_MSG_RESULT([  Statistical summary of data (\"stats\" command): no (use --enable-stats to enable)])\nfi\n\n\nAC_MSG_RESULT([])\nAC_MSG_RESULT([gnuplot will install the following additional materials:])\nAC_MSG_RESULT([])\n\nif test \"$with_latex\" != no; then\n  AC_MSG_RESULT([  cfg file for epslatex terminal: yes])\n  if test \"$with_lua\" != no; then\n    AC_MSG_RESULT([  TeX *.sty for lua/tikz terminal: yes])\n  else\n    AC_MSG_RESULT([  TeX *.sty for lua/tikz terminal: no])\n  fi\n  AC_MSG_RESULT([  TeX files will be installed in $TEXDIR])\n  AC_MSG_RESULT([                               (use --with-texdir=DIR to change)])\nelse\n  AC_MSG_RESULT([  cfg file for epslatex terminal: no])\n  AC_MSG_RESULT([  TeX *.sty for lua/tikz terminal: no])\nfi\n\nAC_MSG_RESULT([  Help file: $GIHDIR/gnuplot.gih])\n\nAC_MSG_RESULT([  PostScript prologue files: $GIHDIR/PostScript/])\n\ndnl end config report\n\ndnl end configure.in\n",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/external.h": "/*\n * $Id: external.h,v 1.2 2016/05/08 13:19:44 markisch Exp $\n */\n/* GNUPLOT - external.h */\n\n/*[\n * Copyright 2002 Stephan Boettcher\n *\n * Gnuplot license:\n *\n * Permission to use, copy, and distribute this software and its\n * documentation for any purpose with or without fee is hereby granted,\n * provided that the above copyright notice appear in all copies and\n * that both that copyright notice and this permission notice appear\n * in supporting documentation.\n *\n * Permission to modify the software is granted, but not the right to\n * distribute the complete modified source code.  Modifications are to\n * be distributed as patches to the released version.  Permission to\n * distribute binaries produced by compiling modified sources is granted,\n * provided you\n *   1. distribute the corresponding source modifications from the\n *    released version in the form of a patch file along with the binaries,\n *   2. add special version identification to distinguish your version\n *    in addition to the base release version number,\n *   3. provide your name and address as the primary contact for the\n *    support of your modified version, and\n *   4. retain our contact information in regard to use of the base\n *    software.\n * Permission to distribute the released version of the source code along\n * with corresponding source modifications in the form of a patch file is\n * granted with same provisions 2 through 4 for binary distributions.\n *\n * This software is provided \"as is\" without express or implied warranty\n * to the extent permitted by applicable law.\n *\n * Alternative license:\n *\n * As an alternative to distributing code in this file under the gnuplot license,\n * you may instead comply with the terms below. In this case, redistribution and\n * use in source and binary forms, with or without modification, are permitted\n * provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.  Redistributions in binary\n * form must reproduce the above copyright notice, this list of conditions and\n * the following disclaimer in the documentation and/or other materials provided\n * with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n *\n]*/\n\n#ifndef GNUPLOT_EXTERNAL_H\n# define GNUPLOT_EXTERNAL_H\n\n/* #if... / #include / #define collection: */\n\n#include \"syscfg.h\"\n#include \"gp_types.h\"\n#include \"eval.h\"\n\n#ifdef HAVE_EXTERNAL_FUNCTIONS\n\n/* Prototypes from file \"external.c\" */\nvoid f_calle __PROTO((union argument *x));\nstruct at_type *external_at __PROTO((const char *));\nvoid external_free __PROTO((struct at_type *));\n\n#if defined(_WIN32)\n\n# include <windows.h>\n# include <stdio.h>\ntypedef void *gp_dll_t;\n\n# define DLL_PATHSEP \"\\\\\"\n# define DLL_EXT  \".dll\"\n# define DLL_OPEN(f) dll_open_w(f);\n# define DLL_CLOSE(dl) ((void)FreeLibrary((HINSTANCE)dl))\n# define DLL_SYM(dl, sym) ((void *)GetProcAddress((HINSTANCE)dl, (sym)))\n# define DLL_ERROR(dl) \"dynamic library error\"\n\n\n#elif defined(HAVE_DLFCN_H)\n\n# include <dlfcn.h>\ntypedef void *gp_dll_t;\n\n# define DLL_PATHSEP \"/\"\n# define DLL_EXT  \".so\"\n# define DLL_OPEN(f) dlopen((f), RTLD_NOW);\n# define DLL_CLOSE(dl) dlclose(dl)\n# define DLL_SYM(dl, sym) dlsym((dl),(sym))\n# define DLL_ERROR(dl) dlerror()\n\n\n#elif defined(HAVE_DL_H)\n\n# include <dl.h>\ntypedef shl_t gp_dll_t;\n\n# define DLL_PATHSEP \"/\"\n# define DLL_EXT  \".so\"\n# define DLL_OPEN(f) shl_load((f), BIND_IMMEDIATE, 0);\n# define DLL_CLOSE(dl) shl_unload(dl)\n__inline__ static DLL_SYM(gp_dll_t dl, const char *sym)\n{\n  void *a;\n  if (shl_findsym(&dl, sym, TYPE_PROCEDURE, &a))\n    return a;\n  else\n    return 0x0;\n}\n# define DLL_ERROR(dl) strerror(errno)\n\n\n#else /* No DLL */\n\n#  error \"HAVE_EXTERNAL_FUNCTIONS requires a DLL lib\"\n\n#endif /* No DLL */\n#endif /* HAVE_EXTERNAL_FUNCTIONS */\n\n#endif /* GNUPLOT_EXTERNAL_H */\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/FAQ.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/bldg.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/blutux.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/epslatex.dem",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/using.bin",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/lena-keypoints.bin",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/fontfile.dem",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/lena.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/sine.bin",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/fontfile_latex.dem",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/scatter2.bin",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/demo/demo.edf",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/term/PostScript/aglfn.txt",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/term/js/help.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/term/js/textzoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/term/js/grid.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/term/js/return.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/term/js/nextzoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/term/js/previouszoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/mouse.c",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/os2/ptrcross.ptr",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/os2/rotating.ptr",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/os2/scaling.ptr",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/os2/gnuplot.ico",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/win/scaling.cur",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/win/wgnuplot-ja.mnu",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/win/README.win-ja",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/win/grpicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/win/texticon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/win/rotating.cur",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/wxterminal/bitmaps/png/help.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/wxterminal/bitmaps/png/grid.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/wxterminal/bitmaps/png/autoscale.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/wxterminal/bitmaps/png/clipboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/wxterminal/bitmaps/png/config.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/wxterminal/bitmaps/png/nextzoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/wxterminal/bitmaps/png/previouszoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/wxterminal/bitmaps/png/replot.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/document-export.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/view-refresh.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/application-pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/image-x-eps.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/edit-paste.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/grid.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/document-print.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/zoom-in.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/image-bmp.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/configure.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/zoom-original.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/src/qtterminal/images/zoom-out.png",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/win/README-Windows-ja.txt",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/win/Copyright-ja.txt",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/man/gnuplot-ja.1",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/docs/figure_missing.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/docs/README.ja",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/docs/term-ja.diff",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/docs/gnuplot-ja.doc",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/docs/faq-ja.tex",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/docs/titlepag.ipf",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/docs/gnuplot.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gnuplot-5.2.8-g4updayqz6vci2yuisj3yiraodskq5ky/spack-src/docs/psdoc/ps_guide.ps"
    ],
    "total_files": 716
}