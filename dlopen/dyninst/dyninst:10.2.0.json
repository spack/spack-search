{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/common/src/serialize-xml.C": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n * \n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n * \n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n#include \"common/src/serialize.h\"\n\n#if !defined(SERIALIZATION_DISABLED)\n\n#if !defined(os_windows)\n#include \"common/src/pathName.h\"\n#include <dlfcn.h>\n#if defined (cap_have_libxml)\n//libxml2 functions\nvoid *hXML;\n#endif\n#else\n#include \"windows.h\"\n#if defined (cap_have_libxml)\n#include <libxml/xmlversion.h>\n#undef LIBXML_ICONV_ENABLED\nHINSTANCE hXML;\n#endif\n#endif\n\n#if defined (cap_have_libxml)\n#if defined (os_linux)\n//  gcc is complaining about the constness of the library-provided\n//  typecast (BAD_CAST) (which is defined in xmlstring.h), so we make our own\n#define XMLCHAR_CAST (const xmlChar *)\n#else\n#define XMLCHAR_CAST BAD_CAST\n#endif\n\n#else\n#define XMLCHAR_CAST (const char *)\n#endif\n\n#if 0\nSerDesXML &SerializerXML::getSD_xml()\n{\n   SerDes &sd = getSD();\n   SerDesXML *sdxml = dynamic_cast<SerDesXML *> (&sd);\n   assert(sdxml);\n   return *sdxml;\n}\n#endif\n\n\n#if 0\nbool end_xml_element(SerializerBase *, const char *);\n#endif\n\n\n\n// DLLEXPORT SerDesXML(xmlTextWriterPtr w, iomode_t mode)  : SerDes(mode), writer(w) { }\n// DLLEXPORT static xmlTextWriterPtr init(std::string fname, iomode_t mode, bool verbose);\n\n#if defined (cap_have_libxml)\nxmlTextWriterPtr(*my_xmlNewTextWriterFilename)(const char *,int) = NULL;\n\nint (*my_xmlTextWriterStartDocument)(xmlTextWriterPtr, \n      const char *, const char *, const char * ) = NULL;\n\nint (*my_xmlTextWriterStartElement)(xmlTextWriterPtr, \n      const xmlChar *) = NULL;\n\nint (*my_xmlTextWriterWriteFormatElement)(xmlTextWriterPtr,\n      const xmlChar *,const char *,...) = NULL;\n\nint (*my_xmlTextWriterEndDocument)(xmlTextWriterPtr) = NULL;\n\nvoid (*my_xmlFreeTextWriter)(xmlTextWriterPtr) = NULL;\n\nint (*my_xmlTextWriterWriteFormatAttribute)(xmlTextWriterPtr, \n      const xmlChar *,const char *,...) = NULL;\n\nint (*my_xmlTextWriterEndElement)(xmlTextWriterPtr) = NULL;\n\nxmlTextWriterPtr SerDesXML::init(std::string fname, iomode_t /*mode*/, bool /*verbose*/) \n{\n#if defined(_MSC_VER)\n   hXML = LoadLibrary(LPCSTR(\"../../../i386-unknown-nt4.0/lib/libxml2.dll\"));\n   if (hXML == NULL)\n   {\n      char buf[1000];\n      DWORD result = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, NULL, GetLastError(),\n        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n        buf, 1000, NULL);\n      SER_ERR(buf);\n   }\n\n    my_xmlNewTextWriterFilename = \n       (xmlTextWriterPtr (*)(const char *,int)) GetProcAddress(hXML,\"xmlNewTextWriterFilename\");\n    \n    my_xmlTextWriterStartDocument = \n       (int (*)(xmlTextWriterPtr, const char *, const char *, const char * ))GetProcAddress(hXML,\"xmlTextWriterStartDocument\");\n    \n    my_xmlTextWriterStartElement = \n       (int (*)(xmlTextWriterPtr, const xmlChar *))GetProcAddress(hXML,\"xmlTextWriterStartElement\");\n\n    my_xmlTextWriterWriteFormatElement = \n       (int (*)(xmlTextWriterPtr,const xmlChar *,const char *,...))GetProcAddress(hXML,\"xmlTextWriterWriteFormatElement\");\n\n    my_xmlTextWriterEndDocument = \n       (int (*)(xmlTextWriterPtr))GetProcAddress(hXML,\"xmlTextWriterEndDocument\");\n\n    my_xmlFreeTextWriter = \n       (void (*)(xmlTextWriterPtr))GetProcAddress(hXML,\"xmlFreeTextWriter\");\n\n    my_xmlTextWriterWriteFormatAttribute = \n       (int (*)(xmlTextWriterPtr, const xmlChar *,const char *,...))GetProcAddress(hXML,\"xmlTextWriterWriteFormatAttribute\");\n    \n    my_xmlTextWriterEndElement = \n       (int (*)(xmlTextWriterPtr))GetProcAddress(hXML,\"xmlTextWriterEndElement\");\n\n#else\n\n    hXML = dlopen(\"libxml2.so\", RTLD_LAZY);\n\n    if (hXML == NULL)\n    {\n      SER_ERR(\"Unable to find libxml2\");\n      return NULL;\n    }\n\n    my_xmlNewTextWriterFilename = (xmlTextWriterPtr(*)(const char *,int))dlsym(hXML,\"xmlNewTextWriterFilename\");\n    my_xmlTextWriterStartDocument = (int(*)(xmlTextWriterPtr, const char *, const char *, const char * ))dlsym(hXML,\"xmlTextWriterStartDocument\");\n    my_xmlTextWriterStartElement = (int(*)(xmlTextWriterPtr, const xmlChar *))dlsym(hXML,\"xmlTextWriterStartElement\");\n    my_xmlTextWriterWriteFormatElement = (int(*)(xmlTextWriterPtr,const xmlChar *,const char *,...))dlsym(hXML,\"xmlTextWriterWriteFormatElement\");\n    my_xmlTextWriterEndDocument = (int(*)(xmlTextWriterPtr))dlsym(hXML,\"xmlTextWriterEndDocument\");\n    my_xmlFreeTextWriter = (void(*)(xmlTextWriterPtr))dlsym(hXML,\"xmlFreeTextWriter\");\n    my_xmlTextWriterWriteFormatAttribute = (int(*)(xmlTextWriterPtr, const xmlChar *,const char *,...))dlsym(hXML,\"xmlTextWriterWriteFormatAttribute\");\n    my_xmlTextWriterEndElement = (int(*)(xmlTextWriterPtr))dlsym(hXML,\"xmlTextWriterEndElement\");\n\n#endif\n\n    /* Create a new XmlWriter for DOM */\n\n    xmlTextWriterPtr writer = my_xmlNewTextWriterFilename(fname.c_str(), 0);\n\n    if (writer == NULL) \n    {\n        SER_ERR(\"testXmlwriterDoc: Error creating the xml writer\");\n      return NULL;\n    }\n\n    int rc = my_xmlTextWriterStartDocument(writer, NULL, \"ISO-8859-1\", NULL);\n\n    if (rc < 0) \n    {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartDocument\");\n    return NULL;\n    }\n\n    return writer;\n}\n\n#endif // defined (cap_have_libxml)\n\n\nnamespace Dyninst {\n#if defined (cap_have_libxml)\n//int (*my_xmlTextWriterStartElement)(xmlTextWriterPtr, \n//      const xmlChar *) = NULL;\nbool start_xml_elem(void *writer, const char *tag)\n{\n    int rc = my_xmlTextWriterStartElement((xmlTextWriterPtr) writer, XMLCHAR_CAST tag);\n    return (rc >= 0);\n}\n//    my_xmlTextWriterEndElement(writer);\n\nbool end_xml_elem(void *writer)\n{\n    int rc = my_xmlTextWriterEndElement((xmlTextWriterPtr) writer);\n    return (rc >= 0);\n}\n\nbool write_xml_elem(void *writer, const char *tag, const char *fmt, ...)\n{\n   va_list ap;\n   va_start(ap, fmt);\n\n   int rc = my_xmlTextWriterWriteFormatElement((xmlTextWriterPtr) writer, XMLCHAR_CAST tag, fmt, ap);\n\n   if (rc < 0) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n   va_end(ap);\n\n   return (rc >= 0);\n}\n#else\n\nbool start_xml_elem(void * /*writer*/, const char * /*xmlChar*/)\n{\n   fprintf(stderr, \"%s[%d]:  xml output is disabled\\n\", FILE__, __LINE__);\n   return false;\n}\n\nbool end_xml_elem(void * /*writer*/)\n{\n   fprintf(stderr, \"%s[%d]:  xml output is disabled\\n\", FILE__, __LINE__);\n   return false;\n}\n\nbool write_xml_elem(void * /*writer*/, const char * /*tag*/, const char * /*fmt*/, ...)\n{\n   fprintf(stderr, \"%s[%d]:  xml output is disabled\\n\", FILE__, __LINE__);\n   return false;\n}\n#endif\n}\n\nnamespace Dyninst {\nbool start_xml_elem(SerDesXML &s, const char *tag)\n{\n\treturn start_xml_elem(s.writer, tag);\n}\nbool end_xml_elem(SerDesXML &s)\n{\n\treturn end_xml_elem(s.writer);\n}\n}\n\nnamespace Dyninst {\nbool ifxml_start_element(SerializerBase *sb, const char *tag)\n{\n#if 0\n   SerializerXML *sxml = dynamic_cast<SerializerXML *>(sb);\n   if (!sxml) \n   {\n      return false;\n   }\n\n   if (sxml->iomode() == sd_deserialize) \n   {\n      fprintf(stderr, \"%s[%d]:  ERROR:  request to deserialize xml\\n\", FILE__, __LINE__);\n      return false;\n   }\n#endif\n   if (!sb->isXML())\n\t   return false;\n   if (!sb->isOutput())\n   {\n      fprintf(stderr, \"%s[%d]:  ERROR:  request to deserialize xml\\n\", FILE__, __LINE__);\n      return false;\n   }\n\n   SerDes &sd = sb->getSD();\n   SerDesXML *sdxml = dynamic_cast<SerDesXML *>(&sd);\n   assert(sdxml);\n   ::start_xml_elem(sdxml->writer, tag);\n\n#if 0\n   sxml->getSD_xml().start_element(tag);\n#endif\n\n   return true;\n}\n}\n\nnamespace Dyninst {\nCOMMON_EXPORT bool ifxml_end_element(SerializerBase *sb, const char * /*tag*/)\n{\n#if 0\n   SerializerXML *sxml = dynamic_cast<SerializerXML *>(sb);\n\n   if (!sxml) \n   {\n      return false;\n   }\n\n   if (sxml->iomode() == sd_deserialize) \n   {\n      fprintf(stderr, \"%s[%d]:  ERROR:  request to deserialize xml\\n\", FILE__, __LINE__);\n      return false;\n   }\n#endif\n   if (!sb->isXML())\n\t   return false;\n   if (!sb->isOutput())\n   {\n      fprintf(stderr, \"%s[%d]:  ERROR:  request to deserialize xml\\n\", FILE__, __LINE__);\n      return false;\n   }\n\n   SerDes &sd = sb->getSD();\n   SerDesXML *sdxml = dynamic_cast<SerDesXML *>(&sd);\n   assert(sdxml);\n   ::end_xml_elem(sdxml->writer);\n   \n#if 0\n   sxml->getSD_xml().end_element();\n#endif\n\n   return true;\n}\n}\n\nbool SerializerXML::start_xml_element(SerializerBase *sb, const char *tag)\n{\n\tSerializerXML *sxml = dynamic_cast<SerializerXML *>(sb);\n\n\tif (!sxml)\n\t{\n\t\tfprintf(stderr, \"%s[%d]:  FIXME:  called xml function with non xml serializer\\n\",\n\t\t\t\tFILE__, __LINE__);\n\t\treturn false;\n\t}\n\n\tSerDesXML sdxml = sxml->getSD_xml();\n\tstart_xml_elem(sdxml, tag);\n\treturn true;\n\n}\n#if 0\nbool SerializerXML::start_xml_element(SerializerBase *sb, const char *tag)\n{\n\tSerializerXML *sxml = dynamic_cast<SerializerXML *>(sb);\n\n\tif (!sxml) \n\t{\n      fprintf(stderr, \"%s[%d]:  FIXME:  called xml function with non xml serializer\\n\", \n            FILE__, __LINE__);\n      return false;\n   }\n\n   SerDesXML sdxml = sxml->getSD_xml();\n   start_xml_elem(sdxml.writer, tag);\n\n#if 0\n   sdxml.start_element(tag); \n#endif\n\n   return true;\n}\n#endif\n\nSerDesXML &SerializerXML::getSD_xml()\n{\n\tSerializerBase *sb = this;\n\tSerDes &sd = sb->getSD();\n\tSerDesXML *sdxml = dynamic_cast<SerDesXML *> (&sd);\n\tassert(sdxml);\n\treturn *sdxml;\n}\n\nbool SerializerXML::end_xml_element(SerializerBase * sb, const char  * /*tag*/)\n{\n   SerializerXML *sxml = dynamic_cast<SerializerXML *>(sb);\n\n   if (!sxml) \n   {\n      fprintf(stderr, \"%s[%d]:  FIXME:  called xml function with non xml serializer\\n\", \n            FILE__, __LINE__);\n      return false;\n   }\n\n   SerDesXML sdxml = sxml->getSD_xml();\n   end_xml_elem(sdxml);\n\n#if 0\n   sdxml.end_element(); \n#endif\n   return true;\n}\n\nSerDesXML::~SerDesXML()\n{\n#if defined (cap_have_libxml)\n    my_xmlFreeTextWriter(writer);\n#endif\n\n}\n\nvoid SerDesXML::vector_start(unsigned long &/*size*/, const char *tag) DECLTHROW(SerializerError)\n{\n   bool rc = ::start_xml_elem(writer, tag);\n\n   if (!rc)\n   {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterStartElement(writer, XMLCHAR_CAST tag);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::vector_end()\n{\n   bool rc = ::end_xml_elem(writer);\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterEndElement(writer);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::multimap_start(unsigned long &/*size*/, const char *tag) DECLTHROW(SerializerError)\n{\n   bool rc = ::start_xml_elem(writer, tag);\n\n   if (!rc)\n   {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n#if 0\n    int rc = my_xmlTextWriterStartElement(writer, XMLCHAR_CAST tag);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::multimap_end()\n{\n   bool rc = ::end_xml_elem(writer);\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterEndElement(writer);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::pair_start(const char *tag) DECLTHROW(SerializerError)\n{\n   bool rc = ::start_xml_elem(writer, tag);\n\n   if (!rc)\n   {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n#if 0\n    int rc = my_xmlTextWriterStartElement(writer, XMLCHAR_CAST tag);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::pair_end()\n{\n   bool rc = ::end_xml_elem(writer);\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterEndElement(writer);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\nvoid SerDesXML::hash_map_start(unsigned long &/*size*/, const char *tag) DECLTHROW(SerializerError)\n{\n   bool rc = ::start_xml_elem(writer,  tag);\n\n   if (!rc)\n   {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n#if 0\n    int rc = my_xmlTextWriterStartElement(writer, XMLCHAR_CAST tag);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::hash_map_end()\n{\n   bool rc = ::end_xml_elem(writer);\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterEndElement(writer);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::annotation_start(Dyninst::AnnotationClassID &a_id, void *& parent_id, sparse_or_dense_anno_t &sod, const char * /*id*/, const char * tag) \n{\n   bool rc = ::start_xml_elem(writer, tag);\n\n   if (!rc)\n   {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n   translate(a_id, \"annotationID\");\n   translate((Address &)parent_id, \"annotatableID\");\n   translate((int &) sod, \"SparseOrDense\");\n   //char sodstr[12];\n   //sprintf(sodstr, \"%s\", sod == sparse ? \"sparse\" : \"dense\");\n   //const char *sodstr = (sod == sparse) ? \"sparse\" : \"dense\";\n   //translate((const char *&)const_cast<const char *>(sodstr), 12, \"SparseOrDense\");\n}\n\nvoid SerDesXML::annotation_end()\n{\n   bool rc = ::end_xml_elem(writer);\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n}\n\nvoid SerDesXML::annotation_container_start(void *& id) \n{\n   bool rc = ::start_xml_elem(writer, \"AnnotationContainer\");\n\n   if (!rc)\n   {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n   translate((Address &)id, \"containerID\");\n}\n\nvoid SerDesXML::annotation_container_end()\n{\n   bool rc = ::end_xml_elem(writer);\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n}\n\nvoid SerDesXML::annotation_container_item_start(void *& id) \n{\n   bool rc = ::start_xml_elem(writer, \"AnnotationContainerItem\");\n\n   if (!rc)\n   {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n   translate((Address &)id, \"containerID\");\n}\n\nvoid SerDesXML::annotation_container_item_end()\n{\n   bool rc = ::end_xml_elem(writer);\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n}\nvoid SerDesXML::annotation_list_start(Address &/*id*/, unsigned long &/*nelem*/, const char * tag) \n{\n   bool rc = ::start_xml_elem(writer, tag);\n\n   if (!rc)\n   {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n}\n\nvoid SerDesXML::annotation_list_end()\n{\n   bool rc = ::end_xml_elem(writer);\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n}\nvoid SerDesXML::translate(bool &param, const char *tag)\n{       \n   bool rc = write_xml_elem(writer, tag,\n         \"%s\", param ? \"true\" : \"false\");\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                \"%s\", param ? \"true\" : \"false\");\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n    \n}     \n\nvoid SerDesXML::translate(char &param, const char *tag)\n{       \n   bool rc = write_xml_elem(writer, tag,\n         \"%c\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                \"%c\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n    \n}     \n\nvoid SerDesXML::translate(int &param, const char *tag)\n{   \n   bool rc = write_xml_elem(writer, tag,\n         \"%d\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n    \n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%d\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::translate(long &param, const char *tag)\n{   \n   bool rc = write_xml_elem(writer, tag,\n         \"%l\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n    \n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%l\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::translate(short &param, const char *tag)\n{   \n   bool rc = write_xml_elem(writer, tag,\n         \"%h\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n    \n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%h\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::translate(unsigned short &param, const char *tag)\n{   \n   bool rc = write_xml_elem(writer, tag,\n         \"%h\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n    \n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%h\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\nvoid SerDesXML::translate(unsigned int &param, const char *tag)\n{   \n  translate( param, tag);\n}\n\n#if 0\nvoid SerDesXML::translate(OFFSET &param, const char *tag)\n{\n\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%lx\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n}\n#endif\n\nvoid SerDesXML::translate(float &param, const char *tag)\n{\n   bool rc = write_xml_elem(writer, tag,\n         \"%e\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%e\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::translate(double &param, const char *tag)\n{\n   bool rc = write_xml_elem(writer, tag,\n         \"%g\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%g\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::translate(Address &param, const char *tag)\n{\n   bool rc = write_xml_elem(writer, tag,\n         \"%p\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%p\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::translate(void * &param, const char *tag)\n{\n   bool rc = write_xml_elem(writer, tag,\n         \"%p\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%p\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\nvoid SerDesXML::translate(const char * &param, int /*bufsize*/, const char *tag)\n{\n   bool rc = write_xml_elem(writer, tag,\n         \"%s\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%s\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::translate(char * &param, int /*bufsize*/, const char *tag)\n{\n   bool rc = write_xml_elem(writer, tag,\n         \"%s\", param);\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%s\", param);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\nvoid SerDesXML::translate(std::string &param, const char *tag)\n{\n   assert(tag);\n   assert(param.c_str());\n\n   bool rc = write_xml_elem(writer, tag,\n         \"%s\", param.c_str());\n\n   if (!rc) \n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%s\", param.c_str());\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\n#if 0\nvoid SerDesXML::translate(pdstring &param, const char *tag)\n{\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%s\", param.c_str());\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n}\n#endif\n\nvoid SerDesXML::translate(std::vector<std::string> &param, const char *tag,\n                          const char *elem_tag)\n{\n   bool rc = ::start_xml_elem(writer, tag);\n   if (!rc)\n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n\n#if 0\n    int rc = my_xmlTextWriterStartElement(writer, XMLCHAR_CAST tag) ;\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n\n    for (unsigned int i = 0; i < param.size(); ++i) \n      translate(param[i], elem_tag);\n    \n\n   rc = ::end_xml_elem(writer);\n   if (!rc)\n   {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterEndElement\");\n   }\n\n#if 0\n    rc = my_xmlTextWriterEndElement(writer);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n#endif\n}\n\n#if 0\nvoid SerDesXML::start_element(const char *tag)\n{\n   int rc = my_xmlTextWriterStartElement(writer, XMLCHAR_CAST tag) ;\n   if (rc < 0) {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n}\n\nvoid SerDesXML::end_element()\n{\n   int rc = my_xmlTextWriterEndElement(writer);\n   if (rc < 0) {\n      SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n   }\n}\n\nvoid SerDesXML::xml_value(const char *s, const char *tag)\n{\n    int rc = my_xmlTextWriterWriteFormatElement(writer, XMLCHAR_CAST tag,\n                                                 \"%s\", s);\n    if (rc < 0) {\n        SER_ERR(\"testXmlwriterDoc: Error at my_xmlTextWriterStartElement\");\n    }\n}\n#endif\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/proccontrol/dumplibpthread.asm": "\n/usr/lib64/libpthread-2.20.so:     file format elf64-littleaarch64\n\n\nDisassembly of section .init:\n\n0000000000004f28 <_init>:\n    4f28:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    4f2c:\t910003fd \tmov\tx29, sp\n    4f30:\t940001f8 \tbl\t5710 <__pthread_initialize_minimal>\n    4f34:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n    4f38:\td65f03c0 \tret\n\nDisassembly of section .plt:\n\n0000000000004f40 <memcpy@plt-0x20>:\n    4f40:\ta9bf7bf0 \tstp\tx16, x30, [sp,#-16]!\n    4f44:\tf0000150 \tadrp\tx16, 2f000 <__FRAME_END__+0x18e30>\n    4f48:\tf947fe11 \tldr\tx17, [x16,#4088]\n    4f4c:\t913fe210 \tadd\tx16, x16, #0xff8\n    4f50:\td61f0220 \tbr\tx17\n    4f54:\td503201f \tnop\n    4f58:\td503201f \tnop\n    4f5c:\td503201f \tnop\n\n0000000000004f60 <memcpy@plt>:\n    4f60:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4f64:\tf9400211 \tldr\tx17, [x16]\n    4f68:\t91000210 \tadd\tx16, x16, #0x0\n    4f6c:\td61f0220 \tbr\tx17\n\n0000000000004f70 <_exit@plt>:\n    4f70:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4f74:\tf9400611 \tldr\tx17, [x16,#8]\n    4f78:\t91002210 \tadd\tx16, x16, #0x8\n    4f7c:\td61f0220 \tbr\tx17\n\n0000000000004f80 <strlen@plt>:\n    4f80:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4f84:\tf9400a11 \tldr\tx17, [x16,#16]\n    4f88:\t91004210 \tadd\tx16, x16, #0x10\n    4f8c:\td61f0220 \tbr\tx17\n\n0000000000004f90 <exit@plt>:\n    4f90:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4f94:\tf9400e11 \tldr\tx17, [x16,#24]\n    4f98:\t91006210 \tadd\tx16, x16, #0x18\n    4f9c:\td61f0220 \tbr\tx17\n\n0000000000004fa0 <_setjmp@plt>:\n    4fa0:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4fa4:\tf9401211 \tldr\tx17, [x16,#32]\n    4fa8:\t91008210 \tadd\tx16, x16, #0x20\n    4fac:\td61f0220 \tbr\tx17\n\n0000000000004fb0 <__getrlimit@plt>:\n    4fb0:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4fb4:\tf9401611 \tldr\tx17, [x16,#40]\n    4fb8:\t9100a210 \tadd\tx16, x16, #0x28\n    4fbc:\td61f0220 \tbr\tx17\n\n0000000000004fc0 <__gettimeofday@plt>:\n    4fc0:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4fc4:\tf9401a11 \tldr\tx17, [x16,#48]\n    4fc8:\t9100c210 \tadd\tx16, x16, #0x30\n    4fcc:\td61f0220 \tbr\tx17\n\n0000000000004fd0 <twalk@plt>:\n    4fd0:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4fd4:\tf9401e11 \tldr\tx17, [x16,#56]\n    4fd8:\t9100e210 \tadd\tx16, x16, #0x38\n    4fdc:\td61f0220 \tbr\tx17\n\n0000000000004fe0 <__libc_dlclose@plt>:\n    4fe0:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4fe4:\tf9402211 \tldr\tx17, [x16,#64]\n    4fe8:\t91010210 \tadd\tx16, x16, #0x40\n    4fec:\td61f0220 \tbr\tx17\n\n0000000000004ff0 <__libc_fatal@plt>:\n    4ff0:\t90000170 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    4ff4:\tf9402611 \tldr\tx17, [x16,#72]\n    4ff8:\t91012210 \tadd\tx16, x16, #0x48\n    4ffc:\td61f0220 \tbr\tx17\n\n0000000000005000 <__getpagesize@plt>:\n    5000:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5004:\tf9402a11 \tldr\tx17, [x16,#80]\n    5008:\t91014210 \tadd\tx16, x16, #0x50\n    500c:\td61f0220 \tbr\tx17\n\n0000000000005010 <__cxa_finalize@plt>:\n    5010:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5014:\tf9402e11 \tldr\tx17, [x16,#88]\n    5018:\t91016210 \tadd\tx16, x16, #0x58\n    501c:\td61f0220 \tbr\tx17\n\n0000000000005020 <sprintf@plt>:\n    5020:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5024:\tf9403211 \tldr\tx17, [x16,#96]\n    5028:\t91018210 \tadd\tx16, x16, #0x60\n    502c:\td61f0220 \tbr\tx17\n\n0000000000005030 <getuid@plt>:\n    5030:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5034:\tf9403611 \tldr\tx17, [x16,#104]\n    5038:\t9101a210 \tadd\tx16, x16, #0x68\n    503c:\td61f0220 \tbr\tx17\n\n0000000000005040 <tfind@plt>:\n    5040:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5044:\tf9403a11 \tldr\tx17, [x16,#112]\n    5048:\t9101c210 \tadd\tx16, x16, #0x70\n    504c:\td61f0220 \tbr\tx17\n\n0000000000005050 <fclose@plt>:\n    5050:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5054:\tf9403e11 \tldr\tx17, [x16,#120]\n    5058:\t9101e210 \tadd\tx16, x16, #0x78\n    505c:\td61f0220 \tbr\tx17\n\n0000000000005060 <__libc_system@plt>:\n    5060:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5064:\tf9404211 \tldr\tx17, [x16,#128]\n    5068:\t91020210 \tadd\tx16, x16, #0x80\n    506c:\td61f0220 \tbr\tx17\n\n0000000000005070 <fopen@plt>:\n    5070:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5074:\tf9404611 \tldr\tx17, [x16,#136]\n    5078:\t91022210 \tadd\tx16, x16, #0x88\n    507c:\td61f0220 \tbr\tx17\n\n0000000000005080 <malloc@plt>:\n    5080:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5084:\tf9404a11 \tldr\tx17, [x16,#144]\n    5088:\t91024210 \tadd\tx16, x16, #0x90\n    508c:\td61f0220 \tbr\tx17\n\n0000000000005090 <memset@plt>:\n    5090:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5094:\tf9404e11 \tldr\tx17, [x16,#152]\n    5098:\t91026210 \tadd\tx16, x16, #0x98\n    509c:\td61f0220 \tbr\tx17\n\n00000000000050a0 <__libc_fork@plt>:\n    50a0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    50a4:\tf9405211 \tldr\tx17, [x16,#160]\n    50a8:\t91028210 \tadd\tx16, x16, #0xa0\n    50ac:\td61f0220 \tbr\tx17\n\n00000000000050b0 <__endmntent@plt>:\n    50b0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    50b4:\tf9405611 \tldr\tx17, [x16,#168]\n    50b8:\t9102a210 \tadd\tx16, x16, #0xa8\n    50bc:\td61f0220 \tbr\tx17\n\n00000000000050c0 <tsearch@plt>:\n    50c0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    50c4:\tf9405a11 \tldr\tx17, [x16,#176]\n    50c8:\t9102c210 \tadd\tx16, x16, #0xb0\n    50cc:\td61f0220 \tbr\tx17\n\n00000000000050d0 <sscanf@plt>:\n    50d0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    50d4:\tf9405e11 \tldr\tx17, [x16,#184]\n    50d8:\t9102e210 \tadd\tx16, x16, #0xb8\n    50dc:\td61f0220 \tbr\tx17\n\n00000000000050e0 <_dl_deallocate_tls@plt>:\n    50e0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    50e4:\tf9406211 \tldr\tx17, [x16,#192]\n    50e8:\t91030210 \tadd\tx16, x16, #0xc0\n    50ec:\td61f0220 \tbr\tx17\n\n00000000000050f0 <calloc@plt>:\n    50f0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    50f4:\tf9406611 \tldr\tx17, [x16,#200]\n    50f8:\t91032210 \tadd\tx16, x16, #0xc8\n    50fc:\td61f0220 \tbr\tx17\n\n0000000000005100 <__call_tls_dtors@plt>:\n    5100:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5104:\tf9406a11 \tldr\tx17, [x16,#208]\n    5108:\t91034210 \tadd\tx16, x16, #0xd0\n    510c:\td61f0220 \tbr\tx17\n\n0000000000005110 <realloc@plt>:\n    5110:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5114:\tf9406e11 \tldr\tx17, [x16,#216]\n    5118:\t91036210 \tadd\tx16, x16, #0xd8\n    511c:\td61f0220 \tbr\tx17\n\n0000000000005120 <__libc_thread_freeres@plt>:\n    5120:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5124:\tf9407211 \tldr\tx17, [x16,#224]\n    5128:\t91038210 \tadd\tx16, x16, #0xe0\n    512c:\td61f0220 \tbr\tx17\n\n0000000000005130 <__sched_getparam@plt>:\n    5130:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5134:\tf9407611 \tldr\tx17, [x16,#232]\n    5138:\t9103a210 \tadd\tx16, x16, #0xe8\n    513c:\td61f0220 \tbr\tx17\n\n0000000000005140 <sched_get_priority_max@plt>:\n    5140:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5144:\tf9407a11 \tldr\tx17, [x16,#240]\n    5148:\t9103c210 \tadd\tx16, x16, #0xf0\n    514c:\td61f0220 \tbr\tx17\n\n0000000000005150 <__statfs@plt>:\n    5150:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5154:\tf9407e11 \tldr\tx17, [x16,#248]\n    5158:\t9103e210 \tadd\tx16, x16, #0xf8\n    515c:\td61f0220 \tbr\tx17\n\n0000000000005160 <tdelete@plt>:\n    5160:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5164:\tf9408211 \tldr\tx17, [x16,#256]\n    5168:\t91040210 \tadd\tx16, x16, #0x100\n    516c:\td61f0220 \tbr\tx17\n\n0000000000005170 <abort@plt>:\n    5170:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5174:\tf9408611 \tldr\tx17, [x16,#264]\n    5178:\t91042210 \tadd\tx16, x16, #0x108\n    517c:\td61f0220 \tbr\tx17\n\n0000000000005180 <__sched_get_priority_min@plt>:\n    5180:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5184:\tf9408a11 \tldr\tx17, [x16,#272]\n    5188:\t91044210 \tadd\tx16, x16, #0x110\n    518c:\td61f0220 \tbr\tx17\n\n0000000000005190 <__libc_current_sigrtmax_private@plt>:\n    5190:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5194:\tf9408e11 \tldr\tx17, [x16,#280]\n    5198:\t91046210 \tadd\tx16, x16, #0x118\n    519c:\td61f0220 \tbr\tx17\n\n00000000000051a0 <sched_setparam@plt>:\n    51a0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    51a4:\tf9409211 \tldr\tx17, [x16,#288]\n    51a8:\t91048210 \tadd\tx16, x16, #0x120\n    51ac:\td61f0220 \tbr\tx17\n\n00000000000051b0 <__libc_dlopen_mode@plt>:\n    51b0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    51b4:\tf9409611 \tldr\tx17, [x16,#296]\n    51b8:\t9104a210 \tadd\tx16, x16, #0x128\n    51bc:\td61f0220 \tbr\tx17\n\n00000000000051c0 <strcmp@plt>:\n    51c0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    51c4:\tf9409a11 \tldr\tx17, [x16,#304]\n    51c8:\t9104c210 \tadd\tx16, x16, #0x130\n    51cc:\td61f0220 \tbr\tx17\n\n00000000000051d0 <mmap@plt>:\n    51d0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    51d4:\tf9409e11 \tldr\tx17, [x16,#312]\n    51d8:\t9104e210 \tadd\tx16, x16, #0x138\n    51dc:\td61f0220 \tbr\tx17\n\n00000000000051e0 <_dl_make_stack_executable@plt>:\n    51e0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    51e4:\tf940a211 \tldr\tx17, [x16,#320]\n    51e8:\t91050210 \tadd\tx16, x16, #0x140\n    51ec:\td61f0220 \tbr\tx17\n\n00000000000051f0 <sched_yield@plt>:\n    51f0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    51f4:\tf940a611 \tldr\tx17, [x16,#328]\n    51f8:\t91052210 \tadd\tx16, x16, #0x148\n    51fc:\td61f0220 \tbr\tx17\n\n0000000000005200 <__libc_pthread_init@plt>:\n    5200:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5204:\tf940aa11 \tldr\tx17, [x16,#336]\n    5208:\t91054210 \tadd\tx16, x16, #0x150\n    520c:\td61f0220 \tbr\tx17\n\n0000000000005210 <__ctype_init@plt>:\n    5210:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5214:\tf940ae11 \tldr\tx17, [x16,#344]\n    5218:\t91056210 \tadd\tx16, x16, #0x158\n    521c:\td61f0220 \tbr\tx17\n\n0000000000005220 <free@plt>:\n    5220:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5224:\tf940b211 \tldr\tx17, [x16,#352]\n    5228:\t91058210 \tadd\tx16, x16, #0x160\n    522c:\td61f0220 \tbr\tx17\n\n0000000000005230 <sched_get_priority_min@plt>:\n    5230:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5234:\tf940b611 \tldr\tx17, [x16,#360]\n    5238:\t9105a210 \tadd\tx16, x16, #0x168\n    523c:\td61f0220 \tbr\tx17\n\n0000000000005240 <__setmntent@plt>:\n    5240:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5244:\tf940ba11 \tldr\tx17, [x16,#368]\n    5248:\t9105c210 \tadd\tx16, x16, #0x170\n    524c:\td61f0220 \tbr\tx17\n\n0000000000005250 <__getmntent_r@plt>:\n    5250:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5254:\tf940be11 \tldr\tx17, [x16,#376]\n    5258:\t9105e210 \tadd\tx16, x16, #0x178\n    525c:\td61f0220 \tbr\tx17\n\n0000000000005260 <mempcpy@plt>:\n    5260:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5264:\tf940c211 \tldr\tx17, [x16,#384]\n    5268:\t91060210 \tadd\tx16, x16, #0x180\n    526c:\td61f0220 \tbr\tx17\n\n0000000000005270 <__fxstat64@plt>:\n    5270:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5274:\tf940c611 \tldr\tx17, [x16,#392]\n    5278:\t91062210 \tadd\tx16, x16, #0x188\n    527c:\td61f0220 \tbr\tx17\n\n0000000000005280 <__libc_dlsym@plt>:\n    5280:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5284:\tf940ca11 \tldr\tx17, [x16,#400]\n    5288:\t91064210 \tadd\tx16, x16, #0x190\n    528c:\td61f0220 \tbr\tx17\n\n0000000000005290 <__sched_setscheduler@plt>:\n    5290:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5294:\tf940ce11 \tldr\tx17, [x16,#408]\n    5298:\t91066210 \tadd\tx16, x16, #0x198\n    529c:\td61f0220 \tbr\tx17\n\n00000000000052a0 <__libc_current_sigrtmin_private@plt>:\n    52a0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    52a4:\tf940d211 \tldr\tx17, [x16,#416]\n    52a8:\t91068210 \tadd\tx16, x16, #0x1a0\n    52ac:\td61f0220 \tbr\tx17\n\n00000000000052b0 <munmap@plt>:\n    52b0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    52b4:\tf940d611 \tldr\tx17, [x16,#424]\n    52b8:\t9106a210 \tadd\tx16, x16, #0x1a8\n    52bc:\td61f0220 \tbr\tx17\n\n00000000000052c0 <getrlimit@plt>:\n    52c0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    52c4:\tf940da11 \tldr\tx17, [x16,#432]\n    52c8:\t9106c210 \tadd\tx16, x16, #0x1b0\n    52cc:\td61f0220 \tbr\tx17\n\n00000000000052d0 <__madvise@plt>:\n    52d0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    52d4:\tf940de11 \tldr\tx17, [x16,#440]\n    52d8:\t9106e210 \tadd\tx16, x16, #0x1b8\n    52dc:\td61f0220 \tbr\tx17\n\n00000000000052e0 <__libc_dl_error_tsd@plt>:\n    52e0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    52e4:\tf940e211 \tldr\tx17, [x16,#448]\n    52e8:\t91070210 \tadd\tx16, x16, #0x1c0\n    52ec:\td61f0220 \tbr\tx17\n\n00000000000052f0 <__mktemp@plt>:\n    52f0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    52f4:\tf940e611 \tldr\tx17, [x16,#456]\n    52f8:\t91072210 \tadd\tx16, x16, #0x1c8\n    52fc:\td61f0220 \tbr\tx17\n\n0000000000005300 <__clone@plt>:\n    5300:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5304:\tf940ea11 \tldr\tx17, [x16,#464]\n    5308:\t91074210 \tadd\tx16, x16, #0x1d0\n    530c:\td61f0220 \tbr\tx17\n\n0000000000005310 <_dl_allocate_tls@plt>:\n    5310:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5314:\tf940ee11 \tldr\tx17, [x16,#472]\n    5318:\t91076210 \tadd\tx16, x16, #0x1d8\n    531c:\td61f0220 \tbr\tx17\n\n0000000000005320 <link@plt>:\n    5320:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5324:\tf940f211 \tldr\tx17, [x16,#480]\n    5328:\t91078210 \tadd\tx16, x16, #0x1e0\n    532c:\td61f0220 \tbr\tx17\n\n0000000000005330 <__sched_getscheduler@plt>:\n    5330:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5334:\tf940f611 \tldr\tx17, [x16,#488]\n    5338:\t9107a210 \tadd\tx16, x16, #0x1e8\n    533c:\td61f0220 \tbr\tx17\n\n0000000000005340 <_dl_get_tls_static_info@plt>:\n    5340:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5344:\tf940fa11 \tldr\tx17, [x16,#496]\n    5348:\t9107c210 \tadd\tx16, x16, #0x1f0\n    534c:\td61f0220 \tbr\tx17\n\n0000000000005350 <__sched_get_priority_max@plt>:\n    5350:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5354:\tf940fe11 \tldr\tx17, [x16,#504]\n    5358:\t9107e210 \tadd\tx16, x16, #0x1f8\n    535c:\td61f0220 \tbr\tx17\n\n0000000000005360 <__libc_alloca_cutoff@plt>:\n    5360:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5364:\tf9410211 \tldr\tx17, [x16,#512]\n    5368:\t91080210 \tadd\tx16, x16, #0x200\n    536c:\td61f0220 \tbr\tx17\n\n0000000000005370 <_dl_allocate_tls_init@plt>:\n    5370:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5374:\tf9410611 \tldr\tx17, [x16,#520]\n    5378:\t91082210 \tadd\tx16, x16, #0x208\n    537c:\td61f0220 \tbr\tx17\n\n0000000000005380 <prctl@plt>:\n    5380:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5384:\tf9410a11 \tldr\tx17, [x16,#528]\n    5388:\t91084210 \tadd\tx16, x16, #0x210\n    538c:\td61f0220 \tbr\tx17\n\n0000000000005390 <__libc_allocate_rtsig_private@plt>:\n    5390:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5394:\tf9410e11 \tldr\tx17, [x16,#536]\n    5398:\t91086210 \tadd\tx16, x16, #0x218\n    539c:\td61f0220 \tbr\tx17\n\n00000000000053a0 <__libc_longjmp@plt>:\n    53a0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    53a4:\tf9411211 \tldr\tx17, [x16,#544]\n    53a8:\t91088210 \tadd\tx16, x16, #0x220\n    53ac:\td61f0220 \tbr\tx17\n\n00000000000053b0 <mprotect@plt>:\n    53b0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    53b4:\tf9411611 \tldr\tx17, [x16,#552]\n    53b8:\t9108a210 \tadd\tx16, x16, #0x228\n    53bc:\td61f0220 \tbr\tx17\n\n00000000000053c0 <__getdelim@plt>:\n    53c0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    53c4:\tf9411a11 \tldr\tx17, [x16,#560]\n    53c8:\t9108c210 \tadd\tx16, x16, #0x230\n    53cc:\td61f0220 \tbr\tx17\n\n00000000000053d0 <unlink@plt>:\n    53d0:\tf0000150 \tadrp\tx16, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    53d4:\tf9411e11 \tldr\tx17, [x16,#568]\n    53d8:\t9108e210 \tadd\tx16, x16, #0x238\n    53dc:\td61f0220 \tbr\tx17\n\n00000000000053e0 <h_errno@plt>:\n    53e0:\ta9bf0fe2 \tstp\tx2, x3, [sp,#-16]!\n    53e4:\td0000142 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    53e8:\td0000143 \tadrp\tx3, 2f000 <__FRAME_END__+0x18e30>\n    53ec:\tf947f042 \tldr\tx2, [x2,#4064]\n    53f0:\t913fa063 \tadd\tx3, x3, #0xfe8\n    53f4:\td61f0040 \tbr\tx2\n    53f8:\td503201f \tnop\n    53fc:\td503201f \tnop\n\nDisassembly of section .text:\n\n0000000000005400 <deregister_tm_clones>:\n    5400:\tf0000141 \tadrp\tx1, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5404:\tf0000140 \tadrp\tx0, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5408:\t910a0021 \tadd\tx1, x1, #0x280\n    540c:\t910a0000 \tadd\tx0, x0, #0x280\n    5410:\t91001c21 \tadd\tx1, x1, #0x7\n    5414:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    5418:\tcb000021 \tsub\tx1, x1, x0\n    541c:\tf100383f \tcmp\tx1, #0xe\n    5420:\t910003fd \tmov\tx29, sp\n    5424:\t540000a9 \tb.ls\t5438 <deregister_tm_clones+0x38>\n    5428:\td0000141 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    542c:\tf947c021 \tldr\tx1, [x1,#3968]\n    5430:\tb4000041 \tcbz\tx1, 5438 <deregister_tm_clones+0x38>\n    5434:\td63f0020 \tblr\tx1\n    5438:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n    543c:\td65f03c0 \tret\n\n0000000000005440 <register_tm_clones>:\n    5440:\tf0000140 \tadrp\tx0, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5444:\tf0000141 \tadrp\tx1, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5448:\t910a0000 \tadd\tx0, x0, #0x280\n    544c:\t910a0021 \tadd\tx1, x1, #0x280\n    5450:\tcb000021 \tsub\tx1, x1, x0\n    5454:\t9343fc22 \tasr\tx2, x1, #3\n    5458:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    545c:\t8b42fc42 \tadd\tx2, x2, x2, lsr #63\n    5460:\t9341fc41 \tasr\tx1, x2, #1\n    5464:\t910003fd \tmov\tx29, sp\n    5468:\tb40000a1 \tcbz\tx1, 547c <register_tm_clones+0x3c>\n    546c:\td0000142 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    5470:\tf947e842 \tldr\tx2, [x2,#4048]\n    5474:\tb4000042 \tcbz\tx2, 547c <register_tm_clones+0x3c>\n    5478:\td63f0040 \tblr\tx2\n    547c:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n    5480:\td65f03c0 \tret\n\n0000000000005484 <__do_global_dtors_aux>:\n    5484:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    5488:\t910003fd \tmov\tx29, sp\n    548c:\tf9000bf3 \tstr\tx19, [sp,#16]\n    5490:\tf0000153 \tadrp\tx19, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5494:\t394a0260 \tldrb\tw0, [x19,#640]\n    5498:\t35000140 \tcbnz\tw0, 54c0 <__do_global_dtors_aux+0x3c>\n    549c:\td0000140 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    54a0:\tf947c800 \tldr\tx0, [x0,#3984]\n    54a4:\tb4000080 \tcbz\tx0, 54b4 <__do_global_dtors_aux+0x30>\n    54a8:\td0000140 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    54ac:\t912e0000 \tadd\tx0, x0, #0xb80\n    54b0:\t97fffed8 \tbl\t5010 <__cxa_finalize@plt>\n    54b4:\t97ffffd3 \tbl\t5400 <deregister_tm_clones>\n    54b8:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    54bc:\t390a0260 \tstrb\tw0, [x19,#640]\n    54c0:\tf9400bf3 \tldr\tx19, [sp,#16]\n    54c4:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    54c8:\td65f03c0 \tret\n\n00000000000054cc <frame_dummy>:\n    54cc:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    54d0:\td0000140 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    54d4:\t910003fd \tmov\tx29, sp\n    54d8:\t912de000 \tadd\tx0, x0, #0xb78\n    54dc:\tf9400001 \tldr\tx1, [x0]\n    54e0:\tb5000061 \tcbnz\tx1, 54ec <frame_dummy+0x20>\n    54e4:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n    54e8:\t17ffffd6 \tb\t5440 <register_tm_clones>\n    54ec:\td0000141 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    54f0:\tf947e421 \tldr\tx1, [x1,#4040]\n    54f4:\tb4ffff81 \tcbz\tx1, 54e4 <frame_dummy+0x18>\n    54f8:\td63f0020 \tblr\tx1\n    54fc:\t17fffffa \tb\t54e4 <frame_dummy+0x18>\n\n0000000000005500 <__nptl_set_robust>:\n    5500:\t91038000 \tadd\tx0, x0, #0xe0\n    5504:\td2800301 \tmov\tx1, #0x18                  \t// #24\n    5508:\td2800c68 \tmov\tx8, #0x63                  \t// #99\n    550c:\td4000001 \tsvc\t#0x0\n    5510:\td65f03c0 \tret\n\n0000000000005514 <sigcancel_handler>:\n    5514:\td53bd043 \tmrs\tx3, tpidr_el0\n    5518:\t7100801f \tcmp\tw0, #0x20\n    551c:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    5520:\td11bc062 \tsub\tx2, x3, #0x6f0\n    5524:\t910003fd \tmov\tx29, sp\n    5528:\tb940d440 \tldr\tw0, [x2,#212]\n    552c:\t54000060 \tb.eq\t5538 <sigcancel_handler+0x24>\n    5530:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    5534:\td65f03c0 \tret\n    5538:\t93407c00 \tsxtw\tx0, w0\n    553c:\tb9401024 \tldr\tw4, [x1,#16]\n    5540:\tca80fc05 \teor\tx5, x0, x0, asr #63\n    5544:\tcb80fca0 \tsub\tx0, x5, x0, asr #63\n    5548:\t6b00009f \tcmp\tw4, w0\n    554c:\t54ffff21 \tb.ne\t5530 <sigcancel_handler+0x1c>\n    5550:\tb9400820 \tldr\tw0, [x1,#8]\n    5554:\t3100181f \tcmn\tw0, #0x6\n    5558:\t54fffec1 \tb.ne\t5530 <sigcancel_handler+0x1c>\n    555c:\tb9410840 \tldr\tw0, [x2,#264]\n    5560:\t321e0404 \torr\tw4, w0, #0xc\n    5564:\t6b04001f \tcmp\tw0, w4\n    5568:\t54fffe40 \tb.eq\t5530 <sigcancel_handler+0x1c>\n    556c:\t3727fe20 \ttbnz\tw0, #4, 5530 <sigcancel_handler+0x1c>\n    5570:\t910083a6 \tadd\tx6, x29, #0x20\n    5574:\t91042045 \tadd\tx5, x2, #0x108\n    5578:\t2a0003e1 \tmov\tw1, w0\n    557c:\tb81fccc0 \tstr\tw0, [x6,#-4]!\n    5580:\t885ffca7 \tldaxr\tw7, [x5]\n    5584:\t6b0100ff \tcmp\tw7, w1\n    5588:\t54000061 \tb.ne\t5594 <sigcancel_handler+0x80>\n    558c:\t88087ca4 \tstxr\tw8, w4, [x5]\n    5590:\t35ffff88 \tcbnz\tw8, 5580 <sigcancel_handler+0x6c>\n    5594:\t54000040 \tb.eq\t559c <sigcancel_handler+0x88>\n    5598:\tb9001fa7 \tstr\tw7, [x29,#28]\n    559c:\tb9401fa1 \tldr\tw1, [x29,#28]\n    55a0:\t6b01001f \tcmp\tw0, w1\n    55a4:\t54000060 \tb.eq\t55b0 <sigcancel_handler+0x9c>\n    55a8:\t2a0103e0 \tmov\tw0, w1\n    55ac:\t17ffffed \tb\t5560 <sigcancel_handler+0x4c>\n    55b0:\t92800001 \tmov\tx1, #0xffffffffffffffff    \t// #-1\n    55b4:\tf9021441 \tstr\tx1, [x2,#1064]\n    55b8:\t360ffbc0 \ttbz\tw0, #1, 5530 <sigcancel_handler+0x1c>\n    55bc:\td117a063 \tsub\tx3, x3, #0x5e8\n    55c0:\tb9400060 \tldr\tw0, [x3]\n    55c4:\tb9001fa0 \tstr\tw0, [x29,#28]\n    55c8:\t321c0004 \torr\tw4, w0, #0x10\n    55cc:\t885ffca1 \tldaxr\tw1, [x5]\n    55d0:\t6b00003f \tcmp\tw1, w0\n    55d4:\t54000061 \tb.ne\t55e0 <sigcancel_handler+0xcc>\n    55d8:\t88077ca4 \tstxr\tw7, w4, [x5]\n    55dc:\t35ffff87 \tcbnz\tw7, 55cc <sigcancel_handler+0xb8>\n    55e0:\t54000060 \tb.eq\t55ec <sigcancel_handler+0xd8>\n    55e4:\tb90000c1 \tstr\tw1, [x6]\n    55e8:\t17fffff6 \tb\t55c0 <sigcancel_handler+0xac>\n    55ec:\tf9408040 \tldr\tx0, [x2,#256]\n    55f0:\t940027c5 \tbl\tf504 <__pthread_unwind>\n\n00000000000055f4 <sighandler_setxid>:\n    55f4:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    55f8:\t7100841f \tcmp\tw0, #0x21\n    55fc:\t910003fd \tmov\tx29, sp\n    5600:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    5604:\td53bd053 \tmrs\tx19, tpidr_el0\n    5608:\td11bc273 \tsub\tx19, x19, #0x6f0\n    560c:\tb940d660 \tldr\tw0, [x19,#212]\n    5610:\t54000080 \tb.eq\t5620 <sighandler_setxid+0x2c>\n    5614:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    5618:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    561c:\td65f03c0 \tret\n    5620:\t93407c00 \tsxtw\tx0, w0\n    5624:\tb9401022 \tldr\tw2, [x1,#16]\n    5628:\tca80fc03 \teor\tx3, x0, x0, asr #63\n    562c:\tcb80fc60 \tsub\tx0, x3, x0, asr #63\n    5630:\t6b00005f \tcmp\tw2, w0\n    5634:\t54ffff01 \tb.ne\t5614 <sighandler_setxid+0x20>\n    5638:\tb9400820 \tldr\tw0, [x1,#8]\n    563c:\t3100181f \tcmn\tw0, #0x6\n    5640:\t54fffea1 \tb.ne\t5614 <sighandler_setxid+0x20>\n    5644:\tf0000174 \tadrp\tx20, 34000 <__GI___pthread_keys+0x3d78>\n    5648:\tf9418a83 \tldr\tx3, [x20,#784]\n    564c:\tf9400460 \tldr\tx0, [x3,#8]\n    5650:\tf9400861 \tldr\tx1, [x3,#16]\n    5654:\tf9400c62 \tldr\tx2, [x3,#24]\n    5658:\tb9800068 \tldrsw\tx8, [x3]\n    565c:\td4000001 \tsvc\t#0x0\n    5660:\taa0003e1 \tmov\tx1, x0\n    5664:\tf9418a80 \tldr\tx0, [x20,#784]\n    5668:\t3140043f \tcmn\tw1, #0x1, lsl #12\n    566c:\t5a8197e1 \tcsneg\tw1, wzr, w1, ls\n    5670:\t9400037a \tbl\t6458 <__nptl_setxid_error>\n    5674:\t91042261 \tadd\tx1, x19, #0x108\n    5678:\t9100b3a5 \tadd\tx5, x29, #0x2c\n    567c:\tb9410a60 \tldr\tw0, [x19,#264]\n    5680:\tb9002fa0 \tstr\tw0, [x29,#44]\n    5684:\t12197803 \tand\tw3, w0, #0xffffffbf\n    5688:\t2a0003e2 \tmov\tw2, w0\n    568c:\t885ffc24 \tldaxr\tw4, [x1]\n    5690:\t6b02009f \tcmp\tw4, w2\n    5694:\t54000061 \tb.ne\t56a0 <sighandler_setxid+0xac>\n    5698:\t88067c23 \tstxr\tw6, w3, [x1]\n    569c:\t35ffff86 \tcbnz\tw6, 568c <sighandler_setxid+0x98>\n    56a0:\t54000040 \tb.eq\t56a8 <sighandler_setxid+0xb4>\n    56a4:\tb90000a4 \tstr\tw4, [x5]\n    56a8:\tb9402fa2 \tldr\tw2, [x29,#44]\n    56ac:\t6b02001f \tcmp\tw0, w2\n    56b0:\t54fffe61 \tb.ne\t567c <sighandler_setxid+0x88>\n    56b4:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    56b8:\t91107260 \tadd\tx0, x19, #0x41c\n    56bc:\tb9041e61 \tstr\tw1, [x19,#1052]\n    56c0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    56c4:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    56c8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    56cc:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    56d0:\td4000001 \tsvc\t#0x0\n    56d4:\tf9418a80 \tldr\tx0, [x20,#784]\n    56d8:\t91008000 \tadd\tx0, x0, #0x20\n    56dc:\t885ffc04 \tldaxr\tw4, [x0]\n    56e0:\t51000485 \tsub\tw5, w4, #0x1\n    56e4:\t88067c05 \tstxr\tw6, w5, [x0]\n    56e8:\t35ffffa6 \tcbnz\tw6, 56dc <sighandler_setxid+0xe8>\n    56ec:\tb9002fa4 \tstr\tw4, [x29,#44]\n    56f0:\tb9402fa0 \tldr\tw0, [x29,#44]\n    56f4:\t7100041f \tcmp\tw0, #0x1\n    56f8:\t54fff8e1 \tb.ne\t5614 <sighandler_setxid+0x20>\n    56fc:\tf0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    5700:\tf9418800 \tldr\tx0, [x0,#784]\n    5704:\t91008000 \tadd\tx0, x0, #0x20\n    5708:\td4000001 \tsvc\t#0x0\n    570c:\t17ffffc2 \tb\t5614 <sighandler_setxid+0x20>\n\n0000000000005710 <__pthread_initialize_minimal>:\n    5710:\ta9b17bfd \tstp\tx29, x30, [sp,#-240]!\n    5714:\td53bd044 \tmrs\tx4, tpidr_el0\n    5718:\td2800c08 \tmov\tx8, #0x60                  \t// #96\n    571c:\t910003fd \tmov\tx29, sp\n    5720:\td11bc083 \tsub\tx3, x4, #0x6f0\n    5724:\t91034060 \tadd\tx0, x3, #0xd0\n    5728:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    572c:\tf90013f5 \tstr\tx21, [sp,#32]\n    5730:\td4000001 \tsvc\t#0x0\n    5734:\t91038062 \tadd\tx2, x3, #0xe0\n    5738:\t91044061 \tadd\tx1, x3, #0x110\n    573c:\tb900d060 \tstr\tw0, [x3,#208]\n    5740:\td2800c68 \tmov\tx8, #0x63                  \t// #99\n    5744:\tb900d460 \tstr\tw0, [x3,#212]\n    5748:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    574c:\tf9018861 \tstr\tx1, [x3,#784]\n    5750:\td2800301 \tmov\tx1, #0x18                  \t// #24\n    5754:\t39104860 \tstrb\tw0, [x3,#1042]\n    5758:\taa0203e0 \tmov\tx0, x2\n    575c:\tf9006c62 \tstr\tx2, [x3,#216]\n    5760:\tf9007062 \tstr\tx2, [x3,#224]\n    5764:\t928003e2 \tmov\tx2, #0xffffffffffffffe0    \t// #-32\n    5768:\tf9007462 \tstr\tx2, [x3,#232]\n    576c:\td4000001 \tsvc\t#0x0\n    5770:\td0000147 \tadrp\tx7, 2f000 <__FRAME_END__+0x18e30>\n    5774:\tf0000166 \tadrp\tx6, 34000 <__GI___pthread_keys+0x3d78>\n    5778:\t910aa0c5 \tadd\tx5, x6, #0x2a8\n    577c:\td118c084 \tsub\tx4, x4, #0x630\n    5780:\t910183b3 \tadd\tx19, x29, #0x60\n    5784:\t91030068 \tadd\tx8, x3, #0xc0\n    5788:\tf947e0e7 \tldr\tx7, [x7,#4032]\n    578c:\t910163b5 \tadd\tx21, x29, #0x58\n    5790:\t52800094 \tmov\tw20, #0x4                   \t// #4\n    5794:\taa1503e1 \tmov\tx1, x21\n    5798:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    579c:\t52800400 \tmov\tw0, #0x20                  \t// #32\n    57a0:\tf94000e7 \tldr\tx7, [x7]\n    57a4:\tf9024c67 \tstr\tx7, [x3,#1176]\n    57a8:\tf90154c5 \tstr\tx5, [x6,#680]\n    57ac:\tf90004a5 \tstr\tx5, [x5,#8]\n    57b0:\tf9000085 \tstr\tx5, [x4]\n    57b4:\tf9000485 \tstr\tx5, [x4,#8]\n    57b8:\tf94154c4 \tldr\tx4, [x6,#680]\n    57bc:\tf9000488 \tstr\tx8, [x4,#8]\n    57c0:\tf0000144 \tadrp\tx4, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    57c4:\td5033bbf \tdmb\tish\n    57c8:\tf90154c8 \tstr\tx8, [x6,#680]\n    57cc:\t394a0484 \tldrb\tw4, [x4,#641]\n    57d0:\ta9017e7f \tstp\txzr, xzr, [x19,#16]\n    57d4:\ta9027e7f \tstp\txzr, xzr, [x19,#32]\n    57d8:\tb900e3b4 \tstr\tw20, [x29,#224]\n    57dc:\t72a20014 \tmovk\tw20, #0x1000, lsl #16\n    57e0:\t39104464 \tstrb\tw4, [x3,#1041]\n    57e4:\t90000003 \tadrp\tx3, 5000 <__getpagesize@plt>\n    57e8:\t91145063 \tadd\tx3, x3, #0x514\n    57ec:\tf9002fa3 \tstr\tx3, [x29,#88]\n    57f0:\ta9007e7f \tstp\txzr, xzr, [x19]\n    57f4:\ta9037e7f \tstp\txzr, xzr, [x19,#48]\n    57f8:\ta9047e7f \tstp\txzr, xzr, [x19,#64]\n    57fc:\ta9057e7f \tstp\txzr, xzr, [x19,#80]\n    5800:\ta9067e7f \tstp\txzr, xzr, [x19,#96]\n    5804:\ta9077e7f \tstp\txzr, xzr, [x19,#112]\n    5808:\t94002eb1 \tbl\t112cc <__libc_sigaction>\n    580c:\tb900e3b4 \tstr\tw20, [x29,#224]\n    5810:\t90000003 \tadrp\tx3, 5000 <__getpagesize@plt>\n    5814:\taa1503e1 \tmov\tx1, x21\n    5818:\t9117d063 \tadd\tx3, x3, #0x5f4\n    581c:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    5820:\t52800420 \tmov\tw0, #0x21                  \t// #33\n    5824:\tf9002fa3 \tstr\tx3, [x29,#88]\n    5828:\t94002ea9 \tbl\t112cc <__libc_sigaction>\n    582c:\tf94033a3 \tldr\tx3, [x29,#96]\n    5830:\td2800020 \tmov\tx0, #0x1                   \t// #1\n    5834:\taa1303e1 \tmov\tx1, x19\n    5838:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    583c:\tb2610464 \torr\tx4, x3, #0x180000000\n    5840:\td28010e8 \tmov\tx8, #0x87                  \t// #135\n    5844:\td2800103 \tmov\tx3, #0x8                   \t// #8\n    5848:\tf90033a4 \tstr\tx4, [x29,#96]\n    584c:\td4000001 \tsvc\t#0x0\n    5850:\tf0000173 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n    5854:\t910103a1 \tadd\tx1, x29, #0x40\n    5858:\t910c8260 \tadd\tx0, x19, #0x320\n    585c:\t97fffeb9 \tbl\t5340 <_dl_get_tls_static_info@plt>\n    5860:\tf94023a4 \tldr\tx4, [x29,#64]\n    5864:\tf1003c9f \tcmp\tx4, #0xf\n    5868:\t54000e68 \tb.hi\t5a34 <__pthread_initialize_minimal+0x324>\n    586c:\tf0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    5870:\td2800202 \tmov\tx2, #0x10                  \t// #16\n    5874:\td28001e1 \tmov\tx1, #0xf                   \t// #15\n    5878:\tf90023a2 \tstr\tx2, [x29,#64]\n    587c:\taa0203e4 \tmov\tx4, x2\n    5880:\tf9018c01 \tstr\tx1, [x0,#792]\n    5884:\tf9419262 \tldr\tx2, [x19,#800]\n    5888:\t52800060 \tmov\tw0, #0x3                   \t// #3\n    588c:\t910123a1 \tadd\tx1, x29, #0x48\n    5890:\td1000443 \tsub\tx3, x2, #0x1\n    5894:\t8b040063 \tadd\tx3, x3, x4\n    5898:\t9ac40863 \tudiv\tx3, x3, x4\n    589c:\t9b047c62 \tmul\tx2, x3, x4\n    58a0:\tf9019262 \tstr\tx2, [x19,#800]\n    58a4:\t97fffdc3 \tbl\t4fb0 <__getrlimit@plt>\n    58a8:\t34000b60 \tcbz\tw0, 5a14 <__pthread_initialize_minimal+0x304>\n    58ac:\td2a00403 \tmov\tx3, #0x200000              \t// #2097152\n    58b0:\td0000141 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    58b4:\tf9419262 \tldr\tx2, [x19,#800]\n    58b8:\tf0000173 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n    58bc:\tb9003fbf \tstr\twzr, [x29,#60]\n    58c0:\t910a2260 \tadd\tx0, x19, #0x288\n    58c4:\tf947d421 \tldr\tx1, [x1,#4008]\n    58c8:\tf9400c34 \tldr\tx20, [x1,#24]\n    58cc:\t8b020282 \tadd\tx2, x20, x2\n    58d0:\td1000684 \tsub\tx4, x20, #0x1\n    58d4:\t91200041 \tadd\tx1, x2, #0x800\n    58d8:\tcb1403e2 \tneg\tx2, x20\n    58dc:\teb03003f \tcmp\tx1, x3\n    58e0:\t9a832021 \tcsel\tx1, x1, x3, cs\n    58e4:\t8b040021 \tadd\tx1, x1, x4\n    58e8:\t8a020021 \tand\tx1, x1, x2\n    58ec:\tf90027a1 \tstr\tx1, [x29,#72]\n    58f0:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    58f4:\t885ffc02 \tldaxr\tw2, [x0]\n    58f8:\t6b1f005f \tcmp\tw2, wzr\n    58fc:\t54000061 \tb.ne\t5908 <__pthread_initialize_minimal+0x1f8>\n    5900:\t88037c01 \tstxr\tw3, w1, [x0]\n    5904:\t35ffff83 \tcbnz\tw3, 58f4 <__pthread_initialize_minimal+0x1e4>\n    5908:\t54000801 \tb.ne\t5a08 <__pthread_initialize_minimal+0x2f8>\n    590c:\tf0000161 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    5910:\tf94027a2 \tldr\tx2, [x29,#72]\n    5914:\t910cc021 \tadd\tx1, x1, #0x330\n    5918:\t910a2260 \tadd\tx0, x19, #0x288\n    591c:\tf9001022 \tstr\tx2, [x1,#32]\n    5920:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    5924:\tf9000834 \tstr\tx20, [x1,#16]\n    5928:\t885f7c01 \tldxr\tw1, [x0]\n    592c:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    5930:\t35ffffc3 \tcbnz\tw3, 5928 <__pthread_initialize_minimal+0x218>\n    5934:\t7100043f \tcmp\tw1, #0x1\n    5938:\t5400086c \tb.gt\t5a44 <__pthread_initialize_minimal+0x334>\n    593c:\td0000154 \tadrp\tx20, 2f000 <__FRAME_END__+0x18e30>\n    5940:\t97fffe68 \tbl\t52e0 <__libc_dl_error_tsd@plt>\n    5944:\taa0003f3 \tmov\tx19, x0\n    5948:\tf947ee95 \tldr\tx21, [x20,#4056]\n    594c:\tf9450ea0 \tldr\tx0, [x21,#2584]\n    5950:\td63f0000 \tblr\tx0\n    5954:\tf9400000 \tldr\tx0, [x0]\n    5958:\tf9000260 \tstr\tx0, [x19]\n    595c:\td0000140 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    5960:\tb9498eb3 \tldr\tw19, [x21,#2444]\n    5964:\tf947dc00 \tldr\tx0, [x0,#4024]\n    5968:\tf9050ea0 \tstr\tx0, [x21,#2584]\n    596c:\t90000020 \tadrp\tx0, 9000 <__pthread_mutex_lock_full+0x1a0>\n    5970:\t910f6000 \tadd\tx0, x0, #0x3d8\n    5974:\tf907c6a0 \tstr\tx0, [x21,#3976]\n    5978:\tb0000020 \tadrp\tx0, a000 <pthread_mutex_timedlock+0x3b4>\n    597c:\tb9098ebf \tstr\twzr, [x21,#2444]\n    5980:\t91296000 \tadd\tx0, x0, #0xa58\n    5984:\tf907caa0 \tstr\tx0, [x21,#3984]\n    5988:\t340000d3 \tcbz\tw19, 59a0 <__pthread_initialize_minimal+0x290>\n    598c:\tf947ee80 \tldr\tx0, [x20,#4056]\n    5990:\t91262000 \tadd\tx0, x0, #0x988\n    5994:\t94000e91 \tbl\t93d8 <__pthread_mutex_lock>\n    5998:\t71000673 \tsubs\tw19, w19, #0x1\n    599c:\t54ffff81 \tb.ne\t598c <__pthread_initialize_minimal+0x27c>\n    59a0:\tf947ee94 \tldr\tx20, [x20,#4056]\n    59a4:\tb0000003 \tadrp\tx3, 6000 <do_clone.constprop.4+0x1a4>\n    59a8:\t91014063 \tadd\tx3, x3, #0x50\n    59ac:\tf0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    59b0:\tb0000001 \tadrp\tx1, 6000 <do_clone.constprop.4+0x1a4>\n    59b4:\td0000142 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    59b8:\tf907ce83 \tstr\tx3, [x20,#3992]\n    59bc:\tb0000003 \tadrp\tx3, 6000 <do_clone.constprop.4+0x1a4>\n    59c0:\t91224063 \tadd\tx3, x3, #0x890\n    59c4:\tf907f683 \tstr\tx3, [x20,#4072]\n    59c8:\tb0000003 \tadrp\tx3, 6000 <do_clone.constprop.4+0x1a4>\n    59cc:\t9106e021 \tadd\tx1, x1, #0x1b8\n    59d0:\t91285063 \tadd\tx3, x3, #0xa14\n    59d4:\t912e2042 \tadd\tx2, x2, #0xb88\n    59d8:\t910e2000 \tadd\tx0, x0, #0x388\n    59dc:\tf907fa83 \tstr\tx3, [x20,#4080]\n    59e0:\t97fffe08 \tbl\t5200 <__libc_pthread_init@plt>\n    59e4:\tf94013f5 \tldr\tx21, [sp,#32]\n    59e8:\tf0000161 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    59ec:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    59f0:\ta8cf7bfd \tldp\tx29, x30, [sp],#240\n    59f4:\tf901b820 \tstr\tx0, [x1,#880]\n    59f8:\tf0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    59fc:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    5a00:\tb9032c01 \tstr\tw1, [x0,#812]\n    5a04:\td65f03c0 \tret\n    5a08:\tb9003fa2 \tstr\tw2, [x29,#60]\n    5a0c:\t94002757 \tbl\tf768 <__lll_lock_wait_private>\n    5a10:\t17ffffbf \tb\t590c <__pthread_initialize_minimal+0x1fc>\n    5a14:\tf94027a3 \tldr\tx3, [x29,#72]\n    5a18:\tb100047f \tcmn\tx3, #0x1\n    5a1c:\t54fff480 \tb.eq\t58ac <__pthread_initialize_minimal+0x19c>\n    5a20:\tb24043e0 \tmov\tx0, #0x1ffff               \t// #131071\n    5a24:\teb00007f \tcmp\tx3, x0\n    5a28:\td2a00040 \tmov\tx0, #0x20000               \t// #131072\n    5a2c:\t9a808063 \tcsel\tx3, x3, x0, hi\n    5a30:\t17ffffa0 \tb\t58b0 <__pthread_initialize_minimal+0x1a0>\n    5a34:\tf0000161 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    5a38:\td1000480 \tsub\tx0, x4, #0x1\n    5a3c:\tf9018c20 \tstr\tx0, [x1,#792]\n    5a40:\t17ffff91 \tb\t5884 <__pthread_initialize_minimal+0x174>\n    5a44:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    5a48:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    5a4c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    5a50:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    5a54:\td4000001 \tsvc\t#0x0\n    5a58:\t17ffffb9 \tb\t593c <__pthread_initialize_minimal+0x22c>\n\n0000000000005a5c <__pthread_get_minstack>:\n    5a5c:\td0000142 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    5a60:\tf9400803 \tldr\tx3, [x0,#16]\n    5a64:\tf0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    5a68:\tf947d442 \tldr\tx2, [x2,#4008]\n    5a6c:\tf9419001 \tldr\tx1, [x0,#800]\n    5a70:\tf9400c40 \tldr\tx0, [x2,#24]\n    5a74:\t8b010000 \tadd\tx0, x0, x1\n    5a78:\t91408000 \tadd\tx0, x0, #0x20, lsl #12\n    5a7c:\t8b030000 \tadd\tx0, x0, x3\n    5a80:\td65f03c0 \tret\n\n0000000000005a84 <__GI___nptl_create_event>:\n    5a84:\td65f03c0 \tret\n\n0000000000005a88 <__GI___nptl_death_event>:\n    5a88:\td65f03c0 \tret\n\n0000000000005a8c <__nptl_main>:\n    5a8c:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    5a90:\tb0000061 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n    5a94:\td2800020 \tmov\tx0, #0x1                   \t// #1\n    5a98:\t910003fd \tmov\tx29, sp\n    5a9c:\t9121c021 \tadd\tx1, x1, #0x870\n    5aa0:\td28023a2 \tmov\tx2, #0x11d                 \t// #285\n    5aa4:\td2800808 \tmov\tx8, #0x40                  \t// #64\n    5aa8:\td4000001 \tsvc\t#0x0\n    5aac:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    5ab0:\t97fffd30 \tbl\t4f70 <_exit@plt>\n\n0000000000005ab4 <setxid_mark_thread.isra.0>:\n    5ab4:\taa0003e4 \tmov\tx4, x0\n    5ab8:\tb9441c00 \tldr\tw0, [x0,#1052]\n    5abc:\td10043ff \tsub\tsp, sp, #0x10\n    5ac0:\t3100041f \tcmn\tw0, #0x1\n    5ac4:\t54000420 \tb.eq\t5b48 <setxid_mark_thread.isra.0+0x94>\n    5ac8:\tb9410881 \tldr\tw1, [x4,#264]\n    5acc:\t91042082 \tadd\tx2, x4, #0x108\n    5ad0:\tb9041c9f \tstr\twzr, [x4,#1052]\n    5ad4:\t321a0023 \torr\tw3, w1, #0x40\n    5ad8:\t2a0103e0 \tmov\tw0, w1\n    5adc:\t37200201 \ttbnz\tw1, #4, 5b1c <setxid_mark_thread.isra.0+0x68>\n    5ae0:\tb9000fe1 \tstr\tw1, [sp,#12]\n    5ae4:\t885ffc41 \tldaxr\tw1, [x2]\n    5ae8:\t6b00003f \tcmp\tw1, w0\n    5aec:\t54000061 \tb.ne\t5af8 <setxid_mark_thread.isra.0+0x44>\n    5af0:\t88057c43 \tstxr\tw5, w3, [x2]\n    5af4:\t35ffff85 \tcbnz\tw5, 5ae4 <setxid_mark_thread.isra.0+0x30>\n    5af8:\t54000061 \tb.ne\t5b04 <setxid_mark_thread.isra.0+0x50>\n    5afc:\t910043ff \tadd\tsp, sp, #0x10\n    5b00:\td65f03c0 \tret\n    5b04:\tb9000fe1 \tstr\tw1, [sp,#12]\n    5b08:\t91042082 \tadd\tx2, x4, #0x108\n    5b0c:\tb9410881 \tldr\tw1, [x4,#264]\n    5b10:\t321a0023 \torr\tw3, w1, #0x40\n    5b14:\t2a0103e0 \tmov\tw0, w1\n    5b18:\t3627fe41 \ttbz\tw1, #4, 5ae0 <setxid_mark_thread.isra.0+0x2c>\n    5b1c:\t3737ff01 \ttbnz\tw1, #6, 5afc <setxid_mark_thread.isra.0+0x48>\n    5b20:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    5b24:\t91107080 \tadd\tx0, x4, #0x41c\n    5b28:\tb9041c81 \tstr\tw1, [x4,#1052]\n    5b2c:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    5b30:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    5b34:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    5b38:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    5b3c:\td4000001 \tsvc\t#0x0\n    5b40:\t910043ff \tadd\tsp, sp, #0x10\n    5b44:\td65f03c0 \tret\n    5b48:\tb9000fe0 \tstr\tw0, [sp,#12]\n    5b4c:\t91107085 \tadd\tx5, x4, #0x41c\n    5b50:\t12800020 \tmov\tw0, #0xfffffffe            \t// #-2\n    5b54:\t12800002 \tmov\tw2, #0xffffffff            \t// #-1\n    5b58:\t885ffca1 \tldaxr\tw1, [x5]\n    5b5c:\t6b02003f \tcmp\tw1, w2\n    5b60:\t54000061 \tb.ne\t5b6c <setxid_mark_thread.isra.0+0xb8>\n    5b64:\t88037ca0 \tstxr\tw3, w0, [x5]\n    5b68:\t35ffff83 \tcbnz\tw3, 5b58 <setxid_mark_thread.isra.0+0xa4>\n    5b6c:\t54000161 \tb.ne\t5b98 <setxid_mark_thread.isra.0+0xe4>\n    5b70:\taa0503e0 \tmov\tx0, x5\n    5b74:\td2801001 \tmov\tx1, #0x80                  \t// #128\n    5b78:\t92800022 \tmov\tx2, #0xfffffffffffffffe    \t// #-2\n    5b7c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    5b80:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    5b84:\td4000001 \tsvc\t#0x0\n    5b88:\tb9441c80 \tldr\tw0, [x4,#1052]\n    5b8c:\t3100081f \tcmn\tw0, #0x2\n    5b90:\t54ffff00 \tb.eq\t5b70 <setxid_mark_thread.isra.0+0xbc>\n    5b94:\t17ffffcd \tb\t5ac8 <setxid_mark_thread.isra.0+0x14>\n    5b98:\tb9000fe1 \tstr\tw1, [sp,#12]\n    5b9c:\t17ffffcb \tb\t5ac8 <setxid_mark_thread.isra.0+0x14>\n\n0000000000005ba0 <__free_stacks>:\n    5ba0:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    5ba4:\t910003fd \tmov\tx29, sp\n    5ba8:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    5bac:\tf0000155 \tadrp\tx21, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5bb0:\t910962b5 \tadd\tx21, x21, #0x258\n    5bb4:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    5bb8:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    5bbc:\tf94006a2 \tldr\tx2, [x21,#8]\n    5bc0:\taa0003f8 \tmov\tx24, x0\n    5bc4:\tf0000177 \tadrp\tx23, 34000 <__GI___pthread_keys+0x3d78>\n    5bc8:\teb15005f \tcmp\tx2, x21\n    5bcc:\tf9400453 \tldr\tx19, [x2,#8]\n    5bd0:\t540000e1 \tb.ne\t5bec <__free_stacks+0x4c>\n    5bd4:\t14000022 \tb\t5c5c <__free_stacks+0xbc>\n    5bd8:\teb15027f \tcmp\tx19, x21\n    5bdc:\tf9400661 \tldr\tx1, [x19,#8]\n    5be0:\taa1303e2 \tmov\tx2, x19\n    5be4:\t540003c0 \tb.eq\t5c5c <__free_stacks+0xbc>\n    5be8:\taa0103f3 \tmov\tx19, x1\n    5bec:\td1030054 \tsub\tx20, x2, #0xc0\n    5bf0:\tb940d281 \tldr\tw1, [x20,#208]\n    5bf4:\t6b1f003f \tcmp\tw1, wzr\n    5bf8:\t54ffff0c \tb.gt\t5bd8 <__free_stacks+0x38>\n    5bfc:\tf9014ae2 \tstr\tx2, [x23,#656]\n    5c00:\t9118c040 \tadd\tx0, x2, #0x630\n    5c04:\t910a42f6 \tadd\tx22, x23, #0x290\n    5c08:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    5c0c:\td5033bbf \tdmb\tish\n    5c10:\tf9400043 \tldr\tx3, [x2]\n    5c14:\tf9400444 \tldr\tx4, [x2,#8]\n    5c18:\tf9000464 \tstr\tx4, [x3,#8]\n    5c1c:\tf9400442 \tldr\tx2, [x2,#8]\n    5c20:\tf9000043 \tstr\tx3, [x2]\n    5c24:\td5033bbf \tdmb\tish\n    5c28:\tf94006c2 \tldr\tx2, [x22,#8]\n    5c2c:\tf9424e83 \tldr\tx3, [x20,#1176]\n    5c30:\tf9014aff \tstr\txzr, [x23,#656]\n    5c34:\tcb030042 \tsub\tx2, x2, x3\n    5c38:\tf90006c2 \tstr\tx2, [x22,#8]\n    5c3c:\t97fffd29 \tbl\t50e0 <_dl_deallocate_tls@plt>\n    5c40:\tf9424a80 \tldr\tx0, [x20,#1168]\n    5c44:\tf9424e81 \tldr\tx1, [x20,#1176]\n    5c48:\t97fffd9a \tbl\t52b0 <munmap@plt>\n    5c4c:\t35000120 \tcbnz\tw0, 5c70 <__free_stacks+0xd0>\n    5c50:\tf94006c1 \tldr\tx1, [x22,#8]\n    5c54:\teb18003f \tcmp\tx1, x24\n    5c58:\t54fffc08 \tb.hi\t5bd8 <__free_stacks+0x38>\n    5c5c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    5c60:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    5c64:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    5c68:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    5c6c:\td65f03c0 \tret\n    5c70:\t97fffd40 \tbl\t5170 <abort@plt>\n\n0000000000005c74 <__deallocate_stack>:\n    5c74:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    5c78:\t910003fd \tmov\tx29, sp\n    5c7c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    5c80:\tf0000173 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n    5c84:\taa0003f4 \tmov\tx20, x0\n    5c88:\t910a4261 \tadd\tx1, x19, #0x290\n    5c8c:\tb9004fbf \tstr\twzr, [x29,#76]\n    5c90:\t91004020 \tadd\tx0, x1, #0x10\n    5c94:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    5c98:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    5c9c:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    5ca0:\t885ffc02 \tldaxr\tw2, [x0]\n    5ca4:\t6b1f005f \tcmp\tw2, wzr\n    5ca8:\t54000061 \tb.ne\t5cb4 <__deallocate_stack+0x40>\n    5cac:\t88037c01 \tstxr\tw3, w1, [x0]\n    5cb0:\t35ffff83 \tcbnz\tw3, 5ca0 <__deallocate_stack+0x2c>\n    5cb4:\t54000601 \tb.ne\t5d74 <__deallocate_stack+0x100>\n    5cb8:\t91030280 \tadd\tx0, x20, #0xc0\n    5cbc:\tf9014a60 \tstr\tx0, [x19,#656]\n    5cc0:\tf0000163 \tadrp\tx3, 34000 <__GI___pthread_keys+0x3d78>\n    5cc4:\t910a4262 \tadd\tx2, x19, #0x290\n    5cc8:\td5033bbf \tdmb\tish\n    5ccc:\tf9406281 \tldr\tx1, [x20,#192]\n    5cd0:\tf9406684 \tldr\tx4, [x20,#200]\n    5cd4:\tf9000424 \tstr\tx4, [x1,#8]\n    5cd8:\tf9406684 \tldr\tx4, [x20,#200]\n    5cdc:\tf9000081 \tstr\tx1, [x4]\n    5ce0:\td5033bbf \tdmb\tish\n    5ce4:\t39504a81 \tldrb\tw1, [x20,#1042]\n    5ce8:\tf9014a7f \tstr\txzr, [x19,#656]\n    5cec:\t350004a1 \tcbnz\tw1, 5d80 <__deallocate_stack+0x10c>\n    5cf0:\tf0000141 \tadrp\tx1, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5cf4:\tb2400004 \torr\tx4, x0, #0x1\n    5cf8:\tf9014864 \tstr\tx4, [x3,#656]\n    5cfc:\t91096036 \tadd\tx22, x1, #0x258\n    5d00:\td2a05005 \tmov\tx5, #0x2800000             \t// #41943040\n    5d04:\td5033bbf \tdmb\tish\n    5d08:\tf9412c24 \tldr\tx4, [x1,#600]\n    5d0c:\tf9006284 \tstr\tx4, [x20,#192]\n    5d10:\tf9006696 \tstr\tx22, [x20,#200]\n    5d14:\tf9000480 \tstr\tx0, [x4,#8]\n    5d18:\td5033bbf \tdmb\tish\n    5d1c:\tf9012c20 \tstr\tx0, [x1,#600]\n    5d20:\td5033bbf \tdmb\tish\n    5d24:\tf9400441 \tldr\tx1, [x2,#8]\n    5d28:\tf9424e80 \tldr\tx0, [x20,#1176]\n    5d2c:\tf901487f \tstr\txzr, [x3,#656]\n    5d30:\t8b000020 \tadd\tx0, x1, x0\n    5d34:\tf9000440 \tstr\tx0, [x2,#8]\n    5d38:\teb05001f \tcmp\tx0, x5\n    5d3c:\t540003e8 \tb.hi\t5db8 <__deallocate_stack+0x144>\n    5d40:\t910a4260 \tadd\tx0, x19, #0x290\n    5d44:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    5d48:\t91004000 \tadd\tx0, x0, #0x10\n    5d4c:\t885f7c01 \tldxr\tw1, [x0]\n    5d50:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    5d54:\t35ffffc3 \tcbnz\tw3, 5d4c <__deallocate_stack+0xd8>\n    5d58:\t7100043f \tcmp\tw1, #0x1\n    5d5c:\t540001ac \tb.gt\t5d90 <__deallocate_stack+0x11c>\n    5d60:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    5d64:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    5d68:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    5d6c:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    5d70:\td65f03c0 \tret\n    5d74:\tb9004fa2 \tstr\tw2, [x29,#76]\n    5d78:\t9400267c \tbl\tf768 <__lll_lock_wait_private>\n    5d7c:\t17ffffcf \tb\t5cb8 <__deallocate_stack+0x44>\n    5d80:\t911bc280 \tadd\tx0, x20, #0x6f0\n    5d84:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    5d88:\t97fffcd6 \tbl\t50e0 <_dl_deallocate_tls@plt>\n    5d8c:\t17ffffed \tb\t5d40 <__deallocate_stack+0xcc>\n    5d90:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    5d94:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    5d98:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    5d9c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    5da0:\td4000001 \tsvc\t#0x0\n    5da4:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    5da8:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    5dac:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    5db0:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    5db4:\td65f03c0 \tret\n    5db8:\tf94006c2 \tldr\tx2, [x22,#8]\n    5dbc:\teb16005f \tcmp\tx2, x22\n    5dc0:\tf9400454 \tldr\tx20, [x2,#8]\n    5dc4:\t54fffbe0 \tb.eq\t5d40 <__deallocate_stack+0xcc>\n    5dc8:\taa0503f7 \tmov\tx23, x5\n    5dcc:\t14000006 \tb\t5de4 <__deallocate_stack+0x170>\n    5dd0:\teb16029f \tcmp\tx20, x22\n    5dd4:\tf9400680 \tldr\tx0, [x20,#8]\n    5dd8:\taa1403e2 \tmov\tx2, x20\n    5ddc:\t54fffb20 \tb.eq\t5d40 <__deallocate_stack+0xcc>\n    5de0:\taa0003f4 \tmov\tx20, x0\n    5de4:\td1030055 \tsub\tx21, x2, #0xc0\n    5de8:\tb940d2a0 \tldr\tw0, [x21,#208]\n    5dec:\t6b1f001f \tcmp\tw0, wzr\n    5df0:\t54ffff0c \tb.gt\t5dd0 <__deallocate_stack+0x15c>\n    5df4:\tf9014a62 \tstr\tx2, [x19,#656]\n    5df8:\t9118c040 \tadd\tx0, x2, #0x630\n    5dfc:\t910a4278 \tadd\tx24, x19, #0x290\n    5e00:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    5e04:\td5033bbf \tdmb\tish\n    5e08:\tf9400043 \tldr\tx3, [x2]\n    5e0c:\tf9400444 \tldr\tx4, [x2,#8]\n    5e10:\tf9000464 \tstr\tx4, [x3,#8]\n    5e14:\tf9400442 \tldr\tx2, [x2,#8]\n    5e18:\tf9000043 \tstr\tx3, [x2]\n    5e1c:\td5033bbf \tdmb\tish\n    5e20:\tf9400702 \tldr\tx2, [x24,#8]\n    5e24:\tf9424ea3 \tldr\tx3, [x21,#1176]\n    5e28:\tf9014a7f \tstr\txzr, [x19,#656]\n    5e2c:\tcb030042 \tsub\tx2, x2, x3\n    5e30:\tf9000702 \tstr\tx2, [x24,#8]\n    5e34:\t97fffcab \tbl\t50e0 <_dl_deallocate_tls@plt>\n    5e38:\tf9424aa0 \tldr\tx0, [x21,#1168]\n    5e3c:\tf9424ea1 \tldr\tx1, [x21,#1176]\n    5e40:\t97fffd1c \tbl\t52b0 <munmap@plt>\n    5e44:\t350000a0 \tcbnz\tw0, 5e58 <__deallocate_stack+0x1e4>\n    5e48:\tf9400700 \tldr\tx0, [x24,#8]\n    5e4c:\teb17001f \tcmp\tx0, x23\n    5e50:\t54fffc08 \tb.hi\t5dd0 <__deallocate_stack+0x15c>\n    5e54:\t17ffffbb \tb\t5d40 <__deallocate_stack+0xcc>\n    5e58:\t97fffcc6 \tbl\t5170 <abort@plt>\n\n0000000000005e5c <do_clone.constprop.4>:\n    5e5c:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    5e60:\t911bc005 \tadd\tx5, x0, #0x6f0\n    5e64:\t910003fd \tmov\tx29, sp\n    5e68:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    5e6c:\tf90013f6 \tstr\tx22, [sp,#32]\n    5e70:\tf0000154 \tadrp\tx20, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5e74:\taa0003f3 \tmov\tx19, x0\n    5e78:\taa0103f6 \tmov\tx22, x1\n    5e7c:\t91094280 \tadd\tx0, x20, #0x250\n    5e80:\taa0203e1 \tmov\tx1, x2\n    5e84:\t35000303 \tcbnz\tw3, 5ee4 <do_clone.constprop.4+0x88>\n    5e88:\t885ffc02 \tldaxr\tw2, [x0]\n    5e8c:\t11000442 \tadd\tw2, w2, #0x1\n    5e90:\t88037c02 \tstxr\tw3, w2, [x0]\n    5e94:\t35ffffa3 \tcbnz\tw3, 5e88 <do_clone.constprop.4+0x2c>\n    5e98:\t91034264 \tadd\tx4, x19, #0xd0\n    5e9c:\t5281e002 \tmov\tw2, #0xf00                 \t// #3840\n    5ea0:\tb0000000 \tadrp\tx0, 6000 <do_clone.constprop.4+0x1a4>\n    5ea4:\t72a007a2 \tmovk\tw2, #0x3d, lsl #16\n    5ea8:\t913a3000 \tadd\tx0, x0, #0xe8c\n    5eac:\taa1303e3 \tmov\tx3, x19\n    5eb0:\taa0403e6 \tmov\tx6, x4\n    5eb4:\t97fffd13 \tbl\t5300 <__clone@plt>\n    5eb8:\t3100041f \tcmn\tw0, #0x1\n    5ebc:\t540008c0 \tb.eq\t5fd4 <do_clone.constprop.4+0x178>\n    5ec0:\td53bd041 \tmrs\tx1, tpidr_el0\n    5ec4:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    5ec8:\td11bc021 \tsub\tx1, x1, #0x6f0\n    5ecc:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    5ed0:\tb9000022 \tstr\tw2, [x1]\n    5ed4:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    5ed8:\tf94013f6 \tldr\tx22, [sp,#32]\n    5edc:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    5ee0:\td65f03c0 \tret\n    5ee4:\tb9004fbf \tstr\twzr, [x29,#76]\n    5ee8:\t91106260 \tadd\tx0, x19, #0x418\n    5eec:\t52800023 \tmov\tw3, #0x1                   \t// #1\n    5ef0:\t885ffc02 \tldaxr\tw2, [x0]\n    5ef4:\t6b1f005f \tcmp\tw2, wzr\n    5ef8:\t54000061 \tb.ne\t5f04 <do_clone.constprop.4+0xa8>\n    5efc:\t88047c03 \tstxr\tw4, w3, [x0]\n    5f00:\t35ffff84 \tcbnz\tw4, 5ef0 <do_clone.constprop.4+0x94>\n    5f04:\t540005a1 \tb.ne\t5fb8 <do_clone.constprop.4+0x15c>\n    5f08:\tf0000154 \tadrp\tx20, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    5f0c:\t91094280 \tadd\tx0, x20, #0x250\n    5f10:\t885ffc02 \tldaxr\tw2, [x0]\n    5f14:\t11000442 \tadd\tw2, w2, #0x1\n    5f18:\t88037c02 \tstxr\tw3, w2, [x0]\n    5f1c:\t35ffffa3 \tcbnz\tw3, 5f10 <do_clone.constprop.4+0xb4>\n    5f20:\t91034264 \tadd\tx4, x19, #0xd0\n    5f24:\t5281e002 \tmov\tw2, #0xf00                 \t// #3840\n    5f28:\tb0000000 \tadrp\tx0, 6000 <do_clone.constprop.4+0x1a4>\n    5f2c:\t72a007a2 \tmovk\tw2, #0x3d, lsl #16\n    5f30:\t913a3000 \tadd\tx0, x0, #0xe8c\n    5f34:\taa1303e3 \tmov\tx3, x19\n    5f38:\taa0403e6 \tmov\tx6, x4\n    5f3c:\t97fffcf1 \tbl\t5300 <__clone@plt>\n    5f40:\t3100041f \tcmn\tw0, #0x1\n    5f44:\t54000480 \tb.eq\t5fd4 <do_clone.constprop.4+0x178>\n    5f48:\tf94016c2 \tldr\tx2, [x22,#40]\n    5f4c:\tb40000e2 \tcbz\tx2, 5f68 <do_clone.constprop.4+0x10c>\n    5f50:\tb980d260 \tldrsw\tx0, [x19,#208]\n    5f54:\td2800f48 \tmov\tx8, #0x7a                  \t// #122\n    5f58:\tf9401ac1 \tldr\tx1, [x22,#48]\n    5f5c:\td4000001 \tsvc\t#0x0\n    5f60:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    5f64:\t54000148 \tb.hi\t5f8c <do_clone.constprop.4+0x130>\n    5f68:\tb9400ac0 \tldr\tw0, [x22,#8]\n    5f6c:\t360ffaa0 \ttbz\tw0, #1, 5ec0 <do_clone.constprop.4+0x64>\n    5f70:\tb980d260 \tldrsw\tx0, [x19,#208]\n    5f74:\t9110c262 \tadd\tx2, x19, #0x430\n    5f78:\tb9843661 \tldrsw\tx1, [x19,#1076]\n    5f7c:\td2800ee8 \tmov\tx8, #0x77                  \t// #119\n    5f80:\td4000001 \tsvc\t#0x0\n    5f84:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    5f88:\t54fff9c9 \tb.ls\t5ec0 <do_clone.constprop.4+0x64>\n    5f8c:\t2a0003e3 \tmov\tw3, w0\n    5f90:\td53bd040 \tmrs\tx0, tpidr_el0\n    5f94:\td11bc000 \tsub\tx0, x0, #0x6f0\n    5f98:\tb980d261 \tldrsw\tx1, [x19,#208]\n    5f9c:\td2800402 \tmov\tx2, #0x20                  \t// #32\n    5fa0:\td2801068 \tmov\tx8, #0x83                  \t// #131\n    5fa4:\tb980d400 \tldrsw\tx0, [x0,#212]\n    5fa8:\td4000001 \tsvc\t#0x0\n    5fac:\t3140047f \tcmn\tw3, #0x1, lsl #12\n    5fb0:\t5a8397e0 \tcsneg\tw0, wzr, w3, ls\n    5fb4:\t17ffffc8 \tb\t5ed4 <do_clone.constprop.4+0x78>\n    5fb8:\tf9001ba1 \tstr\tx1, [x29,#48]\n    5fbc:\tf9001fa5 \tstr\tx5, [x29,#56]\n    5fc0:\tb9004fa2 \tstr\tw2, [x29,#76]\n    5fc4:\t940025e9 \tbl\tf768 <__lll_lock_wait_private>\n    5fc8:\tf9401fa5 \tldr\tx5, [x29,#56]\n    5fcc:\tf9401ba1 \tldr\tx1, [x29,#48]\n    5fd0:\t17ffffce \tb\t5f08 <do_clone.constprop.4+0xac>\n    5fd4:\t91094294 \tadd\tx20, x20, #0x250\n    5fd8:\t885ffe80 \tldaxr\tw0, [x20]\n    5fdc:\t51000400 \tsub\tw0, w0, #0x1\n    5fe0:\t88017e80 \tstxr\tw1, w0, [x20]\n    5fe4:\t35ffffa1 \tcbnz\tw1, 5fd8 <do_clone.constprop.4+0x17c>\n    5fe8:\t91107260 \tadd\tx0, x19, #0x41c\n    5fec:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    5ff0:\t885ffc01 \tldaxr\tw1, [x0]\n    5ff4:\t88037c02 \tstxr\tw3, w2, [x0]\n    5ff8:\t35ffffc3 \tcbnz\tw3, 5ff0 <do_clone.constprop.4+0x194>\n    5ffc:\t3100083f \tcmn\tw1, #0x2\n    6000:\t540001c0 \tb.eq\t6038 <do_clone.constprop.4+0x1dc>\n    6004:\taa1303e0 \tmov\tx0, x19\n    6008:\t97ffff1b \tbl\t5c74 <__deallocate_stack>\n    600c:\tf94013f6 \tldr\tx22, [sp,#32]\n    6010:\tb0000141 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    6014:\tf947c421 \tldr\tx1, [x1,#3976]\n    6018:\td53bd040 \tmrs\tx0, tpidr_el0\n    601c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    6020:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    6024:\tb8616800 \tldr\tw0, [x0,x1]\n    6028:\t52800161 \tmov\tw1, #0xb                   \t// #11\n    602c:\t7100301f \tcmp\tw0, #0xc\n    6030:\t1a811000 \tcsel\tw0, w0, w1, ne\n    6034:\td65f03c0 \tret\n    6038:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    603c:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    6040:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    6044:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    6048:\td4000001 \tsvc\t#0x0\n    604c:\t17ffffee \tb\t6004 <do_clone.constprop.4+0x1a8>\n\n0000000000006050 <__make_stacks_executable>:\n    6050:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    6054:\t910003fd \tmov\tx29, sp\n    6058:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    605c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    6060:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    6064:\t97fffc5f \tbl\t51e0 <_dl_make_stack_executable@plt>\n    6068:\t2a0003f6 \tmov\tw22, w0\n    606c:\t340000e0 \tcbz\tw0, 6088 <__make_stacks_executable+0x38>\n    6070:\t2a1603e0 \tmov\tw0, w22\n    6074:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    6078:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    607c:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    6080:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    6084:\td65f03c0 \tret\n    6088:\td0000177 \tadrp\tx23, 34000 <__GI___pthread_keys+0x3d78>\n    608c:\tb9004fa0 \tstr\tw0, [x29,#76]\n    6090:\t910a42e0 \tadd\tx0, x23, #0x290\n    6094:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    6098:\t91004000 \tadd\tx0, x0, #0x10\n    609c:\t885ffc02 \tldaxr\tw2, [x0]\n    60a0:\t6b1f005f \tcmp\tw2, wzr\n    60a4:\t54000061 \tb.ne\t60b0 <__make_stacks_executable+0x60>\n    60a8:\t88037c01 \tstxr\tw3, w1, [x0]\n    60ac:\t35ffff83 \tcbnz\tw3, 609c <__make_stacks_executable+0x4c>\n    60b0:\t540004e1 \tb.ne\t614c <__make_stacks_executable+0xfc>\n    60b4:\td0000158 \tadrp\tx24, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    60b8:\t91096314 \tadd\tx20, x24, #0x258\n    60bc:\tf8410e93 \tldr\tx19, [x20,#16]!\n    60c0:\teb14027f \tcmp\tx19, x20\n    60c4:\t540004a0 \tb.eq\t6158 <__make_stacks_executable+0x108>\n    60c8:\tb0000155 \tadrp\tx21, 2f000 <__FRAME_END__+0x18e30>\n    60cc:\tf947c6b5 \tldr\tx21, [x21,#3976]\n    60d0:\td53bd040 \tmrs\tx0, tpidr_el0\n    60d4:\t8b150015 \tadd\tx21, x0, x21\n    60d8:\t14000004 \tb\t60e8 <__make_stacks_executable+0x98>\n    60dc:\tf9400273 \tldr\tx19, [x19]\n    60e0:\teb14027f \tcmp\tx19, x20\n    60e4:\t540003a0 \tb.eq\t6158 <__make_stacks_executable+0x108>\n    60e8:\tf941f261 \tldr\tx1, [x19,#992]\n    60ec:\t528000e2 \tmov\tw2, #0x7                   \t// #7\n    60f0:\tf941ea60 \tldr\tx0, [x19,#976]\n    60f4:\tf941ee63 \tldr\tx3, [x19,#984]\n    60f8:\t8b010000 \tadd\tx0, x0, x1\n    60fc:\tcb010061 \tsub\tx1, x3, x1\n    6100:\t97fffcac \tbl\t53b0 <mprotect@plt>\n    6104:\t34fffec0 \tcbz\tw0, 60dc <__make_stacks_executable+0x8c>\n    6108:\tb94002a1 \tldr\tw1, [x21]\n    610c:\t34fffe81 \tcbz\tw1, 60dc <__make_stacks_executable+0x8c>\n    6110:\t2a0103f6 \tmov\tw22, w1\n    6114:\t910a42e0 \tadd\tx0, x23, #0x290\n    6118:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    611c:\t91004000 \tadd\tx0, x0, #0x10\n    6120:\t885f7c01 \tldxr\tw1, [x0]\n    6124:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    6128:\t35ffffc3 \tcbnz\tw3, 6120 <__make_stacks_executable+0xd0>\n    612c:\t7100043f \tcmp\tw1, #0x1\n    6130:\t54fffa0d \tb.le\t6070 <__make_stacks_executable+0x20>\n    6134:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    6138:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    613c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    6140:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    6144:\td4000001 \tsvc\t#0x0\n    6148:\t17ffffca \tb\t6070 <__make_stacks_executable+0x20>\n    614c:\tb9004fa2 \tstr\tw2, [x29,#76]\n    6150:\t94002586 \tbl\tf768 <__lll_lock_wait_private>\n    6154:\t17ffffd8 \tb\t60b4 <__make_stacks_executable+0x64>\n    6158:\tf9412f13 \tldr\tx19, [x24,#600]\n    615c:\t91096314 \tadd\tx20, x24, #0x258\n    6160:\teb14027f \tcmp\tx19, x20\n    6164:\t54fffd80 \tb.eq\t6114 <__make_stacks_executable+0xc4>\n    6168:\tb0000155 \tadrp\tx21, 2f000 <__FRAME_END__+0x18e30>\n    616c:\tf947c6b5 \tldr\tx21, [x21,#3976]\n    6170:\td53bd040 \tmrs\tx0, tpidr_el0\n    6174:\t8b150015 \tadd\tx21, x0, x21\n    6178:\t14000004 \tb\t6188 <__make_stacks_executable+0x138>\n    617c:\tf9400273 \tldr\tx19, [x19]\n    6180:\teb14027f \tcmp\tx19, x20\n    6184:\t54fffc80 \tb.eq\t6114 <__make_stacks_executable+0xc4>\n    6188:\tf941f261 \tldr\tx1, [x19,#992]\n    618c:\t528000e2 \tmov\tw2, #0x7                   \t// #7\n    6190:\tf941ea60 \tldr\tx0, [x19,#976]\n    6194:\tf941ee63 \tldr\tx3, [x19,#984]\n    6198:\t8b010000 \tadd\tx0, x0, x1\n    619c:\tcb010061 \tsub\tx1, x3, x1\n    61a0:\t97fffc84 \tbl\t53b0 <mprotect@plt>\n    61a4:\t34fffec0 \tcbz\tw0, 617c <__make_stacks_executable+0x12c>\n    61a8:\tb94002a0 \tldr\tw0, [x21]\n    61ac:\t34fffe80 \tcbz\tw0, 617c <__make_stacks_executable+0x12c>\n    61b0:\t2a0003f6 \tmov\tw22, w0\n    61b4:\t17ffffd8 \tb\t6114 <__make_stacks_executable+0xc4>\n\n00000000000061b8 <__reclaim_stacks>:\n    61b8:\ta9b97bfd \tstp\tx29, x30, [sp,#-112]!\n    61bc:\td53bd040 \tmrs\tx0, tpidr_el0\n    61c0:\t910003fd \tmov\tx29, sp\n    61c4:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    61c8:\td0000179 \tadrp\tx25, 34000 <__GI___pthread_keys+0x3d78>\n    61cc:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    61d0:\tfd0033e8 \tstr\td8, [sp,#96]\n    61d4:\td11bc018 \tsub\tx24, x0, #0x6f0\n    61d8:\t9e670008 \tfmov\td8, x0\n    61dc:\tf9414b20 \tldr\tx0, [x25,#656]\n    61e0:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    61e4:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    61e8:\ta90573fb \tstp\tx27, x28, [sp,#80]\n    61ec:\tb5000e20 \tcbnz\tx0, 63b0 <__reclaim_stacks+0x1f8>\n    61f0:\td000015a \tadrp\tx26, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    61f4:\t91096340 \tadd\tx0, x26, #0x258\n    61f8:\tf9400817 \tldr\tx23, [x0,#16]\n    61fc:\t91096340 \tadd\tx0, x26, #0x258\n    6200:\t9100401c \tadd\tx28, x0, #0x10\n    6204:\teb1c02ff \tcmp\tx23, x28\n    6208:\t54001120 \tb.eq\t642c <__reclaim_stacks+0x274>\n    620c:\t52800036 \tmov\tw22, #0x1                   \t// #1\n    6210:\taa0003fb \tmov\tx27, x0\n    6214:\t14000004 \tb\t6224 <__reclaim_stacks+0x6c>\n    6218:\tf94002f7 \tldr\tx23, [x23]\n    621c:\teb1c02ff \tcmp\tx23, x28\n    6220:\t54000440 \tb.eq\t62a8 <__reclaim_stacks+0xf0>\n    6224:\td10302f4 \tsub\tx20, x23, #0xc0\n    6228:\teb14031f \tcmp\tx24, x20\n    622c:\t54ffff60 \tb.eq\t6218 <__reclaim_stacks+0x60>\n    6230:\t910a4321 \tadd\tx1, x25, #0x290\n    6234:\tf9424e80 \tldr\tx0, [x20,#1176]\n    6238:\tb940d703 \tldr\tw3, [x24,#212]\n    623c:\t39504282 \tldrb\tw2, [x20,#1040]\n    6240:\tf9400424 \tldr\tx4, [x1,#8]\n    6244:\tb900d29f \tstr\twzr, [x20,#208]\n    6248:\t8b000080 \tadd\tx0, x4, x0\n    624c:\tb900d683 \tstr\tw3, [x20,#212]\n    6250:\tf9000420 \tstr\tx0, [x1,#8]\n    6254:\t34fffe22 \tcbz\tw2, 6218 <__reclaim_stacks+0x60>\n    6258:\t910142e0 \tadd\tx0, x23, #0x50\n    625c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    6260:\td2804002 \tmov\tx2, #0x200                 \t// #512\n    6264:\t910962f3 \tadd\tx19, x23, #0x258\n    6268:\t910d42f5 \tadd\tx21, x23, #0x350\n    626c:\t97fffb89 \tbl\t5090 <memset@plt>\n    6270:\t3910429f \tstrb\twzr, [x20,#1040]\n    6274:\tf9400263 \tldr\tx3, [x19]\n    6278:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    627c:\td2804002 \tmov\tx2, #0x200                 \t// #512\n    6280:\t91002273 \tadd\tx19, x19, #0x8\n    6284:\taa0303e0 \tmov\tx0, x3\n    6288:\tb4000063 \tcbz\tx3, 6294 <__reclaim_stacks+0xdc>\n    628c:\t97fffb81 \tbl\t5090 <memset@plt>\n    6290:\t39104296 \tstrb\tw22, [x20,#1040]\n    6294:\teb15027f \tcmp\tx19, x21\n    6298:\t54fffee1 \tb.ne\t6274 <__reclaim_stacks+0xbc>\n    629c:\tf94002f7 \tldr\tx23, [x23]\n    62a0:\teb1c02ff \tcmp\tx23, x28\n    62a4:\t54fffc01 \tb.ne\t6224 <__reclaim_stacks+0x6c>\n    62a8:\tf9400363 \tldr\tx3, [x27]\n    62ac:\tf9400b77 \tldr\tx23, [x27,#16]\n    62b0:\teb1b007f \tcmp\tx3, x27\n    62b4:\t54000100 \tb.eq\t62d4 <__reclaim_stacks+0x11c>\n    62b8:\taa0303e0 \tmov\tx0, x3\n    62bc:\t91096342 \tadd\tx2, x26, #0x258\n    62c0:\tb940d701 \tldr\tw1, [x24,#212]\n    62c4:\tb9001401 \tstr\tw1, [x0,#20]\n    62c8:\tf9400000 \tldr\tx0, [x0]\n    62cc:\teb02001f \tcmp\tx0, x2\n    62d0:\t54ffff81 \tb.ne\t62c0 <__reclaim_stacks+0x108>\n    62d4:\t91096340 \tadd\tx0, x26, #0x258\n    62d8:\t91004001 \tadd\tx1, x0, #0x10\n    62dc:\teb0102ff \tcmp\tx23, x1\n    62e0:\t54000100 \tb.eq\t6300 <__reclaim_stacks+0x148>\n    62e4:\tf90006e0 \tstr\tx0, [x23,#8]\n    62e8:\tf9400c01 \tldr\tx1, [x0,#24]\n    62ec:\tf9000023 \tstr\tx3, [x1]\n    62f0:\tf9412f42 \tldr\tx2, [x26,#600]\n    62f4:\tf9400800 \tldr\tx0, [x0,#16]\n    62f8:\tf9012f40 \tstr\tx0, [x26,#600]\n    62fc:\tf9000441 \tstr\tx1, [x2,#8]\n    6300:\t9e660100 \tfmov\tx0, d8\n    6304:\t91030302 \tadd\tx2, x24, #0xc0\n    6308:\tf9014b22 \tstr\tx2, [x25,#656]\n    630c:\t910a4323 \tadd\tx3, x25, #0x290\n    6310:\t9109635a \tadd\tx26, x26, #0x258\n    6314:\t91006061 \tadd\tx1, x3, #0x18\n    6318:\td5033bbf \tdmb\tish\n    631c:\td118c01b \tsub\tx27, x0, #0x630\n    6320:\t91004340 \tadd\tx0, x26, #0x10\n    6324:\tf9400364 \tldr\tx4, [x27]\n    6328:\tf9400765 \tldr\tx5, [x27,#8]\n    632c:\tf9000485 \tstr\tx5, [x4,#8]\n    6330:\tf9400765 \tldr\tx5, [x27,#8]\n    6334:\tf90000a4 \tstr\tx4, [x5]\n    6338:\td5033bbf \tdmb\tish\n    633c:\t39504b04 \tldrb\tw4, [x24,#1042]\n    6340:\tf9014b3f \tstr\txzr, [x25,#656]\n    6344:\tf9000f40 \tstr\tx0, [x26,#24]\n    6348:\tf9000b40 \tstr\tx0, [x26,#16]\n    634c:\tf9000421 \tstr\tx1, [x1,#8]\n    6350:\tf9000c61 \tstr\tx1, [x3,#24]\n    6354:\t350005e4 \tcbnz\tw4, 6410 <__reclaim_stacks+0x258>\n    6358:\tf9000360 \tstr\tx0, [x27]\n    635c:\tf9000760 \tstr\tx0, [x27,#8]\n    6360:\tf9400b40 \tldr\tx0, [x26,#16]\n    6364:\tf9000402 \tstr\tx2, [x0,#8]\n    6368:\td5033bbf \tdmb\tish\n    636c:\tf9000b42 \tstr\tx2, [x26,#16]\n    6370:\t910a4320 \tadd\tx0, x25, #0x290\n    6374:\td0000141 \tadrp\tx1, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    6378:\tf9014b3f \tstr\txzr, [x25,#656]\n    637c:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    6380:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    6384:\tb900101f \tstr\twzr, [x0,#16]\n    6388:\td0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    638c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    6390:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    6394:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    6398:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    639c:\tfd4033e8 \tldr\td8, [sp,#96]\n    63a0:\tb9025022 \tstr\tw2, [x1,#592]\n    63a4:\tb902881f \tstr\twzr, [x0,#648]\n    63a8:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    63ac:\td65f03c0 \tret\n    63b0:\t927ff801 \tand\tx1, x0, #0xfffffffffffffffe\n    63b4:\t360001c0 \ttbz\tw0, #0, 63ec <__reclaim_stacks+0x234>\n    63b8:\td000015a \tadrp\tx26, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    63bc:\t91096342 \tadd\tx2, x26, #0x258\n    63c0:\taa0203e0 \tmov\tx0, x2\n    63c4:\tf8410c17 \tldr\tx23, [x0,#16]!\n    63c8:\tf94006e3 \tldr\tx3, [x23,#8]\n    63cc:\teb00007f \tcmp\tx3, x0\n    63d0:\t54000360 \tb.eq\t643c <__reclaim_stacks+0x284>\n    63d4:\tf9000037 \tstr\tx23, [x1]\n    63d8:\t91096342 \tadd\tx2, x26, #0x258\n    63dc:\tf9000420 \tstr\tx0, [x1,#8]\n    63e0:\tf9000001 \tstr\tx1, [x0]\n    63e4:\tf9400857 \tldr\tx23, [x2,#16]\n    63e8:\t17ffff85 \tb\t61fc <__reclaim_stacks+0x44>\n    63ec:\tf9400020 \tldr\tx0, [x1]\n    63f0:\td000015a \tadrp\tx26, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    63f4:\tf9400423 \tldr\tx3, [x1,#8]\n    63f8:\t91096342 \tadd\tx2, x26, #0x258\n    63fc:\tf9000403 \tstr\tx3, [x0,#8]\n    6400:\tf9400421 \tldr\tx1, [x1,#8]\n    6404:\tf9000020 \tstr\tx0, [x1]\n    6408:\tf9400857 \tldr\tx23, [x2,#16]\n    640c:\t17ffff7c \tb\t61fc <__reclaim_stacks+0x44>\n    6410:\tf9000361 \tstr\tx1, [x27]\n    6414:\tf9000761 \tstr\tx1, [x27,#8]\n    6418:\tf9400c60 \tldr\tx0, [x3,#24]\n    641c:\tf9000402 \tstr\tx2, [x0,#8]\n    6420:\td5033bbf \tdmb\tish\n    6424:\tf9000c62 \tstr\tx2, [x3,#24]\n    6428:\t17ffffd2 \tb\t6370 <__reclaim_stacks+0x1b8>\n    642c:\tf9412f43 \tldr\tx3, [x26,#600]\n    6430:\teb00007f \tcmp\tx3, x0\n    6434:\t54fff421 \tb.ne\t62b8 <__reclaim_stacks+0x100>\n    6438:\t17ffffb2 \tb\t6300 <__reclaim_stacks+0x148>\n    643c:\tf9412f40 \tldr\tx0, [x26,#600]\n    6440:\tf9400403 \tldr\tx3, [x0,#8]\n    6444:\teb02007f \tcmp\tx3, x2\n    6448:\t54ffeda0 \tb.eq\t61fc <__reclaim_stacks+0x44>\n    644c:\taa0003f7 \tmov\tx23, x0\n    6450:\taa0203e0 \tmov\tx0, x2\n    6454:\t17ffffe0 \tb\t63d4 <__reclaim_stacks+0x21c>\n\n0000000000006458 <__nptl_setxid_error>:\n    6458:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    645c:\t910003fd \tmov\tx29, sp\n    6460:\tb9402402 \tldr\tw2, [x0,#36]\n    6464:\t6b01005f \tcmp\tw2, w1\n    6468:\t54000180 \tb.eq\t6498 <__nptl_setxid_error+0x40>\n    646c:\t3100045f \tcmn\tw2, #0x1\n    6470:\t540001c1 \tb.ne\t64a8 <__nptl_setxid_error+0x50>\n    6474:\tb9001fa2 \tstr\tw2, [x29,#28]\n    6478:\t91009002 \tadd\tx2, x0, #0x24\n    647c:\tb9401fa3 \tldr\tw3, [x29,#28]\n    6480:\t885ffc44 \tldaxr\tw4, [x2]\n    6484:\t6b03009f \tcmp\tw4, w3\n    6488:\t54000061 \tb.ne\t6494 <__nptl_setxid_error+0x3c>\n    648c:\t88057c41 \tstxr\tw5, w1, [x2]\n    6490:\t35ffff85 \tcbnz\tw5, 6480 <__nptl_setxid_error+0x28>\n    6494:\t54000061 \tb.ne\t64a0 <__nptl_setxid_error+0x48>\n    6498:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    649c:\td65f03c0 \tret\n    64a0:\tb9001fa4 \tstr\tw4, [x29,#28]\n    64a4:\t17ffffef \tb\t6460 <__nptl_setxid_error+0x8>\n    64a8:\t97fffb32 \tbl\t5170 <abort@plt>\n\n00000000000064ac <__nptl_setxid>:\n    64ac:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n    64b0:\t910003fd \tmov\tx29, sp\n    64b4:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    64b8:\td0000175 \tadrp\tx21, 34000 <__GI___pthread_keys+0x3d78>\n    64bc:\tf90023f9 \tstr\tx25, [sp,#64]\n    64c0:\t910a42a1 \tadd\tx1, x21, #0x290\n    64c4:\tb9005fbf \tstr\twzr, [x29,#92]\n    64c8:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    64cc:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    64d0:\taa0003f4 \tmov\tx20, x0\n    64d4:\t91004020 \tadd\tx0, x1, #0x10\n    64d8:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    64dc:\t885ffc02 \tldaxr\tw2, [x0]\n    64e0:\t6b1f005f \tcmp\tw2, wzr\n    64e4:\t54000061 \tb.ne\t64f0 <__nptl_setxid+0x44>\n    64e8:\t88037c01 \tstxr\tw3, w1, [x0]\n    64ec:\t35ffff83 \tcbnz\tw3, 64dc <__nptl_setxid+0x30>\n    64f0:\t54000060 \tb.eq\t64fc <__nptl_setxid+0x50>\n    64f4:\tb9005fa2 \tstr\tw2, [x29,#92]\n    64f8:\t9400249c \tbl\tf768 <__lll_lock_wait_private>\n    64fc:\td0000157 \tadrp\tx23, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    6500:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    6504:\t910962f9 \tadd\tx25, x23, #0x258\n    6508:\tb900229f \tstr\twzr, [x20,#32]\n    650c:\tb9002680 \tstr\tw0, [x20,#36]\n    6510:\td0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    6514:\td53bd056 \tmrs\tx22, tpidr_el0\n    6518:\tf8410f38 \tldr\tx24, [x25,#16]!\n    651c:\td11bc2d3 \tsub\tx19, x22, #0x6f0\n    6520:\tf9018814 \tstr\tx20, [x0,#784]\n    6524:\teb19031f \tcmp\tx24, x25\n    6528:\t54000100 \tb.eq\t6548 <__nptl_setxid+0x9c>\n    652c:\td1030300 \tsub\tx0, x24, #0xc0\n    6530:\teb13001f \tcmp\tx0, x19\n    6534:\t54000040 \tb.eq\t653c <__nptl_setxid+0x90>\n    6538:\t97fffd5f \tbl\t5ab4 <setxid_mark_thread.isra.0>\n    653c:\tf9400318 \tldr\tx24, [x24]\n    6540:\teb19031f \tcmp\tx24, x25\n    6544:\t54ffff41 \tb.ne\t652c <__nptl_setxid+0x80>\n    6548:\t910a42a0 \tadd\tx0, x21, #0x290\n    654c:\t91006019 \tadd\tx25, x0, #0x18\n    6550:\tf9400c18 \tldr\tx24, [x0,#24]\n    6554:\teb19031f \tcmp\tx24, x25\n    6558:\t54000100 \tb.eq\t6578 <__nptl_setxid+0xcc>\n    655c:\td1030300 \tsub\tx0, x24, #0xc0\n    6560:\teb13001f \tcmp\tx0, x19\n    6564:\t54000040 \tb.eq\t656c <__nptl_setxid+0xc0>\n    6568:\t97fffd53 \tbl\t5ab4 <setxid_mark_thread.isra.0>\n    656c:\tf9400318 \tldr\tx24, [x24]\n    6570:\teb19031f \tcmp\tx24, x25\n    6574:\t54ffff41 \tb.ne\t655c <__nptl_setxid+0xb0>\n    6578:\t910962e9 \tadd\tx9, x23, #0x258\n    657c:\t910a42a6 \tadd\tx6, x21, #0x290\n    6580:\t91004127 \tadd\tx7, x9, #0x10\n    6584:\t910060c6 \tadd\tx6, x6, #0x18\n    6588:\tf9400923 \tldr\tx3, [x9,#16]\n    658c:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    6590:\teb07007f \tcmp\tx3, x7\n    6594:\t54000240 \tb.eq\t65dc <__nptl_setxid+0x130>\n    6598:\td1030061 \tsub\tx1, x3, #0xc0\n    659c:\teb01027f \tcmp\tx19, x1\n    65a0:\t54000180 \tb.eq\t65d0 <__nptl_setxid+0x124>\n    65a4:\tb9410820 \tldr\tw0, [x1,#264]\n    65a8:\t36300100 \ttbz\tw0, #6, 65c8 <__nptl_setxid+0x11c>\n    65ac:\tb980d660 \tldrsw\tx0, [x19,#212]\n    65b0:\td2800422 \tmov\tx2, #0x21                  \t// #33\n    65b4:\tb980d021 \tldrsw\tx1, [x1,#208]\n    65b8:\td2801068 \tmov\tx8, #0x83                  \t// #131\n    65bc:\td4000001 \tsvc\t#0x0\n    65c0:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    65c4:\t540010e9 \tb.ls\t67e0 <__nptl_setxid+0x334>\n    65c8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    65cc:\t0b000084 \tadd\tw4, w4, w0\n    65d0:\tf9400063 \tldr\tx3, [x3]\n    65d4:\teb07007f \tcmp\tx3, x7\n    65d8:\t54fffe01 \tb.ne\t6598 <__nptl_setxid+0xec>\n    65dc:\tf94000c3 \tldr\tx3, [x6]\n    65e0:\teb06007f \tcmp\tx3, x6\n    65e4:\t54000240 \tb.eq\t662c <__nptl_setxid+0x180>\n    65e8:\td1030061 \tsub\tx1, x3, #0xc0\n    65ec:\teb01027f \tcmp\tx19, x1\n    65f0:\t54000180 \tb.eq\t6620 <__nptl_setxid+0x174>\n    65f4:\tb9410820 \tldr\tw0, [x1,#264]\n    65f8:\t36300100 \ttbz\tw0, #6, 6618 <__nptl_setxid+0x16c>\n    65fc:\tb980d660 \tldrsw\tx0, [x19,#212]\n    6600:\td2800422 \tmov\tx2, #0x21                  \t// #33\n    6604:\tb980d021 \tldrsw\tx1, [x1,#208]\n    6608:\td2801068 \tmov\tx8, #0x83                  \t// #131\n    660c:\td4000001 \tsvc\t#0x0\n    6610:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    6614:\t54000f89 \tb.ls\t6804 <__nptl_setxid+0x358>\n    6618:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    661c:\t0b000084 \tadd\tw4, w4, w0\n    6620:\tf9400063 \tldr\tx3, [x3]\n    6624:\teb06007f \tcmp\tx3, x6\n    6628:\t54fffe01 \tb.ne\t65e8 <__nptl_setxid+0x13c>\n    662c:\taa1403e5 \tmov\tx5, x20\n    6630:\tb8420ca2 \tldr\tw2, [x5,#32]!\n    6634:\t34000122 \tcbz\tw2, 6658 <__nptl_setxid+0x1ac>\n    6638:\taa0503e0 \tmov\tx0, x5\n    663c:\td2801001 \tmov\tx1, #0x80                  \t// #128\n    6640:\t93407c42 \tsxtw\tx2, w2\n    6644:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    6648:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    664c:\td4000001 \tsvc\t#0x0\n    6650:\tb9402282 \tldr\tw2, [x20,#32]\n    6654:\t35ffff22 \tcbnz\tw2, 6638 <__nptl_setxid+0x18c>\n    6658:\t35fff984 \tcbnz\tw4, 6588 <__nptl_setxid+0xdc>\n    665c:\t910962f7 \tadd\tx23, x23, #0x258\n    6660:\t52800026 \tmov\tw6, #0x1                   \t// #1\n    6664:\tf8410ee4 \tldr\tx4, [x23,#16]!\n    6668:\teb17009f \tcmp\tx4, x23\n    666c:\t54000320 \tb.eq\t66d0 <__nptl_setxid+0x224>\n    6670:\td1030085 \tsub\tx5, x4, #0xc0\n    6674:\teb05027f \tcmp\tx19, x5\n    6678:\t54000260 \tb.eq\t66c4 <__nptl_setxid+0x218>\n    667c:\tb94108a1 \tldr\tw1, [x5,#264]\n    6680:\t36300221 \ttbz\tw1, #6, 66c4 <__nptl_setxid+0x218>\n    6684:\tb9005fa1 \tstr\tw1, [x29,#92]\n    6688:\t12197823 \tand\tw3, w1, #0xffffffbf\n    668c:\t91012082 \tadd\tx2, x4, #0x48\n    6690:\t885ffc40 \tldaxr\tw0, [x2]\n    6694:\t6b01001f \tcmp\tw0, w1\n    6698:\t54000061 \tb.ne\t66a4 <__nptl_setxid+0x1f8>\n    669c:\t88077c43 \tstxr\tw7, w3, [x2]\n    66a0:\t35ffff87 \tcbnz\tw7, 6690 <__nptl_setxid+0x1e4>\n    66a4:\t54000c21 \tb.ne\t6828 <__nptl_setxid+0x37c>\n    66a8:\tb9041ca6 \tstr\tw6, [x5,#1052]\n    66ac:\t910d7080 \tadd\tx0, x4, #0x35c\n    66b0:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    66b4:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    66b8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    66bc:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    66c0:\td4000001 \tsvc\t#0x0\n    66c4:\tf9400084 \tldr\tx4, [x4]\n    66c8:\teb17009f \tcmp\tx4, x23\n    66cc:\t54fffd21 \tb.ne\t6670 <__nptl_setxid+0x1c4>\n    66d0:\t910a42a0 \tadd\tx0, x21, #0x290\n    66d4:\t52800027 \tmov\tw7, #0x1                   \t// #1\n    66d8:\t91006006 \tadd\tx6, x0, #0x18\n    66dc:\tf9400c04 \tldr\tx4, [x0,#24]\n    66e0:\teb06009f \tcmp\tx4, x6\n    66e4:\t54000320 \tb.eq\t6748 <__nptl_setxid+0x29c>\n    66e8:\td1030085 \tsub\tx5, x4, #0xc0\n    66ec:\teb05027f \tcmp\tx19, x5\n    66f0:\t54000260 \tb.eq\t673c <__nptl_setxid+0x290>\n    66f4:\tb94108a1 \tldr\tw1, [x5,#264]\n    66f8:\t36300221 \ttbz\tw1, #6, 673c <__nptl_setxid+0x290>\n    66fc:\tb9005fa1 \tstr\tw1, [x29,#92]\n    6700:\t12197823 \tand\tw3, w1, #0xffffffbf\n    6704:\t91012082 \tadd\tx2, x4, #0x48\n    6708:\t885ffc40 \tldaxr\tw0, [x2]\n    670c:\t6b01001f \tcmp\tw0, w1\n    6710:\t54000061 \tb.ne\t671c <__nptl_setxid+0x270>\n    6714:\t88087c43 \tstxr\tw8, w3, [x2]\n    6718:\t35ffff88 \tcbnz\tw8, 6708 <__nptl_setxid+0x25c>\n    671c:\t540008a1 \tb.ne\t6830 <__nptl_setxid+0x384>\n    6720:\tb9041ca7 \tstr\tw7, [x5,#1052]\n    6724:\t910d7080 \tadd\tx0, x4, #0x35c\n    6728:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    672c:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    6730:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    6734:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    6738:\td4000001 \tsvc\t#0x0\n    673c:\tf9400084 \tldr\tx4, [x4]\n    6740:\teb06009f \tcmp\tx4, x6\n    6744:\t54fffd21 \tb.ne\t66e8 <__nptl_setxid+0x23c>\n    6748:\tf9400680 \tldr\tx0, [x20,#8]\n    674c:\tf9400a81 \tldr\tx1, [x20,#16]\n    6750:\tf9400e82 \tldr\tx2, [x20,#24]\n    6754:\tb9800288 \tldrsw\tx8, [x20]\n    6758:\td4000001 \tsvc\t#0x0\n    675c:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    6760:\t2a0003e5 \tmov\tw5, w0\n    6764:\t540006e8 \tb.hi\t6840 <__nptl_setxid+0x394>\n    6768:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    676c:\tb9402681 \tldr\tw1, [x20,#36]\n    6770:\t6b01005f \tcmp\tw2, w1\n    6774:\t54000180 \tb.eq\t67a4 <__nptl_setxid+0x2f8>\n    6778:\t3100043f \tcmn\tw1, #0x1\n    677c:\t54000881 \tb.ne\t688c <__nptl_setxid+0x3e0>\n    6780:\tb9005fa1 \tstr\tw1, [x29,#92]\n    6784:\t91009281 \tadd\tx1, x20, #0x24\n    6788:\tb9405fa3 \tldr\tw3, [x29,#92]\n    678c:\t885ffc24 \tldaxr\tw4, [x1]\n    6790:\t6b03009f \tcmp\tw4, w3\n    6794:\t54000061 \tb.ne\t67a0 <__nptl_setxid+0x2f4>\n    6798:\t88007c22 \tstxr\tw0, w2, [x1]\n    679c:\t35ffff80 \tcbnz\tw0, 678c <__nptl_setxid+0x2e0>\n    67a0:\t540004c1 \tb.ne\t6838 <__nptl_setxid+0x38c>\n    67a4:\t910a42b5 \tadd\tx21, x21, #0x290\n    67a8:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    67ac:\t910042b5 \tadd\tx21, x21, #0x10\n    67b0:\t885f7ea0 \tldxr\tw0, [x21]\n    67b4:\t8802fea1 \tstlxr\tw2, w1, [x21]\n    67b8:\t35ffffc2 \tcbnz\tw2, 67b0 <__nptl_setxid+0x304>\n    67bc:\t7100041f \tcmp\tw0, #0x1\n    67c0:\t540004cc \tb.gt\t6858 <__nptl_setxid+0x3ac>\n    67c4:\t2a0503e0 \tmov\tw0, w5\n    67c8:\tf94023f9 \tldr\tx25, [sp,#64]\n    67cc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    67d0:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    67d4:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    67d8:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    67dc:\td65f03c0 \tret\n    67e0:\t91008280 \tadd\tx0, x20, #0x20\n    67e4:\t885ffc01 \tldaxr\tw1, [x0]\n    67e8:\t11000422 \tadd\tw2, w1, #0x1\n    67ec:\t88057c02 \tstxr\tw5, w2, [x0]\n    67f0:\t35ffffa5 \tcbnz\tw5, 67e4 <__nptl_setxid+0x338>\n    67f4:\tb90057a1 \tstr\tw1, [x29,#84]\n    67f8:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    67fc:\tb94057a1 \tldr\tw1, [x29,#84]\n    6800:\t17ffff73 \tb\t65cc <__nptl_setxid+0x120>\n    6804:\t91008280 \tadd\tx0, x20, #0x20\n    6808:\t885ffc01 \tldaxr\tw1, [x0]\n    680c:\t11000422 \tadd\tw2, w1, #0x1\n    6810:\t88057c02 \tstxr\tw5, w2, [x0]\n    6814:\t35ffffa5 \tcbnz\tw5, 6808 <__nptl_setxid+0x35c>\n    6818:\tb9005ba1 \tstr\tw1, [x29,#88]\n    681c:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    6820:\tb9405ba1 \tldr\tw1, [x29,#88]\n    6824:\t17ffff7e \tb\t661c <__nptl_setxid+0x170>\n    6828:\tb9005fa0 \tstr\tw0, [x29,#92]\n    682c:\t17ffff94 \tb\t667c <__nptl_setxid+0x1d0>\n    6830:\tb9005fa0 \tstr\tw0, [x29,#92]\n    6834:\t17ffffb0 \tb\t66f4 <__nptl_setxid+0x248>\n    6838:\tb9005fa4 \tstr\tw4, [x29,#92]\n    683c:\t17ffffcc \tb\t676c <__nptl_setxid+0x2c0>\n    6840:\t4b0003e2 \tneg\tw2, w0\n    6844:\tb0000140 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    6848:\tf947c400 \tldr\tx0, [x0,#3976]\n    684c:\t12800005 \tmov\tw5, #0xffffffff            \t// #-1\n    6850:\tb8206ac2 \tstr\tw2, [x22,x0]\n    6854:\t17ffffc6 \tb\t676c <__nptl_setxid+0x2c0>\n    6858:\taa1503e0 \tmov\tx0, x21\n    685c:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    6860:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    6864:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    6868:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    686c:\td4000001 \tsvc\t#0x0\n    6870:\t2a0503e0 \tmov\tw0, w5\n    6874:\tf94023f9 \tldr\tx25, [sp,#64]\n    6878:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    687c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    6880:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    6884:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    6888:\td65f03c0 \tret\n    688c:\t97fffa39 \tbl\t5170 <abort@plt>\n\n0000000000006890 <__pthread_init_static_tls>:\n    6890:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    6894:\t910003fd \tmov\tx29, sp\n    6898:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    689c:\td0000175 \tadrp\tx21, 34000 <__GI___pthread_keys+0x3d78>\n    68a0:\tf9001bf7 \tstr\tx23, [sp,#48]\n    68a4:\t910a42a1 \tadd\tx1, x21, #0x290\n    68a8:\tb9004fbf \tstr\twzr, [x29,#76]\n    68ac:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    68b0:\taa0003f3 \tmov\tx19, x0\n    68b4:\t91004020 \tadd\tx0, x1, #0x10\n    68b8:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    68bc:\t885ffc02 \tldaxr\tw2, [x0]\n    68c0:\t6b1f005f \tcmp\tw2, wzr\n    68c4:\t54000061 \tb.ne\t68d0 <__pthread_init_static_tls+0x40>\n    68c8:\t88037c01 \tstxr\tw3, w1, [x0]\n    68cc:\t35ffff83 \tcbnz\tw3, 68bc <__pthread_init_static_tls+0x2c>\n    68d0:\t54000881 \tb.ne\t69e0 <__pthread_init_static_tls+0x150>\n    68d4:\td0000156 \tadrp\tx22, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    68d8:\t52800037 \tmov\tw23, #0x1                   \t// #1\n    68dc:\t910962d6 \tadd\tx22, x22, #0x258\n    68e0:\tf8410ed4 \tldr\tx20, [x22,#16]!\n    68e4:\teb16029f \tcmp\tx20, x22\n    68e8:\t540002c0 \tb.eq\t6940 <__pthread_init_static_tls+0xb0>\n    68ec:\tf9422262 \tldr\tx2, [x19,#1088]\n    68f0:\tf9431a83 \tldr\tx3, [x20,#1584]\n    68f4:\tf9421e61 \tldr\tx1, [x19,#1080]\n    68f8:\td37cec42 \tlsl\tx2, x2, #4\n    68fc:\t8b020064 \tadd\tx4, x3, x2\n    6900:\t9118c021 \tadd\tx1, x1, #0x630\n    6904:\t8b010281 \tadd\tx1, x20, x1\n    6908:\tf8226861 \tstr\tx1, [x3,x2]\n    690c:\t39002097 \tstrb\tw23, [x4,#8]\n    6910:\taa0103e0 \tmov\tx0, x1\n    6914:\tf9420e62 \tldr\tx2, [x19,#1048]\n    6918:\tf9420a61 \tldr\tx1, [x19,#1040]\n    691c:\t97fffa51 \tbl\t5260 <mempcpy@plt>\n    6920:\tf9421263 \tldr\tx3, [x19,#1056]\n    6924:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    6928:\tf9420e62 \tldr\tx2, [x19,#1048]\n    692c:\tcb020062 \tsub\tx2, x3, x2\n    6930:\t97fff9d8 \tbl\t5090 <memset@plt>\n    6934:\tf9400294 \tldr\tx20, [x20]\n    6938:\teb16029f \tcmp\tx20, x22\n    693c:\t54fffd81 \tb.ne\t68ec <__pthread_init_static_tls+0x5c>\n    6940:\t910a42a0 \tadd\tx0, x21, #0x290\n    6944:\t52800037 \tmov\tw23, #0x1                   \t// #1\n    6948:\t91006016 \tadd\tx22, x0, #0x18\n    694c:\tf9400c14 \tldr\tx20, [x0,#24]\n    6950:\teb16029f \tcmp\tx20, x22\n    6954:\t540002c0 \tb.eq\t69ac <__pthread_init_static_tls+0x11c>\n    6958:\tf9422262 \tldr\tx2, [x19,#1088]\n    695c:\tf9431a83 \tldr\tx3, [x20,#1584]\n    6960:\tf9421e61 \tldr\tx1, [x19,#1080]\n    6964:\td37cec42 \tlsl\tx2, x2, #4\n    6968:\t8b020064 \tadd\tx4, x3, x2\n    696c:\t9118c021 \tadd\tx1, x1, #0x630\n    6970:\t8b010281 \tadd\tx1, x20, x1\n    6974:\tf8226861 \tstr\tx1, [x3,x2]\n    6978:\t39002097 \tstrb\tw23, [x4,#8]\n    697c:\taa0103e0 \tmov\tx0, x1\n    6980:\tf9420e62 \tldr\tx2, [x19,#1048]\n    6984:\tf9420a61 \tldr\tx1, [x19,#1040]\n    6988:\t97fffa36 \tbl\t5260 <mempcpy@plt>\n    698c:\tf9421263 \tldr\tx3, [x19,#1056]\n    6990:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    6994:\tf9420e62 \tldr\tx2, [x19,#1048]\n    6998:\tcb020062 \tsub\tx2, x3, x2\n    699c:\t97fff9bd \tbl\t5090 <memset@plt>\n    69a0:\tf9400294 \tldr\tx20, [x20]\n    69a4:\teb16029f \tcmp\tx20, x22\n    69a8:\t54fffd81 \tb.ne\t6958 <__pthread_init_static_tls+0xc8>\n    69ac:\t910a42a0 \tadd\tx0, x21, #0x290\n    69b0:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    69b4:\t91004000 \tadd\tx0, x0, #0x10\n    69b8:\t885f7c01 \tldxr\tw1, [x0]\n    69bc:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    69c0:\t35ffffc3 \tcbnz\tw3, 69b8 <__pthread_init_static_tls+0x128>\n    69c4:\t7100043f \tcmp\tw1, #0x1\n    69c8:\t5400012c \tb.gt\t69ec <__pthread_init_static_tls+0x15c>\n    69cc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    69d0:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    69d4:\tf9401bf7 \tldr\tx23, [sp,#48]\n    69d8:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    69dc:\td65f03c0 \tret\n    69e0:\tb9004fa2 \tstr\tw2, [x29,#76]\n    69e4:\t94002361 \tbl\tf768 <__lll_lock_wait_private>\n    69e8:\t17ffffbb \tb\t68d4 <__pthread_init_static_tls+0x44>\n    69ec:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    69f0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    69f4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    69f8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    69fc:\td4000001 \tsvc\t#0x0\n    6a00:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    6a04:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    6a08:\tf9401bf7 \tldr\tx23, [sp,#48]\n    6a0c:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    6a10:\td65f03c0 \tret\n\n0000000000006a14 <__wait_lookup_done>:\n    6a14:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    6a18:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    6a1c:\t910003fd \tmov\tx29, sp\n    6a20:\tf9000bf3 \tstr\tx19, [sp,#16]\n    6a24:\td0000173 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n    6a28:\t910a4260 \tadd\tx0, x19, #0x290\n    6a2c:\tb9002fbf \tstr\twzr, [x29,#44]\n    6a30:\t91004000 \tadd\tx0, x0, #0x10\n    6a34:\t885ffc02 \tldaxr\tw2, [x0]\n    6a38:\t6b1f005f \tcmp\tw2, wzr\n    6a3c:\t54000061 \tb.ne\t6a48 <__wait_lookup_done+0x34>\n    6a40:\t88037c01 \tstxr\tw3, w1, [x0]\n    6a44:\t35ffff83 \tcbnz\tw3, 6a34 <__wait_lookup_done+0x20>\n    6a48:\t540004c1 \tb.ne\t6ae0 <__wait_lookup_done+0xcc>\n    6a4c:\td0000147 \tadrp\tx7, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    6a50:\td53bd046 \tmrs\tx6, tpidr_el0\n    6a54:\t910960e7 \tadd\tx7, x7, #0x258\n    6a58:\td11bc0c6 \tsub\tx6, x6, #0x6f0\n    6a5c:\t52800029 \tmov\tw9, #0x1                   \t// #1\n    6a60:\t5280004a \tmov\tw10, #0x2                   \t// #2\n    6a64:\tf8410ce4 \tldr\tx4, [x7,#16]!\n    6a68:\teb07009f \tcmp\tx4, x7\n    6a6c:\t540000a1 \tb.ne\t6a80 <__wait_lookup_done+0x6c>\n    6a70:\t14000023 \tb\t6afc <__wait_lookup_done+0xe8>\n    6a74:\tf9400084 \tldr\tx4, [x4]\n    6a78:\teb07009f \tcmp\tx4, x7\n    6a7c:\t54000400 \tb.eq\t6afc <__wait_lookup_done+0xe8>\n    6a80:\td1030081 \tsub\tx1, x4, #0xc0\n    6a84:\teb0100df \tcmp\tx6, x1\n    6a88:\t54ffff60 \tb.eq\t6a74 <__wait_lookup_done+0x60>\n    6a8c:\tb8544082 \tldr\tw2, [x4,#-188]\n    6a90:\t34ffff22 \tcbz\tw2, 6a74 <__wait_lookup_done+0x60>\n    6a94:\tb9002fa9 \tstr\tw9, [x29,#44]\n    6a98:\t91001025 \tadd\tx5, x1, #0x4\n    6a9c:\t2a0903e0 \tmov\tw0, w9\n    6aa0:\t885ffca1 \tldaxr\tw1, [x5]\n    6aa4:\t6b00003f \tcmp\tw1, w0\n    6aa8:\t54000061 \tb.ne\t6ab4 <__wait_lookup_done+0xa0>\n    6aac:\t88027caa \tstxr\tw2, w10, [x5]\n    6ab0:\t35ffff82 \tcbnz\tw2, 6aa0 <__wait_lookup_done+0x8c>\n    6ab4:\t540001c1 \tb.ne\t6aec <__wait_lookup_done+0xd8>\n    6ab8:\taa0503e0 \tmov\tx0, x5\n    6abc:\td2801001 \tmov\tx1, #0x80                  \t// #128\n    6ac0:\td2800042 \tmov\tx2, #0x2                   \t// #2\n    6ac4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    6ac8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    6acc:\td4000001 \tsvc\t#0x0\n    6ad0:\tb8544080 \tldr\tw0, [x4,#-188]\n    6ad4:\t7100081f \tcmp\tw0, #0x2\n    6ad8:\t54ffff00 \tb.eq\t6ab8 <__wait_lookup_done+0xa4>\n    6adc:\t17ffffe6 \tb\t6a74 <__wait_lookup_done+0x60>\n    6ae0:\tb9002fa2 \tstr\tw2, [x29,#44]\n    6ae4:\t94002321 \tbl\tf768 <__lll_lock_wait_private>\n    6ae8:\t17ffffd9 \tb\t6a4c <__wait_lookup_done+0x38>\n    6aec:\tb9002fa1 \tstr\tw1, [x29,#44]\n    6af0:\tf9400084 \tldr\tx4, [x4]\n    6af4:\teb07009f \tcmp\tx4, x7\n    6af8:\t54fffc41 \tb.ne\t6a80 <__wait_lookup_done+0x6c>\n    6afc:\t910a4260 \tadd\tx0, x19, #0x290\n    6b00:\t52800029 \tmov\tw9, #0x1                   \t// #1\n    6b04:\t91006007 \tadd\tx7, x0, #0x18\n    6b08:\t5280004a \tmov\tw10, #0x2                   \t// #2\n    6b0c:\tf9400c04 \tldr\tx4, [x0,#24]\n    6b10:\teb07009f \tcmp\tx4, x7\n    6b14:\t540000a1 \tb.ne\t6b28 <__wait_lookup_done+0x114>\n    6b18:\t14000020 \tb\t6b98 <__wait_lookup_done+0x184>\n    6b1c:\tf9400084 \tldr\tx4, [x4]\n    6b20:\teb07009f \tcmp\tx4, x7\n    6b24:\t540003a0 \tb.eq\t6b98 <__wait_lookup_done+0x184>\n    6b28:\td1030081 \tsub\tx1, x4, #0xc0\n    6b2c:\teb0100df \tcmp\tx6, x1\n    6b30:\t54ffff60 \tb.eq\t6b1c <__wait_lookup_done+0x108>\n    6b34:\tb8544082 \tldr\tw2, [x4,#-188]\n    6b38:\t34ffff22 \tcbz\tw2, 6b1c <__wait_lookup_done+0x108>\n    6b3c:\tb9002fa9 \tstr\tw9, [x29,#44]\n    6b40:\t91001025 \tadd\tx5, x1, #0x4\n    6b44:\t2a0903e0 \tmov\tw0, w9\n    6b48:\t885ffca1 \tldaxr\tw1, [x5]\n    6b4c:\t6b00003f \tcmp\tw1, w0\n    6b50:\t54000061 \tb.ne\t6b5c <__wait_lookup_done+0x148>\n    6b54:\t88027caa \tstxr\tw2, w10, [x5]\n    6b58:\t35ffff82 \tcbnz\tw2, 6b48 <__wait_lookup_done+0x134>\n    6b5c:\t54000161 \tb.ne\t6b88 <__wait_lookup_done+0x174>\n    6b60:\taa0503e0 \tmov\tx0, x5\n    6b64:\td2801001 \tmov\tx1, #0x80                  \t// #128\n    6b68:\td2800042 \tmov\tx2, #0x2                   \t// #2\n    6b6c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    6b70:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    6b74:\td4000001 \tsvc\t#0x0\n    6b78:\tb8544080 \tldr\tw0, [x4,#-188]\n    6b7c:\t7100081f \tcmp\tw0, #0x2\n    6b80:\t54ffff00 \tb.eq\t6b60 <__wait_lookup_done+0x14c>\n    6b84:\t17ffffe6 \tb\t6b1c <__wait_lookup_done+0x108>\n    6b88:\tb9002fa1 \tstr\tw1, [x29,#44]\n    6b8c:\tf9400084 \tldr\tx4, [x4]\n    6b90:\teb07009f \tcmp\tx4, x7\n    6b94:\t54fffca1 \tb.ne\t6b28 <__wait_lookup_done+0x114>\n    6b98:\t910a4260 \tadd\tx0, x19, #0x290\n    6b9c:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    6ba0:\t91004000 \tadd\tx0, x0, #0x10\n    6ba4:\t885f7c01 \tldxr\tw1, [x0]\n    6ba8:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    6bac:\t35ffffc3 \tcbnz\tw3, 6ba4 <__wait_lookup_done+0x190>\n    6bb0:\t7100043f \tcmp\tw1, #0x1\n    6bb4:\t5400008c \tb.gt\t6bc4 <__wait_lookup_done+0x1b0>\n    6bb8:\tf9400bf3 \tldr\tx19, [sp,#16]\n    6bbc:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    6bc0:\td65f03c0 \tret\n    6bc4:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    6bc8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    6bcc:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    6bd0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    6bd4:\td4000001 \tsvc\t#0x0\n    6bd8:\tf9400bf3 \tldr\tx19, [sp,#16]\n    6bdc:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    6be0:\td65f03c0 \tret\n\n0000000000006be4 <__find_in_stack_list>:\n    6be4:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    6be8:\t910003fd \tmov\tx29, sp\n    6bec:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    6bf0:\td0000174 \tadrp\tx20, 34000 <__GI___pthread_keys+0x3d78>\n    6bf4:\taa0003f3 \tmov\tx19, x0\n    6bf8:\t910a4281 \tadd\tx1, x20, #0x290\n    6bfc:\tb9002fbf \tstr\twzr, [x29,#44]\n    6c00:\t91004020 \tadd\tx0, x1, #0x10\n    6c04:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    6c08:\t885ffc02 \tldaxr\tw2, [x0]\n    6c0c:\t6b1f005f \tcmp\tw2, wzr\n    6c10:\t54000061 \tb.ne\t6c1c <__find_in_stack_list+0x38>\n    6c14:\t88037c01 \tstxr\tw3, w1, [x0]\n    6c18:\t35ffff83 \tcbnz\tw3, 6c08 <__find_in_stack_list+0x24>\n    6c1c:\t54000421 \tb.ne\t6ca0 <__find_in_stack_list+0xbc>\n    6c20:\td0000143 \tadrp\tx3, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    6c24:\t91096063 \tadd\tx3, x3, #0x258\n    6c28:\tf8410c61 \tldr\tx1, [x3,#16]!\n    6c2c:\teb03003f \tcmp\tx1, x3\n    6c30:\t54000160 \tb.eq\t6c5c <__find_in_stack_list+0x78>\n    6c34:\td1030020 \tsub\tx0, x1, #0xc0\n    6c38:\teb00027f \tcmp\tx19, x0\n    6c3c:\t54000081 \tb.ne\t6c4c <__find_in_stack_list+0x68>\n    6c40:\t1400001b \tb\t6cac <__find_in_stack_list+0xc8>\n    6c44:\teb02027f \tcmp\tx19, x2\n    6c48:\t54000320 \tb.eq\t6cac <__find_in_stack_list+0xc8>\n    6c4c:\tf9400021 \tldr\tx1, [x1]\n    6c50:\teb03003f \tcmp\tx1, x3\n    6c54:\td1030022 \tsub\tx2, x1, #0xc0\n    6c58:\t54ffff61 \tb.ne\t6c44 <__find_in_stack_list+0x60>\n    6c5c:\t910a4280 \tadd\tx0, x20, #0x290\n    6c60:\t91006002 \tadd\tx2, x0, #0x18\n    6c64:\tf9400c00 \tldr\tx0, [x0,#24]\n    6c68:\teb02001f \tcmp\tx0, x2\n    6c6c:\t54000160 \tb.eq\t6c98 <__find_in_stack_list+0xb4>\n    6c70:\td1030001 \tsub\tx1, x0, #0xc0\n    6c74:\teb01027f \tcmp\tx19, x1\n    6c78:\t54000081 \tb.ne\t6c88 <__find_in_stack_list+0xa4>\n    6c7c:\t1400000d \tb\t6cb0 <__find_in_stack_list+0xcc>\n    6c80:\teb01027f \tcmp\tx19, x1\n    6c84:\t54000160 \tb.eq\t6cb0 <__find_in_stack_list+0xcc>\n    6c88:\tf9400000 \tldr\tx0, [x0]\n    6c8c:\teb02001f \tcmp\tx0, x2\n    6c90:\td1030001 \tsub\tx1, x0, #0xc0\n    6c94:\t54ffff61 \tb.ne\t6c80 <__find_in_stack_list+0x9c>\n    6c98:\td2800013 \tmov\tx19, #0x0                   \t// #0\n    6c9c:\t14000005 \tb\t6cb0 <__find_in_stack_list+0xcc>\n    6ca0:\tb9002fa2 \tstr\tw2, [x29,#44]\n    6ca4:\t940022b1 \tbl\tf768 <__lll_lock_wait_private>\n    6ca8:\t17ffffde \tb\t6c20 <__find_in_stack_list+0x3c>\n    6cac:\tb4fffd93 \tcbz\tx19, 6c5c <__find_in_stack_list+0x78>\n    6cb0:\t910a4280 \tadd\tx0, x20, #0x290\n    6cb4:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    6cb8:\t91004000 \tadd\tx0, x0, #0x10\n    6cbc:\t885f7c01 \tldxr\tw1, [x0]\n    6cc0:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    6cc4:\t35ffffc3 \tcbnz\tw3, 6cbc <__find_in_stack_list+0xd8>\n    6cc8:\t7100043f \tcmp\tw1, #0x1\n    6ccc:\t540000ac \tb.gt\t6ce0 <__find_in_stack_list+0xfc>\n    6cd0:\taa1303e0 \tmov\tx0, x19\n    6cd4:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    6cd8:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    6cdc:\td65f03c0 \tret\n    6ce0:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    6ce4:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    6ce8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    6cec:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    6cf0:\td4000001 \tsvc\t#0x0\n    6cf4:\taa1303e0 \tmov\tx0, x19\n    6cf8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    6cfc:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    6d00:\td65f03c0 \tret\n\n0000000000006d04 <__nptl_deallocate_tsd>:\n    6d04:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n    6d08:\t910003fd \tmov\tx29, sp\n    6d0c:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    6d10:\td53bd058 \tmrs\tx24, tpidr_el0\n    6d14:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    6d18:\td11bc319 \tsub\tx25, x24, #0x6f0\n    6d1c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    6d20:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    6d24:\t39504320 \tldrb\tw0, [x25,#1040]\n    6d28:\ta90573fb \tstp\tx27, x28, [sp,#80]\n    6d2c:\t340006e0 \tcbz\tw0, 6e08 <__nptl_deallocate_tsd+0x104>\n    6d30:\td280009a \tmov\tx26, #0x4                   \t// #4\n    6d34:\td10f831c \tsub\tx28, x24, #0x3e0\n    6d38:\td000015b \tadrp\tx27, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    6d3c:\t3910433f \tstrb\twzr, [x25,#1040]\n    6d40:\taa1c03f7 \tmov\tx23, x28\n    6d44:\t91124375 \tadd\tx21, x27, #0x490\n    6d48:\td2800416 \tmov\tx22, #0x20                  \t// #32\n    6d4c:\tf94002f3 \tldr\tx19, [x23]\n    6d50:\tb40002d3 \tcbz\tx19, 6da8 <__nptl_deallocate_tsd+0xa4>\n    6d54:\t91002273 \tadd\tx19, x19, #0x8\n    6d58:\td10802b4 \tsub\tx20, x21, #0x200\n    6d5c:\t14000005 \tb\t6d70 <__nptl_deallocate_tsd+0x6c>\n    6d60:\t91004294 \tadd\tx20, x20, #0x10\n    6d64:\t91004273 \tadd\tx19, x19, #0x10\n    6d68:\teb15029f \tcmp\tx20, x21\n    6d6c:\t540001e0 \tb.eq\t6da8 <__nptl_deallocate_tsd+0xa4>\n    6d70:\tf9400260 \tldr\tx0, [x19]\n    6d74:\tb4ffff60 \tcbz\tx0, 6d60 <__nptl_deallocate_tsd+0x5c>\n    6d78:\tf85f8282 \tldr\tx2, [x20,#-8]\n    6d7c:\tf85f8263 \tldr\tx3, [x19,#-8]\n    6d80:\tf900027f \tstr\txzr, [x19]\n    6d84:\teb02007f \tcmp\tx3, x2\n    6d88:\t54fffec1 \tb.ne\t6d60 <__nptl_deallocate_tsd+0x5c>\n    6d8c:\tf9400282 \tldr\tx2, [x20]\n    6d90:\tb4fffe82 \tcbz\tx2, 6d60 <__nptl_deallocate_tsd+0x5c>\n    6d94:\td63f0040 \tblr\tx2\n    6d98:\t91004294 \tadd\tx20, x20, #0x10\n    6d9c:\teb15029f \tcmp\tx20, x21\n    6da0:\t91004273 \tadd\tx19, x19, #0x10\n    6da4:\t54fffe61 \tb.ne\t6d70 <__nptl_deallocate_tsd+0x6c>\n    6da8:\t910082d6 \tadd\tx22, x22, #0x20\n    6dac:\t910022f7 \tadd\tx23, x23, #0x8\n    6db0:\tf11082df \tcmp\tx22, #0x420\n    6db4:\t910802b5 \tadd\tx21, x21, #0x200\n    6db8:\t54fffca1 \tb.ne\t6d4c <__nptl_deallocate_tsd+0x48>\n    6dbc:\t39504320 \tldrb\tw0, [x25,#1040]\n    6dc0:\t340000e0 \tcbz\tw0, 6ddc <__nptl_deallocate_tsd+0xd8>\n    6dc4:\tf100075a \tsubs\tx26, x26, #0x1\n    6dc8:\t54fffba1 \tb.ne\t6d3c <__nptl_deallocate_tsd+0x38>\n    6dcc:\t91044320 \tadd\tx0, x25, #0x110\n    6dd0:\t2a1a03e1 \tmov\tw1, w26\n    6dd4:\td2804002 \tmov\tx2, #0x200                 \t// #512\n    6dd8:\t97fff8ae \tbl\t5090 <memset@plt>\n    6ddc:\td10f6313 \tsub\tx19, x24, #0x3d8\n    6de0:\td10b8314 \tsub\tx20, x24, #0x2e0\n    6de4:\tf9400261 \tldr\tx1, [x19]\n    6de8:\taa0103e0 \tmov\tx0, x1\n    6dec:\tb4000061 \tcbz\tx1, 6df8 <__nptl_deallocate_tsd+0xf4>\n    6df0:\t97fff90c \tbl\t5220 <free@plt>\n    6df4:\tf900027f \tstr\txzr, [x19]\n    6df8:\t91002273 \tadd\tx19, x19, #0x8\n    6dfc:\teb14027f \tcmp\tx19, x20\n    6e00:\t54ffff21 \tb.ne\t6de4 <__nptl_deallocate_tsd+0xe0>\n    6e04:\t3910433f \tstrb\twzr, [x25,#1040]\n    6e08:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    6e0c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    6e10:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    6e14:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    6e18:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    6e1c:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    6e20:\td65f03c0 \tret\n\n0000000000006e24 <__free_tcb>:\n    6e24:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    6e28:\t91042002 \tadd\tx2, x0, #0x108\n    6e2c:\t910003fd \tmov\tx29, sp\n    6e30:\tf9000bf3 \tstr\tx19, [sp,#16]\n    6e34:\tb9410801 \tldr\tw1, [x0,#264]\n    6e38:\tb9002fa1 \tstr\tw1, [x29,#44]\n    6e3c:\t321b0024 \torr\tw4, w1, #0x20\n    6e40:\t2a0103e3 \tmov\tw3, w1\n    6e44:\t885ffc45 \tldaxr\tw5, [x2]\n    6e48:\t6b0300bf \tcmp\tw5, w3\n    6e4c:\t54000061 \tb.ne\t6e58 <__free_tcb+0x34>\n    6e50:\t88067c44 \tstxr\tw6, w4, [x2]\n    6e54:\t35ffff86 \tcbnz\tw6, 6e44 <__free_tcb+0x20>\n    6e58:\t54fffee1 \tb.ne\t6e34 <__free_tcb+0x10>\n    6e5c:\t372800c1 \ttbnz\tw1, #5, 6e74 <__free_tcb+0x50>\n    6e60:\taa0003f3 \tmov\tx19, x0\n    6e64:\tf9425800 \tldr\tx0, [x0,#1200]\n    6e68:\tb50000c0 \tcbnz\tx0, 6e80 <__free_tcb+0x5c>\n    6e6c:\taa1303e0 \tmov\tx0, x19\n    6e70:\t97fffb81 \tbl\t5c74 <__deallocate_stack>\n    6e74:\tf9400bf3 \tldr\tx19, [sp,#16]\n    6e78:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    6e7c:\td65f03c0 \tret\n    6e80:\tf9025a7f \tstr\txzr, [x19,#1200]\n    6e84:\t97fff8e7 \tbl\t5220 <free@plt>\n    6e88:\t17fffff9 \tb\t6e6c <__free_tcb+0x48>\n\n0000000000006e8c <start_thread>:\n    6e8c:\ta9ae7bfd \tstp\tx29, x30, [sp,#-288]!\n    6e90:\t9112e002 \tadd\tx2, x0, #0x4b8\n    6e94:\tb0000141 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    6e98:\tf947cc21 \tldr\tx1, [x1,#3992]\n    6e9c:\t910003fd \tmov\tx29, sp\n    6ea0:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    6ea4:\taa0003f3 \tmov\tx19, x0\n    6ea8:\tf90013f5 \tstr\tx21, [sp,#32]\n    6eac:\tf9001fa0 \tstr\tx0, [x29,#56]\n    6eb0:\td53bd040 \tmrs\tx0, tpidr_el0\n    6eb4:\tf8216802 \tstr\tx2, [x0,x1]\n    6eb8:\t97fff8d6 \tbl\t5210 <__ctype_init@plt>\n    6ebc:\t91107260 \tadd\tx0, x19, #0x41c\n    6ec0:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    6ec4:\t885ffc01 \tldaxr\tw1, [x0]\n    6ec8:\t88037c02 \tstxr\tw3, w2, [x0]\n    6ecc:\t35ffffc3 \tcbnz\tw3, 6ec4 <start_thread+0x38>\n    6ed0:\t3100083f \tcmn\tw1, #0x2\n    6ed4:\t54000e00 \tb.eq\t7094 <start_thread+0x208>\n    6ed8:\tf9401fa2 \tldr\tx2, [x29,#56]\n    6edc:\td2800301 \tmov\tx1, #0x18                  \t// #24\n    6ee0:\td2800c68 \tmov\tx8, #0x63                  \t// #99\n    6ee4:\t91038040 \tadd\tx0, x2, #0xe0\n    6ee8:\td4000001 \tsvc\t#0x0\n    6eec:\tb9441440 \tldr\tw0, [x2,#1044]\n    6ef0:\t37100880 \ttbnz\tw0, #2, 7000 <start_thread+0x174>\n    6ef4:\t910123a0 \tadd\tx0, x29, #0x48\n    6ef8:\tf90083bf \tstr\txzr, [x29,#256]\n    6efc:\tf90087bf \tstr\txzr, [x29,#264]\n    6f00:\t97fff828 \tbl\t4fa0 <_setjmp@plt>\n    6f04:\t2a0003f3 \tmov\tw19, w0\n    6f08:\t35000160 \tcbnz\tw0, 6f34 <start_thread+0xa8>\n    6f0c:\tf9401fa2 \tldr\tx2, [x29,#56]\n    6f10:\t910123a1 \tadd\tx1, x29, #0x48\n    6f14:\t39504c40 \tldrb\tw0, [x2,#1043]\n    6f18:\tf9008041 \tstr\tx1, [x2,#256]\n    6f1c:\t350008e0 \tcbnz\tw0, 7038 <start_thread+0x1ac>\n    6f20:\tf9401fb3 \tldr\tx19, [x29,#56]\n    6f24:\tf9421e61 \tldr\tx1, [x19,#1080]\n    6f28:\tf9422260 \tldr\tx0, [x19,#1088]\n    6f2c:\td63f0020 \tblr\tx1\n    6f30:\tf9021660 \tstr\tx0, [x19,#1064]\n    6f34:\t97fff873 \tbl\t5100 <__call_tls_dtors@plt>\n    6f38:\t97ffff73 \tbl\t6d04 <__nptl_deallocate_tsd>\n    6f3c:\t97fff879 \tbl\t5120 <__libc_thread_freeres@plt>\n    6f40:\td0000140 \tadrp\tx0, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    6f44:\t91094000 \tadd\tx0, x0, #0x250\n    6f48:\t885ffc01 \tldaxr\tw1, [x0]\n    6f4c:\t51000422 \tsub\tw2, w1, #0x1\n    6f50:\t88037c02 \tstxr\tw3, w2, [x0]\n    6f54:\t35ffffa3 \tcbnz\tw3, 6f48 <start_thread+0xbc>\n    6f58:\t7100043f \tcmp\tw1, #0x1\n    6f5c:\t54000ae0 \tb.eq\t70b8 <start_thread+0x22c>\n    6f60:\tf9401fa0 \tldr\tx0, [x29,#56]\n    6f64:\t39504400 \tldrb\tw0, [x0,#1041]\n    6f68:\t35000c00 \tcbnz\tw0, 70e8 <start_thread+0x25c>\n    6f6c:\tf9401fa0 \tldr\tx0, [x29,#56]\n    6f70:\t91042001 \tadd\tx1, x0, #0x108\n    6f74:\tf9401fa0 \tldr\tx0, [x29,#56]\n    6f78:\tb9410800 \tldr\tw0, [x0,#264]\n    6f7c:\tb90043a0 \tstr\tw0, [x29,#64]\n    6f80:\t321c0003 \torr\tw3, w0, #0x10\n    6f84:\t885ffc22 \tldaxr\tw2, [x1]\n    6f88:\t6b00005f \tcmp\tw2, w0\n    6f8c:\t54000061 \tb.ne\t6f98 <start_thread+0x10c>\n    6f90:\t88047c23 \tstxr\tw4, w3, [x1]\n    6f94:\t35ffff84 \tcbnz\tw4, 6f84 <start_thread+0xf8>\n    6f98:\t1a9f17e0 \tcset\tw0, eq\n    6f9c:\t35000040 \tcbnz\tw0, 6fa4 <start_thread+0x118>\n    6fa0:\tb90043a2 \tstr\tw2, [x29,#64]\n    6fa4:\t34fffe80 \tcbz\tw0, 6f74 <start_thread+0xe8>\n    6fa8:\t97fff816 \tbl\t5000 <__getpagesize@plt>\n    6fac:\tf9401fa1 \tldr\tx1, [x29,#56]\n    6fb0:\tf9424822 \tldr\tx2, [x1,#1168]\n    6fb4:\t51000401 \tsub\tw1, w0, #0x1\n    6fb8:\tcb0203a0 \tsub\tx0, x29, x2\n    6fbc:\t93407c21 \tsxtw\tx1, w1\n    6fc0:\t8a210001 \tbic\tx1, x0, x1\n    6fc4:\tf140803f \tcmp\tx1, #0x20, lsl #12\n    6fc8:\t54000f88 \tb.hi\t71b8 <start_thread+0x32c>\n    6fcc:\tf9401fa1 \tldr\tx1, [x29,#56]\n    6fd0:\tf9421020 \tldr\tx0, [x1,#1056]\n    6fd4:\teb00003f \tcmp\tx1, x0\n    6fd8:\t54000ea0 \tb.eq\t71ac <start_thread+0x320>\n    6fdc:\tf9401fa0 \tldr\tx0, [x29,#56]\n    6fe0:\tb9410800 \tldr\tw0, [x0,#264]\n    6fe4:\t373009a0 \ttbnz\tw0, #6, 7118 <start_thread+0x28c>\n    6fe8:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    6fec:\td2800ba1 \tmov\tx1, #0x5d                  \t// #93\n    6ff0:\taa0203e0 \tmov\tx0, x2\n    6ff4:\taa0103e8 \tmov\tx8, x1\n    6ff8:\td4000001 \tsvc\t#0x0\n    6ffc:\t17fffffd \tb\t6ff0 <start_thread+0x164>\n    7000:\t910123b3 \tadd\tx19, x29, #0x48\n    7004:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    7008:\taa1303e0 \tmov\tx0, x19\n    700c:\td2801002 \tmov\tx2, #0x80                  \t// #128\n    7010:\t97fff820 \tbl\t5090 <memset@plt>\n    7014:\td2b00001 \tmov\tx1, #0x80000000            \t// #2147483648\n    7018:\td2800020 \tmov\tx0, #0x1                   \t// #1\n    701c:\tf90027a1 \tstr\tx1, [x29,#72]\n    7020:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    7024:\taa1303e1 \tmov\tx1, x19\n    7028:\td2800103 \tmov\tx3, #0x8                   \t// #8\n    702c:\td28010e8 \tmov\tx8, #0x87                  \t// #135\n    7030:\td4000001 \tsvc\t#0x0\n    7034:\t17ffffb0 \tb\t6ef4 <start_thread+0x68>\n    7038:\t94002178 \tbl\tf618 <__pthread_enable_asynccancel>\n    703c:\t2a0003f5 \tmov\tw21, w0\n    7040:\tf9401fa0 \tldr\tx0, [x29,#56]\n    7044:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    7048:\tb90043b3 \tstr\tw19, [x29,#64]\n    704c:\t91106014 \tadd\tx20, x0, #0x418\n    7050:\t885ffe80 \tldaxr\tw0, [x20]\n    7054:\t6b13001f \tcmp\tw0, w19\n    7058:\t54000061 \tb.ne\t7064 <start_thread+0x1d8>\n    705c:\t88027e81 \tstxr\tw2, w1, [x20]\n    7060:\t35ffff82 \tcbnz\tw2, 7050 <start_thread+0x1c4>\n    7064:\t1a9f17e1 \tcset\tw1, eq\n    7068:\t34000221 \tcbz\tw1, 70ac <start_thread+0x220>\n    706c:\t340002a1 \tcbz\tw1, 70c0 <start_thread+0x234>\n    7070:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    7074:\t885f7e80 \tldxr\tw0, [x20]\n    7078:\t8802fe81 \tstlxr\tw2, w1, [x20]\n    707c:\t35ffffc2 \tcbnz\tw2, 7074 <start_thread+0x1e8>\n    7080:\t7100041f \tcmp\tw0, #0x1\n    7084:\t5400024c \tb.gt\t70cc <start_thread+0x240>\n    7088:\t2a1503e0 \tmov\tw0, w21\n    708c:\t94002193 \tbl\tf6d8 <__pthread_disable_asynccancel>\n    7090:\t17ffffa4 \tb\t6f20 <start_thread+0x94>\n    7094:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7098:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    709c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    70a0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    70a4:\td4000001 \tsvc\t#0x0\n    70a8:\t17ffff8c \tb\t6ed8 <start_thread+0x4c>\n    70ac:\tb90043a0 \tstr\tw0, [x29,#64]\n    70b0:\t35fffe01 \tcbnz\tw1, 7070 <start_thread+0x1e4>\n    70b4:\t14000003 \tb\t70c0 <start_thread+0x234>\n    70b8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    70bc:\t97fff7b5 \tbl\t4f90 <exit@plt>\n    70c0:\taa1403e0 \tmov\tx0, x20\n    70c4:\t940021a9 \tbl\tf768 <__lll_lock_wait_private>\n    70c8:\t17ffffea \tb\t7070 <start_thread+0x1e4>\n    70cc:\taa1403e0 \tmov\tx0, x20\n    70d0:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    70d4:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    70d8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    70dc:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    70e0:\td4000001 \tsvc\t#0x0\n    70e4:\t17ffffe9 \tb\t7088 <start_thread+0x1fc>\n    70e8:\tb0000163 \tadrp\tx3, 34000 <__GI___pthread_keys+0x3d78>\n    70ec:\tf9401fa0 \tldr\tx0, [x29,#56]\n    70f0:\t910a4063 \tadd\tx3, x3, #0x290\n    70f4:\tb9444801 \tldr\tw1, [x0,#1096]\n    70f8:\tb9402860 \tldr\tw0, [x3,#40]\n    70fc:\t2a000020 \torr\tw0, w1, w0\n    7100:\t3647f360 \ttbz\tw0, #8, 6f6c <start_thread+0xe0>\n    7104:\tf9401fa0 \tldr\tx0, [x29,#56]\n    7108:\tf9423000 \tldr\tx0, [x0,#1120]\n    710c:\tb4000280 \tcbz\tx0, 715c <start_thread+0x2d0>\n    7110:\t97fffa5e \tbl\t5a88 <__GI___nptl_death_event>\n    7114:\t17ffff96 \tb\t6f6c <start_thread+0xe0>\n    7118:\tf9401fa0 \tldr\tx0, [x29,#56]\n    711c:\td2801006 \tmov\tx6, #0x80                  \t// #128\n    7120:\td2800004 \tmov\tx4, #0x0                   \t// #0\n    7124:\td2800c45 \tmov\tx5, #0x62                  \t// #98\n    7128:\t91107007 \tadd\tx7, x0, #0x41c\n    712c:\taa0703e0 \tmov\tx0, x7\n    7130:\taa0603e1 \tmov\tx1, x6\n    7134:\taa0403e2 \tmov\tx2, x4\n    7138:\taa0403e3 \tmov\tx3, x4\n    713c:\taa0503e8 \tmov\tx8, x5\n    7140:\td4000001 \tsvc\t#0x0\n    7144:\tf9401fa0 \tldr\tx0, [x29,#56]\n    7148:\tb9410800 \tldr\tw0, [x0,#264]\n    714c:\t3737ff00 \ttbnz\tw0, #6, 712c <start_thread+0x2a0>\n    7150:\tf9401fa0 \tldr\tx0, [x29,#56]\n    7154:\tb9041c04 \tstr\tw4, [x0,#1052]\n    7158:\t17ffffa4 \tb\t6fe8 <start_thread+0x15c>\n    715c:\tf9401fa4 \tldr\tx4, [x29,#56]\n    7160:\taa0403e0 \tmov\tx0, x4\n    7164:\tf9022c04 \tstr\tx4, [x0,#1112]\n    7168:\t52800120 \tmov\tw0, #0x9                   \t// #9\n    716c:\tb9045080 \tstr\tw0, [x4,#1104]\n    7170:\taa0303e1 \tmov\tx1, x3\n    7174:\tf9401fa2 \tldr\tx2, [x29,#56]\n    7178:\tf8430c20 \tldr\tx0, [x1,#48]!\n    717c:\tf9023040 \tstr\tx0, [x2,#1120]\n    7180:\tf90023a0 \tstr\tx0, [x29,#64]\n    7184:\tc85ffc22 \tldaxr\tx2, [x1]\n    7188:\teb00005f \tcmp\tx2, x0\n    718c:\t54000061 \tb.ne\t7198 <start_thread+0x30c>\n    7190:\tc8057c24 \tstxr\tw5, x4, [x1]\n    7194:\t35ffff85 \tcbnz\tw5, 7184 <start_thread+0x2f8>\n    7198:\t1a9f17e0 \tcset\tw0, eq\n    719c:\t35000040 \tcbnz\tw0, 71a4 <start_thread+0x318>\n    71a0:\tf90023a2 \tstr\tx2, [x29,#64]\n    71a4:\t34fffe60 \tcbz\tw0, 7170 <start_thread+0x2e4>\n    71a8:\t17ffffda \tb\t7110 <start_thread+0x284>\n    71ac:\tf9401fa0 \tldr\tx0, [x29,#56]\n    71b0:\t97ffff1d \tbl\t6e24 <__free_tcb>\n    71b4:\t17ffff8d \tb\t6fe8 <start_thread+0x15c>\n    71b8:\taa0203e0 \tmov\tx0, x2\n    71bc:\td1408021 \tsub\tx1, x1, #0x20, lsl #12\n    71c0:\t52800082 \tmov\tw2, #0x4                   \t// #4\n    71c4:\t97fff843 \tbl\t52d0 <__madvise@plt>\n    71c8:\t17ffff81 \tb\t6fcc <start_thread+0x140>\n\n00000000000071cc <pthread_create@@GLIBC_2.17>:\n    71cc:\ta9b17bfd \tstp\tx29, x30, [sp,#-240]!\n    71d0:\t910003fd \tmov\tx29, sp\n    71d4:\t6d0627e8 \tstp\td8, d9, [sp,#96]\n    71d8:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    71dc:\t6d072fea \tstp\td10, d11, [sp,#112]\n    71e0:\ta90573fb \tstp\tx27, x28, [sp,#80]\n    71e4:\t6d0837ec \tstp\td12, d13, [sp,#128]\n    71e8:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    71ec:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    71f0:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    71f4:\taa0103f8 \tmov\tx24, x1\n    71f8:\taa0203fb \tmov\tx27, x2\n    71fc:\t9e67000b \tfmov\td11, x0\n    7200:\t9e67006c \tfmov\td12, x3\n    7204:\t1e2703e8 \tfmov\ts8, wzr\n    7208:\tb40038a1 \tcbz\tx1, 791c <pthread_create@@GLIBC_2.17+0x750>\n    720c:\t97fff77d \tbl\t5000 <__getpagesize@plt>\n    7210:\tf9401314 \tldr\tx20, [x24,#32]\n    7214:\t51000400 \tsub\tw0, w0, #0x1\n    7218:\t93407c13 \tsxtw\tx19, w0\n    721c:\tb4001d14 \tcbz\tx20, 75bc <pthread_create@@GLIBC_2.17+0x3f0>\n    7220:\tb9400b00 \tldr\tw0, [x24,#8]\n    7224:\t37185020 \ttbnz\tw0, #3, 7c28 <pthread_create@@GLIBC_2.17+0xa5c>\n    7228:\t9000014a \tadrp\tx10, 2f000 <__FRAME_END__+0x18e30>\n    722c:\tb000016b \tadrp\tx11, 34000 <__GI___pthread_keys+0x3d78>\n    7230:\tb000016c \tadrp\tx12, 34000 <__GI___pthread_keys+0x3d78>\n    7234:\tf9400b19 \tldr\tx25, [x24,#16]\n    7238:\taa3303e0 \tmvn\tx0, x19\n    723c:\t52800095 \tmov\tw21, #0x4                   \t// #4\n    7240:\tf947ed41 \tldr\tx1, [x10,#4056]\n    7244:\t8b190279 \tadd\tx25, x19, x25\n    7248:\tf9419162 \tldr\tx2, [x11,#800]\n    724c:\t8a190019 \tand\tx25, x0, x25\n    7250:\tf9418d89 \tldr\tx9, [x12,#792]\n    7254:\t528000fa \tmov\tw26, #0x7                   \t// #7\n    7258:\tb94fa021 \tldr\tw1, [x1,#4000]\n    725c:\t91200042 \tadd\tx2, x2, #0x800\n    7260:\t8b130053 \tadd\tx19, x2, x19\n    7264:\t8a29029c \tbic\tx28, x20, x9\n    7268:\t72000021 \tands\tw1, w1, #0x1\n    726c:\t8b190273 \tadd\tx19, x19, x25\n    7270:\t8a000273 \tand\tx19, x19, x0\n    7274:\t1a9f12b5 \tcsel\tw21, w21, wzr, ne\n    7278:\t52800060 \tmov\tw0, #0x3                   \t// #3\n    727c:\t6b1f003f \tcmp\tw1, wzr\n    7280:\t1a801340 \tcsel\tw0, w26, w0, ne\n    7284:\teb13039f \tcmp\tx28, x19\n    7288:\t1e27000d \tfmov\ts13, w0\n    728c:\t54001d03 \tb.cc\t762c <pthread_create@@GLIBC_2.17+0x460>\n    7290:\tb0000174 \tadrp\tx20, 34000 <__GI___pthread_keys+0x3d78>\n    7294:\tb900b3bf \tstr\twzr, [x29,#176]\n    7298:\t910a4280 \tadd\tx0, x20, #0x290\n    729c:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    72a0:\t91004000 \tadd\tx0, x0, #0x10\n    72a4:\t885ffc02 \tldaxr\tw2, [x0]\n    72a8:\t6b1f005f \tcmp\tw2, wzr\n    72ac:\t54000061 \tb.ne\t72b8 <pthread_create@@GLIBC_2.17+0xec>\n    72b0:\t88037c01 \tstxr\tw3, w1, [x0]\n    72b4:\t35ffff83 \tcbnz\tw3, 72a4 <pthread_create@@GLIBC_2.17+0xd8>\n    72b8:\t54001581 \tb.ne\t7568 <pthread_create@@GLIBC_2.17+0x39c>\n    72bc:\tb0000156 \tadrp\tx22, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    72c0:\t910962c7 \tadd\tx7, x22, #0x258\n    72c4:\tf9412ec4 \tldr\tx4, [x22,#600]\n    72c8:\teb07009f \tcmp\tx4, x7\n    72cc:\t54002460 \tb.eq\t7758 <pthread_create@@GLIBC_2.17+0x58c>\n    72d0:\td2800013 \tmov\tx19, #0x0                   \t// #0\n    72d4:\t14000004 \tb\t72e4 <pthread_create@@GLIBC_2.17+0x118>\n    72d8:\tf9400084 \tldr\tx4, [x4]\n    72dc:\teb07009f \tcmp\tx4, x7\n    72e0:\t54000200 \tb.eq\t7320 <pthread_create@@GLIBC_2.17+0x154>\n    72e4:\td1030085 \tsub\tx5, x4, #0xc0\n    72e8:\tb940d0a6 \tldr\tw6, [x5,#208]\n    72ec:\t6b1f00df \tcmp\tw6, wzr\n    72f0:\t54ffff4c \tb.gt\t72d8 <pthread_create@@GLIBC_2.17+0x10c>\n    72f4:\tf9424ca0 \tldr\tx0, [x5,#1176]\n    72f8:\teb00039f \tcmp\tx28, x0\n    72fc:\t54fffee8 \tb.hi\t72d8 <pthread_create@@GLIBC_2.17+0x10c>\n    7300:\t54004240 \tb.eq\t7b48 <pthread_create@@GLIBC_2.17+0x97c>\n    7304:\tb4001993 \tcbz\tx19, 7634 <pthread_create@@GLIBC_2.17+0x468>\n    7308:\tf9424e61 \tldr\tx1, [x19,#1176]\n    730c:\tf9400084 \tldr\tx4, [x4]\n    7310:\teb01001f \tcmp\tx0, x1\n    7314:\t9a852273 \tcsel\tx19, x19, x5, cs\n    7318:\teb07009f \tcmp\tx4, x7\n    731c:\t54fffe41 \tb.ne\t72e4 <pthread_create@@GLIBC_2.17+0x118>\n    7320:\tb40021d3 \tcbz\tx19, 7758 <pthread_create@@GLIBC_2.17+0x58c>\n    7324:\tf9424e60 \tldr\tx0, [x19,#1176]\n    7328:\teb1c081f \tcmp\tx0, x28, lsl #2\n    732c:\t54002168 \tb.hi\t7758 <pthread_create@@GLIBC_2.17+0x58c>\n    7330:\t9103027a \tadd\tx26, x19, #0xc0\n    7334:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    7338:\tf9014a9a \tstr\tx26, [x20,#656]\n    733c:\t910962d6 \tadd\tx22, x22, #0x258\n    7340:\tb9041e60 \tstr\tw0, [x19,#1052]\n    7344:\taa1603e2 \tmov\tx2, x22\n    7348:\tb2400344 \torr\tx4, x26, #0x1\n    734c:\t910a4281 \tadd\tx1, x20, #0x290\n    7350:\td5033bbf \tdmb\tish\n    7354:\tf9406263 \tldr\tx3, [x19,#192]\n    7358:\tf9406665 \tldr\tx5, [x19,#200]\n    735c:\t91004020 \tadd\tx0, x1, #0x10\n    7360:\tf9000465 \tstr\tx5, [x3,#8]\n    7364:\tf9406665 \tldr\tx5, [x19,#200]\n    7368:\tf90000a3 \tstr\tx3, [x5]\n    736c:\td5033bbf \tdmb\tish\n    7370:\tf9014a84 \tstr\tx4, [x20,#656]\n    7374:\td5033bbf \tdmb\tish\n    7378:\tf8410c43 \tldr\tx3, [x2,#16]!\n    737c:\tf9006263 \tstr\tx3, [x19,#192]\n    7380:\tf9006662 \tstr\tx2, [x19,#200]\n    7384:\tf900047a \tstr\tx26, [x3,#8]\n    7388:\td5033bbf \tdmb\tish\n    738c:\tf9000ada \tstr\tx26, [x22,#16]\n    7390:\td5033bbf \tdmb\tish\n    7394:\tf9400422 \tldr\tx2, [x1,#8]\n    7398:\tf9424e63 \tldr\tx3, [x19,#1176]\n    739c:\tf9014a9f \tstr\txzr, [x20,#656]\n    73a0:\tcb030042 \tsub\tx2, x2, x3\n    73a4:\tf9000422 \tstr\tx2, [x1,#8]\n    73a8:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    73ac:\t885f7c01 \tldxr\tw1, [x0]\n    73b0:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    73b4:\t35ffffc3 \tcbnz\tw3, 73ac <pthread_create@@GLIBC_2.17+0x1e0>\n    73b8:\t7100043f \tcmp\tw1, #0x1\n    73bc:\t540043ac \tb.gt\t7c30 <pthread_create@@GLIBC_2.17+0xa64>\n    73c0:\tf9437a77 \tldr\tx23, [x19,#1776]\n    73c4:\td2800016 \tmov\tx22, #0x0                   \t// #0\n    73c8:\tf9424e60 \tldr\tx0, [x19,#1176]\n    73cc:\tb9010a7f \tstr\twzr, [x19,#264]\n    73d0:\t910042f5 \tadd\tx21, x23, #0x10\n    73d4:\tf9007e76 \tstr\tx22, [x19,#248]\n    73d8:\tf9023276 \tstr\tx22, [x19,#1120]\n    73dc:\t9e670009 \tfmov\td9, x0\n    73e0:\tf9424a60 \tldr\tx0, [x19,#1168]\n    73e4:\tf85f02e5 \tldr\tx5, [x23,#-16]\n    73e8:\teb0502df \tcmp\tx22, x5\n    73ec:\t9e67000a \tfmov\td10, x0\n    73f0:\t54000182 \tb.cs\t7420 <pthread_create@@GLIBC_2.17+0x254>\n    73f4:\t394022a4 \tldrb\tw4, [x21,#8]\n    73f8:\t910006d6 \tadd\tx22, x22, #0x1\n    73fc:\t350000c4 \tcbnz\tw4, 7414 <pthread_create@@GLIBC_2.17+0x248>\n    7400:\tf94002a0 \tldr\tx0, [x21]\n    7404:\tb100041f \tcmn\tx0, #0x1\n    7408:\t54000060 \tb.eq\t7414 <pthread_create@@GLIBC_2.17+0x248>\n    740c:\t97fff785 \tbl\t5220 <free@plt>\n    7410:\tf85f02e5 \tldr\tx5, [x23,#-16]\n    7414:\teb0502df \tcmp\tx22, x5\n    7418:\t910042b5 \tadd\tx21, x21, #0x10\n    741c:\t54fffec3 \tb.cc\t73f4 <pthread_create@@GLIBC_2.17+0x228>\n    7420:\t910004a2 \tadd\tx2, x5, #0x1\n    7424:\taa1703e0 \tmov\tx0, x23\n    7428:\td53bd043 \tmrs\tx3, tpidr_el0\n    742c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    7430:\td37cec42 \tlsl\tx2, x2, #4\n    7434:\t911bc275 \tadd\tx21, x19, #0x6f0\n    7438:\taa0303f7 \tmov\tx23, x3\n    743c:\taa1503f6 \tmov\tx22, x21\n    7440:\t97fff714 \tbl\t5090 <memset@plt>\n    7444:\taa1503e0 \tmov\tx0, x21\n    7448:\t97fff7ca \tbl\t5370 <_dl_allocate_tls_init@plt>\n    744c:\tf9425261 \tldr\tx1, [x19,#1184]\n    7450:\teb01033f \tcmp\tx25, x1\n    7454:\t540037e8 \tb.hi\t7b50 <pthread_create@@GLIBC_2.17+0x984>\n    7458:\t9e660120 \tfmov\tx0, d9\n    745c:\tcb190021 \tsub\tx1, x1, x25\n    7460:\tcb1c0009 \tsub\tx9, x0, x28\n    7464:\teb09003f \tcmp\tx1, x9\n    7468:\t54003d28 \tb.hi\t7c0c <pthread_create@@GLIBC_2.17+0xa40>\n    746c:\tf9025679 \tstr\tx25, [x19,#1192]\n    7470:\td11bc2f5 \tsub\tx21, x23, #0x6f0\n    7474:\tb9400b03 \tldr\tw3, [x24,#8]\n    7478:\t911122a4 \tadd\tx4, x21, #0x448\n    747c:\tb9410ea1 \tldr\tw1, [x21,#268]\n    7480:\t91038262 \tadd\tx2, x19, #0xe0\n    7484:\t12000065 \tand\tw5, w3, #0x1\n    7488:\t12197460 \tand\tw0, w3, #0xffffff9f\n    748c:\t6b1f00bf \tcmp\tw5, wzr\n    7490:\t121b0421 \tand\tw1, w1, #0x60\n    7494:\t91112265 \tadd\tx5, x19, #0x448\n    7498:\t2a000021 \torr\tw1, w1, w0\n    749c:\t928003e0 \tmov\tx0, #0xffffffffffffffe0    \t// #-32\n    74a0:\tb94436a6 \tldr\tw6, [x21,#1076]\n    74a4:\ta9402488 \tldp\tx8, x9, [x4]\n    74a8:\tf9006e62 \tstr\tx2, [x19,#216]\n    74ac:\tf9007262 \tstr\tx2, [x19,#224]\n    74b0:\td11bc262 \tsub\tx2, x19, #0x6f0\n    74b4:\tf9007660 \tstr\tx0, [x19,#232]\n    74b8:\t9a9f1260 \tcsel\tx0, x19, xzr, ne\n    74bc:\tb9041a7f \tstr\twzr, [x19,#1048]\n    74c0:\tf9021260 \tstr\tx0, [x19,#1056]\n    74c4:\tf9007a7f \tstr\txzr, [x19,#240]\n    74c8:\tf9021e7b \tstr\tx27, [x19,#1080]\n    74cc:\tfd02226c \tstr\td12, [x19,#1088]\n    74d0:\tb9010e61 \tstr\tw1, [x19,#268]\n    74d4:\ta90024a8 \tstp\tx8, x9, [x5]\n    74d8:\tf9422ea0 \tldr\tx0, [x21,#1112]\n    74dc:\tf9022e60 \tstr\tx0, [x19,#1112]\n    74e0:\tb94432a0 \tldr\tw0, [x21,#1072]\n    74e4:\tb9043260 \tstr\tw0, [x19,#1072]\n    74e8:\tb9043666 \tstr\tw6, [x19,#1076]\n    74ec:\t37082923 \ttbnz\tw3, #1, 7a10 <pthread_create@@GLIBC_2.17+0x844>\n    74f0:\t9e660161 \tfmov\tx1, d11\n    74f4:\t395046a0 \tldrb\tw0, [x21,#1041]\n    74f8:\tf9000033 \tstr\tx19, [x1]\n    74fc:\t35002e20 \tcbnz\tw0, 7ac0 <pthread_create@@GLIBC_2.17+0x8f4>\n    7500:\tf9401703 \tldr\tx3, [x24,#40]\n    7504:\tb4002703 \tcbz\tx3, 79e4 <pthread_create@@GLIBC_2.17+0x818>\n    7508:\tb9410aa0 \tldr\tw0, [x21,#264]\n    750c:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    7510:\tb9041660 \tstr\tw0, [x19,#1044]\n    7514:\t52800023 \tmov\tw3, #0x1                   \t// #1\n    7518:\t39104e61 \tstrb\tw1, [x19,#1043]\n    751c:\taa1303e0 \tmov\tx0, x19\n    7520:\taa1803e1 \tmov\tx1, x24\n    7524:\t97fffa4e \tbl\t5e5c <do_clone.constprop.4>\n    7528:\t2a0003f5 \tmov\tw21, w0\n    752c:\t34000300 \tcbz\tw0, 758c <pthread_create@@GLIBC_2.17+0x3c0>\n    7530:\t1e260100 \tfmov\tw0, s8\n    7534:\t350003e0 \tcbnz\tw0, 75b0 <pthread_create@@GLIBC_2.17+0x3e4>\n    7538:\t910003bf \tmov\tsp, x29\n    753c:\t2a1503e0 \tmov\tw0, w21\n    7540:\t6d4627e8 \tldp\td8, d9, [sp,#96]\n    7544:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    7548:\t6d472fea \tldp\td10, d11, [sp,#112]\n    754c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    7550:\t6d4837ec \tldp\td12, d13, [sp,#128]\n    7554:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    7558:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    755c:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    7560:\ta8cf7bfd \tldp\tx29, x30, [sp],#240\n    7564:\td65f03c0 \tret\n    7568:\tf9004fac \tstr\tx12, [x29,#152]\n    756c:\tf90053aa \tstr\tx10, [x29,#160]\n    7570:\tf90057ab \tstr\tx11, [x29,#168]\n    7574:\tb900b3a2 \tstr\tw2, [x29,#176]\n    7578:\t9400207c \tbl\tf768 <__lll_lock_wait_private>\n    757c:\tf9404fac \tldr\tx12, [x29,#152]\n    7580:\tf94053aa \tldr\tx10, [x29,#160]\n    7584:\tf94057ab \tldr\tx11, [x29,#168]\n    7588:\t17ffff4d \tb\t72bc <pthread_create@@GLIBC_2.17+0xf0>\n    758c:\t91106260 \tadd\tx0, x19, #0x418\n    7590:\t885f7c01 \tldxr\tw1, [x0]\n    7594:\t8802fc15 \tstlxr\tw2, w21, [x0]\n    7598:\t35ffffc2 \tcbnz\tw2, 7590 <pthread_create@@GLIBC_2.17+0x3c4>\n    759c:\t7100043f \tcmp\tw1, #0x1\n    75a0:\t5400386c \tb.gt\t7cac <pthread_create@@GLIBC_2.17+0xae0>\n    75a4:\t1e260100 \tfmov\tw0, s8\n    75a8:\t52800015 \tmov\tw21, #0x0                   \t// #0\n    75ac:\t34fffc60 \tcbz\tw0, 7538 <pthread_create@@GLIBC_2.17+0x36c>\n    75b0:\tf94073a0 \tldr\tx0, [x29,#224]\n    75b4:\t97fff71b \tbl\t5220 <free@plt>\n    75b8:\t17ffffe0 \tb\t7538 <pthread_create@@GLIBC_2.17+0x36c>\n    75bc:\tb900b3b4 \tstr\tw20, [x29,#176]\n    75c0:\tb0000174 \tadrp\tx20, 34000 <__GI___pthread_keys+0x3d78>\n    75c4:\t910a2280 \tadd\tx0, x20, #0x288\n    75c8:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    75cc:\t885ffc01 \tldaxr\tw1, [x0]\n    75d0:\t6b1f003f \tcmp\tw1, wzr\n    75d4:\t54000061 \tb.ne\t75e0 <pthread_create@@GLIBC_2.17+0x414>\n    75d8:\t88037c02 \tstxr\tw3, w2, [x0]\n    75dc:\t35ffff83 \tcbnz\tw3, 75cc <pthread_create@@GLIBC_2.17+0x400>\n    75e0:\t540002e1 \tb.ne\t763c <pthread_create@@GLIBC_2.17+0x470>\n    75e4:\tb0000161 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    75e8:\t910a2280 \tadd\tx0, x20, #0x288\n    75ec:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    75f0:\tf941a834 \tldr\tx20, [x1,#848]\n    75f4:\t885f7c01 \tldxr\tw1, [x0]\n    75f8:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    75fc:\t35ffffc3 \tcbnz\tw3, 75f4 <pthread_create@@GLIBC_2.17+0x428>\n    7600:\t7100043f \tcmp\tw1, #0x1\n    7604:\t5400348c \tb.gt\t7c94 <pthread_create@@GLIBC_2.17+0xac8>\n    7608:\tb9400b00 \tldr\tw0, [x24,#8]\n    760c:\t361fe0e0 \ttbz\tw0, #3, 7228 <pthread_create@@GLIBC_2.17+0x5c>\n    7610:\tf9401300 \tldr\tx0, [x24,#32]\n    7614:\tb40001a0 \tcbz\tx0, 7648 <pthread_create@@GLIBC_2.17+0x47c>\n    7618:\tb0000161 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    761c:\tf9419033 \tldr\tx19, [x1,#800]\n    7620:\t91200261 \tadd\tx1, x19, #0x800\n    7624:\teb00003f \tcmp\tx1, x0\n    7628:\t54000149 \tb.ls\t7650 <pthread_create@@GLIBC_2.17+0x484>\n    762c:\t528002d5 \tmov\tw21, #0x16                  \t// #22\n    7630:\t17ffffc0 \tb\t7530 <pthread_create@@GLIBC_2.17+0x364>\n    7634:\taa0503f3 \tmov\tx19, x5\n    7638:\t17ffff28 \tb\t72d8 <pthread_create@@GLIBC_2.17+0x10c>\n    763c:\tb900b3a1 \tstr\tw1, [x29,#176]\n    7640:\t9400204a \tbl\tf768 <__lll_lock_wait_private>\n    7644:\t17ffffe8 \tb\t75e4 <pthread_create@@GLIBC_2.17+0x418>\n    7648:\tb0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    764c:\tf9419013 \tldr\tx19, [x0,#800]\n    7650:\tf9400f00 \tldr\tx0, [x24,#24]\n    7654:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    7658:\td280de02 \tmov\tx2, #0x6f0                 \t// #1776\n    765c:\t52800036 \tmov\tw22, #0x1                   \t// #1\n    7660:\tcb130013 \tsub\tx19, x0, x19\n    7664:\tb0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    7668:\td53bd059 \tmrs\tx25, tpidr_el0\n    766c:\td11bc335 \tsub\tx21, x25, #0x6f0\n    7670:\tf9418c00 \tldr\tx0, [x0,#792]\n    7674:\t8a200273 \tbic\tx19, x19, x0\n    7678:\td11bc273 \tsub\tx19, x19, #0x6f0\n    767c:\taa1303e0 \tmov\tx0, x19\n    7680:\t97fff684 \tbl\t5090 <memset@plt>\n    7684:\t91044261 \tadd\tx1, x19, #0x110\n    7688:\tf9400f00 \tldr\tx0, [x24,#24]\n    768c:\tf9018a61 \tstr\tx1, [x19,#784]\n    7690:\tb0000161 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    7694:\tb9000276 \tstr\tw22, [x19]\n    7698:\tcb140000 \tsub\tx0, x0, x20\n    769c:\tf9024e74 \tstr\tx20, [x19,#1176]\n    76a0:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    76a4:\tf941b821 \tldr\tx1, [x1,#880]\n    76a8:\tf9024a60 \tstr\tx0, [x19,#1168]\n    76ac:\t911bc260 \tadd\tx0, x19, #0x6f0\n    76b0:\t39104a62 \tstrb\tw2, [x19,#1042]\n    76b4:\tb9000036 \tstr\tw22, [x1]\n    76b8:\tb0000161 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    76bc:\tb9032836 \tstr\tw22, [x1,#808]\n    76c0:\tb940d6a1 \tldr\tw1, [x21,#212]\n    76c4:\tb900d661 \tstr\tw1, [x19,#212]\n    76c8:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n    76cc:\tb9041e61 \tstr\tw1, [x19,#1052]\n    76d0:\t97fff710 \tbl\t5310 <_dl_allocate_tls@plt>\n    76d4:\tb4002d80 \tcbz\tx0, 7c84 <pthread_create@@GLIBC_2.17+0xab8>\n    76d8:\tb0000174 \tadrp\tx20, 34000 <__GI___pthread_keys+0x3d78>\n    76dc:\tb900b3bf \tstr\twzr, [x29,#176]\n    76e0:\t910a4280 \tadd\tx0, x20, #0x290\n    76e4:\t91004000 \tadd\tx0, x0, #0x10\n    76e8:\t885ffc01 \tldaxr\tw1, [x0]\n    76ec:\t6b1f003f \tcmp\tw1, wzr\n    76f0:\t54000061 \tb.ne\t76fc <pthread_create@@GLIBC_2.17+0x530>\n    76f4:\t88027c16 \tstxr\tw2, w22, [x0]\n    76f8:\t35ffff82 \tcbnz\tw2, 76e8 <pthread_create@@GLIBC_2.17+0x51c>\n    76fc:\t54002b81 \tb.ne\t7c6c <pthread_create@@GLIBC_2.17+0xaa0>\n    7700:\t910a4281 \tadd\tx1, x20, #0x290\n    7704:\t91030262 \tadd\tx2, x19, #0xc0\n    7708:\t91006020 \tadd\tx0, x1, #0x18\n    770c:\tf9006660 \tstr\tx0, [x19,#200]\n    7710:\t91004020 \tadd\tx0, x1, #0x10\n    7714:\tf9400c23 \tldr\tx3, [x1,#24]\n    7718:\tf9006263 \tstr\tx3, [x19,#192]\n    771c:\tf9000462 \tstr\tx2, [x3,#8]\n    7720:\td5033bbf \tdmb\tish\n    7724:\tf9000c22 \tstr\tx2, [x1,#24]\n    7728:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    772c:\t885f7c01 \tldxr\tw1, [x0]\n    7730:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    7734:\t35ffffc3 \tcbnz\tw3, 772c <pthread_create@@GLIBC_2.17+0x560>\n    7738:\t7100043f \tcmp\tw1, #0x1\n    773c:\t54ffe9cd \tb.le\t7474 <pthread_create@@GLIBC_2.17+0x2a8>\n    7740:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7744:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    7748:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    774c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7750:\td4000001 \tsvc\t#0x0\n    7754:\t17ffff48 \tb\t7474 <pthread_create@@GLIBC_2.17+0x2a8>\n    7758:\t910a4280 \tadd\tx0, x20, #0x290\n    775c:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    7760:\t91004000 \tadd\tx0, x0, #0x10\n    7764:\t885f7c01 \tldxr\tw1, [x0]\n    7768:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    776c:\t35ffffc3 \tcbnz\tw3, 7764 <pthread_create@@GLIBC_2.17+0x598>\n    7770:\t7100043f \tcmp\tw1, #0x1\n    7774:\t54002aec \tb.gt\t7cd0 <pthread_create@@GLIBC_2.17+0xb04>\n    7778:\t1e2601a2 \tfmov\tw2, s13\n    777c:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    7780:\t52800443 \tmov\tw3, #0x22                  \t// #34\n    7784:\taa1c03e1 \tmov\tx1, x28\n    7788:\t72a00043 \tmovk\tw3, #0x2, lsl #16\n    778c:\t12800004 \tmov\tw4, #0xffffffff            \t// #-1\n    7790:\taa0003e5 \tmov\tx5, x0\n    7794:\tf9004fac \tstr\tx12, [x29,#152]\n    7798:\tf90053aa \tstr\tx10, [x29,#160]\n    779c:\tf90057ab \tstr\tx11, [x29,#168]\n    77a0:\t97fff68c \tbl\t51d0 <mmap@plt>\n    77a4:\tb100041f \tcmn\tx0, #0x1\n    77a8:\tf94057ab \tldr\tx11, [x29,#168]\n    77ac:\t9e67000a \tfmov\td10, x0\n    77b0:\tf94053aa \tldr\tx10, [x29,#160]\n    77b4:\tf9404fac \tldr\tx12, [x29,#152]\n    77b8:\t54002fe0 \tb.eq\t7db4 <pthread_create@@GLIBC_2.17+0xbe8>\n    77bc:\t9e660143 \tfmov\tx3, d10\n    77c0:\tf9419160 \tldr\tx0, [x11,#800]\n    77c4:\tf9418d84 \tldr\tx4, [x12,#792]\n    77c8:\t5280003a \tmov\tw26, #0x1                   \t// #1\n    77cc:\tcb000380 \tsub\tx0, x28, x0\n    77d0:\td53bd041 \tmrs\tx1, tpidr_el0\n    77d4:\td11bc022 \tsub\tx2, x1, #0x6f0\n    77d8:\tf90053aa \tstr\tx10, [x29,#160]\n    77dc:\t8b000060 \tadd\tx0, x3, x0\n    77e0:\tb0000163 \tadrp\tx3, 34000 <__GI___pthread_keys+0x3d78>\n    77e4:\t8a240004 \tbic\tx4, x0, x4\n    77e8:\taa0103f7 \tmov\tx23, x1\n    77ec:\td11bc093 \tsub\tx19, x4, #0x6f0\n    77f0:\taa0403e0 \tmov\tx0, x4\n    77f4:\t91044265 \tadd\tx5, x19, #0x110\n    77f8:\tf90057a4 \tstr\tx4, [x29,#168]\n    77fc:\tb900027a \tstr\tw26, [x19]\n    7800:\tfd024a6a \tstr\td10, [x19,#1168]\n    7804:\tf941b863 \tldr\tx3, [x3,#880]\n    7808:\tf9024e7c \tstr\tx28, [x19,#1176]\n    780c:\tf9018a65 \tstr\tx5, [x19,#784]\n    7810:\tb900007a \tstr\tw26, [x3]\n    7814:\t12800003 \tmov\tw3, #0xffffffff            \t// #-1\n    7818:\tb9041e63 \tstr\tw3, [x19,#1052]\n    781c:\tb940d442 \tldr\tw2, [x2,#212]\n    7820:\tb900d662 \tstr\tw2, [x19,#212]\n    7824:\tb0000162 \tadrp\tx2, 34000 <__GI___pthread_keys+0x3d78>\n    7828:\tb903285a \tstr\tw26, [x2,#808]\n    782c:\t97fff6b9 \tbl\t5310 <_dl_allocate_tls@plt>\n    7830:\tf94057a4 \tldr\tx4, [x29,#168]\n    7834:\tf94053aa \tldr\tx10, [x29,#160]\n    7838:\tb4002b00 \tcbz\tx0, 7d98 <pthread_create@@GLIBC_2.17+0xbcc>\n    783c:\t910a4280 \tadd\tx0, x20, #0x290\n    7840:\tb900b3bf \tstr\twzr, [x29,#176]\n    7844:\t91004000 \tadd\tx0, x0, #0x10\n    7848:\t885ffc02 \tldaxr\tw2, [x0]\n    784c:\t6b1f005f \tcmp\tw2, wzr\n    7850:\t54000061 \tb.ne\t785c <pthread_create@@GLIBC_2.17+0x690>\n    7854:\t88017c1a \tstxr\tw1, w26, [x0]\n    7858:\t35ffff81 \tcbnz\tw1, 7848 <pthread_create@@GLIBC_2.17+0x67c>\n    785c:\t54001fa1 \tb.ne\t7c50 <pthread_create@@GLIBC_2.17+0xa84>\n    7860:\t910962d6 \tadd\tx22, x22, #0x258\n    7864:\t9103027a \tadd\tx26, x19, #0xc0\n    7868:\taa1603e1 \tmov\tx1, x22\n    786c:\tb2400340 \torr\tx0, x26, #0x1\n    7870:\tf9014a80 \tstr\tx0, [x20,#656]\n    7874:\t910a4280 \tadd\tx0, x20, #0x290\n    7878:\t91004000 \tadd\tx0, x0, #0x10\n    787c:\td5033bbf \tdmb\tish\n    7880:\tf8410c22 \tldr\tx2, [x1,#16]!\n    7884:\tf9006262 \tstr\tx2, [x19,#192]\n    7888:\tf9006661 \tstr\tx1, [x19,#200]\n    788c:\tf900045a \tstr\tx26, [x2,#8]\n    7890:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    7894:\td5033bbf \tdmb\tish\n    7898:\tf9000ada \tstr\tx26, [x22,#16]\n    789c:\td5033bbf \tdmb\tish\n    78a0:\tf9014a9f \tstr\txzr, [x20,#656]\n    78a4:\t885f7c01 \tldxr\tw1, [x0]\n    78a8:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    78ac:\t35ffffc3 \tcbnz\tw3, 78a4 <pthread_create@@GLIBC_2.17+0x6d8>\n    78b0:\t7100043f \tcmp\tw1, #0x1\n    78b4:\t540025ac \tb.gt\t7d68 <pthread_create@@GLIBC_2.17+0xb9c>\n    78b8:\tf947ed4a \tldr\tx10, [x10,#4056]\n    78bc:\taa0403f6 \tmov\tx22, x4\n    78c0:\t9e670389 \tfmov\td9, x28\n    78c4:\tb94fa140 \tldr\tw0, [x10,#4000]\n    78c8:\t3607dc20 \ttbz\tw0, #0, 744c <pthread_create@@GLIBC_2.17+0x280>\n    78cc:\t35ffdc15 \tcbnz\tw21, 744c <pthread_create@@GLIBC_2.17+0x280>\n    78d0:\tf9425261 \tldr\tx1, [x19,#1184]\n    78d4:\t528000e2 \tmov\tw2, #0x7                   \t// #7\n    78d8:\tf9424a60 \tldr\tx0, [x19,#1168]\n    78dc:\tf9424e63 \tldr\tx3, [x19,#1176]\n    78e0:\t8b010000 \tadd\tx0, x0, x1\n    78e4:\tcb010061 \tsub\tx1, x3, x1\n    78e8:\t97fff6b2 \tbl\t53b0 <mprotect@plt>\n    78ec:\t340022e0 \tcbz\tw0, 7d48 <pthread_create@@GLIBC_2.17+0xb7c>\n    78f0:\t90000140 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    78f4:\tf947c400 \tldr\tx0, [x0,#3976]\n    78f8:\tb8606af5 \tldr\tw21, [x23,x0]\n    78fc:\t34ffda95 \tcbz\tw21, 744c <pthread_create@@GLIBC_2.17+0x280>\n    7900:\t9e660140 \tfmov\tx0, d10\n    7904:\taa1c03e1 \tmov\tx1, x28\n    7908:\t97fff66a \tbl\t52b0 <munmap@plt>\n    790c:\t710032bf \tcmp\tw21, #0xc\n    7910:\t52800160 \tmov\tw0, #0xb                   \t// #11\n    7914:\t1a8012b5 \tcsel\tw21, w21, w0, ne\n    7918:\t17ffff06 \tb\t7530 <pthread_create@@GLIBC_2.17+0x364>\n    791c:\tb0000174 \tadrp\tx20, 34000 <__GI___pthread_keys+0x3d78>\n    7920:\tb900bba1 \tstr\tw1, [x29,#184]\n    7924:\t910a2280 \tadd\tx0, x20, #0x288\n    7928:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    792c:\t885ffc01 \tldaxr\tw1, [x0]\n    7930:\t6b1f003f \tcmp\tw1, wzr\n    7934:\t54000061 \tb.ne\t7940 <pthread_create@@GLIBC_2.17+0x774>\n    7938:\t88037c02 \tstxr\tw3, w2, [x0]\n    793c:\t35ffff83 \tcbnz\tw3, 792c <pthread_create@@GLIBC_2.17+0x760>\n    7940:\t54000060 \tb.eq\t794c <pthread_create@@GLIBC_2.17+0x780>\n    7944:\tb900bba1 \tstr\tw1, [x29,#184]\n    7948:\t94001f88 \tbl\tf768 <__lll_lock_wait_private>\n    794c:\tb0000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    7950:\t9102e3b8 \tadd\tx24, x29, #0xb8\n    7954:\t910cc000 \tadd\tx0, x0, #0x330\n    7958:\ta9401404 \tldp\tx4, x5, [x0]\n    795c:\ta9410c02 \tldp\tx2, x3, [x0,#16]\n    7960:\tf9401813 \tldr\tx19, [x0,#48]\n    7964:\ta9420400 \tldp\tx0, x1, [x0,#32]\n    7968:\tf90077b3 \tstr\tx19, [x29,#232]\n    796c:\ta9001704 \tstp\tx4, x5, [x24]\n    7970:\ta9010f02 \tstp\tx2, x3, [x24,#16]\n    7974:\ta9020700 \tstp\tx0, x1, [x24,#32]\n    7978:\tb4001693 \tcbz\tx19, 7c48 <pthread_create@@GLIBC_2.17+0xa7c>\n    797c:\tf140227f \tcmp\tx19, #0x8, lsl #12\n    7980:\t54001b48 \tb.hi\t7ce8 <pthread_create@@GLIBC_2.17+0xb1c>\n    7984:\t91007a60 \tadd\tx0, x19, #0x1e\n    7988:\t910003e1 \tmov\tx1, sp\n    798c:\t927cec00 \tand\tx0, x0, #0xfffffffffffffff0\n    7990:\t1e2703e8 \tfmov\ts8, wzr\n    7994:\tcb20603f \tsub\tsp, x1, x0\n    7998:\t910003e3 \tmov\tx3, sp\n    799c:\tf94073a1 \tldr\tx1, [x29,#224]\n    79a0:\taa0303e0 \tmov\tx0, x3\n    79a4:\taa1303e2 \tmov\tx2, x19\n    79a8:\t97fff56e \tbl\t4f60 <memcpy@plt>\n    79ac:\tf90073a0 \tstr\tx0, [x29,#224]\n    79b0:\t910a2280 \tadd\tx0, x20, #0x288\n    79b4:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    79b8:\t885f7c01 \tldxr\tw1, [x0]\n    79bc:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    79c0:\t35ffffc3 \tcbnz\tw3, 79b8 <pthread_create@@GLIBC_2.17+0x7ec>\n    79c4:\t7100043f \tcmp\tw1, #0x1\n    79c8:\t54ffc22d \tb.le\t720c <pthread_create@@GLIBC_2.17+0x40>\n    79cc:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    79d0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    79d4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    79d8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    79dc:\td4000001 \tsvc\t#0x0\n    79e0:\t17fffe0b \tb\t720c <pthread_create@@GLIBC_2.17+0x40>\n    79e4:\tb9400b00 \tldr\tw0, [x24,#8]\n    79e8:\t121f0001 \tand\tw1, w0, #0x2\n    79ec:\t370fd8e0 \ttbnz\tw0, #1, 7508 <pthread_create@@GLIBC_2.17+0x33c>\n    79f0:\tb9410aa4 \tldr\tw4, [x21,#264]\n    79f4:\taa1303e0 \tmov\tx0, x19\n    79f8:\t39104e61 \tstrb\tw1, [x19,#1043]\n    79fc:\taa1803e1 \tmov\tx1, x24\n    7a00:\tb9041664 \tstr\tw4, [x19,#1044]\n    7a04:\t97fff916 \tbl\t5e5c <do_clone.constprop.4>\n    7a08:\t2a0003f5 \tmov\tw21, w0\n    7a0c:\t17fffec9 \tb\t7530 <pthread_create@@GLIBC_2.17+0x364>\n    7a10:\t721b047f \ttst\tw3, #0x60\n    7a14:\t54ffd6e0 \tb.eq\t74f0 <pthread_create@@GLIBC_2.17+0x324>\n    7a18:\t37301303 \ttbnz\tw3, #6, 7c78 <pthread_create@@GLIBC_2.17+0xaac>\n    7a1c:\t37300121 \ttbnz\tw1, #6, 7a40 <pthread_create@@GLIBC_2.17+0x874>\n    7a20:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    7a24:\td2800f08 \tmov\tx8, #0x78                  \t// #120\n    7a28:\td4000001 \tsvc\t#0x0\n    7a2c:\tb9410e61 \tldr\tw1, [x19,#268]\n    7a30:\tb9400b03 \tldr\tw3, [x24,#8]\n    7a34:\t321a0021 \torr\tw1, w1, #0x40\n    7a38:\tb9043660 \tstr\tw0, [x19,#1076]\n    7a3c:\tb9010e61 \tstr\tw1, [x19,#268]\n    7a40:\t37281423 \ttbnz\tw3, #5, 7cc4 <pthread_create@@GLIBC_2.17+0xaf8>\n    7a44:\t37280101 \ttbnz\tw1, #5, 7a64 <pthread_create@@GLIBC_2.17+0x898>\n    7a48:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    7a4c:\t9110c261 \tadd\tx1, x19, #0x430\n    7a50:\td2800f28 \tmov\tx8, #0x79                  \t// #121\n    7a54:\td4000001 \tsvc\t#0x0\n    7a58:\tb9410e60 \tldr\tw0, [x19,#268]\n    7a5c:\t321b0000 \torr\tw0, w0, #0x20\n    7a60:\tb9010e60 \tstr\tw0, [x19,#268]\n    7a64:\tb9800700 \tldrsw\tx0, [x24,#4]\n    7a68:\td2800fc8 \tmov\tx8, #0x7e                  \t// #126\n    7a6c:\td4000001 \tsvc\t#0x0\n    7a70:\td2800fa8 \tmov\tx8, #0x7d                  \t// #125\n    7a74:\taa0003e3 \tmov\tx3, x0\n    7a78:\tb9800700 \tldrsw\tx0, [x24,#4]\n    7a7c:\td4000001 \tsvc\t#0x0\n    7a80:\tb9443261 \tldr\tw1, [x19,#1072]\n    7a84:\t6b03003f \tcmp\tw1, w3\n    7a88:\t5400006b \tb.lt\t7a94 <pthread_create@@GLIBC_2.17+0x8c8>\n    7a8c:\t6b00003f \tcmp\tw1, w0\n    7a90:\t54ffd30d \tb.le\t74f0 <pthread_create@@GLIBC_2.17+0x324>\n    7a94:\t91107260 \tadd\tx0, x19, #0x41c\n    7a98:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    7a9c:\t885ffc01 \tldaxr\tw1, [x0]\n    7aa0:\t88037c02 \tstxr\tw3, w2, [x0]\n    7aa4:\t35ffffc3 \tcbnz\tw3, 7a9c <pthread_create@@GLIBC_2.17+0x8d0>\n    7aa8:\t3100083f \tcmn\tw1, #0x2\n    7aac:\t54001520 \tb.eq\t7d50 <pthread_create@@GLIBC_2.17+0xb84>\n    7ab0:\taa1303e0 \tmov\tx0, x19\n    7ab4:\t528002d5 \tmov\tw21, #0x16                  \t// #22\n    7ab8:\t97fff86f \tbl\t5c74 <__deallocate_stack>\n    7abc:\t17fffe9d \tb\t7530 <pthread_create@@GLIBC_2.17+0x364>\n    7ac0:\t910a4294 \tadd\tx20, x20, #0x290\n    7ac4:\tb9444a61 \tldr\tw1, [x19,#1096]\n    7ac8:\tb9402a80 \tldr\tw0, [x20,#40]\n    7acc:\t2a000020 \torr\tw0, w1, w0\n    7ad0:\t363fd180 \ttbz\tw0, #7, 7500 <pthread_create@@GLIBC_2.17+0x334>\n    7ad4:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    7ad8:\taa1303e0 \tmov\tx0, x19\n    7adc:\t39104e61 \tstrb\tw1, [x19,#1043]\n    7ae0:\t52800023 \tmov\tw3, #0x1                   \t// #1\n    7ae4:\taa1803e1 \tmov\tx1, x24\n    7ae8:\t97fff8dd \tbl\t5e5c <do_clone.constprop.4>\n    7aec:\t2a0003f5 \tmov\tw21, w0\n    7af0:\t35ffd200 \tcbnz\tw0, 7530 <pthread_create@@GLIBC_2.17+0x364>\n    7af4:\t52800100 \tmov\tw0, #0x8                   \t// #8\n    7af8:\tf9022e73 \tstr\tx19, [x19,#1112]\n    7afc:\tb9045260 \tstr\tw0, [x19,#1104]\n    7b00:\taa1403e3 \tmov\tx3, x20\n    7b04:\taa0303e2 \tmov\tx2, x3\n    7b08:\tf8430c41 \tldr\tx1, [x2,#48]!\n    7b0c:\tf9023261 \tstr\tx1, [x19,#1120]\n    7b10:\tf9005ba1 \tstr\tx1, [x29,#176]\n    7b14:\tc85ffc44 \tldaxr\tx4, [x2]\n    7b18:\teb01009f \tcmp\tx4, x1\n    7b1c:\t54000061 \tb.ne\t7b28 <pthread_create@@GLIBC_2.17+0x95c>\n    7b20:\tc8007c53 \tstxr\tw0, x19, [x2]\n    7b24:\t35ffff80 \tcbnz\tw0, 7b14 <pthread_create@@GLIBC_2.17+0x948>\n    7b28:\t54fffee1 \tb.ne\t7b04 <pthread_create@@GLIBC_2.17+0x938>\n    7b2c:\t97fff7d6 \tbl\t5a84 <__GI___nptl_create_event>\n    7b30:\t91106260 \tadd\tx0, x19, #0x418\n    7b34:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    7b38:\t885f7c01 \tldxr\tw1, [x0]\n    7b3c:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    7b40:\t34ffd2e3 \tcbz\tw3, 759c <pthread_create@@GLIBC_2.17+0x3d0>\n    7b44:\t17fffffd \tb\t7b38 <pthread_create@@GLIBC_2.17+0x96c>\n    7b48:\taa0503f3 \tmov\tx19, x5\n    7b4c:\t17fffdf5 \tb\t7320 <pthread_create@@GLIBC_2.17+0x154>\n    7b50:\t9e660140 \tfmov\tx0, d10\n    7b54:\taa1903e1 \tmov\tx1, x25\n    7b58:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    7b5c:\t97fff615 \tbl\t53b0 <mprotect@plt>\n    7b60:\t34000600 \tcbz\tw0, 7c20 <pthread_create@@GLIBC_2.17+0xa54>\n    7b64:\t910a4280 \tadd\tx0, x20, #0x290\n    7b68:\tb900b3bf \tstr\twzr, [x29,#176]\n    7b6c:\t91004000 \tadd\tx0, x0, #0x10\n    7b70:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    7b74:\t885ffc01 \tldaxr\tw1, [x0]\n    7b78:\t6b1f003f \tcmp\tw1, wzr\n    7b7c:\t54000061 \tb.ne\t7b88 <pthread_create@@GLIBC_2.17+0x9bc>\n    7b80:\t88037c02 \tstxr\tw3, w2, [x0]\n    7b84:\t35ffff83 \tcbnz\tw3, 7b74 <pthread_create@@GLIBC_2.17+0x9a8>\n    7b88:\t54000060 \tb.eq\t7b94 <pthread_create@@GLIBC_2.17+0x9c8>\n    7b8c:\tb900b3a1 \tstr\tw1, [x29,#176]\n    7b90:\t94001ef6 \tbl\tf768 <__lll_lock_wait_private>\n    7b94:\tf9014a9a \tstr\tx26, [x20,#656]\n    7b98:\t910a4280 \tadd\tx0, x20, #0x290\n    7b9c:\t91004000 \tadd\tx0, x0, #0x10\n    7ba0:\td5033bbf \tdmb\tish\n    7ba4:\tf9406261 \tldr\tx1, [x19,#192]\n    7ba8:\tf9406662 \tldr\tx2, [x19,#200]\n    7bac:\tf9000422 \tstr\tx2, [x1,#8]\n    7bb0:\tf9406662 \tldr\tx2, [x19,#200]\n    7bb4:\tf9000041 \tstr\tx1, [x2]\n    7bb8:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    7bbc:\td5033bbf \tdmb\tish\n    7bc0:\tf9014a9f \tstr\txzr, [x20,#656]\n    7bc4:\t885f7c01 \tldxr\tw1, [x0]\n    7bc8:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    7bcc:\t35ffffc3 \tcbnz\tw3, 7bc4 <pthread_create@@GLIBC_2.17+0x9f8>\n    7bd0:\t7100043f \tcmp\tw1, #0x1\n    7bd4:\t54000d6c \tb.gt\t7d80 <pthread_create@@GLIBC_2.17+0xbb4>\n    7bd8:\taa1603e0 \tmov\tx0, x22\n    7bdc:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    7be0:\t97fff540 \tbl\t50e0 <_dl_deallocate_tls@plt>\n    7be4:\t9e660140 \tfmov\tx0, d10\n    7be8:\t9e660121 \tfmov\tx1, d9\n    7bec:\t97fff5b1 \tbl\t52b0 <munmap@plt>\n    7bf0:\t90000140 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    7bf4:\tf947c400 \tldr\tx0, [x0,#3976]\n    7bf8:\tb8606af5 \tldr\tw21, [x23,x0]\n    7bfc:\t35ffe895 \tcbnz\tw21, 790c <pthread_create@@GLIBC_2.17+0x740>\n    7c00:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    7c04:\tf9021c1b \tstr\tx27, [x0,#1080]\n    7c08:\td4207d00 \tbrk\t#0x3e8\n    7c0c:\t9e660140 \tfmov\tx0, d10\n    7c10:\t1e2601a2 \tfmov\tw2, s13\n    7c14:\t8b190000 \tadd\tx0, x0, x25\n    7c18:\t97fff5e6 \tbl\t53b0 <mprotect@plt>\n    7c1c:\t35fffa40 \tcbnz\tw0, 7b64 <pthread_create@@GLIBC_2.17+0x998>\n    7c20:\tf9025279 \tstr\tx25, [x19,#1184]\n    7c24:\t17fffe12 \tb\t746c <pthread_create@@GLIBC_2.17+0x2a0>\n    7c28:\taa1403e0 \tmov\tx0, x20\n    7c2c:\t17fffe7b \tb\t7618 <pthread_create@@GLIBC_2.17+0x44c>\n    7c30:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7c34:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    7c38:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    7c3c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7c40:\td4000001 \tsvc\t#0x0\n    7c44:\t17fffddf \tb\t73c0 <pthread_create@@GLIBC_2.17+0x1f4>\n    7c48:\t1e270268 \tfmov\ts8, w19\n    7c4c:\t17ffff59 \tb\t79b0 <pthread_create@@GLIBC_2.17+0x7e4>\n    7c50:\tf90053aa \tstr\tx10, [x29,#160]\n    7c54:\tf90057a4 \tstr\tx4, [x29,#168]\n    7c58:\tb900b3a2 \tstr\tw2, [x29,#176]\n    7c5c:\t94001ec3 \tbl\tf768 <__lll_lock_wait_private>\n    7c60:\tf94053aa \tldr\tx10, [x29,#160]\n    7c64:\tf94057a4 \tldr\tx4, [x29,#168]\n    7c68:\t17fffefe \tb\t7860 <pthread_create@@GLIBC_2.17+0x694>\n    7c6c:\tb900b3a1 \tstr\tw1, [x29,#176]\n    7c70:\t94001ebe \tbl\tf768 <__lll_lock_wait_private>\n    7c74:\t17fffea3 \tb\t7700 <pthread_create@@GLIBC_2.17+0x534>\n    7c78:\tb9400700 \tldr\tw0, [x24,#4]\n    7c7c:\tb9043660 \tstr\tw0, [x19,#1076]\n    7c80:\t17ffff70 \tb\t7a40 <pthread_create@@GLIBC_2.17+0x874>\n    7c84:\t90000140 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    7c88:\tf947c400 \tldr\tx0, [x0,#3976]\n    7c8c:\tb8606b35 \tldr\tw21, [x25,x0]\n    7c90:\t17ffffdb \tb\t7bfc <pthread_create@@GLIBC_2.17+0xa30>\n    7c94:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7c98:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    7c9c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    7ca0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7ca4:\td4000001 \tsvc\t#0x0\n    7ca8:\t17fffe58 \tb\t7608 <pthread_create@@GLIBC_2.17+0x43c>\n    7cac:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7cb0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    7cb4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    7cb8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7cbc:\td4000001 \tsvc\t#0x0\n    7cc0:\t17fffe1c \tb\t7530 <pthread_create@@GLIBC_2.17+0x364>\n    7cc4:\tb9400300 \tldr\tw0, [x24]\n    7cc8:\tb9043260 \tstr\tw0, [x19,#1072]\n    7ccc:\t17ffff66 \tb\t7a64 <pthread_create@@GLIBC_2.17+0x898>\n    7cd0:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7cd4:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    7cd8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    7cdc:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7ce0:\td4000001 \tsvc\t#0x0\n    7ce4:\t17fffea5 \tb\t7778 <pthread_create@@GLIBC_2.17+0x5ac>\n    7ce8:\taa1303e0 \tmov\tx0, x19\n    7cec:\t97fff59d \tbl\t5360 <__libc_alloca_cutoff@plt>\n    7cf0:\t2a0003f5 \tmov\tw21, w0\n    7cf4:\t35ffe480 \tcbnz\tw0, 7984 <pthread_create@@GLIBC_2.17+0x7b8>\n    7cf8:\taa1303e0 \tmov\tx0, x19\n    7cfc:\t97fff4e1 \tbl\t5080 <malloc@plt>\n    7d00:\taa0003e3 \tmov\tx3, x0\n    7d04:\tb4000080 \tcbz\tx0, 7d14 <pthread_create@@GLIBC_2.17+0xb48>\n    7d08:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    7d0c:\t1e270008 \tfmov\ts8, w0\n    7d10:\t17ffff23 \tb\t799c <pthread_create@@GLIBC_2.17+0x7d0>\n    7d14:\t910a2294 \tadd\tx20, x20, #0x288\n    7d18:\t885f7e80 \tldxr\tw0, [x20]\n    7d1c:\t8801fe95 \tstlxr\tw1, w21, [x20]\n    7d20:\t35ffffc1 \tcbnz\tw1, 7d18 <pthread_create@@GLIBC_2.17+0xb4c>\n    7d24:\t7100041f \tcmp\tw0, #0x1\n    7d28:\t52800195 \tmov\tw21, #0xc                   \t// #12\n    7d2c:\t54ffc06d \tb.le\t7538 <pthread_create@@GLIBC_2.17+0x36c>\n    7d30:\taa1403e0 \tmov\tx0, x20\n    7d34:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7d38:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    7d3c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7d40:\td4000001 \tsvc\t#0x0\n    7d44:\t17fffdfd \tb\t7538 <pthread_create@@GLIBC_2.17+0x36c>\n    7d48:\t9e670389 \tfmov\td9, x28\n    7d4c:\t17fffdc0 \tb\t744c <pthread_create@@GLIBC_2.17+0x280>\n    7d50:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7d54:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    7d58:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    7d5c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7d60:\td4000001 \tsvc\t#0x0\n    7d64:\t17ffff53 \tb\t7ab0 <pthread_create@@GLIBC_2.17+0x8e4>\n    7d68:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7d6c:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    7d70:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    7d74:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7d78:\td4000001 \tsvc\t#0x0\n    7d7c:\t17fffecf \tb\t78b8 <pthread_create@@GLIBC_2.17+0x6ec>\n    7d80:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    7d84:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    7d88:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    7d8c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7d90:\td4000001 \tsvc\t#0x0\n    7d94:\t17ffff91 \tb\t7bd8 <pthread_create@@GLIBC_2.17+0xa0c>\n    7d98:\t9e660140 \tfmov\tx0, d10\n    7d9c:\taa1c03e1 \tmov\tx1, x28\n    7da0:\t97fff544 \tbl\t52b0 <munmap@plt>\n    7da4:\t90000140 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    7da8:\tf947c400 \tldr\tx0, [x0,#3976]\n    7dac:\tb8606af5 \tldr\tw21, [x23,x0]\n    7db0:\t17ffff93 \tb\t7bfc <pthread_create@@GLIBC_2.17+0xa30>\n    7db4:\td53bd040 \tmrs\tx0, tpidr_el0\n    7db8:\t90000141 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    7dbc:\tf947c421 \tldr\tx1, [x1,#3976]\n    7dc0:\tb8616815 \tldr\tw21, [x0,x1]\n    7dc4:\t17ffff8e \tb\t7bfc <pthread_create@@GLIBC_2.17+0xa30>\n\n0000000000007dc8 <pthread_exit>:\n    7dc8:\td53bd041 \tmrs\tx1, tpidr_el0\n    7dcc:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    7dd0:\td11bc022 \tsub\tx2, x1, #0x6f0\n    7dd4:\td117a021 \tsub\tx1, x1, #0x5e8\n    7dd8:\t910003fd \tmov\tx29, sp\n    7ddc:\t910073a6 \tadd\tx6, x29, #0x1c\n    7de0:\t91042043 \tadd\tx3, x2, #0x108\n    7de4:\tf9021440 \tstr\tx0, [x2,#1064]\n    7de8:\tb9400020 \tldr\tw0, [x1]\n    7dec:\tb9001fa0 \tstr\tw0, [x29,#28]\n    7df0:\t321c0004 \torr\tw4, w0, #0x10\n    7df4:\t885ffc65 \tldaxr\tw5, [x3]\n    7df8:\t6b0000bf \tcmp\tw5, w0\n    7dfc:\t54000061 \tb.ne\t7e08 <pthread_exit+0x40>\n    7e00:\t88077c64 \tstxr\tw7, w4, [x3]\n    7e04:\t35ffff87 \tcbnz\tw7, 7df4 <pthread_exit+0x2c>\n    7e08:\t54000060 \tb.eq\t7e14 <pthread_exit+0x4c>\n    7e0c:\tb90000c5 \tstr\tw5, [x6]\n    7e10:\t17fffff6 \tb\t7de8 <pthread_exit+0x20>\n    7e14:\tf9408040 \tldr\tx0, [x2,#256]\n    7e18:\t94001dbb \tbl\tf504 <__pthread_unwind>\n\n0000000000007e1c <pthread_detach>:\n    7e1c:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    7e20:\taa0003e1 \tmov\tx1, x0\n    7e24:\t910003fd \tmov\tx29, sp\n    7e28:\tb940d002 \tldr\tw2, [x0,#208]\n    7e2c:\t37f802c2 \ttbnz\tw2, #31, 7e84 <pthread_detach+0x68>\n    7e30:\tf9000fbf \tstr\txzr, [x29,#24]\n    7e34:\t91108002 \tadd\tx2, x0, #0x420\n    7e38:\tc85ffc43 \tldaxr\tx3, [x2]\n    7e3c:\teb1f007f \tcmp\tx3, xzr\n    7e40:\t54000061 \tb.ne\t7e4c <pthread_detach+0x30>\n    7e44:\tc8047c41 \tstxr\tw4, x1, [x2]\n    7e48:\t35ffff84 \tcbnz\tw4, 7e38 <pthread_detach+0x1c>\n    7e4c:\t540000e1 \tb.ne\t7e68 <pthread_detach+0x4c>\n    7e50:\tb9410822 \tldr\tw2, [x1,#264]\n    7e54:\t121c0041 \tand\tw1, w2, #0x10\n    7e58:\t36200102 \ttbz\tw2, #4, 7e78 <pthread_detach+0x5c>\n    7e5c:\t97fffbf2 \tbl\t6e24 <__free_tcb>\n    7e60:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    7e64:\t14000005 \tb\t7e78 <pthread_detach+0x5c>\n    7e68:\tf9421020 \tldr\tx0, [x1,#1056]\n    7e6c:\teb01001f \tcmp\tx0, x1\n    7e70:\t528002c1 \tmov\tw1, #0x16                  \t// #22\n    7e74:\t1a8113e1 \tcsel\tw1, wzr, w1, ne\n    7e78:\t2a0103e0 \tmov\tw0, w1\n    7e7c:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    7e80:\td65f03c0 \tret\n    7e84:\t52800061 \tmov\tw1, #0x3                   \t// #3\n    7e88:\t2a0103e0 \tmov\tw0, w1\n    7e8c:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    7e90:\td65f03c0 \tret\n\n0000000000007e94 <cleanup>:\n    7e94:\td10043ff \tsub\tsp, sp, #0x10\n    7e98:\td53bd041 \tmrs\tx1, tpidr_el0\n    7e9c:\td11bc021 \tsub\tx1, x1, #0x6f0\n    7ea0:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    7ea4:\tf90007e1 \tstr\tx1, [sp,#8]\n    7ea8:\tc85ffc03 \tldaxr\tx3, [x0]\n    7eac:\teb01007f \tcmp\tx3, x1\n    7eb0:\t54000061 \tb.ne\t7ebc <cleanup+0x28>\n    7eb4:\tc8047c02 \tstxr\tw4, x2, [x0]\n    7eb8:\t35ffff84 \tcbnz\tw4, 7ea8 <cleanup+0x14>\n    7ebc:\t910043ff \tadd\tsp, sp, #0x10\n    7ec0:\td65f03c0 \tret\n\n0000000000007ec4 <pthread_join>:\n    7ec4:\ta9b97bfd \tstp\tx29, x30, [sp,#-112]!\n    7ec8:\t910003fd \tmov\tx29, sp\n    7ecc:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    7ed0:\taa0003f3 \tmov\tx19, x0\n    7ed4:\tb940d000 \tldr\tw0, [x0,#208]\n    7ed8:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    7edc:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    7ee0:\t37f80a20 \ttbnz\tw0, #31, 8024 <pthread_join+0x160>\n    7ee4:\tf9421262 \tldr\tx2, [x19,#1056]\n    7ee8:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    7eec:\teb13005f \tcmp\tx2, x19\n    7ef0:\t54000420 \tb.eq\t7f74 <pthread_join+0xb0>\n    7ef4:\taa0103f7 \tmov\tx23, x1\n    7ef8:\t91108276 \tadd\tx22, x19, #0x420\n    7efc:\t910143b8 \tadd\tx24, x29, #0x50\n    7f00:\t90000001 \tadrp\tx1, 7000 <start_thread+0x174>\n    7f04:\taa1803e0 \tmov\tx0, x24\n    7f08:\t913a5021 \tadd\tx1, x1, #0xe94\n    7f0c:\taa1603e2 \tmov\tx2, x22\n    7f10:\td53bd055 \tmrs\tx21, tpidr_el0\n    7f14:\td11bc2b5 \tsub\tx21, x21, #0x6f0\n    7f18:\t94001cba \tbl\tf200 <_pthread_cleanup_push>\n    7f1c:\t94001dbf \tbl\tf618 <__pthread_enable_asynccancel>\n    7f20:\t2a0003e5 \tmov\tw5, w0\n    7f24:\teb15027f \tcmp\tx19, x21\n    7f28:\t54000700 \tb.eq\t8008 <pthread_join+0x144>\n    7f2c:\tf94212a0 \tldr\tx0, [x21,#1056]\n    7f30:\teb13001f \tcmp\tx0, x19\n    7f34:\t54000640 \tb.eq\t7ffc <pthread_join+0x138>\n    7f38:\tf90027bf \tstr\txzr, [x29,#72]\n    7f3c:\tc85ffec0 \tldaxr\tx0, [x22]\n    7f40:\teb1f001f \tcmp\tx0, xzr\n    7f44:\t54000061 \tb.ne\t7f50 <pthread_join+0x8c>\n    7f48:\tc8017ed5 \tstxr\tw1, x21, [x22]\n    7f4c:\t35ffff81 \tcbnz\tw1, 7f3c <pthread_join+0x78>\n    7f50:\t540001c0 \tb.eq\t7f88 <pthread_join+0xc4>\n    7f54:\tf90027a0 \tstr\tx0, [x29,#72]\n    7f58:\t528002d4 \tmov\tw20, #0x16                  \t// #22\n    7f5c:\t2a0503e0 \tmov\tw0, w5\n    7f60:\t94001dde \tbl\tf6d8 <__pthread_disable_asynccancel>\n    7f64:\taa1803e0 \tmov\tx0, x24\n    7f68:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    7f6c:\t94001cad \tbl\tf220 <_pthread_cleanup_pop>\n    7f70:\t2a1403e0 \tmov\tw0, w20\n    7f74:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    7f78:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    7f7c:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    7f80:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    7f84:\td65f03c0 \tret\n    7f88:\tb940d262 \tldr\tw2, [x19,#208]\n    7f8c:\t34000142 \tcbz\tw2, 7fb4 <pthread_join+0xf0>\n    7f90:\t91034264 \tadd\tx4, x19, #0xd0\n    7f94:\td2800001 \tmov\tx1, #0x0                   \t// #0\n    7f98:\taa0403e0 \tmov\tx0, x4\n    7f9c:\t93407c42 \tsxtw\tx2, w2\n    7fa0:\taa0103e3 \tmov\tx3, x1\n    7fa4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    7fa8:\td4000001 \tsvc\t#0x0\n    7fac:\tb940d262 \tldr\tw2, [x19,#208]\n    7fb0:\t35ffff22 \tcbnz\tw2, 7f94 <pthread_join+0xd0>\n    7fb4:\t2a0503e0 \tmov\tw0, w5\n    7fb8:\t94001dc8 \tbl\tf6d8 <__pthread_disable_asynccancel>\n    7fbc:\taa1803e0 \tmov\tx0, x24\n    7fc0:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    7fc4:\t94001c97 \tbl\tf220 <_pthread_cleanup_pop>\n    7fc8:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    7fcc:\tb900d260 \tstr\tw0, [x19,#208]\n    7fd0:\tb4000077 \tcbz\tx23, 7fdc <pthread_join+0x118>\n    7fd4:\tf9421660 \tldr\tx0, [x19,#1064]\n    7fd8:\tf90002e0 \tstr\tx0, [x23]\n    7fdc:\taa1303e0 \tmov\tx0, x19\n    7fe0:\t97fffb91 \tbl\t6e24 <__free_tcb>\n    7fe4:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    7fe8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    7fec:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    7ff0:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    7ff4:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    7ff8:\td65f03c0 \tret\n    7ffc:\tb9410a60 \tldr\tw0, [x19,#264]\n    8000:\t721e0c1f \ttst\tw0, #0x3c\n    8004:\t54fff9a1 \tb.ne\t7f38 <pthread_join+0x74>\n    8008:\tb9410aa1 \tldr\tw1, [x21,#264]\n    800c:\t128008c0 \tmov\tw0, #0xffffffb9            \t// #-71\n    8010:\t52800474 \tmov\tw20, #0x23                  \t// #35\n    8014:\t0a000020 \tand\tw0, w1, w0\n    8018:\t7100201f \tcmp\tw0, #0x8\n    801c:\t54fffa01 \tb.ne\t7f5c <pthread_join+0x98>\n    8020:\t17ffffc6 \tb\t7f38 <pthread_join+0x74>\n    8024:\t52800060 \tmov\tw0, #0x3                   \t// #3\n    8028:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    802c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    8030:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    8034:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    8038:\td65f03c0 \tret\n\n000000000000803c <pthread_tryjoin_np>:\n    803c:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    8040:\t910003fd \tmov\tx29, sp\n    8044:\tf9421002 \tldr\tx2, [x0,#1056]\n    8048:\tf9000bf3 \tstr\tx19, [sp,#16]\n    804c:\teb00005f \tcmp\tx2, x0\n    8050:\t54000380 \tb.eq\t80c0 <pthread_tryjoin_np+0x84>\n    8054:\td53bd042 \tmrs\tx2, tpidr_el0\n    8058:\td11bc042 \tsub\tx2, x2, #0x6f0\n    805c:\teb02001f \tcmp\tx0, x2\n    8060:\t54000160 \tb.eq\t808c <pthread_tryjoin_np+0x50>\n    8064:\tf9421043 \tldr\tx3, [x2,#1056]\n    8068:\teb00007f \tcmp\tx3, x0\n    806c:\t54000100 \tb.eq\t808c <pthread_tryjoin_np+0x50>\n    8070:\tb940d013 \tldr\tw19, [x0,#208]\n    8074:\t34000173 \tcbz\tw19, 80a0 <pthread_tryjoin_np+0x64>\n    8078:\t52800213 \tmov\tw19, #0x10                  \t// #16\n    807c:\t2a1303e0 \tmov\tw0, w19\n    8080:\tf9400bf3 \tldr\tx19, [sp,#16]\n    8084:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    8088:\td65f03c0 \tret\n    808c:\t52800473 \tmov\tw19, #0x23                  \t// #35\n    8090:\t2a1303e0 \tmov\tw0, w19\n    8094:\tf9400bf3 \tldr\tx19, [sp,#16]\n    8098:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    809c:\td65f03c0 \tret\n    80a0:\tf90017bf \tstr\txzr, [x29,#40]\n    80a4:\t91108003 \tadd\tx3, x0, #0x420\n    80a8:\tc85ffc64 \tldaxr\tx4, [x3]\n    80ac:\teb1f009f \tcmp\tx4, xzr\n    80b0:\t54000061 \tb.ne\t80bc <pthread_tryjoin_np+0x80>\n    80b4:\tc8057c62 \tstxr\tw5, x2, [x3]\n    80b8:\t35ffff85 \tcbnz\tw5, 80a8 <pthread_tryjoin_np+0x6c>\n    80bc:\t540000c0 \tb.eq\t80d4 <pthread_tryjoin_np+0x98>\n    80c0:\t528002d3 \tmov\tw19, #0x16                  \t// #22\n    80c4:\t2a1303e0 \tmov\tw0, w19\n    80c8:\tf9400bf3 \tldr\tx19, [sp,#16]\n    80cc:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    80d0:\td65f03c0 \tret\n    80d4:\tb4000061 \tcbz\tx1, 80e0 <pthread_tryjoin_np+0xa4>\n    80d8:\tf9421402 \tldr\tx2, [x0,#1064]\n    80dc:\tf9000022 \tstr\tx2, [x1]\n    80e0:\t97fffb51 \tbl\t6e24 <__free_tcb>\n    80e4:\t17ffffe6 \tb\t807c <pthread_tryjoin_np+0x40>\n\n00000000000080e8 <cleanup>:\n    80e8:\tf900001f \tstr\txzr, [x0]\n    80ec:\td65f03c0 \tret\n\n00000000000080f0 <pthread_timedjoin_np>:\n    80f0:\ta9b97bfd \tstp\tx29, x30, [sp,#-112]!\n    80f4:\t910003fd \tmov\tx29, sp\n    80f8:\tb940d003 \tldr\tw3, [x0,#208]\n    80fc:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    8100:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    8104:\tf9001bf7 \tstr\tx23, [sp,#48]\n    8108:\t37f80a43 \ttbnz\tw3, #31, 8250 <pthread_timedjoin_np+0x160>\n    810c:\tf9421003 \tldr\tx3, [x0,#1056]\n    8110:\teb00007f \tcmp\tx3, x0\n    8114:\t54000220 \tb.eq\t8158 <pthread_timedjoin_np+0x68>\n    8118:\td53bd043 \tmrs\tx3, tpidr_el0\n    811c:\td11bc063 \tsub\tx3, x3, #0x6f0\n    8120:\teb03001f \tcmp\tx0, x3\n    8124:\t54000640 \tb.eq\t81ec <pthread_timedjoin_np+0xfc>\n    8128:\tf9421065 \tldr\tx5, [x3,#1056]\n    812c:\t52800464 \tmov\tw4, #0x23                  \t// #35\n    8130:\teb0000bf \tcmp\tx5, x0\n    8134:\t54000140 \tb.eq\t815c <pthread_timedjoin_np+0x6c>\n    8138:\tf9002bbf \tstr\txzr, [x29,#80]\n    813c:\t91108004 \tadd\tx4, x0, #0x420\n    8140:\tc85ffc85 \tldaxr\tx5, [x4]\n    8144:\teb1f00bf \tcmp\tx5, xzr\n    8148:\t54000061 \tb.ne\t8154 <pthread_timedjoin_np+0x64>\n    814c:\tc8067c83 \tstxr\tw6, x3, [x4]\n    8150:\t35ffff86 \tcbnz\tw6, 8140 <pthread_timedjoin_np+0x50>\n    8154:\t54000100 \tb.eq\t8174 <pthread_timedjoin_np+0x84>\n    8158:\t528002c4 \tmov\tw4, #0x16                  \t// #22\n    815c:\t2a0403e0 \tmov\tw0, w4\n    8160:\tf9401bf7 \tldr\tx23, [sp,#48]\n    8164:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    8168:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    816c:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    8170:\td65f03c0 \tret\n    8174:\taa0103f5 \tmov\tx21, x1\n    8178:\t910143b6 \tadd\tx22, x29, #0x50\n    817c:\t90000001 \tadrp\tx1, 8000 <pthread_join+0x13c>\n    8180:\taa0003f3 \tmov\tx19, x0\n    8184:\t9103a021 \tadd\tx1, x1, #0xe8\n    8188:\taa1603e0 \tmov\tx0, x22\n    818c:\taa0203f4 \tmov\tx20, x2\n    8190:\taa0403e2 \tmov\tx2, x4\n    8194:\t94001c1b \tbl\tf200 <_pthread_cleanup_push>\n    8198:\t94001d20 \tbl\tf618 <__pthread_enable_asynccancel>\n    819c:\t2a0003f7 \tmov\tw23, w0\n    81a0:\tb940d261 \tldr\tw1, [x19,#208]\n    81a4:\t35000321 \tcbnz\tw1, 8208 <pthread_timedjoin_np+0x118>\n    81a8:\tf90027a1 \tstr\tx1, [x29,#72]\n    81ac:\t94001d4b \tbl\tf6d8 <__pthread_disable_asynccancel>\n    81b0:\tf94027a1 \tldr\tx1, [x29,#72]\n    81b4:\taa1603e0 \tmov\tx0, x22\n    81b8:\t94001c1a \tbl\tf220 <_pthread_cleanup_pop>\n    81bc:\tb4000075 \tcbz\tx21, 81c8 <pthread_timedjoin_np+0xd8>\n    81c0:\tf9421660 \tldr\tx0, [x19,#1064]\n    81c4:\tf90002a0 \tstr\tx0, [x21]\n    81c8:\taa1303e0 \tmov\tx0, x19\n    81cc:\t97fffb16 \tbl\t6e24 <__free_tcb>\n    81d0:\tf9401bf7 \tldr\tx23, [sp,#48]\n    81d4:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    81d8:\t2a0403e0 \tmov\tw0, w4\n    81dc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    81e0:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    81e4:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    81e8:\td65f03c0 \tret\n    81ec:\t52800464 \tmov\tw4, #0x23                  \t// #35\n    81f0:\tf9401bf7 \tldr\tx23, [sp,#48]\n    81f4:\t2a0403e0 \tmov\tw0, w4\n    81f8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    81fc:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    8200:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    8204:\td65f03c0 \tret\n    8208:\taa1403e1 \tmov\tx1, x20\n    820c:\t91034260 \tadd\tx0, x19, #0xd0\n    8210:\t94001dcf \tbl\tf94c <__lll_timedwait_tid>\n    8214:\t2a0003f4 \tmov\tw20, w0\n    8218:\t2a1703e0 \tmov\tw0, w23\n    821c:\t94001d2f \tbl\tf6d8 <__pthread_disable_asynccancel>\n    8220:\taa1603e0 \tmov\tx0, x22\n    8224:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    8228:\t94001bfe \tbl\tf220 <_pthread_cleanup_pop>\n    822c:\t34fffc94 \tcbz\tw20, 81bc <pthread_timedjoin_np+0xcc>\n    8230:\tf902127f \tstr\txzr, [x19,#1056]\n    8234:\t2a1403e4 \tmov\tw4, w20\n    8238:\t2a0403e0 \tmov\tw0, w4\n    823c:\tf9401bf7 \tldr\tx23, [sp,#48]\n    8240:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    8244:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    8248:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    824c:\td65f03c0 \tret\n    8250:\t52800064 \tmov\tw4, #0x3                   \t// #3\n    8254:\tf9401bf7 \tldr\tx23, [sp,#48]\n    8258:\t2a0403e0 \tmov\tw0, w4\n    825c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    8260:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    8264:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    8268:\td65f03c0 \tret\n\n000000000000826c <pthread_self>:\n    826c:\td53bd040 \tmrs\tx0, tpidr_el0\n    8270:\td11bc000 \tsub\tx0, x0, #0x6f0\n    8274:\td65f03c0 \tret\n\n0000000000008278 <pthread_equal>:\n    8278:\teb01001f \tcmp\tx0, x1\n    827c:\t1a9f17e0 \tcset\tw0, eq\n    8280:\td65f03c0 \tret\n\n0000000000008284 <pthread_yield>:\n    8284:\t17fff3db \tb\t51f0 <sched_yield@plt>\n\n0000000000008288 <pthread_getconcurrency>:\n    8288:\t90000160 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    828c:\tb9437800 \tldr\tw0, [x0,#888]\n    8290:\td65f03c0 \tret\n\n0000000000008294 <pthread_setconcurrency>:\n    8294:\t2a0003e1 \tmov\tw1, w0\n    8298:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    829c:\t37f80081 \ttbnz\tw1, #31, 82ac <pthread_setconcurrency+0x18>\n    82a0:\t90000162 \tadrp\tx2, 34000 <__GI___pthread_keys+0x3d78>\n    82a4:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    82a8:\tb9037841 \tstr\tw1, [x2,#888]\n    82ac:\td65f03c0 \tret\n\n00000000000082b0 <pthread_getschedparam>:\n    82b0:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    82b4:\t910003fd \tmov\tx29, sp\n    82b8:\tb940d003 \tldr\tw3, [x0,#208]\n    82bc:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    82c0:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    82c4:\t6b1f007f \tcmp\tw3, wzr\n    82c8:\t5400074d \tb.le\t83b0 <pthread_getschedparam+0x100>\n    82cc:\taa0003f3 \tmov\tx19, x0\n    82d0:\t91106014 \tadd\tx20, x0, #0x418\n    82d4:\taa0203f6 \tmov\tx22, x2\n    82d8:\taa0103f5 \tmov\tx21, x1\n    82dc:\tb9003fbf \tstr\twzr, [x29,#60]\n    82e0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    82e4:\t885ffe81 \tldaxr\tw1, [x20]\n    82e8:\t6b1f003f \tcmp\tw1, wzr\n    82ec:\t54000061 \tb.ne\t82f8 <pthread_getschedparam+0x48>\n    82f0:\t88027e80 \tstxr\tw2, w0, [x20]\n    82f4:\t35ffff82 \tcbnz\tw2, 82e4 <pthread_getschedparam+0x34>\n    82f8:\t54000281 \tb.ne\t8348 <pthread_getschedparam+0x98>\n    82fc:\tb9410e60 \tldr\tw0, [x19,#268]\n    8300:\t362802e0 \ttbz\tw0, #5, 835c <pthread_getschedparam+0xac>\n    8304:\t363003c0 \ttbz\tw0, #6, 837c <pthread_getschedparam+0xcc>\n    8308:\tb9443660 \tldr\tw0, [x19,#1076]\n    830c:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    8310:\tb90002a0 \tstr\tw0, [x21]\n    8314:\tb9443260 \tldr\tw0, [x19,#1072]\n    8318:\tb90002c0 \tstr\tw0, [x22]\n    831c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    8320:\t885f7e80 \tldxr\tw0, [x20]\n    8324:\t8802fe81 \tstlxr\tw2, w1, [x20]\n    8328:\t35ffffc2 \tcbnz\tw2, 8320 <pthread_getschedparam+0x70>\n    832c:\t7100041f \tcmp\tw0, #0x1\n    8330:\t540004cc \tb.gt\t83c8 <pthread_getschedparam+0x118>\n    8334:\t2a0403e0 \tmov\tw0, w4\n    8338:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    833c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    8340:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    8344:\td65f03c0 \tret\n    8348:\taa1403e0 \tmov\tx0, x20\n    834c:\tb9003fa1 \tstr\tw1, [x29,#60]\n    8350:\t94001d06 \tbl\tf768 <__lll_lock_wait_private>\n    8354:\tb9410e60 \tldr\tw0, [x19,#268]\n    8358:\t372ffd60 \ttbnz\tw0, #5, 8304 <pthread_getschedparam+0x54>\n    835c:\tb940d260 \tldr\tw0, [x19,#208]\n    8360:\t9110c261 \tadd\tx1, x19, #0x430\n    8364:\t97fff373 \tbl\t5130 <__sched_getparam@plt>\n    8368:\t340001c0 \tcbz\tw0, 83a0 <pthread_getschedparam+0xf0>\n    836c:\tb9410e60 \tldr\tw0, [x19,#268]\n    8370:\t363003a0 \ttbz\tw0, #6, 83e4 <pthread_getschedparam+0x134>\n    8374:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    8378:\t17ffffe9 \tb\t831c <pthread_getschedparam+0x6c>\n    837c:\tb940d260 \tldr\tw0, [x19,#208]\n    8380:\t97fff3ec \tbl\t5330 <__sched_getscheduler@plt>\n    8384:\t3100041f \tcmn\tw0, #0x1\n    8388:\tb9043660 \tstr\tw0, [x19,#1076]\n    838c:\t54ffff40 \tb.eq\t8374 <pthread_getschedparam+0xc4>\n    8390:\tb9410e60 \tldr\tw0, [x19,#268]\n    8394:\t321a0000 \torr\tw0, w0, #0x40\n    8398:\tb9010e60 \tstr\tw0, [x19,#268]\n    839c:\t17ffffdb \tb\t8308 <pthread_getschedparam+0x58>\n    83a0:\tb9410e60 \tldr\tw0, [x19,#268]\n    83a4:\t321b0000 \torr\tw0, w0, #0x20\n    83a8:\tb9010e60 \tstr\tw0, [x19,#268]\n    83ac:\t17ffffd6 \tb\t8304 <pthread_getschedparam+0x54>\n    83b0:\t52800064 \tmov\tw4, #0x3                   \t// #3\n    83b4:\t2a0403e0 \tmov\tw0, w4\n    83b8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    83bc:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    83c0:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    83c4:\td65f03c0 \tret\n    83c8:\taa1403e0 \tmov\tx0, x20\n    83cc:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    83d0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    83d4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    83d8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    83dc:\td4000001 \tsvc\t#0x0\n    83e0:\t17ffffd5 \tb\t8334 <pthread_getschedparam+0x84>\n    83e4:\tb940d260 \tldr\tw0, [x19,#208]\n    83e8:\t97fff3d2 \tbl\t5330 <__sched_getscheduler@plt>\n    83ec:\t3100041f \tcmn\tw0, #0x1\n    83f0:\tb9043660 \tstr\tw0, [x19,#1076]\n    83f4:\t54fffc00 \tb.eq\t8374 <pthread_getschedparam+0xc4>\n    83f8:\tb9410e60 \tldr\tw0, [x19,#268]\n    83fc:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    8400:\t321a0000 \torr\tw0, w0, #0x40\n    8404:\tb9010e60 \tstr\tw0, [x19,#268]\n    8408:\t17ffffc5 \tb\t831c <pthread_getschedparam+0x6c>\n\n000000000000840c <pthread_setschedparam>:\n    840c:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    8410:\t910003fd \tmov\tx29, sp\n    8414:\tb940d003 \tldr\tw3, [x0,#208]\n    8418:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    841c:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    8420:\t6b1f007f \tcmp\tw3, wzr\n    8424:\t5400056d \tb.le\t84d0 <pthread_setschedparam+0xc4>\n    8428:\taa0003f3 \tmov\tx19, x0\n    842c:\t91106014 \tadd\tx20, x0, #0x418\n    8430:\taa0203f5 \tmov\tx21, x2\n    8434:\t2a0103f6 \tmov\tw22, w1\n    8438:\tb9003bbf \tstr\twzr, [x29,#56]\n    843c:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    8440:\t885ffe81 \tldaxr\tw1, [x20]\n    8444:\t6b1f003f \tcmp\tw1, wzr\n    8448:\t54000061 \tb.ne\t8454 <pthread_setschedparam+0x48>\n    844c:\t88027e80 \tstxr\tw2, w0, [x20]\n    8450:\t35ffff82 \tcbnz\tw2, 8440 <pthread_setschedparam+0x34>\n    8454:\t54000361 \tb.ne\t84c0 <pthread_setschedparam+0xb4>\n    8458:\tf9425a60 \tldr\tx0, [x19,#1200]\n    845c:\taa1503e2 \tmov\tx2, x21\n    8460:\tb5000440 \tcbnz\tx0, 84e8 <pthread_setschedparam+0xdc>\n    8464:\tb940d260 \tldr\tw0, [x19,#208]\n    8468:\t2a1603e1 \tmov\tw1, w22\n    846c:\t97fff389 \tbl\t5290 <__sched_setscheduler@plt>\n    8470:\t3100041f \tcmn\tw0, #0x1\n    8474:\t54000480 \tb.eq\t8504 <pthread_setschedparam+0xf8>\n    8478:\tb9043676 \tstr\tw22, [x19,#1076]\n    847c:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    8480:\tb9410e60 \tldr\tw0, [x19,#268]\n    8484:\tb94002a1 \tldr\tw1, [x21]\n    8488:\t321b0400 \torr\tw0, w0, #0x60\n    848c:\tb9043261 \tstr\tw1, [x19,#1072]\n    8490:\tb9010e60 \tstr\tw0, [x19,#268]\n    8494:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    8498:\t885f7e80 \tldxr\tw0, [x20]\n    849c:\t8802fe81 \tstlxr\tw2, w1, [x20]\n    84a0:\t35ffffc2 \tcbnz\tw2, 8498 <pthread_setschedparam+0x8c>\n    84a4:\t7100041f \tcmp\tw0, #0x1\n    84a8:\t5400038c \tb.gt\t8518 <pthread_setschedparam+0x10c>\n    84ac:\t2a0403e0 \tmov\tw0, w4\n    84b0:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    84b4:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    84b8:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    84bc:\td65f03c0 \tret\n    84c0:\taa1403e0 \tmov\tx0, x20\n    84c4:\tb9003ba1 \tstr\tw1, [x29,#56]\n    84c8:\t94001ca8 \tbl\tf768 <__lll_lock_wait_private>\n    84cc:\t17ffffe3 \tb\t8458 <pthread_setschedparam+0x4c>\n    84d0:\t52800064 \tmov\tw4, #0x3                   \t// #3\n    84d4:\t2a0403e0 \tmov\tw0, w4\n    84d8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    84dc:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    84e0:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    84e4:\td65f03c0 \tret\n    84e8:\tb9400000 \tldr\tw0, [x0]\n    84ec:\tb94002a1 \tldr\tw1, [x21]\n    84f0:\t6b01001f \tcmp\tw0, w1\n    84f4:\t54fffb8d \tb.le\t8464 <pthread_setschedparam+0x58>\n    84f8:\t910103a2 \tadd\tx2, x29, #0x40\n    84fc:\tb81f8c40 \tstr\tw0, [x2,#-8]!\n    8500:\t17ffffd9 \tb\t8464 <pthread_setschedparam+0x58>\n    8504:\td53bd040 \tmrs\tx0, tpidr_el0\n    8508:\tf0000121 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    850c:\tf947c421 \tldr\tx1, [x1,#3976]\n    8510:\tb8616804 \tldr\tw4, [x0,x1]\n    8514:\t17ffffe0 \tb\t8494 <pthread_setschedparam+0x88>\n    8518:\taa1403e0 \tmov\tx0, x20\n    851c:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    8520:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    8524:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    8528:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    852c:\td4000001 \tsvc\t#0x0\n    8530:\t17ffffdf \tb\t84ac <pthread_setschedparam+0xa0>\n\n0000000000008534 <pthread_setschedprio>:\n    8534:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    8538:\t910003fd \tmov\tx29, sp\n    853c:\tb940d002 \tldr\tw2, [x0,#208]\n    8540:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    8544:\tf90013f5 \tstr\tx21, [sp,#32]\n    8548:\t6b1f005f \tcmp\tw2, wzr\n    854c:\t5400052d \tb.le\t85f0 <pthread_setschedprio+0xbc>\n    8550:\taa0003f3 \tmov\tx19, x0\n    8554:\t91106015 \tadd\tx21, x0, #0x418\n    8558:\t2a0103f4 \tmov\tw20, w1\n    855c:\tb9003ba1 \tstr\tw1, [x29,#56]\n    8560:\tb9003fbf \tstr\twzr, [x29,#60]\n    8564:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    8568:\t885ffea1 \tldaxr\tw1, [x21]\n    856c:\t6b1f003f \tcmp\tw1, wzr\n    8570:\t54000061 \tb.ne\t857c <pthread_setschedprio+0x48>\n    8574:\t88027ea0 \tstxr\tw2, w0, [x21]\n    8578:\t35ffff82 \tcbnz\tw2, 8568 <pthread_setschedprio+0x34>\n    857c:\t54000321 \tb.ne\t85e0 <pthread_setschedprio+0xac>\n    8580:\tf9425a60 \tldr\tx0, [x19,#1200]\n    8584:\tb5000420 \tcbnz\tx0, 8608 <pthread_setschedprio+0xd4>\n    8588:\tb940d260 \tldr\tw0, [x19,#208]\n    858c:\t9100e3a1 \tadd\tx1, x29, #0x38\n    8590:\t97fff304 \tbl\t51a0 <sched_setparam@plt>\n    8594:\t3100041f \tcmn\tw0, #0x1\n    8598:\t54000420 \tb.eq\t861c <pthread_setschedprio+0xe8>\n    859c:\tb9410e60 \tldr\tw0, [x19,#268]\n    85a0:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    85a4:\tb9003bb4 \tstr\tw20, [x29,#56]\n    85a8:\t321b0000 \torr\tw0, w0, #0x20\n    85ac:\tb9043274 \tstr\tw20, [x19,#1072]\n    85b0:\tb9010e60 \tstr\tw0, [x19,#268]\n    85b4:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    85b8:\t885f7ea0 \tldxr\tw0, [x21]\n    85bc:\t8802fea1 \tstlxr\tw2, w1, [x21]\n    85c0:\t35ffffc2 \tcbnz\tw2, 85b8 <pthread_setschedprio+0x84>\n    85c4:\t7100041f \tcmp\tw0, #0x1\n    85c8:\t5400034c \tb.gt\t8630 <pthread_setschedprio+0xfc>\n    85cc:\t2a0403e0 \tmov\tw0, w4\n    85d0:\tf94013f5 \tldr\tx21, [sp,#32]\n    85d4:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    85d8:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    85dc:\td65f03c0 \tret\n    85e0:\taa1503e0 \tmov\tx0, x21\n    85e4:\tb9003fa1 \tstr\tw1, [x29,#60]\n    85e8:\t94001c60 \tbl\tf768 <__lll_lock_wait_private>\n    85ec:\t17ffffe5 \tb\t8580 <pthread_setschedprio+0x4c>\n    85f0:\t52800064 \tmov\tw4, #0x3                   \t// #3\n    85f4:\tf94013f5 \tldr\tx21, [sp,#32]\n    85f8:\t2a0403e0 \tmov\tw0, w4\n    85fc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    8600:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    8604:\td65f03c0 \tret\n    8608:\tb9400000 \tldr\tw0, [x0]\n    860c:\t6b00029f \tcmp\tw20, w0\n    8610:\t54fffbca \tb.ge\t8588 <pthread_setschedprio+0x54>\n    8614:\tb9003ba0 \tstr\tw0, [x29,#56]\n    8618:\t17ffffdc \tb\t8588 <pthread_setschedprio+0x54>\n    861c:\td53bd040 \tmrs\tx0, tpidr_el0\n    8620:\tf0000121 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    8624:\tf947c421 \tldr\tx1, [x1,#3976]\n    8628:\tb8616804 \tldr\tw4, [x0,x1]\n    862c:\t17ffffe2 \tb\t85b4 <pthread_setschedprio+0x80>\n    8630:\taa1503e0 \tmov\tx0, x21\n    8634:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    8638:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    863c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    8640:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    8644:\td4000001 \tsvc\t#0x0\n    8648:\t17ffffe1 \tb\t85cc <pthread_setschedprio+0x98>\n\n000000000000864c <pthread_attr_init@@GLIBC_2.17>:\n    864c:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    8650:\t910003fd \tmov\tx29, sp\n    8654:\tf9000bf3 \tstr\tx19, [sp,#16]\n    8658:\taa0003f3 \tmov\tx19, x0\n    865c:\ta9007c1f \tstp\txzr, xzr, [x0]\n    8660:\ta9017c1f \tstp\txzr, xzr, [x0,#16]\n    8664:\ta9027c1f \tstp\txzr, xzr, [x0,#32]\n    8668:\ta9037c1f \tstp\txzr, xzr, [x0,#48]\n    866c:\t97fff265 \tbl\t5000 <__getpagesize@plt>\n    8670:\t93407c01 \tsxtw\tx1, w0\n    8674:\tf9000a61 \tstr\tx1, [x19,#16]\n    8678:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    867c:\tf9400bf3 \tldr\tx19, [sp,#16]\n    8680:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    8684:\td65f03c0 \tret\n\n0000000000008688 <pthread_attr_destroy>:\n    8688:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    868c:\t910003fd \tmov\tx29, sp\n    8690:\tf9401400 \tldr\tx0, [x0,#40]\n    8694:\t97fff2e3 \tbl\t5220 <free@plt>\n    8698:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    869c:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n    86a0:\td65f03c0 \tret\n\n00000000000086a4 <pthread_attr_getdetachstate>:\n    86a4:\tb9400802 \tldr\tw2, [x0,#8]\n    86a8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    86ac:\t12000042 \tand\tw2, w2, #0x1\n    86b0:\tb9000022 \tstr\tw2, [x1]\n    86b4:\td65f03c0 \tret\n\n00000000000086b8 <pthread_attr_setdetachstate>:\n    86b8:\t7100043f \tcmp\tw1, #0x1\n    86bc:\t540000e0 \tb.eq\t86d8 <pthread_attr_setdetachstate+0x20>\n    86c0:\t35000181 \tcbnz\tw1, 86f0 <pthread_attr_setdetachstate+0x38>\n    86c4:\tb9400802 \tldr\tw2, [x0,#8]\n    86c8:\t121f7842 \tand\tw2, w2, #0xfffffffe\n    86cc:\tb9000802 \tstr\tw2, [x0,#8]\n    86d0:\t2a0103e0 \tmov\tw0, w1\n    86d4:\td65f03c0 \tret\n    86d8:\tb9400802 \tldr\tw2, [x0,#8]\n    86dc:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    86e0:\t32000042 \torr\tw2, w2, #0x1\n    86e4:\tb9000802 \tstr\tw2, [x0,#8]\n    86e8:\t2a0103e0 \tmov\tw0, w1\n    86ec:\td65f03c0 \tret\n    86f0:\t528002c1 \tmov\tw1, #0x16                  \t// #22\n    86f4:\t17fffff7 \tb\t86d0 <pthread_attr_setdetachstate+0x18>\n\n00000000000086f8 <pthread_attr_getguardsize>:\n    86f8:\tf9400802 \tldr\tx2, [x0,#16]\n    86fc:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8700:\tf9000022 \tstr\tx2, [x1]\n    8704:\td65f03c0 \tret\n\n0000000000008708 <pthread_attr_setguardsize>:\n    8708:\tf9000801 \tstr\tx1, [x0,#16]\n    870c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8710:\td65f03c0 \tret\n\n0000000000008714 <pthread_attr_getschedparam>:\n    8714:\tb9400002 \tldr\tw2, [x0]\n    8718:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    871c:\tb9000022 \tstr\tw2, [x1]\n    8720:\td65f03c0 \tret\n\n0000000000008724 <pthread_attr_setschedparam>:\n    8724:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    8728:\t910003fd \tmov\tx29, sp\n    872c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    8730:\tb9400413 \tldr\tw19, [x0,#4]\n    8734:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    8738:\taa0003f5 \tmov\tx21, x0\n    873c:\t2a1303e0 \tmov\tw0, w19\n    8740:\tb9400036 \tldr\tw22, [x1]\n    8744:\tf9001fa1 \tstr\tx1, [x29,#56]\n    8748:\t97fff28e \tbl\t5180 <__sched_get_priority_min@plt>\n    874c:\t2a0003f4 \tmov\tw20, w0\n    8750:\t2a1303e0 \tmov\tw0, w19\n    8754:\t97fff2ff \tbl\t5350 <__sched_get_priority_max@plt>\n    8758:\t37f80074 \ttbnz\tw20, #31, 8764 <pthread_attr_setschedparam+0x40>\n    875c:\tf9401fa1 \tldr\tx1, [x29,#56]\n    8760:\t36f800c0 \ttbz\tw0, #31, 8778 <pthread_attr_setschedparam+0x54>\n    8764:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    8768:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    876c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    8770:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    8774:\td65f03c0 \tret\n    8778:\t6b1402df \tcmp\tw22, w20\n    877c:\t54ffff4b \tb.lt\t8764 <pthread_attr_setschedparam+0x40>\n    8780:\t6b0002df \tcmp\tw22, w0\n    8784:\t54ffff0c \tb.gt\t8764 <pthread_attr_setschedparam+0x40>\n    8788:\tb9400aa2 \tldr\tw2, [x21,#8]\n    878c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8790:\tb9400021 \tldr\tw1, [x1]\n    8794:\tb90002a1 \tstr\tw1, [x21]\n    8798:\t321b0042 \torr\tw2, w2, #0x20\n    879c:\tb9000aa2 \tstr\tw2, [x21,#8]\n    87a0:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    87a4:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    87a8:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    87ac:\td65f03c0 \tret\n\n00000000000087b0 <pthread_attr_getschedpolicy>:\n    87b0:\tb9400402 \tldr\tw2, [x0,#4]\n    87b4:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    87b8:\tb9000022 \tstr\tw2, [x1]\n    87bc:\td65f03c0 \tret\n\n00000000000087c0 <pthread_attr_setschedpolicy>:\n    87c0:\t7100083f \tcmp\tw1, #0x2\n    87c4:\t528002c2 \tmov\tw2, #0x16                  \t// #22\n    87c8:\t540000c8 \tb.hi\t87e0 <pthread_attr_setschedpolicy+0x20>\n    87cc:\tb9400803 \tldr\tw3, [x0,#8]\n    87d0:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    87d4:\tb9000401 \tstr\tw1, [x0,#4]\n    87d8:\t321a0063 \torr\tw3, w3, #0x40\n    87dc:\tb9000803 \tstr\tw3, [x0,#8]\n    87e0:\t2a0203e0 \tmov\tw0, w2\n    87e4:\td65f03c0 \tret\n\n00000000000087e8 <pthread_attr_getinheritsched>:\n    87e8:\tb9400802 \tldr\tw2, [x0,#8]\n    87ec:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    87f0:\td3410442 \tubfx\tx2, x2, #1, #1\n    87f4:\tb9000022 \tstr\tw2, [x1]\n    87f8:\td65f03c0 \tret\n\n00000000000087fc <pthread_attr_setinheritsched>:\n    87fc:\t7100043f \tcmp\tw1, #0x1\n    8800:\taa0003e2 \tmov\tx2, x0\n    8804:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    8808:\t54000049 \tb.ls\t8810 <pthread_attr_setinheritsched+0x14>\n    880c:\td65f03c0 \tret\n    8810:\t350000c1 \tcbnz\tw1, 8828 <pthread_attr_setinheritsched+0x2c>\n    8814:\tb9400843 \tldr\tw3, [x2,#8]\n    8818:\t2a0103e0 \tmov\tw0, w1\n    881c:\t121e7863 \tand\tw3, w3, #0xfffffffd\n    8820:\tb9000843 \tstr\tw3, [x2,#8]\n    8824:\td65f03c0 \tret\n    8828:\tb9400841 \tldr\tw1, [x2,#8]\n    882c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8830:\t321f0021 \torr\tw1, w1, #0x2\n    8834:\tb9000841 \tstr\tw1, [x2,#8]\n    8838:\td65f03c0 \tret\n\n000000000000883c <pthread_attr_getscope>:\n    883c:\tb9400802 \tldr\tw2, [x0,#8]\n    8840:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8844:\td3420842 \tubfx\tx2, x2, #2, #1\n    8848:\tb9000022 \tstr\tw2, [x1]\n    884c:\td65f03c0 \tret\n\n0000000000008850 <pthread_attr_setscope>:\n    8850:\t340000e1 \tcbz\tw1, 886c <pthread_attr_setscope+0x1c>\n    8854:\t7100043f \tcmp\tw1, #0x1\n    8858:\t52800be0 \tmov\tw0, #0x5f                  \t// #95\n    885c:\t528002c1 \tmov\tw1, #0x16                  \t// #22\n    8860:\t1a810001 \tcsel\tw1, w0, w1, eq\n    8864:\t2a0103e0 \tmov\tw0, w1\n    8868:\td65f03c0 \tret\n    886c:\tb9400802 \tldr\tw2, [x0,#8]\n    8870:\t121d7842 \tand\tw2, w2, #0xfffffffb\n    8874:\tb9000802 \tstr\tw2, [x0,#8]\n    8878:\t2a0103e0 \tmov\tw0, w1\n    887c:\td65f03c0 \tret\n\n0000000000008880 <pthread_attr_getstackaddr>:\n    8880:\tf9400c02 \tldr\tx2, [x0,#24]\n    8884:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8888:\tf9000022 \tstr\tx2, [x1]\n    888c:\td65f03c0 \tret\n\n0000000000008890 <pthread_attr_setstackaddr>:\n    8890:\taa0003e2 \tmov\tx2, x0\n    8894:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8898:\tb9400843 \tldr\tw3, [x2,#8]\n    889c:\tf9000c41 \tstr\tx1, [x2,#24]\n    88a0:\t321d0063 \torr\tw3, w3, #0x8\n    88a4:\tb9000843 \tstr\tw3, [x2,#8]\n    88a8:\td65f03c0 \tret\n\n00000000000088ac <pthread_attr_getstacksize>:\n    88ac:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    88b0:\t910003fd \tmov\tx29, sp\n    88b4:\tf9401004 \tldr\tx4, [x0,#32]\n    88b8:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    88bc:\taa0103f4 \tmov\tx20, x1\n    88c0:\tb40000c4 \tcbz\tx4, 88d8 <pthread_attr_getstacksize+0x2c>\n    88c4:\tf9000284 \tstr\tx4, [x20]\n    88c8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    88cc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    88d0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    88d4:\td65f03c0 \tret\n    88d8:\t90000173 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n    88dc:\tb9002fa4 \tstr\tw4, [x29,#44]\n    88e0:\t910a2260 \tadd\tx0, x19, #0x288\n    88e4:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    88e8:\t885ffc02 \tldaxr\tw2, [x0]\n    88ec:\t6b1f005f \tcmp\tw2, wzr\n    88f0:\t54000061 \tb.ne\t88fc <pthread_attr_getstacksize+0x50>\n    88f4:\t88037c01 \tstxr\tw3, w1, [x0]\n    88f8:\t35ffff83 \tcbnz\tw3, 88e8 <pthread_attr_getstacksize+0x3c>\n    88fc:\t54000201 \tb.ne\t893c <pthread_attr_getstacksize+0x90>\n    8900:\t90000161 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    8904:\t910a2260 \tadd\tx0, x19, #0x288\n    8908:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    890c:\tf941a824 \tldr\tx4, [x1,#848]\n    8910:\t885f7c01 \tldxr\tw1, [x0]\n    8914:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    8918:\t35ffffc3 \tcbnz\tw3, 8910 <pthread_attr_getstacksize+0x64>\n    891c:\t7100043f \tcmp\tw1, #0x1\n    8920:\t54fffd2d \tb.le\t88c4 <pthread_attr_getstacksize+0x18>\n    8924:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    8928:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    892c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    8930:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    8934:\td4000001 \tsvc\t#0x0\n    8938:\t17ffffe3 \tb\t88c4 <pthread_attr_getstacksize+0x18>\n    893c:\tb9002fa2 \tstr\tw2, [x29,#44]\n    8940:\t94001b8a \tbl\tf768 <__lll_lock_wait_private>\n    8944:\t17ffffef \tb\t8900 <pthread_attr_getstacksize+0x54>\n\n0000000000008948 <pthread_attr_setstacksize@@GLIBC_2.17>:\n    8948:\tb24043e2 \tmov\tx2, #0x1ffff               \t// #131071\n    894c:\teb02003f \tcmp\tx1, x2\n    8950:\t54000068 \tb.hi\t895c <pthread_attr_setstacksize@@GLIBC_2.17+0x14>\n    8954:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    8958:\td65f03c0 \tret\n    895c:\tf9001001 \tstr\tx1, [x0,#32]\n    8960:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8964:\td65f03c0 \tret\n\n0000000000008968 <pthread_attr_getstack>:\n    8968:\taa0003e3 \tmov\tx3, x0\n    896c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8970:\tf9401064 \tldr\tx4, [x3,#32]\n    8974:\tf9400c63 \tldr\tx3, [x3,#24]\n    8978:\tcb040063 \tsub\tx3, x3, x4\n    897c:\tf9000023 \tstr\tx3, [x1]\n    8980:\tf9000044 \tstr\tx4, [x2]\n    8984:\td65f03c0 \tret\n\n0000000000008988 <pthread_attr_setstack@@GLIBC_2.17>:\n    8988:\tb24043e3 \tmov\tx3, #0x1ffff               \t// #131071\n    898c:\teb03005f \tcmp\tx2, x3\n    8990:\t54000088 \tb.hi\t89a0 <pthread_attr_setstack@@GLIBC_2.17+0x18>\n    8994:\t528002c2 \tmov\tw2, #0x16                  \t// #22\n    8998:\t2a0203e0 \tmov\tw0, w2\n    899c:\td65f03c0 \tret\n    89a0:\tb9400803 \tldr\tw3, [x0,#8]\n    89a4:\t8b020021 \tadd\tx1, x1, x2\n    89a8:\tf9001002 \tstr\tx2, [x0,#32]\n    89ac:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    89b0:\t321d0063 \torr\tw3, w3, #0x8\n    89b4:\tf9000c01 \tstr\tx1, [x0,#24]\n    89b8:\tb9000803 \tstr\tw3, [x0,#8]\n    89bc:\t2a0203e0 \tmov\tw0, w2\n    89c0:\td65f03c0 \tret\n\n00000000000089c4 <pthread_getattr_np>:\n    89c4:\ta9b57bfd \tstp\tx29, x30, [sp,#-176]!\n    89c8:\t910003fd \tmov\tx29, sp\n    89cc:\t6d0627e8 \tstp\td8, d9, [sp,#96]\n    89d0:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    89d4:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    89d8:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    89dc:\taa0003f5 \tmov\tx21, x0\n    89e0:\t91106019 \tadd\tx25, x0, #0x418\n    89e4:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    89e8:\ta90573fb \tstp\tx27, x28, [sp,#80]\n    89ec:\tb900a3bf \tstr\twzr, [x29,#160]\n    89f0:\taa0103f7 \tmov\tx23, x1\n    89f4:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    89f8:\tfd003bea \tstr\td10, [sp,#112]\n    89fc:\t885fff21 \tldaxr\tw1, [x25]\n    8a00:\t6b1f003f \tcmp\tw1, wzr\n    8a04:\t54000061 \tb.ne\t8a10 <pthread_getattr_np+0x4c>\n    8a08:\t88027f20 \tstxr\tw2, w0, [x25]\n    8a0c:\t35ffff82 \tcbnz\tw2, 89fc <pthread_getattr_np+0x38>\n    8a10:\t54000741 \tb.ne\t8af8 <pthread_getattr_np+0x134>\n    8a14:\tb94432a0 \tldr\tw0, [x21,#1072]\n    8a18:\tb90002e0 \tstr\tw0, [x23]\n    8a1c:\tf94212a2 \tldr\tx2, [x21,#1056]\n    8a20:\tb94436a1 \tldr\tw1, [x21,#1076]\n    8a24:\tb9410ea0 \tldr\tw0, [x21,#268]\n    8a28:\teb15005f \tcmp\tx2, x21\n    8a2c:\tb90006e1 \tstr\tw1, [x23,#4]\n    8a30:\tb9000ae0 \tstr\tw0, [x23,#8]\n    8a34:\t54000740 \tb.eq\t8b1c <pthread_getattr_np+0x158>\n    8a38:\tf94256a1 \tldr\tx1, [x21,#1192]\n    8a3c:\tf9424ab3 \tldr\tx19, [x21,#1168]\n    8a40:\tf9000ae1 \tstr\tx1, [x23,#16]\n    8a44:\tb4000793 \tcbz\tx19, 8b34 <pthread_getattr_np+0x170>\n    8a48:\tf9424ea1 \tldr\tx1, [x21,#1176]\n    8a4c:\t321d0000 \torr\tw0, w0, #0x8\n    8a50:\tf90012e1 \tstr\tx1, [x23,#32]\n    8a54:\tb9000ae0 \tstr\tw0, [x23,#8]\n    8a58:\t8b010261 \tadd\tx1, x19, x1\n    8a5c:\tf9000ee1 \tstr\tx1, [x23,#24]\n    8a60:\td2800016 \tmov\tx22, #0x0                   \t// #0\n    8a64:\td2800213 \tmov\tx19, #0x10                  \t// #16\n    8a68:\tb2404ff8 \tmov\tx24, #0xfffff               \t// #1048575\n    8a6c:\t14000007 \tb\t8a88 <pthread_getattr_np+0xc4>\n    8a70:\t9400227e \tbl\t11468 <pthread_getaffinity_np@@GLIBC_2.17>\n    8a74:\t7100581f \tcmp\tw0, #0x16\n    8a78:\taa1403f6 \tmov\tx22, x20\n    8a7c:\t54000461 \tb.ne\t8b08 <pthread_getattr_np+0x144>\n    8a80:\teb18027f \tcmp\tx19, x24\n    8a84:\t54000428 \tb.hi\t8b08 <pthread_getattr_np+0x144>\n    8a88:\td37ffa73 \tlsl\tx19, x19, #1\n    8a8c:\taa1603e0 \tmov\tx0, x22\n    8a90:\taa1303e1 \tmov\tx1, x19\n    8a94:\t97fff19f \tbl\t5110 <realloc@plt>\n    8a98:\taa0003f4 \tmov\tx20, x0\n    8a9c:\taa1303e1 \tmov\tx1, x19\n    8aa0:\taa1503e0 \tmov\tx0, x21\n    8aa4:\taa1403e2 \tmov\tx2, x20\n    8aa8:\tb5fffe54 \tcbnz\tx20, 8a70 <pthread_getattr_np+0xac>\n    8aac:\taa1603e0 \tmov\tx0, x22\n    8ab0:\t52800196 \tmov\tw22, #0xc                   \t// #12\n    8ab4:\t97fff1db \tbl\t5220 <free@plt>\n    8ab8:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    8abc:\t885f7f20 \tldxr\tw0, [x25]\n    8ac0:\t8802ff21 \tstlxr\tw2, w1, [x25]\n    8ac4:\t35ffffc2 \tcbnz\tw2, 8abc <pthread_getattr_np+0xf8>\n    8ac8:\t7100041f \tcmp\tw0, #0x1\n    8acc:\t5400096c \tb.gt\t8bf8 <pthread_getattr_np+0x234>\n    8ad0:\t2a1603e0 \tmov\tw0, w22\n    8ad4:\t6d4627e8 \tldp\td8, d9, [sp,#96]\n    8ad8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    8adc:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    8ae0:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    8ae4:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    8ae8:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    8aec:\tfd403bea \tldr\td10, [sp,#112]\n    8af0:\ta8cb7bfd \tldp\tx29, x30, [sp],#176\n    8af4:\td65f03c0 \tret\n    8af8:\taa1903e0 \tmov\tx0, x25\n    8afc:\tb900a3a1 \tstr\tw1, [x29,#160]\n    8b00:\t94001b1a \tbl\tf768 <__lll_lock_wait_private>\n    8b04:\t17ffffc4 \tb\t8a14 <pthread_getattr_np+0x50>\n    8b08:\t2a0003f6 \tmov\tw22, w0\n    8b0c:\t35000f40 \tcbnz\tw0, 8cf4 <pthread_getattr_np+0x330>\n    8b10:\tf90016f4 \tstr\tx20, [x23,#40]\n    8b14:\tf9001af3 \tstr\tx19, [x23,#48]\n    8b18:\t17ffffe8 \tb\t8ab8 <pthread_getattr_np+0xf4>\n    8b1c:\tf94256a1 \tldr\tx1, [x21,#1192]\n    8b20:\t32000000 \torr\tw0, w0, #0x1\n    8b24:\tf9424ab3 \tldr\tx19, [x21,#1168]\n    8b28:\tb9000ae0 \tstr\tw0, [x23,#8]\n    8b2c:\tf9000ae1 \tstr\tx1, [x23,#16]\n    8b30:\tb5fff8d3 \tcbnz\tx19, 8a48 <pthread_getattr_np+0x84>\n    8b34:\td0000040 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n    8b38:\td0000041 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n    8b3c:\t912e6000 \tadd\tx0, x0, #0xb98\n    8b40:\t912ea021 \tadd\tx1, x1, #0xba8\n    8b44:\t97fff14b \tbl\t5070 <fopen@plt>\n    8b48:\taa0003f4 \tmov\tx20, x0\n    8b4c:\tb4000a20 \tcbz\tx0, 8c90 <pthread_getattr_np+0x2cc>\n    8b50:\t52800060 \tmov\tw0, #0x3                   \t// #3\n    8b54:\t910283a1 \tadd\tx1, x29, #0xa0\n    8b58:\t97fff1da \tbl\t52c0 <getrlimit@plt>\n    8b5c:\t35000740 \tcbnz\tw0, 8c44 <pthread_getattr_np+0x280>\n    8b60:\tf0000120 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    8b64:\tb9400284 \tldr\tw4, [x20]\n    8b68:\t9e670268 \tfmov\td8, x19\n    8b6c:\td0000058 \tadrp\tx24, 12000 <__pthread_current_priority+0xa8>\n    8b70:\t32110084 \torr\tw4, w4, #0x8000\n    8b74:\t910203bb \tadd\tx27, x29, #0x80\n    8b78:\tf947e001 \tldr\tx1, [x0,#4032]\n    8b7c:\tf0000120 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    8b80:\t910223ba \tadd\tx26, x29, #0x88\n    8b84:\t912ec318 \tadd\tx24, x24, #0xbb0\n    8b88:\t910243b6 \tadd\tx22, x29, #0x90\n    8b8c:\t910263bc \tadd\tx28, x29, #0x98\n    8b90:\tf947d400 \tldr\tx0, [x0,#4008]\n    8b94:\tf9400021 \tldr\tx1, [x1]\n    8b98:\tb9000284 \tstr\tw4, [x20]\n    8b9c:\tf9400c00 \tldr\tx0, [x0,#24]\n    8ba0:\t9e67002a \tfmov\td10, x1\n    8ba4:\tf90043b3 \tstr\tx19, [x29,#128]\n    8ba8:\tf90047b3 \tstr\tx19, [x29,#136]\n    8bac:\t9e670009 \tfmov\td9, x0\n    8bb0:\taa1a03e1 \tmov\tx1, x26\n    8bb4:\taa1403e3 \tmov\tx3, x20\n    8bb8:\taa1b03e0 \tmov\tx0, x27\n    8bbc:\t52800142 \tmov\tw2, #0xa                   \t// #10\n    8bc0:\t121c0093 \tand\tw19, w4, #0x10\n    8bc4:\t372005e4 \ttbnz\tw4, #4, 8c80 <pthread_getattr_np+0x2bc>\n    8bc8:\t97fff1fe \tbl\t53c0 <__getdelim@plt>\n    8bcc:\teb1f001f \tcmp\tx0, xzr\n    8bd0:\taa1803e1 \tmov\tx1, x24\n    8bd4:\taa1603e2 \tmov\tx2, x22\n    8bd8:\taa1c03e3 \tmov\tx3, x28\n    8bdc:\t5400052d \tb.le\t8c80 <pthread_getattr_np+0x2bc>\n    8be0:\tf94043a0 \tldr\tx0, [x29,#128]\n    8be4:\t97fff13b \tbl\t50d0 <sscanf@plt>\n    8be8:\t7100081f \tcmp\tw0, #0x2\n    8bec:\t54000140 \tb.eq\t8c14 <pthread_getattr_np+0x250>\n    8bf0:\tb9400284 \tldr\tw4, [x20]\n    8bf4:\t17ffffef \tb\t8bb0 <pthread_getattr_np+0x1ec>\n    8bf8:\taa1903e0 \tmov\tx0, x25\n    8bfc:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    8c00:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    8c04:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    8c08:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    8c0c:\td4000001 \tsvc\t#0x0\n    8c10:\t17ffffb0 \tb\t8ad0 <pthread_getattr_np+0x10c>\n    8c14:\tf0000120 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    8c18:\tf9404ba1 \tldr\tx1, [x29,#144]\n    8c1c:\tf947e000 \tldr\tx0, [x0,#4032]\n    8c20:\tf9400000 \tldr\tx0, [x0]\n    8c24:\teb01001f \tcmp\tx0, x1\n    8c28:\t54000243 \tb.cc\t8c70 <pthread_getattr_np+0x2ac>\n    8c2c:\tf9404fa1 \tldr\tx1, [x29,#152]\n    8c30:\teb01001f \tcmp\tx0, x1\n    8c34:\t54000383 \tb.cc\t8ca4 <pthread_getattr_np+0x2e0>\n    8c38:\t9e670028 \tfmov\td8, x1\n    8c3c:\tb9400284 \tldr\tw4, [x20]\n    8c40:\t17ffffdc \tb\t8bb0 <pthread_getattr_np+0x1ec>\n    8c44:\td53bd040 \tmrs\tx0, tpidr_el0\n    8c48:\tf0000121 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    8c4c:\tf947c421 \tldr\tx1, [x1,#3976]\n    8c50:\tb8616816 \tldr\tw22, [x0,x1]\n    8c54:\taa1403e0 \tmov\tx0, x20\n    8c58:\t97fff0fe \tbl\t5050 <fclose@plt>\n    8c5c:\tb9400ae0 \tldr\tw0, [x23,#8]\n    8c60:\t321d0000 \torr\tw0, w0, #0x8\n    8c64:\tb9000ae0 \tstr\tw0, [x23,#8]\n    8c68:\t35fff296 \tcbnz\tw22, 8ab8 <pthread_getattr_np+0xf4>\n    8c6c:\t17ffff7d \tb\t8a60 <pthread_getattr_np+0x9c>\n    8c70:\tf9404fa0 \tldr\tx0, [x29,#152]\n    8c74:\tb9400284 \tldr\tw4, [x20]\n    8c78:\t9e670008 \tfmov\td8, x0\n    8c7c:\t17ffffcd \tb\t8bb0 <pthread_getattr_np+0x1ec>\n    8c80:\t52800056 \tmov\tw22, #0x2                   \t// #2\n    8c84:\tf94043a0 \tldr\tx0, [x29,#128]\n    8c88:\t97fff166 \tbl\t5220 <free@plt>\n    8c8c:\t17fffff2 \tb\t8c54 <pthread_getattr_np+0x290>\n    8c90:\td53bd040 \tmrs\tx0, tpidr_el0\n    8c94:\tf0000121 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    8c98:\tf947c421 \tldr\tx1, [x1,#3976]\n    8c9c:\tb8616816 \tldr\tw22, [x0,x1]\n    8ca0:\t17ffffef \tb\t8c5c <pthread_getattr_np+0x298>\n    8ca4:\t9e660123 \tfmov\tx3, d9\n    8ca8:\t9e660140 \tfmov\tx0, d10\n    8cac:\t9e660104 \tfmov\tx4, d8\n    8cb0:\tcb0303e2 \tneg\tx2, x3\n    8cb4:\t8a020000 \tand\tx0, x0, x2\n    8cb8:\t8b030000 \tadd\tx0, x0, x3\n    8cbc:\tf94053a3 \tldr\tx3, [x29,#160]\n    8cc0:\tf9000ee0 \tstr\tx0, [x23,#24]\n    8cc4:\t8b030003 \tadd\tx3, x0, x3\n    8cc8:\tcb040000 \tsub\tx0, x0, x4\n    8ccc:\tcb010061 \tsub\tx1, x3, x1\n    8cd0:\t8a020021 \tand\tx1, x1, x2\n    8cd4:\teb00003f \tcmp\tx1, x0\n    8cd8:\t54000088 \tb.hi\t8ce8 <pthread_getattr_np+0x324>\n    8cdc:\tf90012e1 \tstr\tx1, [x23,#32]\n    8ce0:\t2a1303f6 \tmov\tw22, w19\n    8ce4:\t17ffffe8 \tb\t8c84 <pthread_getattr_np+0x2c0>\n    8ce8:\tf90012e0 \tstr\tx0, [x23,#32]\n    8cec:\t2a1303f6 \tmov\tw22, w19\n    8cf0:\t17ffffe5 \tb\t8c84 <pthread_getattr_np+0x2c0>\n    8cf4:\taa1403e0 \tmov\tx0, x20\n    8cf8:\t97fff14a \tbl\t5220 <free@plt>\n    8cfc:\t71009adf \tcmp\tw22, #0x26\n    8d00:\t54ffedc1 \tb.ne\t8ab8 <pthread_getattr_np+0xf4>\n    8d04:\tf90016ff \tstr\txzr, [x23,#40]\n    8d08:\t52800016 \tmov\tw22, #0x0                   \t// #0\n    8d0c:\tf9001aff \tstr\txzr, [x23,#48]\n    8d10:\t17ffff6a \tb\t8ab8 <pthread_getattr_np+0xf4>\n\n0000000000008d14 <__pthread_mutex_init>:\n    8d14:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    8d18:\t910003fd \tmov\tx29, sp\n    8d1c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    8d20:\taa0003f3 \tmov\tx19, x0\n    8d24:\tb4000761 \tcbz\tx1, 8e10 <__pthread_mutex_init+0xfc>\n    8d28:\tb9400022 \tldr\tw2, [x1]\n    8d2c:\t72040440 \tands\tw0, w2, #0x30000000\n    8d30:\t54000120 \tb.eq\t8d54 <__pthread_mutex_init+0x40>\n    8d34:\t52a20003 \tmov\tw3, #0x10000000            \t// #268435456\n    8d38:\t6b03001f \tcmp\tw0, w3\n    8d3c:\t540000c0 \tb.eq\t8d54 <__pthread_mutex_init+0x40>\n    8d40:\t52800be0 \tmov\tw0, #0x5f                  \t// #95\n    8d44:\t36f00082 \ttbz\tw2, #30, 8d54 <__pthread_mutex_init+0x40>\n    8d48:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    8d4c:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    8d50:\td65f03c0 \tret\n    8d54:\ta9017e7f \tstp\txzr, xzr, [x19,#16]\n    8d58:\ta9007e7f \tstp\txzr, xzr, [x19]\n    8d5c:\ta9027e7f \tstp\txzr, xzr, [x19,#32]\n    8d60:\t5281ffe0 \tmov\tw0, #0xfff                 \t// #4095\n    8d64:\tb9400022 \tldr\tw2, [x1]\n    8d68:\t72a1e000 \tmovk\tw0, #0xf00, lsl #16\n    8d6c:\t0a000040 \tand\tw0, w2, w0\n    8d70:\tb9001260 \tstr\tw0, [x19,#16]\n    8d74:\tb9400022 \tldr\tw2, [x1]\n    8d78:\t36f00082 \ttbz\tw2, #30, 8d88 <__pthread_mutex_init+0x74>\n    8d7c:\t321c0000 \torr\tw0, w0, #0x10\n    8d80:\tb9001260 \tstr\tw0, [x19,#16]\n    8d84:\tb9400022 \tldr\tw2, [x1]\n    8d88:\t12040443 \tand\tw3, w2, #0x30000000\n    8d8c:\t52a20004 \tmov\tw4, #0x10000000            \t// #268435456\n    8d90:\t6b04007f \tcmp\tw3, w4\n    8d94:\t54000360 \tb.eq\t8e00 <__pthread_mutex_init+0xec>\n    8d98:\t52a40004 \tmov\tw4, #0x20000000            \t// #536870912\n    8d9c:\t6b04007f \tcmp\tw3, w4\n    8da0:\t540001e1 \tb.ne\t8ddc <__pthread_mutex_init+0xc8>\n    8da4:\t321a0000 \torr\tw0, w0, #0x40\n    8da8:\tb9001260 \tstr\tw0, [x19,#16]\n    8dac:\tb9400020 \tldr\tw0, [x1]\n    8db0:\td34c5c00 \tubfx\tx0, x0, #12, #12\n    8db4:\t350000e0 \tcbnz\tw0, 8dd0 <__pthread_mutex_init+0xbc>\n    8db8:\t90000154 \tadrp\tx20, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    8dbc:\tb9427e80 \tldr\tw0, [x20,#636]\n    8dc0:\t3100041f \tcmn\tw0, #0x1\n    8dc4:\t540002c0 \tb.eq\t8e1c <__pthread_mutex_init+0x108>\n    8dc8:\t6b1f001f \tcmp\tw0, wzr\n    8dcc:\t1a9fa000 \tcsel\tw0, w0, wzr, ge\n    8dd0:\t530d3000 \tlsl\tw0, w0, #19\n    8dd4:\tb9000260 \tstr\tw0, [x19]\n    8dd8:\tb9400022 \tldr\tw2, [x1]\n    8ddc:\t7202045f \ttst\tw2, #0xc0000000\n    8de0:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    8de4:\t54fffb20 \tb.eq\t8d48 <__pthread_mutex_init+0x34>\n    8de8:\tb9401261 \tldr\tw1, [x19,#16]\n    8dec:\t32190021 \torr\tw1, w1, #0x80\n    8df0:\tb9001261 \tstr\tw1, [x19,#16]\n    8df4:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    8df8:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    8dfc:\td65f03c0 \tret\n    8e00:\t321b0000 \torr\tw0, w0, #0x20\n    8e04:\tb9001260 \tstr\tw0, [x19,#16]\n    8e08:\tb9400022 \tldr\tw2, [x1]\n    8e0c:\t17fffff4 \tb\t8ddc <__pthread_mutex_init+0xc8>\n    8e10:\td0000041 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n    8e14:\t912ee021 \tadd\tx1, x1, #0xbb8\n    8e18:\t17ffffc4 \tb\t8d28 <__pthread_mutex_init+0x14>\n    8e1c:\tf90017a1 \tstr\tx1, [x29,#40]\n    8e20:\t9400237f \tbl\t11c1c <__init_sched_fifo_prio>\n    8e24:\tb9427e80 \tldr\tw0, [x20,#636]\n    8e28:\tf94017a1 \tldr\tx1, [x29,#40]\n    8e2c:\t17ffffe7 \tb\t8dc8 <__pthread_mutex_init+0xb4>\n\n0000000000008e30 <__pthread_mutex_destroy>:\n    8e30:\tb9401001 \tldr\tw1, [x0,#16]\n    8e34:\t372000c1 \ttbnz\tw1, #4, 8e4c <__pthread_mutex_destroy+0x1c>\n    8e38:\tb9400c02 \tldr\tw2, [x0,#12]\n    8e3c:\t52800201 \tmov\tw1, #0x10                  \t// #16\n    8e40:\t34000062 \tcbz\tw2, 8e4c <__pthread_mutex_destroy+0x1c>\n    8e44:\t2a0103e0 \tmov\tw0, w1\n    8e48:\td65f03c0 \tret\n    8e4c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    8e50:\t12800002 \tmov\tw2, #0xffffffff            \t// #-1\n    8e54:\tb9001002 \tstr\tw2, [x0,#16]\n    8e58:\t2a0103e0 \tmov\tw0, w1\n    8e5c:\td65f03c0 \tret\n\n0000000000008e60 <__pthread_mutex_lock_full>:\n    8e60:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    8e64:\t910003fd \tmov\tx29, sp\n    8e68:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    8e6c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    8e70:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    8e74:\td53bd056 \tmrs\tx22, tpidr_el0\n    8e78:\tb9401001 \tldr\tw1, [x0,#16]\n    8e7c:\td11bc2d6 \tsub\tx22, x22, #0x6f0\n    8e80:\t12001822 \tand\tw2, w1, #0x7f\n    8e84:\t51004042 \tsub\tw2, w2, #0x10\n    8e88:\tb940d2d5 \tldr\tw21, [x22,#208]\n    8e8c:\t7100cc5f \tcmp\tw2, #0x33\n    8e90:\t54000109 \tb.ls\t8eb0 <__pthread_mutex_lock_full+0x50>\n    8e94:\t528002d4 \tmov\tw20, #0x16                  \t// #22\n    8e98:\t2a1403e0 \tmov\tw0, w20\n    8e9c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    8ea0:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    8ea4:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    8ea8:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    8eac:\td65f03c0 \tret\n    8eb0:\taa0003f3 \tmov\tx19, x0\n    8eb4:\td0000040 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n    8eb8:\t912f0000 \tadd\tx0, x0, #0xbc0\n    8ebc:\t78625800 \tldrh\tw0, [x0,w2,uxtw #1]\n    8ec0:\t10000062 \tadr\tx2, 8ecc <__pthread_mutex_lock_full+0x6c>\n    8ec4:\t8b20a840 \tadd\tx0, x2, w0, sxth #2\n    8ec8:\td61f0000 \tbr\tx0\n    8ecc:\tb9400a60 \tldr\tw0, [x19,#8]\n    8ed0:\tb9400263 \tldr\tw3, [x19]\n    8ed4:\t6b15001f \tcmp\tw0, w21\n    8ed8:\t54001da0 \tb.eq\t928c <__pthread_mutex_lock_full+0x42c>\n    8edc:\t12800016 \tmov\tw22, #0xffffffff            \t// #-1\n    8ee0:\t53137c74 \tlsr\tw20, w3, #19\n    8ee4:\t9400241d \tbl\t11f58 <__pthread_current_priority>\n    8ee8:\t6b00029f \tcmp\tw20, w0\n    8eec:\t5400204b \tb.lt\t92f4 <__pthread_mutex_lock_full+0x494>\n    8ef0:\t2a1603e0 \tmov\tw0, w22\n    8ef4:\t2a1403e1 \tmov\tw1, w20\n    8ef8:\t94002358 \tbl\t11c58 <__pthread_tpp_change_priority>\n    8efc:\t35001f80 \tcbnz\tw0, 92ec <__pthread_mutex_lock_full+0x48c>\n    8f00:\t910143a5 \tadd\tx5, x29, #0x50\n    8f04:\t530d3284 \tlsl\tw4, w20, #19\n    8f08:\t32000089 \torr\tw9, w4, #0x1\n    8f0c:\t2a0403e0 \tmov\tw0, w4\n    8f10:\tb81fcca4 \tstr\tw4, [x5,#-4]!\n    8f14:\t885ffe61 \tldaxr\tw1, [x19]\n    8f18:\t6b00003f \tcmp\tw1, w0\n    8f1c:\t54000061 \tb.ne\t8f28 <__pthread_mutex_lock_full+0xc8>\n    8f20:\t88027e69 \tstxr\tw2, w9, [x19]\n    8f24:\t35ffff82 \tcbnz\tw2, 8f14 <__pthread_mutex_lock_full+0xb4>\n    8f28:\t54000040 \tb.eq\t8f30 <__pthread_mutex_lock_full+0xd0>\n    8f2c:\tb9004fa1 \tstr\tw1, [x29,#76]\n    8f30:\tb9404fa0 \tldr\tw0, [x29,#76]\n    8f34:\t6b00009f \tcmp\tw4, w0\n    8f38:\t540004c0 \tb.eq\t8fd0 <__pthread_mutex_lock_full+0x170>\n    8f3c:\t321f0087 \torr\tw7, w4, #0x2\n    8f40:\t93407cea \tsxtw\tx10, w7\n    8f44:\tb9004fa9 \tstr\tw9, [x29,#76]\n    8f48:\tb94000a0 \tldr\tw0, [x5]\n    8f4c:\t885ffe63 \tldaxr\tw3, [x19]\n    8f50:\t6b00007f \tcmp\tw3, w0\n    8f54:\t54000061 \tb.ne\t8f60 <__pthread_mutex_lock_full+0x100>\n    8f58:\t88017e67 \tstxr\tw1, w7, [x19]\n    8f5c:\t35ffff81 \tcbnz\tw1, 8f4c <__pthread_mutex_lock_full+0xec>\n    8f60:\t54000040 \tb.eq\t8f68 <__pthread_mutex_lock_full+0x108>\n    8f64:\tb90000a3 \tstr\tw3, [x5]\n    8f68:\tb9404fa3 \tldr\tw3, [x29,#76]\n    8f6c:\t120d3060 \tand\tw0, w3, #0xfff80000\n    8f70:\t6b04001f \tcmp\tw0, w4\n    8f74:\t54001581 \tb.ne\t9224 <__pthread_mutex_lock_full+0x3c4>\n    8f78:\t6b03009f \tcmp\tw4, w3\n    8f7c:\t54000120 \tb.eq\t8fa0 <__pthread_mutex_lock_full+0x140>\n    8f80:\tb9401266 \tldr\tw6, [x19,#16]\n    8f84:\taa1303e0 \tmov\tx0, x19\n    8f88:\taa0a03e2 \tmov\tx2, x10\n    8f8c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    8f90:\t2a2603e1 \tmvn\tw1, w6\n    8f94:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    8f98:\t92790021 \tand\tx1, x1, #0x80\n    8f9c:\td4000001 \tsvc\t#0x0\n    8fa0:\tb9004fa4 \tstr\tw4, [x29,#76]\n    8fa4:\tb94000a0 \tldr\tw0, [x5]\n    8fa8:\t885ffe63 \tldaxr\tw3, [x19]\n    8fac:\t6b00007f \tcmp\tw3, w0\n    8fb0:\t54000061 \tb.ne\t8fbc <__pthread_mutex_lock_full+0x15c>\n    8fb4:\t88017e67 \tstxr\tw1, w7, [x19]\n    8fb8:\t35ffff81 \tcbnz\tw1, 8fa8 <__pthread_mutex_lock_full+0x148>\n    8fbc:\t54000040 \tb.eq\t8fc4 <__pthread_mutex_lock_full+0x164>\n    8fc0:\tb90000a3 \tstr\tw3, [x5]\n    8fc4:\tb9404fa0 \tldr\tw0, [x29,#76]\n    8fc8:\t6b00009f \tcmp\tw4, w0\n    8fcc:\t54fffbc1 \tb.ne\t8f44 <__pthread_mutex_lock_full+0xe4>\n    8fd0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    8fd4:\tb9000660 \tstr\tw0, [x19,#4]\n    8fd8:\tb9400e60 \tldr\tw0, [x19,#12]\n    8fdc:\t52800014 \tmov\tw20, #0x0                   \t// #0\n    8fe0:\tb9000a75 \tstr\tw21, [x19,#8]\n    8fe4:\t11000400 \tadd\tw0, w0, #0x1\n    8fe8:\tb9000e60 \tstr\tw0, [x19,#12]\n    8fec:\t2a1403e0 \tmov\tw0, w20\n    8ff0:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    8ff4:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    8ff8:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    8ffc:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    9000:\td65f03c0 \tret\n    9004:\t121c0024 \tand\tw4, w1, #0x10\n    9008:\t36200081 \ttbz\tw1, #4, 9018 <__pthread_mutex_lock_full+0x1b8>\n    900c:\t91008260 \tadd\tx0, x19, #0x20\n    9010:\tb2400000 \torr\tx0, x0, #0x1\n    9014:\tf9007ac0 \tstr\tx0, [x22,#240]\n    9018:\tb9400260 \tldr\tw0, [x19]\n    901c:\t12007400 \tand\tw0, w0, #0x3fffffff\n    9020:\t6b0002bf \tcmp\tw21, w0\n    9024:\t540014a0 \tb.eq\t92b8 <__pthread_mutex_lock_full+0x458>\n    9028:\tb9004fbf \tstr\twzr, [x29,#76]\n    902c:\t885ffe60 \tldaxr\tw0, [x19]\n    9030:\t6b1f001f \tcmp\tw0, wzr\n    9034:\t54000061 \tb.ne\t9040 <__pthread_mutex_lock_full+0x1e0>\n    9038:\t88017e75 \tstxr\tw1, w21, [x19]\n    903c:\t35ffff81 \tcbnz\tw1, 902c <__pthread_mutex_lock_full+0x1cc>\n    9040:\t540011e1 \tb.ne\t927c <__pthread_mutex_lock_full+0x41c>\n    9044:\tb9404fa0 \tldr\tw0, [x29,#76]\n    9048:\t34000a40 \tcbz\tw0, 9190 <__pthread_mutex_lock_full+0x330>\n    904c:\td28000c1 \tmov\tx1, #0x6                   \t// #6\n    9050:\t350000c4 \tcbnz\tw4, 9068 <__pthread_mutex_lock_full+0x208>\n    9054:\tb9401261 \tldr\tw1, [x19,#16]\n    9058:\t528010c0 \tmov\tw0, #0x86                  \t// #134\n    905c:\t12190021 \tand\tw1, w1, #0x80\n    9060:\t4a000021 \teor\tw1, w1, w0\n    9064:\t93407c21 \tsxtw\tx1, w1\n    9068:\taa1303e0 \tmov\tx0, x19\n    906c:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    9070:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    9074:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    9078:\td4000001 \tsvc\t#0x0\n    907c:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    9080:\t54000089 \tb.ls\t9090 <__pthread_mutex_lock_full+0x230>\n    9084:\t121a7800 \tand\tw0, w0, #0xffffffdf\n    9088:\t31008c1f \tcmn\tw0, #0x23\n    908c:\t54000f20 \tb.eq\t9270 <__pthread_mutex_lock_full+0x410>\n    9090:\tb9400260 \tldr\tw0, [x19]\n    9094:\t36f007e0 \ttbz\tw0, #30, 9190 <__pthread_mutex_lock_full+0x330>\n    9098:\t910133a5 \tadd\tx5, x29, #0x4c\n    909c:\tb9004fa0 \tstr\tw0, [x29,#76]\n    90a0:\t12017800 \tand\tw0, w0, #0xbfffffff\n    90a4:\tb94000a2 \tldr\tw2, [x5]\n    90a8:\t885ffe61 \tldaxr\tw1, [x19]\n    90ac:\t6b02003f \tcmp\tw1, w2\n    90b0:\t54000061 \tb.ne\t90bc <__pthread_mutex_lock_full+0x25c>\n    90b4:\t88037e60 \tstxr\tw3, w0, [x19]\n    90b8:\t35ffff83 \tcbnz\tw3, 90a8 <__pthread_mutex_lock_full+0x248>\n    90bc:\t540012a0 \tb.eq\t9310 <__pthread_mutex_lock_full+0x4b0>\n    90c0:\tb90000a1 \tstr\tw1, [x5]\n    90c4:\tb9400260 \tldr\tw0, [x19]\n    90c8:\t17fffff5 \tb\t909c <__pthread_mutex_lock_full+0x23c>\n    90cc:\t91008277 \tadd\tx23, x19, #0x20\n    90d0:\tf9007ad7 \tstr\tx23, [x22,#240]\n    90d4:\t321f77f8 \tmov\tw24, #0x7ffffffe            \t// #2147483646\n    90d8:\tb9400260 \tldr\tw0, [x19]\n    90dc:\t12020014 \tand\tw20, w0, #0x40000000\n    90e0:\t35000a74 \tcbnz\tw20, 922c <__pthread_mutex_lock_full+0x3cc>\n    90e4:\t12007400 \tand\tw0, w0, #0x3fffffff\n    90e8:\t6b0002bf \tcmp\tw21, w0\n    90ec:\t54000380 \tb.eq\t915c <__pthread_mutex_lock_full+0x2fc>\n    90f0:\tb9004fbf \tstr\twzr, [x29,#76]\n    90f4:\t885ffe62 \tldaxr\tw2, [x19]\n    90f8:\t6b1f005f \tcmp\tw2, wzr\n    90fc:\t54000061 \tb.ne\t9108 <__pthread_mutex_lock_full+0x2a8>\n    9100:\t88007e75 \tstxr\tw0, w21, [x19]\n    9104:\t35ffff80 \tcbnz\tw0, 90f4 <__pthread_mutex_lock_full+0x294>\n    9108:\t54000680 \tb.eq\t91d8 <__pthread_mutex_lock_full+0x378>\n    910c:\t52801001 \tmov\tw1, #0x80                  \t// #128\n    9110:\taa1303e0 \tmov\tx0, x19\n    9114:\tb9004fa2 \tstr\tw2, [x29,#76]\n    9118:\t94001a4e \tbl\tfa50 <__lll_robust_lock_wait>\n    911c:\tb9400a61 \tldr\tw1, [x19,#8]\n    9120:\t6b18003f \tcmp\tw1, w24\n    9124:\t54000620 \tb.eq\t91e8 <__pthread_mutex_lock_full+0x388>\n    9128:\t12020014 \tand\tw20, w0, #0x40000000\n    912c:\t37f7fda0 \ttbnz\tw0, #30, 90e0 <__pthread_mutex_lock_full+0x280>\n    9130:\taa1603e0 \tmov\tx0, x22\n    9134:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    9138:\tb9000661 \tstr\tw1, [x19,#4]\n    913c:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    9140:\t927ff822 \tand\tx2, x1, #0xfffffffffffffffe\n    9144:\tf81f8057 \tstr\tx23, [x2,#-8]\n    9148:\tf9001261 \tstr\tx1, [x19,#32]\n    914c:\tf9000e60 \tstr\tx0, [x19,#24]\n    9150:\tf90072d7 \tstr\tx23, [x22,#224]\n    9154:\tf9007adf \tstr\txzr, [x22,#240]\n    9158:\t17ffffa0 \tb\t8fd8 <__pthread_mutex_lock_full+0x178>\n    915c:\tb9401260 \tldr\tw0, [x19,#16]\n    9160:\t12001800 \tand\tw0, w0, #0x7f\n    9164:\t7100481f \tcmp\tw0, #0x12\n    9168:\t54001320 \tb.eq\t93cc <__pthread_mutex_lock_full+0x56c>\n    916c:\t7100441f \tcmp\tw0, #0x11\n    9170:\t54fffc01 \tb.ne\t90f0 <__pthread_mutex_lock_full+0x290>\n    9174:\tf9007adf \tstr\txzr, [x22,#240]\n    9178:\tb9400660 \tldr\tw0, [x19,#4]\n    917c:\t3100041f \tcmn\tw0, #0x1\n    9180:\t54000980 \tb.eq\t92b0 <__pthread_mutex_lock_full+0x450>\n    9184:\t11000400 \tadd\tw0, w0, #0x1\n    9188:\tb9000660 \tstr\tw0, [x19,#4]\n    918c:\t17ffff98 \tb\t8fec <__pthread_mutex_lock_full+0x18c>\n    9190:\t34fff204 \tcbz\tw4, 8fd0 <__pthread_mutex_lock_full+0x170>\n    9194:\tb9400a61 \tldr\tw1, [x19,#8]\n    9198:\t321f77e0 \tmov\tw0, #0x7ffffffe            \t// #2147483646\n    919c:\t6b00003f \tcmp\tw1, w0\n    91a0:\t54001020 \tb.eq\t93a4 <__pthread_mutex_lock_full+0x544>\n    91a4:\taa1603e0 \tmov\tx0, x22\n    91a8:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    91ac:\tb9000661 \tstr\tw1, [x19,#4]\n    91b0:\t91008262 \tadd\tx2, x19, #0x20\n    91b4:\tb2400043 \torr\tx3, x2, #0x1\n    91b8:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    91bc:\t927ff824 \tand\tx4, x1, #0xfffffffffffffffe\n    91c0:\tf81f8082 \tstr\tx2, [x4,#-8]\n    91c4:\tf9001261 \tstr\tx1, [x19,#32]\n    91c8:\tf9000e60 \tstr\tx0, [x19,#24]\n    91cc:\tf90072c3 \tstr\tx3, [x22,#224]\n    91d0:\tf9007adf \tstr\txzr, [x22,#240]\n    91d4:\t17ffff81 \tb\t8fd8 <__pthread_mutex_lock_full+0x178>\n    91d8:\tb9400a61 \tldr\tw1, [x19,#8]\n    91dc:\t321f77e0 \tmov\tw0, #0x7ffffffe            \t// #2147483646\n    91e0:\t6b00003f \tcmp\tw1, w0\n    91e4:\t54fffa61 \tb.ne\t9130 <__pthread_mutex_lock_full+0x2d0>\n    91e8:\tb900067f \tstr\twzr, [x19,#4]\n    91ec:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    91f0:\t885f7e60 \tldxr\tw0, [x19]\n    91f4:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    91f8:\t35ffffc2 \tcbnz\tw2, 91f0 <__pthread_mutex_lock_full+0x390>\n    91fc:\t7100041f \tcmp\tw0, #0x1\n    9200:\t54000c4c \tb.gt\t9388 <__pthread_mutex_lock_full+0x528>\n    9204:\tf9007adf \tstr\txzr, [x22,#240]\n    9208:\t52801074 \tmov\tw20, #0x83                  \t// #131\n    920c:\t2a1403e0 \tmov\tw0, w20\n    9210:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    9214:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    9218:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    921c:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    9220:\td65f03c0 \tret\n    9224:\t2a1403f6 \tmov\tw22, w20\n    9228:\t17ffff2e \tb\t8ee0 <__pthread_mutex_lock_full+0x80>\n    922c:\t12010001 \tand\tw1, w0, #0x80000000\n    9230:\tb9004fa0 \tstr\tw0, [x29,#76]\n    9234:\t2a150021 \torr\tw1, w1, w21\n    9238:\t2a0003e2 \tmov\tw2, w0\n    923c:\t885ffe63 \tldaxr\tw3, [x19]\n    9240:\t6b02007f \tcmp\tw3, w2\n    9244:\t54000061 \tb.ne\t9250 <__pthread_mutex_lock_full+0x3f0>\n    9248:\t88047e61 \tstxr\tw4, w1, [x19]\n    924c:\t35ffff84 \tcbnz\tw4, 923c <__pthread_mutex_lock_full+0x3dc>\n    9250:\t54000040 \tb.eq\t9258 <__pthread_mutex_lock_full+0x3f8>\n    9254:\tb9004fa3 \tstr\tw3, [x29,#76]\n    9258:\tb9404fa1 \tldr\tw1, [x29,#76]\n    925c:\t6b01001f \tcmp\tw0, w1\n    9260:\t54000780 \tb.eq\t9350 <__pthread_mutex_lock_full+0x4f0>\n    9264:\t2a0103e0 \tmov\tw0, w1\n    9268:\t12020034 \tand\tw20, w1, #0x40000000\n    926c:\t17ffff9d \tb\t90e0 <__pthread_mutex_lock_full+0x280>\n    9270:\t94001dfa \tbl\t10a58 <__pause_nocancel>\n    9274:\t94001df9 \tbl\t10a58 <__pause_nocancel>\n    9278:\t17fffffe \tb\t9270 <__pthread_mutex_lock_full+0x410>\n    927c:\tb9004fa0 \tstr\tw0, [x29,#76]\n    9280:\tb9404fa0 \tldr\tw0, [x29,#76]\n    9284:\t34fff860 \tcbz\tw0, 9190 <__pthread_mutex_lock_full+0x330>\n    9288:\t17ffff71 \tb\t904c <__pthread_mutex_lock_full+0x1ec>\n    928c:\t12000421 \tand\tw1, w1, #0x3\n    9290:\t52800474 \tmov\tw20, #0x23                  \t// #35\n    9294:\t7100083f \tcmp\tw1, #0x2\n    9298:\t54ffeaa0 \tb.eq\t8fec <__pthread_mutex_lock_full+0x18c>\n    929c:\t7100043f \tcmp\tw1, #0x1\n    92a0:\t54ffe1e1 \tb.ne\t8edc <__pthread_mutex_lock_full+0x7c>\n    92a4:\tb9400660 \tldr\tw0, [x19,#4]\n    92a8:\t3100041f \tcmn\tw0, #0x1\n    92ac:\t54000181 \tb.ne\t92dc <__pthread_mutex_lock_full+0x47c>\n    92b0:\t52800174 \tmov\tw20, #0xb                   \t// #11\n    92b4:\t17ffff4e \tb\t8fec <__pthread_mutex_lock_full+0x18c>\n    92b8:\t12000421 \tand\tw1, w1, #0x3\n    92bc:\t7100083f \tcmp\tw1, #0x2\n    92c0:\t54000860 \tb.eq\t93cc <__pthread_mutex_lock_full+0x56c>\n    92c4:\t7100043f \tcmp\tw1, #0x1\n    92c8:\t54ffeb01 \tb.ne\t9028 <__pthread_mutex_lock_full+0x1c8>\n    92cc:\tf9007adf \tstr\txzr, [x22,#240]\n    92d0:\tb9400660 \tldr\tw0, [x19,#4]\n    92d4:\t3100041f \tcmn\tw0, #0x1\n    92d8:\t54fffec0 \tb.eq\t92b0 <__pthread_mutex_lock_full+0x450>\n    92dc:\t11000400 \tadd\tw0, w0, #0x1\n    92e0:\t52800014 \tmov\tw20, #0x0                   \t// #0\n    92e4:\tb9000660 \tstr\tw0, [x19,#4]\n    92e8:\t17ffff41 \tb\t8fec <__pthread_mutex_lock_full+0x18c>\n    92ec:\t2a0003f4 \tmov\tw20, w0\n    92f0:\t17ffff3f \tb\t8fec <__pthread_mutex_lock_full+0x18c>\n    92f4:\t310006df \tcmn\tw22, #0x1\n    92f8:\t528002d4 \tmov\tw20, #0x16                  \t// #22\n    92fc:\t54ffe780 \tb.eq\t8fec <__pthread_mutex_lock_full+0x18c>\n    9300:\t2a1603e0 \tmov\tw0, w22\n    9304:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n    9308:\t94002254 \tbl\t11c58 <__pthread_tpp_change_priority>\n    930c:\t17ffff38 \tb\t8fec <__pthread_mutex_lock_full+0x18c>\n    9310:\taa1603e0 \tmov\tx0, x22\n    9314:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    9318:\tb9000661 \tstr\tw1, [x19,#4]\n    931c:\t12b00001 \tmov\tw1, #0x7fffffff            \t// #2147483647\n    9320:\tb9000a61 \tstr\tw1, [x19,#8]\n    9324:\t91008262 \tadd\tx2, x19, #0x20\n    9328:\tb2400043 \torr\tx3, x2, #0x1\n    932c:\t52801054 \tmov\tw20, #0x82                  \t// #130\n    9330:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    9334:\t927ff824 \tand\tx4, x1, #0xfffffffffffffffe\n    9338:\tf81f8082 \tstr\tx2, [x4,#-8]\n    933c:\tf9001261 \tstr\tx1, [x19,#32]\n    9340:\tf9000e60 \tstr\tx0, [x19,#24]\n    9344:\tf90072c3 \tstr\tx3, [x22,#224]\n    9348:\tf9007adf \tstr\txzr, [x22,#240]\n    934c:\t17ffff28 \tb\t8fec <__pthread_mutex_lock_full+0x18c>\n    9350:\taa1603e0 \tmov\tx0, x22\n    9354:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    9358:\tb9000661 \tstr\tw1, [x19,#4]\n    935c:\t12b00001 \tmov\tw1, #0x7fffffff            \t// #2147483647\n    9360:\tb9000a61 \tstr\tw1, [x19,#8]\n    9364:\t52801054 \tmov\tw20, #0x82                  \t// #130\n    9368:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    936c:\t927ff822 \tand\tx2, x1, #0xfffffffffffffffe\n    9370:\tf81f8057 \tstr\tx23, [x2,#-8]\n    9374:\tf9001261 \tstr\tx1, [x19,#32]\n    9378:\tf9000e60 \tstr\tx0, [x19,#24]\n    937c:\tf90072d7 \tstr\tx23, [x22,#224]\n    9380:\tf9007adf \tstr\txzr, [x22,#240]\n    9384:\t17ffff1a \tb\t8fec <__pthread_mutex_lock_full+0x18c>\n    9388:\td2800021 \tmov\tx1, #0x1                   \t// #1\n    938c:\taa1303e0 \tmov\tx0, x19\n    9390:\taa0103e2 \tmov\tx2, x1\n    9394:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    9398:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    939c:\td4000001 \tsvc\t#0x0\n    93a0:\t17ffff99 \tb\t9204 <__pthread_mutex_lock_full+0x3a4>\n    93a4:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    93a8:\tb900067f \tstr\twzr, [x19,#4]\n    93ac:\taa1303e0 \tmov\tx0, x19\n    93b0:\td28000e1 \tmov\tx1, #0x7                   \t// #7\n    93b4:\taa0203e3 \tmov\tx3, x2\n    93b8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    93bc:\td4000001 \tsvc\t#0x0\n    93c0:\t52801074 \tmov\tw20, #0x83                  \t// #131\n    93c4:\tf9007ac2 \tstr\tx2, [x22,#240]\n    93c8:\t17ffff09 \tb\t8fec <__pthread_mutex_lock_full+0x18c>\n    93cc:\tf9007adf \tstr\txzr, [x22,#240]\n    93d0:\t52800474 \tmov\tw20, #0x23                  \t// #35\n    93d4:\t17ffff06 \tb\t8fec <__pthread_mutex_lock_full+0x18c>\n\n00000000000093d8 <__pthread_mutex_lock>:\n    93d8:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    93dc:\t52802fe1 \tmov\tw1, #0x17f                 \t// #383\n    93e0:\t910003fd \tmov\tx29, sp\n    93e4:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    93e8:\tf90013f5 \tstr\tx21, [sp,#32]\n    93ec:\taa0003f3 \tmov\tx19, x0\n    93f0:\tb9401002 \tldr\tw2, [x0,#16]\n    93f4:\t721e1043 \tands\tw3, w2, #0x7c\n    93f8:\t0a010041 \tand\tw1, w2, w1\n    93fc:\t540003c1 \tb.ne\t9474 <__pthread_mutex_lock+0x9c>\n    9400:\t35000441 \tcbnz\tw1, 9488 <__pthread_mutex_lock+0xb0>\n    9404:\tb9003fa1 \tstr\tw1, [x29,#60]\n    9408:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    940c:\t885ffe63 \tldaxr\tw3, [x19]\n    9410:\t6b1f007f \tcmp\tw3, wzr\n    9414:\t54000061 \tb.ne\t9420 <__pthread_mutex_lock+0x48>\n    9418:\t88017e60 \tstxr\tw1, w0, [x19]\n    941c:\t35ffff81 \tcbnz\tw1, 940c <__pthread_mutex_lock+0x34>\n    9420:\t54000120 \tb.eq\t9444 <__pthread_mutex_lock+0x6c>\n    9424:\tb9401261 \tldr\tw1, [x19,#16]\n    9428:\td53bd042 \tmrs\tx2, tpidr_el0\n    942c:\tb9003fa3 \tstr\tw3, [x29,#60]\n    9430:\t12190021 \tand\tw1, w1, #0x80\n    9434:\taa1303e0 \tmov\tx0, x19\n    9438:\td11bc054 \tsub\tx20, x2, #0x6f0\n    943c:\t940018e2 \tbl\tf7c4 <__lll_lock_wait>\n    9440:\t14000003 \tb\t944c <__pthread_mutex_lock+0x74>\n    9444:\td53bd042 \tmrs\tx2, tpidr_el0\n    9448:\td11bc054 \tsub\tx20, x2, #0x6f0\n    944c:\tb9400e61 \tldr\tw1, [x19,#12]\n    9450:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    9454:\tb940d282 \tldr\tw2, [x20,#208]\n    9458:\t11000421 \tadd\tw1, w1, #0x1\n    945c:\tb9000a62 \tstr\tw2, [x19,#8]\n    9460:\tb9000e61 \tstr\tw1, [x19,#12]\n    9464:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    9468:\tf94013f5 \tldr\tx21, [sp,#32]\n    946c:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    9470:\td65f03c0 \tret\n    9474:\t97fffe7b \tbl\t8e60 <__pthread_mutex_lock_full>\n    9478:\tf94013f5 \tldr\tx21, [sp,#32]\n    947c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    9480:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    9484:\td65f03c0 \tret\n    9488:\t12001841 \tand\tw1, w2, #0x7f\n    948c:\t7100043f \tcmp\tw1, #0x1\n    9490:\t54000381 \tb.ne\t9500 <__pthread_mutex_lock+0x128>\n    9494:\td53bd042 \tmrs\tx2, tpidr_el0\n    9498:\tb9400804 \tldr\tw4, [x0,#8]\n    949c:\td11bc054 \tsub\tx20, x2, #0x6f0\n    94a0:\tb940d282 \tldr\tw2, [x20,#208]\n    94a4:\t6b02009f \tcmp\tw4, w2\n    94a8:\t540001e0 \tb.eq\t94e4 <__pthread_mutex_lock+0x10c>\n    94ac:\tb9003fa3 \tstr\tw3, [x29,#60]\n    94b0:\t885ffe62 \tldaxr\tw2, [x19]\n    94b4:\t6b1f005f \tcmp\tw2, wzr\n    94b8:\t54000061 \tb.ne\t94c4 <__pthread_mutex_lock+0xec>\n    94bc:\t88037e61 \tstxr\tw3, w1, [x19]\n    94c0:\t35ffff83 \tcbnz\tw3, 94b0 <__pthread_mutex_lock+0xd8>\n    94c4:\t540000a0 \tb.eq\t94d8 <__pthread_mutex_lock+0x100>\n    94c8:\tb9401261 \tldr\tw1, [x19,#16]\n    94cc:\tb9003fa2 \tstr\tw2, [x29,#60]\n    94d0:\t12190021 \tand\tw1, w1, #0x80\n    94d4:\t940018bc \tbl\tf7c4 <__lll_lock_wait>\n    94d8:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    94dc:\tb9000660 \tstr\tw0, [x19,#4]\n    94e0:\t17ffffdb \tb\t944c <__pthread_mutex_lock+0x74>\n    94e4:\tb9400400 \tldr\tw0, [x0,#4]\n    94e8:\t3100041f \tcmn\tw0, #0x1\n    94ec:\t540002e0 \tb.eq\t9548 <__pthread_mutex_lock+0x170>\n    94f0:\t11000401 \tadd\tw1, w0, #0x1\n    94f4:\t2a0303e0 \tmov\tw0, w3\n    94f8:\tb9000661 \tstr\tw1, [x19,#4]\n    94fc:\t17ffffda \tb\t9464 <__pthread_mutex_lock+0x8c>\n    9500:\t71000c3f \tcmp\tw1, #0x3\n    9504:\t54000881 \tb.ne\t9614 <__pthread_mutex_lock+0x23c>\n    9508:\tf0000140 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    950c:\tb9432c00 \tldr\tw0, [x0,#812]\n    9510:\t35000200 \tcbnz\tw0, 9550 <__pthread_mutex_lock+0x178>\n    9514:\td53bd042 \tmrs\tx2, tpidr_el0\n    9518:\tb9003fbf \tstr\twzr, [x29,#60]\n    951c:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    9520:\t885ffe63 \tldaxr\tw3, [x19]\n    9524:\t6b1f007f \tcmp\tw3, wzr\n    9528:\t54000061 \tb.ne\t9534 <__pthread_mutex_lock+0x15c>\n    952c:\t88017e60 \tstxr\tw1, w0, [x19]\n    9530:\t35ffff81 \tcbnz\tw1, 9520 <__pthread_mutex_lock+0x148>\n    9534:\t54fff8a0 \tb.eq\t9448 <__pthread_mutex_lock+0x70>\n    9538:\tb9401261 \tldr\tw1, [x19,#16]\n    953c:\tb9003fa3 \tstr\tw3, [x29,#60]\n    9540:\t12190021 \tand\tw1, w1, #0x80\n    9544:\t17ffffbc \tb\t9434 <__pthread_mutex_lock+0x5c>\n    9548:\t52800160 \tmov\tw0, #0xb                   \t// #11\n    954c:\t17ffffc6 \tb\t9464 <__pthread_mutex_lock+0x8c>\n    9550:\tb9003fa3 \tstr\tw3, [x29,#60]\n    9554:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    9558:\t885ffe60 \tldaxr\tw0, [x19]\n    955c:\t6b1f001f \tcmp\tw0, wzr\n    9560:\t54000061 \tb.ne\t956c <__pthread_mutex_lock+0x194>\n    9564:\t88017e62 \tstxr\tw1, w2, [x19]\n    9568:\t35ffff81 \tcbnz\tw1, 9558 <__pthread_mutex_lock+0x180>\n    956c:\t1a9f17f5 \tcset\tw21, eq\n    9570:\t35fff6b5 \tcbnz\tw21, 9444 <__pthread_mutex_lock+0x6c>\n    9574:\tb9401661 \tldr\tw1, [x19,#20]\n    9578:\t52800c80 \tmov\tw0, #0x64                  \t// #100\n    957c:\t11001421 \tadd\tw1, w1, #0x5\n    9580:\t531f7821 \tlsl\tw1, w1, #1\n    9584:\t7101903f \tcmp\tw1, #0x64\n    9588:\t1a80d021 \tcsel\tw1, w1, w0, le\n    958c:\t110006b5 \tadd\tw21, w21, #0x1\n    9590:\tb9003fbf \tstr\twzr, [x29,#60]\n    9594:\t510006a0 \tsub\tw0, w21, #0x1\n    9598:\t6b01001f \tcmp\tw0, w1\n    959c:\t5400022a \tb.ge\t95e0 <__pthread_mutex_lock+0x208>\n    95a0:\t885ffe60 \tldaxr\tw0, [x19]\n    95a4:\t6b1f001f \tcmp\tw0, wzr\n    95a8:\t54000061 \tb.ne\t95b4 <__pthread_mutex_lock+0x1dc>\n    95ac:\t88037e62 \tstxr\tw3, w2, [x19]\n    95b0:\t35ffff83 \tcbnz\tw3, 95a0 <__pthread_mutex_lock+0x1c8>\n    95b4:\t54fffec1 \tb.ne\t958c <__pthread_mutex_lock+0x1b4>\n    95b8:\tb9401661 \tldr\tw1, [x19,#20]\n    95bc:\td53bd042 \tmrs\tx2, tpidr_el0\n    95c0:\td11bc054 \tsub\tx20, x2, #0x6f0\n    95c4:\t4b0102b5 \tsub\tw21, w21, w1\n    95c8:\t11001ea0 \tadd\tw0, w21, #0x7\n    95cc:\t6b1f02bf \tcmp\tw21, wzr\n    95d0:\t1a95b015 \tcsel\tw21, w0, w21, lt\n    95d4:\t0b950c35 \tadd\tw21, w1, w21, asr #3\n    95d8:\tb9001675 \tstr\tw21, [x19,#20]\n    95dc:\t17ffff9c \tb\t944c <__pthread_mutex_lock+0x74>\n    95e0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    95e4:\t885ffe62 \tldaxr\tw2, [x19]\n    95e8:\t6b1f005f \tcmp\tw2, wzr\n    95ec:\t54000061 \tb.ne\t95f8 <__pthread_mutex_lock+0x220>\n    95f0:\t88017e60 \tstxr\tw1, w0, [x19]\n    95f4:\t35ffff81 \tcbnz\tw1, 95e4 <__pthread_mutex_lock+0x20c>\n    95f8:\t54fffe00 \tb.eq\t95b8 <__pthread_mutex_lock+0x1e0>\n    95fc:\tb9401261 \tldr\tw1, [x19,#16]\n    9600:\taa1303e0 \tmov\tx0, x19\n    9604:\tb9003fa2 \tstr\tw2, [x29,#60]\n    9608:\t12190021 \tand\tw1, w1, #0x80\n    960c:\t9400186e \tbl\tf7c4 <__lll_lock_wait>\n    9610:\t17ffffea \tb\t95b8 <__pthread_mutex_lock+0x1e0>\n    9614:\td53bd042 \tmrs\tx2, tpidr_el0\n    9618:\tb9400800 \tldr\tw0, [x0,#8]\n    961c:\td11bc041 \tsub\tx1, x2, #0x6f0\n    9620:\tb940d021 \tldr\tw1, [x1,#208]\n    9624:\t6b00003f \tcmp\tw1, w0\n    9628:\t54fff781 \tb.ne\t9518 <__pthread_mutex_lock+0x140>\n    962c:\t52800460 \tmov\tw0, #0x23                  \t// #35\n    9630:\t17ffff8d \tb\t9464 <__pthread_mutex_lock+0x8c>\n\n0000000000009634 <__pthread_mutex_trylock>:\n    9634:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    9638:\taa0003e4 \tmov\tx4, x0\n    963c:\td53bd045 \tmrs\tx5, tpidr_el0\n    9640:\t910003fd \tmov\tx29, sp\n    9644:\tf9001bf7 \tstr\tx23, [sp,#48]\n    9648:\td11bc0a5 \tsub\tx5, x5, #0x6f0\n    964c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    9650:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    9654:\tb940d0b7 \tldr\tw23, [x5,#208]\n    9658:\tb9401002 \tldr\tw2, [x0,#16]\n    965c:\t52802fe0 \tmov\tw0, #0x17f                 \t// #383\n    9660:\t0a000040 \tand\tw0, w2, w0\n    9664:\t71008c1f \tcmp\tw0, #0x23\n    9668:\t54000328 \tb.hi\t96cc <__pthread_mutex_trylock+0x98>\n    966c:\t7100801f \tcmp\tw0, #0x20\n    9670:\t54000542 \tb.cs\t9718 <__pthread_mutex_trylock+0xe4>\n    9674:\t71000c1f \tcmp\tw0, #0x3\n    9678:\t54001008 \tb.hi\t9878 <__pthread_mutex_trylock+0x244>\n    967c:\t7100081f \tcmp\tw0, #0x2\n    9680:\t54000962 \tb.cs\t97ac <__pthread_mutex_trylock+0x178>\n    9684:\t34000940 \tcbz\tw0, 97ac <__pthread_mutex_trylock+0x178>\n    9688:\t7100041f \tcmp\tw0, #0x1\n    968c:\t54000821 \tb.ne\t9790 <__pthread_mutex_trylock+0x15c>\n    9690:\tb9400880 \tldr\tw0, [x4,#8]\n    9694:\t6b17001f \tcmp\tw0, w23\n    9698:\t540019e1 \tb.ne\t99d4 <__pthread_mutex_trylock+0x3a0>\n    969c:\tb9400480 \tldr\tw0, [x4,#4]\n    96a0:\t3100041f \tcmn\tw0, #0x1\n    96a4:\t540021c0 \tb.eq\t9adc <__pthread_mutex_trylock+0x4a8>\n    96a8:\t11000400 \tadd\tw0, w0, #0x1\n    96ac:\t52800013 \tmov\tw19, #0x0                   \t// #0\n    96b0:\tb9000480 \tstr\tw0, [x4,#4]\n    96b4:\t2a1303e0 \tmov\tw0, w19\n    96b8:\tf9401bf7 \tldr\tx23, [sp,#48]\n    96bc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    96c0:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    96c4:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    96c8:\td65f03c0 \tret\n    96cc:\t71010c1f \tcmp\tw0, #0x43\n    96d0:\t540001a9 \tb.ls\t9704 <__pthread_mutex_trylock+0xd0>\n    96d4:\t7104001f \tcmp\tw0, #0x100\n    96d8:\t54000581 \tb.ne\t9788 <__pthread_mutex_trylock+0x154>\n    96dc:\tb9004fbf \tstr\twzr, [x29,#76]\n    96e0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    96e4:\t885ffc81 \tldaxr\tw1, [x4]\n    96e8:\t6b1f003f \tcmp\tw1, wzr\n    96ec:\t54000061 \tb.ne\t96f8 <__pthread_mutex_trylock+0xc4>\n    96f0:\t88027c80 \tstxr\tw2, w0, [x4]\n    96f4:\t35ffff82 \tcbnz\tw2, 96e4 <__pthread_mutex_trylock+0xb0>\n    96f8:\t540003a1 \tb.ne\t976c <__pthread_mutex_trylock+0x138>\n    96fc:\t52800013 \tmov\tw19, #0x0                   \t// #0\n    9700:\t17ffffed \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9704:\t7101001f \tcmp\tw0, #0x40\n    9708:\t540006e2 \tb.cs\t97e4 <__pthread_mutex_trylock+0x1b0>\n    970c:\t5100c000 \tsub\tw0, w0, #0x30\n    9710:\t71000c1f \tcmp\tw0, #0x3\n    9714:\t540003e8 \tb.hi\t9790 <__pthread_mutex_trylock+0x15c>\n    9718:\t121c0046 \tand\tw6, w2, #0x10\n    971c:\t36200082 \ttbz\tw2, #4, 972c <__pthread_mutex_trylock+0xf8>\n    9720:\t91008080 \tadd\tx0, x4, #0x20\n    9724:\tb2400000 \torr\tx0, x0, #0x1\n    9728:\tf90078a0 \tstr\tx0, [x5,#240]\n    972c:\tb9400080 \tldr\tw0, [x4]\n    9730:\t12007400 \tand\tw0, w0, #0x3fffffff\n    9734:\t6b0002ff \tcmp\tw23, w0\n    9738:\t54001c00 \tb.eq\t9ab8 <__pthread_mutex_trylock+0x484>\n    973c:\tb9004fbf \tstr\twzr, [x29,#76]\n    9740:\t885ffc80 \tldaxr\tw0, [x4]\n    9744:\t6b1f001f \tcmp\tw0, wzr\n    9748:\t54000061 \tb.ne\t9754 <__pthread_mutex_trylock+0x120>\n    974c:\t88017c97 \tstxr\tw1, w23, [x4]\n    9750:\t35ffff81 \tcbnz\tw1, 9740 <__pthread_mutex_trylock+0x10c>\n    9754:\t54000040 \tb.eq\t975c <__pthread_mutex_trylock+0x128>\n    9758:\tb9004fa0 \tstr\tw0, [x29,#76]\n    975c:\tb9404fa0 \tldr\tw0, [x29,#76]\n    9760:\t34001580 \tcbz\tw0, 9a10 <__pthread_mutex_trylock+0x3dc>\n    9764:\t37f01840 \ttbnz\tw0, #30, 9a6c <__pthread_mutex_trylock+0x438>\n    9768:\tf90078bf \tstr\txzr, [x5,#240]\n    976c:\t52800213 \tmov\tw19, #0x10                  \t// #16\n    9770:\tf9401bf7 \tldr\tx23, [sp,#48]\n    9774:\t2a1303e0 \tmov\tw0, w19\n    9778:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    977c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    9780:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    9784:\td65f03c0 \tret\n    9788:\t7104041f \tcmp\tw0, #0x101\n    978c:\t54fff820 \tb.eq\t9690 <__pthread_mutex_trylock+0x5c>\n    9790:\t528002d3 \tmov\tw19, #0x16                  \t// #22\n    9794:\tf9401bf7 \tldr\tx23, [sp,#48]\n    9798:\t2a1303e0 \tmov\tw0, w19\n    979c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    97a0:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    97a4:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    97a8:\td65f03c0 \tret\n    97ac:\tb9004fbf \tstr\twzr, [x29,#76]\n    97b0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    97b4:\t885ffc81 \tldaxr\tw1, [x4]\n    97b8:\t6b1f003f \tcmp\tw1, wzr\n    97bc:\t54000061 \tb.ne\t97c8 <__pthread_mutex_trylock+0x194>\n    97c0:\t88027c80 \tstxr\tw2, w0, [x4]\n    97c4:\t35ffff82 \tcbnz\tw2, 97b4 <__pthread_mutex_trylock+0x180>\n    97c8:\t54fffd21 \tb.ne\t976c <__pthread_mutex_trylock+0x138>\n    97cc:\tb9400c80 \tldr\tw0, [x4,#12]\n    97d0:\t52800013 \tmov\tw19, #0x0                   \t// #0\n    97d4:\tb9000897 \tstr\tw23, [x4,#8]\n    97d8:\t11000400 \tadd\tw0, w0, #0x1\n    97dc:\tb9000c80 \tstr\tw0, [x4,#12]\n    97e0:\t17ffffb5 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    97e4:\tb9400880 \tldr\tw0, [x4,#8]\n    97e8:\tb9400081 \tldr\tw1, [x4]\n    97ec:\t6b17001f \tcmp\tw0, w23\n    97f0:\t540017a0 \tb.eq\t9ae4 <__pthread_mutex_trylock+0x4b0>\n    97f4:\taa0403f5 \tmov\tx21, x4\n    97f8:\t12800016 \tmov\tw22, #0xffffffff            \t// #-1\n    97fc:\t53137c34 \tlsr\tw20, w1, #19\n    9800:\t940021d6 \tbl\t11f58 <__pthread_current_priority>\n    9804:\t6b00029f \tcmp\tw20, w0\n    9808:\t2a1403e1 \tmov\tw1, w20\n    980c:\t2a1603e0 \tmov\tw0, w22\n    9810:\t5400178b \tb.lt\t9b00 <__pthread_mutex_trylock+0x4cc>\n    9814:\t94002111 \tbl\t11c58 <__pthread_tpp_change_priority>\n    9818:\t530d3282 \tlsl\tw2, w20, #19\n    981c:\t350017e0 \tcbnz\tw0, 9b18 <__pthread_mutex_trylock+0x4e4>\n    9820:\tb9004fa2 \tstr\tw2, [x29,#76]\n    9824:\t32000040 \torr\tw0, w2, #0x1\n    9828:\t2a0203e1 \tmov\tw1, w2\n    982c:\t885ffea3 \tldaxr\tw3, [x21]\n    9830:\t6b01007f \tcmp\tw3, w1\n    9834:\t54000061 \tb.ne\t9840 <__pthread_mutex_trylock+0x20c>\n    9838:\t88047ea0 \tstxr\tw4, w0, [x21]\n    983c:\t35ffff84 \tcbnz\tw4, 982c <__pthread_mutex_trylock+0x1f8>\n    9840:\t54000040 \tb.eq\t9848 <__pthread_mutex_trylock+0x214>\n    9844:\tb9004fa3 \tstr\tw3, [x29,#76]\n    9848:\tb9404fa1 \tldr\tw1, [x29,#76]\n    984c:\t2a1403f6 \tmov\tw22, w20\n    9850:\t6b01005f \tcmp\tw2, w1\n    9854:\t120d3020 \tand\tw0, w1, #0xfff80000\n    9858:\t54001640 \tb.eq\t9b20 <__pthread_mutex_trylock+0x4ec>\n    985c:\t6b02001f \tcmp\tw0, w2\n    9860:\t54fffce1 \tb.ne\t97fc <__pthread_mutex_trylock+0x1c8>\n    9864:\t2a1403e0 \tmov\tw0, w20\n    9868:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n    986c:\t52800213 \tmov\tw19, #0x10                  \t// #16\n    9870:\t940020fa \tbl\t11c58 <__pthread_tpp_change_priority>\n    9874:\t17ffff90 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9878:\t51004000 \tsub\tw0, w0, #0x10\n    987c:\t71000c1f \tcmp\tw0, #0x3\n    9880:\t54fff888 \tb.hi\t9790 <__pthread_mutex_trylock+0x15c>\n    9884:\t91008087 \tadd\tx7, x4, #0x20\n    9888:\tf90078a7 \tstr\tx7, [x5,#240]\n    988c:\t321f77e3 \tmov\tw3, #0x7ffffffe            \t// #2147483646\n    9890:\tb9400081 \tldr\tw1, [x4]\n    9894:\t12020033 \tand\tw19, w1, #0x40000000\n    9898:\t350007d3 \tcbnz\tw19, 9990 <__pthread_mutex_trylock+0x35c>\n    989c:\t12007421 \tand\tw1, w1, #0x3fffffff\n    98a0:\t6b0102ff \tcmp\tw23, w1\n    98a4:\t54000360 \tb.eq\t9910 <__pthread_mutex_trylock+0x2dc>\n    98a8:\tb9004fbf \tstr\twzr, [x29,#76]\n    98ac:\t885ffc80 \tldaxr\tw0, [x4]\n    98b0:\t6b1f001f \tcmp\tw0, wzr\n    98b4:\t54000061 \tb.ne\t98c0 <__pthread_mutex_trylock+0x28c>\n    98b8:\t88017c97 \tstxr\tw1, w23, [x4]\n    98bc:\t35ffff81 \tcbnz\tw1, 98ac <__pthread_mutex_trylock+0x278>\n    98c0:\t54000040 \tb.eq\t98c8 <__pthread_mutex_trylock+0x294>\n    98c4:\tb9004fa0 \tstr\tw0, [x29,#76]\n    98c8:\tb9404fa1 \tldr\tw1, [x29,#76]\n    98cc:\t340003c1 \tcbz\tw1, 9944 <__pthread_mutex_trylock+0x310>\n    98d0:\t12020033 \tand\tw19, w1, #0x40000000\n    98d4:\t36f7f4a1 \ttbz\tw1, #30, 9768 <__pthread_mutex_trylock+0x134>\n    98d8:\tb9400880 \tldr\tw0, [x4,#8]\n    98dc:\t6b03001f \tcmp\tw0, w3\n    98e0:\t54fffdc1 \tb.ne\t9898 <__pthread_mutex_trylock+0x264>\n    98e4:\tb900049f \tstr\twzr, [x4,#4]\n    98e8:\t6b0102ff \tcmp\tw23, w1\n    98ec:\t540012a0 \tb.eq\t9b40 <__pthread_mutex_trylock+0x50c>\n    98f0:\tf90078bf \tstr\txzr, [x5,#240]\n    98f4:\t52801073 \tmov\tw19, #0x83                  \t// #131\n    98f8:\t2a1303e0 \tmov\tw0, w19\n    98fc:\tf9401bf7 \tldr\tx23, [sp,#48]\n    9900:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    9904:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    9908:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    990c:\td65f03c0 \tret\n    9910:\tb9401080 \tldr\tw0, [x4,#16]\n    9914:\t12001800 \tand\tw0, w0, #0x7f\n    9918:\t7100481f \tcmp\tw0, #0x12\n    991c:\t54001480 \tb.eq\t9bac <__pthread_mutex_trylock+0x578>\n    9920:\t7100441f \tcmp\tw0, #0x11\n    9924:\t54fffc21 \tb.ne\t98a8 <__pthread_mutex_trylock+0x274>\n    9928:\tf90078bf \tstr\txzr, [x5,#240]\n    992c:\tb9400480 \tldr\tw0, [x4,#4]\n    9930:\t3100041f \tcmn\tw0, #0x1\n    9934:\t54000d40 \tb.eq\t9adc <__pthread_mutex_trylock+0x4a8>\n    9938:\t11000400 \tadd\tw0, w0, #0x1\n    993c:\tb9000480 \tstr\tw0, [x4,#4]\n    9940:\t17ffff5d \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9944:\tb9400882 \tldr\tw2, [x4,#8]\n    9948:\t321f77e0 \tmov\tw0, #0x7ffffffe            \t// #2147483646\n    994c:\t6b00005f \tcmp\tw2, w0\n    9950:\t54fffca0 \tb.eq\t98e4 <__pthread_mutex_trylock+0x2b0>\n    9954:\taa0503e0 \tmov\tx0, x5\n    9958:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    995c:\t927ff822 \tand\tx2, x1, #0xfffffffffffffffe\n    9960:\tf81f8047 \tstr\tx7, [x2,#-8]\n    9964:\tf9001081 \tstr\tx1, [x4,#32]\n    9968:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    996c:\tf9000c80 \tstr\tx0, [x4,#24]\n    9970:\tf90070a7 \tstr\tx7, [x5,#224]\n    9974:\tf90078bf \tstr\txzr, [x5,#240]\n    9978:\tb9000897 \tstr\tw23, [x4,#8]\n    997c:\tb9400c80 \tldr\tw0, [x4,#12]\n    9980:\tb9000481 \tstr\tw1, [x4,#4]\n    9984:\t0b010000 \tadd\tw0, w0, w1\n    9988:\tb9000c80 \tstr\tw0, [x4,#12]\n    998c:\t17ffff4a \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9990:\t12010020 \tand\tw0, w1, #0x80000000\n    9994:\tb9004fa1 \tstr\tw1, [x29,#76]\n    9998:\t2a170000 \torr\tw0, w0, w23\n    999c:\t2a0103e2 \tmov\tw2, w1\n    99a0:\t885ffc86 \tldaxr\tw6, [x4]\n    99a4:\t6b0200df \tcmp\tw6, w2\n    99a8:\t54000061 \tb.ne\t99b4 <__pthread_mutex_trylock+0x380>\n    99ac:\t88087c80 \tstxr\tw8, w0, [x4]\n    99b0:\t35ffff88 \tcbnz\tw8, 99a0 <__pthread_mutex_trylock+0x36c>\n    99b4:\t54000040 \tb.eq\t99bc <__pthread_mutex_trylock+0x388>\n    99b8:\tb9004fa6 \tstr\tw6, [x29,#76]\n    99bc:\tb9404fa0 \tldr\tw0, [x29,#76]\n    99c0:\t6b00003f \tcmp\tw1, w0\n    99c4:\t54000d80 \tb.eq\t9b74 <__pthread_mutex_trylock+0x540>\n    99c8:\t2a0003e1 \tmov\tw1, w0\n    99cc:\t12020013 \tand\tw19, w0, #0x40000000\n    99d0:\t17ffffb2 \tb\t9898 <__pthread_mutex_trylock+0x264>\n    99d4:\tb9004fbf \tstr\twzr, [x29,#76]\n    99d8:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    99dc:\t885ffc81 \tldaxr\tw1, [x4]\n    99e0:\t6b1f003f \tcmp\tw1, wzr\n    99e4:\t54000061 \tb.ne\t99f0 <__pthread_mutex_trylock+0x3bc>\n    99e8:\t88027c80 \tstxr\tw2, w0, [x4]\n    99ec:\t35ffff82 \tcbnz\tw2, 99dc <__pthread_mutex_trylock+0x3a8>\n    99f0:\t54ffebe1 \tb.ne\t976c <__pthread_mutex_trylock+0x138>\n    99f4:\tb9400c81 \tldr\tw1, [x4,#12]\n    99f8:\t52800013 \tmov\tw19, #0x0                   \t// #0\n    99fc:\tb9000897 \tstr\tw23, [x4,#8]\n    9a00:\t11000421 \tadd\tw1, w1, #0x1\n    9a04:\tb9000480 \tstr\tw0, [x4,#4]\n    9a08:\tb9000c81 \tstr\tw1, [x4,#12]\n    9a0c:\t17ffff2a \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9a10:\t340001e6 \tcbz\tw6, 9a4c <__pthread_mutex_trylock+0x418>\n    9a14:\tb9400881 \tldr\tw1, [x4,#8]\n    9a18:\t321f77e0 \tmov\tw0, #0x7ffffffe            \t// #2147483646\n    9a1c:\t6b00003f \tcmp\tw1, w0\n    9a20:\t54001020 \tb.eq\t9c24 <__pthread_mutex_trylock+0x5f0>\n    9a24:\taa0503e0 \tmov\tx0, x5\n    9a28:\t91008082 \tadd\tx2, x4, #0x20\n    9a2c:\tb2400043 \torr\tx3, x2, #0x1\n    9a30:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    9a34:\t927ff826 \tand\tx6, x1, #0xfffffffffffffffe\n    9a38:\tf81f80c2 \tstr\tx2, [x6,#-8]\n    9a3c:\tf9001081 \tstr\tx1, [x4,#32]\n    9a40:\tf9000c80 \tstr\tx0, [x4,#24]\n    9a44:\tf90070a3 \tstr\tx3, [x5,#224]\n    9a48:\tf90078bf \tstr\txzr, [x5,#240]\n    9a4c:\tb9400c80 \tldr\tw0, [x4,#12]\n    9a50:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    9a54:\tb9000897 \tstr\tw23, [x4,#8]\n    9a58:\t52800013 \tmov\tw19, #0x0                   \t// #0\n    9a5c:\t11000400 \tadd\tw0, w0, #0x1\n    9a60:\tb9000481 \tstr\tw1, [x4,#4]\n    9a64:\tb9000c80 \tstr\tw0, [x4,#12]\n    9a68:\t17ffff13 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9a6c:\td2800101 \tmov\tx1, #0x8                   \t// #8\n    9a70:\t350000c6 \tcbnz\tw6, 9a88 <__pthread_mutex_trylock+0x454>\n    9a74:\tb9401081 \tldr\tw1, [x4,#16]\n    9a78:\t52801100 \tmov\tw0, #0x88                  \t// #136\n    9a7c:\t12190021 \tand\tw1, w1, #0x80\n    9a80:\t4a000021 \teor\tw1, w1, w0\n    9a84:\t93407c21 \tsxtw\tx1, w1\n    9a88:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    9a8c:\taa0403e0 \tmov\tx0, x4\n    9a90:\taa0203e3 \tmov\tx3, x2\n    9a94:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    9a98:\td4000001 \tsvc\t#0x0\n    9a9c:\t31002c1f \tcmn\tw0, #0xb\n    9aa0:\t540008c1 \tb.ne\t9bb8 <__pthread_mutex_trylock+0x584>\n    9aa4:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    9aa8:\t54000889 \tb.ls\t9bb8 <__pthread_mutex_trylock+0x584>\n    9aac:\tf90078a2 \tstr\tx2, [x5,#240]\n    9ab0:\t52800213 \tmov\tw19, #0x10                  \t// #16\n    9ab4:\t17ffff00 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9ab8:\t12000442 \tand\tw2, w2, #0x3\n    9abc:\t7100085f \tcmp\tw2, #0x2\n    9ac0:\t54000760 \tb.eq\t9bac <__pthread_mutex_trylock+0x578>\n    9ac4:\t7100045f \tcmp\tw2, #0x1\n    9ac8:\t54ffe3a1 \tb.ne\t973c <__pthread_mutex_trylock+0x108>\n    9acc:\tf90078bf \tstr\txzr, [x5,#240]\n    9ad0:\tb9400480 \tldr\tw0, [x4,#4]\n    9ad4:\t3100041f \tcmn\tw0, #0x1\n    9ad8:\t54ffde81 \tb.ne\t96a8 <__pthread_mutex_trylock+0x74>\n    9adc:\t52800173 \tmov\tw19, #0xb                   \t// #11\n    9ae0:\t17fffef5 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9ae4:\t12000442 \tand\tw2, w2, #0x3\n    9ae8:\t52800473 \tmov\tw19, #0x23                  \t// #35\n    9aec:\t7100085f \tcmp\tw2, #0x2\n    9af0:\t54ffde20 \tb.eq\t96b4 <__pthread_mutex_trylock+0x80>\n    9af4:\t7100045f \tcmp\tw2, #0x1\n    9af8:\t54ffe7e1 \tb.ne\t97f4 <__pthread_mutex_trylock+0x1c0>\n    9afc:\t17fffee8 \tb\t969c <__pthread_mutex_trylock+0x68>\n    9b00:\t310006df \tcmn\tw22, #0x1\n    9b04:\t528002d3 \tmov\tw19, #0x16                  \t// #22\n    9b08:\t54ffdd60 \tb.eq\t96b4 <__pthread_mutex_trylock+0x80>\n    9b0c:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n    9b10:\t94002052 \tbl\t11c58 <__pthread_tpp_change_priority>\n    9b14:\t17fffee8 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9b18:\t2a0003f3 \tmov\tw19, w0\n    9b1c:\t17fffee6 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9b20:\tb9400ea0 \tldr\tw0, [x21,#12]\n    9b24:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    9b28:\tb9000ab7 \tstr\tw23, [x21,#8]\n    9b2c:\t52800013 \tmov\tw19, #0x0                   \t// #0\n    9b30:\t11000400 \tadd\tw0, w0, #0x1\n    9b34:\tb90006a1 \tstr\tw1, [x21,#4]\n    9b38:\tb9000ea0 \tstr\tw0, [x21,#12]\n    9b3c:\t17fffede \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9b40:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    9b44:\t885f7c80 \tldxr\tw0, [x4]\n    9b48:\t8802fc81 \tstlxr\tw2, w1, [x4]\n    9b4c:\t35ffffc2 \tcbnz\tw2, 9b44 <__pthread_mutex_trylock+0x510>\n    9b50:\t7100041f \tcmp\tw0, #0x1\n    9b54:\t54ffeced \tb.le\t98f0 <__pthread_mutex_trylock+0x2bc>\n    9b58:\td2800021 \tmov\tx1, #0x1                   \t// #1\n    9b5c:\taa0403e0 \tmov\tx0, x4\n    9b60:\taa0103e2 \tmov\tx2, x1\n    9b64:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    9b68:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    9b6c:\td4000001 \tsvc\t#0x0\n    9b70:\t17ffff60 \tb\t98f0 <__pthread_mutex_trylock+0x2bc>\n    9b74:\taa0503e0 \tmov\tx0, x5\n    9b78:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    9b7c:\tb9000481 \tstr\tw1, [x4,#4]\n    9b80:\t12b00001 \tmov\tw1, #0x7fffffff            \t// #2147483647\n    9b84:\tb9000881 \tstr\tw1, [x4,#8]\n    9b88:\t52801053 \tmov\tw19, #0x82                  \t// #130\n    9b8c:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    9b90:\t927ff822 \tand\tx2, x1, #0xfffffffffffffffe\n    9b94:\tf81f8047 \tstr\tx7, [x2,#-8]\n    9b98:\tf9001081 \tstr\tx1, [x4,#32]\n    9b9c:\tf9000c80 \tstr\tx0, [x4,#24]\n    9ba0:\tf90070a7 \tstr\tx7, [x5,#224]\n    9ba4:\tf90078bf \tstr\txzr, [x5,#240]\n    9ba8:\t17fffec3 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9bac:\tf90078bf \tstr\txzr, [x5,#240]\n    9bb0:\t52800473 \tmov\tw19, #0x23                  \t// #35\n    9bb4:\t17fffec0 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9bb8:\tb9400080 \tldr\tw0, [x4]\n    9bbc:\t36f7f2a0 \ttbz\tw0, #30, 9a10 <__pthread_mutex_trylock+0x3dc>\n    9bc0:\tb9004fa0 \tstr\tw0, [x29,#76]\n    9bc4:\t12017801 \tand\tw1, w0, #0xbfffffff\n    9bc8:\t885ffc82 \tldaxr\tw2, [x4]\n    9bcc:\t6b00005f \tcmp\tw2, w0\n    9bd0:\t54000061 \tb.ne\t9bdc <__pthread_mutex_trylock+0x5a8>\n    9bd4:\t88037c81 \tstxr\tw3, w1, [x4]\n    9bd8:\t35ffff83 \tcbnz\tw3, 9bc8 <__pthread_mutex_trylock+0x594>\n    9bdc:\t54000060 \tb.eq\t9be8 <__pthread_mutex_trylock+0x5b4>\n    9be0:\tb9400080 \tldr\tw0, [x4]\n    9be4:\t17fffff7 \tb\t9bc0 <__pthread_mutex_trylock+0x58c>\n    9be8:\taa0503e0 \tmov\tx0, x5\n    9bec:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    9bf0:\tb9000481 \tstr\tw1, [x4,#4]\n    9bf4:\t12b00001 \tmov\tw1, #0x7fffffff            \t// #2147483647\n    9bf8:\tb9000881 \tstr\tw1, [x4,#8]\n    9bfc:\t91008081 \tadd\tx1, x4, #0x20\n    9c00:\t52801053 \tmov\tw19, #0x82                  \t// #130\n    9c04:\tf84e0c02 \tldr\tx2, [x0,#224]!\n    9c08:\t927ff843 \tand\tx3, x2, #0xfffffffffffffffe\n    9c0c:\tf81f8061 \tstr\tx1, [x3,#-8]\n    9c10:\tf9001082 \tstr\tx2, [x4,#32]\n    9c14:\tf9000c80 \tstr\tx0, [x4,#24]\n    9c18:\tf90070a1 \tstr\tx1, [x5,#224]\n    9c1c:\tf90078bf \tstr\txzr, [x5,#240]\n    9c20:\t17fffea5 \tb\t96b4 <__pthread_mutex_trylock+0x80>\n    9c24:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    9c28:\tb900049f \tstr\twzr, [x4,#4]\n    9c2c:\taa0403e0 \tmov\tx0, x4\n    9c30:\td28000e1 \tmov\tx1, #0x7                   \t// #7\n    9c34:\taa0203e3 \tmov\tx3, x2\n    9c38:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    9c3c:\td4000001 \tsvc\t#0x0\n    9c40:\t52801073 \tmov\tw19, #0x83                  \t// #131\n    9c44:\tf90078a2 \tstr\tx2, [x5,#240]\n    9c48:\t17fffe9b \tb\t96b4 <__pthread_mutex_trylock+0x80>\n\n0000000000009c4c <pthread_mutex_timedlock>:\n    9c4c:\ta9b77bfd \tstp\tx29, x30, [sp,#-144]!\n    9c50:\t52802fe2 \tmov\tw2, #0x17f                 \t// #383\n    9c54:\t910003fd \tmov\tx29, sp\n    9c58:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    9c5c:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    9c60:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    9c64:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    9c68:\ta90573fb \tstp\tx27, x28, [sp,#80]\n    9c6c:\tfd0033e8 \tstr\td8, [sp,#96]\n    9c70:\td53bd054 \tmrs\tx20, tpidr_el0\n    9c74:\tb9401003 \tldr\tw3, [x0,#16]\n    9c78:\td11bc294 \tsub\tx20, x20, #0x6f0\n    9c7c:\taa0003f3 \tmov\tx19, x0\n    9c80:\taa0103f5 \tmov\tx21, x1\n    9c84:\t0a020062 \tand\tw2, w3, w2\n    9c88:\t71008c5f \tcmp\tw2, #0x23\n    9c8c:\tb940d296 \tldr\tw22, [x20,#208]\n    9c90:\t54000788 \tb.hi\t9d80 <pthread_mutex_timedlock+0x134>\n    9c94:\t7100805f \tcmp\tw2, #0x20\n    9c98:\t54000822 \tb.cs\t9d9c <pthread_mutex_timedlock+0x150>\n    9c9c:\t7100085f \tcmp\tw2, #0x2\n    9ca0:\t54001560 \tb.eq\t9f4c <pthread_mutex_timedlock+0x300>\n    9ca4:\t54000f69 \tb.ls\t9e90 <pthread_mutex_timedlock+0x244>\n    9ca8:\t71000c5f \tcmp\tw2, #0x3\n    9cac:\t540015a0 \tb.eq\t9f60 <pthread_mutex_timedlock+0x314>\n    9cb0:\t51004042 \tsub\tw2, w2, #0x10\n    9cb4:\t71000c5f \tcmp\tw2, #0x3\n    9cb8:\t54002ce8 \tb.hi\ta254 <pthread_mutex_timedlock+0x608>\n    9cbc:\t91008018 \tadd\tx24, x0, #0x20\n    9cc0:\tf9007a98 \tstr\tx24, [x20,#240]\n    9cc4:\t321f77f7 \tmov\tw23, #0x7ffffffe            \t// #2147483646\n    9cc8:\tb9400002 \tldr\tw2, [x0]\n    9ccc:\t12020040 \tand\tw0, w2, #0x40000000\n    9cd0:\t35000360 \tcbnz\tw0, 9d3c <pthread_mutex_timedlock+0xf0>\n    9cd4:\t12007442 \tand\tw2, w2, #0x3fffffff\n    9cd8:\t6b0202df \tcmp\tw22, w2\n    9cdc:\t54001a60 \tb.eq\ta028 <pthread_mutex_timedlock+0x3dc>\n    9ce0:\tb90083bf \tstr\twzr, [x29,#128]\n    9ce4:\t885ffe63 \tldaxr\tw3, [x19]\n    9ce8:\t6b1f007f \tcmp\tw3, wzr\n    9cec:\t54000061 \tb.ne\t9cf8 <pthread_mutex_timedlock+0xac>\n    9cf0:\t88007e76 \tstxr\tw0, w22, [x19]\n    9cf4:\t35ffff80 \tcbnz\tw0, 9ce4 <pthread_mutex_timedlock+0x98>\n    9cf8:\t54001b20 \tb.eq\ta05c <pthread_mutex_timedlock+0x410>\n    9cfc:\t52801002 \tmov\tw2, #0x80                  \t// #128\n    9d00:\taa1303e0 \tmov\tx0, x19\n    9d04:\taa1503e1 \tmov\tx1, x21\n    9d08:\tb90083a3 \tstr\tw3, [x29,#128]\n    9d0c:\t9400177b \tbl\tfaf8 <__lll_robust_timedlock_wait>\n    9d10:\t2a0003e2 \tmov\tw2, w0\n    9d14:\tb9400a60 \tldr\tw0, [x19,#8]\n    9d18:\t6b17001f \tcmp\tw0, w23\n    9d1c:\t54002ae0 \tb.eq\ta278 <pthread_mutex_timedlock+0x62c>\n    9d20:\t7100585f \tcmp\tw2, #0x16\n    9d24:\t54003760 \tb.eq\ta410 <pthread_mutex_timedlock+0x7c4>\n    9d28:\t7101b85f \tcmp\tw2, #0x6e\n    9d2c:\t54003720 \tb.eq\ta410 <pthread_mutex_timedlock+0x7c4>\n    9d30:\t12020040 \tand\tw0, w2, #0x40000000\n    9d34:\t36f019e2 \ttbz\tw2, #30, a070 <pthread_mutex_timedlock+0x424>\n    9d38:\t34fffce0 \tcbz\tw0, 9cd4 <pthread_mutex_timedlock+0x88>\n    9d3c:\t12010040 \tand\tw0, w2, #0x80000000\n    9d40:\tb90083a2 \tstr\tw2, [x29,#128]\n    9d44:\t2a160000 \torr\tw0, w0, w22\n    9d48:\t2a0203e1 \tmov\tw1, w2\n    9d4c:\t885ffe63 \tldaxr\tw3, [x19]\n    9d50:\t6b01007f \tcmp\tw3, w1\n    9d54:\t54000061 \tb.ne\t9d60 <pthread_mutex_timedlock+0x114>\n    9d58:\t88047e60 \tstxr\tw4, w0, [x19]\n    9d5c:\t35ffff84 \tcbnz\tw4, 9d4c <pthread_mutex_timedlock+0x100>\n    9d60:\t54000040 \tb.eq\t9d68 <pthread_mutex_timedlock+0x11c>\n    9d64:\tb90083a3 \tstr\tw3, [x29,#128]\n    9d68:\tb94083a0 \tldr\tw0, [x29,#128]\n    9d6c:\t6b00005f \tcmp\tw2, w0\n    9d70:\t54003880 \tb.eq\ta480 <pthread_mutex_timedlock+0x834>\n    9d74:\t2a0003e2 \tmov\tw2, w0\n    9d78:\t12020000 \tand\tw0, w0, #0x40000000\n    9d7c:\t17ffffd5 \tb\t9cd0 <pthread_mutex_timedlock+0x84>\n    9d80:\t71010c5f \tcmp\tw2, #0x43\n    9d84:\t54000b28 \tb.hi\t9ee8 <pthread_mutex_timedlock+0x29c>\n    9d88:\t7101005f \tcmp\tw2, #0x40\n    9d8c:\t54001882 \tb.cs\ta09c <pthread_mutex_timedlock+0x450>\n    9d90:\t5100c042 \tsub\tw2, w2, #0x30\n    9d94:\t71000c5f \tcmp\tw2, #0x3\n    9d98:\t540025e8 \tb.hi\ta254 <pthread_mutex_timedlock+0x608>\n    9d9c:\t121c0064 \tand\tw4, w3, #0x10\n    9da0:\t36200083 \ttbz\tw3, #4, 9db0 <pthread_mutex_timedlock+0x164>\n    9da4:\t91008260 \tadd\tx0, x19, #0x20\n    9da8:\tb2400000 \torr\tx0, x0, #0x1\n    9dac:\tf9007a80 \tstr\tx0, [x20,#240]\n    9db0:\tb9400260 \tldr\tw0, [x19]\n    9db4:\t12007400 \tand\tw0, w0, #0x3fffffff\n    9db8:\t6b0002df \tcmp\tw22, w0\n    9dbc:\t54002d40 \tb.eq\ta364 <pthread_mutex_timedlock+0x718>\n    9dc0:\tb90083bf \tstr\twzr, [x29,#128]\n    9dc4:\t885ffe60 \tldaxr\tw0, [x19]\n    9dc8:\t6b1f001f \tcmp\tw0, wzr\n    9dcc:\t54000061 \tb.ne\t9dd8 <pthread_mutex_timedlock+0x18c>\n    9dd0:\t88017e76 \tstxr\tw1, w22, [x19]\n    9dd4:\t35ffff81 \tcbnz\tw1, 9dc4 <pthread_mutex_timedlock+0x178>\n    9dd8:\t54000040 \tb.eq\t9de0 <pthread_mutex_timedlock+0x194>\n    9ddc:\tb90083a0 \tstr\tw0, [x29,#128]\n    9de0:\tb94083a0 \tldr\tw0, [x29,#128]\n    9de4:\t340025e0 \tcbz\tw0, a2a0 <pthread_mutex_timedlock+0x654>\n    9de8:\td28000c1 \tmov\tx1, #0x6                   \t// #6\n    9dec:\t350000c4 \tcbnz\tw4, 9e04 <pthread_mutex_timedlock+0x1b8>\n    9df0:\tb9401261 \tldr\tw1, [x19,#16]\n    9df4:\t528010c0 \tmov\tw0, #0x86                  \t// #134\n    9df8:\t12190021 \tand\tw1, w1, #0x80\n    9dfc:\t4a000021 \teor\tw1, w1, w0\n    9e00:\t93407c21 \tsxtw\tx1, w1\n    9e04:\taa1303e0 \tmov\tx0, x19\n    9e08:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    9e0c:\taa1503e3 \tmov\tx3, x21\n    9e10:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    9e14:\td4000001 \tsvc\t#0x0\n    9e18:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    9e1c:\taa0003e1 \tmov\tx1, x0\n    9e20:\t54002849 \tb.ls\ta328 <pthread_mutex_timedlock+0x6dc>\n    9e24:\t3101b81f \tcmn\tw0, #0x6e\n    9e28:\t52800dc0 \tmov\tw0, #0x6e                  \t// #110\n    9e2c:\t540004e0 \tb.eq\t9ec8 <pthread_mutex_timedlock+0x27c>\n    9e30:\t121a7820 \tand\tw0, w1, #0xffffffdf\n    9e34:\t31008c1f \tcmn\tw0, #0x23\n    9e38:\t54003401 \tb.ne\ta4b8 <pthread_mutex_timedlock+0x86c>\n    9e3c:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    9e40:\t910203a1 \tadd\tx1, x29, #0x80\n    9e44:\td2800e28 \tmov\tx8, #0x71                  \t// #113\n    9e48:\td4000001 \tsvc\t#0x0\n    9e4c:\tf94002a0 \tldr\tx0, [x21]\n    9e50:\tf94006a1 \tldr\tx1, [x21,#8]\n    9e54:\tf94047a2 \tldr\tx2, [x29,#136]\n    9e58:\tf94043a3 \tldr\tx3, [x29,#128]\n    9e5c:\teb020021 \tsubs\tx1, x1, x2\n    9e60:\tcb030000 \tsub\tx0, x0, x3\n    9e64:\tf9003ba0 \tstr\tx0, [x29,#112]\n    9e68:\t540034c4 \tb.mi\ta500 <pthread_mutex_timedlock+0x8b4>\n    9e6c:\tf9003fa1 \tstr\tx1, [x29,#120]\n    9e70:\tb7f800c0 \ttbnz\tx0, #63, 9e88 <pthread_mutex_timedlock+0x23c>\n    9e74:\t9101c3b3 \tadd\tx19, x29, #0x70\n    9e78:\taa1303e0 \tmov\tx0, x19\n    9e7c:\taa1303e1 \tmov\tx1, x19\n    9e80:\t940019bc \tbl\t10570 <__nanosleep_nocancel>\n    9e84:\t35ffffa0 \tcbnz\tw0, 9e78 <pthread_mutex_timedlock+0x22c>\n    9e88:\t52800dc0 \tmov\tw0, #0x6e                  \t// #110\n    9e8c:\t1400000f \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    9e90:\t35000b42 \tcbnz\tw2, 9ff8 <pthread_mutex_timedlock+0x3ac>\n    9e94:\tb90083bf \tstr\twzr, [x29,#128]\n    9e98:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    9e9c:\t885ffe63 \tldaxr\tw3, [x19]\n    9ea0:\t6b1f007f \tcmp\tw3, wzr\n    9ea4:\t54000061 \tb.ne\t9eb0 <pthread_mutex_timedlock+0x264>\n    9ea8:\t88017e60 \tstxr\tw1, w0, [x19]\n    9eac:\t35ffff81 \tcbnz\tw1, 9e9c <pthread_mutex_timedlock+0x250>\n    9eb0:\t540003a1 \tb.ne\t9f24 <pthread_mutex_timedlock+0x2d8>\n    9eb4:\tb9400e61 \tldr\tw1, [x19,#12]\n    9eb8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    9ebc:\tb9000a76 \tstr\tw22, [x19,#8]\n    9ec0:\t11000421 \tadd\tw1, w1, #0x1\n    9ec4:\tb9000e61 \tstr\tw1, [x19,#12]\n    9ec8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    9ecc:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    9ed0:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    9ed4:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    9ed8:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    9edc:\tfd4033e8 \tldr\td8, [sp,#96]\n    9ee0:\ta8c97bfd \tldp\tx29, x30, [sp],#144\n    9ee4:\td65f03c0 \tret\n    9ee8:\t7104005f \tcmp\tw2, #0x100\n    9eec:\t54001b01 \tb.ne\ta24c <pthread_mutex_timedlock+0x600>\n    9ef0:\tb90083bf \tstr\twzr, [x29,#128]\n    9ef4:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    9ef8:\t885ffe63 \tldaxr\tw3, [x19]\n    9efc:\t6b1f007f \tcmp\tw3, wzr\n    9f00:\t54000061 \tb.ne\t9f0c <pthread_mutex_timedlock+0x2c0>\n    9f04:\t88047e62 \tstxr\tw4, w2, [x19]\n    9f08:\t35ffff84 \tcbnz\tw4, 9ef8 <pthread_mutex_timedlock+0x2ac>\n    9f0c:\t540018e0 \tb.eq\ta228 <pthread_mutex_timedlock+0x5dc>\n    9f10:\tb9401262 \tldr\tw2, [x19,#16]\n    9f14:\tb90083a3 \tstr\tw3, [x29,#128]\n    9f18:\t12190042 \tand\tw2, w2, #0x80\n    9f1c:\t94001645 \tbl\tf830 <__lll_timedlock_wait>\n    9f20:\t17ffffea \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    9f24:\tb9401262 \tldr\tw2, [x19,#16]\n    9f28:\taa1303e0 \tmov\tx0, x19\n    9f2c:\taa1503e1 \tmov\tx1, x21\n    9f30:\tb90083a3 \tstr\tw3, [x29,#128]\n    9f34:\t12190042 \tand\tw2, w2, #0x80\n    9f38:\t9400163e \tbl\tf830 <__lll_timedlock_wait>\n    9f3c:\t2a0003e2 \tmov\tw2, w0\n    9f40:\t2a0203e0 \tmov\tw0, w2\n    9f44:\t35fffc22 \tcbnz\tw2, 9ec8 <pthread_mutex_timedlock+0x27c>\n    9f48:\t17ffffdb \tb\t9eb4 <pthread_mutex_timedlock+0x268>\n    9f4c:\tb9400800 \tldr\tw0, [x0,#8]\n    9f50:\t6b0002df \tcmp\tw22, w0\n    9f54:\t54fffa01 \tb.ne\t9e94 <pthread_mutex_timedlock+0x248>\n    9f58:\t52800460 \tmov\tw0, #0x23                  \t// #35\n    9f5c:\t17ffffdb \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    9f60:\tf0000140 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    9f64:\tb9432c00 \tldr\tw0, [x0,#812]\n    9f68:\t34fff960 \tcbz\tw0, 9e94 <pthread_mutex_timedlock+0x248>\n    9f6c:\tb90083bf \tstr\twzr, [x29,#128]\n    9f70:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    9f74:\t885ffe60 \tldaxr\tw0, [x19]\n    9f78:\t6b1f001f \tcmp\tw0, wzr\n    9f7c:\t54000061 \tb.ne\t9f88 <pthread_mutex_timedlock+0x33c>\n    9f80:\t88017e62 \tstxr\tw1, w2, [x19]\n    9f84:\t35ffff81 \tcbnz\tw1, 9f74 <pthread_mutex_timedlock+0x328>\n    9f88:\t1a9f17f4 \tcset\tw20, eq\n    9f8c:\t35fff954 \tcbnz\tw20, 9eb4 <pthread_mutex_timedlock+0x268>\n    9f90:\tb9401661 \tldr\tw1, [x19,#20]\n    9f94:\t52800c80 \tmov\tw0, #0x64                  \t// #100\n    9f98:\t11001421 \tadd\tw1, w1, #0x5\n    9f9c:\t531f7821 \tlsl\tw1, w1, #1\n    9fa0:\t7101903f \tcmp\tw1, #0x64\n    9fa4:\t1a80d021 \tcsel\tw1, w1, w0, le\n    9fa8:\t11000694 \tadd\tw20, w20, #0x1\n    9fac:\tb90083bf \tstr\twzr, [x29,#128]\n    9fb0:\t51000680 \tsub\tw0, w20, #0x1\n    9fb4:\t6b01001f \tcmp\tw0, w1\n    9fb8:\t5400200a \tb.ge\ta3b8 <pthread_mutex_timedlock+0x76c>\n    9fbc:\t885ffe60 \tldaxr\tw0, [x19]\n    9fc0:\t6b1f001f \tcmp\tw0, wzr\n    9fc4:\t54000061 \tb.ne\t9fd0 <pthread_mutex_timedlock+0x384>\n    9fc8:\t88037e62 \tstxr\tw3, w2, [x19]\n    9fcc:\t35ffff83 \tcbnz\tw3, 9fbc <pthread_mutex_timedlock+0x370>\n    9fd0:\t54fffec1 \tb.ne\t9fa8 <pthread_mutex_timedlock+0x35c>\n    9fd4:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    9fd8:\tb9401661 \tldr\tw1, [x19,#20]\n    9fdc:\t4b010294 \tsub\tw20, w20, w1\n    9fe0:\t11001e80 \tadd\tw0, w20, #0x7\n    9fe4:\t6b1f029f \tcmp\tw20, wzr\n    9fe8:\t1a94b014 \tcsel\tw20, w0, w20, lt\n    9fec:\t0b940c34 \tadd\tw20, w1, w20, asr #3\n    9ff0:\tb9001674 \tstr\tw20, [x19,#20]\n    9ff4:\t17ffffd3 \tb\t9f40 <pthread_mutex_timedlock+0x2f4>\n    9ff8:\t7100045f \tcmp\tw2, #0x1\n    9ffc:\t540012c1 \tb.ne\ta254 <pthread_mutex_timedlock+0x608>\n    a000:\tb9400a60 \tldr\tw0, [x19,#8]\n    a004:\t6b16001f \tcmp\tw0, w22\n    a008:\t54001701 \tb.ne\ta2e8 <pthread_mutex_timedlock+0x69c>\n    a00c:\tb9400660 \tldr\tw0, [x19,#4]\n    a010:\t3100041f \tcmn\tw0, #0x1\n    a014:\t54001ba0 \tb.eq\ta388 <pthread_mutex_timedlock+0x73c>\n    a018:\t11000401 \tadd\tw1, w0, #0x1\n    a01c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    a020:\tb9000661 \tstr\tw1, [x19,#4]\n    a024:\t17ffffa9 \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a028:\tb9401261 \tldr\tw1, [x19,#16]\n    a02c:\t12001821 \tand\tw1, w1, #0x7f\n    a030:\t7100483f \tcmp\tw1, #0x12\n    a034:\t54002200 \tb.eq\ta474 <pthread_mutex_timedlock+0x828>\n    a038:\t7100443f \tcmp\tw1, #0x11\n    a03c:\t54ffe521 \tb.ne\t9ce0 <pthread_mutex_timedlock+0x94>\n    a040:\tf9007a9f \tstr\txzr, [x20,#240]\n    a044:\tb9400661 \tldr\tw1, [x19,#4]\n    a048:\t3100043f \tcmn\tw1, #0x1\n    a04c:\t540019e0 \tb.eq\ta388 <pthread_mutex_timedlock+0x73c>\n    a050:\t11000421 \tadd\tw1, w1, #0x1\n    a054:\tb9000661 \tstr\tw1, [x19,#4]\n    a058:\t17ffff9c \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a05c:\tb9400a61 \tldr\tw1, [x19,#8]\n    a060:\t321f77e0 \tmov\tw0, #0x7ffffffe            \t// #2147483646\n    a064:\t6b00003f \tcmp\tw1, w0\n    a068:\t54001080 \tb.eq\ta278 <pthread_mutex_timedlock+0x62c>\n    a06c:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    a070:\taa1403e0 \tmov\tx0, x20\n    a074:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    a078:\tb9000661 \tstr\tw1, [x19,#4]\n    a07c:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    a080:\t927ff823 \tand\tx3, x1, #0xfffffffffffffffe\n    a084:\tf81f8078 \tstr\tx24, [x3,#-8]\n    a088:\tf9001261 \tstr\tx1, [x19,#32]\n    a08c:\tf9000e60 \tstr\tx0, [x19,#24]\n    a090:\tf9007298 \tstr\tx24, [x20,#224]\n    a094:\tf9007a9f \tstr\txzr, [x20,#240]\n    a098:\t17ffffaa \tb\t9f40 <pthread_mutex_timedlock+0x2f4>\n    a09c:\tb9400800 \tldr\tw0, [x0,#8]\n    a0a0:\tb9400261 \tldr\tw1, [x19]\n    a0a4:\t6b16001f \tcmp\tw0, w22\n    a0a8:\t54001a60 \tb.eq\ta3f4 <pthread_mutex_timedlock+0x7a8>\n    a0ac:\t12800014 \tmov\tw20, #0xffffffff            \t// #-1\n    a0b0:\t9101c3b8 \tadd\tx24, x29, #0x70\n    a0b4:\t53137c20 \tlsr\tw0, w1, #19\n    a0b8:\t2a0003f7 \tmov\tw23, w0\n    a0bc:\t1e270008 \tfmov\ts8, w0\n    a0c0:\t94001fa6 \tbl\t11f58 <__pthread_current_priority>\n    a0c4:\t6b0002ff \tcmp\tw23, w0\n    a0c8:\t54001fcb \tb.lt\ta4c0 <pthread_mutex_timedlock+0x874>\n    a0cc:\t2a1403e0 \tmov\tw0, w20\n    a0d0:\t2a1703e1 \tmov\tw1, w23\n    a0d4:\t94001ee1 \tbl\t11c58 <__pthread_tpp_change_priority>\n    a0d8:\t35ffef80 \tcbnz\tw0, 9ec8 <pthread_mutex_timedlock+0x27c>\n    a0dc:\t910243bc \tadd\tx28, x29, #0x90\n    a0e0:\t530d32f4 \tlsl\tw20, w23, #19\n    a0e4:\t32000297 \torr\tw23, w20, #0x1\n    a0e8:\t2a1403e0 \tmov\tw0, w20\n    a0ec:\tb81f0f94 \tstr\tw20, [x28,#-16]!\n    a0f0:\t885ffe61 \tldaxr\tw1, [x19]\n    a0f4:\t6b00003f \tcmp\tw1, w0\n    a0f8:\t54000061 \tb.ne\ta104 <pthread_mutex_timedlock+0x4b8>\n    a0fc:\t88027e77 \tstxr\tw2, w23, [x19]\n    a100:\t35ffff82 \tcbnz\tw2, a0f0 <pthread_mutex_timedlock+0x4a4>\n    a104:\t54000040 \tb.eq\ta10c <pthread_mutex_timedlock+0x4c0>\n    a108:\tb90083a1 \tstr\tw1, [x29,#128]\n    a10c:\tb94083a0 \tldr\tw0, [x29,#128]\n    a110:\t6b00029f \tcmp\tw20, w0\n    a114:\t54000780 \tb.eq\ta204 <pthread_mutex_timedlock+0x5b8>\n    a118:\t321f029b \torr\tw27, w20, #0x2\n    a11c:\t910203ba \tadd\tx26, x29, #0x80\n    a120:\t93407f79 \tsxtw\tx25, w27\n    a124:\tb90083b7 \tstr\tw23, [x29,#128]\n    a128:\tb9400380 \tldr\tw0, [x28]\n    a12c:\t885ffe61 \tldaxr\tw1, [x19]\n    a130:\t6b00003f \tcmp\tw1, w0\n    a134:\t54000061 \tb.ne\ta140 <pthread_mutex_timedlock+0x4f4>\n    a138:\t88027e7b \tstxr\tw2, w27, [x19]\n    a13c:\t35ffff82 \tcbnz\tw2, a12c <pthread_mutex_timedlock+0x4e0>\n    a140:\t54000040 \tb.eq\ta148 <pthread_mutex_timedlock+0x4fc>\n    a144:\tb9000381 \tstr\tw1, [x28]\n    a148:\tb94083a1 \tldr\tw1, [x29,#128]\n    a14c:\t120d3020 \tand\tw0, w1, #0xfff80000\n    a150:\t6b00029f \tcmp\tw20, w0\n    a154:\t540011e1 \tb.ne\ta390 <pthread_mutex_timedlock+0x744>\n    a158:\t6b01029f \tcmp\tw20, w1\n    a15c:\t540003c0 \tb.eq\ta1d4 <pthread_mutex_timedlock+0x588>\n    a160:\tf94006a1 \tldr\tx1, [x21,#8]\n    a164:\td2993fe0 \tmov\tx0, #0xc9ff                \t// #51711\n    a168:\tf2a77340 \tmovk\tx0, #0x3b9a, lsl #16\n    a16c:\teb00003f \tcmp\tx1, x0\n    a170:\t54001148 \tb.hi\ta398 <pthread_mutex_timedlock+0x74c>\n    a174:\td2800001 \tmov\tx1, #0x0                   \t// #0\n    a178:\taa1803e0 \tmov\tx0, x24\n    a17c:\t97ffeb91 \tbl\t4fc0 <__gettimeofday@plt>\n    a180:\tf9403fa7 \tldr\tx7, [x29,#120]\n    a184:\tf94002a6 \tldr\tx6, [x21]\n    a188:\tf94006a0 \tldr\tx0, [x21,#8]\n    a18c:\tcb0714e5 \tsub\tx5, x7, x7, lsl #5\n    a190:\tf9403ba1 \tldr\tx1, [x29,#112]\n    a194:\td37ef4a5 \tlsl\tx5, x5, #2\n    a198:\tcb0700a4 \tsub\tx4, x5, x7\n    a19c:\tcb0100c6 \tsub\tx6, x6, x1\n    a1a0:\tf90043a6 \tstr\tx6, [x29,#128]\n    a1a4:\tab040c04 \tadds\tx4, x0, x4, lsl #3\n    a1a8:\t54000344 \tb.mi\ta210 <pthread_mutex_timedlock+0x5c4>\n    a1ac:\tf90047a4 \tstr\tx4, [x29,#136]\n    a1b0:\tb7f81006 \ttbnz\tx6, #63, a3b0 <pthread_mutex_timedlock+0x764>\n    a1b4:\tb9401261 \tldr\tw1, [x19,#16]\n    a1b8:\taa1303e0 \tmov\tx0, x19\n    a1bc:\taa1903e2 \tmov\tx2, x25\n    a1c0:\taa1a03e3 \tmov\tx3, x26\n    a1c4:\t2a2103e1 \tmvn\tw1, w1\n    a1c8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    a1cc:\t92790021 \tand\tx1, x1, #0x80\n    a1d0:\td4000001 \tsvc\t#0x0\n    a1d4:\tb90083b4 \tstr\tw20, [x29,#128]\n    a1d8:\tb9400380 \tldr\tw0, [x28]\n    a1dc:\t885ffe61 \tldaxr\tw1, [x19]\n    a1e0:\t6b00003f \tcmp\tw1, w0\n    a1e4:\t54000061 \tb.ne\ta1f0 <pthread_mutex_timedlock+0x5a4>\n    a1e8:\t88027e7b \tstxr\tw2, w27, [x19]\n    a1ec:\t35ffff82 \tcbnz\tw2, a1dc <pthread_mutex_timedlock+0x590>\n    a1f0:\t54000040 \tb.eq\ta1f8 <pthread_mutex_timedlock+0x5ac>\n    a1f4:\tb9000381 \tstr\tw1, [x28]\n    a1f8:\tb94083a0 \tldr\tw0, [x29,#128]\n    a1fc:\t6b00029f \tcmp\tw20, w0\n    a200:\t54fff921 \tb.ne\ta124 <pthread_mutex_timedlock+0x4d8>\n    a204:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    a208:\tb9000660 \tstr\tw0, [x19,#4]\n    a20c:\t17ffff2a \tb\t9eb4 <pthread_mutex_timedlock+0x268>\n    a210:\td2994000 \tmov\tx0, #0xca00                \t// #51712\n    a214:\td10004c6 \tsub\tx6, x6, #0x1\n    a218:\tf2a77340 \tmovk\tx0, #0x3b9a, lsl #16\n    a21c:\tf90043a6 \tstr\tx6, [x29,#128]\n    a220:\t8b000084 \tadd\tx4, x4, x0\n    a224:\t17ffffe2 \tb\ta1ac <pthread_mutex_timedlock+0x560>\n    a228:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    a22c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    a230:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    a234:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    a238:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    a23c:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    a240:\tfd4033e8 \tldr\td8, [sp,#96]\n    a244:\ta8c97bfd \tldp\tx29, x30, [sp],#144\n    a248:\td65f03c0 \tret\n    a24c:\t7104045f \tcmp\tw2, #0x101\n    a250:\t54ffed80 \tb.eq\ta000 <pthread_mutex_timedlock+0x3b4>\n    a254:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    a258:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    a25c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    a260:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    a264:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    a268:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    a26c:\tfd4033e8 \tldr\td8, [sp,#96]\n    a270:\ta8c97bfd \tldp\tx29, x30, [sp],#144\n    a274:\td65f03c0 \tret\n    a278:\tb900067f \tstr\twzr, [x19,#4]\n    a27c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    a280:\t885f7e60 \tldxr\tw0, [x19]\n    a284:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    a288:\t35ffffc2 \tcbnz\tw2, a280 <pthread_mutex_timedlock+0x634>\n    a28c:\t7100041f \tcmp\tw0, #0x1\n    a290:\t54000e4c \tb.gt\ta458 <pthread_mutex_timedlock+0x80c>\n    a294:\tf9007a9f \tstr\txzr, [x20,#240]\n    a298:\t52801060 \tmov\tw0, #0x83                  \t// #131\n    a29c:\t17ffff0b \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a2a0:\t34fffb24 \tcbz\tw4, a204 <pthread_mutex_timedlock+0x5b8>\n    a2a4:\tb9400a61 \tldr\tw1, [x19,#8]\n    a2a8:\t321f77e0 \tmov\tw0, #0x7ffffffe            \t// #2147483646\n    a2ac:\t6b00003f \tcmp\tw1, w0\n    a2b0:\t54001140 \tb.eq\ta4d8 <pthread_mutex_timedlock+0x88c>\n    a2b4:\taa1403e0 \tmov\tx0, x20\n    a2b8:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    a2bc:\tb9000661 \tstr\tw1, [x19,#4]\n    a2c0:\t91008262 \tadd\tx2, x19, #0x20\n    a2c4:\tb2400043 \torr\tx3, x2, #0x1\n    a2c8:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    a2cc:\t927ff824 \tand\tx4, x1, #0xfffffffffffffffe\n    a2d0:\tf81f8082 \tstr\tx2, [x4,#-8]\n    a2d4:\tf9001261 \tstr\tx1, [x19,#32]\n    a2d8:\tf9000e60 \tstr\tx0, [x19,#24]\n    a2dc:\tf9007283 \tstr\tx3, [x20,#224]\n    a2e0:\tf9007a9f \tstr\txzr, [x20,#240]\n    a2e4:\t17fffef4 \tb\t9eb4 <pthread_mutex_timedlock+0x268>\n    a2e8:\tb90083bf \tstr\twzr, [x29,#128]\n    a2ec:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    a2f0:\t885ffe63 \tldaxr\tw3, [x19]\n    a2f4:\t6b1f007f \tcmp\tw3, wzr\n    a2f8:\t54000061 \tb.ne\ta304 <pthread_mutex_timedlock+0x6b8>\n    a2fc:\t88017e60 \tstxr\tw1, w0, [x19]\n    a300:\t35ffff81 \tcbnz\tw1, a2f0 <pthread_mutex_timedlock+0x6a4>\n    a304:\t54fff800 \tb.eq\ta204 <pthread_mutex_timedlock+0x5b8>\n    a308:\tb9401262 \tldr\tw2, [x19,#16]\n    a30c:\taa1303e0 \tmov\tx0, x19\n    a310:\taa1503e1 \tmov\tx1, x21\n    a314:\tb90083a3 \tstr\tw3, [x29,#128]\n    a318:\t12190042 \tand\tw2, w2, #0x80\n    a31c:\t94001545 \tbl\tf830 <__lll_timedlock_wait>\n    a320:\t35ffdd40 \tcbnz\tw0, 9ec8 <pthread_mutex_timedlock+0x27c>\n    a324:\t17ffffb8 \tb\ta204 <pthread_mutex_timedlock+0x5b8>\n    a328:\tb9400260 \tldr\tw0, [x19]\n    a32c:\t36f7fba0 \ttbz\tw0, #30, a2a0 <pthread_mutex_timedlock+0x654>\n    a330:\t910203bc \tadd\tx28, x29, #0x80\n    a334:\tb90083a0 \tstr\tw0, [x29,#128]\n    a338:\t12017800 \tand\tw0, w0, #0xbfffffff\n    a33c:\tb9400381 \tldr\tw1, [x28]\n    a340:\t885ffe62 \tldaxr\tw2, [x19]\n    a344:\t6b01005f \tcmp\tw2, w1\n    a348:\t54000061 \tb.ne\ta354 <pthread_mutex_timedlock+0x708>\n    a34c:\t88037e60 \tstxr\tw3, w0, [x19]\n    a350:\t35ffff83 \tcbnz\tw3, a340 <pthread_mutex_timedlock+0x6f4>\n    a354:\t54000620 \tb.eq\ta418 <pthread_mutex_timedlock+0x7cc>\n    a358:\tb9000382 \tstr\tw2, [x28]\n    a35c:\tb9400260 \tldr\tw0, [x19]\n    a360:\t17fffff5 \tb\ta334 <pthread_mutex_timedlock+0x6e8>\n    a364:\t12000463 \tand\tw3, w3, #0x3\n    a368:\t7100087f \tcmp\tw3, #0x2\n    a36c:\t54000840 \tb.eq\ta474 <pthread_mutex_timedlock+0x828>\n    a370:\t7100047f \tcmp\tw3, #0x1\n    a374:\t54ffd261 \tb.ne\t9dc0 <pthread_mutex_timedlock+0x174>\n    a378:\tf9007a9f \tstr\txzr, [x20,#240]\n    a37c:\tb9400660 \tldr\tw0, [x19,#4]\n    a380:\t3100041f \tcmn\tw0, #0x1\n    a384:\t54ffe4a1 \tb.ne\ta018 <pthread_mutex_timedlock+0x3cc>\n    a388:\t52800160 \tmov\tw0, #0xb                   \t// #11\n    a38c:\t17fffecf \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a390:\t1e260114 \tfmov\tw20, s8\n    a394:\t17ffff48 \tb\ta0b4 <pthread_mutex_timedlock+0x468>\n    a398:\t528002d3 \tmov\tw19, #0x16                  \t// #22\n    a39c:\t1e260100 \tfmov\tw0, s8\n    a3a0:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n    a3a4:\t94001e2d \tbl\t11c58 <__pthread_tpp_change_priority>\n    a3a8:\t2a1303e0 \tmov\tw0, w19\n    a3ac:\t17fffec7 \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a3b0:\t52800dd3 \tmov\tw19, #0x6e                  \t// #110\n    a3b4:\t17fffffa \tb\ta39c <pthread_mutex_timedlock+0x750>\n    a3b8:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    a3bc:\t885ffe63 \tldaxr\tw3, [x19]\n    a3c0:\t6b1f007f \tcmp\tw3, wzr\n    a3c4:\t54000061 \tb.ne\ta3d0 <pthread_mutex_timedlock+0x784>\n    a3c8:\t88017e60 \tstxr\tw1, w0, [x19]\n    a3cc:\t35ffff81 \tcbnz\tw1, a3bc <pthread_mutex_timedlock+0x770>\n    a3d0:\t54ffe020 \tb.eq\t9fd4 <pthread_mutex_timedlock+0x388>\n    a3d4:\tb9401262 \tldr\tw2, [x19,#16]\n    a3d8:\taa1303e0 \tmov\tx0, x19\n    a3dc:\taa1503e1 \tmov\tx1, x21\n    a3e0:\tb90083a3 \tstr\tw3, [x29,#128]\n    a3e4:\t12190042 \tand\tw2, w2, #0x80\n    a3e8:\t94001512 \tbl\tf830 <__lll_timedlock_wait>\n    a3ec:\t2a0003e2 \tmov\tw2, w0\n    a3f0:\t17fffefa \tb\t9fd8 <pthread_mutex_timedlock+0x38c>\n    a3f4:\t12000463 \tand\tw3, w3, #0x3\n    a3f8:\t52800460 \tmov\tw0, #0x23                  \t// #35\n    a3fc:\t7100087f \tcmp\tw3, #0x2\n    a400:\t54ffd640 \tb.eq\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a404:\t7100047f \tcmp\tw3, #0x1\n    a408:\t54ffe521 \tb.ne\ta0ac <pthread_mutex_timedlock+0x460>\n    a40c:\t17ffff00 \tb\ta00c <pthread_mutex_timedlock+0x3c0>\n    a410:\t2a0203e0 \tmov\tw0, w2\n    a414:\t17fffead \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a418:\taa1403e1 \tmov\tx1, x20\n    a41c:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    a420:\tb9000660 \tstr\tw0, [x19,#4]\n    a424:\t12b00000 \tmov\tw0, #0x7fffffff            \t// #2147483647\n    a428:\tb9000a60 \tstr\tw0, [x19,#8]\n    a42c:\t91008263 \tadd\tx3, x19, #0x20\n    a430:\tb2400064 \torr\tx4, x3, #0x1\n    a434:\t52801040 \tmov\tw0, #0x82                  \t// #130\n    a438:\tf84e0c22 \tldr\tx2, [x1,#224]!\n    a43c:\t927ff845 \tand\tx5, x2, #0xfffffffffffffffe\n    a440:\tf81f80a3 \tstr\tx3, [x5,#-8]\n    a444:\tf9001262 \tstr\tx2, [x19,#32]\n    a448:\tf9000e61 \tstr\tx1, [x19,#24]\n    a44c:\tf9007284 \tstr\tx4, [x20,#224]\n    a450:\tf9007a9f \tstr\txzr, [x20,#240]\n    a454:\t17fffe9d \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a458:\td2800021 \tmov\tx1, #0x1                   \t// #1\n    a45c:\taa1303e0 \tmov\tx0, x19\n    a460:\taa0103e2 \tmov\tx2, x1\n    a464:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    a468:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    a46c:\td4000001 \tsvc\t#0x0\n    a470:\t17ffff89 \tb\ta294 <pthread_mutex_timedlock+0x648>\n    a474:\tf9007a9f \tstr\txzr, [x20,#240]\n    a478:\t52800460 \tmov\tw0, #0x23                  \t// #35\n    a47c:\t17fffe93 \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a480:\taa1403e1 \tmov\tx1, x20\n    a484:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    a488:\tb9000660 \tstr\tw0, [x19,#4]\n    a48c:\t12b00000 \tmov\tw0, #0x7fffffff            \t// #2147483647\n    a490:\tb9000a60 \tstr\tw0, [x19,#8]\n    a494:\t52801040 \tmov\tw0, #0x82                  \t// #130\n    a498:\tf84e0c22 \tldr\tx2, [x1,#224]!\n    a49c:\t927ff843 \tand\tx3, x2, #0xfffffffffffffffe\n    a4a0:\tf81f8078 \tstr\tx24, [x3,#-8]\n    a4a4:\tf9001262 \tstr\tx2, [x19,#32]\n    a4a8:\tf9000e61 \tstr\tx1, [x19,#24]\n    a4ac:\tf9007298 \tstr\tx24, [x20,#224]\n    a4b0:\tf9007a9f \tstr\txzr, [x20,#240]\n    a4b4:\t17fffe85 \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a4b8:\t4b0103e0 \tneg\tw0, w1\n    a4bc:\t17fffe83 \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a4c0:\t3100069f \tcmn\tw20, #0x1\n    a4c4:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    a4c8:\t54ffd000 \tb.eq\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a4cc:\t1e270288 \tfmov\ts8, w20\n    a4d0:\t2a0003f3 \tmov\tw19, w0\n    a4d4:\t17ffffb2 \tb\ta39c <pthread_mutex_timedlock+0x750>\n    a4d8:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    a4dc:\tb900067f \tstr\twzr, [x19,#4]\n    a4e0:\taa1303e0 \tmov\tx0, x19\n    a4e4:\td28000e1 \tmov\tx1, #0x7                   \t// #7\n    a4e8:\taa0203e3 \tmov\tx3, x2\n    a4ec:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    a4f0:\td4000001 \tsvc\t#0x0\n    a4f4:\t52801060 \tmov\tw0, #0x83                  \t// #131\n    a4f8:\tf9007a82 \tstr\tx2, [x20,#240]\n    a4fc:\t17fffe73 \tb\t9ec8 <pthread_mutex_timedlock+0x27c>\n    a500:\td2994002 \tmov\tx2, #0xca00                \t// #51712\n    a504:\td1000400 \tsub\tx0, x0, #0x1\n    a508:\tf2a77342 \tmovk\tx2, #0x3b9a, lsl #16\n    a50c:\tf9003ba0 \tstr\tx0, [x29,#112]\n    a510:\t8b020021 \tadd\tx1, x1, x2\n    a514:\t17fffe56 \tb\t9e6c <pthread_mutex_timedlock+0x220>\n\n000000000000a518 <__pthread_mutex_unlock_full>:\n    a518:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    a51c:\t910003fd \tmov\tx29, sp\n    a520:\tb9401005 \tldr\tw5, [x0,#16]\n    a524:\t120018a2 \tand\tw2, w5, #0x7f\n    a528:\t51004042 \tsub\tw2, w2, #0x10\n    a52c:\t7100cc5f \tcmp\tw2, #0x33\n    a530:\t540000a9 \tb.ls\ta544 <__pthread_mutex_unlock_full+0x2c>\n    a534:\t528002c4 \tmov\tw4, #0x16                  \t// #22\n    a538:\t2a0403e0 \tmov\tw0, w4\n    a53c:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    a540:\td65f03c0 \tret\n    a544:\t90000043 \tadrp\tx3, 12000 <__pthread_current_priority+0xa8>\n    a548:\t9130a063 \tadd\tx3, x3, #0xc28\n    a54c:\t78625862 \tldrh\tw2, [x3,w2,uxtw #1]\n    a550:\t10000063 \tadr\tx3, a55c <__pthread_mutex_unlock_full+0x44>\n    a554:\t8b22a862 \tadd\tx2, x3, w2, sxth #2\n    a558:\td61f0040 \tbr\tx2\n    a55c:\td53bd045 \tmrs\tx5, tpidr_el0\n    a560:\tb9400002 \tldr\tw2, [x0]\n    a564:\td11bc0a5 \tsub\tx5, x5, #0x6f0\n    a568:\t12007444 \tand\tw4, w2, #0x3fffffff\n    a56c:\tb940d0a3 \tldr\tw3, [x5,#208]\n    a570:\t6b03009f \tcmp\tw4, w3\n    a574:\t54001761 \tb.ne\ta860 <__pthread_mutex_unlock_full+0x348>\n    a578:\t34001742 \tcbz\tw2, a860 <__pthread_mutex_unlock_full+0x348>\n    a57c:\tb9400803 \tldr\tw3, [x0,#8]\n    a580:\t12b00002 \tmov\tw2, #0x7fffffff            \t// #2147483647\n    a584:\t6b02007f \tcmp\tw3, w2\n    a588:\t321f77e2 \tmov\tw2, #0x7ffffffe            \t// #2147483646\n    a58c:\t1a8213e2 \tcsel\tw2, wzr, w2, ne\n    a590:\t14000095 \tb\ta7e4 <__pthread_mutex_unlock_full+0x2cc>\n    a594:\td53bd042 \tmrs\tx2, tpidr_el0\n    a598:\tb9400803 \tldr\tw3, [x0,#8]\n    a59c:\td11bc042 \tsub\tx2, x2, #0x6f0\n    a5a0:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    a5a4:\tb940d042 \tldr\tw2, [x2,#208]\n    a5a8:\t6b02007f \tcmp\tw3, w2\n    a5ac:\t54fffc61 \tb.ne\ta538 <__pthread_mutex_unlock_full+0x20>\n    a5b0:\tb9400002 \tldr\tw2, [x0]\n    a5b4:\t12004843 \tand\tw3, w2, #0x7ffff\n    a5b8:\t34fffc03 \tcbz\tw3, a538 <__pthread_mutex_unlock_full+0x20>\n    a5bc:\tb900081f \tstr\twzr, [x0,#8]\n    a5c0:\t35000581 \tcbnz\tw1, a670 <__pthread_mutex_unlock_full+0x158>\n    a5c4:\t2a0203e1 \tmov\tw1, w2\n    a5c8:\tb9001fa1 \tstr\tw1, [x29,#28]\n    a5cc:\t120d3024 \tand\tw4, w1, #0xfff80000\n    a5d0:\t2a0103e2 \tmov\tw2, w1\n    a5d4:\t885f7c03 \tldxr\tw3, [x0]\n    a5d8:\t6b02007f \tcmp\tw3, w2\n    a5dc:\t54000061 \tb.ne\ta5e8 <__pthread_mutex_unlock_full+0xd0>\n    a5e0:\t8805fc04 \tstlxr\tw5, w4, [x0]\n    a5e4:\t35ffff85 \tcbnz\tw5, a5d4 <__pthread_mutex_unlock_full+0xbc>\n    a5e8:\t540004c1 \tb.ne\ta680 <__pthread_mutex_unlock_full+0x168>\n    a5ec:\t12004821 \tand\tw1, w1, #0x7ffff\n    a5f0:\t7100043f \tcmp\tw1, #0x1\n    a5f4:\t54000149 \tb.ls\ta61c <__pthread_mutex_unlock_full+0x104>\n    a5f8:\tb9401001 \tldr\tw1, [x0,#16]\n    a5fc:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    a600:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    a604:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    a608:\t12190025 \tand\tw5, w1, #0x80\n    a60c:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    a610:\t4a0100a1 \teor\tw1, w5, w1\n    a614:\t93407c21 \tsxtw\tx1, w1\n    a618:\td4000001 \tsvc\t#0x0\n    a61c:\t13137c80 \tasr\tw0, w4, #19\n    a620:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n    a624:\t94001d8d \tbl\t11c58 <__pthread_tpp_change_priority>\n    a628:\t2a0003e4 \tmov\tw4, w0\n    a62c:\t2a0403e0 \tmov\tw0, w4\n    a630:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    a634:\td65f03c0 \tret\n    a638:\td53bd042 \tmrs\tx2, tpidr_el0\n    a63c:\tb9400803 \tldr\tw3, [x0,#8]\n    a640:\td11bc042 \tsub\tx2, x2, #0x6f0\n    a644:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    a648:\tb940d042 \tldr\tw2, [x2,#208]\n    a64c:\t6b02007f \tcmp\tw3, w2\n    a650:\t54fff741 \tb.ne\ta538 <__pthread_mutex_unlock_full+0x20>\n    a654:\tb9400402 \tldr\tw2, [x0,#4]\n    a658:\t51000442 \tsub\tw2, w2, #0x1\n    a65c:\tb9000402 \tstr\tw2, [x0,#4]\n    a660:\t35000f82 \tcbnz\tw2, a850 <__pthread_mutex_unlock_full+0x338>\n    a664:\tb900081f \tstr\twzr, [x0,#8]\n    a668:\tb9400002 \tldr\tw2, [x0]\n    a66c:\t34fffac1 \tcbz\tw1, a5c4 <__pthread_mutex_unlock_full+0xac>\n    a670:\tb9400c01 \tldr\tw1, [x0,#12]\n    a674:\t51000421 \tsub\tw1, w1, #0x1\n    a678:\tb9000c01 \tstr\tw1, [x0,#12]\n    a67c:\t17ffffd2 \tb\ta5c4 <__pthread_mutex_unlock_full+0xac>\n    a680:\tb9400001 \tldr\tw1, [x0]\n    a684:\t17ffffd1 \tb\ta5c8 <__pthread_mutex_unlock_full+0xb0>\n    a688:\td53bd043 \tmrs\tx3, tpidr_el0\n    a68c:\tb9400004 \tldr\tw4, [x0]\n    a690:\td11bc063 \tsub\tx3, x3, #0x6f0\n    a694:\t12007482 \tand\tw2, w4, #0x3fffffff\n    a698:\tb940d066 \tldr\tw6, [x3,#208]\n    a69c:\t6b06005f \tcmp\tw2, w6\n    a6a0:\tb9400802 \tldr\tw2, [x0,#8]\n    a6a4:\t54001060 \tb.eq\ta8b0 <__pthread_mutex_unlock_full+0x398>\n    a6a8:\t6b0200df \tcmp\tw6, w2\n    a6ac:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    a6b0:\t54fff441 \tb.ne\ta538 <__pthread_mutex_unlock_full+0x20>\n    a6b4:\tb9400402 \tldr\tw2, [x0,#4]\n    a6b8:\t51000442 \tsub\tw2, w2, #0x1\n    a6bc:\tb9000402 \tstr\tw2, [x0,#4]\n    a6c0:\t340010a2 \tcbz\tw2, a8d4 <__pthread_mutex_unlock_full+0x3bc>\n    a6c4:\t14000063 \tb\ta850 <__pthread_mutex_unlock_full+0x338>\n    a6c8:\td53bd043 \tmrs\tx3, tpidr_el0\n    a6cc:\tb9400805 \tldr\tw5, [x0,#8]\n    a6d0:\td11bc063 \tsub\tx3, x3, #0x6f0\n    a6d4:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    a6d8:\tb940d062 \tldr\tw2, [x3,#208]\n    a6dc:\t6b0200bf \tcmp\tw5, w2\n    a6e0:\t54fff2c1 \tb.ne\ta538 <__pthread_mutex_unlock_full+0x20>\n    a6e4:\tb9400402 \tldr\tw2, [x0,#4]\n    a6e8:\t51000442 \tsub\tw2, w2, #0x1\n    a6ec:\tb9000402 \tstr\tw2, [x0,#4]\n    a6f0:\t35000b02 \tcbnz\tw2, a850 <__pthread_mutex_unlock_full+0x338>\n    a6f4:\tb9400004 \tldr\tw4, [x0]\n    a6f8:\tb9000802 \tstr\tw2, [x0,#8]\n    a6fc:\t34000081 \tcbz\tw1, a70c <__pthread_mutex_unlock_full+0x1f4>\n    a700:\tb9400c01 \tldr\tw1, [x0,#12]\n    a704:\t51000421 \tsub\tw1, w1, #0x1\n    a708:\tb9000c01 \tstr\tw1, [x0,#12]\n    a70c:\t37f80164 \ttbnz\tw4, #31, a738 <__pthread_mutex_unlock_full+0x220>\n    a710:\tb940d061 \tldr\tw1, [x3,#208]\n    a714:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    a718:\tb9001fa1 \tstr\tw1, [x29,#28]\n    a71c:\t885f7c02 \tldxr\tw2, [x0]\n    a720:\t6b01005f \tcmp\tw2, w1\n    a724:\t54000061 \tb.ne\ta730 <__pthread_mutex_unlock_full+0x218>\n    a728:\t8805fc04 \tstlxr\tw5, w4, [x0]\n    a72c:\t35ffff85 \tcbnz\tw5, a71c <__pthread_mutex_unlock_full+0x204>\n    a730:\t540000e0 \tb.eq\ta74c <__pthread_mutex_unlock_full+0x234>\n    a734:\tb9001fa2 \tstr\tw2, [x29,#28]\n    a738:\tb9401001 \tldr\tw1, [x0,#16]\n    a73c:\t36200b01 \ttbz\tw1, #4, a89c <__pthread_mutex_unlock_full+0x384>\n    a740:\td28000e1 \tmov\tx1, #0x7                   \t// #7\n    a744:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    a748:\td4000001 \tsvc\t#0x0\n    a74c:\tf900787f \tstr\txzr, [x3,#240]\n    a750:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    a754:\t2a0403e0 \tmov\tw0, w4\n    a758:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    a75c:\td65f03c0 \tret\n    a760:\td53bd043 \tmrs\tx3, tpidr_el0\n    a764:\tb9400004 \tldr\tw4, [x0]\n    a768:\td11bc063 \tsub\tx3, x3, #0x6f0\n    a76c:\t12007486 \tand\tw6, w4, #0x3fffffff\n    a770:\tb940d062 \tldr\tw2, [x3,#208]\n    a774:\t6b0200df \tcmp\tw6, w2\n    a778:\t54000741 \tb.ne\ta860 <__pthread_mutex_unlock_full+0x348>\n    a77c:\t6b1f009f \tcmp\tw4, wzr\n    a780:\t1a9f17e2 \tcset\tw2, eq\n    a784:\t350006e2 \tcbnz\tw2, a860 <__pthread_mutex_unlock_full+0x348>\n    a788:\t3627fb85 \ttbz\tw5, #4, a6f8 <__pthread_mutex_unlock_full+0x1e0>\n    a78c:\tb9400804 \tldr\tw4, [x0,#8]\n    a790:\t12b00002 \tmov\tw2, #0x7fffffff            \t// #2147483647\n    a794:\t6b02009f \tcmp\tw4, w2\n    a798:\t321f77e2 \tmov\tw2, #0x7ffffffe            \t// #2147483646\n    a79c:\t1a8213e2 \tcsel\tw2, wzr, w2, ne\n    a7a0:\t1400004d \tb\ta8d4 <__pthread_mutex_unlock_full+0x3bc>\n    a7a4:\td53bd045 \tmrs\tx5, tpidr_el0\n    a7a8:\tb9400002 \tldr\tw2, [x0]\n    a7ac:\td11bc0a5 \tsub\tx5, x5, #0x6f0\n    a7b0:\t12007442 \tand\tw2, w2, #0x3fffffff\n    a7b4:\tb940d0a3 \tldr\tw3, [x5,#208]\n    a7b8:\t6b03005f \tcmp\tw2, w3\n    a7bc:\tb9400802 \tldr\tw2, [x0,#8]\n    a7c0:\t54000580 \tb.eq\ta870 <__pthread_mutex_unlock_full+0x358>\n    a7c4:\t6b02007f \tcmp\tw3, w2\n    a7c8:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    a7cc:\t54ffeb61 \tb.ne\ta538 <__pthread_mutex_unlock_full+0x20>\n    a7d0:\tb9400403 \tldr\tw3, [x0,#4]\n    a7d4:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    a7d8:\t51000463 \tsub\tw3, w3, #0x1\n    a7dc:\tb9000403 \tstr\tw3, [x0,#4]\n    a7e0:\t35000383 \tcbnz\tw3, a850 <__pthread_mutex_unlock_full+0x338>\n    a7e4:\t91008003 \tadd\tx3, x0, #0x20\n    a7e8:\tf90078a3 \tstr\tx3, [x5,#240]\n    a7ec:\tf9401004 \tldr\tx4, [x0,#32]\n    a7f0:\tf9400c06 \tldr\tx6, [x0,#24]\n    a7f4:\t927ff883 \tand\tx3, x4, #0xfffffffffffffffe\n    a7f8:\tf81f8066 \tstr\tx6, [x3,#-8]\n    a7fc:\tf9400c03 \tldr\tx3, [x0,#24]\n    a800:\t927ff863 \tand\tx3, x3, #0xfffffffffffffffe\n    a804:\tf9000064 \tstr\tx4, [x3]\n    a808:\tf9000c1f \tstr\txzr, [x0,#24]\n    a80c:\tf900101f \tstr\txzr, [x0,#32]\n    a810:\tb9000802 \tstr\tw2, [x0,#8]\n    a814:\t34000081 \tcbz\tw1, a824 <__pthread_mutex_unlock_full+0x30c>\n    a818:\tb9400c01 \tldr\tw1, [x0,#12]\n    a81c:\t51000421 \tsub\tw1, w1, #0x1\n    a820:\tb9000c01 \tstr\tw1, [x0,#12]\n    a824:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    a828:\t885f7c01 \tldxr\tw1, [x0]\n    a82c:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    a830:\t35ffffc3 \tcbnz\tw3, a828 <__pthread_mutex_unlock_full+0x310>\n    a834:\t36f800c1 \ttbz\tw1, #31, a84c <__pthread_mutex_unlock_full+0x334>\n    a838:\td2800021 \tmov\tx1, #0x1                   \t// #1\n    a83c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    a840:\taa0103e2 \tmov\tx2, x1\n    a844:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    a848:\td4000001 \tsvc\t#0x0\n    a84c:\tf90078bf \tstr\txzr, [x5,#240]\n    a850:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    a854:\t2a0403e0 \tmov\tw0, w4\n    a858:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    a85c:\td65f03c0 \tret\n    a860:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    a864:\t2a0403e0 \tmov\tw0, w4\n    a868:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    a86c:\td65f03c0 \tret\n    a870:\t12b00004 \tmov\tw4, #0x7fffffff            \t// #2147483647\n    a874:\t6b04005f \tcmp\tw2, w4\n    a878:\t54fffa61 \tb.ne\ta7c4 <__pthread_mutex_unlock_full+0x2ac>\n    a87c:\tb9400402 \tldr\tw2, [x0,#4]\n    a880:\t51000442 \tsub\tw2, w2, #0x1\n    a884:\tb9000402 \tstr\tw2, [x0,#4]\n    a888:\t34000422 \tcbz\tw2, a90c <__pthread_mutex_unlock_full+0x3f4>\n    a88c:\t52801064 \tmov\tw4, #0x83                  \t// #131\n    a890:\t2a0403e0 \tmov\tw0, w4\n    a894:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    a898:\td65f03c0 \tret\n    a89c:\t12190022 \tand\tw2, w1, #0x80\n    a8a0:\t528010e1 \tmov\tw1, #0x87                  \t// #135\n    a8a4:\t4a010041 \teor\tw1, w2, w1\n    a8a8:\t93407c21 \tsxtw\tx1, w1\n    a8ac:\t17ffffa6 \tb\ta744 <__pthread_mutex_unlock_full+0x22c>\n    a8b0:\t12b00007 \tmov\tw7, #0x7fffffff            \t// #2147483647\n    a8b4:\t6b07005f \tcmp\tw2, w7\n    a8b8:\t54ffef81 \tb.ne\ta6a8 <__pthread_mutex_unlock_full+0x190>\n    a8bc:\tb9400402 \tldr\tw2, [x0,#4]\n    a8c0:\t51000442 \tsub\tw2, w2, #0x1\n    a8c4:\tb9000402 \tstr\tw2, [x0,#4]\n    a8c8:\t35fffe22 \tcbnz\tw2, a88c <__pthread_mutex_unlock_full+0x374>\n    a8cc:\t321f77e2 \tmov\tw2, #0x7ffffffe            \t// #2147483646\n    a8d0:\t3627f145 \ttbz\tw5, #4, a6f8 <__pthread_mutex_unlock_full+0x1e0>\n    a8d4:\t91008004 \tadd\tx4, x0, #0x20\n    a8d8:\tb2400084 \torr\tx4, x4, #0x1\n    a8dc:\tf9007864 \tstr\tx4, [x3,#240]\n    a8e0:\tf9401005 \tldr\tx5, [x0,#32]\n    a8e4:\tf9400c06 \tldr\tx6, [x0,#24]\n    a8e8:\t927ff8a4 \tand\tx4, x5, #0xfffffffffffffffe\n    a8ec:\tf81f8086 \tstr\tx6, [x4,#-8]\n    a8f0:\tf9400c04 \tldr\tx4, [x0,#24]\n    a8f4:\t927ff884 \tand\tx4, x4, #0xfffffffffffffffe\n    a8f8:\tf9000085 \tstr\tx5, [x4]\n    a8fc:\tf9000c1f \tstr\txzr, [x0,#24]\n    a900:\tb9400004 \tldr\tw4, [x0]\n    a904:\tf900101f \tstr\txzr, [x0,#32]\n    a908:\t17ffff7c \tb\ta6f8 <__pthread_mutex_unlock_full+0x1e0>\n    a90c:\t321f77e2 \tmov\tw2, #0x7ffffffe            \t// #2147483646\n    a910:\t17ffffb5 \tb\ta7e4 <__pthread_mutex_unlock_full+0x2cc>\n\n000000000000a914 <__pthread_mutex_unlock_usercnt>:\n    a914:\tb9401003 \tldr\tw3, [x0,#16]\n    a918:\t52802fe4 \tmov\tw4, #0x17f                 \t// #383\n    a91c:\taa0003e2 \tmov\tx2, x0\n    a920:\t2a0103e6 \tmov\tw6, w1\n    a924:\t721e1065 \tands\tw5, w3, #0x7c\n    a928:\t0a040064 \tand\tw4, w3, w4\n    a92c:\t54000201 \tb.ne\ta96c <__pthread_mutex_unlock_usercnt+0x58>\n    a930:\t35000204 \tcbnz\tw4, a970 <__pthread_mutex_unlock_usercnt+0x5c>\n    a934:\tb900085f \tstr\twzr, [x2,#8]\n    a938:\t35000126 \tcbnz\tw6, a95c <__pthread_mutex_unlock_usercnt+0x48>\n    a93c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    a940:\t885f7c40 \tldxr\tw0, [x2]\n    a944:\t8803fc41 \tstlxr\tw3, w1, [x2]\n    a948:\t35ffffc3 \tcbnz\tw3, a940 <__pthread_mutex_unlock_usercnt+0x2c>\n    a94c:\t7100041f \tcmp\tw0, #0x1\n    a950:\t5400032c \tb.gt\ta9b4 <__pthread_mutex_unlock_usercnt+0xa0>\n    a954:\t2a0503e0 \tmov\tw0, w5\n    a958:\td65f03c0 \tret\n    a95c:\tb9400c40 \tldr\tw0, [x2,#12]\n    a960:\t51000400 \tsub\tw0, w0, #0x1\n    a964:\tb9000c40 \tstr\tw0, [x2,#12]\n    a968:\t17fffff5 \tb\ta93c <__pthread_mutex_unlock_usercnt+0x28>\n    a96c:\t17fffeeb \tb\ta518 <__pthread_mutex_unlock_full>\n    a970:\t7104009f \tcmp\tw4, #0x100\n    a974:\t54000361 \tb.ne\ta9e0 <__pthread_mutex_unlock_usercnt+0xcc>\n    a978:\t885f7c41 \tldxr\tw1, [x2]\n    a97c:\t8803fc45 \tstlxr\tw3, w5, [x2]\n    a980:\t35ffffc3 \tcbnz\tw3, a978 <__pthread_mutex_unlock_usercnt+0x64>\n    a984:\t7100043f \tcmp\tw1, #0x1\n    a988:\t54fffe6d \tb.le\ta954 <__pthread_mutex_unlock_usercnt+0x40>\n    a98c:\tb9401041 \tldr\tw1, [x2,#16]\n    a990:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    a994:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    a998:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    a99c:\t12190024 \tand\tw4, w1, #0x80\n    a9a0:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    a9a4:\t4a010081 \teor\tw1, w4, w1\n    a9a8:\t93407c21 \tsxtw\tx1, w1\n    a9ac:\td4000001 \tsvc\t#0x0\n    a9b0:\t17ffffe9 \tb\ta954 <__pthread_mutex_unlock_usercnt+0x40>\n    a9b4:\tb9401041 \tldr\tw1, [x2,#16]\n    a9b8:\taa0203e0 \tmov\tx0, x2\n    a9bc:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    a9c0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    a9c4:\t12190024 \tand\tw4, w1, #0x80\n    a9c8:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    a9cc:\t4a010081 \teor\tw1, w4, w1\n    a9d0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    a9d4:\t93407c21 \tsxtw\tx1, w1\n    a9d8:\td4000001 \tsvc\t#0x0\n    a9dc:\t17ffffde \tb\ta954 <__pthread_mutex_unlock_usercnt+0x40>\n    a9e0:\t12001863 \tand\tw3, w3, #0x7f\n    a9e4:\t7100047f \tcmp\tw3, #0x1\n    a9e8:\t540001c1 \tb.ne\taa20 <__pthread_mutex_unlock_usercnt+0x10c>\n    a9ec:\tb9400801 \tldr\tw1, [x0,#8]\n    a9f0:\td53bd040 \tmrs\tx0, tpidr_el0\n    a9f4:\td11bc000 \tsub\tx0, x0, #0x6f0\n    a9f8:\tb940d000 \tldr\tw0, [x0,#208]\n    a9fc:\t6b00003f \tcmp\tw1, w0\n    aa00:\t54000060 \tb.eq\taa0c <__pthread_mutex_unlock_usercnt+0xf8>\n    aa04:\t2a0303e5 \tmov\tw5, w3\n    aa08:\t17ffffd3 \tb\ta954 <__pthread_mutex_unlock_usercnt+0x40>\n    aa0c:\tb9400440 \tldr\tw0, [x2,#4]\n    aa10:\t51000400 \tsub\tw0, w0, #0x1\n    aa14:\tb9000440 \tstr\tw0, [x2,#4]\n    aa18:\t34fff8e0 \tcbz\tw0, a934 <__pthread_mutex_unlock_usercnt+0x20>\n    aa1c:\t17ffffce \tb\ta954 <__pthread_mutex_unlock_usercnt+0x40>\n    aa20:\t71000c7f \tcmp\tw3, #0x3\n    aa24:\t54fff880 \tb.eq\ta934 <__pthread_mutex_unlock_usercnt+0x20>\n    aa28:\tb9400801 \tldr\tw1, [x0,#8]\n    aa2c:\td53bd040 \tmrs\tx0, tpidr_el0\n    aa30:\td11bc000 \tsub\tx0, x0, #0x6f0\n    aa34:\tb940d000 \tldr\tw0, [x0,#208]\n    aa38:\t6b00003f \tcmp\tw1, w0\n    aa3c:\t54000060 \tb.eq\taa48 <__pthread_mutex_unlock_usercnt+0x134>\n    aa40:\t52800025 \tmov\tw5, #0x1                   \t// #1\n    aa44:\t17ffffc4 \tb\ta954 <__pthread_mutex_unlock_usercnt+0x40>\n    aa48:\tb9400040 \tldr\tw0, [x2]\n    aa4c:\t35fff740 \tcbnz\tw0, a934 <__pthread_mutex_unlock_usercnt+0x20>\n    aa50:\t52800025 \tmov\tw5, #0x1                   \t// #1\n    aa54:\t17ffffc0 \tb\ta954 <__pthread_mutex_unlock_usercnt+0x40>\n\n000000000000aa58 <__pthread_mutex_unlock>:\n    aa58:\tb9401001 \tldr\tw1, [x0,#16]\n    aa5c:\t52802fe3 \tmov\tw3, #0x17f                 \t// #383\n    aa60:\taa0003e2 \tmov\tx2, x0\n    aa64:\t721e1024 \tands\tw4, w1, #0x7c\n    aa68:\t0a030023 \tand\tw3, w1, w3\n    aa6c:\t540001c1 \tb.ne\taaa4 <__pthread_mutex_unlock+0x4c>\n    aa70:\t350001e3 \tcbnz\tw3, aaac <__pthread_mutex_unlock+0x54>\n    aa74:\tb9400c41 \tldr\tw1, [x2,#12]\n    aa78:\tb900085f \tstr\twzr, [x2,#8]\n    aa7c:\t51000421 \tsub\tw1, w1, #0x1\n    aa80:\tb9000c41 \tstr\tw1, [x2,#12]\n    aa84:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    aa88:\t885f7c40 \tldxr\tw0, [x2]\n    aa8c:\t8803fc41 \tstlxr\tw3, w1, [x2]\n    aa90:\t35ffffc3 \tcbnz\tw3, aa88 <__pthread_mutex_unlock+0x30>\n    aa94:\t7100041f \tcmp\tw0, #0x1\n    aa98:\t540002cc \tb.gt\taaf0 <__pthread_mutex_unlock+0x98>\n    aa9c:\t2a0403e0 \tmov\tw0, w4\n    aaa0:\td65f03c0 \tret\n    aaa4:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    aaa8:\t17fffe9c \tb\ta518 <__pthread_mutex_unlock_full>\n    aaac:\t7104007f \tcmp\tw3, #0x100\n    aab0:\t54000361 \tb.ne\tab1c <__pthread_mutex_unlock+0xc4>\n    aab4:\t885f7c41 \tldxr\tw1, [x2]\n    aab8:\t8803fc44 \tstlxr\tw3, w4, [x2]\n    aabc:\t35ffffc3 \tcbnz\tw3, aab4 <__pthread_mutex_unlock+0x5c>\n    aac0:\t7100043f \tcmp\tw1, #0x1\n    aac4:\t54fffecd \tb.le\taa9c <__pthread_mutex_unlock+0x44>\n    aac8:\tb9401041 \tldr\tw1, [x2,#16]\n    aacc:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    aad0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    aad4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    aad8:\t12190025 \tand\tw5, w1, #0x80\n    aadc:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    aae0:\t4a0100a1 \teor\tw1, w5, w1\n    aae4:\t93407c21 \tsxtw\tx1, w1\n    aae8:\td4000001 \tsvc\t#0x0\n    aaec:\t17ffffec \tb\taa9c <__pthread_mutex_unlock+0x44>\n    aaf0:\tb9401041 \tldr\tw1, [x2,#16]\n    aaf4:\taa0203e0 \tmov\tx0, x2\n    aaf8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    aafc:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    ab00:\t12190025 \tand\tw5, w1, #0x80\n    ab04:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    ab08:\t4a0100a1 \teor\tw1, w5, w1\n    ab0c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    ab10:\t93407c21 \tsxtw\tx1, w1\n    ab14:\td4000001 \tsvc\t#0x0\n    ab18:\t17ffffe1 \tb\taa9c <__pthread_mutex_unlock+0x44>\n    ab1c:\t12001821 \tand\tw1, w1, #0x7f\n    ab20:\t7100043f \tcmp\tw1, #0x1\n    ab24:\t540001c1 \tb.ne\tab5c <__pthread_mutex_unlock+0x104>\n    ab28:\tb9400803 \tldr\tw3, [x0,#8]\n    ab2c:\td53bd040 \tmrs\tx0, tpidr_el0\n    ab30:\td11bc000 \tsub\tx0, x0, #0x6f0\n    ab34:\tb940d000 \tldr\tw0, [x0,#208]\n    ab38:\t6b00007f \tcmp\tw3, w0\n    ab3c:\t54000060 \tb.eq\tab48 <__pthread_mutex_unlock+0xf0>\n    ab40:\t2a0103e4 \tmov\tw4, w1\n    ab44:\t17ffffd6 \tb\taa9c <__pthread_mutex_unlock+0x44>\n    ab48:\tb9400440 \tldr\tw0, [x2,#4]\n    ab4c:\t51000400 \tsub\tw0, w0, #0x1\n    ab50:\tb9000440 \tstr\tw0, [x2,#4]\n    ab54:\t34fff900 \tcbz\tw0, aa74 <__pthread_mutex_unlock+0x1c>\n    ab58:\t17ffffd1 \tb\taa9c <__pthread_mutex_unlock+0x44>\n    ab5c:\t71000c3f \tcmp\tw1, #0x3\n    ab60:\t54fff8a0 \tb.eq\taa74 <__pthread_mutex_unlock+0x1c>\n    ab64:\tb9400801 \tldr\tw1, [x0,#8]\n    ab68:\td53bd040 \tmrs\tx0, tpidr_el0\n    ab6c:\td11bc000 \tsub\tx0, x0, #0x6f0\n    ab70:\tb940d000 \tldr\tw0, [x0,#208]\n    ab74:\t6b00003f \tcmp\tw1, w0\n    ab78:\t54000060 \tb.eq\tab84 <__pthread_mutex_unlock+0x12c>\n    ab7c:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    ab80:\t17ffffc7 \tb\taa9c <__pthread_mutex_unlock+0x44>\n    ab84:\tb9400040 \tldr\tw0, [x2]\n    ab88:\t35fff760 \tcbnz\tw0, aa74 <__pthread_mutex_unlock+0x1c>\n    ab8c:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    ab90:\t17ffffc3 \tb\taa9c <__pthread_mutex_unlock+0x44>\n\n000000000000ab94 <__pthread_mutex_cond_lock_full>:\n    ab94:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n    ab98:\t910003fd \tmov\tx29, sp\n    ab9c:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    aba0:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    aba4:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    aba8:\tf90023f9 \tstr\tx25, [sp,#64]\n    abac:\td53bd056 \tmrs\tx22, tpidr_el0\n    abb0:\td11bc2d6 \tsub\tx22, x22, #0x6f0\n    abb4:\tb9401001 \tldr\tw1, [x0,#16]\n    abb8:\t12001822 \tand\tw2, w1, #0x7f\n    abbc:\tb940d2d5 \tldr\tw21, [x22,#208]\n    abc0:\t51004042 \tsub\tw2, w2, #0x10\n    abc4:\t7100cc5f \tcmp\tw2, #0x33\n    abc8:\t54000129 \tb.ls\tabec <__pthread_mutex_cond_lock_full+0x58>\n    abcc:\t528002d4 \tmov\tw20, #0x16                  \t// #22\n    abd0:\tf94023f9 \tldr\tx25, [sp,#64]\n    abd4:\t2a1403e0 \tmov\tw0, w20\n    abd8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    abdc:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    abe0:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    abe4:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    abe8:\td65f03c0 \tret\n    abec:\taa0003f3 \tmov\tx19, x0\n    abf0:\t90000040 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n    abf4:\t91324000 \tadd\tx0, x0, #0xc90\n    abf8:\t38624800 \tldrb\tw0, [x0,w2,uxtw]\n    abfc:\t10000062 \tadr\tx2, ac08 <__pthread_mutex_cond_lock_full+0x74>\n    ac00:\t8b208840 \tadd\tx0, x2, w0, sxtb #2\n    ac04:\td61f0000 \tbr\tx0\n    ac08:\tb9400a60 \tldr\tw0, [x19,#8]\n    ac0c:\tb9400263 \tldr\tw3, [x19]\n    ac10:\t6b15001f \tcmp\tw0, w21\n    ac14:\t54001da0 \tb.eq\tafc8 <__pthread_mutex_cond_lock_full+0x434>\n    ac18:\t12800016 \tmov\tw22, #0xffffffff            \t// #-1\n    ac1c:\t53137c74 \tlsr\tw20, w3, #19\n    ac20:\t94001cce \tbl\t11f58 <__pthread_current_priority>\n    ac24:\t6b00029f \tcmp\tw20, w0\n    ac28:\t54001eab \tb.lt\taffc <__pthread_mutex_cond_lock_full+0x468>\n    ac2c:\t2a1603e0 \tmov\tw0, w22\n    ac30:\t2a1403e1 \tmov\tw1, w20\n    ac34:\t94001c09 \tbl\t11c58 <__pthread_tpp_change_priority>\n    ac38:\t35001de0 \tcbnz\tw0, aff4 <__pthread_mutex_cond_lock_full+0x460>\n    ac3c:\t910183a5 \tadd\tx5, x29, #0x60\n    ac40:\t530d3284 \tlsl\tw4, w20, #19\n    ac44:\t321f0087 \torr\tw7, w4, #0x2\n    ac48:\t2a0403e0 \tmov\tw0, w4\n    ac4c:\tb81fcca4 \tstr\tw4, [x5,#-4]!\n    ac50:\t885ffe61 \tldaxr\tw1, [x19]\n    ac54:\t6b00003f \tcmp\tw1, w0\n    ac58:\t54000061 \tb.ne\tac64 <__pthread_mutex_cond_lock_full+0xd0>\n    ac5c:\t88027e67 \tstxr\tw2, w7, [x19]\n    ac60:\t35ffff82 \tcbnz\tw2, ac50 <__pthread_mutex_cond_lock_full+0xbc>\n    ac64:\t54000040 \tb.eq\tac6c <__pthread_mutex_cond_lock_full+0xd8>\n    ac68:\tb9005fa1 \tstr\tw1, [x29,#92]\n    ac6c:\tb9405fa0 \tldr\tw0, [x29,#92]\n    ac70:\t6b00009f \tcmp\tw4, w0\n    ac74:\t540004c0 \tb.eq\tad0c <__pthread_mutex_cond_lock_full+0x178>\n    ac78:\t32000089 \torr\tw9, w4, #0x1\n    ac7c:\t93407cea \tsxtw\tx10, w7\n    ac80:\tb9005fa9 \tstr\tw9, [x29,#92]\n    ac84:\tb94000a0 \tldr\tw0, [x5]\n    ac88:\t885ffe63 \tldaxr\tw3, [x19]\n    ac8c:\t6b00007f \tcmp\tw3, w0\n    ac90:\t54000061 \tb.ne\tac9c <__pthread_mutex_cond_lock_full+0x108>\n    ac94:\t88017e67 \tstxr\tw1, w7, [x19]\n    ac98:\t35ffff81 \tcbnz\tw1, ac88 <__pthread_mutex_cond_lock_full+0xf4>\n    ac9c:\t54000040 \tb.eq\taca4 <__pthread_mutex_cond_lock_full+0x110>\n    aca0:\tb90000a3 \tstr\tw3, [x5]\n    aca4:\tb9405fa3 \tldr\tw3, [x29,#92]\n    aca8:\t120d3060 \tand\tw0, w3, #0xfff80000\n    acac:\t6b04001f \tcmp\tw0, w4\n    acb0:\t54001541 \tb.ne\taf58 <__pthread_mutex_cond_lock_full+0x3c4>\n    acb4:\t6b03009f \tcmp\tw4, w3\n    acb8:\t54000120 \tb.eq\tacdc <__pthread_mutex_cond_lock_full+0x148>\n    acbc:\tb9401266 \tldr\tw6, [x19,#16]\n    acc0:\taa1303e0 \tmov\tx0, x19\n    acc4:\taa0a03e2 \tmov\tx2, x10\n    acc8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    accc:\t2a2603e1 \tmvn\tw1, w6\n    acd0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    acd4:\t92790021 \tand\tx1, x1, #0x80\n    acd8:\td4000001 \tsvc\t#0x0\n    acdc:\tb9005fa4 \tstr\tw4, [x29,#92]\n    ace0:\tb94000a0 \tldr\tw0, [x5]\n    ace4:\t885ffe63 \tldaxr\tw3, [x19]\n    ace8:\t6b00007f \tcmp\tw3, w0\n    acec:\t54000061 \tb.ne\tacf8 <__pthread_mutex_cond_lock_full+0x164>\n    acf0:\t88017e67 \tstxr\tw1, w7, [x19]\n    acf4:\t35ffff81 \tcbnz\tw1, ace4 <__pthread_mutex_cond_lock_full+0x150>\n    acf8:\t54000040 \tb.eq\tad00 <__pthread_mutex_cond_lock_full+0x16c>\n    acfc:\tb90000a3 \tstr\tw3, [x5]\n    ad00:\tb9405fa0 \tldr\tw0, [x29,#92]\n    ad04:\t6b00009f \tcmp\tw4, w0\n    ad08:\t54fffbc1 \tb.ne\tac80 <__pthread_mutex_cond_lock_full+0xec>\n    ad0c:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    ad10:\tb9000660 \tstr\tw0, [x19,#4]\n    ad14:\tb9000a75 \tstr\tw21, [x19,#8]\n    ad18:\t52800014 \tmov\tw20, #0x0                   \t// #0\n    ad1c:\t2a1403e0 \tmov\tw0, w20\n    ad20:\tf94023f9 \tldr\tx25, [sp,#64]\n    ad24:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    ad28:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    ad2c:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    ad30:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    ad34:\td65f03c0 \tret\n    ad38:\t121c0024 \tand\tw4, w1, #0x10\n    ad3c:\t37201301 \ttbnz\tw1, #4, af9c <__pthread_mutex_cond_lock_full+0x408>\n    ad40:\tb9400260 \tldr\tw0, [x19]\n    ad44:\t12007400 \tand\tw0, w0, #0x3fffffff\n    ad48:\t6b0002bf \tcmp\tw21, w0\n    ad4c:\t54001660 \tb.eq\tb018 <__pthread_mutex_cond_lock_full+0x484>\n    ad50:\tb9005fbf \tstr\twzr, [x29,#92]\n    ad54:\t320102a1 \torr\tw1, w21, #0x80000000\n    ad58:\t885ffe60 \tldaxr\tw0, [x19]\n    ad5c:\t6b1f001f \tcmp\tw0, wzr\n    ad60:\t54000061 \tb.ne\tad6c <__pthread_mutex_cond_lock_full+0x1d8>\n    ad64:\t88027e61 \tstxr\tw2, w1, [x19]\n    ad68:\t35ffff82 \tcbnz\tw2, ad58 <__pthread_mutex_cond_lock_full+0x1c4>\n    ad6c:\t54001261 \tb.ne\tafb8 <__pthread_mutex_cond_lock_full+0x424>\n    ad70:\tb9405fa0 \tldr\tw0, [x29,#92]\n    ad74:\t34000a60 \tcbz\tw0, aec0 <__pthread_mutex_cond_lock_full+0x32c>\n    ad78:\td28000c1 \tmov\tx1, #0x6                   \t// #6\n    ad7c:\t350000c4 \tcbnz\tw4, ad94 <__pthread_mutex_cond_lock_full+0x200>\n    ad80:\tb9401261 \tldr\tw1, [x19,#16]\n    ad84:\t528010c0 \tmov\tw0, #0x86                  \t// #134\n    ad88:\t12190021 \tand\tw1, w1, #0x80\n    ad8c:\t4a000021 \teor\tw1, w1, w0\n    ad90:\t93407c21 \tsxtw\tx1, w1\n    ad94:\taa1303e0 \tmov\tx0, x19\n    ad98:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    ad9c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    ada0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    ada4:\td4000001 \tsvc\t#0x0\n    ada8:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    adac:\t54000089 \tb.ls\tadbc <__pthread_mutex_cond_lock_full+0x228>\n    adb0:\t121a7800 \tand\tw0, w0, #0xffffffdf\n    adb4:\t31008c1f \tcmn\tw0, #0x23\n    adb8:\t54000fa0 \tb.eq\tafac <__pthread_mutex_cond_lock_full+0x418>\n    adbc:\tb9400260 \tldr\tw0, [x19]\n    adc0:\t36f00800 \ttbz\tw0, #30, aec0 <__pthread_mutex_cond_lock_full+0x32c>\n    adc4:\t910173a5 \tadd\tx5, x29, #0x5c\n    adc8:\tb9005fa0 \tstr\tw0, [x29,#92]\n    adcc:\t12017800 \tand\tw0, w0, #0xbfffffff\n    add0:\tb94000a2 \tldr\tw2, [x5]\n    add4:\t885ffe61 \tldaxr\tw1, [x19]\n    add8:\t6b02003f \tcmp\tw1, w2\n    addc:\t54000061 \tb.ne\tade8 <__pthread_mutex_cond_lock_full+0x254>\n    ade0:\t88037e60 \tstxr\tw3, w0, [x19]\n    ade4:\t35ffff83 \tcbnz\tw3, add4 <__pthread_mutex_cond_lock_full+0x240>\n    ade8:\t54001320 \tb.eq\tb04c <__pthread_mutex_cond_lock_full+0x4b8>\n    adec:\tb90000a1 \tstr\tw1, [x5]\n    adf0:\tb9400260 \tldr\tw0, [x19]\n    adf4:\t17fffff5 \tb\tadc8 <__pthread_mutex_cond_lock_full+0x234>\n    adf8:\t91008277 \tadd\tx23, x19, #0x20\n    adfc:\tf9007ad7 \tstr\tx23, [x22,#240]\n    ae00:\t320102b8 \torr\tw24, w21, #0x80000000\n    ae04:\t321f77f9 \tmov\tw25, #0x7ffffffe            \t// #2147483646\n    ae08:\tb9400260 \tldr\tw0, [x19]\n    ae0c:\t12020014 \tand\tw20, w0, #0x40000000\n    ae10:\t35000a94 \tcbnz\tw20, af60 <__pthread_mutex_cond_lock_full+0x3cc>\n    ae14:\t12007400 \tand\tw0, w0, #0x3fffffff\n    ae18:\t6b0002bf \tcmp\tw21, w0\n    ae1c:\t54000380 \tb.eq\tae8c <__pthread_mutex_cond_lock_full+0x2f8>\n    ae20:\tb9005fbf \tstr\twzr, [x29,#92]\n    ae24:\t885ffe62 \tldaxr\tw2, [x19]\n    ae28:\t6b1f005f \tcmp\tw2, wzr\n    ae2c:\t54000061 \tb.ne\tae38 <__pthread_mutex_cond_lock_full+0x2a4>\n    ae30:\t88007e78 \tstxr\tw0, w24, [x19]\n    ae34:\t35ffff80 \tcbnz\tw0, ae24 <__pthread_mutex_cond_lock_full+0x290>\n    ae38:\t54000680 \tb.eq\taf08 <__pthread_mutex_cond_lock_full+0x374>\n    ae3c:\t52801001 \tmov\tw1, #0x80                  \t// #128\n    ae40:\taa1303e0 \tmov\tx0, x19\n    ae44:\tb9005fa2 \tstr\tw2, [x29,#92]\n    ae48:\t94001302 \tbl\tfa50 <__lll_robust_lock_wait>\n    ae4c:\tb9400a61 \tldr\tw1, [x19,#8]\n    ae50:\t6b19003f \tcmp\tw1, w25\n    ae54:\t54000620 \tb.eq\taf18 <__pthread_mutex_cond_lock_full+0x384>\n    ae58:\t12020014 \tand\tw20, w0, #0x40000000\n    ae5c:\t37f7fda0 \ttbnz\tw0, #30, ae10 <__pthread_mutex_cond_lock_full+0x27c>\n    ae60:\taa1603e0 \tmov\tx0, x22\n    ae64:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    ae68:\tb9000661 \tstr\tw1, [x19,#4]\n    ae6c:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    ae70:\t927ff822 \tand\tx2, x1, #0xfffffffffffffffe\n    ae74:\tf81f8057 \tstr\tx23, [x2,#-8]\n    ae78:\tf9001261 \tstr\tx1, [x19,#32]\n    ae7c:\tf9000e60 \tstr\tx0, [x19,#24]\n    ae80:\tf90072d7 \tstr\tx23, [x22,#224]\n    ae84:\tf9007adf \tstr\txzr, [x22,#240]\n    ae88:\t17ffffa3 \tb\tad14 <__pthread_mutex_cond_lock_full+0x180>\n    ae8c:\tb9401260 \tldr\tw0, [x19,#16]\n    ae90:\t12001800 \tand\tw0, w0, #0x7f\n    ae94:\t7100481f \tcmp\tw0, #0x12\n    ae98:\t54001440 \tb.eq\tb120 <__pthread_mutex_cond_lock_full+0x58c>\n    ae9c:\t7100441f \tcmp\tw0, #0x11\n    aea0:\t54fffc01 \tb.ne\tae20 <__pthread_mutex_cond_lock_full+0x28c>\n    aea4:\tf9007adf \tstr\txzr, [x22,#240]\n    aea8:\tb9400660 \tldr\tw0, [x19,#4]\n    aeac:\t3100041f \tcmn\tw0, #0x1\n    aeb0:\t540009e0 \tb.eq\tafec <__pthread_mutex_cond_lock_full+0x458>\n    aeb4:\t11000400 \tadd\tw0, w0, #0x1\n    aeb8:\tb9000660 \tstr\tw0, [x19,#4]\n    aebc:\t17ffff98 \tb\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    aec0:\t34fff264 \tcbz\tw4, ad0c <__pthread_mutex_cond_lock_full+0x178>\n    aec4:\tb9400a61 \tldr\tw1, [x19,#8]\n    aec8:\t321f77e0 \tmov\tw0, #0x7ffffffe            \t// #2147483646\n    aecc:\t6b00003f \tcmp\tw1, w0\n    aed0:\t54001140 \tb.eq\tb0f8 <__pthread_mutex_cond_lock_full+0x564>\n    aed4:\taa1603e0 \tmov\tx0, x22\n    aed8:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    aedc:\tb9000661 \tstr\tw1, [x19,#4]\n    aee0:\t91008262 \tadd\tx2, x19, #0x20\n    aee4:\tb2400043 \torr\tx3, x2, #0x1\n    aee8:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    aeec:\t927ff824 \tand\tx4, x1, #0xfffffffffffffffe\n    aef0:\tf81f8082 \tstr\tx2, [x4,#-8]\n    aef4:\tf9001261 \tstr\tx1, [x19,#32]\n    aef8:\tf9000e60 \tstr\tx0, [x19,#24]\n    aefc:\tf90072c3 \tstr\tx3, [x22,#224]\n    af00:\tf9007adf \tstr\txzr, [x22,#240]\n    af04:\t17ffff84 \tb\tad14 <__pthread_mutex_cond_lock_full+0x180>\n    af08:\tb9400a61 \tldr\tw1, [x19,#8]\n    af0c:\t321f77e0 \tmov\tw0, #0x7ffffffe            \t// #2147483646\n    af10:\t6b00003f \tcmp\tw1, w0\n    af14:\t54fffa61 \tb.ne\tae60 <__pthread_mutex_cond_lock_full+0x2cc>\n    af18:\tb900067f \tstr\twzr, [x19,#4]\n    af1c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    af20:\t885f7e60 \tldxr\tw0, [x19]\n    af24:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    af28:\t35ffffc2 \tcbnz\tw2, af20 <__pthread_mutex_cond_lock_full+0x38c>\n    af2c:\t7100041f \tcmp\tw0, #0x1\n    af30:\t54000d6c \tb.gt\tb0dc <__pthread_mutex_cond_lock_full+0x548>\n    af34:\tf9007adf \tstr\txzr, [x22,#240]\n    af38:\t52801074 \tmov\tw20, #0x83                  \t// #131\n    af3c:\t2a1403e0 \tmov\tw0, w20\n    af40:\tf94023f9 \tldr\tx25, [sp,#64]\n    af44:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    af48:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    af4c:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    af50:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    af54:\td65f03c0 \tret\n    af58:\t2a1403f6 \tmov\tw22, w20\n    af5c:\t17ffff30 \tb\tac1c <__pthread_mutex_cond_lock_full+0x88>\n    af60:\tb9005fa0 \tstr\tw0, [x29,#92]\n    af64:\t2a0003e1 \tmov\tw1, w0\n    af68:\t885ffe62 \tldaxr\tw2, [x19]\n    af6c:\t6b01005f \tcmp\tw2, w1\n    af70:\t54000061 \tb.ne\taf7c <__pthread_mutex_cond_lock_full+0x3e8>\n    af74:\t88037e78 \tstxr\tw3, w24, [x19]\n    af78:\t35ffff83 \tcbnz\tw3, af68 <__pthread_mutex_cond_lock_full+0x3d4>\n    af7c:\t54000040 \tb.eq\taf84 <__pthread_mutex_cond_lock_full+0x3f0>\n    af80:\tb9005fa2 \tstr\tw2, [x29,#92]\n    af84:\tb9405fa1 \tldr\tw1, [x29,#92]\n    af88:\t6b01001f \tcmp\tw0, w1\n    af8c:\t54000860 \tb.eq\tb098 <__pthread_mutex_cond_lock_full+0x504>\n    af90:\t2a0103e0 \tmov\tw0, w1\n    af94:\t12020034 \tand\tw20, w1, #0x40000000\n    af98:\t17ffff9e \tb\tae10 <__pthread_mutex_cond_lock_full+0x27c>\n    af9c:\t91008260 \tadd\tx0, x19, #0x20\n    afa0:\tb2400000 \torr\tx0, x0, #0x1\n    afa4:\tf9007ac0 \tstr\tx0, [x22,#240]\n    afa8:\t17ffff66 \tb\tad40 <__pthread_mutex_cond_lock_full+0x1ac>\n    afac:\t940016ab \tbl\t10a58 <__pause_nocancel>\n    afb0:\t940016aa \tbl\t10a58 <__pause_nocancel>\n    afb4:\t17fffffe \tb\tafac <__pthread_mutex_cond_lock_full+0x418>\n    afb8:\tb9005fa0 \tstr\tw0, [x29,#92]\n    afbc:\tb9405fa0 \tldr\tw0, [x29,#92]\n    afc0:\t34fff800 \tcbz\tw0, aec0 <__pthread_mutex_cond_lock_full+0x32c>\n    afc4:\t17ffff6d \tb\tad78 <__pthread_mutex_cond_lock_full+0x1e4>\n    afc8:\t12000421 \tand\tw1, w1, #0x3\n    afcc:\t52800474 \tmov\tw20, #0x23                  \t// #35\n    afd0:\t7100083f \tcmp\tw1, #0x2\n    afd4:\t54ffea40 \tb.eq\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    afd8:\t7100043f \tcmp\tw1, #0x1\n    afdc:\t54ffe1e1 \tb.ne\tac18 <__pthread_mutex_cond_lock_full+0x84>\n    afe0:\tb9400660 \tldr\tw0, [x19,#4]\n    afe4:\t3100041f \tcmn\tw0, #0x1\n    afe8:\t540002a1 \tb.ne\tb03c <__pthread_mutex_cond_lock_full+0x4a8>\n    afec:\t52800174 \tmov\tw20, #0xb                   \t// #11\n    aff0:\t17ffff4b \tb\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    aff4:\t2a0003f4 \tmov\tw20, w0\n    aff8:\t17ffff49 \tb\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    affc:\t310006df \tcmn\tw22, #0x1\n    b000:\t528002d4 \tmov\tw20, #0x16                  \t// #22\n    b004:\t54ffe8c0 \tb.eq\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    b008:\t2a1603e0 \tmov\tw0, w22\n    b00c:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n    b010:\t94001b12 \tbl\t11c58 <__pthread_tpp_change_priority>\n    b014:\t17ffff42 \tb\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    b018:\t12000421 \tand\tw1, w1, #0x3\n    b01c:\t7100083f \tcmp\tw1, #0x2\n    b020:\t54000800 \tb.eq\tb120 <__pthread_mutex_cond_lock_full+0x58c>\n    b024:\t7100043f \tcmp\tw1, #0x1\n    b028:\t54ffe941 \tb.ne\tad50 <__pthread_mutex_cond_lock_full+0x1bc>\n    b02c:\tf9007adf \tstr\txzr, [x22,#240]\n    b030:\tb9400660 \tldr\tw0, [x19,#4]\n    b034:\t3100041f \tcmn\tw0, #0x1\n    b038:\t54fffda0 \tb.eq\tafec <__pthread_mutex_cond_lock_full+0x458>\n    b03c:\t11000400 \tadd\tw0, w0, #0x1\n    b040:\t52800014 \tmov\tw20, #0x0                   \t// #0\n    b044:\tb9000660 \tstr\tw0, [x19,#4]\n    b048:\t17ffff35 \tb\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    b04c:\taa1603e0 \tmov\tx0, x22\n    b050:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    b054:\tb9000661 \tstr\tw1, [x19,#4]\n    b058:\t12b00001 \tmov\tw1, #0x7fffffff            \t// #2147483647\n    b05c:\tb9000a61 \tstr\tw1, [x19,#8]\n    b060:\t91008262 \tadd\tx2, x19, #0x20\n    b064:\tb2400043 \torr\tx3, x2, #0x1\n    b068:\t52801054 \tmov\tw20, #0x82                  \t// #130\n    b06c:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    b070:\t927ff824 \tand\tx4, x1, #0xfffffffffffffffe\n    b074:\tf81f8082 \tstr\tx2, [x4,#-8]\n    b078:\tf9000e60 \tstr\tx0, [x19,#24]\n    b07c:\tf9001261 \tstr\tx1, [x19,#32]\n    b080:\tf90072c3 \tstr\tx3, [x22,#224]\n    b084:\tf9007adf \tstr\txzr, [x22,#240]\n    b088:\tb9400e60 \tldr\tw0, [x19,#12]\n    b08c:\t51000400 \tsub\tw0, w0, #0x1\n    b090:\tb9000e60 \tstr\tw0, [x19,#12]\n    b094:\t17ffff22 \tb\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    b098:\taa1603e0 \tmov\tx0, x22\n    b09c:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    b0a0:\tb9000661 \tstr\tw1, [x19,#4]\n    b0a4:\t12b00001 \tmov\tw1, #0x7fffffff            \t// #2147483647\n    b0a8:\tb9000a61 \tstr\tw1, [x19,#8]\n    b0ac:\t52801054 \tmov\tw20, #0x82                  \t// #130\n    b0b0:\tf84e0c01 \tldr\tx1, [x0,#224]!\n    b0b4:\t927ff822 \tand\tx2, x1, #0xfffffffffffffffe\n    b0b8:\tf81f8057 \tstr\tx23, [x2,#-8]\n    b0bc:\tf9000e60 \tstr\tx0, [x19,#24]\n    b0c0:\tf9001261 \tstr\tx1, [x19,#32]\n    b0c4:\tf90072d7 \tstr\tx23, [x22,#224]\n    b0c8:\tf9007adf \tstr\txzr, [x22,#240]\n    b0cc:\tb9400e60 \tldr\tw0, [x19,#12]\n    b0d0:\t51000400 \tsub\tw0, w0, #0x1\n    b0d4:\tb9000e60 \tstr\tw0, [x19,#12]\n    b0d8:\t17ffff11 \tb\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    b0dc:\td2800021 \tmov\tx1, #0x1                   \t// #1\n    b0e0:\taa1303e0 \tmov\tx0, x19\n    b0e4:\taa0103e2 \tmov\tx2, x1\n    b0e8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    b0ec:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b0f0:\td4000001 \tsvc\t#0x0\n    b0f4:\t17ffff90 \tb\taf34 <__pthread_mutex_cond_lock_full+0x3a0>\n    b0f8:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    b0fc:\tb900067f \tstr\twzr, [x19,#4]\n    b100:\taa1303e0 \tmov\tx0, x19\n    b104:\td28000e1 \tmov\tx1, #0x7                   \t// #7\n    b108:\taa0203e3 \tmov\tx3, x2\n    b10c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b110:\td4000001 \tsvc\t#0x0\n    b114:\t52801074 \tmov\tw20, #0x83                  \t// #131\n    b118:\tf9007ac2 \tstr\tx2, [x22,#240]\n    b11c:\t17ffff00 \tb\tad1c <__pthread_mutex_cond_lock_full+0x188>\n    b120:\tf9007adf \tstr\txzr, [x22,#240]\n    b124:\t52800474 \tmov\tw20, #0x23                  \t// #35\n    b128:\t17fffefd \tb\tad1c <__pthread_mutex_cond_lock_full+0x188>\n\n000000000000b12c <__pthread_mutex_cond_lock>:\n    b12c:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    b130:\t52802fe2 \tmov\tw2, #0x17f                 \t// #383\n    b134:\t910003fd \tmov\tx29, sp\n    b138:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    b13c:\tf90013f5 \tstr\tx21, [sp,#32]\n    b140:\taa0003f3 \tmov\tx19, x0\n    b144:\tb9401001 \tldr\tw1, [x0,#16]\n    b148:\t721e1023 \tands\tw3, w1, #0x7c\n    b14c:\t0a020022 \tand\tw2, w1, w2\n    b150:\t540004e1 \tb.ne\tb1ec <__pthread_mutex_cond_lock+0xc0>\n    b154:\t350001e2 \tcbnz\tw2, b190 <__pthread_mutex_cond_lock+0x64>\n    b158:\td53bd054 \tmrs\tx20, tpidr_el0\n    b15c:\t52800041 \tmov\tw1, #0x2                   \t// #2\n    b160:\t885ffe60 \tldaxr\tw0, [x19]\n    b164:\t88027e61 \tstxr\tw2, w1, [x19]\n    b168:\t35ffffc2 \tcbnz\tw2, b160 <__pthread_mutex_cond_lock+0x34>\n    b16c:\t35000340 \tcbnz\tw0, b1d4 <__pthread_mutex_cond_lock+0xa8>\n    b170:\td11bc294 \tsub\tx20, x20, #0x6f0\n    b174:\tb940d281 \tldr\tw1, [x20,#208]\n    b178:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    b17c:\tb9000a61 \tstr\tw1, [x19,#8]\n    b180:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    b184:\tf94013f5 \tldr\tx21, [sp,#32]\n    b188:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    b18c:\td65f03c0 \tret\n    b190:\t12001821 \tand\tw1, w1, #0x7f\n    b194:\t7100043f \tcmp\tw1, #0x1\n    b198:\t54000421 \tb.ne\tb21c <__pthread_mutex_cond_lock+0xf0>\n    b19c:\td53bd054 \tmrs\tx20, tpidr_el0\n    b1a0:\tb9400802 \tldr\tw2, [x0,#8]\n    b1a4:\td11bc294 \tsub\tx20, x20, #0x6f0\n    b1a8:\tb940d281 \tldr\tw1, [x20,#208]\n    b1ac:\t6b01005f \tcmp\tw2, w1\n    b1b0:\t54000280 \tb.eq\tb200 <__pthread_mutex_cond_lock+0xd4>\n    b1b4:\t52800042 \tmov\tw2, #0x2                   \t// #2\n    b1b8:\t885ffe61 \tldaxr\tw1, [x19]\n    b1bc:\t88037e62 \tstxr\tw3, w2, [x19]\n    b1c0:\t35ffffc3 \tcbnz\tw3, b1b8 <__pthread_mutex_cond_lock+0x8c>\n    b1c4:\t350004c1 \tcbnz\tw1, b25c <__pthread_mutex_cond_lock+0x130>\n    b1c8:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    b1cc:\tb9000660 \tstr\tw0, [x19,#4]\n    b1d0:\t17ffffe9 \tb\tb174 <__pthread_mutex_cond_lock+0x48>\n    b1d4:\tb9401261 \tldr\tw1, [x19,#16]\n    b1d8:\taa1303e0 \tmov\tx0, x19\n    b1dc:\td11bc294 \tsub\tx20, x20, #0x6f0\n    b1e0:\t12190021 \tand\tw1, w1, #0x80\n    b1e4:\t94001178 \tbl\tf7c4 <__lll_lock_wait>\n    b1e8:\t17ffffe3 \tb\tb174 <__pthread_mutex_cond_lock+0x48>\n    b1ec:\t97fffe6a \tbl\tab94 <__pthread_mutex_cond_lock_full>\n    b1f0:\tf94013f5 \tldr\tx21, [sp,#32]\n    b1f4:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    b1f8:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    b1fc:\td65f03c0 \tret\n    b200:\tb9400400 \tldr\tw0, [x0,#4]\n    b204:\t3100041f \tcmn\tw0, #0x1\n    b208:\t54000320 \tb.eq\tb26c <__pthread_mutex_cond_lock+0x140>\n    b20c:\t11000401 \tadd\tw1, w0, #0x1\n    b210:\t2a0303e0 \tmov\tw0, w3\n    b214:\tb9000661 \tstr\tw1, [x19,#4]\n    b218:\t17ffffda \tb\tb180 <__pthread_mutex_cond_lock+0x54>\n    b21c:\t71000c3f \tcmp\tw1, #0x3\n    b220:\t540007a1 \tb.ne\tb314 <__pthread_mutex_cond_lock+0x1e8>\n    b224:\tb0000140 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    b228:\tb9432c00 \tldr\tw0, [x0,#812]\n    b22c:\t34fff960 \tcbz\tw0, b158 <__pthread_mutex_cond_lock+0x2c>\n    b230:\tb9003fa3 \tstr\tw3, [x29,#60]\n    b234:\t52800042 \tmov\tw2, #0x2                   \t// #2\n    b238:\t885ffe60 \tldaxr\tw0, [x19]\n    b23c:\t6b1f001f \tcmp\tw0, wzr\n    b240:\t54000061 \tb.ne\tb24c <__pthread_mutex_cond_lock+0x120>\n    b244:\t88017e62 \tstxr\tw1, w2, [x19]\n    b248:\t35ffff81 \tcbnz\tw1, b238 <__pthread_mutex_cond_lock+0x10c>\n    b24c:\t1a9f17f5 \tcset\tw21, eq\n    b250:\t34000135 \tcbz\tw21, b274 <__pthread_mutex_cond_lock+0x148>\n    b254:\td53bd054 \tmrs\tx20, tpidr_el0\n    b258:\t17ffffc6 \tb\tb170 <__pthread_mutex_cond_lock+0x44>\n    b25c:\tb9401261 \tldr\tw1, [x19,#16]\n    b260:\t12190021 \tand\tw1, w1, #0x80\n    b264:\t94001158 \tbl\tf7c4 <__lll_lock_wait>\n    b268:\t17ffffd8 \tb\tb1c8 <__pthread_mutex_cond_lock+0x9c>\n    b26c:\t52800160 \tmov\tw0, #0xb                   \t// #11\n    b270:\t17ffffc4 \tb\tb180 <__pthread_mutex_cond_lock+0x54>\n    b274:\tb9401661 \tldr\tw1, [x19,#20]\n    b278:\tb9003fa0 \tstr\tw0, [x29,#60]\n    b27c:\t52800c80 \tmov\tw0, #0x64                  \t// #100\n    b280:\t11001421 \tadd\tw1, w1, #0x5\n    b284:\t531f7821 \tlsl\tw1, w1, #1\n    b288:\t7101903f \tcmp\tw1, #0x64\n    b28c:\t1a80d021 \tcsel\tw1, w1, w0, le\n    b290:\t110006b5 \tadd\tw21, w21, #0x1\n    b294:\t510006a0 \tsub\tw0, w21, #0x1\n    b298:\t6b01001f \tcmp\tw0, w1\n    b29c:\t5400028a \tb.ge\tb2ec <__pthread_mutex_cond_lock+0x1c0>\n    b2a0:\tb9003fbf \tstr\twzr, [x29,#60]\n    b2a4:\t885ffe60 \tldaxr\tw0, [x19]\n    b2a8:\t6b1f001f \tcmp\tw0, wzr\n    b2ac:\t54000061 \tb.ne\tb2b8 <__pthread_mutex_cond_lock+0x18c>\n    b2b0:\t88037e62 \tstxr\tw3, w2, [x19]\n    b2b4:\t35ffff83 \tcbnz\tw3, b2a4 <__pthread_mutex_cond_lock+0x178>\n    b2b8:\t54000161 \tb.ne\tb2e4 <__pthread_mutex_cond_lock+0x1b8>\n    b2bc:\tb9401661 \tldr\tw1, [x19,#20]\n    b2c0:\td53bd054 \tmrs\tx20, tpidr_el0\n    b2c4:\td11bc294 \tsub\tx20, x20, #0x6f0\n    b2c8:\t4b0102b5 \tsub\tw21, w21, w1\n    b2cc:\t11001ea0 \tadd\tw0, w21, #0x7\n    b2d0:\t6b1f02bf \tcmp\tw21, wzr\n    b2d4:\t1a95b015 \tcsel\tw21, w0, w21, lt\n    b2d8:\t0b950c35 \tadd\tw21, w1, w21, asr #3\n    b2dc:\tb9001675 \tstr\tw21, [x19,#20]\n    b2e0:\t17ffffa5 \tb\tb174 <__pthread_mutex_cond_lock+0x48>\n    b2e4:\tb9003fa0 \tstr\tw0, [x29,#60]\n    b2e8:\t17ffffea \tb\tb290 <__pthread_mutex_cond_lock+0x164>\n    b2ec:\t52800041 \tmov\tw1, #0x2                   \t// #2\n    b2f0:\t885ffe60 \tldaxr\tw0, [x19]\n    b2f4:\t88027e61 \tstxr\tw2, w1, [x19]\n    b2f8:\t35ffffc2 \tcbnz\tw2, b2f0 <__pthread_mutex_cond_lock+0x1c4>\n    b2fc:\t34fffe00 \tcbz\tw0, b2bc <__pthread_mutex_cond_lock+0x190>\n    b300:\tb9401261 \tldr\tw1, [x19,#16]\n    b304:\taa1303e0 \tmov\tx0, x19\n    b308:\t12190021 \tand\tw1, w1, #0x80\n    b30c:\t9400112e \tbl\tf7c4 <__lll_lock_wait>\n    b310:\t17ffffeb \tb\tb2bc <__pthread_mutex_cond_lock+0x190>\n    b314:\td53bd054 \tmrs\tx20, tpidr_el0\n    b318:\tb9400800 \tldr\tw0, [x0,#8]\n    b31c:\td11bc281 \tsub\tx1, x20, #0x6f0\n    b320:\tb940d021 \tldr\tw1, [x1,#208]\n    b324:\t6b00003f \tcmp\tw1, w0\n    b328:\t54fff1a1 \tb.ne\tb15c <__pthread_mutex_cond_lock+0x30>\n    b32c:\t52800460 \tmov\tw0, #0x23                  \t// #35\n    b330:\t17ffff94 \tb\tb180 <__pthread_mutex_cond_lock+0x54>\n\n000000000000b334 <__pthread_mutex_cond_lock_adjust>:\n    b334:\td53bd041 \tmrs\tx1, tpidr_el0\n    b338:\tb9401002 \tldr\tw2, [x0,#16]\n    b33c:\td11bc021 \tsub\tx1, x1, #0x6f0\n    b340:\t7100845f \tcmp\tw2, #0x21\n    b344:\tb940d021 \tldr\tw1, [x1,#208]\n    b348:\tb9000801 \tstr\tw1, [x0,#8]\n    b34c:\t54000040 \tb.eq\tb354 <__pthread_mutex_cond_lock_adjust+0x20>\n    b350:\td65f03c0 \tret\n    b354:\tb9400401 \tldr\tw1, [x0,#4]\n    b358:\t11000421 \tadd\tw1, w1, #0x1\n    b35c:\tb9000401 \tstr\tw1, [x0,#4]\n    b360:\td65f03c0 \tret\n\n000000000000b364 <__pthread_mutexattr_init>:\n    b364:\tf900001f \tstr\txzr, [x0]\n    b368:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    b36c:\td65f03c0 \tret\n\n000000000000b370 <__pthread_mutexattr_destroy>:\n    b370:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    b374:\td65f03c0 \tret\n\n000000000000b378 <pthread_mutexattr_getpshared>:\n    b378:\tb9400002 \tldr\tw2, [x0]\n    b37c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    b380:\t531f7c42 \tlsr\tw2, w2, #31\n    b384:\tb9000022 \tstr\tw2, [x1]\n    b388:\td65f03c0 \tret\n\n000000000000b38c <pthread_mutexattr_setpshared>:\n    b38c:\t350000c1 \tcbnz\tw1, b3a4 <pthread_mutexattr_setpshared+0x18>\n    b390:\tb9400002 \tldr\tw2, [x0]\n    b394:\t12007842 \tand\tw2, w2, #0x7fffffff\n    b398:\tb9000002 \tstr\tw2, [x0]\n    b39c:\t2a0103e0 \tmov\tw0, w1\n    b3a0:\td65f03c0 \tret\n    b3a4:\t7100043f \tcmp\tw1, #0x1\n    b3a8:\t540000e1 \tb.ne\tb3c4 <pthread_mutexattr_setpshared+0x38>\n    b3ac:\tb9400002 \tldr\tw2, [x0]\n    b3b0:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    b3b4:\t32010042 \torr\tw2, w2, #0x80000000\n    b3b8:\tb9000002 \tstr\tw2, [x0]\n    b3bc:\t2a0103e0 \tmov\tw0, w1\n    b3c0:\td65f03c0 \tret\n    b3c4:\t528002c1 \tmov\tw1, #0x16                  \t// #22\n    b3c8:\t17fffff5 \tb\tb39c <pthread_mutexattr_setpshared+0x10>\n\n000000000000b3cc <pthread_mutexattr_gettype>:\n    b3cc:\tb9400003 \tldr\tw3, [x0]\n    b3d0:\t5281ffe2 \tmov\tw2, #0xfff                 \t// #4095\n    b3d4:\t72a1e002 \tmovk\tw2, #0xf00, lsl #16\n    b3d8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    b3dc:\t0a020062 \tand\tw2, w3, w2\n    b3e0:\tb9000022 \tstr\tw2, [x1]\n    b3e4:\td65f03c0 \tret\n\n000000000000b3e8 <__pthread_mutexattr_settype>:\n    b3e8:\t71000c3f \tcmp\tw1, #0x3\n    b3ec:\taa0003e3 \tmov\tx3, x0\n    b3f0:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    b3f4:\t54000049 \tb.ls\tb3fc <__pthread_mutexattr_settype+0x14>\n    b3f8:\td65f03c0 \tret\n    b3fc:\tb9400060 \tldr\tw0, [x3]\n    b400:\t529e0002 \tmov\tw2, #0xf000                \t// #61440\n    b404:\t6b1f003f \tcmp\tw1, wzr\n    b408:\t52804004 \tmov\tw4, #0x200                 \t// #512\n    b40c:\t72be1fe2 \tmovk\tw2, #0xf0ff, lsl #16\n    b410:\t1a841021 \tcsel\tw1, w1, w4, ne\n    b414:\t0a020002 \tand\tw2, w0, w2\n    b418:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    b41c:\t2a020021 \torr\tw1, w1, w2\n    b420:\tb9000061 \tstr\tw1, [x3]\n    b424:\td65f03c0 \tret\n\n000000000000b428 <__pthread_rwlock_init>:\n    b428:\taa0003e2 \tmov\tx2, x0\n    b42c:\tb4000201 \tcbz\tx1, b46c <__pthread_rwlock_init+0x44>\n    b430:\ta9017c5f \tstp\txzr, xzr, [x2,#16]\n    b434:\tf900185f \tstr\txzr, [x2,#48]\n    b438:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    b43c:\ta9007c5f \tstp\txzr, xzr, [x2]\n    b440:\ta9027c5f \tstp\txzr, xzr, [x2,#32]\n    b444:\tb9400023 \tldr\tw3, [x1]\n    b448:\t7100087f \tcmp\tw3, #0x2\n    b44c:\t1a9f17e3 \tcset\tw3, eq\n    b450:\tb9003043 \tstr\tw3, [x2,#48]\n    b454:\t52801003 \tmov\tw3, #0x80                  \t// #128\n    b458:\tb9400421 \tldr\tw1, [x1,#4]\n    b45c:\t6b00003f \tcmp\tw1, w0\n    b460:\t1a830021 \tcsel\tw1, w1, w3, eq\n    b464:\tb9001c41 \tstr\tw1, [x2,#28]\n    b468:\td65f03c0 \tret\n    b46c:\tf0000021 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n    b470:\t912ee021 \tadd\tx1, x1, #0xbb8\n    b474:\t17ffffef \tb\tb430 <__pthread_rwlock_init+0x8>\n\n000000000000b478 <__pthread_rwlock_destroy>:\n    b478:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    b47c:\td65f03c0 \tret\n\n000000000000b480 <__pthread_rwlock_rdlock_slow>:\n    b480:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    b484:\t910003fd \tmov\tx29, sp\n    b488:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    b48c:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    b490:\tf9001bf7 \tstr\tx23, [sp,#48]\n    b494:\td53bd054 \tmrs\tx20, tpidr_el0\n    b498:\taa0003f3 \tmov\tx19, x0\n    b49c:\td11bc294 \tsub\tx20, x20, #0x6f0\n    b4a0:\tb9401801 \tldr\tw1, [x0,#24]\n    b4a4:\t52800016 \tmov\tw22, #0x0                   \t// #0\n    b4a8:\t52801037 \tmov\tw23, #0x81                  \t// #129\n    b4ac:\t52800035 \tmov\tw21, #0x1                   \t// #1\n    b4b0:\tb940d280 \tldr\tw0, [x20,#208]\n    b4b4:\t6b01001f \tcmp\tw0, w1\n    b4b8:\t54000700 \tb.eq\tb598 <__pthread_rwlock_rdlock_slow+0x118>\n    b4bc:\tb9401261 \tldr\tw1, [x19,#16]\n    b4c0:\t11000420 \tadd\tw0, w1, #0x1\n    b4c4:\tb9001260 \tstr\tw0, [x19,#16]\n    b4c8:\t340006c0 \tcbz\tw0, b5a0 <__pthread_rwlock_rdlock_slow+0x120>\n    b4cc:\tb9400a64 \tldr\tw4, [x19,#8]\n    b4d0:\t885f7e60 \tldxr\tw0, [x19]\n    b4d4:\t8801fe76 \tstlxr\tw1, w22, [x19]\n    b4d8:\t35ffffc1 \tcbnz\tw1, b4d0 <__pthread_rwlock_rdlock_slow+0x50>\n    b4dc:\t7100041f \tcmp\tw0, #0x1\n    b4e0:\t5400066c \tb.gt\tb5ac <__pthread_rwlock_rdlock_slow+0x12c>\n    b4e4:\tb9401e61 \tldr\tw1, [x19,#28]\n    b4e8:\t93407c82 \tsxtw\tx2, w4\n    b4ec:\t91002260 \tadd\tx0, x19, #0x8\n    b4f0:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    b4f4:\t52190021 \teor\tw1, w1, #0x80\n    b4f8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b4fc:\t93407c21 \tsxtw\tx1, w1\n    b500:\td4000001 \tsvc\t#0x0\n    b504:\tb9004fa3 \tstr\tw3, [x29,#76]\n    b508:\t885ffe62 \tldaxr\tw2, [x19]\n    b50c:\t6b1f005f \tcmp\tw2, wzr\n    b510:\t54000061 \tb.ne\tb51c <__pthread_rwlock_rdlock_slow+0x9c>\n    b514:\t88007e75 \tstxr\tw0, w21, [x19]\n    b518:\t35ffff80 \tcbnz\tw0, b508 <__pthread_rwlock_rdlock_slow+0x88>\n    b51c:\taa1303e0 \tmov\tx0, x19\n    b520:\t54000080 \tb.eq\tb530 <__pthread_rwlock_rdlock_slow+0xb0>\n    b524:\tb9401e61 \tldr\tw1, [x19,#28]\n    b528:\tb9004fa2 \tstr\tw2, [x29,#76]\n    b52c:\t940010a6 \tbl\tf7c4 <__lll_lock_wait>\n    b530:\tb9401260 \tldr\tw0, [x19,#16]\n    b534:\tb9401a61 \tldr\tw1, [x19,#24]\n    b538:\t51000400 \tsub\tw0, w0, #0x1\n    b53c:\tb9001260 \tstr\tw0, [x19,#16]\n    b540:\t35fffb81 \tcbnz\tw1, b4b0 <__pthread_rwlock_rdlock_slow+0x30>\n    b544:\tb9401660 \tldr\tw0, [x19,#20]\n    b548:\t34000060 \tcbz\tw0, b554 <__pthread_rwlock_rdlock_slow+0xd4>\n    b54c:\tb9403260 \tldr\tw0, [x19,#48]\n    b550:\t35fffb00 \tcbnz\tw0, b4b0 <__pthread_rwlock_rdlock_slow+0x30>\n    b554:\tb9400661 \tldr\tw1, [x19,#4]\n    b558:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    b55c:\t11000420 \tadd\tw0, w1, #0x1\n    b560:\tb9000660 \tstr\tw0, [x19,#4]\n    b564:\t34000540 \tcbz\tw0, b60c <__pthread_rwlock_rdlock_slow+0x18c>\n    b568:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    b56c:\t885f7e60 \tldxr\tw0, [x19]\n    b570:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    b574:\t35ffffc2 \tcbnz\tw2, b56c <__pthread_rwlock_rdlock_slow+0xec>\n    b578:\t7100041f \tcmp\tw0, #0x1\n    b57c:\t540002ac \tb.gt\tb5d0 <__pthread_rwlock_rdlock_slow+0x150>\n    b580:\t2a0403e0 \tmov\tw0, w4\n    b584:\tf9401bf7 \tldr\tx23, [sp,#48]\n    b588:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    b58c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    b590:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    b594:\td65f03c0 \tret\n    b598:\t52800464 \tmov\tw4, #0x23                  \t// #35\n    b59c:\t17fffff3 \tb\tb568 <__pthread_rwlock_rdlock_slow+0xe8>\n    b5a0:\tb9001261 \tstr\tw1, [x19,#16]\n    b5a4:\t52800164 \tmov\tw4, #0xb                   \t// #11\n    b5a8:\t17fffff0 \tb\tb568 <__pthread_rwlock_rdlock_slow+0xe8>\n    b5ac:\tb9401e61 \tldr\tw1, [x19,#28]\n    b5b0:\taa1303e0 \tmov\tx0, x19\n    b5b4:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    b5b8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    b5bc:\t4a170021 \teor\tw1, w1, w23\n    b5c0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b5c4:\t93407c21 \tsxtw\tx1, w1\n    b5c8:\td4000001 \tsvc\t#0x0\n    b5cc:\t17ffffc6 \tb\tb4e4 <__pthread_rwlock_rdlock_slow+0x64>\n    b5d0:\tb9401e63 \tldr\tw3, [x19,#28]\n    b5d4:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    b5d8:\taa1303e0 \tmov\tx0, x19\n    b5dc:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    b5e0:\t4a010061 \teor\tw1, w3, w1\n    b5e4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b5e8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    b5ec:\t93407c21 \tsxtw\tx1, w1\n    b5f0:\td4000001 \tsvc\t#0x0\n    b5f4:\t2a0403e0 \tmov\tw0, w4\n    b5f8:\tf9401bf7 \tldr\tx23, [sp,#48]\n    b5fc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    b600:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    b604:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    b608:\td65f03c0 \tret\n    b60c:\tb9000661 \tstr\tw1, [x19,#4]\n    b610:\t52800164 \tmov\tw4, #0xb                   \t// #11\n    b614:\t17ffffd5 \tb\tb568 <__pthread_rwlock_rdlock_slow+0xe8>\n\n000000000000b618 <__pthread_rwlock_rdlock>:\n    b618:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    b61c:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    b620:\t910003fd \tmov\tx29, sp\n    b624:\tf9000bf3 \tstr\tx19, [sp,#16]\n    b628:\taa0003f3 \tmov\tx19, x0\n    b62c:\tb9002fbf \tstr\twzr, [x29,#44]\n    b630:\t885ffe62 \tldaxr\tw2, [x19]\n    b634:\t6b1f005f \tcmp\tw2, wzr\n    b638:\t54000061 \tb.ne\tb644 <__pthread_rwlock_rdlock+0x2c>\n    b63c:\t88037e61 \tstxr\tw3, w1, [x19]\n    b640:\t35ffff83 \tcbnz\tw3, b630 <__pthread_rwlock_rdlock+0x18>\n    b644:\t54000281 \tb.ne\tb694 <__pthread_rwlock_rdlock+0x7c>\n    b648:\tb9401a60 \tldr\tw0, [x19,#24]\n    b64c:\t350002e0 \tcbnz\tw0, b6a8 <__pthread_rwlock_rdlock+0x90>\n    b650:\tb9401660 \tldr\tw0, [x19,#20]\n    b654:\t35000380 \tcbnz\tw0, b6c4 <__pthread_rwlock_rdlock+0xac>\n    b658:\tb9400661 \tldr\tw1, [x19,#4]\n    b65c:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    b660:\t11000420 \tadd\tw0, w1, #0x1\n    b664:\tb9000660 \tstr\tw0, [x19,#4]\n    b668:\t340003c0 \tcbz\tw0, b6e0 <__pthread_rwlock_rdlock+0xc8>\n    b66c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    b670:\t885f7e60 \tldxr\tw0, [x19]\n    b674:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    b678:\t35ffffc2 \tcbnz\tw2, b670 <__pthread_rwlock_rdlock+0x58>\n    b67c:\t7100041f \tcmp\tw0, #0x1\n    b680:\t5400036c \tb.gt\tb6ec <__pthread_rwlock_rdlock+0xd4>\n    b684:\t2a0403e0 \tmov\tw0, w4\n    b688:\tf9400bf3 \tldr\tx19, [sp,#16]\n    b68c:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    b690:\td65f03c0 \tret\n    b694:\tb9401e61 \tldr\tw1, [x19,#28]\n    b698:\tb9002fa2 \tstr\tw2, [x29,#44]\n    b69c:\t9400104a \tbl\tf7c4 <__lll_lock_wait>\n    b6a0:\tb9401a60 \tldr\tw0, [x19,#24]\n    b6a4:\t34fffd60 \tcbz\tw0, b650 <__pthread_rwlock_rdlock+0x38>\n    b6a8:\taa1303e0 \tmov\tx0, x19\n    b6ac:\t97ffff75 \tbl\tb480 <__pthread_rwlock_rdlock_slow>\n    b6b0:\t2a0003e4 \tmov\tw4, w0\n    b6b4:\t2a0403e0 \tmov\tw0, w4\n    b6b8:\tf9400bf3 \tldr\tx19, [sp,#16]\n    b6bc:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    b6c0:\td65f03c0 \tret\n    b6c4:\tb9403260 \tldr\tw0, [x19,#48]\n    b6c8:\t35ffff00 \tcbnz\tw0, b6a8 <__pthread_rwlock_rdlock+0x90>\n    b6cc:\tb9400661 \tldr\tw1, [x19,#4]\n    b6d0:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    b6d4:\t11000420 \tadd\tw0, w1, #0x1\n    b6d8:\tb9000660 \tstr\tw0, [x19,#4]\n    b6dc:\t35fffc80 \tcbnz\tw0, b66c <__pthread_rwlock_rdlock+0x54>\n    b6e0:\tb9000661 \tstr\tw1, [x19,#4]\n    b6e4:\t52800164 \tmov\tw4, #0xb                   \t// #11\n    b6e8:\t17ffffe1 \tb\tb66c <__pthread_rwlock_rdlock+0x54>\n    b6ec:\tb9401e63 \tldr\tw3, [x19,#28]\n    b6f0:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    b6f4:\taa1303e0 \tmov\tx0, x19\n    b6f8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    b6fc:\t4a010061 \teor\tw1, w3, w1\n    b700:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b704:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    b708:\t93407c21 \tsxtw\tx1, w1\n    b70c:\td4000001 \tsvc\t#0x0\n    b710:\t17ffffdd \tb\tb684 <__pthread_rwlock_rdlock+0x6c>\n\n000000000000b714 <pthread_rwlock_timedrdlock>:\n    b714:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n    b718:\t910003fd \tmov\tx29, sp\n    b71c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    b720:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    b724:\taa0103f4 \tmov\tx20, x1\n    b728:\tb9005fbf \tstr\twzr, [x29,#92]\n    b72c:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    b730:\taa0003f3 \tmov\tx19, x0\n    b734:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    b738:\t885ffe62 \tldaxr\tw2, [x19]\n    b73c:\t6b1f005f \tcmp\tw2, wzr\n    b740:\t54000061 \tb.ne\tb74c <pthread_rwlock_timedrdlock+0x38>\n    b744:\t88037e61 \tstxr\tw3, w1, [x19]\n    b748:\t35ffff83 \tcbnz\tw3, b738 <pthread_rwlock_timedrdlock+0x24>\n    b74c:\t54000721 \tb.ne\tb830 <pthread_rwlock_timedrdlock+0x11c>\n    b750:\td53bd055 \tmrs\tx21, tpidr_el0\n    b754:\t52800017 \tmov\tw23, #0x0                   \t// #0\n    b758:\td11bc2b5 \tsub\tx21, x21, #0x6f0\n    b75c:\t52801038 \tmov\tw24, #0x81                  \t// #129\n    b760:\t52803136 \tmov\tw22, #0x189                 \t// #393\n    b764:\tb9401a60 \tldr\tw0, [x19,#24]\n    b768:\t350000a0 \tcbnz\tw0, b77c <pthread_rwlock_timedrdlock+0x68>\n    b76c:\tb9401661 \tldr\tw1, [x19,#20]\n    b770:\t34000f21 \tcbz\tw1, b954 <pthread_rwlock_timedrdlock+0x240>\n    b774:\tb9403261 \tldr\tw1, [x19,#48]\n    b778:\t34000ee1 \tcbz\tw1, b954 <pthread_rwlock_timedrdlock+0x240>\n    b77c:\tb940d2a1 \tldr\tw1, [x21,#208]\n    b780:\t6b01001f \tcmp\tw0, w1\n    b784:\t54000b00 \tb.eq\tb8e4 <pthread_rwlock_timedrdlock+0x1d0>\n    b788:\tf9400681 \tldr\tx1, [x20,#8]\n    b78c:\td2993fe0 \tmov\tx0, #0xc9ff                \t// #51711\n    b790:\tf2a77340 \tmovk\tx0, #0x3b9a, lsl #16\n    b794:\teb00003f \tcmp\tx1, x0\n    b798:\t54000aa8 \tb.hi\tb8ec <pthread_rwlock_timedrdlock+0x1d8>\n    b79c:\tf9400280 \tldr\tx0, [x20]\n    b7a0:\tb7f80760 \ttbnz\tx0, #63, b88c <pthread_rwlock_timedrdlock+0x178>\n    b7a4:\tb9401261 \tldr\tw1, [x19,#16]\n    b7a8:\t11000420 \tadd\tw0, w1, #0x1\n    b7ac:\tb9001260 \tstr\tw0, [x19,#16]\n    b7b0:\t34000e00 \tcbz\tw0, b970 <pthread_rwlock_timedrdlock+0x25c>\n    b7b4:\tb9400a65 \tldr\tw5, [x19,#8]\n    b7b8:\t885f7e60 \tldxr\tw0, [x19]\n    b7bc:\t8801fe77 \tstlxr\tw1, w23, [x19]\n    b7c0:\t35ffffc1 \tcbnz\tw1, b7b8 <pthread_rwlock_timedrdlock+0xa4>\n    b7c4:\t7100041f \tcmp\tw0, #0x1\n    b7c8:\t5400096c \tb.gt\tb8f4 <pthread_rwlock_timedrdlock+0x1e0>\n    b7cc:\tb9401e64 \tldr\tw4, [x19,#28]\n    b7d0:\t93407ca2 \tsxtw\tx2, w5\n    b7d4:\t91002260 \tadd\tx0, x19, #0x8\n    b7d8:\taa1403e3 \tmov\tx3, x20\n    b7dc:\t4a160081 \teor\tw1, w4, w22\n    b7e0:\tb2407fe5 \tmov\tx5, #0xffffffff            \t// #4294967295\n    b7e4:\td2800004 \tmov\tx4, #0x0                   \t// #0\n    b7e8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b7ec:\t93407c21 \tsxtw\tx1, w1\n    b7f0:\td4000001 \tsvc\t#0x0\n    b7f4:\tb9005fa4 \tstr\tw4, [x29,#92]\n    b7f8:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    b7fc:\t54000228 \tb.hi\tb840 <pthread_rwlock_timedrdlock+0x12c>\n    b800:\t2a0403e0 \tmov\tw0, w4\n    b804:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    b808:\t885ffe62 \tldaxr\tw2, [x19]\n    b80c:\t6b00005f \tcmp\tw2, w0\n    b810:\t54000061 \tb.ne\tb81c <pthread_rwlock_timedrdlock+0x108>\n    b814:\t88037e61 \tstxr\tw3, w1, [x19]\n    b818:\t35ffff83 \tcbnz\tw3, b808 <pthread_rwlock_timedrdlock+0xf4>\n    b81c:\t54000601 \tb.ne\tb8dc <pthread_rwlock_timedrdlock+0x1c8>\n    b820:\tb9401260 \tldr\tw0, [x19,#16]\n    b824:\t51000400 \tsub\tw0, w0, #0x1\n    b828:\tb9001260 \tstr\tw0, [x19,#16]\n    b82c:\t17ffffce \tb\tb764 <pthread_rwlock_timedrdlock+0x50>\n    b830:\tb9401e61 \tldr\tw1, [x19,#28]\n    b834:\tb9005fa2 \tstr\tw2, [x29,#92]\n    b838:\t94000fe3 \tbl\tf7c4 <__lll_lock_wait>\n    b83c:\t17ffffc5 \tb\tb750 <pthread_rwlock_timedrdlock+0x3c>\n    b840:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    b844:\t885ffe62 \tldaxr\tw2, [x19]\n    b848:\t6b1f005f \tcmp\tw2, wzr\n    b84c:\t54000061 \tb.ne\tb858 <pthread_rwlock_timedrdlock+0x144>\n    b850:\t88037e61 \tstxr\tw3, w1, [x19]\n    b854:\t35ffff83 \tcbnz\tw3, b844 <pthread_rwlock_timedrdlock+0x130>\n    b858:\t54000340 \tb.eq\tb8c0 <pthread_rwlock_timedrdlock+0x1ac>\n    b85c:\tb9005fa2 \tstr\tw2, [x29,#92]\n    b860:\taa0003e4 \tmov\tx4, x0\n    b864:\tb9401e61 \tldr\tw1, [x19,#28]\n    b868:\taa1303e0 \tmov\tx0, x19\n    b86c:\tf90027a4 \tstr\tx4, [x29,#72]\n    b870:\t94000fd5 \tbl\tf7c4 <__lll_lock_wait>\n    b874:\tb9401260 \tldr\tw0, [x19,#16]\n    b878:\tf94027a4 \tldr\tx4, [x29,#72]\n    b87c:\t51000400 \tsub\tw0, w0, #0x1\n    b880:\tb9001260 \tstr\tw0, [x19,#16]\n    b884:\tb101b89f \tcmn\tx4, #0x6e\n    b888:\t54fff6e1 \tb.ne\tb764 <pthread_rwlock_timedrdlock+0x50>\n    b88c:\t52800dc4 \tmov\tw4, #0x6e                  \t// #110\n    b890:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    b894:\t885f7e60 \tldxr\tw0, [x19]\n    b898:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    b89c:\t35ffffc2 \tcbnz\tw2, b894 <pthread_rwlock_timedrdlock+0x180>\n    b8a0:\t7100041f \tcmp\tw0, #0x1\n    b8a4:\t540003ac \tb.gt\tb918 <pthread_rwlock_timedrdlock+0x204>\n    b8a8:\t2a0403e0 \tmov\tw0, w4\n    b8ac:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    b8b0:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    b8b4:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    b8b8:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    b8bc:\td65f03c0 \tret\n    b8c0:\taa0003e4 \tmov\tx4, x0\n    b8c4:\tb9401260 \tldr\tw0, [x19,#16]\n    b8c8:\tb101b89f \tcmn\tx4, #0x6e\n    b8cc:\t51000400 \tsub\tw0, w0, #0x1\n    b8d0:\tb9001260 \tstr\tw0, [x19,#16]\n    b8d4:\t54fff481 \tb.ne\tb764 <pthread_rwlock_timedrdlock+0x50>\n    b8d8:\t17ffffed \tb\tb88c <pthread_rwlock_timedrdlock+0x178>\n    b8dc:\tb9005fa2 \tstr\tw2, [x29,#92]\n    b8e0:\t17ffffe1 \tb\tb864 <pthread_rwlock_timedrdlock+0x150>\n    b8e4:\t52800464 \tmov\tw4, #0x23                  \t// #35\n    b8e8:\t17ffffea \tb\tb890 <pthread_rwlock_timedrdlock+0x17c>\n    b8ec:\t528002c4 \tmov\tw4, #0x16                  \t// #22\n    b8f0:\t17ffffe8 \tb\tb890 <pthread_rwlock_timedrdlock+0x17c>\n    b8f4:\tb9401e61 \tldr\tw1, [x19,#28]\n    b8f8:\taa1303e0 \tmov\tx0, x19\n    b8fc:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    b900:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    b904:\t4a180021 \teor\tw1, w1, w24\n    b908:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b90c:\t93407c21 \tsxtw\tx1, w1\n    b910:\td4000001 \tsvc\t#0x0\n    b914:\t17ffffae \tb\tb7cc <pthread_rwlock_timedrdlock+0xb8>\n    b918:\tb9401e63 \tldr\tw3, [x19,#28]\n    b91c:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    b920:\taa1303e0 \tmov\tx0, x19\n    b924:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    b928:\t4a010061 \teor\tw1, w3, w1\n    b92c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b930:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    b934:\t93407c21 \tsxtw\tx1, w1\n    b938:\td4000001 \tsvc\t#0x0\n    b93c:\t2a0403e0 \tmov\tw0, w4\n    b940:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    b944:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    b948:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    b94c:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    b950:\td65f03c0 \tret\n    b954:\tb9400660 \tldr\tw0, [x19,#4]\n    b958:\t52800164 \tmov\tw4, #0xb                   \t// #11\n    b95c:\t31000400 \tadds\tw0, w0, #0x1\n    b960:\t54fff980 \tb.eq\tb890 <pthread_rwlock_timedrdlock+0x17c>\n    b964:\tb9000660 \tstr\tw0, [x19,#4]\n    b968:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    b96c:\t17ffffc9 \tb\tb890 <pthread_rwlock_timedrdlock+0x17c>\n    b970:\tb9001261 \tstr\tw1, [x19,#16]\n    b974:\t52800164 \tmov\tw4, #0xb                   \t// #11\n    b978:\t17ffffc6 \tb\tb890 <pthread_rwlock_timedrdlock+0x17c>\n\n000000000000b97c <__pthread_rwlock_wrlock_slow>:\n    b97c:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    b980:\t910003fd \tmov\tx29, sp\n    b984:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    b988:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    b98c:\tf9001bf7 \tstr\tx23, [sp,#48]\n    b990:\td53bd054 \tmrs\tx20, tpidr_el0\n    b994:\taa0003f3 \tmov\tx19, x0\n    b998:\td11bc294 \tsub\tx20, x20, #0x6f0\n    b99c:\tb9401801 \tldr\tw1, [x0,#24]\n    b9a0:\t52800016 \tmov\tw22, #0x0                   \t// #0\n    b9a4:\t52801037 \tmov\tw23, #0x81                  \t// #129\n    b9a8:\t52800035 \tmov\tw21, #0x1                   \t// #1\n    b9ac:\tb940d280 \tldr\tw0, [x20,#208]\n    b9b0:\t6b01001f \tcmp\tw0, w1\n    b9b4:\t54000680 \tb.eq\tba84 <__pthread_rwlock_wrlock_slow+0x108>\n    b9b8:\tb9401661 \tldr\tw1, [x19,#20]\n    b9bc:\t11000420 \tadd\tw0, w1, #0x1\n    b9c0:\tb9001660 \tstr\tw0, [x19,#20]\n    b9c4:\t34000760 \tcbz\tw0, bab0 <__pthread_rwlock_wrlock_slow+0x134>\n    b9c8:\tb9400e64 \tldr\tw4, [x19,#12]\n    b9cc:\t885f7e60 \tldxr\tw0, [x19]\n    b9d0:\t8801fe76 \tstlxr\tw1, w22, [x19]\n    b9d4:\t35ffffc1 \tcbnz\tw1, b9cc <__pthread_rwlock_wrlock_slow+0x50>\n    b9d8:\t7100041f \tcmp\tw0, #0x1\n    b9dc:\t5400058c \tb.gt\tba8c <__pthread_rwlock_wrlock_slow+0x110>\n    b9e0:\tb9401e61 \tldr\tw1, [x19,#28]\n    b9e4:\t93407c82 \tsxtw\tx2, w4\n    b9e8:\t91003260 \tadd\tx0, x19, #0xc\n    b9ec:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    b9f0:\t52190021 \teor\tw1, w1, #0x80\n    b9f4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    b9f8:\t93407c21 \tsxtw\tx1, w1\n    b9fc:\td4000001 \tsvc\t#0x0\n    ba00:\tb9004fa3 \tstr\tw3, [x29,#76]\n    ba04:\t885ffe62 \tldaxr\tw2, [x19]\n    ba08:\t6b1f005f \tcmp\tw2, wzr\n    ba0c:\t54000061 \tb.ne\tba18 <__pthread_rwlock_wrlock_slow+0x9c>\n    ba10:\t88007e75 \tstxr\tw0, w21, [x19]\n    ba14:\t35ffff80 \tcbnz\tw0, ba04 <__pthread_rwlock_wrlock_slow+0x88>\n    ba18:\taa1303e0 \tmov\tx0, x19\n    ba1c:\t54000080 \tb.eq\tba2c <__pthread_rwlock_wrlock_slow+0xb0>\n    ba20:\tb9401e61 \tldr\tw1, [x19,#28]\n    ba24:\tb9004fa2 \tstr\tw2, [x29,#76]\n    ba28:\t94000f67 \tbl\tf7c4 <__lll_lock_wait>\n    ba2c:\tb9401660 \tldr\tw0, [x19,#20]\n    ba30:\tb9401a61 \tldr\tw1, [x19,#24]\n    ba34:\t51000400 \tsub\tw0, w0, #0x1\n    ba38:\tb9001660 \tstr\tw0, [x19,#20]\n    ba3c:\t35fffb81 \tcbnz\tw1, b9ac <__pthread_rwlock_wrlock_slow+0x30>\n    ba40:\tb9400660 \tldr\tw0, [x19,#4]\n    ba44:\t35fffb40 \tcbnz\tw0, b9ac <__pthread_rwlock_wrlock_slow+0x30>\n    ba48:\tb940d281 \tldr\tw1, [x20,#208]\n    ba4c:\t2a0003e4 \tmov\tw4, w0\n    ba50:\tb9001a61 \tstr\tw1, [x19,#24]\n    ba54:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    ba58:\t885f7e60 \tldxr\tw0, [x19]\n    ba5c:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    ba60:\t35ffffc2 \tcbnz\tw2, ba58 <__pthread_rwlock_wrlock_slow+0xdc>\n    ba64:\t7100041f \tcmp\tw0, #0x1\n    ba68:\t540002ac \tb.gt\tbabc <__pthread_rwlock_wrlock_slow+0x140>\n    ba6c:\t2a0403e0 \tmov\tw0, w4\n    ba70:\tf9401bf7 \tldr\tx23, [sp,#48]\n    ba74:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    ba78:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    ba7c:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    ba80:\td65f03c0 \tret\n    ba84:\t52800464 \tmov\tw4, #0x23                  \t// #35\n    ba88:\t17fffff3 \tb\tba54 <__pthread_rwlock_wrlock_slow+0xd8>\n    ba8c:\tb9401e61 \tldr\tw1, [x19,#28]\n    ba90:\taa1303e0 \tmov\tx0, x19\n    ba94:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    ba98:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    ba9c:\t4a170021 \teor\tw1, w1, w23\n    baa0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    baa4:\t93407c21 \tsxtw\tx1, w1\n    baa8:\td4000001 \tsvc\t#0x0\n    baac:\t17ffffcd \tb\tb9e0 <__pthread_rwlock_wrlock_slow+0x64>\n    bab0:\tb9001661 \tstr\tw1, [x19,#20]\n    bab4:\t52800164 \tmov\tw4, #0xb                   \t// #11\n    bab8:\t17ffffe7 \tb\tba54 <__pthread_rwlock_wrlock_slow+0xd8>\n    babc:\tb9401e63 \tldr\tw3, [x19,#28]\n    bac0:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    bac4:\taa1303e0 \tmov\tx0, x19\n    bac8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    bacc:\t4a010061 \teor\tw1, w3, w1\n    bad0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    bad4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    bad8:\t93407c21 \tsxtw\tx1, w1\n    badc:\td4000001 \tsvc\t#0x0\n    bae0:\t2a0403e0 \tmov\tw0, w4\n    bae4:\tf9401bf7 \tldr\tx23, [sp,#48]\n    bae8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    baec:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    baf0:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    baf4:\td65f03c0 \tret\n\n000000000000baf8 <__pthread_rwlock_wrlock>:\n    baf8:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    bafc:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    bb00:\t910003fd \tmov\tx29, sp\n    bb04:\tf9000bf3 \tstr\tx19, [sp,#16]\n    bb08:\taa0003f3 \tmov\tx19, x0\n    bb0c:\tb9002fbf \tstr\twzr, [x29,#44]\n    bb10:\t885ffe62 \tldaxr\tw2, [x19]\n    bb14:\t6b1f005f \tcmp\tw2, wzr\n    bb18:\t54000061 \tb.ne\tbb24 <__pthread_rwlock_wrlock+0x2c>\n    bb1c:\t88037e61 \tstxr\tw3, w1, [x19]\n    bb20:\t35ffff83 \tcbnz\tw3, bb10 <__pthread_rwlock_wrlock+0x18>\n    bb24:\t54000261 \tb.ne\tbb70 <__pthread_rwlock_wrlock+0x78>\n    bb28:\tb9401a61 \tldr\tw1, [x19,#24]\n    bb2c:\tb9400660 \tldr\tw0, [x19,#4]\n    bb30:\t2a000020 \torr\tw0, w1, w0\n    bb34:\t350002c0 \tcbnz\tw0, bb8c <__pthread_rwlock_wrlock+0x94>\n    bb38:\td53bd041 \tmrs\tx1, tpidr_el0\n    bb3c:\td11bc021 \tsub\tx1, x1, #0x6f0\n    bb40:\tb940d021 \tldr\tw1, [x1,#208]\n    bb44:\tb9001a61 \tstr\tw1, [x19,#24]\n    bb48:\t885f7e61 \tldxr\tw1, [x19]\n    bb4c:\t8802fe60 \tstlxr\tw2, w0, [x19]\n    bb50:\t35ffffc2 \tcbnz\tw2, bb48 <__pthread_rwlock_wrlock+0x50>\n    bb54:\t7100043f \tcmp\tw1, #0x1\n    bb58:\t2a0003e4 \tmov\tw4, w0\n    bb5c:\t5400026c \tb.gt\tbba8 <__pthread_rwlock_wrlock+0xb0>\n    bb60:\t2a0403e0 \tmov\tw0, w4\n    bb64:\tf9400bf3 \tldr\tx19, [sp,#16]\n    bb68:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    bb6c:\td65f03c0 \tret\n    bb70:\tb9401e61 \tldr\tw1, [x19,#28]\n    bb74:\tb9002fa2 \tstr\tw2, [x29,#44]\n    bb78:\t94000f13 \tbl\tf7c4 <__lll_lock_wait>\n    bb7c:\tb9401a61 \tldr\tw1, [x19,#24]\n    bb80:\tb9400660 \tldr\tw0, [x19,#4]\n    bb84:\t2a000020 \torr\tw0, w1, w0\n    bb88:\t34fffd80 \tcbz\tw0, bb38 <__pthread_rwlock_wrlock+0x40>\n    bb8c:\taa1303e0 \tmov\tx0, x19\n    bb90:\t97ffff7b \tbl\tb97c <__pthread_rwlock_wrlock_slow>\n    bb94:\t2a0003e4 \tmov\tw4, w0\n    bb98:\t2a0403e0 \tmov\tw0, w4\n    bb9c:\tf9400bf3 \tldr\tx19, [sp,#16]\n    bba0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    bba4:\td65f03c0 \tret\n    bba8:\tb9401e63 \tldr\tw3, [x19,#28]\n    bbac:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    bbb0:\taa1303e0 \tmov\tx0, x19\n    bbb4:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    bbb8:\t4a010061 \teor\tw1, w3, w1\n    bbbc:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    bbc0:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    bbc4:\t93407c21 \tsxtw\tx1, w1\n    bbc8:\td4000001 \tsvc\t#0x0\n    bbcc:\t17ffffe5 \tb\tbb60 <__pthread_rwlock_wrlock+0x68>\n\n000000000000bbd0 <pthread_rwlock_timedwrlock>:\n    bbd0:\ta9b97bfd \tstp\tx29, x30, [sp,#-112]!\n    bbd4:\t910003fd \tmov\tx29, sp\n    bbd8:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    bbdc:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    bbe0:\taa0103f4 \tmov\tx20, x1\n    bbe4:\tf90023f9 \tstr\tx25, [sp,#64]\n    bbe8:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    bbec:\tb9006fbf \tstr\twzr, [x29,#108]\n    bbf0:\taa0003f3 \tmov\tx19, x0\n    bbf4:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    bbf8:\t885ffe62 \tldaxr\tw2, [x19]\n    bbfc:\t6b1f005f \tcmp\tw2, wzr\n    bc00:\t54000061 \tb.ne\tbc0c <pthread_rwlock_timedwrlock+0x3c>\n    bc04:\t88037e61 \tstxr\tw3, w1, [x19]\n    bc08:\t35ffff83 \tcbnz\tw3, bbf8 <pthread_rwlock_timedwrlock+0x28>\n    bc0c:\t540006e1 \tb.ne\tbce8 <pthread_rwlock_timedwrlock+0x118>\n    bc10:\td53bd055 \tmrs\tx21, tpidr_el0\n    bc14:\t52800018 \tmov\tw24, #0x0                   \t// #0\n    bc18:\td11bc2b5 \tsub\tx21, x21, #0x6f0\n    bc1c:\t52801039 \tmov\tw25, #0x81                  \t// #129\n    bc20:\t52803137 \tmov\tw23, #0x189                 \t// #393\n    bc24:\t52800036 \tmov\tw22, #0x1                   \t// #1\n    bc28:\tb9401a62 \tldr\tw2, [x19,#24]\n    bc2c:\t35000062 \tcbnz\tw2, bc38 <pthread_rwlock_timedwrlock+0x68>\n    bc30:\tb9400660 \tldr\tw0, [x19,#4]\n    bc34:\t34000f40 \tcbz\tw0, be1c <pthread_rwlock_timedwrlock+0x24c>\n    bc38:\tb940d2a0 \tldr\tw0, [x21,#208]\n    bc3c:\t6b00005f \tcmp\tw2, w0\n    bc40:\t54000ae0 \tb.eq\tbd9c <pthread_rwlock_timedwrlock+0x1cc>\n    bc44:\tf9400681 \tldr\tx1, [x20,#8]\n    bc48:\td2993fe0 \tmov\tx0, #0xc9ff                \t// #51711\n    bc4c:\tf2a77340 \tmovk\tx0, #0x3b9a, lsl #16\n    bc50:\teb00003f \tcmp\tx1, x0\n    bc54:\t54000a88 \tb.hi\tbda4 <pthread_rwlock_timedwrlock+0x1d4>\n    bc58:\tf9400280 \tldr\tx0, [x20]\n    bc5c:\tb7f80720 \ttbnz\tx0, #63, bd40 <pthread_rwlock_timedwrlock+0x170>\n    bc60:\tb9401661 \tldr\tw1, [x19,#20]\n    bc64:\t11000420 \tadd\tw0, w1, #0x1\n    bc68:\tb9001660 \tstr\tw0, [x19,#20]\n    bc6c:\t34000d20 \tcbz\tw0, be10 <pthread_rwlock_timedwrlock+0x240>\n    bc70:\tb9400e65 \tldr\tw5, [x19,#12]\n    bc74:\t885f7e60 \tldxr\tw0, [x19]\n    bc78:\t8801fe78 \tstlxr\tw1, w24, [x19]\n    bc7c:\t35ffffc1 \tcbnz\tw1, bc74 <pthread_rwlock_timedwrlock+0xa4>\n    bc80:\t7100041f \tcmp\tw0, #0x1\n    bc84:\t5400094c \tb.gt\tbdac <pthread_rwlock_timedwrlock+0x1dc>\n    bc88:\tb9401e64 \tldr\tw4, [x19,#28]\n    bc8c:\t93407ca2 \tsxtw\tx2, w5\n    bc90:\t91003260 \tadd\tx0, x19, #0xc\n    bc94:\taa1403e3 \tmov\tx3, x20\n    bc98:\t4a170081 \teor\tw1, w4, w23\n    bc9c:\tb2407fe5 \tmov\tx5, #0xffffffff            \t// #4294967295\n    bca0:\td2800004 \tmov\tx4, #0x0                   \t// #0\n    bca4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    bca8:\t93407c21 \tsxtw\tx1, w1\n    bcac:\td4000001 \tsvc\t#0x0\n    bcb0:\tb9006fa4 \tstr\tw4, [x29,#108]\n    bcb4:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    bcb8:\t54000208 \tb.hi\tbcf8 <pthread_rwlock_timedwrlock+0x128>\n    bcbc:\t2a0403e0 \tmov\tw0, w4\n    bcc0:\t885ffe61 \tldaxr\tw1, [x19]\n    bcc4:\t6b00003f \tcmp\tw1, w0\n    bcc8:\t54000061 \tb.ne\tbcd4 <pthread_rwlock_timedwrlock+0x104>\n    bccc:\t88027e76 \tstxr\tw2, w22, [x19]\n    bcd0:\t35ffff82 \tcbnz\tw2, bcc0 <pthread_rwlock_timedwrlock+0xf0>\n    bcd4:\t54000601 \tb.ne\tbd94 <pthread_rwlock_timedwrlock+0x1c4>\n    bcd8:\tb9401660 \tldr\tw0, [x19,#20]\n    bcdc:\t51000400 \tsub\tw0, w0, #0x1\n    bce0:\tb9001660 \tstr\tw0, [x19,#20]\n    bce4:\t17ffffd1 \tb\tbc28 <pthread_rwlock_timedwrlock+0x58>\n    bce8:\tb9401e61 \tldr\tw1, [x19,#28]\n    bcec:\tb9006fa2 \tstr\tw2, [x29,#108]\n    bcf0:\t94000eb5 \tbl\tf7c4 <__lll_lock_wait>\n    bcf4:\t17ffffc7 \tb\tbc10 <pthread_rwlock_timedwrlock+0x40>\n    bcf8:\t885ffe61 \tldaxr\tw1, [x19]\n    bcfc:\t6b1f003f \tcmp\tw1, wzr\n    bd00:\t54000061 \tb.ne\tbd0c <pthread_rwlock_timedwrlock+0x13c>\n    bd04:\t88027e76 \tstxr\tw2, w22, [x19]\n    bd08:\t35ffff82 \tcbnz\tw2, bcf8 <pthread_rwlock_timedwrlock+0x128>\n    bd0c:\t54000360 \tb.eq\tbd78 <pthread_rwlock_timedwrlock+0x1a8>\n    bd10:\tb9006fa1 \tstr\tw1, [x29,#108]\n    bd14:\taa0003e4 \tmov\tx4, x0\n    bd18:\tb9401e61 \tldr\tw1, [x19,#28]\n    bd1c:\taa1303e0 \tmov\tx0, x19\n    bd20:\tf9002fa4 \tstr\tx4, [x29,#88]\n    bd24:\t94000ea8 \tbl\tf7c4 <__lll_lock_wait>\n    bd28:\tb9401660 \tldr\tw0, [x19,#20]\n    bd2c:\tf9402fa4 \tldr\tx4, [x29,#88]\n    bd30:\t51000400 \tsub\tw0, w0, #0x1\n    bd34:\tb9001660 \tstr\tw0, [x19,#20]\n    bd38:\tb101b89f \tcmn\tx4, #0x6e\n    bd3c:\t54fff761 \tb.ne\tbc28 <pthread_rwlock_timedwrlock+0x58>\n    bd40:\t52800dc4 \tmov\tw4, #0x6e                  \t// #110\n    bd44:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    bd48:\t885f7e60 \tldxr\tw0, [x19]\n    bd4c:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    bd50:\t35ffffc2 \tcbnz\tw2, bd48 <pthread_rwlock_timedwrlock+0x178>\n    bd54:\t7100041f \tcmp\tw0, #0x1\n    bd58:\t540003cc \tb.gt\tbdd0 <pthread_rwlock_timedwrlock+0x200>\n    bd5c:\t2a0403e0 \tmov\tw0, w4\n    bd60:\tf94023f9 \tldr\tx25, [sp,#64]\n    bd64:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    bd68:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    bd6c:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    bd70:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    bd74:\td65f03c0 \tret\n    bd78:\taa0003e4 \tmov\tx4, x0\n    bd7c:\tb9401660 \tldr\tw0, [x19,#20]\n    bd80:\tb101b89f \tcmn\tx4, #0x6e\n    bd84:\t51000400 \tsub\tw0, w0, #0x1\n    bd88:\tb9001660 \tstr\tw0, [x19,#20]\n    bd8c:\t54fff4e1 \tb.ne\tbc28 <pthread_rwlock_timedwrlock+0x58>\n    bd90:\t17ffffec \tb\tbd40 <pthread_rwlock_timedwrlock+0x170>\n    bd94:\tb9006fa1 \tstr\tw1, [x29,#108]\n    bd98:\t17ffffe0 \tb\tbd18 <pthread_rwlock_timedwrlock+0x148>\n    bd9c:\t52800464 \tmov\tw4, #0x23                  \t// #35\n    bda0:\t17ffffe9 \tb\tbd44 <pthread_rwlock_timedwrlock+0x174>\n    bda4:\t528002c4 \tmov\tw4, #0x16                  \t// #22\n    bda8:\t17ffffe7 \tb\tbd44 <pthread_rwlock_timedwrlock+0x174>\n    bdac:\tb9401e61 \tldr\tw1, [x19,#28]\n    bdb0:\taa1303e0 \tmov\tx0, x19\n    bdb4:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    bdb8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    bdbc:\t4a190021 \teor\tw1, w1, w25\n    bdc0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    bdc4:\t93407c21 \tsxtw\tx1, w1\n    bdc8:\td4000001 \tsvc\t#0x0\n    bdcc:\t17ffffaf \tb\tbc88 <pthread_rwlock_timedwrlock+0xb8>\n    bdd0:\tb9401e63 \tldr\tw3, [x19,#28]\n    bdd4:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    bdd8:\taa1303e0 \tmov\tx0, x19\n    bddc:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    bde0:\t4a010061 \teor\tw1, w3, w1\n    bde4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    bde8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    bdec:\t93407c21 \tsxtw\tx1, w1\n    bdf0:\td4000001 \tsvc\t#0x0\n    bdf4:\t2a0403e0 \tmov\tw0, w4\n    bdf8:\tf94023f9 \tldr\tx25, [sp,#64]\n    bdfc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    be00:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    be04:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    be08:\ta8c77bfd \tldp\tx29, x30, [sp],#112\n    be0c:\td65f03c0 \tret\n    be10:\tb9001661 \tstr\tw1, [x19,#20]\n    be14:\t52800164 \tmov\tw4, #0xb                   \t// #11\n    be18:\t17ffffcb \tb\tbd44 <pthread_rwlock_timedwrlock+0x174>\n    be1c:\tb940d2a1 \tldr\tw1, [x21,#208]\n    be20:\t2a0003e4 \tmov\tw4, w0\n    be24:\tb9001a61 \tstr\tw1, [x19,#24]\n    be28:\t17ffffc7 \tb\tbd44 <pthread_rwlock_timedwrlock+0x174>\n\n000000000000be2c <__pthread_rwlock_tryrdlock>:\n    be2c:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    be30:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    be34:\t910003fd \tmov\tx29, sp\n    be38:\tf9000bf3 \tstr\tx19, [sp,#16]\n    be3c:\taa0003f3 \tmov\tx19, x0\n    be40:\tb9002fbf \tstr\twzr, [x29,#44]\n    be44:\t885ffe62 \tldaxr\tw2, [x19]\n    be48:\t6b1f005f \tcmp\tw2, wzr\n    be4c:\t54000061 \tb.ne\tbe58 <__pthread_rwlock_tryrdlock+0x2c>\n    be50:\t88037e61 \tstxr\tw3, w1, [x19]\n    be54:\t35ffff83 \tcbnz\tw3, be44 <__pthread_rwlock_tryrdlock+0x18>\n    be58:\t540001c1 \tb.ne\tbe90 <__pthread_rwlock_tryrdlock+0x64>\n    be5c:\tb9401a60 \tldr\tw0, [x19,#24]\n    be60:\t52800204 \tmov\tw4, #0x10                  \t// #16\n    be64:\t34000220 \tcbz\tw0, bea8 <__pthread_rwlock_tryrdlock+0x7c>\n    be68:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    be6c:\t885f7e60 \tldxr\tw0, [x19]\n    be70:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    be74:\t35ffffc2 \tcbnz\tw2, be6c <__pthread_rwlock_tryrdlock+0x40>\n    be78:\t7100041f \tcmp\tw0, #0x1\n    be7c:\t5400030c \tb.gt\tbedc <__pthread_rwlock_tryrdlock+0xb0>\n    be80:\t2a0403e0 \tmov\tw0, w4\n    be84:\tf9400bf3 \tldr\tx19, [sp,#16]\n    be88:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    be8c:\td65f03c0 \tret\n    be90:\tb9401e61 \tldr\tw1, [x19,#28]\n    be94:\tb9002fa2 \tstr\tw2, [x29,#44]\n    be98:\t94000e4b \tbl\tf7c4 <__lll_lock_wait>\n    be9c:\tb9401a60 \tldr\tw0, [x19,#24]\n    bea0:\t52800204 \tmov\tw4, #0x10                  \t// #16\n    bea4:\t35fffe20 \tcbnz\tw0, be68 <__pthread_rwlock_tryrdlock+0x3c>\n    bea8:\tb9401660 \tldr\tw0, [x19,#20]\n    beac:\t35000120 \tcbnz\tw0, bed0 <__pthread_rwlock_tryrdlock+0xa4>\n    beb0:\tb9400661 \tldr\tw1, [x19,#4]\n    beb4:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    beb8:\t11000420 \tadd\tw0, w1, #0x1\n    bebc:\tb9000660 \tstr\tw0, [x19,#4]\n    bec0:\t35fffd40 \tcbnz\tw0, be68 <__pthread_rwlock_tryrdlock+0x3c>\n    bec4:\tb9000661 \tstr\tw1, [x19,#4]\n    bec8:\t52800164 \tmov\tw4, #0xb                   \t// #11\n    becc:\t17ffffe7 \tb\tbe68 <__pthread_rwlock_tryrdlock+0x3c>\n    bed0:\tb9403260 \tldr\tw0, [x19,#48]\n    bed4:\t35fffca0 \tcbnz\tw0, be68 <__pthread_rwlock_tryrdlock+0x3c>\n    bed8:\t17fffff6 \tb\tbeb0 <__pthread_rwlock_tryrdlock+0x84>\n    bedc:\tb9401e63 \tldr\tw3, [x19,#28]\n    bee0:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    bee4:\taa1303e0 \tmov\tx0, x19\n    bee8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    beec:\t4a010061 \teor\tw1, w3, w1\n    bef0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    bef4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    bef8:\t93407c21 \tsxtw\tx1, w1\n    befc:\td4000001 \tsvc\t#0x0\n    bf00:\t2a0403e0 \tmov\tw0, w4\n    bf04:\tf9400bf3 \tldr\tx19, [sp,#16]\n    bf08:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    bf0c:\td65f03c0 \tret\n\n000000000000bf10 <__pthread_rwlock_trywrlock>:\n    bf10:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    bf14:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    bf18:\t910003fd \tmov\tx29, sp\n    bf1c:\tf9000bf3 \tstr\tx19, [sp,#16]\n    bf20:\taa0003f3 \tmov\tx19, x0\n    bf24:\tb9002fbf \tstr\twzr, [x29,#44]\n    bf28:\t885ffe62 \tldaxr\tw2, [x19]\n    bf2c:\t6b1f005f \tcmp\tw2, wzr\n    bf30:\t54000061 \tb.ne\tbf3c <__pthread_rwlock_trywrlock+0x2c>\n    bf34:\t88037e61 \tstxr\tw3, w1, [x19]\n    bf38:\t35ffff83 \tcbnz\tw3, bf28 <__pthread_rwlock_trywrlock+0x18>\n    bf3c:\t540001c1 \tb.ne\tbf74 <__pthread_rwlock_trywrlock+0x64>\n    bf40:\tb9401a60 \tldr\tw0, [x19,#24]\n    bf44:\t52800204 \tmov\tw4, #0x10                  \t// #16\n    bf48:\t34000220 \tcbz\tw0, bf8c <__pthread_rwlock_trywrlock+0x7c>\n    bf4c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    bf50:\t885f7e60 \tldxr\tw0, [x19]\n    bf54:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    bf58:\t35ffffc2 \tcbnz\tw2, bf50 <__pthread_rwlock_trywrlock+0x40>\n    bf5c:\t7100041f \tcmp\tw0, #0x1\n    bf60:\t5400026c \tb.gt\tbfac <__pthread_rwlock_trywrlock+0x9c>\n    bf64:\t2a0403e0 \tmov\tw0, w4\n    bf68:\tf9400bf3 \tldr\tx19, [sp,#16]\n    bf6c:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    bf70:\td65f03c0 \tret\n    bf74:\tb9401e61 \tldr\tw1, [x19,#28]\n    bf78:\tb9002fa2 \tstr\tw2, [x29,#44]\n    bf7c:\t94000e12 \tbl\tf7c4 <__lll_lock_wait>\n    bf80:\tb9401a60 \tldr\tw0, [x19,#24]\n    bf84:\t52800204 \tmov\tw4, #0x10                  \t// #16\n    bf88:\t35fffe20 \tcbnz\tw0, bf4c <__pthread_rwlock_trywrlock+0x3c>\n    bf8c:\tb9400660 \tldr\tw0, [x19,#4]\n    bf90:\t35fffde0 \tcbnz\tw0, bf4c <__pthread_rwlock_trywrlock+0x3c>\n    bf94:\t2a0003e4 \tmov\tw4, w0\n    bf98:\td53bd040 \tmrs\tx0, tpidr_el0\n    bf9c:\td11bc000 \tsub\tx0, x0, #0x6f0\n    bfa0:\tb940d000 \tldr\tw0, [x0,#208]\n    bfa4:\tb9001a60 \tstr\tw0, [x19,#24]\n    bfa8:\t17ffffe9 \tb\tbf4c <__pthread_rwlock_trywrlock+0x3c>\n    bfac:\tb9401e63 \tldr\tw3, [x19,#28]\n    bfb0:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    bfb4:\taa1303e0 \tmov\tx0, x19\n    bfb8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    bfbc:\t4a010061 \teor\tw1, w3, w1\n    bfc0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    bfc4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    bfc8:\t93407c21 \tsxtw\tx1, w1\n    bfcc:\td4000001 \tsvc\t#0x0\n    bfd0:\t2a0403e0 \tmov\tw0, w4\n    bfd4:\tf9400bf3 \tldr\tx19, [sp,#16]\n    bfd8:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    bfdc:\td65f03c0 \tret\n\n000000000000bfe0 <__pthread_rwlock_unlock>:\n    bfe0:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    bfe4:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    bfe8:\t910003fd \tmov\tx29, sp\n    bfec:\tf9000bf3 \tstr\tx19, [sp,#16]\n    bff0:\taa0003f3 \tmov\tx19, x0\n    bff4:\tb9002fbf \tstr\twzr, [x29,#44]\n    bff8:\t885ffe62 \tldaxr\tw2, [x19]\n    bffc:\t6b1f005f \tcmp\tw2, wzr\n    c000:\t54000061 \tb.ne\tc00c <__pthread_rwlock_unlock+0x2c>\n    c004:\t88037e61 \tstxr\tw3, w1, [x19]\n    c008:\t35ffff83 \tcbnz\tw3, bff8 <__pthread_rwlock_unlock+0x18>\n    c00c:\t54000281 \tb.ne\tc05c <__pthread_rwlock_unlock+0x7c>\n    c010:\tb9401a60 \tldr\tw0, [x19,#24]\n    c014:\t340002e0 \tcbz\tw0, c070 <__pthread_rwlock_unlock+0x90>\n    c018:\tb9400660 \tldr\tw0, [x19,#4]\n    c01c:\tb9001a7f \tstr\twzr, [x19,#24]\n    c020:\t350000a0 \tcbnz\tw0, c034 <__pthread_rwlock_unlock+0x54>\n    c024:\tb9401661 \tldr\tw1, [x19,#20]\n    c028:\t350002c1 \tcbnz\tw1, c080 <__pthread_rwlock_unlock+0xa0>\n    c02c:\tb9401261 \tldr\tw1, [x19,#16]\n    c030:\t35000521 \tcbnz\tw1, c0d4 <__pthread_rwlock_unlock+0xf4>\n    c034:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    c038:\t885f7e60 \tldxr\tw0, [x19]\n    c03c:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    c040:\t35ffffc2 \tcbnz\tw2, c038 <__pthread_rwlock_unlock+0x58>\n    c044:\t7100041f \tcmp\tw0, #0x1\n    c048:\t540005ec \tb.gt\tc104 <__pthread_rwlock_unlock+0x124>\n    c04c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c050:\tf9400bf3 \tldr\tx19, [sp,#16]\n    c054:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    c058:\td65f03c0 \tret\n    c05c:\tb9401e61 \tldr\tw1, [x19,#28]\n    c060:\tb9002fa2 \tstr\tw2, [x29,#44]\n    c064:\t94000dd8 \tbl\tf7c4 <__lll_lock_wait>\n    c068:\tb9401a60 \tldr\tw0, [x19,#24]\n    c06c:\t35fffd60 \tcbnz\tw0, c018 <__pthread_rwlock_unlock+0x38>\n    c070:\tb9400660 \tldr\tw0, [x19,#4]\n    c074:\t51000400 \tsub\tw0, w0, #0x1\n    c078:\tb9000660 \tstr\tw0, [x19,#4]\n    c07c:\t17ffffe9 \tb\tc020 <__pthread_rwlock_unlock+0x40>\n    c080:\tb9400e61 \tldr\tw1, [x19,#12]\n    c084:\t11000421 \tadd\tw1, w1, #0x1\n    c088:\tb9000e61 \tstr\tw1, [x19,#12]\n    c08c:\t885f7e61 \tldxr\tw1, [x19]\n    c090:\t8802fe60 \tstlxr\tw2, w0, [x19]\n    c094:\t35ffffc2 \tcbnz\tw2, c08c <__pthread_rwlock_unlock+0xac>\n    c098:\t7100043f \tcmp\tw1, #0x1\n    c09c:\t540003ac \tb.gt\tc110 <__pthread_rwlock_unlock+0x130>\n    c0a0:\tb9401e63 \tldr\tw3, [x19,#28]\n    c0a4:\t91003260 \tadd\tx0, x19, #0xc\n    c0a8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c0ac:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    c0b0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c0b4:\t4a010061 \teor\tw1, w3, w1\n    c0b8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c0bc:\t93407c21 \tsxtw\tx1, w1\n    c0c0:\td4000001 \tsvc\t#0x0\n    c0c4:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c0c8:\tf9400bf3 \tldr\tx19, [sp,#16]\n    c0cc:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    c0d0:\td65f03c0 \tret\n    c0d4:\tb9400a61 \tldr\tw1, [x19,#8]\n    c0d8:\t11000421 \tadd\tw1, w1, #0x1\n    c0dc:\tb9000a61 \tstr\tw1, [x19,#8]\n    c0e0:\t885f7e61 \tldxr\tw1, [x19]\n    c0e4:\t8802fe60 \tstlxr\tw2, w0, [x19]\n    c0e8:\t35ffffc2 \tcbnz\tw2, c0e0 <__pthread_rwlock_unlock+0x100>\n    c0ec:\t7100043f \tcmp\tw1, #0x1\n    c0f0:\t5400024c \tb.gt\tc138 <__pthread_rwlock_unlock+0x158>\n    c0f4:\tb9401e63 \tldr\tw3, [x19,#28]\n    c0f8:\t91002260 \tadd\tx0, x19, #0x8\n    c0fc:\tb2407be2 \tmov\tx2, #0x7fffffff            \t// #2147483647\n    c100:\t17ffffeb \tb\tc0ac <__pthread_rwlock_unlock+0xcc>\n    c104:\tb9401e63 \tldr\tw3, [x19,#28]\n    c108:\taa1303e0 \tmov\tx0, x19\n    c10c:\t17ffffe7 \tb\tc0a8 <__pthread_rwlock_unlock+0xc8>\n    c110:\tb9401e63 \tldr\tw3, [x19,#28]\n    c114:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    c118:\taa1303e0 \tmov\tx0, x19\n    c11c:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c120:\t4a010061 \teor\tw1, w3, w1\n    c124:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c128:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c12c:\t93407c21 \tsxtw\tx1, w1\n    c130:\td4000001 \tsvc\t#0x0\n    c134:\t17ffffdb \tb\tc0a0 <__pthread_rwlock_unlock+0xc0>\n    c138:\tb9401e63 \tldr\tw3, [x19,#28]\n    c13c:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    c140:\taa1303e0 \tmov\tx0, x19\n    c144:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c148:\t4a010061 \teor\tw1, w3, w1\n    c14c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c150:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c154:\t93407c21 \tsxtw\tx1, w1\n    c158:\td4000001 \tsvc\t#0x0\n    c15c:\t17ffffe6 \tb\tc0f4 <__pthread_rwlock_unlock+0x114>\n\n000000000000c160 <pthread_rwlockattr_init>:\n    c160:\taa0003e1 \tmov\tx1, x0\n    c164:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c168:\tb9000020 \tstr\tw0, [x1]\n    c16c:\tb9000420 \tstr\tw0, [x1,#4]\n    c170:\td65f03c0 \tret\n\n000000000000c174 <pthread_rwlockattr_destroy>:\n    c174:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c178:\td65f03c0 \tret\n\n000000000000c17c <pthread_rwlockattr_getpshared>:\n    c17c:\tb9400402 \tldr\tw2, [x0,#4]\n    c180:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c184:\tb9000022 \tstr\tw2, [x1]\n    c188:\td65f03c0 \tret\n\n000000000000c18c <pthread_rwlockattr_setpshared>:\n    c18c:\t7100043f \tcmp\tw1, #0x1\n    c190:\t54000088 \tb.hi\tc1a0 <pthread_rwlockattr_setpshared+0x14>\n    c194:\tb9000401 \tstr\tw1, [x0,#4]\n    c198:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c19c:\td65f03c0 \tret\n    c1a0:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    c1a4:\td65f03c0 \tret\n\n000000000000c1a8 <pthread_rwlockattr_getkind_np>:\n    c1a8:\tb9400002 \tldr\tw2, [x0]\n    c1ac:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c1b0:\tb9000022 \tstr\tw2, [x1]\n    c1b4:\td65f03c0 \tret\n\n000000000000c1b8 <pthread_rwlockattr_setkind_np>:\n    c1b8:\t7100083f \tcmp\tw1, #0x2\n    c1bc:\t54000088 \tb.hi\tc1cc <pthread_rwlockattr_setkind_np+0x14>\n    c1c0:\tb9000001 \tstr\tw1, [x0]\n    c1c4:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c1c8:\td65f03c0 \tret\n    c1cc:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    c1d0:\td65f03c0 \tret\n\n000000000000c1d4 <pthread_cond_init@@GLIBC_2.17>:\n    c1d4:\tb900001f \tstr\twzr, [x0]\n    c1d8:\tb900041f \tstr\twzr, [x0,#4]\n    c1dc:\tb40001e1 \tcbz\tx1, c218 <pthread_cond_init@@GLIBC_2.17+0x44>\n    c1e0:\tb9400022 \tldr\tw2, [x1]\n    c1e4:\tf900041f \tstr\txzr, [x0,#8]\n    c1e8:\tf900081f \tstr\txzr, [x0,#16]\n    c1ec:\td3410442 \tubfx\tx2, x2, #1, #1\n    c1f0:\tf9000c1f \tstr\txzr, [x0,#24]\n    c1f4:\tb9002802 \tstr\tw2, [x0,#40]\n    c1f8:\tb9400021 \tldr\tw1, [x1]\n    c1fc:\tb9002c1f \tstr\twzr, [x0,#44]\n    c200:\t12000021 \tand\tw1, w1, #0x1\n    c204:\t6b1f003f \tcmp\tw1, wzr\n    c208:\tda9f03e2 \tcsetm\tx2, ne\n    c20c:\tf9001002 \tstr\tx2, [x0,#32]\n    c210:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c214:\td65f03c0 \tret\n    c218:\tb9002801 \tstr\tw1, [x0,#40]\n    c21c:\taa0103e2 \tmov\tx2, x1\n    c220:\tf9000401 \tstr\tx1, [x0,#8]\n    c224:\tf9000801 \tstr\tx1, [x0,#16]\n    c228:\tf9000c01 \tstr\tx1, [x0,#24]\n    c22c:\tf9001002 \tstr\tx2, [x0,#32]\n    c230:\tb9002c1f \tstr\twzr, [x0,#44]\n    c234:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    c238:\td65f03c0 \tret\n\n000000000000c23c <pthread_cond_destroy@@GLIBC_2.17>:\n    c23c:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n    c240:\t910003fd \tmov\tx29, sp\n    c244:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    c248:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    c24c:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    c250:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    c254:\taa0003f3 \tmov\tx19, x0\n    c258:\tb9005fbf \tstr\twzr, [x29,#92]\n    c25c:\tf9401000 \tldr\tx0, [x0,#32]\n    c260:\tb100041f \tcmn\tx0, #0x1\n    c264:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    c268:\t54000d00 \tb.eq\tc408 <pthread_cond_destroy@@GLIBC_2.17+0x1cc>\n    c26c:\t885ffe61 \tldaxr\tw1, [x19]\n    c270:\t6b1f003f \tcmp\tw1, wzr\n    c274:\t54000061 \tb.ne\tc280 <pthread_cond_destroy@@GLIBC_2.17+0x44>\n    c278:\t88027e60 \tstxr\tw2, w0, [x19]\n    c27c:\t35ffff82 \tcbnz\tw2, c26c <pthread_cond_destroy@@GLIBC_2.17+0x30>\n    c280:\t1a9f17e0 \tcset\tw0, eq\n    c284:\t52800014 \tmov\tw20, #0x0                   \t// #0\n    c288:\t34000700 \tcbz\tw0, c368 <pthread_cond_destroy@@GLIBC_2.17+0x12c>\n    c28c:\tf9400661 \tldr\tx1, [x19,#8]\n    c290:\tf9400a60 \tldr\tx0, [x19,#16]\n    c294:\teb00003f \tcmp\tx1, x0\n    c298:\t54000988 \tb.hi\tc3c8 <pthread_cond_destroy@@GLIBC_2.17+0x18c>\n    c29c:\tb9402a64 \tldr\tw4, [x19,#40]\n    c2a0:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    c2a4:\tf9000660 \tstr\tx0, [x19,#8]\n    c2a8:\t7100049f \tcmp\tw4, #0x1\n    c2ac:\t540006a9 \tb.ls\tc380 <pthread_cond_destroy@@GLIBC_2.17+0x144>\n    c2b0:\tf9401260 \tldr\tx0, [x19,#32]\n    c2b4:\td1000401 \tsub\tx1, x0, #0x1\n    c2b8:\tb1000c3f \tcmn\tx1, #0x3\n    c2bc:\t54000729 \tb.ls\tc3a0 <pthread_cond_destroy@@GLIBC_2.17+0x164>\n    c2c0:\t5280103a \tmov\tw26, #0x81                  \t// #129\n    c2c4:\t52190295 \teor\tw21, w20, #0x80\n    c2c8:\t4a1a029a \teor\tw26, w20, w26\n    c2cc:\t9100a278 \tadd\tx24, x19, #0x28\n    c2d0:\t93407eb5 \tsxtw\tx21, w21\n    c2d4:\t910173b9 \tadd\tx25, x29, #0x5c\n    c2d8:\t52800017 \tmov\tw23, #0x0                   \t// #0\n    c2dc:\t93407f5a \tsxtw\tx26, w26\n    c2e0:\t52800036 \tmov\tw22, #0x1                   \t// #1\n    c2e4:\t14000015 \tb\tc338 <pthread_cond_destroy@@GLIBC_2.17+0xfc>\n    c2e8:\t2a0403e2 \tmov\tw2, w4\n    c2ec:\taa1803e0 \tmov\tx0, x24\n    c2f0:\taa1503e1 \tmov\tx1, x21\n    c2f4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c2f8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c2fc:\td4000001 \tsvc\t#0x0\n    c300:\tb9005fa3 \tstr\tw3, [x29,#92]\n    c304:\t885ffe62 \tldaxr\tw2, [x19]\n    c308:\t6b1f005f \tcmp\tw2, wzr\n    c30c:\t54000061 \tb.ne\tc318 <pthread_cond_destroy@@GLIBC_2.17+0xdc>\n    c310:\t88007e76 \tstxr\tw0, w22, [x19]\n    c314:\t35ffff80 \tcbnz\tw0, c304 <pthread_cond_destroy@@GLIBC_2.17+0xc8>\n    c318:\taa1303e0 \tmov\tx0, x19\n    c31c:\t2a1403e1 \tmov\tw1, w20\n    c320:\t54000060 \tb.eq\tc32c <pthread_cond_destroy@@GLIBC_2.17+0xf0>\n    c324:\tb9000322 \tstr\tw2, [x25]\n    c328:\t94000d27 \tbl\tf7c4 <__lll_lock_wait>\n    c32c:\tb9402a64 \tldr\tw4, [x19,#40]\n    c330:\t7100049f \tcmp\tw4, #0x1\n    c334:\t54000269 \tb.ls\tc380 <pthread_cond_destroy@@GLIBC_2.17+0x144>\n    c338:\t885f7e62 \tldxr\tw2, [x19]\n    c33c:\t8800fe77 \tstlxr\tw0, w23, [x19]\n    c340:\t35ffffc0 \tcbnz\tw0, c338 <pthread_cond_destroy@@GLIBC_2.17+0xfc>\n    c344:\t7100045f \tcmp\tw2, #0x1\n    c348:\t54fffd0d \tb.le\tc2e8 <pthread_cond_destroy@@GLIBC_2.17+0xac>\n    c34c:\taa1303e0 \tmov\tx0, x19\n    c350:\taa1a03e1 \tmov\tx1, x26\n    c354:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c358:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c35c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c360:\td4000001 \tsvc\t#0x0\n    c364:\t17ffffe1 \tb\tc2e8 <pthread_cond_destroy@@GLIBC_2.17+0xac>\n    c368:\tb9005fa1 \tstr\tw1, [x29,#92]\n    c36c:\t2a0003f4 \tmov\tw20, w0\n    c370:\taa1303e0 \tmov\tx0, x19\n    c374:\t2a1403e1 \tmov\tw1, w20\n    c378:\t94000d13 \tbl\tf7c4 <__lll_lock_wait>\n    c37c:\t17ffffc4 \tb\tc28c <pthread_cond_destroy@@GLIBC_2.17+0x50>\n    c380:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    c384:\t2a0403e0 \tmov\tw0, w4\n    c388:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    c38c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    c390:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    c394:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    c398:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    c39c:\td65f03c0 \tret\n    c3a0:\tb9401001 \tldr\tw1, [x0,#16]\n    c3a4:\tb2407be2 \tmov\tx2, #0x7fffffff            \t// #2147483647\n    c3a8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c3ac:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c3b0:\t12190025 \tand\tw5, w1, #0x80\n    c3b4:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    c3b8:\t4a0100a1 \teor\tw1, w5, w1\n    c3bc:\t93407c21 \tsxtw\tx1, w1\n    c3c0:\td4000001 \tsvc\t#0x0\n    c3c4:\t17ffffbf \tb\tc2c0 <pthread_cond_destroy@@GLIBC_2.17+0x84>\n    c3c8:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    c3cc:\t885f7e60 \tldxr\tw0, [x19]\n    c3d0:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    c3d4:\t35ffffc2 \tcbnz\tw2, c3cc <pthread_cond_destroy@@GLIBC_2.17+0x190>\n    c3d8:\t7100041f \tcmp\tw0, #0x1\n    c3dc:\t52800204 \tmov\tw4, #0x10                  \t// #16\n    c3e0:\t54fffd2d \tb.le\tc384 <pthread_cond_destroy@@GLIBC_2.17+0x148>\n    c3e4:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    c3e8:\taa1303e0 \tmov\tx0, x19\n    c3ec:\t4a010281 \teor\tw1, w20, w1\n    c3f0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c3f4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c3f8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c3fc:\t93407c21 \tsxtw\tx1, w1\n    c400:\td4000001 \tsvc\t#0x0\n    c404:\t17ffffe0 \tb\tc384 <pthread_cond_destroy@@GLIBC_2.17+0x148>\n    c408:\t885ffe61 \tldaxr\tw1, [x19]\n    c40c:\t6b1f003f \tcmp\tw1, wzr\n    c410:\t54000061 \tb.ne\tc41c <pthread_cond_destroy@@GLIBC_2.17+0x1e0>\n    c414:\t88027e60 \tstxr\tw2, w0, [x19]\n    c418:\t35ffff82 \tcbnz\tw2, c408 <pthread_cond_destroy@@GLIBC_2.17+0x1cc>\n    c41c:\t54000080 \tb.eq\tc42c <pthread_cond_destroy@@GLIBC_2.17+0x1f0>\n    c420:\tb9005fa1 \tstr\tw1, [x29,#92]\n    c424:\t52801014 \tmov\tw20, #0x80                  \t// #128\n    c428:\t17ffffd2 \tb\tc370 <pthread_cond_destroy@@GLIBC_2.17+0x134>\n    c42c:\t52801014 \tmov\tw20, #0x80                  \t// #128\n    c430:\t17ffff97 \tb\tc28c <pthread_cond_destroy@@GLIBC_2.17+0x50>\n\n000000000000c434 <__condvar_cleanup>:\n    c434:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    c438:\t910003fd \tmov\tx29, sp\n    c43c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    c440:\taa0003f3 \tmov\tx19, x0\n    c444:\tf9400400 \tldr\tx0, [x0,#8]\n    c448:\tb9002fbf \tstr\twzr, [x29,#44]\n    c44c:\tf9401001 \tldr\tx1, [x0,#32]\n    c450:\tb100043f \tcmn\tx1, #0x1\n    c454:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    c458:\t54000c40 \tb.eq\tc5e0 <__condvar_cleanup+0x1ac>\n    c45c:\t885ffc03 \tldaxr\tw3, [x0]\n    c460:\t6b1f007f \tcmp\tw3, wzr\n    c464:\t54000061 \tb.ne\tc470 <__condvar_cleanup+0x3c>\n    c468:\t88027c01 \tstxr\tw2, w1, [x0]\n    c46c:\t35ffff82 \tcbnz\tw2, c45c <__condvar_cleanup+0x28>\n    c470:\t1a9f17e2 \tcset\tw2, eq\n    c474:\td2801034 \tmov\tx20, #0x81                  \t// #129\n    c478:\t340004c2 \tcbz\tw2, c510 <__condvar_cleanup+0xdc>\n    c47c:\tf9400660 \tldr\tx0, [x19,#8]\n    c480:\tb9401a62 \tldr\tw2, [x19,#24]\n    c484:\tb9402c01 \tldr\tw1, [x0,#44]\n    c488:\t6b01005f \tcmp\tw2, w1\n    c48c:\t540008a0 \tb.eq\tc5a0 <__condvar_cleanup+0x16c>\n    c490:\tb9402802 \tldr\tw2, [x0,#40]\n    c494:\t51000842 \tsub\tw2, w2, #0x2\n    c498:\tb9002802 \tstr\tw2, [x0,#40]\n    c49c:\tf9400660 \tldr\tx0, [x19,#8]\n    c4a0:\tf9400401 \tldr\tx1, [x0,#8]\n    c4a4:\tb100043f \tcmn\tx1, #0x1\n    c4a8:\t540004e0 \tb.eq\tc544 <__condvar_cleanup+0x110>\n    c4ac:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    c4b0:\t885f7c01 \tldxr\tw1, [x0]\n    c4b4:\t8803fc02 \tstlxr\tw3, w2, [x0]\n    c4b8:\t35ffffc3 \tcbnz\tw3, c4b0 <__condvar_cleanup+0x7c>\n    c4bc:\t7100043f \tcmp\tw1, #0x1\n    c4c0:\t5400060c \tb.gt\tc580 <__condvar_cleanup+0x14c>\n    c4c4:\tf9400660 \tldr\tx0, [x19,#8]\n    c4c8:\taa1403e1 \tmov\tx1, x20\n    c4cc:\tb2407be2 \tmov\tx2, #0x7fffffff            \t// #2147483647\n    c4d0:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c4d4:\t91001000 \tadd\tx0, x0, #0x4\n    c4d8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c4dc:\td4000001 \tsvc\t#0x0\n    c4e0:\tf9400a60 \tldr\tx0, [x19,#16]\n    c4e4:\td1000401 \tsub\tx1, x0, #0x1\n    c4e8:\tb1000c3f \tcmn\tx1, #0x3\n    c4ec:\t540000a8 \tb.hi\tc500 <__condvar_cleanup+0xcc>\n    c4f0:\tb9401001 \tldr\tw1, [x0,#16]\n    c4f4:\t121c0421 \tand\tw1, w1, #0x30\n    c4f8:\t7100803f \tcmp\tw1, #0x20\n    c4fc:\t54000120 \tb.eq\tc520 <__condvar_cleanup+0xec>\n    c500:\t97fffb0b \tbl\tb12c <__pthread_mutex_cond_lock>\n    c504:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    c508:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    c50c:\td65f03c0 \tret\n    c510:\t2a0203e1 \tmov\tw1, w2\n    c514:\tb9002fa3 \tstr\tw3, [x29,#44]\n    c518:\t94000cab \tbl\tf7c4 <__lll_lock_wait>\n    c51c:\t17ffffd8 \tb\tc47c <__condvar_cleanup+0x48>\n    c520:\td53bd042 \tmrs\tx2, tpidr_el0\n    c524:\tb9400001 \tldr\tw1, [x0]\n    c528:\td11bc042 \tsub\tx2, x2, #0x6f0\n    c52c:\t12007421 \tand\tw1, w1, #0x3fffffff\n    c530:\tb940d042 \tldr\tw2, [x2,#208]\n    c534:\t6b02003f \tcmp\tw1, w2\n    c538:\t54fffe41 \tb.ne\tc500 <__condvar_cleanup+0xcc>\n    c53c:\t97fffb7e \tbl\tb334 <__pthread_mutex_cond_lock_adjust>\n    c540:\t17fffff1 \tb\tc504 <__condvar_cleanup+0xd0>\n    c544:\tb9402801 \tldr\tw1, [x0,#40]\n    c548:\t7100043f \tcmp\tw1, #0x1\n    c54c:\t54fffb08 \tb.hi\tc4ac <__condvar_cleanup+0x78>\n    c550:\t9100a000 \tadd\tx0, x0, #0x28\n    c554:\taa1403e1 \tmov\tx1, x20\n    c558:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c55c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c560:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c564:\td4000001 \tsvc\t#0x0\n    c568:\tf9400660 \tldr\tx0, [x19,#8]\n    c56c:\t885f7c01 \tldxr\tw1, [x0]\n    c570:\t8804fc03 \tstlxr\tw4, w3, [x0]\n    c574:\t35ffffc4 \tcbnz\tw4, c56c <__condvar_cleanup+0x138>\n    c578:\t7100043f \tcmp\tw1, #0x1\n    c57c:\t54fffb2d \tb.le\tc4e0 <__condvar_cleanup+0xac>\n    c580:\t2a0203e4 \tmov\tw4, w2\n    c584:\taa1403e1 \tmov\tx1, x20\n    c588:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c58c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c590:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c594:\td4000001 \tsvc\t#0x0\n    c598:\t35fffa44 \tcbnz\tw4, c4e0 <__condvar_cleanup+0xac>\n    c59c:\t17ffffca \tb\tc4c4 <__condvar_cleanup+0x90>\n    c5a0:\tf9400801 \tldr\tx1, [x0,#16]\n    c5a4:\tf9400402 \tldr\tx2, [x0,#8]\n    c5a8:\teb02003f \tcmp\tx1, x2\n    c5ac:\t54000102 \tb.cs\tc5cc <__condvar_cleanup+0x198>\n    c5b0:\t91000421 \tadd\tx1, x1, #0x1\n    c5b4:\tf9000801 \tstr\tx1, [x0,#16]\n    c5b8:\tf9400661 \tldr\tx1, [x19,#8]\n    c5bc:\tb9400420 \tldr\tw0, [x1,#4]\n    c5c0:\t11000400 \tadd\tw0, w0, #0x1\n    c5c4:\tb9000420 \tstr\tw0, [x1,#4]\n    c5c8:\tf9400660 \tldr\tx0, [x19,#8]\n    c5cc:\tf9400c01 \tldr\tx1, [x0,#24]\n    c5d0:\t91000421 \tadd\tx1, x1, #0x1\n    c5d4:\tf9000c01 \tstr\tx1, [x0,#24]\n    c5d8:\tf9400660 \tldr\tx0, [x19,#8]\n    c5dc:\t17ffffad \tb\tc490 <__condvar_cleanup+0x5c>\n    c5e0:\t885ffc02 \tldaxr\tw2, [x0]\n    c5e4:\t6b1f005f \tcmp\tw2, wzr\n    c5e8:\t54000061 \tb.ne\tc5f4 <__condvar_cleanup+0x1c0>\n    c5ec:\t88037c01 \tstxr\tw3, w1, [x0]\n    c5f0:\t35ffff83 \tcbnz\tw3, c5e0 <__condvar_cleanup+0x1ac>\n    c5f4:\t540000c0 \tb.eq\tc60c <__condvar_cleanup+0x1d8>\n    c5f8:\t52801001 \tmov\tw1, #0x80                  \t// #128\n    c5fc:\tb9002fa2 \tstr\tw2, [x29,#44]\n    c600:\td2800034 \tmov\tx20, #0x1                   \t// #1\n    c604:\t94000c70 \tbl\tf7c4 <__lll_lock_wait>\n    c608:\t17ffff9d \tb\tc47c <__condvar_cleanup+0x48>\n    c60c:\td2800034 \tmov\tx20, #0x1                   \t// #1\n    c610:\t17ffff9b \tb\tc47c <__condvar_cleanup+0x48>\n\n000000000000c614 <pthread_cond_wait@@GLIBC_2.17>:\n    c614:\ta9b47bfd \tstp\tx29, x30, [sp,#-192]!\n    c618:\t910003fd \tmov\tx29, sp\n    c61c:\t6d0627e8 \tstp\td8, d9, [sp,#96]\n    c620:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    c624:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    c628:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    c62c:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    c630:\ta90573fb \tstp\tx27, x28, [sp,#80]\n    c634:\taa0003f3 \tmov\tx19, x0\n    c638:\tb900a3bf \tstr\twzr, [x29,#160]\n    c63c:\tf9401000 \tldr\tx0, [x0,#32]\n    c640:\taa0103f7 \tmov\tx23, x1\n    c644:\tb100041f \tcmn\tx0, #0x1\n    c648:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    c64c:\t54001520 \tb.eq\tc8f0 <pthread_cond_wait@@GLIBC_2.17+0x2dc>\n    c650:\t885ffe61 \tldaxr\tw1, [x19]\n    c654:\t6b1f003f \tcmp\tw1, wzr\n    c658:\t54000061 \tb.ne\tc664 <pthread_cond_wait@@GLIBC_2.17+0x50>\n    c65c:\t88027e60 \tstxr\tw2, w0, [x19]\n    c660:\t35ffff82 \tcbnz\tw2, c650 <pthread_cond_wait@@GLIBC_2.17+0x3c>\n    c664:\t1a9f17e0 \tcset\tw0, eq\n    c668:\t52800018 \tmov\tw24, #0x0                   \t// #0\n    c66c:\t34000f00 \tcbz\tw0, c84c <pthread_cond_wait@@GLIBC_2.17+0x238>\n    c670:\taa1703e0 \tmov\tx0, x23\n    c674:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    c678:\t97fff8a7 \tbl\ta914 <__pthread_mutex_unlock_usercnt>\n    c67c:\t35001560 \tcbnz\tw0, c928 <pthread_cond_wait@@GLIBC_2.17+0x314>\n    c680:\tf9400662 \tldr\tx2, [x19,#8]\n    c684:\tb9400661 \tldr\tw1, [x19,#4]\n    c688:\tb9402a60 \tldr\tw0, [x19,#40]\n    c68c:\t91000442 \tadd\tx2, x2, #0x1\n    c690:\tf9401263 \tldr\tx3, [x19,#32]\n    c694:\t11000421 \tadd\tw1, w1, #0x1\n    c698:\t11000800 \tadd\tw0, w0, #0x2\n    c69c:\tf9000662 \tstr\tx2, [x19,#8]\n    c6a0:\tb9000661 \tstr\tw1, [x19,#4]\n    c6a4:\tb100047f \tcmn\tx3, #0x1\n    c6a8:\tb9002a60 \tstr\tw0, [x19,#40]\n    c6ac:\t54000040 \tb.eq\tc6b4 <pthread_cond_wait@@GLIBC_2.17+0xa0>\n    c6b0:\tf9001277 \tstr\tx23, [x19,#32]\n    c6b4:\t910203a0 \tadd\tx0, x29, #0x80\n    c6b8:\t910283b4 \tadd\tx20, x29, #0xa0\n    c6bc:\t90000001 \tadrp\tx1, c000 <__pthread_rwlock_unlock+0x20>\n    c6c0:\taa1403e2 \tmov\tx2, x20\n    c6c4:\t9e670009 \tfmov\td9, x0\n    c6c8:\t9110d021 \tadd\tx1, x1, #0x434\n    c6cc:\tf90057b3 \tstr\tx19, [x29,#168]\n    c6d0:\t5280117c \tmov\tw28, #0x8b                  \t// #139\n    c6d4:\tf9005bb7 \tstr\tx23, [x29,#176]\n    c6d8:\t4a1c031c \teor\tw28, w24, w28\n    c6dc:\td10006f9 \tsub\tx25, x23, #0x1\n    c6e0:\t52800015 \tmov\tw21, #0x0                   \t// #0\n    c6e4:\t94000ac7 \tbl\tf200 <_pthread_cleanup_push>\n    c6e8:\tf9400a7a \tldr\tx26, [x19,#16]\n    c6ec:\t52801020 \tmov\tw0, #0x81                  \t// #129\n    c6f0:\tb9402e61 \tldr\tw1, [x19,#44]\n    c6f4:\t4a000300 \teor\tw0, w24, w0\n    c6f8:\t9101f3bb \tadd\tx27, x29, #0x7c\n    c6fc:\tb900bba1 \tstr\tw1, [x29,#184]\n    c700:\t93407f9c \tsxtw\tx28, w28\n    c704:\t93407c00 \tsxtw\tx0, w0\n    c708:\t9e670008 \tfmov\td8, x0\n    c70c:\tb9400676 \tldr\tw22, [x19,#4]\n    c710:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    c714:\t885f7e60 \tldxr\tw0, [x19]\n    c718:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    c71c:\t35ffffc2 \tcbnz\tw2, c714 <pthread_cond_wait@@GLIBC_2.17+0x100>\n    c720:\t7100041f \tcmp\tw0, #0x1\n    c724:\t54000c0c \tb.gt\tc8a4 <pthread_cond_wait@@GLIBC_2.17+0x290>\n    c728:\t94000bbc \tbl\tf618 <__pthread_enable_asynccancel>\n    c72c:\tb9000280 \tstr\tw0, [x20]\n    c730:\t350009b5 \tcbnz\tw21, c864 <pthread_cond_wait@@GLIBC_2.17+0x250>\n    c734:\tb1000f3f \tcmn\tx25, #0x3\n    c738:\t540000a8 \tb.hi\tc74c <pthread_cond_wait@@GLIBC_2.17+0x138>\n    c73c:\tb94012e0 \tldr\tw0, [x23,#16]\n    c740:\t121c0400 \tand\tw0, w0, #0x30\n    c744:\t7100801f \tcmp\tw0, #0x20\n    c748:\t540009a0 \tb.eq\tc87c <pthread_cond_wait@@GLIBC_2.17+0x268>\n    c74c:\t52190305 \teor\tw5, w24, #0x80\n    c750:\t91001260 \tadd\tx0, x19, #0x4\n    c754:\t2a1603e2 \tmov\tw2, w22\n    c758:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c75c:\t93407ca1 \tsxtw\tx1, w5\n    c760:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c764:\td4000001 \tsvc\t#0x0\n    c768:\t2a0303f5 \tmov\tw21, w3\n    c76c:\tb9400280 \tldr\tw0, [x20]\n    c770:\t94000bda \tbl\tf6d8 <__pthread_disable_asynccancel>\n    c774:\tb9007fbf \tstr\twzr, [x29,#124]\n    c778:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    c77c:\t885ffe63 \tldaxr\tw3, [x19]\n    c780:\t6b1f007f \tcmp\tw3, wzr\n    c784:\t54000061 \tb.ne\tc790 <pthread_cond_wait@@GLIBC_2.17+0x17c>\n    c788:\t88007e62 \tstxr\tw0, w2, [x19]\n    c78c:\t35ffff80 \tcbnz\tw0, c77c <pthread_cond_wait@@GLIBC_2.17+0x168>\n    c790:\t540000a0 \tb.eq\tc7a4 <pthread_cond_wait@@GLIBC_2.17+0x190>\n    c794:\taa1303e0 \tmov\tx0, x19\n    c798:\t2a1803e1 \tmov\tw1, w24\n    c79c:\tb9000363 \tstr\tw3, [x27]\n    c7a0:\t94000c09 \tbl\tf7c4 <__lll_lock_wait>\n    c7a4:\tb9401a83 \tldr\tw3, [x20,#24]\n    c7a8:\tb9402e62 \tldr\tw2, [x19,#44]\n    c7ac:\t6b02007f \tcmp\tw3, w2\n    c7b0:\t54000121 \tb.ne\tc7d4 <pthread_cond_wait@@GLIBC_2.17+0x1c0>\n    c7b4:\tf9400a62 \tldr\tx2, [x19,#16]\n    c7b8:\teb1a005f \tcmp\tx2, x26\n    c7bc:\t54fffa80 \tb.eq\tc70c <pthread_cond_wait@@GLIBC_2.17+0xf8>\n    c7c0:\tf9400e60 \tldr\tx0, [x19,#24]\n    c7c4:\teb02001f \tcmp\tx0, x2\n    c7c8:\t54fffa20 \tb.eq\tc70c <pthread_cond_wait@@GLIBC_2.17+0xf8>\n    c7cc:\t91000400 \tadd\tx0, x0, #0x1\n    c7d0:\tf9000e60 \tstr\tx0, [x19,#24]\n    c7d4:\tb9402a60 \tldr\tw0, [x19,#40]\n    c7d8:\t51000800 \tsub\tw0, w0, #0x2\n    c7dc:\tb9002a60 \tstr\tw0, [x19,#40]\n    c7e0:\t7100041f \tcmp\tw0, #0x1\n    c7e4:\t54000088 \tb.hi\tc7f4 <pthread_cond_wait@@GLIBC_2.17+0x1e0>\n    c7e8:\tf9400660 \tldr\tx0, [x19,#8]\n    c7ec:\tb100041f \tcmn\tx0, #0x1\n    c7f0:\t540006e0 \tb.eq\tc8cc <pthread_cond_wait@@GLIBC_2.17+0x2b8>\n    c7f4:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    c7f8:\t885f7e60 \tldxr\tw0, [x19]\n    c7fc:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    c800:\t35ffffc2 \tcbnz\tw2, c7f8 <pthread_cond_wait@@GLIBC_2.17+0x1e4>\n    c804:\t7100041f \tcmp\tw0, #0x1\n    c808:\t54000b0c \tb.gt\tc968 <pthread_cond_wait@@GLIBC_2.17+0x354>\n    c80c:\t9e660120 \tfmov\tx0, d9\n    c810:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    c814:\t94000a83 \tbl\tf220 <_pthread_cleanup_pop>\n    c818:\taa1703e0 \tmov\tx0, x23\n    c81c:\t35000535 \tcbnz\tw21, c8c0 <pthread_cond_wait@@GLIBC_2.17+0x2ac>\n    c820:\t97fffa43 \tbl\tb12c <__pthread_mutex_cond_lock>\n    c824:\t2a0003e4 \tmov\tw4, w0\n    c828:\t2a0403e0 \tmov\tw0, w4\n    c82c:\t6d4627e8 \tldp\td8, d9, [sp,#96]\n    c830:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    c834:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    c838:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    c83c:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    c840:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    c844:\ta8cc7bfd \tldp\tx29, x30, [sp],#192\n    c848:\td65f03c0 \tret\n    c84c:\tb900a3a1 \tstr\tw1, [x29,#160]\n    c850:\t2a0003f8 \tmov\tw24, w0\n    c854:\taa1303e0 \tmov\tx0, x19\n    c858:\t2a1803e1 \tmov\tw1, w24\n    c85c:\t94000bda \tbl\tf7c4 <__lll_lock_wait>\n    c860:\t17ffff84 \tb\tc670 <pthread_cond_wait@@GLIBC_2.17+0x5c>\n    c864:\taa1703e0 \tmov\tx0, x23\n    c868:\t97fffab3 \tbl\tb334 <__pthread_mutex_cond_lock_adjust>\n    c86c:\taa1703e0 \tmov\tx0, x23\n    c870:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    c874:\t97fff828 \tbl\ta914 <__pthread_mutex_unlock_usercnt>\n    c878:\t17ffffaf \tb\tc734 <pthread_cond_wait@@GLIBC_2.17+0x120>\n    c87c:\t91001260 \tadd\tx0, x19, #0x4\n    c880:\taa1c03e1 \tmov\tx1, x28\n    c884:\t2a1603e2 \tmov\tw2, w22\n    c888:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c88c:\taa1703e4 \tmov\tx4, x23\n    c890:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c894:\td4000001 \tsvc\t#0x0\n    c898:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    c89c:\t1a9f87f5 \tcset\tw21, ls\n    c8a0:\t17ffffb3 \tb\tc76c <pthread_cond_wait@@GLIBC_2.17+0x158>\n    c8a4:\taa1303e0 \tmov\tx0, x19\n    c8a8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c8ac:\t9e660101 \tfmov\tx1, d8\n    c8b0:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c8b4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c8b8:\td4000001 \tsvc\t#0x0\n    c8bc:\t17ffff9b \tb\tc728 <pthread_cond_wait@@GLIBC_2.17+0x114>\n    c8c0:\t97fffa9d \tbl\tb334 <__pthread_mutex_cond_lock_adjust>\n    c8c4:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    c8c8:\t17ffffd8 \tb\tc828 <pthread_cond_wait@@GLIBC_2.17+0x214>\n    c8cc:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    c8d0:\t9100a260 \tadd\tx0, x19, #0x28\n    c8d4:\t4a010301 \teor\tw1, w24, w1\n    c8d8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c8dc:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c8e0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c8e4:\t93407c21 \tsxtw\tx1, w1\n    c8e8:\td4000001 \tsvc\t#0x0\n    c8ec:\t17ffffc2 \tb\tc7f4 <pthread_cond_wait@@GLIBC_2.17+0x1e0>\n    c8f0:\t885ffe61 \tldaxr\tw1, [x19]\n    c8f4:\t6b1f003f \tcmp\tw1, wzr\n    c8f8:\t54000061 \tb.ne\tc904 <pthread_cond_wait@@GLIBC_2.17+0x2f0>\n    c8fc:\t88027e60 \tstxr\tw2, w0, [x19]\n    c900:\t35ffff82 \tcbnz\tw2, c8f0 <pthread_cond_wait@@GLIBC_2.17+0x2dc>\n    c904:\t54000080 \tb.eq\tc914 <pthread_cond_wait@@GLIBC_2.17+0x300>\n    c908:\tb900a3a1 \tstr\tw1, [x29,#160]\n    c90c:\t52801018 \tmov\tw24, #0x80                  \t// #128\n    c910:\t17ffffd1 \tb\tc854 <pthread_cond_wait@@GLIBC_2.17+0x240>\n    c914:\taa1703e0 \tmov\tx0, x23\n    c918:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    c91c:\t52801018 \tmov\tw24, #0x80                  \t// #128\n    c920:\t97fff7fd \tbl\ta914 <__pthread_mutex_unlock_usercnt>\n    c924:\t34ffeae0 \tcbz\tw0, c680 <pthread_cond_wait@@GLIBC_2.17+0x6c>\n    c928:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    c92c:\t885f7e61 \tldxr\tw1, [x19]\n    c930:\t8803fe62 \tstlxr\tw3, w2, [x19]\n    c934:\t35ffffc3 \tcbnz\tw3, c92c <pthread_cond_wait@@GLIBC_2.17+0x318>\n    c938:\t7100043f \tcmp\tw1, #0x1\n    c93c:\t2a0003e4 \tmov\tw4, w0\n    c940:\t54fff74d \tb.le\tc828 <pthread_cond_wait@@GLIBC_2.17+0x214>\n    c944:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    c948:\taa1303e0 \tmov\tx0, x19\n    c94c:\t4a010301 \teor\tw1, w24, w1\n    c950:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c954:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c958:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c95c:\t93407c21 \tsxtw\tx1, w1\n    c960:\td4000001 \tsvc\t#0x0\n    c964:\t17ffffb1 \tb\tc828 <pthread_cond_wait@@GLIBC_2.17+0x214>\n    c968:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    c96c:\taa1303e0 \tmov\tx0, x19\n    c970:\t4a010301 \teor\tw1, w24, w1\n    c974:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    c978:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    c97c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    c980:\t93407c21 \tsxtw\tx1, w1\n    c984:\td4000001 \tsvc\t#0x0\n    c988:\t17ffffa1 \tb\tc80c <pthread_cond_wait@@GLIBC_2.17+0x1f8>\n\n000000000000c98c <pthread_cond_timedwait@@GLIBC_2.17>:\n    c98c:\ta9b37bfd \tstp\tx29, x30, [sp,#-208]!\n    c990:\td2993fe3 \tmov\tx3, #0xc9ff                \t// #51711\n    c994:\t528002c4 \tmov\tw4, #0x16                  \t// #22\n    c998:\t910003fd \tmov\tx29, sp\n    c99c:\t6d0627e8 \tstp\td8, d9, [sp,#96]\n    c9a0:\tf9400445 \tldr\tx5, [x2,#8]\n    c9a4:\tf2a77343 \tmovk\tx3, #0x3b9a, lsl #16\n    c9a8:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    c9ac:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    c9b0:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    c9b4:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    c9b8:\ta90573fb \tstp\tx27, x28, [sp,#80]\n    c9bc:\teb0300bf \tcmp\tx5, x3\n    c9c0:\tfd003bea \tstr\td10, [sp,#112]\n    c9c4:\t54000169 \tb.ls\tc9f0 <pthread_cond_timedwait@@GLIBC_2.17+0x64>\n    c9c8:\t2a0403e0 \tmov\tw0, w4\n    c9cc:\t6d4627e8 \tldp\td8, d9, [sp,#96]\n    c9d0:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    c9d4:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    c9d8:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    c9dc:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    c9e0:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    c9e4:\tfd403bea \tldr\td10, [sp,#112]\n    c9e8:\ta8cd7bfd \tldp\tx29, x30, [sp],#208\n    c9ec:\td65f03c0 \tret\n    c9f0:\taa0003f3 \tmov\tx19, x0\n    c9f4:\tf9401000 \tldr\tx0, [x0,#32]\n    c9f8:\tb900b3bf \tstr\twzr, [x29,#176]\n    c9fc:\taa0103f5 \tmov\tx21, x1\n    ca00:\tb100041f \tcmn\tx0, #0x1\n    ca04:\taa0203f6 \tmov\tx22, x2\n    ca08:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    ca0c:\t540019a0 \tb.eq\tcd40 <pthread_cond_timedwait@@GLIBC_2.17+0x3b4>\n    ca10:\t885ffe61 \tldaxr\tw1, [x19]\n    ca14:\t6b1f003f \tcmp\tw1, wzr\n    ca18:\t54000061 \tb.ne\tca24 <pthread_cond_timedwait@@GLIBC_2.17+0x98>\n    ca1c:\t88027e60 \tstxr\tw2, w0, [x19]\n    ca20:\t35ffff82 \tcbnz\tw2, ca10 <pthread_cond_timedwait@@GLIBC_2.17+0x84>\n    ca24:\t1a9f17e0 \tcset\tw0, eq\n    ca28:\t52800017 \tmov\tw23, #0x0                   \t// #0\n    ca2c:\t34001360 \tcbz\tw0, cc98 <pthread_cond_timedwait@@GLIBC_2.17+0x30c>\n    ca30:\taa1503e0 \tmov\tx0, x21\n    ca34:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    ca38:\t97fff7b7 \tbl\ta914 <__pthread_mutex_unlock_usercnt>\n    ca3c:\t35001500 \tcbnz\tw0, ccdc <pthread_cond_timedwait@@GLIBC_2.17+0x350>\n    ca40:\tf9400663 \tldr\tx3, [x19,#8]\n    ca44:\tb9400662 \tldr\tw2, [x19,#4]\n    ca48:\tb9402a61 \tldr\tw1, [x19,#40]\n    ca4c:\t91000463 \tadd\tx3, x3, #0x1\n    ca50:\t11000442 \tadd\tw2, w2, #0x1\n    ca54:\tf9000663 \tstr\tx3, [x19,#8]\n    ca58:\tb9000662 \tstr\tw2, [x19,#4]\n    ca5c:\t11000821 \tadd\tw1, w1, #0x2\n    ca60:\tb9002a61 \tstr\tw1, [x19,#40]\n    ca64:\tf94002c4 \tldr\tx4, [x22]\n    ca68:\tb7f81a44 \ttbnz\tx4, #63, cdb0 <pthread_cond_timedwait@@GLIBC_2.17+0x424>\n    ca6c:\tf9401260 \tldr\tx0, [x19,#32]\n    ca70:\tb100041f \tcmn\tx0, #0x1\n    ca74:\t54000040 \tb.eq\tca7c <pthread_cond_timedwait@@GLIBC_2.17+0xf0>\n    ca78:\tf9001275 \tstr\tx21, [x19,#32]\n    ca7c:\t910243a0 \tadd\tx0, x29, #0x90\n    ca80:\t9102c3b4 \tadd\tx20, x29, #0xb0\n    ca84:\t90000001 \tadrp\tx1, c000 <__pthread_rwlock_unlock+0x20>\n    ca88:\taa1403e2 \tmov\tx2, x20\n    ca8c:\t9e670009 \tfmov\td9, x0\n    ca90:\t9110d021 \tadd\tx1, x1, #0x434\n    ca94:\tf9005fb3 \tstr\tx19, [x29,#184]\n    ca98:\t5280001b \tmov\tw27, #0x0                   \t// #0\n    ca9c:\tf90063b5 \tstr\tx21, [x29,#192]\n    caa0:\td10006b9 \tsub\tx25, x21, #0x1\n    caa4:\t2a1b03f8 \tmov\tw24, w27\n    caa8:\t940009d6 \tbl\tf200 <_pthread_cleanup_push>\n    caac:\tf9400a7a \tldr\tx26, [x19,#16]\n    cab0:\t52801020 \tmov\tw0, #0x81                  \t// #129\n    cab4:\tb9402e61 \tldr\tw1, [x19,#44]\n    cab8:\t4a0002e0 \teor\tw0, w23, w0\n    cabc:\tb900cba1 \tstr\tw1, [x29,#200]\n    cac0:\t910233a1 \tadd\tx1, x29, #0x8c\n    cac4:\t93407c00 \tsxtw\tx0, w0\n    cac8:\t9e670028 \tfmov\td8, x1\n    cacc:\t9e67000a \tfmov\td10, x0\n    cad0:\tb940067c \tldr\tw28, [x19,#4]\n    cad4:\t885f7e60 \tldxr\tw0, [x19]\n    cad8:\t8801fe78 \tstlxr\tw1, w24, [x19]\n    cadc:\t35ffffc1 \tcbnz\tw1, cad4 <pthread_cond_timedwait@@GLIBC_2.17+0x148>\n    cae0:\t7100041f \tcmp\tw0, #0x1\n    cae4:\t54000e6c \tb.gt\tccb0 <pthread_cond_timedwait@@GLIBC_2.17+0x324>\n    cae8:\t94000acc \tbl\tf618 <__pthread_enable_asynccancel>\n    caec:\tb9000280 \tstr\tw0, [x20]\n    caf0:\t35000a5b \tcbnz\tw27, cc38 <pthread_cond_timedwait@@GLIBC_2.17+0x2ac>\n    caf4:\tb1000f3f \tcmn\tx25, #0x3\n    caf8:\t540000a8 \tb.hi\tcb0c <pthread_cond_timedwait@@GLIBC_2.17+0x180>\n    cafc:\tb94012a0 \tldr\tw0, [x21,#16]\n    cb00:\t121c0400 \tand\tw0, w0, #0x30\n    cb04:\t7100801f \tcmp\tw0, #0x20\n    cb08:\t54000a40 \tb.eq\tcc50 <pthread_cond_timedwait@@GLIBC_2.17+0x2c4>\n    cb0c:\tb9402a65 \tldr\tw5, [x19,#40]\n    cb10:\t52801121 \tmov\tw1, #0x89                  \t// #137\n    cb14:\t52803126 \tmov\tw6, #0x189                 \t// #393\n    cb18:\t91001260 \tadd\tx0, x19, #0x4\n    cb1c:\t120000a5 \tand\tw5, w5, #0x1\n    cb20:\t2a1c03e2 \tmov\tw2, w28\n    cb24:\t6b1f00bf \tcmp\tw5, wzr\n    cb28:\taa1603e3 \tmov\tx3, x22\n    cb2c:\t1a861026 \tcsel\tw6, w1, w6, ne\n    cb30:\td2800004 \tmov\tx4, #0x0                   \t// #0\n    cb34:\tb2407fe5 \tmov\tx5, #0xffffffff            \t// #4294967295\n    cb38:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    cb3c:\t4a1700c1 \teor\tw1, w6, w23\n    cb40:\td4000001 \tsvc\t#0x0\n    cb44:\tb13ffc1f \tcmn\tx0, #0xfff\n    cb48:\t2a0403fb \tmov\tw27, w4\n    cb4c:\t1a9f201c \tcsel\tw28, w0, wzr, cs\n    cb50:\tb9400280 \tldr\tw0, [x20]\n    cb54:\t94000ae1 \tbl\tf6d8 <__pthread_disable_asynccancel>\n    cb58:\tb9008fbf \tstr\twzr, [x29,#140]\n    cb5c:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    cb60:\t885ffe62 \tldaxr\tw2, [x19]\n    cb64:\t6b1f005f \tcmp\tw2, wzr\n    cb68:\t54000061 \tb.ne\tcb74 <pthread_cond_timedwait@@GLIBC_2.17+0x1e8>\n    cb6c:\t88017e60 \tstxr\tw1, w0, [x19]\n    cb70:\t35ffff81 \tcbnz\tw1, cb60 <pthread_cond_timedwait@@GLIBC_2.17+0x1d4>\n    cb74:\t540000c0 \tb.eq\tcb8c <pthread_cond_timedwait@@GLIBC_2.17+0x200>\n    cb78:\t9e660103 \tfmov\tx3, d8\n    cb7c:\taa1303e0 \tmov\tx0, x19\n    cb80:\t2a1703e1 \tmov\tw1, w23\n    cb84:\tb9000062 \tstr\tw2, [x3]\n    cb88:\t94000b0f \tbl\tf7c4 <__lll_lock_wait>\n    cb8c:\tb9401a81 \tldr\tw1, [x20,#24]\n    cb90:\tb9402e60 \tldr\tw0, [x19,#44]\n    cb94:\t6b00003f \tcmp\tw1, w0\n    cb98:\t54000ea1 \tb.ne\tcd6c <pthread_cond_timedwait@@GLIBC_2.17+0x3e0>\n    cb9c:\tf9400a65 \tldr\tx5, [x19,#16]\n    cba0:\teb1a00bf \tcmp\tx5, x26\n    cba4:\t54000080 \tb.eq\tcbb4 <pthread_cond_timedwait@@GLIBC_2.17+0x228>\n    cba8:\tf9400e60 \tldr\tx0, [x19,#24]\n    cbac:\teb05001f \tcmp\tx0, x5\n    cbb0:\t54000e61 \tb.ne\tcd7c <pthread_cond_timedwait@@GLIBC_2.17+0x3f0>\n    cbb4:\t3101bb9f \tcmn\tw28, #0x6e\n    cbb8:\t54fff8c1 \tb.ne\tcad0 <pthread_cond_timedwait@@GLIBC_2.17+0x144>\n    cbbc:\tb9400662 \tldr\tw2, [x19,#4]\n    cbc0:\tb9402a61 \tldr\tw1, [x19,#40]\n    cbc4:\tf9400663 \tldr\tx3, [x19,#8]\n    cbc8:\tf9400e60 \tldr\tx0, [x19,#24]\n    cbcc:\t910004a5 \tadd\tx5, x5, #0x1\n    cbd0:\t11000442 \tadd\tw2, w2, #0x1\n    cbd4:\tf9000a65 \tstr\tx5, [x19,#16]\n    cbd8:\tb9000662 \tstr\tw2, [x19,#4]\n    cbdc:\t52800dd4 \tmov\tw20, #0x6e                  \t// #110\n    cbe0:\t91000400 \tadd\tx0, x0, #0x1\n    cbe4:\tf9000e60 \tstr\tx0, [x19,#24]\n    cbe8:\t51000821 \tsub\tw1, w1, #0x2\n    cbec:\tb9002a61 \tstr\tw1, [x19,#40]\n    cbf0:\t7100043f \tcmp\tw1, #0x1\n    cbf4:\t54000068 \tb.hi\tcc00 <pthread_cond_timedwait@@GLIBC_2.17+0x274>\n    cbf8:\tb100047f \tcmn\tx3, #0x1\n    cbfc:\t54000900 \tb.eq\tcd1c <pthread_cond_timedwait@@GLIBC_2.17+0x390>\n    cc00:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    cc04:\t885f7e60 \tldxr\tw0, [x19]\n    cc08:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    cc0c:\t35ffffc2 \tcbnz\tw2, cc04 <pthread_cond_timedwait@@GLIBC_2.17+0x278>\n    cc10:\t7100041f \tcmp\tw0, #0x1\n    cc14:\t54000bcc \tb.gt\tcd8c <pthread_cond_timedwait@@GLIBC_2.17+0x400>\n    cc18:\t9e660120 \tfmov\tx0, d9\n    cc1c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    cc20:\t94000980 \tbl\tf220 <_pthread_cleanup_pop>\n    cc24:\taa1503e0 \tmov\tx0, x21\n    cc28:\t3400053b \tcbz\tw27, cccc <pthread_cond_timedwait@@GLIBC_2.17+0x340>\n    cc2c:\t97fff9c2 \tbl\tb334 <__pthread_mutex_cond_lock_adjust>\n    cc30:\t2a1403e4 \tmov\tw4, w20\n    cc34:\t17ffff65 \tb\tc9c8 <pthread_cond_timedwait@@GLIBC_2.17+0x3c>\n    cc38:\taa1503e0 \tmov\tx0, x21\n    cc3c:\t97fff9be \tbl\tb334 <__pthread_mutex_cond_lock_adjust>\n    cc40:\taa1503e0 \tmov\tx0, x21\n    cc44:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    cc48:\t97fff733 \tbl\ta914 <__pthread_mutex_unlock_usercnt>\n    cc4c:\t17ffffaa \tb\tcaf4 <pthread_cond_timedwait@@GLIBC_2.17+0x168>\n    cc50:\tb9402a61 \tldr\tw1, [x19,#40]\n    cc54:\t52803164 \tmov\tw4, #0x18b                 \t// #395\n    cc58:\t91001260 \tadd\tx0, x19, #0x4\n    cc5c:\t2a1c03e2 \tmov\tw2, w28\n    cc60:\t12000021 \tand\tw1, w1, #0x1\n    cc64:\taa1603e3 \tmov\tx3, x22\n    cc68:\t6b1f003f \tcmp\tw1, wzr\n    cc6c:\t52801161 \tmov\tw1, #0x8b                  \t// #139\n    cc70:\t1a841021 \tcsel\tw1, w1, w4, ne\n    cc74:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    cc78:\taa1503e4 \tmov\tx4, x21\n    cc7c:\t4a170021 \teor\tw1, w1, w23\n    cc80:\td4000001 \tsvc\t#0x0\n    cc84:\tb13ffc1f \tcmn\tx0, #0xfff\n    cc88:\t1a9f201c \tcsel\tw28, w0, wzr, cs\n    cc8c:\tb13ffc1f \tcmn\tx0, #0xfff\n    cc90:\t1a9f27fb \tcset\tw27, cc\n    cc94:\t17ffffaf \tb\tcb50 <pthread_cond_timedwait@@GLIBC_2.17+0x1c4>\n    cc98:\tb900b3a1 \tstr\tw1, [x29,#176]\n    cc9c:\t2a0003f7 \tmov\tw23, w0\n    cca0:\taa1303e0 \tmov\tx0, x19\n    cca4:\t2a1703e1 \tmov\tw1, w23\n    cca8:\t94000ac7 \tbl\tf7c4 <__lll_lock_wait>\n    ccac:\t17ffff61 \tb\tca30 <pthread_cond_timedwait@@GLIBC_2.17+0xa4>\n    ccb0:\taa1303e0 \tmov\tx0, x19\n    ccb4:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    ccb8:\t9e660141 \tfmov\tx1, d10\n    ccbc:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    ccc0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    ccc4:\td4000001 \tsvc\t#0x0\n    ccc8:\t17ffff88 \tb\tcae8 <pthread_cond_timedwait@@GLIBC_2.17+0x15c>\n    cccc:\t97fff918 \tbl\tb12c <__pthread_mutex_cond_lock>\n    ccd0:\t6b1f001f \tcmp\tw0, wzr\n    ccd4:\t1a941004 \tcsel\tw4, w0, w20, ne\n    ccd8:\t17ffff3c \tb\tc9c8 <pthread_cond_timedwait@@GLIBC_2.17+0x3c>\n    ccdc:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    cce0:\t885f7e61 \tldxr\tw1, [x19]\n    cce4:\t8803fe62 \tstlxr\tw3, w2, [x19]\n    cce8:\t35ffffc3 \tcbnz\tw3, cce0 <pthread_cond_timedwait@@GLIBC_2.17+0x354>\n    ccec:\t7100043f \tcmp\tw1, #0x1\n    ccf0:\t2a0003e4 \tmov\tw4, w0\n    ccf4:\t54ffe6ad \tb.le\tc9c8 <pthread_cond_timedwait@@GLIBC_2.17+0x3c>\n    ccf8:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    ccfc:\taa1303e0 \tmov\tx0, x19\n    cd00:\t4a0102e1 \teor\tw1, w23, w1\n    cd04:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    cd08:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    cd0c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    cd10:\t93407c21 \tsxtw\tx1, w1\n    cd14:\td4000001 \tsvc\t#0x0\n    cd18:\t17ffff2c \tb\tc9c8 <pthread_cond_timedwait@@GLIBC_2.17+0x3c>\n    cd1c:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    cd20:\t9100a260 \tadd\tx0, x19, #0x28\n    cd24:\t4a0102e1 \teor\tw1, w23, w1\n    cd28:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    cd2c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    cd30:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    cd34:\t93407c21 \tsxtw\tx1, w1\n    cd38:\td4000001 \tsvc\t#0x0\n    cd3c:\t17ffffb1 \tb\tcc00 <pthread_cond_timedwait@@GLIBC_2.17+0x274>\n    cd40:\t885ffe61 \tldaxr\tw1, [x19]\n    cd44:\t6b1f003f \tcmp\tw1, wzr\n    cd48:\t54000061 \tb.ne\tcd54 <pthread_cond_timedwait@@GLIBC_2.17+0x3c8>\n    cd4c:\t88027e60 \tstxr\tw2, w0, [x19]\n    cd50:\t35ffff82 \tcbnz\tw2, cd40 <pthread_cond_timedwait@@GLIBC_2.17+0x3b4>\n    cd54:\t54000080 \tb.eq\tcd64 <pthread_cond_timedwait@@GLIBC_2.17+0x3d8>\n    cd58:\tb900b3a1 \tstr\tw1, [x29,#176]\n    cd5c:\t52801017 \tmov\tw23, #0x80                  \t// #128\n    cd60:\t17ffffd0 \tb\tcca0 <pthread_cond_timedwait@@GLIBC_2.17+0x314>\n    cd64:\t52801017 \tmov\tw23, #0x80                  \t// #128\n    cd68:\t17ffff32 \tb\tca30 <pthread_cond_timedwait@@GLIBC_2.17+0xa4>\n    cd6c:\tb9402a61 \tldr\tw1, [x19,#40]\n    cd70:\t52800014 \tmov\tw20, #0x0                   \t// #0\n    cd74:\tf9400663 \tldr\tx3, [x19,#8]\n    cd78:\t17ffff9c \tb\tcbe8 <pthread_cond_timedwait@@GLIBC_2.17+0x25c>\n    cd7c:\tb9402a61 \tldr\tw1, [x19,#40]\n    cd80:\t52800014 \tmov\tw20, #0x0                   \t// #0\n    cd84:\tf9400663 \tldr\tx3, [x19,#8]\n    cd88:\t17ffff96 \tb\tcbe0 <pthread_cond_timedwait@@GLIBC_2.17+0x254>\n    cd8c:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    cd90:\taa1303e0 \tmov\tx0, x19\n    cd94:\t4a0102e1 \teor\tw1, w23, w1\n    cd98:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    cd9c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    cda0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    cda4:\t93407c21 \tsxtw\tx1, w1\n    cda8:\td4000001 \tsvc\t#0x0\n    cdac:\t17ffff9b \tb\tcc18 <pthread_cond_timedwait@@GLIBC_2.17+0x28c>\n    cdb0:\t2a0003fb \tmov\tw27, w0\n    cdb4:\t910243a0 \tadd\tx0, x29, #0x90\n    cdb8:\tf9400a65 \tldr\tx5, [x19,#16]\n    cdbc:\t9e670009 \tfmov\td9, x0\n    cdc0:\t17ffff82 \tb\tcbc8 <pthread_cond_timedwait@@GLIBC_2.17+0x23c>\n\n000000000000cdc4 <pthread_cond_signal@@GLIBC_2.17>:\n    cdc4:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    cdc8:\t910003fd \tmov\tx29, sp\n    cdcc:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    cdd0:\taa0003f3 \tmov\tx19, x0\n    cdd4:\tf9401000 \tldr\tx0, [x0,#32]\n    cdd8:\tb9002fbf \tstr\twzr, [x29,#44]\n    cddc:\tb100041f \tcmn\tx0, #0x1\n    cde0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    cde4:\t54000ba0 \tb.eq\tcf58 <pthread_cond_signal@@GLIBC_2.17+0x194>\n    cde8:\t885ffe61 \tldaxr\tw1, [x19]\n    cdec:\t6b1f003f \tcmp\tw1, wzr\n    cdf0:\t54000061 \tb.ne\tcdfc <pthread_cond_signal@@GLIBC_2.17+0x38>\n    cdf4:\t88027e60 \tstxr\tw2, w0, [x19]\n    cdf8:\t35ffff82 \tcbnz\tw2, cde8 <pthread_cond_signal@@GLIBC_2.17+0x24>\n    cdfc:\t1a9f17e0 \tcset\tw0, eq\n    ce00:\t52800014 \tmov\tw20, #0x0                   \t// #0\n    ce04:\t34000400 \tcbz\tw0, ce84 <pthread_cond_signal@@GLIBC_2.17+0xc0>\n    ce08:\tf9400a60 \tldr\tx0, [x19,#16]\n    ce0c:\tf9400661 \tldr\tx1, [x19,#8]\n    ce10:\teb00003f \tcmp\tx1, x0\n    ce14:\t54000849 \tb.ls\tcf1c <pthread_cond_signal@@GLIBC_2.17+0x158>\n    ce18:\tf9401264 \tldr\tx4, [x19,#32]\n    ce1c:\t91000400 \tadd\tx0, x0, #0x1\n    ce20:\tb9400665 \tldr\tw5, [x19,#4]\n    ce24:\td1000481 \tsub\tx1, x4, #0x1\n    ce28:\tf9000a60 \tstr\tx0, [x19,#16]\n    ce2c:\t110004a5 \tadd\tw5, w5, #0x1\n    ce30:\tb1000c3f \tcmn\tx1, #0x3\n    ce34:\tb9000665 \tstr\tw5, [x19,#4]\n    ce38:\t54000329 \tb.ls\tce9c <pthread_cond_signal@@GLIBC_2.17+0xd8>\n    ce3c:\t528010a1 \tmov\tw1, #0x85                  \t// #133\n    ce40:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    ce44:\t4a010281 \teor\tw1, w20, w1\n    ce48:\t91001266 \tadd\tx6, x19, #0x4\n    ce4c:\taa0203e5 \tmov\tx5, x2\n    ce50:\taa0603e0 \tmov\tx0, x6\n    ce54:\t93407c21 \tsxtw\tx1, w1\n    ce58:\taa0203e3 \tmov\tx3, x2\n    ce5c:\taa1303e4 \tmov\tx4, x19\n    ce60:\tf2a08005 \tmovk\tx5, #0x400, lsl #16\n    ce64:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    ce68:\td4000001 \tsvc\t#0x0\n    ce6c:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    ce70:\t540004a8 \tb.hi\tcf04 <pthread_cond_signal@@GLIBC_2.17+0x140>\n    ce74:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    ce78:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    ce7c:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    ce80:\td65f03c0 \tret\n    ce84:\tb9002fa1 \tstr\tw1, [x29,#44]\n    ce88:\t2a0003f4 \tmov\tw20, w0\n    ce8c:\taa1303e0 \tmov\tx0, x19\n    ce90:\t2a1403e1 \tmov\tw1, w20\n    ce94:\t94000a4c \tbl\tf7c4 <__lll_lock_wait>\n    ce98:\t17ffffdc \tb\tce08 <pthread_cond_signal@@GLIBC_2.17+0x44>\n    ce9c:\tb9401080 \tldr\tw0, [x4,#16]\n    cea0:\t121c0400 \tand\tw0, w0, #0x30\n    cea4:\t7100801f \tcmp\tw0, #0x20\n    cea8:\t54fffca1 \tb.ne\tce3c <pthread_cond_signal@@GLIBC_2.17+0x78>\n    ceac:\t52801181 \tmov\tw1, #0x8c                  \t// #140\n    ceb0:\t91001260 \tadd\tx0, x19, #0x4\n    ceb4:\t4a010281 \teor\tw1, w20, w1\n    ceb8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    cebc:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    cec0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    cec4:\t93407c21 \tsxtw\tx1, w1\n    cec8:\td4000001 \tsvc\t#0x0\n    cecc:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    ced0:\t2a0303e1 \tmov\tw1, w3\n    ced4:\t54fffb48 \tb.hi\tce3c <pthread_cond_signal@@GLIBC_2.17+0x78>\n    ced8:\t885f7e60 \tldxr\tw0, [x19]\n    cedc:\t8804fe61 \tstlxr\tw4, w1, [x19]\n    cee0:\t35ffffc4 \tcbnz\tw4, ced8 <pthread_cond_signal@@GLIBC_2.17+0x114>\n    cee4:\t7100041f \tcmp\tw0, #0x1\n    cee8:\t54fffc6d \tb.le\tce74 <pthread_cond_signal@@GLIBC_2.17+0xb0>\n    ceec:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    cef0:\taa1303e0 \tmov\tx0, x19\n    cef4:\t4a010281 \teor\tw1, w20, w1\n    cef8:\t93407c21 \tsxtw\tx1, w1\n    cefc:\td4000001 \tsvc\t#0x0\n    cf00:\t17ffffdd \tb\tce74 <pthread_cond_signal@@GLIBC_2.17+0xb0>\n    cf04:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    cf08:\taa0603e0 \tmov\tx0, x6\n    cf0c:\t4a010281 \teor\tw1, w20, w1\n    cf10:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    cf14:\t93407c21 \tsxtw\tx1, w1\n    cf18:\td4000001 \tsvc\t#0x0\n    cf1c:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    cf20:\t885f7e60 \tldxr\tw0, [x19]\n    cf24:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    cf28:\t35ffffc2 \tcbnz\tw2, cf20 <pthread_cond_signal@@GLIBC_2.17+0x15c>\n    cf2c:\t7100041f \tcmp\tw0, #0x1\n    cf30:\t54fffa2d \tb.le\tce74 <pthread_cond_signal@@GLIBC_2.17+0xb0>\n    cf34:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    cf38:\taa1303e0 \tmov\tx0, x19\n    cf3c:\t4a010281 \teor\tw1, w20, w1\n    cf40:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    cf44:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    cf48:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    cf4c:\t93407c21 \tsxtw\tx1, w1\n    cf50:\td4000001 \tsvc\t#0x0\n    cf54:\t17ffffc8 \tb\tce74 <pthread_cond_signal@@GLIBC_2.17+0xb0>\n    cf58:\t885ffe61 \tldaxr\tw1, [x19]\n    cf5c:\t6b1f003f \tcmp\tw1, wzr\n    cf60:\t54000061 \tb.ne\tcf6c <pthread_cond_signal@@GLIBC_2.17+0x1a8>\n    cf64:\t88027e60 \tstxr\tw2, w0, [x19]\n    cf68:\t35ffff82 \tcbnz\tw2, cf58 <pthread_cond_signal@@GLIBC_2.17+0x194>\n    cf6c:\t54000080 \tb.eq\tcf7c <pthread_cond_signal@@GLIBC_2.17+0x1b8>\n    cf70:\tb9002fa1 \tstr\tw1, [x29,#44]\n    cf74:\t52801014 \tmov\tw20, #0x80                  \t// #128\n    cf78:\t17ffffc5 \tb\tce8c <pthread_cond_signal@@GLIBC_2.17+0xc8>\n    cf7c:\t52801014 \tmov\tw20, #0x80                  \t// #128\n    cf80:\t17ffffa2 \tb\tce08 <pthread_cond_signal@@GLIBC_2.17+0x44>\n\n000000000000cf84 <pthread_cond_broadcast@@GLIBC_2.17>:\n    cf84:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    cf88:\t910003fd \tmov\tx29, sp\n    cf8c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    cf90:\taa0003f3 \tmov\tx19, x0\n    cf94:\tf9401000 \tldr\tx0, [x0,#32]\n    cf98:\tb9002fbf \tstr\twzr, [x29,#44]\n    cf9c:\tb100041f \tcmn\tx0, #0x1\n    cfa0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    cfa4:\t540009a0 \tb.eq\td0d8 <pthread_cond_broadcast@@GLIBC_2.17+0x154>\n    cfa8:\t885ffe61 \tldaxr\tw1, [x19]\n    cfac:\t6b1f003f \tcmp\tw1, wzr\n    cfb0:\t54000061 \tb.ne\tcfbc <pthread_cond_broadcast@@GLIBC_2.17+0x38>\n    cfb4:\t88027e60 \tstxr\tw2, w0, [x19]\n    cfb8:\t35ffff82 \tcbnz\tw2, cfa8 <pthread_cond_broadcast@@GLIBC_2.17+0x24>\n    cfbc:\t1a9f17e0 \tcset\tw0, eq\n    cfc0:\t52800014 \tmov\tw20, #0x0                   \t// #0\n    cfc4:\t340005e0 \tcbz\tw0, d080 <pthread_cond_broadcast@@GLIBC_2.17+0xfc>\n    cfc8:\tf9400660 \tldr\tx0, [x19,#8]\n    cfcc:\tf9400a61 \tldr\tx1, [x19,#16]\n    cfd0:\teb01001f \tcmp\tx0, x1\n    cfd4:\t54000629 \tb.ls\td098 <pthread_cond_broadcast@@GLIBC_2.17+0x114>\n    cfd8:\tb9402e61 \tldr\tw1, [x19,#44]\n    cfdc:\t531f7805 \tlsl\tw5, w0, #1\n    cfe0:\tf9000a60 \tstr\tx0, [x19,#16]\n    cfe4:\t11000421 \tadd\tw1, w1, #0x1\n    cfe8:\tf9000e60 \tstr\tx0, [x19,#24]\n    cfec:\tb9002e61 \tstr\tw1, [x19,#44]\n    cff0:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    cff4:\tb9000665 \tstr\tw5, [x19,#4]\n    cff8:\t885f7e60 \tldxr\tw0, [x19]\n    cffc:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    d000:\t35ffffc2 \tcbnz\tw2, cff8 <pthread_cond_broadcast@@GLIBC_2.17+0x74>\n    d004:\t7100041f \tcmp\tw0, #0x1\n    d008:\t540007ec \tb.gt\td104 <pthread_cond_broadcast@@GLIBC_2.17+0x180>\n    d00c:\tf9401264 \tldr\tx4, [x19,#32]\n    d010:\tb100049f \tcmn\tx4, #0x1\n    d014:\t540001e0 \tb.eq\td050 <pthread_cond_broadcast@@GLIBC_2.17+0xcc>\n    d018:\tb9401080 \tldr\tw0, [x4,#16]\n    d01c:\t373801a0 \ttbnz\tw0, #7, d050 <pthread_cond_broadcast@@GLIBC_2.17+0xcc>\n    d020:\td1000481 \tsub\tx1, x4, #0x1\n    d024:\tb1000c3f \tcmn\tx1, #0x3\n    d028:\t540004c9 \tb.ls\td0c0 <pthread_cond_broadcast@@GLIBC_2.17+0x13c>\n    d02c:\t91001260 \tadd\tx0, x19, #0x4\n    d030:\td2801081 \tmov\tx1, #0x84                  \t// #132\n    d034:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    d038:\tb2407be3 \tmov\tx3, #0x7fffffff            \t// #2147483647\n    d03c:\t93407ca5 \tsxtw\tx5, w5\n    d040:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    d044:\td4000001 \tsvc\t#0x0\n    d048:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    d04c:\t54000329 \tb.ls\td0b0 <pthread_cond_broadcast@@GLIBC_2.17+0x12c>\n    d050:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    d054:\t91001260 \tadd\tx0, x19, #0x4\n    d058:\t4a010281 \teor\tw1, w20, w1\n    d05c:\tb2407be2 \tmov\tx2, #0x7fffffff            \t// #2147483647\n    d060:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    d064:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    d068:\t93407c21 \tsxtw\tx1, w1\n    d06c:\td4000001 \tsvc\t#0x0\n    d070:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d074:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    d078:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    d07c:\td65f03c0 \tret\n    d080:\tb9002fa1 \tstr\tw1, [x29,#44]\n    d084:\t2a0003f4 \tmov\tw20, w0\n    d088:\taa1303e0 \tmov\tx0, x19\n    d08c:\t2a1403e1 \tmov\tw1, w20\n    d090:\t940009cd \tbl\tf7c4 <__lll_lock_wait>\n    d094:\t17ffffcd \tb\tcfc8 <pthread_cond_broadcast@@GLIBC_2.17+0x44>\n    d098:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    d09c:\t885f7e60 \tldxr\tw0, [x19]\n    d0a0:\t8802fe61 \tstlxr\tw2, w1, [x19]\n    d0a4:\t35ffffc2 \tcbnz\tw2, d09c <pthread_cond_broadcast@@GLIBC_2.17+0x118>\n    d0a8:\t7100041f \tcmp\tw0, #0x1\n    d0ac:\t540003ec \tb.gt\td128 <pthread_cond_broadcast@@GLIBC_2.17+0x1a4>\n    d0b0:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d0b4:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    d0b8:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    d0bc:\td65f03c0 \tret\n    d0c0:\t121c0400 \tand\tw0, w0, #0x30\n    d0c4:\t7100801f \tcmp\tw0, #0x20\n    d0c8:\t54fffb21 \tb.ne\td02c <pthread_cond_broadcast@@GLIBC_2.17+0xa8>\n    d0cc:\t91001260 \tadd\tx0, x19, #0x4\n    d0d0:\td2801181 \tmov\tx1, #0x8c                  \t// #140\n    d0d4:\t17ffffd8 \tb\td034 <pthread_cond_broadcast@@GLIBC_2.17+0xb0>\n    d0d8:\t885ffe61 \tldaxr\tw1, [x19]\n    d0dc:\t6b1f003f \tcmp\tw1, wzr\n    d0e0:\t54000061 \tb.ne\td0ec <pthread_cond_broadcast@@GLIBC_2.17+0x168>\n    d0e4:\t88027e60 \tstxr\tw2, w0, [x19]\n    d0e8:\t35ffff82 \tcbnz\tw2, d0d8 <pthread_cond_broadcast@@GLIBC_2.17+0x154>\n    d0ec:\t54000080 \tb.eq\td0fc <pthread_cond_broadcast@@GLIBC_2.17+0x178>\n    d0f0:\tb9002fa1 \tstr\tw1, [x29,#44]\n    d0f4:\t52801014 \tmov\tw20, #0x80                  \t// #128\n    d0f8:\t17ffffe4 \tb\td088 <pthread_cond_broadcast@@GLIBC_2.17+0x104>\n    d0fc:\t52801014 \tmov\tw20, #0x80                  \t// #128\n    d100:\t17ffffb2 \tb\tcfc8 <pthread_cond_broadcast@@GLIBC_2.17+0x44>\n    d104:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    d108:\taa1303e0 \tmov\tx0, x19\n    d10c:\t4a010281 \teor\tw1, w20, w1\n    d110:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    d114:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    d118:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    d11c:\t93407c21 \tsxtw\tx1, w1\n    d120:\td4000001 \tsvc\t#0x0\n    d124:\t17ffffba \tb\td00c <pthread_cond_broadcast@@GLIBC_2.17+0x88>\n    d128:\t52801021 \tmov\tw1, #0x81                  \t// #129\n    d12c:\taa1303e0 \tmov\tx0, x19\n    d130:\t4a010281 \teor\tw1, w20, w1\n    d134:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    d138:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    d13c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    d140:\t93407c21 \tsxtw\tx1, w1\n    d144:\td4000001 \tsvc\t#0x0\n    d148:\t17ffffda \tb\td0b0 <pthread_cond_broadcast@@GLIBC_2.17+0x12c>\n\n000000000000d14c <pthread_condattr_init>:\n    d14c:\tf900001f \tstr\txzr, [x0]\n    d150:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d154:\td65f03c0 \tret\n\n000000000000d158 <pthread_condattr_destroy>:\n    d158:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d15c:\td65f03c0 \tret\n\n000000000000d160 <pthread_condattr_getpshared>:\n    d160:\tb9400002 \tldr\tw2, [x0]\n    d164:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d168:\t12000042 \tand\tw2, w2, #0x1\n    d16c:\tb9000022 \tstr\tw2, [x1]\n    d170:\td65f03c0 \tret\n\n000000000000d174 <pthread_condattr_setpshared>:\n    d174:\t7100043f \tcmp\tw1, #0x1\n    d178:\t54000108 \tb.hi\td198 <pthread_condattr_setpshared+0x24>\n    d17c:\tb9400002 \tldr\tw2, [x0]\n    d180:\t52800003 \tmov\tw3, #0x0                   \t// #0\n    d184:\t121f7842 \tand\tw2, w2, #0xfffffffe\n    d188:\t2a020021 \torr\tw1, w1, w2\n    d18c:\tb9000001 \tstr\tw1, [x0]\n    d190:\t2a0303e0 \tmov\tw0, w3\n    d194:\td65f03c0 \tret\n    d198:\t528002c3 \tmov\tw3, #0x16                  \t// #22\n    d19c:\t2a0303e0 \tmov\tw0, w3\n    d1a0:\td65f03c0 \tret\n\n000000000000d1a4 <pthread_condattr_getclock>:\n    d1a4:\tb9400002 \tldr\tw2, [x0]\n    d1a8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d1ac:\td3410442 \tubfx\tx2, x2, #1, #1\n    d1b0:\tb9000022 \tstr\tw2, [x1]\n    d1b4:\td65f03c0 \tret\n\n000000000000d1b8 <pthread_condattr_setclock>:\n    d1b8:\t7100043f \tcmp\tw1, #0x1\n    d1bc:\taa0003e2 \tmov\tx2, x0\n    d1c0:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    d1c4:\t54000049 \tb.ls\td1cc <pthread_condattr_setclock+0x14>\n    d1c8:\td65f03c0 \tret\n    d1cc:\tb9400043 \tldr\tw3, [x2]\n    d1d0:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d1d4:\t121e7863 \tand\tw3, w3, #0xfffffffd\n    d1d8:\t2a010461 \torr\tw1, w3, w1, lsl #1\n    d1dc:\tb9000041 \tstr\tw1, [x2]\n    d1e0:\td65f03c0 \tret\n\n000000000000d1e4 <pthread_spin_init>:\n    d1e4:\taa0003e1 \tmov\tx1, x0\n    d1e8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d1ec:\tb9000020 \tstr\tw0, [x1]\n    d1f0:\td65f03c0 \tret\n\n000000000000d1f4 <pthread_spin_destroy>:\n    d1f4:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d1f8:\td65f03c0 \tret\n\n000000000000d1fc <pthread_spin_lock>:\n    d1fc:\td10043ff \tsub\tsp, sp, #0x10\n    d200:\t52800024 \tmov\tw4, #0x1                   \t// #1\n    d204:\t885ffc01 \tldaxr\tw1, [x0]\n    d208:\t88027c04 \tstxr\tw2, w4, [x0]\n    d20c:\t35ffffc2 \tcbnz\tw2, d204 <pthread_spin_lock+0x8>\n    d210:\tb90007e1 \tstr\tw1, [sp,#4]\n    d214:\tb94007e1 \tldr\tw1, [sp,#4]\n    d218:\t340002e1 \tcbz\tw1, d274 <pthread_spin_lock+0x78>\n    d21c:\t910033e3 \tadd\tx3, sp, #0xc\n    d220:\tb9400001 \tldr\tw1, [x0]\n    d224:\t340000e1 \tcbz\tw1, d240 <pthread_spin_lock+0x44>\n    d228:\t52807d01 \tmov\tw1, #0x3e8                 \t// #1000\n    d22c:\t14000002 \tb\td234 <pthread_spin_lock+0x38>\n    d230:\t34000081 \tcbz\tw1, d240 <pthread_spin_lock+0x44>\n    d234:\tb9400002 \tldr\tw2, [x0]\n    d238:\t51000421 \tsub\tw1, w1, #0x1\n    d23c:\t35ffffa2 \tcbnz\tw2, d230 <pthread_spin_lock+0x34>\n    d240:\tb9000fff \tstr\twzr, [sp,#12]\n    d244:\tb9400061 \tldr\tw1, [x3]\n    d248:\t885ffc02 \tldaxr\tw2, [x0]\n    d24c:\t6b01005f \tcmp\tw2, w1\n    d250:\t54000061 \tb.ne\td25c <pthread_spin_lock+0x60>\n    d254:\t88057c04 \tstxr\tw5, w4, [x0]\n    d258:\t35ffff85 \tcbnz\tw5, d248 <pthread_spin_lock+0x4c>\n    d25c:\t54000040 \tb.eq\td264 <pthread_spin_lock+0x68>\n    d260:\tb9000062 \tstr\tw2, [x3]\n    d264:\tb9400fe1 \tldr\tw1, [sp,#12]\n    d268:\tb9000be1 \tstr\tw1, [sp,#8]\n    d26c:\tb9400be1 \tldr\tw1, [sp,#8]\n    d270:\t35fffd81 \tcbnz\tw1, d220 <pthread_spin_lock+0x24>\n    d274:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d278:\t910043ff \tadd\tsp, sp, #0x10\n    d27c:\td65f03c0 \tret\n\n000000000000d280 <pthread_spin_trylock>:\n    d280:\td10043ff \tsub\tsp, sp, #0x10\n    d284:\t52800022 \tmov\tw2, #0x1                   \t// #1\n    d288:\t885ffc01 \tldaxr\tw1, [x0]\n    d28c:\t88037c02 \tstxr\tw3, w2, [x0]\n    d290:\t35ffffc3 \tcbnz\tw3, d288 <pthread_spin_trylock+0x8>\n    d294:\tb9000fe1 \tstr\tw1, [sp,#12]\n    d298:\tb9400fe0 \tldr\tw0, [sp,#12]\n    d29c:\t910043ff \tadd\tsp, sp, #0x10\n    d2a0:\t6b1f001f \tcmp\tw0, wzr\n    d2a4:\t52800200 \tmov\tw0, #0x10                  \t// #16\n    d2a8:\t1a9f1000 \tcsel\tw0, w0, wzr, ne\n    d2ac:\td65f03c0 \tret\n\n000000000000d2b0 <pthread_spin_unlock>:\n    d2b0:\taa0003e1 \tmov\tx1, x0\n    d2b4:\td5033bbf \tdmb\tish\n    d2b8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d2bc:\tb9000020 \tstr\tw0, [x1]\n    d2c0:\td65f03c0 \tret\n\n000000000000d2c4 <pthread_barrier_init>:\n    d2c4:\t340002c2 \tcbz\tw2, d31c <pthread_barrier_init+0x58>\n    d2c8:\tb40002e1 \tcbz\tx1, d324 <pthread_barrier_init+0x60>\n    d2cc:\tb9400021 \tldr\tw1, [x1]\n    d2d0:\t34000161 \tcbz\tw1, d2fc <pthread_barrier_init+0x38>\n    d2d4:\t7100043f \tcmp\tw1, #0x1\n    d2d8:\t54000221 \tb.ne\td31c <pthread_barrier_init+0x58>\n    d2dc:\t52800003 \tmov\tw3, #0x0                   \t// #0\n    d2e0:\tb900041f \tstr\twzr, [x0,#4]\n    d2e4:\tb9000802 \tstr\tw2, [x0,#8]\n    d2e8:\tb9000c02 \tstr\tw2, [x0,#12]\n    d2ec:\tb9000003 \tstr\tw3, [x0]\n    d2f0:\tb9001003 \tstr\tw3, [x0,#16]\n    d2f4:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d2f8:\td65f03c0 \tret\n    d2fc:\tb9000401 \tstr\tw1, [x0,#4]\n    d300:\t52801003 \tmov\tw3, #0x80                  \t// #128\n    d304:\tb9000802 \tstr\tw2, [x0,#8]\n    d308:\tb9000c02 \tstr\tw2, [x0,#12]\n    d30c:\tb9000001 \tstr\tw1, [x0]\n    d310:\tb9001003 \tstr\tw3, [x0,#16]\n    d314:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d318:\td65f03c0 \tret\n    d31c:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    d320:\td65f03c0 \tret\n    d324:\tb0000021 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n    d328:\t912ee021 \tadd\tx1, x1, #0xbb8\n    d32c:\t17ffffe8 \tb\td2cc <pthread_barrier_init+0x8>\n\n000000000000d330 <pthread_barrier_destroy>:\n    d330:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    d334:\t910003fd \tmov\tx29, sp\n    d338:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    d33c:\taa0003f3 \tmov\tx19, x0\n    d340:\t91001014 \tadd\tx20, x0, #0x4\n    d344:\tb9002fbf \tstr\twzr, [x29,#44]\n    d348:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    d34c:\t885ffe82 \tldaxr\tw2, [x20]\n    d350:\t6b1f005f \tcmp\tw2, wzr\n    d354:\t54000061 \tb.ne\td360 <pthread_barrier_destroy+0x30>\n    d358:\t88017e80 \tstxr\tw1, w0, [x20]\n    d35c:\t35ffff81 \tcbnz\tw1, d34c <pthread_barrier_destroy+0x1c>\n    d360:\t54000141 \tb.ne\td388 <pthread_barrier_destroy+0x58>\n    d364:\tb9400a61 \tldr\tw1, [x19,#8]\n    d368:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    d36c:\tb9400e60 \tldr\tw0, [x19,#12]\n    d370:\t6b00003f \tcmp\tw1, w0\n    d374:\t540001e1 \tb.ne\td3b0 <pthread_barrier_destroy+0x80>\n    d378:\t2a0403e0 \tmov\tw0, w4\n    d37c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    d380:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    d384:\td65f03c0 \tret\n    d388:\tb9401261 \tldr\tw1, [x19,#16]\n    d38c:\taa1403e0 \tmov\tx0, x20\n    d390:\tb9002fa2 \tstr\tw2, [x29,#44]\n    d394:\t52190021 \teor\tw1, w1, #0x80\n    d398:\t9400090b \tbl\tf7c4 <__lll_lock_wait>\n    d39c:\tb9400a61 \tldr\tw1, [x19,#8]\n    d3a0:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    d3a4:\tb9400e60 \tldr\tw0, [x19,#12]\n    d3a8:\t6b00003f \tcmp\tw1, w0\n    d3ac:\t54fffe60 \tb.eq\td378 <pthread_barrier_destroy+0x48>\n    d3b0:\t885f7e80 \tldxr\tw0, [x20]\n    d3b4:\t8801fe84 \tstlxr\tw1, w4, [x20]\n    d3b8:\t35ffffc1 \tcbnz\tw1, d3b0 <pthread_barrier_destroy+0x80>\n    d3bc:\t7100041f \tcmp\tw0, #0x1\n    d3c0:\t52800204 \tmov\tw4, #0x10                  \t// #16\n    d3c4:\t54fffdad \tb.le\td378 <pthread_barrier_destroy+0x48>\n    d3c8:\tb9401261 \tldr\tw1, [x19,#16]\n    d3cc:\taa1403e0 \tmov\tx0, x20\n    d3d0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    d3d4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    d3d8:\t52000021 \teor\tw1, w1, #0x1\n    d3dc:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    d3e0:\t93407c21 \tsxtw\tx1, w1\n    d3e4:\td4000001 \tsvc\t#0x0\n    d3e8:\t17ffffe4 \tb\td378 <pthread_barrier_destroy+0x48>\n\n000000000000d3ec <pthread_barrier_wait>:\n    d3ec:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    d3f0:\t910003fd \tmov\tx29, sp\n    d3f4:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    d3f8:\taa0003f3 \tmov\tx19, x0\n    d3fc:\t91001014 \tadd\tx20, x0, #0x4\n    d400:\tb9002fbf \tstr\twzr, [x29,#44]\n    d404:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    d408:\t885ffe82 \tldaxr\tw2, [x20]\n    d40c:\t6b1f005f \tcmp\tw2, wzr\n    d410:\t54000061 \tb.ne\td41c <pthread_barrier_wait+0x30>\n    d414:\t88017e80 \tstxr\tw1, w0, [x20]\n    d418:\t35ffff81 \tcbnz\tw1, d408 <pthread_barrier_wait+0x1c>\n    d41c:\t54000481 \tb.ne\td4ac <pthread_barrier_wait+0xc0>\n    d420:\tb9400a60 \tldr\tw0, [x19,#8]\n    d424:\t51000400 \tsub\tw0, w0, #0x1\n    d428:\tb9000a60 \tstr\tw0, [x19,#8]\n    d42c:\t340007c0 \tcbz\tw0, d524 <pthread_barrier_wait+0x138>\n    d430:\tb9400264 \tldr\tw4, [x19]\n    d434:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    d438:\t885f7e80 \tldxr\tw0, [x20]\n    d43c:\t8802fe81 \tstlxr\tw2, w1, [x20]\n    d440:\t35ffffc2 \tcbnz\tw2, d438 <pthread_barrier_wait+0x4c>\n    d444:\t7100041f \tcmp\tw0, #0x1\n    d448:\t540003ec \tb.gt\td4c4 <pthread_barrier_wait+0xd8>\n    d44c:\t2a0403e5 \tmov\tw5, w4\n    d450:\taa1303e0 \tmov\tx0, x19\n    d454:\tb9801261 \tldrsw\tx1, [x19,#16]\n    d458:\taa0503e2 \tmov\tx2, x5\n    d45c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    d460:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    d464:\td4000001 \tsvc\t#0x0\n    d468:\tb9400261 \tldr\tw1, [x19]\n    d46c:\t6b04003f \tcmp\tw1, w4\n    d470:\t54ffff00 \tb.eq\td450 <pthread_barrier_wait+0x64>\n    d474:\t2a0303e4 \tmov\tw4, w3\n    d478:\tb9400e60 \tldr\tw0, [x19,#12]\n    d47c:\t91002262 \tadd\tx2, x19, #0x8\n    d480:\t885ffc41 \tldaxr\tw1, [x2]\n    d484:\t11000423 \tadd\tw3, w1, #0x1\n    d488:\t88057c43 \tstxr\tw5, w3, [x2]\n    d48c:\t35ffffa5 \tcbnz\tw5, d480 <pthread_barrier_wait+0x94>\n    d490:\t11000421 \tadd\tw1, w1, #0x1\n    d494:\t6b00003f \tcmp\tw1, w0\n    d498:\t54000280 \tb.eq\td4e8 <pthread_barrier_wait+0xfc>\n    d49c:\t2a0403e0 \tmov\tw0, w4\n    d4a0:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    d4a4:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    d4a8:\td65f03c0 \tret\n    d4ac:\tb9401261 \tldr\tw1, [x19,#16]\n    d4b0:\taa1403e0 \tmov\tx0, x20\n    d4b4:\tb9002fa2 \tstr\tw2, [x29,#44]\n    d4b8:\t52190021 \teor\tw1, w1, #0x80\n    d4bc:\t940008c2 \tbl\tf7c4 <__lll_lock_wait>\n    d4c0:\t17ffffd8 \tb\td420 <pthread_barrier_wait+0x34>\n    d4c4:\tb9401261 \tldr\tw1, [x19,#16]\n    d4c8:\taa1403e0 \tmov\tx0, x20\n    d4cc:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    d4d0:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    d4d4:\t52000021 \teor\tw1, w1, #0x1\n    d4d8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    d4dc:\t93407c21 \tsxtw\tx1, w1\n    d4e0:\td4000001 \tsvc\t#0x0\n    d4e4:\t17ffffda \tb\td44c <pthread_barrier_wait+0x60>\n    d4e8:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    d4ec:\t885f7e80 \tldxr\tw0, [x20]\n    d4f0:\t8802fe81 \tstlxr\tw2, w1, [x20]\n    d4f4:\t35ffffc2 \tcbnz\tw2, d4ec <pthread_barrier_wait+0x100>\n    d4f8:\t7100041f \tcmp\tw0, #0x1\n    d4fc:\t54fffd0d \tb.le\td49c <pthread_barrier_wait+0xb0>\n    d500:\tb9401261 \tldr\tw1, [x19,#16]\n    d504:\taa1403e0 \tmov\tx0, x20\n    d508:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    d50c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    d510:\t52000021 \teor\tw1, w1, #0x1\n    d514:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    d518:\t93407c21 \tsxtw\tx1, w1\n    d51c:\td4000001 \tsvc\t#0x0\n    d520:\t17ffffdf \tb\td49c <pthread_barrier_wait+0xb0>\n    d524:\tb9401261 \tldr\tw1, [x19,#16]\n    d528:\taa1303e0 \tmov\tx0, x19\n    d52c:\tb9400264 \tldr\tw4, [x19]\n    d530:\tb2407be2 \tmov\tx2, #0x7fffffff            \t// #2147483647\n    d534:\t52000021 \teor\tw1, w1, #0x1\n    d538:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    d53c:\t11000484 \tadd\tw4, w4, #0x1\n    d540:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    d544:\tb9000264 \tstr\tw4, [x19]\n    d548:\t93407c21 \tsxtw\tx1, w1\n    d54c:\td4000001 \tsvc\t#0x0\n    d550:\t12800004 \tmov\tw4, #0xffffffff            \t// #-1\n    d554:\t17ffffc9 \tb\td478 <pthread_barrier_wait+0x8c>\n\n000000000000d558 <pthread_barrierattr_init>:\n    d558:\tb900001f \tstr\twzr, [x0]\n    d55c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d560:\td65f03c0 \tret\n\n000000000000d564 <pthread_barrierattr_destroy>:\n    d564:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d568:\td65f03c0 \tret\n\n000000000000d56c <pthread_barrierattr_getpshared>:\n    d56c:\tb9400002 \tldr\tw2, [x0]\n    d570:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d574:\tb9000022 \tstr\tw2, [x1]\n    d578:\td65f03c0 \tret\n\n000000000000d57c <pthread_barrierattr_setpshared>:\n    d57c:\t7100043f \tcmp\tw1, #0x1\n    d580:\t54000088 \tb.hi\td590 <pthread_barrierattr_setpshared+0x14>\n    d584:\tb9000001 \tstr\tw1, [x0]\n    d588:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d58c:\td65f03c0 \tret\n    d590:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    d594:\td65f03c0 \tret\n\n000000000000d598 <__pthread_key_create>:\n    d598:\tf0000108 \tadrp\tx8, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    d59c:\td10043ff \tsub\tsp, sp, #0x10\n    d5a0:\t910a2103 \tadd\tx3, x8, #0x288\n    d5a4:\td2800004 \tmov\tx4, #0x0                   \t// #0\n    d5a8:\t14000005 \tb\td5bc <__pthread_key_create+0x24>\n    d5ac:\t91000484 \tadd\tx4, x4, #0x1\n    d5b0:\t91004063 \tadd\tx3, x3, #0x10\n    d5b4:\tf110009f \tcmp\tx4, #0x400\n    d5b8:\t54000280 \tb.eq\td608 <__pthread_key_create+0x70>\n    d5bc:\tf9400062 \tldr\tx2, [x3]\n    d5c0:\t91000845 \tadd\tx5, x2, #0x2\n    d5c4:\t92400046 \tand\tx6, x2, #0x1\n    d5c8:\teb05005f \tcmp\tx2, x5\n    d5cc:\t3707ff02 \ttbnz\tw2, #0, d5ac <__pthread_key_create+0x14>\n    d5d0:\t54fffee2 \tb.cs\td5ac <__pthread_key_create+0x14>\n    d5d4:\tf90007e2 \tstr\tx2, [sp,#8]\n    d5d8:\t91000445 \tadd\tx5, x2, #0x1\n    d5dc:\tc85ffc67 \tldaxr\tx7, [x3]\n    d5e0:\teb0200ff \tcmp\tx7, x2\n    d5e4:\t54000061 \tb.ne\td5f0 <__pthread_key_create+0x58>\n    d5e8:\tc8097c65 \tstxr\tw9, x5, [x3]\n    d5ec:\t35ffff89 \tcbnz\tw9, d5dc <__pthread_key_create+0x44>\n    d5f0:\t54fffde1 \tb.ne\td5ac <__pthread_key_create+0x14>\n    d5f4:\t910a2108 \tadd\tx8, x8, #0x288\n    d5f8:\t8b041108 \tadd\tx8, x8, x4, lsl #4\n    d5fc:\tf9000501 \tstr\tx1, [x8,#8]\n    d600:\tb9000004 \tstr\tw4, [x0]\n    d604:\t14000002 \tb\td60c <__pthread_key_create+0x74>\n    d608:\t52800166 \tmov\tw6, #0xb                   \t// #11\n    d60c:\t2a0603e0 \tmov\tw0, w6\n    d610:\t910043ff \tadd\tsp, sp, #0x10\n    d614:\td65f03c0 \tret\n\n000000000000d618 <pthread_key_delete>:\n    d618:\t710ffc1f \tcmp\tw0, #0x3ff\n    d61c:\td10043ff \tsub\tsp, sp, #0x10\n    d620:\t54000208 \tb.hi\td660 <pthread_key_delete+0x48>\n    d624:\tf0000101 \tadrp\tx1, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    d628:\td37c7c00 \tubfiz\tx0, x0, #4, #32\n    d62c:\t910a2021 \tadd\tx1, x1, #0x288\n    d630:\t8b000022 \tadd\tx2, x1, x0\n    d634:\tf8606820 \tldr\tx0, [x1,x0]\n    d638:\t36000140 \ttbz\tw0, #0, d660 <pthread_key_delete+0x48>\n    d63c:\t92407c01 \tand\tx1, x0, #0xffffffff\n    d640:\t11000400 \tadd\tw0, w0, #0x1\n    d644:\tf90007e1 \tstr\tx1, [sp,#8]\n    d648:\tc85ffc43 \tldaxr\tx3, [x2]\n    d64c:\teb01007f \tcmp\tx3, x1\n    d650:\t54000061 \tb.ne\td65c <pthread_key_delete+0x44>\n    d654:\tc8047c40 \tstxr\tw4, x0, [x2]\n    d658:\t35ffff84 \tcbnz\tw4, d648 <pthread_key_delete+0x30>\n    d65c:\t54000080 \tb.eq\td66c <pthread_key_delete+0x54>\n    d660:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    d664:\t910043ff \tadd\tsp, sp, #0x10\n    d668:\td65f03c0 \tret\n    d66c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    d670:\t17fffffd \tb\td664 <pthread_key_delete+0x4c>\n\n000000000000d674 <__pthread_getspecific>:\n    d674:\t71007c1f \tcmp\tw0, #0x1f\n    d678:\t540002a8 \tb.hi\td6cc <__pthread_getspecific+0x58>\n    d67c:\t2a0003e1 \tmov\tw1, w0\n    d680:\td53bd042 \tmrs\tx2, tpidr_el0\n    d684:\t8b011041 \tadd\tx1, x2, x1, lsl #4\n    d688:\td1178021 \tsub\tx1, x1, #0x5e0\n    d68c:\tf9400423 \tldr\tx3, [x1,#8]\n    d690:\tb40001a3 \tcbz\tx3, d6c4 <__pthread_getspecific+0x50>\n    d694:\td37c7c02 \tubfiz\tx2, x0, #4, #32\n    d698:\taa0303e0 \tmov\tx0, x3\n    d69c:\tf0000103 \tadrp\tx3, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    d6a0:\tf9400024 \tldr\tx4, [x1]\n    d6a4:\t910a2063 \tadd\tx3, x3, #0x288\n    d6a8:\tf8626862 \tldr\tx2, [x3,x2]\n    d6ac:\teb02009f \tcmp\tx4, x2\n    d6b0:\t54000041 \tb.ne\td6b8 <__pthread_getspecific+0x44>\n    d6b4:\td65f03c0 \tret\n    d6b8:\tf900043f \tstr\txzr, [x1,#8]\n    d6bc:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    d6c0:\td65f03c0 \tret\n    d6c4:\taa0303e0 \tmov\tx0, x3\n    d6c8:\td65f03c0 \tret\n    d6cc:\t710ffc1f \tcmp\tw0, #0x3ff\n    d6d0:\t54000168 \tb.hi\td6fc <__pthread_getspecific+0x88>\n    d6d4:\td3457c01 \tubfx\tx1, x0, #5, #27\n    d6d8:\td53bd043 \tmrs\tx3, tpidr_el0\n    d6dc:\td11bc063 \tsub\tx3, x3, #0x6f0\n    d6e0:\t91018821 \tadd\tx1, x1, #0x62\n    d6e4:\t12001002 \tand\tw2, w0, #0x1f\n    d6e8:\tf8617861 \tldr\tx1, [x3,x1,lsl #3]\n    d6ec:\tb40000c1 \tcbz\tx1, d704 <__pthread_getspecific+0x90>\n    d6f0:\td37c1042 \tubfiz\tx2, x2, #4, #5\n    d6f4:\t8b020021 \tadd\tx1, x1, x2\n    d6f8:\t17ffffe5 \tb\td68c <__pthread_getspecific+0x18>\n    d6fc:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    d700:\td65f03c0 \tret\n    d704:\taa0103e0 \tmov\tx0, x1\n    d708:\td65f03c0 \tret\n\n000000000000d70c <__pthread_setspecific>:\n    d70c:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    d710:\t71007c1f \tcmp\tw0, #0x1f\n    d714:\t910003fd \tmov\tx29, sp\n    d718:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    d71c:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    d720:\tf9001bf7 \tstr\tx23, [sp,#48]\n    d724:\taa0103f6 \tmov\tx22, x1\n    d728:\td53bd054 \tmrs\tx20, tpidr_el0\n    d72c:\t540003c8 \tb.hi\td7a4 <__pthread_setspecific+0x98>\n    d730:\t2a0003e2 \tmov\tw2, w0\n    d734:\tf0000103 \tadrp\tx3, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    d738:\td37cec40 \tlsl\tx0, x2, #4\n    d73c:\t910a2063 \tadd\tx3, x3, #0x288\n    d740:\t528002c4 \tmov\tw4, #0x16                  \t// #22\n    d744:\tf8606863 \tldr\tx3, [x3,x0]\n    d748:\t2a0303f5 \tmov\tw21, w3\n    d74c:\t370000e3 \ttbnz\tw3, #0, d768 <__pthread_setspecific+0x5c>\n    d750:\t2a0403e0 \tmov\tw0, w4\n    d754:\tf9401bf7 \tldr\tx23, [sp,#48]\n    d758:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    d75c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    d760:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    d764:\td65f03c0 \tret\n    d768:\t91004440 \tadd\tx0, x2, #0x11\n    d76c:\td11bc294 \tsub\tx20, x20, #0x6f0\n    d770:\t8b001280 \tadd\tx0, x20, x0, lsl #4\n    d774:\tb4000061 \tcbz\tx1, d780 <__pthread_setspecific+0x74>\n    d778:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    d77c:\t39104281 \tstrb\tw1, [x20,#1040]\n    d780:\tf9000416 \tstr\tx22, [x0,#8]\n    d784:\tf9000015 \tstr\tx21, [x0]\n    d788:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    d78c:\tf9401bf7 \tldr\tx23, [sp,#48]\n    d790:\t2a0403e0 \tmov\tw0, w4\n    d794:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    d798:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    d79c:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    d7a0:\td65f03c0 \tret\n    d7a4:\t710ffc1f \tcmp\tw0, #0x3ff\n    d7a8:\t528002c4 \tmov\tw4, #0x16                  \t// #22\n    d7ac:\t54fffd28 \tb.hi\td750 <__pthread_setspecific+0x44>\n    d7b0:\tf0000102 \tadrp\tx2, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n    d7b4:\td37c7c01 \tubfiz\tx1, x0, #4, #32\n    d7b8:\t910a2042 \tadd\tx2, x2, #0x288\n    d7bc:\tf8616841 \tldr\tx1, [x2,x1]\n    d7c0:\t2a0103f5 \tmov\tw21, w1\n    d7c4:\t3607fc61 \ttbz\tw1, #0, d750 <__pthread_setspecific+0x44>\n    d7c8:\td3457c17 \tubfx\tx23, x0, #5, #27\n    d7cc:\t12001013 \tand\tw19, w0, #0x1f\n    d7d0:\t8b170e97 \tadd\tx23, x20, x23, lsl #3\n    d7d4:\td10f82f7 \tsub\tx23, x23, #0x3e0\n    d7d8:\tf94002e0 \tldr\tx0, [x23]\n    d7dc:\tb40000a0 \tcbz\tx0, d7f0 <__pthread_setspecific+0xe4>\n    d7e0:\td37c1273 \tubfiz\tx19, x19, #4, #5\n    d7e4:\td11bc294 \tsub\tx20, x20, #0x6f0\n    d7e8:\t8b130000 \tadd\tx0, x0, x19\n    d7ec:\t17ffffe3 \tb\td778 <__pthread_setspecific+0x6c>\n    d7f0:\tb4fffcd6 \tcbz\tx22, d788 <__pthread_setspecific+0x7c>\n    d7f4:\td2800400 \tmov\tx0, #0x20                  \t// #32\n    d7f8:\td2800201 \tmov\tx1, #0x10                  \t// #16\n    d7fc:\t97ffde3d \tbl\t50f0 <calloc@plt>\n    d800:\tb4000060 \tcbz\tx0, d80c <__pthread_setspecific+0x100>\n    d804:\tf90002e0 \tstr\tx0, [x23]\n    d808:\t17fffff6 \tb\td7e0 <__pthread_setspecific+0xd4>\n    d80c:\t52800184 \tmov\tw4, #0xc                   \t// #12\n    d810:\t17ffffd0 \tb\td750 <__pthread_setspecific+0x44>\n\n000000000000d814 <pthread_sigmask>:\n    d814:\ta9b67bfd \tstp\tx29, x30, [sp,#-160]!\n    d818:\taa0103e3 \tmov\tx3, x1\n    d81c:\t910003fd \tmov\tx29, sp\n    d820:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    d824:\t2a0003f4 \tmov\tw20, w0\n    d828:\taa0203f3 \tmov\tx19, x2\n    d82c:\tb4000081 \tcbz\tx1, d83c <pthread_sigmask+0x28>\n    d830:\tf9400020 \tldr\tx0, [x1]\n    d834:\tf261041f \ttst\tx0, #0x180000000\n    d838:\t54000181 \tb.ne\td868 <pthread_sigmask+0x54>\n    d83c:\taa0303e1 \tmov\tx1, x3\n    d840:\t93407e80 \tsxtw\tx0, w20\n    d844:\taa1303e2 \tmov\tx2, x19\n    d848:\td2800103 \tmov\tx3, #0x8                   \t// #8\n    d84c:\td28010e8 \tmov\tx8, #0x87                  \t// #135\n    d850:\td4000001 \tsvc\t#0x0\n    d854:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    d858:\t5a8097e0 \tcsneg\tw0, wzr, w0, ls\n    d85c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    d860:\ta8ca7bfd \tldp\tx29, x30, [sp],#160\n    d864:\td65f03c0 \tret\n    d868:\t910083a3 \tadd\tx3, x29, #0x20\n    d86c:\td2801002 \tmov\tx2, #0x80                  \t// #128\n    d870:\taa0303e0 \tmov\tx0, x3\n    d874:\t97ffddbb \tbl\t4f60 <memcpy@plt>\n    d878:\taa0003e1 \tmov\tx1, x0\n    d87c:\tf94013a0 \tldr\tx0, [x29,#32]\n    d880:\t925ff400 \tand\tx0, x0, #0xfffffffe7fffffff\n    d884:\tf90013a0 \tstr\tx0, [x29,#32]\n    d888:\t17ffffee \tb\td840 <pthread_sigmask+0x2c>\n\n000000000000d88c <pthread_kill>:\n    d88c:\tb940d003 \tldr\tw3, [x0,#208]\n    d890:\t93407c22 \tsxtw\tx2, w1\n    d894:\t2a0303e1 \tmov\tw1, w3\n    d898:\t6b1f003f \tcmp\tw1, wzr\n    d89c:\t540001cd \tb.le\td8d4 <pthread_kill+0x48>\n    d8a0:\t51008044 \tsub\tw4, w2, #0x20\n    d8a4:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    d8a8:\t7100049f \tcmp\tw4, #0x1\n    d8ac:\t54000129 \tb.ls\td8d0 <pthread_kill+0x44>\n    d8b0:\td53bd040 \tmrs\tx0, tpidr_el0\n    d8b4:\t93407c21 \tsxtw\tx1, w1\n    d8b8:\td11bc000 \tsub\tx0, x0, #0x6f0\n    d8bc:\td2801068 \tmov\tx8, #0x83                  \t// #131\n    d8c0:\tb980d400 \tldrsw\tx0, [x0,#212]\n    d8c4:\td4000001 \tsvc\t#0x0\n    d8c8:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    d8cc:\t5a8097e0 \tcsneg\tw0, wzr, w0, ls\n    d8d0:\td65f03c0 \tret\n    d8d4:\t52800060 \tmov\tw0, #0x3                   \t// #3\n    d8d8:\td65f03c0 \tret\n\n000000000000d8dc <pthread_sigqueue>:\n    d8dc:\ta9b57bfd \tstp\tx29, x30, [sp,#-176]!\n    d8e0:\t910003fd \tmov\tx29, sp\n    d8e4:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    d8e8:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    d8ec:\tb940d013 \tldr\tw19, [x0,#208]\n    d8f0:\t6b1f027f \tcmp\tw19, wzr\n    d8f4:\t540004ad \tb.le\td988 <pthread_sigqueue+0xac>\n    d8f8:\t51008023 \tsub\tw3, w1, #0x20\n    d8fc:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    d900:\t7100047f \tcmp\tw3, #0x1\n    d904:\t540003a9 \tb.ls\td978 <pthread_sigqueue+0x9c>\n    d908:\td53bd056 \tmrs\tx22, tpidr_el0\n    d90c:\t2a0103f4 \tmov\tw20, w1\n    d910:\td11bc2d6 \tsub\tx22, x22, #0x6f0\n    d914:\taa0203f5 \tmov\tx21, x2\n    d918:\ta9037fbf \tstp\txzr, xzr, [x29,#48]\n    d91c:\tb90033a1 \tstr\tw1, [x29,#48]\n    d920:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n    d924:\tb940d6c0 \tldr\tw0, [x22,#212]\n    d928:\ta9047fbf \tstp\txzr, xzr, [x29,#64]\n    d92c:\tb9003ba1 \tstr\tw1, [x29,#56]\n    d930:\ta9057fbf \tstp\txzr, xzr, [x29,#80]\n    d934:\ta9067fbf \tstp\txzr, xzr, [x29,#96]\n    d938:\ta9077fbf \tstp\txzr, xzr, [x29,#112]\n    d93c:\ta9087fbf \tstp\txzr, xzr, [x29,#128]\n    d940:\ta9097fbf \tstp\txzr, xzr, [x29,#144]\n    d944:\ta90a7fbf \tstp\txzr, xzr, [x29,#160]\n    d948:\tb90043a0 \tstr\tw0, [x29,#64]\n    d94c:\t97ffddb9 \tbl\t5030 <getuid@plt>\n    d950:\t93407e61 \tsxtw\tx1, w19\n    d954:\tb90047a0 \tstr\tw0, [x29,#68]\n    d958:\tf90027b5 \tstr\tx21, [x29,#72]\n    d95c:\t93407e82 \tsxtw\tx2, w20\n    d960:\tb980d6c0 \tldrsw\tx0, [x22,#212]\n    d964:\t9100c3a3 \tadd\tx3, x29, #0x30\n    d968:\td2801e08 \tmov\tx8, #0xf0                  \t// #240\n    d96c:\td4000001 \tsvc\t#0x0\n    d970:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    d974:\t5a8097e0 \tcsneg\tw0, wzr, w0, ls\n    d978:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    d97c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    d980:\ta8cb7bfd \tldp\tx29, x30, [sp],#176\n    d984:\td65f03c0 \tret\n    d988:\t52800060 \tmov\tw0, #0x3                   \t// #3\n    d98c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    d990:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    d994:\ta8cb7bfd \tldp\tx29, x30, [sp],#176\n    d998:\td65f03c0 \tret\n\n000000000000d99c <pthread_cancel>:\n    d99c:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    d9a0:\t910003fd \tmov\tx29, sp\n    d9a4:\tb940d001 \tldr\tw1, [x0,#208]\n    d9a8:\tf9000bf3 \tstr\tx19, [sp,#16]\n    d9ac:\t6b1f003f \tcmp\tw1, wzr\n    d9b0:\t5400078d \tb.le\tdaa0 <pthread_cancel+0x104>\n    d9b4:\taa0003f3 \tmov\tx19, x0\n    d9b8:\t94000fb5 \tbl\t1188c <pthread_cancel_init>\n    d9bc:\td53bd047 \tmrs\tx7, tpidr_el0\n    d9c0:\tf0000126 \tadrp\tx6, 34000 <__GI___pthread_keys+0x3d78>\n    d9c4:\t12800885 \tmov\tw5, #0xffffffbb            \t// #-69\n    d9c8:\td11bc0e7 \tsub\tx7, x7, #0x6f0\n    d9cc:\t52800023 \tmov\tw3, #0x1                   \t// #1\n    d9d0:\tf0000128 \tadrp\tx8, 34000 <__GI___pthread_keys+0x3d78>\n    d9d4:\t910ca0c6 \tadd\tx6, x6, #0x328\n    d9d8:\tb9410a61 \tldr\tw1, [x19,#264]\n    d9dc:\t91042260 \tadd\tx0, x19, #0x108\n    d9e0:\t321e0422 \torr\tw2, w1, #0xc\n    d9e4:\t6b02003f \tcmp\tw1, w2\n    d9e8:\t0a050044 \tand\tw4, w2, w5\n    d9ec:\t540001e0 \tb.eq\tda28 <pthread_cancel+0x8c>\n    d9f0:\t7100289f \tcmp\tw4, #0xa\n    d9f4:\t54000260 \tb.eq\tda40 <pthread_cancel+0xa4>\n    d9f8:\tb90000e3 \tstr\tw3, [x7]\n    d9fc:\tf941b904 \tldr\tx4, [x8,#880]\n    da00:\tb9000083 \tstr\tw3, [x4]\n    da04:\tb9002fa1 \tstr\tw1, [x29,#44]\n    da08:\tb90000c3 \tstr\tw3, [x6]\n    da0c:\tb9402fa1 \tldr\tw1, [x29,#44]\n    da10:\t885ffc04 \tldaxr\tw4, [x0]\n    da14:\t6b01009f \tcmp\tw4, w1\n    da18:\t54000061 \tb.ne\tda24 <pthread_cancel+0x88>\n    da1c:\t88097c02 \tstxr\tw9, w2, [x0]\n    da20:\t35ffff89 \tcbnz\tw9, da10 <pthread_cancel+0x74>\n    da24:\t540000a1 \tb.ne\tda38 <pthread_cancel+0x9c>\n    da28:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    da2c:\tf9400bf3 \tldr\tx19, [sp,#16]\n    da30:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    da34:\td65f03c0 \tret\n    da38:\tb9002fa4 \tstr\tw4, [x29,#44]\n    da3c:\t17ffffe7 \tb\td9d8 <pthread_cancel+0x3c>\n    da40:\tb9002ba1 \tstr\tw1, [x29,#40]\n    da44:\t91042260 \tadd\tx0, x19, #0x108\n    da48:\t321e0021 \torr\tw1, w1, #0x4\n    da4c:\tb9402ba2 \tldr\tw2, [x29,#40]\n    da50:\t885ffc04 \tldaxr\tw4, [x0]\n    da54:\t6b02009f \tcmp\tw4, w2\n    da58:\t54000061 \tb.ne\tda64 <pthread_cancel+0xc8>\n    da5c:\t88097c01 \tstxr\tw9, w1, [x0]\n    da60:\t35ffff89 \tcbnz\tw9, da50 <pthread_cancel+0xb4>\n    da64:\t540001a1 \tb.ne\tda98 <pthread_cancel+0xfc>\n    da68:\td53bd040 \tmrs\tx0, tpidr_el0\n    da6c:\tb940d261 \tldr\tw1, [x19,#208]\n    da70:\td11bc000 \tsub\tx0, x0, #0x6f0\n    da74:\td2800402 \tmov\tx2, #0x20                  \t// #32\n    da78:\td2801068 \tmov\tx8, #0x83                  \t// #131\n    da7c:\t93407c21 \tsxtw\tx1, w1\n    da80:\tb980d400 \tldrsw\tx0, [x0,#212]\n    da84:\td4000001 \tsvc\t#0x0\n    da88:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    da8c:\t54fffce9 \tb.ls\tda28 <pthread_cancel+0x8c>\n    da90:\t4b0003e0 \tneg\tw0, w0\n    da94:\t17ffffe6 \tb\tda2c <pthread_cancel+0x90>\n    da98:\tb9002ba4 \tstr\tw4, [x29,#40]\n    da9c:\t17ffffcf \tb\td9d8 <pthread_cancel+0x3c>\n    daa0:\t52800060 \tmov\tw0, #0x3                   \t// #3\n    daa4:\tf9400bf3 \tldr\tx19, [sp,#16]\n    daa8:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    daac:\td65f03c0 \tret\n\n000000000000dab0 <pthread_testcancel>:\n    dab0:\td53bd042 \tmrs\tx2, tpidr_el0\n    dab4:\t128008c0 \tmov\tw0, #0xffffffb9            \t// #-71\n    dab8:\td11bc041 \tsub\tx1, x2, #0x6f0\n    dabc:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    dac0:\t910003fd \tmov\tx29, sp\n    dac4:\tb9410823 \tldr\tw3, [x1,#264]\n    dac8:\t0a000060 \tand\tw0, w3, w0\n    dacc:\t7100201f \tcmp\tw0, #0x8\n    dad0:\t54000060 \tb.eq\tdadc <pthread_testcancel+0x2c>\n    dad4:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    dad8:\td65f03c0 \tret\n    dadc:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    dae0:\t91042023 \tadd\tx3, x1, #0x108\n    dae4:\tf9021420 \tstr\tx0, [x1,#1064]\n    dae8:\td117a042 \tsub\tx2, x2, #0x5e8\n    daec:\t910073a4 \tadd\tx4, x29, #0x1c\n    daf0:\tb9400040 \tldr\tw0, [x2]\n    daf4:\tb9001fa0 \tstr\tw0, [x29,#28]\n    daf8:\t321c0006 \torr\tw6, w0, #0x10\n    dafc:\t885ffc65 \tldaxr\tw5, [x3]\n    db00:\t6b0000bf \tcmp\tw5, w0\n    db04:\t54000061 \tb.ne\tdb10 <pthread_testcancel+0x60>\n    db08:\t88077c66 \tstxr\tw7, w6, [x3]\n    db0c:\t35ffff87 \tcbnz\tw7, dafc <pthread_testcancel+0x4c>\n    db10:\t54000060 \tb.eq\tdb1c <pthread_testcancel+0x6c>\n    db14:\tb9000085 \tstr\tw5, [x4]\n    db18:\t17fffff6 \tb\tdaf0 <pthread_testcancel+0x40>\n    db1c:\tf9408020 \tldr\tx0, [x1,#256]\n    db20:\t94000679 \tbl\tf504 <__pthread_unwind>\n\n000000000000db24 <pthread_setcancelstate>:\n    db24:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    db28:\t7100041f \tcmp\tw0, #0x1\n    db2c:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    db30:\t910003fd \tmov\tx29, sp\n    db34:\t54000069 \tb.ls\tdb40 <pthread_setcancelstate+0x1c>\n    db38:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    db3c:\td65f03c0 \tret\n    db40:\td53bd045 \tmrs\tx5, tpidr_el0\n    db44:\td11bc0a4 \tsub\tx4, x5, #0x6f0\n    db48:\tb9410880 \tldr\tw0, [x4,#264]\n    db4c:\t540007e0 \tb.eq\tdc48 <pthread_setcancelstate+0x124>\n    db50:\tb40004a1 \tcbz\tx1, dbe4 <pthread_setcancelstate+0xc0>\n    db54:\t121f7802 \tand\tw2, w0, #0xfffffffe\n    db58:\t12000003 \tand\tw3, w0, #0x1\n    db5c:\t6b00005f \tcmp\tw2, w0\n    db60:\tb9000023 \tstr\tw3, [x1]\n    db64:\t54000260 \tb.eq\tdbb0 <pthread_setcancelstate+0x8c>\n    db68:\tb9001ba0 \tstr\tw0, [x29,#24]\n    db6c:\t91042083 \tadd\tx3, x4, #0x108\n    db70:\tb9401ba6 \tldr\tw6, [x29,#24]\n    db74:\t885ffc67 \tldaxr\tw7, [x3]\n    db78:\t6b0600ff \tcmp\tw7, w6\n    db7c:\t54000061 \tb.ne\tdb88 <pthread_setcancelstate+0x64>\n    db80:\t88087c62 \tstxr\tw8, w2, [x3]\n    db84:\t35ffff88 \tcbnz\tw8, db74 <pthread_setcancelstate+0x50>\n    db88:\t540001a1 \tb.ne\tdbbc <pthread_setcancelstate+0x98>\n    db8c:\tb9401ba6 \tldr\tw6, [x29,#24]\n    db90:\tb90017a6 \tstr\tw6, [x29,#20]\n    db94:\tb94017a6 \tldr\tw6, [x29,#20]\n    db98:\t6b06001f \tcmp\tw0, w6\n    db9c:\t54000ac1 \tb.ne\tdcf4 <pthread_setcancelstate+0x1d0>\n    dba0:\t12800880 \tmov\tw0, #0xffffffbb            \t// #-69\n    dba4:\t0a000042 \tand\tw2, w2, w0\n    dba8:\t7100285f \tcmp\tw2, #0xa\n    dbac:\t54000340 \tb.eq\tdc14 <pthread_setcancelstate+0xf0>\n    dbb0:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    dbb4:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    dbb8:\td65f03c0 \tret\n    dbbc:\tb9001ba7 \tstr\tw7, [x29,#24]\n    dbc0:\t17fffff3 \tb\tdb8c <pthread_setcancelstate+0x68>\n    dbc4:\t54000040 \tb.eq\tdbcc <pthread_setcancelstate+0xa8>\n    dbc8:\tb9001ba6 \tstr\tw6, [x29,#24]\n    dbcc:\tb9401ba1 \tldr\tw1, [x29,#24]\n    dbd0:\tb90017a1 \tstr\tw1, [x29,#20]\n    dbd4:\tb94017a1 \tldr\tw1, [x29,#20]\n    dbd8:\t6b01001f \tcmp\tw0, w1\n    dbdc:\t54fffe20 \tb.eq\tdba0 <pthread_setcancelstate+0x7c>\n    dbe0:\t2a0103e0 \tmov\tw0, w1\n    dbe4:\t121f7802 \tand\tw2, w0, #0xfffffffe\n    dbe8:\t6b02001f \tcmp\tw0, w2\n    dbec:\t54fffe20 \tb.eq\tdbb0 <pthread_setcancelstate+0x8c>\n    dbf0:\tb9001ba0 \tstr\tw0, [x29,#24]\n    dbf4:\t91042083 \tadd\tx3, x4, #0x108\n    dbf8:\tb9401ba1 \tldr\tw1, [x29,#24]\n    dbfc:\t885ffc66 \tldaxr\tw6, [x3]\n    dc00:\t6b0100df \tcmp\tw6, w1\n    dc04:\t54fffe01 \tb.ne\tdbc4 <pthread_setcancelstate+0xa0>\n    dc08:\t88077c62 \tstxr\tw7, w2, [x3]\n    dc0c:\t34fffdc7 \tcbz\tw7, dbc4 <pthread_setcancelstate+0xa0>\n    dc10:\t17fffffb \tb\tdbfc <pthread_setcancelstate+0xd8>\n    dc14:\td117a0a5 \tsub\tx5, x5, #0x5e8\n    dc18:\t910073a1 \tadd\tx1, x29, #0x1c\n    dc1c:\tb94000a0 \tldr\tw0, [x5]\n    dc20:\tb9001fa0 \tstr\tw0, [x29,#28]\n    dc24:\t321c0006 \torr\tw6, w0, #0x10\n    dc28:\t885ffc62 \tldaxr\tw2, [x3]\n    dc2c:\t6b00005f \tcmp\tw2, w0\n    dc30:\t54000061 \tb.ne\tdc3c <pthread_setcancelstate+0x118>\n    dc34:\t88077c66 \tstxr\tw7, w6, [x3]\n    dc38:\t35ffff87 \tcbnz\tw7, dc28 <pthread_setcancelstate+0x104>\n    dc3c:\t54000600 \tb.eq\tdcfc <pthread_setcancelstate+0x1d8>\n    dc40:\tb9000022 \tstr\tw2, [x1]\n    dc44:\t17fffff6 \tb\tdc1c <pthread_setcancelstate+0xf8>\n    dc48:\tb40003e1 \tcbz\tx1, dcc4 <pthread_setcancelstate+0x1a0>\n    dc4c:\t32000002 \torr\tw2, w0, #0x1\n    dc50:\t12000003 \tand\tw3, w0, #0x1\n    dc54:\t6b02001f \tcmp\tw0, w2\n    dc58:\tb9000023 \tstr\tw3, [x1]\n    dc5c:\t54fffaa0 \tb.eq\tdbb0 <pthread_setcancelstate+0x8c>\n    dc60:\tb9001ba0 \tstr\tw0, [x29,#24]\n    dc64:\t91042083 \tadd\tx3, x4, #0x108\n    dc68:\tb9401ba6 \tldr\tw6, [x29,#24]\n    dc6c:\t885ffc67 \tldaxr\tw7, [x3]\n    dc70:\t6b0600ff \tcmp\tw7, w6\n    dc74:\t54000061 \tb.ne\tdc80 <pthread_setcancelstate+0x15c>\n    dc78:\t88087c62 \tstxr\tw8, w2, [x3]\n    dc7c:\t35ffff88 \tcbnz\tw8, dc6c <pthread_setcancelstate+0x148>\n    dc80:\t54000040 \tb.eq\tdc88 <pthread_setcancelstate+0x164>\n    dc84:\tb9001ba7 \tstr\tw7, [x29,#24]\n    dc88:\tb9401ba6 \tldr\tw6, [x29,#24]\n    dc8c:\tb90017a6 \tstr\tw6, [x29,#20]\n    dc90:\tb94017a6 \tldr\tw6, [x29,#20]\n    dc94:\t6b06001f \tcmp\tw0, w6\n    dc98:\t54fff840 \tb.eq\tdba0 <pthread_setcancelstate+0x7c>\n    dc9c:\t2a0603e0 \tmov\tw0, w6\n    dca0:\t17ffffeb \tb\tdc4c <pthread_setcancelstate+0x128>\n    dca4:\t54000040 \tb.eq\tdcac <pthread_setcancelstate+0x188>\n    dca8:\tb9001ba6 \tstr\tw6, [x29,#24]\n    dcac:\tb9401ba1 \tldr\tw1, [x29,#24]\n    dcb0:\tb90017a1 \tstr\tw1, [x29,#20]\n    dcb4:\tb94017a1 \tldr\tw1, [x29,#20]\n    dcb8:\t6b01001f \tcmp\tw0, w1\n    dcbc:\t54fff720 \tb.eq\tdba0 <pthread_setcancelstate+0x7c>\n    dcc0:\t2a0103e0 \tmov\tw0, w1\n    dcc4:\t32000002 \torr\tw2, w0, #0x1\n    dcc8:\t6b02001f \tcmp\tw0, w2\n    dccc:\t54fff720 \tb.eq\tdbb0 <pthread_setcancelstate+0x8c>\n    dcd0:\tb9001ba0 \tstr\tw0, [x29,#24]\n    dcd4:\t91042083 \tadd\tx3, x4, #0x108\n    dcd8:\tb9401ba1 \tldr\tw1, [x29,#24]\n    dcdc:\t885ffc66 \tldaxr\tw6, [x3]\n    dce0:\t6b0100df \tcmp\tw6, w1\n    dce4:\t54fffe01 \tb.ne\tdca4 <pthread_setcancelstate+0x180>\n    dce8:\t88077c62 \tstxr\tw7, w2, [x3]\n    dcec:\t34fffdc7 \tcbz\tw7, dca4 <pthread_setcancelstate+0x180>\n    dcf0:\t17fffffb \tb\tdcdc <pthread_setcancelstate+0x1b8>\n    dcf4:\t2a0603e0 \tmov\tw0, w6\n    dcf8:\t17ffff97 \tb\tdb54 <pthread_setcancelstate+0x30>\n    dcfc:\tf9408080 \tldr\tx0, [x4,#256]\n    dd00:\t94000601 \tbl\tf504 <__pthread_unwind>\n\n000000000000dd04 <pthread_setcanceltype>:\n    dd04:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    dd08:\t7100041f \tcmp\tw0, #0x1\n    dd0c:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    dd10:\t910003fd \tmov\tx29, sp\n    dd14:\t54000069 \tb.ls\tdd20 <pthread_setcanceltype+0x1c>\n    dd18:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    dd1c:\td65f03c0 \tret\n    dd20:\td53bd045 \tmrs\tx5, tpidr_el0\n    dd24:\td11bc0a4 \tsub\tx4, x5, #0x6f0\n    dd28:\tb9410880 \tldr\tw0, [x4,#264]\n    dd2c:\t54000820 \tb.eq\tde30 <pthread_setcanceltype+0x12c>\n    dd30:\tb40004a1 \tcbz\tx1, ddc4 <pthread_setcanceltype+0xc0>\n    dd34:\t121e7802 \tand\tw2, w0, #0xfffffffd\n    dd38:\td3410403 \tubfx\tx3, x0, #1, #1\n    dd3c:\t6b00005f \tcmp\tw2, w0\n    dd40:\tb9000023 \tstr\tw3, [x1]\n    dd44:\t54000260 \tb.eq\tdd90 <pthread_setcanceltype+0x8c>\n    dd48:\tb9001ba0 \tstr\tw0, [x29,#24]\n    dd4c:\t91042083 \tadd\tx3, x4, #0x108\n    dd50:\tb9401ba6 \tldr\tw6, [x29,#24]\n    dd54:\t885ffc67 \tldaxr\tw7, [x3]\n    dd58:\t6b0600ff \tcmp\tw7, w6\n    dd5c:\t54000061 \tb.ne\tdd68 <pthread_setcanceltype+0x64>\n    dd60:\t88087c62 \tstxr\tw8, w2, [x3]\n    dd64:\t35ffff88 \tcbnz\tw8, dd54 <pthread_setcanceltype+0x50>\n    dd68:\t540001a1 \tb.ne\tdd9c <pthread_setcanceltype+0x98>\n    dd6c:\tb9401ba6 \tldr\tw6, [x29,#24]\n    dd70:\tb90017a6 \tstr\tw6, [x29,#20]\n    dd74:\tb94017a6 \tldr\tw6, [x29,#20]\n    dd78:\t6b06001f \tcmp\tw0, w6\n    dd7c:\t54000b01 \tb.ne\tdedc <pthread_setcanceltype+0x1d8>\n    dd80:\t12800880 \tmov\tw0, #0xffffffbb            \t// #-69\n    dd84:\t0a000042 \tand\tw2, w2, w0\n    dd88:\t7100285f \tcmp\tw2, #0xa\n    dd8c:\t54000340 \tb.eq\tddf4 <pthread_setcanceltype+0xf0>\n    dd90:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    dd94:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    dd98:\td65f03c0 \tret\n    dd9c:\tb9001ba7 \tstr\tw7, [x29,#24]\n    dda0:\t17fffff3 \tb\tdd6c <pthread_setcanceltype+0x68>\n    dda4:\t54000040 \tb.eq\tddac <pthread_setcanceltype+0xa8>\n    dda8:\tb9001ba6 \tstr\tw6, [x29,#24]\n    ddac:\tb9401ba1 \tldr\tw1, [x29,#24]\n    ddb0:\tb90017a1 \tstr\tw1, [x29,#20]\n    ddb4:\tb94017a1 \tldr\tw1, [x29,#20]\n    ddb8:\t6b01001f \tcmp\tw0, w1\n    ddbc:\t54fffe20 \tb.eq\tdd80 <pthread_setcanceltype+0x7c>\n    ddc0:\t2a0103e0 \tmov\tw0, w1\n    ddc4:\t121e7802 \tand\tw2, w0, #0xfffffffd\n    ddc8:\t6b02001f \tcmp\tw0, w2\n    ddcc:\t54fffe20 \tb.eq\tdd90 <pthread_setcanceltype+0x8c>\n    ddd0:\tb9001ba0 \tstr\tw0, [x29,#24]\n    ddd4:\t91042083 \tadd\tx3, x4, #0x108\n    ddd8:\tb9401ba1 \tldr\tw1, [x29,#24]\n    dddc:\t885ffc66 \tldaxr\tw6, [x3]\n    dde0:\t6b0100df \tcmp\tw6, w1\n    dde4:\t54fffe01 \tb.ne\tdda4 <pthread_setcanceltype+0xa0>\n    dde8:\t88077c62 \tstxr\tw7, w2, [x3]\n    ddec:\t34fffdc7 \tcbz\tw7, dda4 <pthread_setcanceltype+0xa0>\n    ddf0:\t17fffffb \tb\tdddc <pthread_setcanceltype+0xd8>\n    ddf4:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    ddf8:\td117a0a5 \tsub\tx5, x5, #0x5e8\n    ddfc:\tf9021480 \tstr\tx0, [x4,#1064]\n    de00:\t910073a1 \tadd\tx1, x29, #0x1c\n    de04:\tb94000a0 \tldr\tw0, [x5]\n    de08:\tb9001fa0 \tstr\tw0, [x29,#28]\n    de0c:\t321c0006 \torr\tw6, w0, #0x10\n    de10:\t885ffc62 \tldaxr\tw2, [x3]\n    de14:\t6b00005f \tcmp\tw2, w0\n    de18:\t54000061 \tb.ne\tde24 <pthread_setcanceltype+0x120>\n    de1c:\t88077c66 \tstxr\tw7, w6, [x3]\n    de20:\t35ffff87 \tcbnz\tw7, de10 <pthread_setcanceltype+0x10c>\n    de24:\t54000600 \tb.eq\tdee4 <pthread_setcanceltype+0x1e0>\n    de28:\tb9000022 \tstr\tw2, [x1]\n    de2c:\t17fffff6 \tb\tde04 <pthread_setcanceltype+0x100>\n    de30:\tb40003e1 \tcbz\tx1, deac <pthread_setcanceltype+0x1a8>\n    de34:\t321f0002 \torr\tw2, w0, #0x2\n    de38:\td3410403 \tubfx\tx3, x0, #1, #1\n    de3c:\t6b02001f \tcmp\tw0, w2\n    de40:\tb9000023 \tstr\tw3, [x1]\n    de44:\t54fffa60 \tb.eq\tdd90 <pthread_setcanceltype+0x8c>\n    de48:\tb9001ba0 \tstr\tw0, [x29,#24]\n    de4c:\t91042083 \tadd\tx3, x4, #0x108\n    de50:\tb9401ba6 \tldr\tw6, [x29,#24]\n    de54:\t885ffc67 \tldaxr\tw7, [x3]\n    de58:\t6b0600ff \tcmp\tw7, w6\n    de5c:\t54000061 \tb.ne\tde68 <pthread_setcanceltype+0x164>\n    de60:\t88087c62 \tstxr\tw8, w2, [x3]\n    de64:\t35ffff88 \tcbnz\tw8, de54 <pthread_setcanceltype+0x150>\n    de68:\t54000040 \tb.eq\tde70 <pthread_setcanceltype+0x16c>\n    de6c:\tb9001ba7 \tstr\tw7, [x29,#24]\n    de70:\tb9401ba6 \tldr\tw6, [x29,#24]\n    de74:\tb90017a6 \tstr\tw6, [x29,#20]\n    de78:\tb94017a6 \tldr\tw6, [x29,#20]\n    de7c:\t6b06001f \tcmp\tw0, w6\n    de80:\t54fff800 \tb.eq\tdd80 <pthread_setcanceltype+0x7c>\n    de84:\t2a0603e0 \tmov\tw0, w6\n    de88:\t17ffffeb \tb\tde34 <pthread_setcanceltype+0x130>\n    de8c:\t54000040 \tb.eq\tde94 <pthread_setcanceltype+0x190>\n    de90:\tb9001ba6 \tstr\tw6, [x29,#24]\n    de94:\tb9401ba1 \tldr\tw1, [x29,#24]\n    de98:\tb90017a1 \tstr\tw1, [x29,#20]\n    de9c:\tb94017a1 \tldr\tw1, [x29,#20]\n    dea0:\t6b01001f \tcmp\tw0, w1\n    dea4:\t54fff6e0 \tb.eq\tdd80 <pthread_setcanceltype+0x7c>\n    dea8:\t2a0103e0 \tmov\tw0, w1\n    deac:\t321f0002 \torr\tw2, w0, #0x2\n    deb0:\t6b02001f \tcmp\tw0, w2\n    deb4:\t54fff6e0 \tb.eq\tdd90 <pthread_setcanceltype+0x8c>\n    deb8:\tb9001ba0 \tstr\tw0, [x29,#24]\n    debc:\t91042083 \tadd\tx3, x4, #0x108\n    dec0:\tb9401ba1 \tldr\tw1, [x29,#24]\n    dec4:\t885ffc66 \tldaxr\tw6, [x3]\n    dec8:\t6b0100df \tcmp\tw6, w1\n    decc:\t54fffe01 \tb.ne\tde8c <pthread_setcanceltype+0x188>\n    ded0:\t88077c62 \tstxr\tw7, w2, [x3]\n    ded4:\t34fffdc7 \tcbz\tw7, de8c <pthread_setcanceltype+0x188>\n    ded8:\t17fffffb \tb\tdec4 <pthread_setcanceltype+0x1c0>\n    dedc:\t2a0603e0 \tmov\tw0, w6\n    dee0:\t17ffff95 \tb\tdd34 <pthread_setcanceltype+0x30>\n    dee4:\tf9408080 \tldr\tx0, [x4,#256]\n    dee8:\t94000587 \tbl\tf504 <__pthread_unwind>\n\n000000000000deec <clear_once_control>:\n    deec:\tb900001f \tstr\twzr, [x0]\n    def0:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    def4:\tb2407be2 \tmov\tx2, #0x7fffffff            \t// #2147483647\n    def8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    defc:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    df00:\td4000001 \tsvc\t#0x0\n    df04:\td65f03c0 \tret\n\n000000000000df08 <__pthread_once>:\n    df08:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    df0c:\taa0003e4 \tmov\tx4, x0\n    df10:\taa0103e5 \tmov\tx5, x1\n    df14:\t910003fd \tmov\tx29, sp\n    df18:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    df1c:\tf90013f5 \tstr\tx21, [sp,#32]\n    df20:\tf0000126 \tadrp\tx6, 34000 <__GI___pthread_keys+0x3d78>\n    df24:\tb9400083 \tldr\tw3, [x4]\n    df28:\td5033bbf \tdmb\tish\n    df2c:\t360800c3 \ttbz\tw3, #1, df44 <__pthread_once+0x3c>\n    df30:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    df34:\tf94013f5 \tldr\tx21, [sp,#32]\n    df38:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    df3c:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    df40:\td65f03c0 \tret\n    df44:\t910143b5 \tadd\tx21, x29, #0x50\n    df48:\tf941c4c2 \tldr\tx2, [x6,#904]\n    df4c:\t2a0303e0 \tmov\tw0, w3\n    df50:\t32000042 \torr\tw2, w2, #0x1\n    df54:\tb81e0ea3 \tstr\tw3, [x21,#-32]!\n    df58:\t885ffc81 \tldaxr\tw1, [x4]\n    df5c:\t6b00003f \tcmp\tw1, w0\n    df60:\t54000061 \tb.ne\tdf6c <__pthread_once+0x64>\n    df64:\t88077c82 \tstxr\tw7, w2, [x4]\n    df68:\t35ffff87 \tcbnz\tw7, df58 <__pthread_once+0x50>\n    df6c:\t54000040 \tb.eq\tdf74 <__pthread_once+0x6c>\n    df70:\tb90033a1 \tstr\tw1, [x29,#48]\n    df74:\tb94033a0 \tldr\tw0, [x29,#48]\n    df78:\t6b00007f \tcmp\tw3, w0\n    df7c:\t54000401 \tb.ne\tdffc <__pthread_once+0xf4>\n    df80:\t36000063 \ttbz\tw3, #0, df8c <__pthread_once+0x84>\n    df84:\t6b03005f \tcmp\tw2, w3\n    df88:\t540002c0 \tb.eq\tdfe0 <__pthread_once+0xd8>\n    df8c:\t90000001 \tadrp\tx1, d000 <pthread_cond_broadcast@@GLIBC_2.17+0x7c>\n    df90:\taa0403e2 \tmov\tx2, x4\n    df94:\taa0503f4 \tmov\tx20, x5\n    df98:\taa1503e0 \tmov\tx0, x21\n    df9c:\t913bb021 \tadd\tx1, x1, #0xeec\n    dfa0:\taa0403f3 \tmov\tx19, x4\n    dfa4:\t94000497 \tbl\tf200 <_pthread_cleanup_push>\n    dfa8:\td63f0280 \tblr\tx20\n    dfac:\taa1503e0 \tmov\tx0, x21\n    dfb0:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    dfb4:\t9400049b \tbl\tf220 <_pthread_cleanup_pop>\n    dfb8:\td5033bbf \tdmb\tish\n    dfbc:\t52800041 \tmov\tw1, #0x2                   \t// #2\n    dfc0:\taa1303e0 \tmov\tx0, x19\n    dfc4:\tb9000261 \tstr\tw1, [x19]\n    dfc8:\tb2407be2 \tmov\tx2, #0x7fffffff            \t// #2147483647\n    dfcc:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    dfd0:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    dfd4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    dfd8:\td4000001 \tsvc\t#0x0\n    dfdc:\t17ffffd5 \tb\tdf30 <__pthread_once+0x28>\n    dfe0:\taa0403e0 \tmov\tx0, x4\n    dfe4:\td2801001 \tmov\tx1, #0x80                  \t// #128\n    dfe8:\t93407c42 \tsxtw\tx2, w2\n    dfec:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    dff0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    dff4:\td4000001 \tsvc\t#0x0\n    dff8:\t17ffffcb \tb\tdf24 <__pthread_once+0x1c>\n    dffc:\t2a0003e3 \tmov\tw3, w0\n    e000:\t17ffffcb \tb\tdf2c <__pthread_once+0x24>\n\n000000000000e004 <pthread_getcpuclockid>:\n    e004:\tb940d000 \tldr\tw0, [x0,#208]\n    e008:\t6b1f001f \tcmp\tw0, wzr\n    e00c:\t540000ed \tb.le\te028 <pthread_getcpuclockid+0x24>\n    e010:\t2a2003e2 \tmvn\tw2, w0\n    e014:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    e018:\t531d7042 \tlsl\tw2, w2, #3\n    e01c:\t321f0442 \torr\tw2, w2, #0x6\n    e020:\tb9000022 \tstr\tw2, [x1]\n    e024:\td65f03c0 \tret\n    e028:\t52800060 \tmov\tw0, #0x3                   \t// #3\n    e02c:\td65f03c0 \tret\n\n000000000000e030 <sem_init@@GLIBC_2.17>:\n    e030:\t37f80142 \ttbnz\tw2, #31, e058 <sem_init@@GLIBC_2.17+0x28>\n    e034:\t6b1f003f \tcmp\tw1, wzr\n    e038:\t52801001 \tmov\tw1, #0x80                  \t// #128\n    e03c:\t1a8113e1 \tcsel\tw1, wzr, w1, ne\n    e040:\tb9000401 \tstr\tw1, [x0,#4]\n    e044:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    e048:\tb9000002 \tstr\tw2, [x0]\n    e04c:\tf900041f \tstr\txzr, [x0,#8]\n    e050:\t2a0103e0 \tmov\tw0, w1\n    e054:\td65f03c0 \tret\n    e058:\td53bd040 \tmrs\tx0, tpidr_el0\n    e05c:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    e060:\tf947c442 \tldr\tx2, [x2,#3976]\n    e064:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n    e068:\t528002c3 \tmov\tw3, #0x16                  \t// #22\n    e06c:\tb8226803 \tstr\tw3, [x0,x2]\n    e070:\t2a0103e0 \tmov\tw0, w1\n    e074:\td65f03c0 \tret\n\n000000000000e078 <sem_destroy@@GLIBC_2.17>:\n    e078:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    e07c:\td65f03c0 \tret\n\n000000000000e080 <__where_is_shmfs>:\n    e080:\td10a83ff \tsub\tsp, sp, #0x2a0\n    e084:\t90000020 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n    e088:\t91348000 \tadd\tx0, x0, #0xd20\n    e08c:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n    e090:\t910003fd \tmov\tx29, sp\n    e094:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    e098:\t9101e3b5 \tadd\tx21, x29, #0x78\n    e09c:\tf90023f9 \tstr\tx25, [sp,#64]\n    e0a0:\taa1503e1 \tmov\tx1, x21\n    e0a4:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    e0a8:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    e0ac:\t97ffdc29 \tbl\t5150 <__statfs@plt>\n    e0b0:\t35000140 \tcbnz\tw0, e0d8 <__where_is_shmfs+0x58>\n    e0b4:\tf94002a1 \tldr\tx1, [x21]\n    e0b8:\td28b1ec0 \tmov\tx0, #0x58f6                \t// #22774\n    e0bc:\tf2b0b080 \tmovk\tx0, #0x8584, lsl #16\n    e0c0:\teb00003f \tcmp\tx1, x0\n    e0c4:\t54000b80 \tb.eq\te234 <__where_is_shmfs+0x1b4>\n    e0c8:\td2833280 \tmov\tx0, #0x1994                \t// #6548\n    e0cc:\tf2a02040 \tmovk\tx0, #0x102, lsl #16\n    e0d0:\teb00003f \tcmp\tx1, x0\n    e0d4:\t54000b00 \tb.eq\te234 <__where_is_shmfs+0x1b4>\n    e0d8:\t90000033 \tadrp\tx19, 12000 <__pthread_current_priority+0xa8>\n    e0dc:\t90000020 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n    e0e0:\t91336273 \tadd\tx19, x19, #0xcd8\n    e0e4:\t91332000 \tadd\tx0, x0, #0xcc8\n    e0e8:\taa1303e1 \tmov\tx1, x19\n    e0ec:\t97ffdc55 \tbl\t5240 <__setmntent@plt>\n    e0f0:\taa0003f6 \tmov\tx22, x0\n    e0f4:\tb4000c00 \tcbz\tx0, e274 <__where_is_shmfs+0x1f4>\n    e0f8:\t90000037 \tadrp\tx23, 12000 <__pthread_current_priority+0xa8>\n    e0fc:\t910143b9 \tadd\tx25, x29, #0x50\n    e100:\t9103c3b8 \tadd\tx24, x29, #0xf0\n    e104:\t9133c2f7 \tadd\tx23, x23, #0xcf0\n    e108:\taa1903e1 \tmov\tx1, x25\n    e10c:\taa1803e2 \tmov\tx2, x24\n    e110:\t52804003 \tmov\tw3, #0x200                 \t// #512\n    e114:\taa1603e0 \tmov\tx0, x22\n    e118:\t97ffdc4e \tbl\t5250 <__getmntent_r@plt>\n    e11c:\taa0003f3 \tmov\tx19, x0\n    e120:\taa1703e1 \tmov\tx1, x23\n    e124:\tb4000760 \tcbz\tx0, e210 <__where_is_shmfs+0x190>\n    e128:\tf9400a74 \tldr\tx20, [x19,#16]\n    e12c:\taa1403e0 \tmov\tx0, x20\n    e130:\t97ffdc24 \tbl\t51c0 <strcmp@plt>\n    e134:\t34000180 \tcbz\tw0, e164 <__where_is_shmfs+0xe4>\n    e138:\t39400283 \tldrb\tw3, [x20]\n    e13c:\t7101cc7f \tcmp\tw3, #0x73\n    e140:\t54fffe41 \tb.ne\te108 <__where_is_shmfs+0x88>\n    e144:\t39400680 \tldrb\tw0, [x20,#1]\n    e148:\t7101a01f \tcmp\tw0, #0x68\n    e14c:\t54fffde1 \tb.ne\te108 <__where_is_shmfs+0x88>\n    e150:\t39400a80 \tldrb\tw0, [x20,#2]\n    e154:\t7101b41f \tcmp\tw0, #0x6d\n    e158:\t54fffd81 \tb.ne\te108 <__where_is_shmfs+0x88>\n    e15c:\t39400e80 \tldrb\tw0, [x20,#3]\n    e160:\t35fffd40 \tcbnz\tw0, e108 <__where_is_shmfs+0x88>\n    e164:\tf9400660 \tldr\tx0, [x19,#8]\n    e168:\taa1503e1 \tmov\tx1, x21\n    e16c:\t97ffdbf9 \tbl\t5150 <__statfs@plt>\n    e170:\td28b1ec3 \tmov\tx3, #0x58f6                \t// #22774\n    e174:\tf2b0b083 \tmovk\tx3, #0x8584, lsl #16\n    e178:\t35fffc80 \tcbnz\tw0, e108 <__where_is_shmfs+0x88>\n    e17c:\tf94002a1 \tldr\tx1, [x21]\n    e180:\td2833280 \tmov\tx0, #0x1994                \t// #6548\n    e184:\tf2a02040 \tmovk\tx0, #0x102, lsl #16\n    e188:\teb03003f \tcmp\tx1, x3\n    e18c:\t54000060 \tb.eq\te198 <__where_is_shmfs+0x118>\n    e190:\teb00003f \tcmp\tx1, x0\n    e194:\t54fffba1 \tb.ne\te108 <__where_is_shmfs+0x88>\n    e198:\tf9400674 \tldr\tx20, [x19,#8]\n    e19c:\taa1403e0 \tmov\tx0, x20\n    e1a0:\t97ffdb78 \tbl\t4f80 <strlen@plt>\n    e1a4:\taa0003f3 \tmov\tx19, x0\n    e1a8:\tb4fffb00 \tcbz\tx0, e108 <__where_is_shmfs+0x88>\n    e1ac:\td0000135 \tadrp\tx21, 34000 <__GI___pthread_keys+0x3d78>\n    e1b0:\t91001800 \tadd\tx0, x0, #0x6\n    e1b4:\t97ffdbb3 \tbl\t5080 <malloc@plt>\n    e1b8:\taa0003f7 \tmov\tx23, x0\n    e1bc:\tf901caa0 \tstr\tx0, [x21,#912]\n    e1c0:\tb4000280 \tcbz\tx0, e210 <__where_is_shmfs+0x190>\n    e1c4:\taa1403e1 \tmov\tx1, x20\n    e1c8:\taa1303e2 \tmov\tx2, x19\n    e1cc:\t97ffdc25 \tbl\t5260 <mempcpy@plt>\n    e1d0:\t385ff001 \tldrb\tw1, [x0,#-1]\n    e1d4:\t7100bc3f \tcmp\tw1, #0x2f\n    e1d8:\t540004a0 \tb.eq\te26c <__where_is_shmfs+0x1ec>\n    e1dc:\t528005e1 \tmov\tw1, #0x2f                  \t// #47\n    e1e0:\t91000403 \tadd\tx3, x0, #0x1\n    e1e4:\t39000001 \tstrb\tw1, [x0]\n    e1e8:\t90000022 \tadrp\tx2, 12000 <__pthread_current_priority+0xa8>\n    e1ec:\taa0303e1 \tmov\tx1, x3\n    e1f0:\t9133e042 \tadd\tx2, x2, #0xcf8\n    e1f4:\t910e42b5 \tadd\tx21, x21, #0x390\n    e1f8:\tb9400040 \tldr\tw0, [x2]\n    e1fc:\tb9000060 \tstr\tw0, [x3]\n    e200:\t39401040 \tldrb\tw0, [x2,#4]\n    e204:\t38004c20 \tstrb\tw0, [x1,#4]!\n    e208:\tcb170021 \tsub\tx1, x1, x23\n    e20c:\tf90006a1 \tstr\tx1, [x21,#8]\n    e210:\taa1603e0 \tmov\tx0, x22\n    e214:\t97ffdba7 \tbl\t50b0 <__endmntent@plt>\n    e218:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    e21c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    e220:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    e224:\tf94023f9 \tldr\tx25, [sp,#64]\n    e228:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    e22c:\t910a83ff \tadd\tsp, sp, #0x2a0\n    e230:\td65f03c0 \tret\n    e234:\td0000121 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    e238:\t90000020 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n    e23c:\t910e4022 \tadd\tx2, x1, #0x390\n    e240:\t91344000 \tadd\tx0, x0, #0xd10\n    e244:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    e248:\tf901c820 \tstr\tx0, [x1,#912]\n    e24c:\td28001a0 \tmov\tx0, #0xd                   \t// #13\n    e250:\tf9000440 \tstr\tx0, [x2,#8]\n    e254:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    e258:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    e25c:\tf94023f9 \tldr\tx25, [sp,#64]\n    e260:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n    e264:\t910a83ff \tadd\tsp, sp, #0x2a0\n    e268:\td65f03c0 \tret\n    e26c:\taa0003e3 \tmov\tx3, x0\n    e270:\t17ffffde \tb\te1e8 <__where_is_shmfs+0x168>\n    e274:\t90000020 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n    e278:\taa1303e1 \tmov\tx1, x19\n    e27c:\t91338000 \tadd\tx0, x0, #0xce0\n    e280:\t97ffdbf0 \tbl\t5240 <__setmntent@plt>\n    e284:\taa0003f6 \tmov\tx22, x0\n    e288:\tb5fff380 \tcbnz\tx0, e0f8 <__where_is_shmfs+0x78>\n    e28c:\t17ffffe3 \tb\te218 <__where_is_shmfs+0x198>\n\n000000000000e290 <check_add_mapping>:\n    e290:\ta9b17bfd \tstp\tx29, x30, [sp,#-240]!\n    e294:\t910003fd \tmov\tx29, sp\n    e298:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    e29c:\t9101c3b7 \tadd\tx23, x29, #0x70\n    e2a0:\t2a0203f8 \tmov\tw24, w2\n    e2a4:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    e2a8:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    e2ac:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    e2b0:\ta90573fb \tstp\tx27, x28, [sp,#80]\n    e2b4:\taa0003f9 \tmov\tx25, x0\n    e2b8:\taa0103f6 \tmov\tx22, x1\n    e2bc:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    e2c0:\t2a0203e1 \tmov\tw1, w2\n    e2c4:\taa1703e2 \tmov\tx2, x23\n    e2c8:\taa0303f5 \tmov\tx21, x3\n    e2cc:\t97ffdbe9 \tbl\t5270 <__fxstat64@plt>\n    e2d0:\t35000860 \tcbnz\tw0, e3dc <check_add_mapping+0x14c>\n    e2d4:\td0000133 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n    e2d8:\tb9006fa0 \tstr\tw0, [x29,#108]\n    e2dc:\t910b3263 \tadd\tx3, x19, #0x2cc\n    e2e0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    e2e4:\t885ffc61 \tldaxr\tw1, [x3]\n    e2e8:\t6b1f003f \tcmp\tw1, wzr\n    e2ec:\t54000061 \tb.ne\te2f8 <check_add_mapping+0x68>\n    e2f0:\t88027c60 \tstxr\tw2, w0, [x3]\n    e2f4:\t35ffff82 \tcbnz\tw2, e2e4 <check_add_mapping+0x54>\n    e2f8:\t540006a1 \tb.ne\te3cc <check_add_mapping+0x13c>\n    e2fc:\t9100fac5 \tadd\tx5, x22, #0x3e\n    e300:\t910003e0 \tmov\tx0, sp\n    e304:\t927ceca5 \tand\tx5, x5, #0xfffffffffffffff0\n    e308:\taa1903e1 \tmov\tx1, x25\n    e30c:\tcb25601f \tsub\tsp, x0, x5\n    e310:\taa1603e2 \tmov\tx2, x22\n    e314:\t910083e0 \tadd\tx0, sp, #0x20\n    e318:\td000013b \tadrp\tx27, 34000 <__GI___pthread_keys+0x3d78>\n    e31c:\t9000001a \tadrp\tx26, e000 <__pthread_once+0xf8>\n    e320:\t910082dc \tadd\tx28, x22, #0x20\n    e324:\t97ffdb0f \tbl\t4f60 <memcpy@plt>\n    e328:\tf9403ba3 \tldr\tx3, [x29,#112]\n    e32c:\t910003e0 \tmov\tx0, sp\n    e330:\tf90003e3 \tstr\tx3, [sp]\n    e334:\t910e8361 \tadd\tx1, x27, #0x3a0\n    e338:\tf9403fa3 \tldr\tx3, [x29,#120]\n    e33c:\t91139342 \tadd\tx2, x26, #0x4e4\n    e340:\tf90007e3 \tstr\tx3, [sp,#8]\n    e344:\t97ffdb3f \tbl\t5040 <tfind@plt>\n    e348:\tb4000680 \tcbz\tx0, e418 <check_add_mapping+0x188>\n    e34c:\tf9400000 \tldr\tx0, [x0]\n    e350:\td10006a1 \tsub\tx1, x21, #0x1\n    e354:\tb1000c3f \tcmn\tx1, #0x3\n    e358:\t1a9f87e4 \tcset\tw4, ls\n    e35c:\tf9400c05 \tldr\tx5, [x0,#24]\n    e360:\tb9401002 \tldr\tw2, [x0,#16]\n    e364:\teb0502bf \tcmp\tx21, x5\n    e368:\t1a9f07e1 \tcset\tw1, ne\n    e36c:\t11000442 \tadd\tw2, w2, #0x1\n    e370:\t0a010084 \tand\tw4, w4, w1\n    e374:\tb9001002 \tstr\tw2, [x0,#16]\n    e378:\t910b3261 \tadd\tx1, x19, #0x2cc\n    e37c:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    e380:\t885f7c20 \tldxr\tw0, [x1]\n    e384:\t8803fc22 \tstlxr\tw3, w2, [x1]\n    e388:\t35ffffc3 \tcbnz\tw3, e380 <check_add_mapping+0xf0>\n    e38c:\t7100041f \tcmp\tw0, #0x1\n    e390:\t5400036c \tb.gt\te3fc <check_add_mapping+0x16c>\n    e394:\t340000a4 \tcbz\tw4, e3a8 <check_add_mapping+0x118>\n    e398:\taa1503e0 \tmov\tx0, x21\n    e39c:\td2800401 \tmov\tx1, #0x20                  \t// #32\n    e3a0:\td2801ae8 \tmov\tx8, #0xd7                  \t// #215\n    e3a4:\td4000001 \tsvc\t#0x0\n    e3a8:\t910003bf \tmov\tsp, x29\n    e3ac:\taa0503e0 \tmov\tx0, x5\n    e3b0:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    e3b4:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    e3b8:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    e3bc:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    e3c0:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    e3c4:\ta8cf7bfd \tldp\tx29, x30, [sp],#240\n    e3c8:\td65f03c0 \tret\n    e3cc:\taa0303e0 \tmov\tx0, x3\n    e3d0:\tb9006fa1 \tstr\tw1, [x29,#108]\n    e3d4:\t940004e5 \tbl\tf768 <__lll_lock_wait_private>\n    e3d8:\t17ffffc9 \tb\te2fc <check_add_mapping+0x6c>\n    e3dc:\td10006a0 \tsub\tx0, x21, #0x1\n    e3e0:\td2800005 \tmov\tx5, #0x0                   \t// #0\n    e3e4:\tb1000c1f \tcmn\tx0, #0x3\n    e3e8:\t1a9f87e4 \tcset\tw4, ls\n    e3ec:\teb0502bf \tcmp\tx21, x5\n    e3f0:\t1a9f07e1 \tcset\tw1, ne\n    e3f4:\t0a010084 \tand\tw4, w4, w1\n    e3f8:\t17ffffe7 \tb\te394 <check_add_mapping+0x104>\n    e3fc:\taa0103e0 \tmov\tx0, x1\n    e400:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    e404:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    e408:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    e40c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    e410:\td4000001 \tsvc\t#0x0\n    e414:\t17ffffe0 \tb\te394 <check_add_mapping+0x104>\n    e418:\taa1c03e0 \tmov\tx0, x28\n    e41c:\t97ffdb19 \tbl\t5080 <malloc@plt>\n    e420:\taa0003f4 \tmov\tx20, x0\n    e424:\tb40002a0 \tcbz\tx0, e478 <check_add_mapping+0x1e8>\n    e428:\tb40004d5 \tcbz\tx21, e4c0 <check_add_mapping+0x230>\n    e42c:\t3dc002e0 \tldr\tq0, [x23]\n    e430:\t52800023 \tmov\tw3, #0x1                   \t// #1\n    e434:\t91008280 \tadd\tx0, x20, #0x20\n    e438:\taa1903e1 \tmov\tx1, x25\n    e43c:\taa1603e2 \tmov\tx2, x22\n    e440:\tf9000e95 \tstr\tx21, [x20,#24]\n    e444:\tb9001283 \tstr\tw3, [x20,#16]\n    e448:\t3d800280 \tstr\tq0, [x20]\n    e44c:\t97ffdac5 \tbl\t4f60 <memcpy@plt>\n    e450:\tb10006bf \tcmn\tx21, #0x1\n    e454:\t54000220 \tb.eq\te498 <check_add_mapping+0x208>\n    e458:\taa1403e0 \tmov\tx0, x20\n    e45c:\t910e8361 \tadd\tx1, x27, #0x3a0\n    e460:\t91139342 \tadd\tx2, x26, #0x4e4\n    e464:\t97ffdb17 \tbl\t50c0 <tsearch@plt>\n    e468:\tb4000180 \tcbz\tx0, e498 <check_add_mapping+0x208>\n    e46c:\taa1503e5 \tmov\tx5, x21\n    e470:\t52800004 \tmov\tw4, #0x0                   \t// #0\n    e474:\t17ffffc1 \tb\te378 <check_add_mapping+0xe8>\n    e478:\td10006a0 \tsub\tx0, x21, #0x1\n    e47c:\taa1403e5 \tmov\tx5, x20\n    e480:\tb1000c1f \tcmn\tx0, #0x3\n    e484:\t1a9f87e4 \tcset\tw4, ls\n    e488:\teb1f02bf \tcmp\tx21, xzr\n    e48c:\t1a9f07e1 \tcset\tw1, ne\n    e490:\t0a010084 \tand\tw4, w4, w1\n    e494:\t17ffffb9 \tb\te378 <check_add_mapping+0xe8>\n    e498:\taa1403e0 \tmov\tx0, x20\n    e49c:\t97ffdb61 \tbl\t5220 <free@plt>\n    e4a0:\td10006a0 \tsub\tx0, x21, #0x1\n    e4a4:\td2800005 \tmov\tx5, #0x0                   \t// #0\n    e4a8:\tb1000c1f \tcmn\tx0, #0x3\n    e4ac:\t1a9f87e4 \tcset\tw4, ls\n    e4b0:\teb0502bf \tcmp\tx21, x5\n    e4b4:\t1a9f07e1 \tcset\tw1, ne\n    e4b8:\t0a010084 \tand\tw4, w4, w1\n    e4bc:\t17ffffaf \tb\te378 <check_add_mapping+0xe8>\n    e4c0:\taa1503e0 \tmov\tx0, x21\n    e4c4:\taa1503e5 \tmov\tx5, x21\n    e4c8:\td2800401 \tmov\tx1, #0x20                  \t// #32\n    e4cc:\t52800062 \tmov\tw2, #0x3                   \t// #3\n    e4d0:\t52800023 \tmov\tw3, #0x1                   \t// #1\n    e4d4:\t2a1803e4 \tmov\tw4, w24\n    e4d8:\t97ffdb3e \tbl\t51d0 <mmap@plt>\n    e4dc:\taa0003f5 \tmov\tx21, x0\n    e4e0:\t17ffffd3 \tb\te42c <check_add_mapping+0x19c>\n\n000000000000e4e4 <__sem_search>:\n    e4e4:\tf9400403 \tldr\tx3, [x0,#8]\n    e4e8:\tf9400422 \tldr\tx2, [x1,#8]\n    e4ec:\teb02007f \tcmp\tx3, x2\n    e4f0:\t54000080 \tb.eq\te500 <__sem_search+0x1c>\n    e4f4:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    e4f8:\t1a9f3400 \tcsinc\tw0, w0, wzr, cc\n    e4fc:\td65f03c0 \tret\n    e500:\tf9400003 \tldr\tx3, [x0]\n    e504:\tf9400022 \tldr\tx2, [x1]\n    e508:\teb02007f \tcmp\tx3, x2\n    e50c:\t54ffff41 \tb.ne\te4f4 <__sem_search+0x10>\n    e510:\t91008000 \tadd\tx0, x0, #0x20\n    e514:\t91008021 \tadd\tx1, x1, #0x20\n    e518:\t17ffdb2a \tb\t51c0 <strcmp@plt>\n\n000000000000e51c <sem_open>:\n    e51c:\ta9a87bfd \tstp\tx29, x30, [sp,#-384]!\n    e520:\t910003fd \tmov\tx29, sp\n    e524:\t6d0627e8 \tstp\td8, d9, [sp,#96]\n    e528:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    e52c:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n    e530:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    e534:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    e538:\ta90573fb \tstp\tx27, x28, [sp,#80]\n    e53c:\tfd003bea \tstr\td10, [sp,#112]\n    e540:\taa0003f3 \tmov\tx19, x0\n    e544:\tb90083a1 \tstr\tw1, [x29,#128]\n    e548:\td0000120 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    e54c:\tf900aba2 \tstr\tx2, [x29,#336]\n    e550:\t910403a2 \tadd\tx2, x29, #0x100\n    e554:\tf900afa3 \tstr\tx3, [x29,#344]\n    e558:\td000013a \tadrp\tx26, 34000 <__GI___pthread_keys+0x3d78>\n    e55c:\tf900b3a4 \tstr\tx4, [x29,#352]\n    e560:\t910b3000 \tadd\tx0, x0, #0x2cc\n    e564:\tf900b7a5 \tstr\tx5, [x29,#360]\n    e568:\t90000001 \tadrp\tx1, e000 <__pthread_once+0xf8>\n    e56c:\tf900bba6 \tstr\tx6, [x29,#368]\n    e570:\t91001000 \tadd\tx0, x0, #0x4\n    e574:\tf900bfa7 \tstr\tx7, [x29,#376]\n    e578:\t91020021 \tadd\tx1, x1, #0x80\n    e57c:\t3d8037a0 \tstr\tq0, [x29,#208]\n    e580:\t3d803ba1 \tstr\tq1, [x29,#224]\n    e584:\t3d803fa2 \tstr\tq2, [x29,#240]\n    e588:\t3d800043 \tstr\tq3, [x2]\n    e58c:\t910443a2 \tadd\tx2, x29, #0x110\n    e590:\t3d800044 \tstr\tq4, [x2]\n    e594:\t910483a2 \tadd\tx2, x29, #0x120\n    e598:\t3d800045 \tstr\tq5, [x2]\n    e59c:\t9104c3a2 \tadd\tx2, x29, #0x130\n    e5a0:\t3d800046 \tstr\tq6, [x2]\n    e5a4:\t910503a2 \tadd\tx2, x29, #0x140\n    e5a8:\t3d800047 \tstr\tq7, [x2]\n    e5ac:\t97fffe57 \tbl\tdf08 <__pthread_once>\n    e5b0:\tf941cb54 \tldr\tx20, [x26,#912]\n    e5b4:\tb4001934 \tcbz\tx20, e8d8 <sem_open+0x3bc>\n    e5b8:\t39400262 \tldrb\tw2, [x19]\n    e5bc:\t7100bc5f \tcmp\tw2, #0x2f\n    e5c0:\t54000081 \tb.ne\te5d0 <sem_open+0xb4>\n    e5c4:\t38401e62 \tldrb\tw2, [x19,#1]!\n    e5c8:\t7100bc5f \tcmp\tw2, #0x2f\n    e5cc:\t54ffffc0 \tb.eq\te5c4 <sem_open+0xa8>\n    e5d0:\t34000f62 \tcbz\tw2, e7bc <sem_open+0x2a0>\n    e5d4:\taa1303e0 \tmov\tx0, x19\n    e5d8:\t97ffda6a \tbl\t4f80 <strlen@plt>\n    e5dc:\t91000400 \tadd\tx0, x0, #0x1\n    e5e0:\t910e4342 \tadd\tx2, x26, #0x390\n    e5e4:\taa1403e1 \tmov\tx1, x20\n    e5e8:\t9e67000a \tfmov\td10, x0\n    e5ec:\tf9400442 \tldr\tx2, [x2,#8]\n    e5f0:\t8b020003 \tadd\tx3, x0, x2\n    e5f4:\t910003e0 \tmov\tx0, sp\n    e5f8:\t91007863 \tadd\tx3, x3, #0x1e\n    e5fc:\t927cec63 \tand\tx3, x3, #0xfffffffffffffff0\n    e600:\tcb23601f \tsub\tsp, x0, x3\n    e604:\t910003e0 \tmov\tx0, sp\n    e608:\t9e670009 \tfmov\td9, x0\n    e60c:\t97ffdb15 \tbl\t5260 <mempcpy@plt>\n    e610:\t9e660142 \tfmov\tx2, d10\n    e614:\taa1303e1 \tmov\tx1, x19\n    e618:\t97ffda52 \tbl\t4f60 <memcpy@plt>\n    e61c:\tb94083a0 \tldr\tw0, [x29,#128]\n    e620:\t121a0400 \tand\tw0, w0, #0xc0\n    e624:\t7103001f \tcmp\tw0, #0xc0\n    e628:\t54000540 \tb.eq\te6d0 <sem_open+0x1b4>\n    e62c:\tb94083a0 \tldr\tw0, [x29,#128]\n    e630:\t12900861 \tmov\tw1, #0xffff7fbc            \t// #-32836\n    e634:\t52900042 \tmov\tw2, #0x8002                \t// #32770\n    e638:\t0a010001 \tand\tw1, w0, w1\n    e63c:\t9e660120 \tfmov\tx0, d9\n    e640:\t2a020021 \torr\tw1, w1, w2\n    e644:\t940007e7 \tbl\t105e0 <__open>\n    e648:\t3100041f \tcmn\tw0, #0x1\n    e64c:\t2a0003f5 \tmov\tw21, w0\n    e650:\t540002e0 \tb.eq\te6ac <sem_open+0x190>\n    e654:\t9e660141 \tfmov\tx1, d10\n    e658:\taa1303e0 \tmov\tx0, x19\n    e65c:\t2a1503e2 \tmov\tw2, w21\n    e660:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    e664:\t97ffff0b \tbl\te290 <check_add_mapping>\n    e668:\taa0003f4 \tmov\tx20, x0\n    e66c:\tb100069f \tcmn\tx20, #0x1\n    e670:\t93407ea0 \tsxtw\tx0, w21\n    e674:\t9a9f1294 \tcsel\tx20, x20, xzr, ne\n    e678:\td2800728 \tmov\tx8, #0x39                  \t// #57\n    e67c:\td4000001 \tsvc\t#0x0\n    e680:\taa1403e0 \tmov\tx0, x20\n    e684:\t910003bf \tmov\tsp, x29\n    e688:\t6d4627e8 \tldp\td8, d9, [sp,#96]\n    e68c:\tfd403bea \tldr\td10, [sp,#112]\n    e690:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    e694:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    e698:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    e69c:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n    e6a0:\ta94573fb \tldp\tx27, x28, [sp,#80]\n    e6a4:\ta8d87bfd \tldp\tx29, x30, [sp],#384\n    e6a8:\td65f03c0 \tret\n    e6ac:\tf94043a1 \tldr\tx1, [x29,#128]\n    e6b0:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    e6b4:\t3637fe81 \ttbz\tw1, #6, e684 <sem_open+0x168>\n    e6b8:\td53bd041 \tmrs\tx1, tpidr_el0\n    e6bc:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    e6c0:\tf947c442 \tldr\tx2, [x2,#3976]\n    e6c4:\tb8626821 \tldr\tw1, [x1,x2]\n    e6c8:\t7100083f \tcmp\tw1, #0x2\n    e6cc:\t54fffdc1 \tb.ne\te684 <sem_open+0x168>\n    e6d0:\t910603a0 \tadd\tx0, x29, #0x180\n    e6d4:\tf9004ba0 \tstr\tx0, [x29,#144]\n    e6d8:\tf9004fa0 \tstr\tx0, [x29,#152]\n    e6dc:\t910543a0 \tadd\tx0, x29, #0x150\n    e6e0:\tb9415ba2 \tldr\tw2, [x29,#344]\n    e6e4:\tf90053a0 \tstr\tx0, [x29,#160]\n    e6e8:\t12800fe0 \tmov\tw0, #0xffffff80            \t// #-128\n    e6ec:\tb900afa0 \tstr\tw0, [x29,#172]\n    e6f0:\t128004e0 \tmov\tw0, #0xffffffd8            \t// #-40\n    e6f4:\tb900aba0 \tstr\tw0, [x29,#168]\n    e6f8:\tb94153bc \tldr\tw28, [x29,#336]\n    e6fc:\t37f80e02 \ttbnz\tw2, #31, e8bc <sem_open+0x3a0>\n    e700:\t910e4340 \tadd\tx0, x26, #0x390\n    e704:\tb900b3a2 \tstr\tw2, [x29,#176]\n    e708:\t910003e3 \tmov\tx3, sp\n    e70c:\tf941cb41 \tldr\tx1, [x26,#912]\n    e710:\tb900b7bf \tstr\twzr, [x29,#180]\n    e714:\t52800655 \tmov\tw21, #0x32                  \t// #50\n    e718:\tf9400402 \tldr\tx2, [x0,#8]\n    e71c:\tf9005fbf \tstr\txzr, [x29,#184]\n    e720:\t91009440 \tadd\tx0, x2, #0x25\n    e724:\tb0000119 \tadrp\tx25, 2f000 <__FRAME_END__+0x18e30>\n    e728:\tf947c739 \tldr\tx25, [x25,#3976]\n    e72c:\t927cec00 \tand\tx0, x0, #0xfffffffffffffff0\n    e730:\tcb20607f \tsub\tsp, x3, x0\n    e734:\t910003e0 \tmov\tx0, sp\n    e738:\t910003f7 \tmov\tx23, sp\n    e73c:\ta90c7fbf \tstp\txzr, xzr, [x29,#192]\n    e740:\t97ffdac8 \tbl\t5260 <mempcpy@plt>\n    e744:\taa0003f4 \tmov\tx20, x0\n    e748:\t90000020 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n    e74c:\td53bd041 \tmrs\tx1, tpidr_el0\n    e750:\t91340000 \tadd\tx0, x0, #0xd00\n    e754:\t8b190039 \tadd\tx25, x1, x25\n    e758:\tb9400001 \tldr\tw1, [x0]\n    e75c:\t7940081b \tldrh\tw27, [x0,#4]\n    e760:\t39401818 \tldrb\tw24, [x0,#6]\n    e764:\t1e270028 \tfmov\ts8, w1\n    e768:\t1400000b \tb\te794 <sem_open+0x278>\n    e76c:\taa1703e0 \tmov\tx0, x23\n    e770:\t9400079c \tbl\t105e0 <__open>\n    e774:\t3100041f \tcmn\tw0, #0x1\n    e778:\t2a0003f6 \tmov\tw22, w0\n    e77c:\t540002e1 \tb.ne\te7d8 <sem_open+0x2bc>\n    e780:\tb9400323 \tldr\tw3, [x25]\n    e784:\t7100447f \tcmp\tw3, #0x11\n    e788:\t54000161 \tb.ne\te7b4 <sem_open+0x298>\n    e78c:\t710006b5 \tsubs\tw21, w21, #0x1\n    e790:\t54000860 \tb.eq\te89c <sem_open+0x380>\n    e794:\tbd000288 \tstr\ts8, [x20]\n    e798:\taa1703e0 \tmov\tx0, x23\n    e79c:\t79000a9b \tstrh\tw27, [x20,#4]\n    e7a0:\t39001a98 \tstrb\tw24, [x20,#6]\n    e7a4:\t97ffdad3 \tbl\t52f0 <__mktemp@plt>\n    e7a8:\t52801841 \tmov\tw1, #0xc2                  \t// #194\n    e7ac:\t2a1c03e2 \tmov\tw2, w28\n    e7b0:\tb5fffde0 \tcbnz\tx0, e76c <sem_open+0x250>\n    e7b4:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    e7b8:\t17ffffb3 \tb\te684 <sem_open+0x168>\n    e7bc:\td53bd041 \tmrs\tx1, tpidr_el0\n    e7c0:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    e7c4:\tf947c442 \tldr\tx2, [x2,#3976]\n    e7c8:\t528002c3 \tmov\tw3, #0x16                  \t// #22\n    e7cc:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    e7d0:\tb8226823 \tstr\tw3, [x1,x2]\n    e7d4:\t17ffffac \tb\te684 <sem_open+0x168>\n    e7d8:\tb0000114 \tadrp\tx20, 2f000 <__FRAME_END__+0x18e30>\n    e7dc:\tf947c694 \tldr\tx20, [x20,#3976]\n    e7e0:\t2a0003f5 \tmov\tw21, w0\n    e7e4:\td53bd040 \tmrs\tx0, tpidr_el0\n    e7e8:\t9102c3bc \tadd\tx28, x29, #0xb0\n    e7ec:\t8b140014 \tadd\tx20, x0, x20\n    e7f0:\t14000004 \tb\te800 <sem_open+0x2e4>\n    e7f4:\tb9400280 \tldr\tw0, [x20]\n    e7f8:\t7100101f \tcmp\tw0, #0x4\n    e7fc:\t54000581 \tb.ne\te8ac <sem_open+0x390>\n    e800:\t2a1603e0 \tmov\tw0, w22\n    e804:\taa1c03e1 \tmov\tx1, x28\n    e808:\td2800402 \tmov\tx2, #0x20                  \t// #32\n    e80c:\t94000505 \tbl\tfc20 <__write>\n    e810:\tb100041f \tcmn\tx0, #0x1\n    e814:\taa0003f9 \tmov\tx25, x0\n    e818:\t54fffee0 \tb.eq\te7f4 <sem_open+0x2d8>\n    e81c:\tf100801f \tcmp\tx0, #0x20\n    e820:\t54000461 \tb.ne\te8ac <sem_open+0x390>\n    e824:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    e828:\taa1903e1 \tmov\tx1, x25\n    e82c:\t52800062 \tmov\tw2, #0x3                   \t// #3\n    e830:\t52800023 \tmov\tw3, #0x1                   \t// #1\n    e834:\t2a1603e4 \tmov\tw4, w22\n    e838:\taa0003e5 \tmov\tx5, x0\n    e83c:\t97ffda65 \tbl\t51d0 <mmap@plt>\n    e840:\tb100041f \tcmn\tx0, #0x1\n    e844:\taa0003f4 \tmov\tx20, x0\n    e848:\t54000340 \tb.eq\te8b0 <sem_open+0x394>\n    e84c:\t9e660121 \tfmov\tx1, d9\n    e850:\taa1703e0 \tmov\tx0, x23\n    e854:\t97ffdab3 \tbl\t5320 <link@plt>\n    e858:\t340004e0 \tcbz\tw0, e8f4 <sem_open+0x3d8>\n    e85c:\taa1403e0 \tmov\tx0, x20\n    e860:\taa1903e1 \tmov\tx1, x25\n    e864:\t97ffda93 \tbl\t52b0 <munmap@plt>\n    e868:\tf94043a0 \tldr\tx0, [x29,#128]\n    e86c:\t37380200 \ttbnz\tw0, #7, e8ac <sem_open+0x390>\n    e870:\td53bd040 \tmrs\tx0, tpidr_el0\n    e874:\tb0000101 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    e878:\tf947c421 \tldr\tx1, [x1,#3976]\n    e87c:\tb8616800 \tldr\tw0, [x0,x1]\n    e880:\t7100441f \tcmp\tw0, #0x11\n    e884:\t54000141 \tb.ne\te8ac <sem_open+0x390>\n    e888:\taa1703e0 \tmov\tx0, x23\n    e88c:\t97ffdad1 \tbl\t53d0 <unlink@plt>\n    e890:\t2a1603e0 \tmov\tw0, w22\n    e894:\t9400051b \tbl\tfd00 <__close>\n    e898:\t17ffff65 \tb\te62c <sem_open+0x110>\n    e89c:\t52800160 \tmov\tw0, #0xb                   \t// #11\n    e8a0:\tb9000320 \tstr\tw0, [x25]\n    e8a4:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    e8a8:\t17ffff77 \tb\te684 <sem_open+0x168>\n    e8ac:\td2800014 \tmov\tx20, #0x0                   \t// #0\n    e8b0:\taa1703e0 \tmov\tx0, x23\n    e8b4:\t97ffdac7 \tbl\t53d0 <unlink@plt>\n    e8b8:\t17ffff6d \tb\te66c <sem_open+0x150>\n    e8bc:\td53bd040 \tmrs\tx0, tpidr_el0\n    e8c0:\tb0000101 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    e8c4:\tf947c421 \tldr\tx1, [x1,#3976]\n    e8c8:\t528002c2 \tmov\tw2, #0x16                  \t// #22\n    e8cc:\tb8216802 \tstr\tw2, [x0,x1]\n    e8d0:\td2800000 \tmov\tx0, #0x0                   \t// #0\n    e8d4:\t17ffff6c \tb\te684 <sem_open+0x168>\n    e8d8:\td53bd041 \tmrs\tx1, tpidr_el0\n    e8dc:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    e8e0:\tf947c442 \tldr\tx2, [x2,#3976]\n    e8e4:\t528004c3 \tmov\tw3, #0x26                  \t// #38\n    e8e8:\taa1403e0 \tmov\tx0, x20\n    e8ec:\tb8226823 \tstr\tw3, [x1,x2]\n    e8f0:\t17ffff65 \tb\te684 <sem_open+0x168>\n    e8f4:\t9e660141 \tfmov\tx1, d10\n    e8f8:\taa1403e3 \tmov\tx3, x20\n    e8fc:\taa1303e0 \tmov\tx0, x19\n    e900:\t2a1603e2 \tmov\tw2, w22\n    e904:\t97fffe63 \tbl\te290 <check_add_mapping>\n    e908:\taa0003f4 \tmov\tx20, x0\n    e90c:\t17ffffe9 \tb\te8b0 <sem_open+0x394>\n\n000000000000e910 <walker>:\n    e910:\td0000121 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n    e914:\tf9400000 \tldr\tx0, [x0]\n    e918:\t910b6023 \tadd\tx3, x1, #0x2d8\n    e91c:\tf9400c02 \tldr\tx2, [x0,#24]\n    e920:\tf9416c21 \tldr\tx1, [x1,#728]\n    e924:\teb01005f \tcmp\tx2, x1\n    e928:\t54000040 \tb.eq\te930 <walker+0x20>\n    e92c:\td65f03c0 \tret\n    e930:\tf9000460 \tstr\tx0, [x3,#8]\n    e934:\td65f03c0 \tret\n\n000000000000e938 <sem_close>:\n    e938:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    e93c:\t910003fd \tmov\tx29, sp\n    e940:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    e944:\td0000133 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n    e948:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    e94c:\tb9003fbf \tstr\twzr, [x29,#60]\n    e950:\taa0003f5 \tmov\tx21, x0\n    e954:\t910b3261 \tadd\tx1, x19, #0x2cc\n    e958:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    e95c:\t885ffc22 \tldaxr\tw2, [x1]\n    e960:\t6b1f005f \tcmp\tw2, wzr\n    e964:\t54000061 \tb.ne\te970 <sem_close+0x38>\n    e968:\t88037c20 \tstxr\tw3, w0, [x1]\n    e96c:\t35ffff83 \tcbnz\tw3, e95c <sem_close+0x24>\n    e970:\t540003c1 \tb.ne\te9e8 <sem_close+0xb0>\n    e974:\td0000123 \tadrp\tx3, 34000 <__GI___pthread_keys+0x3d78>\n    e978:\td0000122 \tadrp\tx2, 34000 <__GI___pthread_keys+0x3d78>\n    e97c:\t910b6054 \tadd\tx20, x2, #0x2d8\n    e980:\t90000001 \tadrp\tx1, e000 <__pthread_once+0xf8>\n    e984:\t91244021 \tadd\tx1, x1, #0x910\n    e988:\t910e8076 \tadd\tx22, x3, #0x3a0\n    e98c:\tf941d060 \tldr\tx0, [x3,#928]\n    e990:\tf900069f \tstr\txzr, [x20,#8]\n    e994:\tf9016c55 \tstr\tx21, [x2,#728]\n    e998:\t97ffd98e \tbl\t4fd0 <twalk@plt>\n    e99c:\tf9400680 \tldr\tx0, [x20,#8]\n    e9a0:\tb40005a0 \tcbz\tx0, ea54 <sem_close+0x11c>\n    e9a4:\tb9401002 \tldr\tw2, [x0,#16]\n    e9a8:\t52800015 \tmov\tw21, #0x0                   \t// #0\n    e9ac:\t51000442 \tsub\tw2, w2, #0x1\n    e9b0:\tb9001002 \tstr\tw2, [x0,#16]\n    e9b4:\t34000222 \tcbz\tw2, e9f8 <sem_close+0xc0>\n    e9b8:\t910b3261 \tadd\tx1, x19, #0x2cc\n    e9bc:\t52800002 \tmov\tw2, #0x0                   \t// #0\n    e9c0:\t885f7c20 \tldxr\tw0, [x1]\n    e9c4:\t8803fc22 \tstlxr\tw3, w2, [x1]\n    e9c8:\t35ffffc3 \tcbnz\tw3, e9c0 <sem_close+0x88>\n    e9cc:\t7100041f \tcmp\tw0, #0x1\n    e9d0:\t540002cc \tb.gt\tea28 <sem_close+0xf0>\n    e9d4:\t2a1503e0 \tmov\tw0, w21\n    e9d8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    e9dc:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    e9e0:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    e9e4:\td65f03c0 \tret\n    e9e8:\taa0103e0 \tmov\tx0, x1\n    e9ec:\tb9003fa2 \tstr\tw2, [x29,#60]\n    e9f0:\t9400035e \tbl\tf768 <__lll_lock_wait_private>\n    e9f4:\t17ffffe0 \tb\te974 <sem_close+0x3c>\n    e9f8:\t90000002 \tadrp\tx2, e000 <__pthread_once+0xf8>\n    e9fc:\taa1603e1 \tmov\tx1, x22\n    ea00:\t91139042 \tadd\tx2, x2, #0x4e4\n    ea04:\t97ffd9d7 \tbl\t5160 <tdelete@plt>\n    ea08:\tf9400680 \tldr\tx0, [x20,#8]\n    ea0c:\td2800401 \tmov\tx1, #0x20                  \t// #32\n    ea10:\tf9400c00 \tldr\tx0, [x0,#24]\n    ea14:\t97ffda27 \tbl\t52b0 <munmap@plt>\n    ea18:\t2a0003f5 \tmov\tw21, w0\n    ea1c:\tf9400680 \tldr\tx0, [x20,#8]\n    ea20:\t97ffda00 \tbl\t5220 <free@plt>\n    ea24:\t17ffffe5 \tb\te9b8 <sem_close+0x80>\n    ea28:\taa0103e0 \tmov\tx0, x1\n    ea2c:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    ea30:\td2801021 \tmov\tx1, #0x81                  \t// #129\n    ea34:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    ea38:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    ea3c:\td4000001 \tsvc\t#0x0\n    ea40:\t2a1503e0 \tmov\tw0, w21\n    ea44:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    ea48:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    ea4c:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    ea50:\td65f03c0 \tret\n    ea54:\td53bd040 \tmrs\tx0, tpidr_el0\n    ea58:\tb0000101 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    ea5c:\tf947c421 \tldr\tx1, [x1,#3976]\n    ea60:\t528002c2 \tmov\tw2, #0x16                  \t// #22\n    ea64:\t12800015 \tmov\tw21, #0xffffffff            \t// #-1\n    ea68:\tb8216802 \tstr\tw2, [x0,x1]\n    ea6c:\t17ffffd3 \tb\te9b8 <sem_close+0x80>\n\n000000000000ea70 <sem_unlink>:\n    ea70:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    ea74:\t90000001 \tadrp\tx1, e000 <__pthread_once+0xf8>\n    ea78:\t910003fd \tmov\tx29, sp\n    ea7c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    ea80:\taa0003f3 \tmov\tx19, x0\n    ea84:\td0000120 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n    ea88:\t91020021 \tadd\tx1, x1, #0x80\n    ea8c:\tf90013f5 \tstr\tx21, [sp,#32]\n    ea90:\td0000134 \tadrp\tx20, 34000 <__GI___pthread_keys+0x3d78>\n    ea94:\t910b4000 \tadd\tx0, x0, #0x2d0\n    ea98:\t97fffd1c \tbl\tdf08 <__pthread_once>\n    ea9c:\tf941ca81 \tldr\tx1, [x20,#912]\n    eaa0:\tb4000621 \tcbz\tx1, eb64 <sem_unlink+0xf4>\n    eaa4:\t39400260 \tldrb\tw0, [x19]\n    eaa8:\t7100bc1f \tcmp\tw0, #0x2f\n    eaac:\t54000081 \tb.ne\teabc <sem_unlink+0x4c>\n    eab0:\t38401e60 \tldrb\tw0, [x19,#1]!\n    eab4:\t7100bc1f \tcmp\tw0, #0x2f\n    eab8:\t54ffffc0 \tb.eq\teab0 <sem_unlink+0x40>\n    eabc:\t34000460 \tcbz\tw0, eb48 <sem_unlink+0xd8>\n    eac0:\taa1303e0 \tmov\tx0, x19\n    eac4:\t910e4294 \tadd\tx20, x20, #0x390\n    eac8:\tf9001fa1 \tstr\tx1, [x29,#56]\n    eacc:\t97ffd92d \tbl\t4f80 <strlen@plt>\n    ead0:\taa0003f5 \tmov\tx21, x0\n    ead4:\tf9400682 \tldr\tx2, [x20,#8]\n    ead8:\tf9401fa1 \tldr\tx1, [x29,#56]\n    eadc:\t8b000043 \tadd\tx3, x2, x0\n    eae0:\t910003e0 \tmov\tx0, sp\n    eae4:\t91007c63 \tadd\tx3, x3, #0x1f\n    eae8:\t927cec63 \tand\tx3, x3, #0xfffffffffffffff0\n    eaec:\tcb23601f \tsub\tsp, x0, x3\n    eaf0:\t910003e0 \tmov\tx0, sp\n    eaf4:\t97ffd9db \tbl\t5260 <mempcpy@plt>\n    eaf8:\taa1303e1 \tmov\tx1, x19\n    eafc:\t910006a2 \tadd\tx2, x21, #0x1\n    eb00:\t97ffd918 \tbl\t4f60 <memcpy@plt>\n    eb04:\t910003e0 \tmov\tx0, sp\n    eb08:\t97ffda32 \tbl\t53d0 <unlink@plt>\n    eb0c:\t37f800c0 \ttbnz\tw0, #31, eb24 <sem_unlink+0xb4>\n    eb10:\t910003bf \tmov\tsp, x29\n    eb14:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    eb18:\tf94013f5 \tldr\tx21, [sp,#32]\n    eb1c:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    eb20:\td65f03c0 \tret\n    eb24:\td53bd042 \tmrs\tx2, tpidr_el0\n    eb28:\tb0000101 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    eb2c:\tf947c421 \tldr\tx1, [x1,#3976]\n    eb30:\tb8616843 \tldr\tw3, [x2,x1]\n    eb34:\t7100047f \tcmp\tw3, #0x1\n    eb38:\t54fffec1 \tb.ne\teb10 <sem_unlink+0xa0>\n    eb3c:\t528001a3 \tmov\tw3, #0xd                   \t// #13\n    eb40:\tb8216843 \tstr\tw3, [x2,x1]\n    eb44:\t17fffff3 \tb\teb10 <sem_unlink+0xa0>\n    eb48:\td53bd041 \tmrs\tx1, tpidr_el0\n    eb4c:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    eb50:\tf947c442 \tldr\tx2, [x2,#3976]\n    eb54:\t52800043 \tmov\tw3, #0x2                   \t// #2\n    eb58:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    eb5c:\tb8226823 \tstr\tw3, [x1,x2]\n    eb60:\t17ffffec \tb\teb10 <sem_unlink+0xa0>\n    eb64:\td53bd041 \tmrs\tx1, tpidr_el0\n    eb68:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    eb6c:\tf947c442 \tldr\tx2, [x2,#3976]\n    eb70:\t528004c3 \tmov\tw3, #0x26                  \t// #38\n    eb74:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    eb78:\tb8226823 \tstr\tw3, [x1,x2]\n    eb7c:\t17ffffe5 \tb\teb10 <sem_unlink+0xa0>\n\n000000000000eb80 <sem_getvalue@@GLIBC_2.17>:\n    eb80:\tb9400002 \tldr\tw2, [x0]\n    eb84:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    eb88:\tb9000022 \tstr\tw2, [x1]\n    eb8c:\td65f03c0 \tret\n\n000000000000eb90 <__sem_wait_cleanup>:\n    eb90:\t91002000 \tadd\tx0, x0, #0x8\n    eb94:\tc85ffc01 \tldaxr\tx1, [x0]\n    eb98:\td1000421 \tsub\tx1, x1, #0x1\n    eb9c:\tc8027c01 \tstxr\tw2, x1, [x0]\n    eba0:\t35ffffa2 \tcbnz\tw2, eb94 <__sem_wait_cleanup+0x4>\n    eba4:\td65f03c0 \tret\n\n000000000000eba8 <do_futex_wait>:\n    eba8:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    ebac:\t910003fd \tmov\tx29, sp\n    ebb0:\tf9000bf3 \tstr\tx19, [sp,#16]\n    ebb4:\taa0003f3 \tmov\tx19, x0\n    ebb8:\t94000298 \tbl\tf618 <__pthread_enable_asynccancel>\n    ebbc:\t2a0003e4 \tmov\tw4, w0\n    ebc0:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    ebc4:\taa1303e0 \tmov\tx0, x19\n    ebc8:\tb9800661 \tldrsw\tx1, [x19,#4]\n    ebcc:\taa0203e3 \tmov\tx3, x2\n    ebd0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    ebd4:\td4000001 \tsvc\t#0x0\n    ebd8:\taa0003e1 \tmov\tx1, x0\n    ebdc:\t2a0403e0 \tmov\tw0, w4\n    ebe0:\tb13ffc3f \tcmn\tx1, #0xfff\n    ebe4:\t1a813053 \tcsel\tw19, w2, w1, cc\n    ebe8:\t940002bc \tbl\tf6d8 <__pthread_disable_asynccancel>\n    ebec:\t2a1303e0 \tmov\tw0, w19\n    ebf0:\tf9400bf3 \tldr\tx19, [sp,#16]\n    ebf4:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    ebf8:\td65f03c0 \tret\n\n000000000000ebfc <sem_wait@@GLIBC_2.17>:\n    ebfc:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n    ec00:\t910003fd \tmov\tx29, sp\n    ec04:\tb9400001 \tldr\tw1, [x0]\n    ec08:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    ec0c:\tf90013f5 \tstr\tx21, [sp,#32]\n    ec10:\t910103b4 \tadd\tx20, x29, #0x40\n    ec14:\t51000423 \tsub\tw3, w1, #0x1\n    ec18:\t2a0103e2 \tmov\tw2, w1\n    ec1c:\t34000241 \tcbz\tw1, ec64 <sem_wait@@GLIBC_2.17+0x68>\n    ec20:\tb90043a1 \tstr\tw1, [x29,#64]\n    ec24:\t885ffc01 \tldaxr\tw1, [x0]\n    ec28:\t6b02003f \tcmp\tw1, w2\n    ec2c:\t54000061 \tb.ne\tec38 <sem_wait@@GLIBC_2.17+0x3c>\n    ec30:\t88047c03 \tstxr\tw4, w3, [x0]\n    ec34:\t35ffff84 \tcbnz\tw4, ec24 <sem_wait@@GLIBC_2.17+0x28>\n    ec38:\t540000c1 \tb.ne\tec50 <sem_wait@@GLIBC_2.17+0x54>\n    ec3c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    ec40:\tf94013f5 \tldr\tx21, [sp,#32]\n    ec44:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    ec48:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    ec4c:\td65f03c0 \tret\n    ec50:\tb9000281 \tstr\tw1, [x20]\n    ec54:\tb9400001 \tldr\tw1, [x0]\n    ec58:\t51000423 \tsub\tw3, w1, #0x1\n    ec5c:\t2a0103e2 \tmov\tw2, w1\n    ec60:\t35fffe01 \tcbnz\tw1, ec20 <sem_wait@@GLIBC_2.17+0x24>\n    ec64:\taa0003f3 \tmov\tx19, x0\n    ec68:\t91002015 \tadd\tx21, x0, #0x8\n    ec6c:\tc85ffea0 \tldaxr\tx0, [x21]\n    ec70:\t91000400 \tadd\tx0, x0, #0x1\n    ec74:\tc8017ea0 \tstxr\tw1, x0, [x21]\n    ec78:\t35ffffa1 \tcbnz\tw1, ec6c <sem_wait@@GLIBC_2.17+0x70>\n    ec7c:\t90000001 \tadrp\tx1, e000 <__pthread_once+0xf8>\n    ec80:\taa1403e0 \tmov\tx0, x20\n    ec84:\t912e4021 \tadd\tx1, x1, #0xb90\n    ec88:\taa1303e2 \tmov\tx2, x19\n    ec8c:\t9400015d \tbl\tf200 <_pthread_cleanup_push>\n    ec90:\taa1303e0 \tmov\tx0, x19\n    ec94:\t97ffffc5 \tbl\teba8 <do_futex_wait>\n    ec98:\t31002c1f \tcmn\tw0, #0xb\n    ec9c:\t54000040 \tb.eq\teca4 <sem_wait@@GLIBC_2.17+0xa8>\n    eca0:\t35000360 \tcbnz\tw0, ed0c <sem_wait@@GLIBC_2.17+0x110>\n    eca4:\tb9400261 \tldr\tw1, [x19]\n    eca8:\t51000423 \tsub\tw3, w1, #0x1\n    ecac:\t2a0103e2 \tmov\tw2, w1\n    ecb0:\t34ffff01 \tcbz\tw1, ec90 <sem_wait@@GLIBC_2.17+0x94>\n    ecb4:\tb9003fa1 \tstr\tw1, [x29,#60]\n    ecb8:\t885ffe61 \tldaxr\tw1, [x19]\n    ecbc:\t6b02003f \tcmp\tw1, w2\n    ecc0:\t54000061 \tb.ne\teccc <sem_wait@@GLIBC_2.17+0xd0>\n    ecc4:\t88007e63 \tstxr\tw0, w3, [x19]\n    ecc8:\t35ffff80 \tcbnz\tw0, ecb8 <sem_wait@@GLIBC_2.17+0xbc>\n    eccc:\t54000060 \tb.eq\tecd8 <sem_wait@@GLIBC_2.17+0xdc>\n    ecd0:\tb9003fa1 \tstr\tw1, [x29,#60]\n    ecd4:\t17fffff4 \tb\teca4 <sem_wait@@GLIBC_2.17+0xa8>\n    ecd8:\t52800013 \tmov\tw19, #0x0                   \t// #0\n    ecdc:\taa1403e0 \tmov\tx0, x20\n    ece0:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    ece4:\t9400014f \tbl\tf220 <_pthread_cleanup_pop>\n    ece8:\tc85ffea0 \tldaxr\tx0, [x21]\n    ecec:\td1000400 \tsub\tx0, x0, #0x1\n    ecf0:\tc8017ea0 \tstxr\tw1, x0, [x21]\n    ecf4:\t35ffffa1 \tcbnz\tw1, ece8 <sem_wait@@GLIBC_2.17+0xec>\n    ecf8:\t2a1303e0 \tmov\tw0, w19\n    ecfc:\tf94013f5 \tldr\tx21, [sp,#32]\n    ed00:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    ed04:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    ed08:\td65f03c0 \tret\n    ed0c:\t4b0003e1 \tneg\tw1, w0\n    ed10:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    ed14:\tf947c442 \tldr\tx2, [x2,#3976]\n    ed18:\td53bd040 \tmrs\tx0, tpidr_el0\n    ed1c:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n    ed20:\tb8226801 \tstr\tw1, [x0,x2]\n    ed24:\t17ffffee \tb\tecdc <sem_wait@@GLIBC_2.17+0xe0>\n\n000000000000ed28 <sem_trywait@@GLIBC_2.17>:\n    ed28:\tb9400001 \tldr\tw1, [x0]\n    ed2c:\td10043ff \tsub\tsp, sp, #0x10\n    ed30:\t6b1f003f \tcmp\tw1, wzr\n    ed34:\t540001ed \tb.le\ted70 <sem_trywait@@GLIBC_2.17+0x48>\n    ed38:\tb9000fe1 \tstr\tw1, [sp,#12]\n    ed3c:\t51000422 \tsub\tw2, w1, #0x1\n    ed40:\t885ffc03 \tldaxr\tw3, [x0]\n    ed44:\t6b01007f \tcmp\tw3, w1\n    ed48:\t54000061 \tb.ne\ted54 <sem_trywait@@GLIBC_2.17+0x2c>\n    ed4c:\t88047c02 \tstxr\tw4, w2, [x0]\n    ed50:\t35ffff84 \tcbnz\tw4, ed40 <sem_trywait@@GLIBC_2.17+0x18>\n    ed54:\t54000081 \tb.ne\ted64 <sem_trywait@@GLIBC_2.17+0x3c>\n    ed58:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    ed5c:\t910043ff \tadd\tsp, sp, #0x10\n    ed60:\td65f03c0 \tret\n    ed64:\tb9400001 \tldr\tw1, [x0]\n    ed68:\t6b1f003f \tcmp\tw1, wzr\n    ed6c:\t54fffe6c \tb.gt\ted38 <sem_trywait@@GLIBC_2.17+0x10>\n    ed70:\td53bd041 \tmrs\tx1, tpidr_el0\n    ed74:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    ed78:\tf947c442 \tldr\tx2, [x2,#3976]\n    ed7c:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    ed80:\t52800163 \tmov\tw3, #0xb                   \t// #11\n    ed84:\t910043ff \tadd\tsp, sp, #0x10\n    ed88:\tb8226823 \tstr\tw3, [x1,x2]\n    ed8c:\td65f03c0 \tret\n\n000000000000ed90 <do_futex_timed_wait>:\n    ed90:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n    ed94:\t910003fd \tmov\tx29, sp\n    ed98:\tf9000bf3 \tstr\tx19, [sp,#16]\n    ed9c:\taa0003f3 \tmov\tx19, x0\n    eda0:\tf90017a1 \tstr\tx1, [x29,#40]\n    eda4:\t9400021d \tbl\tf618 <__pthread_enable_asynccancel>\n    eda8:\tb9800661 \tldrsw\tx1, [x19,#4]\n    edac:\t2a0003e4 \tmov\tw4, w0\n    edb0:\td2800002 \tmov\tx2, #0x0                   \t// #0\n    edb4:\taa1303e0 \tmov\tx0, x19\n    edb8:\tf94017a3 \tldr\tx3, [x29,#40]\n    edbc:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    edc0:\td4000001 \tsvc\t#0x0\n    edc4:\taa0003e1 \tmov\tx1, x0\n    edc8:\t2a0403e0 \tmov\tw0, w4\n    edcc:\tb13ffc3f \tcmn\tx1, #0xfff\n    edd0:\t1a813053 \tcsel\tw19, w2, w1, cc\n    edd4:\t94000241 \tbl\tf6d8 <__pthread_disable_asynccancel>\n    edd8:\t2a1303e0 \tmov\tw0, w19\n    eddc:\tf9400bf3 \tldr\tx19, [sp,#16]\n    ede0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n    ede4:\td65f03c0 \tret\n\n000000000000ede8 <sem_timedwait>:\n    ede8:\ta9b67bfd \tstp\tx29, x30, [sp,#-160]!\n    edec:\t910003fd \tmov\tx29, sp\n    edf0:\tb9400002 \tldr\tw2, [x0]\n    edf4:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    edf8:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    edfc:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    ee00:\tf90023f9 \tstr\tx25, [sp,#64]\n    ee04:\t51000444 \tsub\tw4, w2, #0x1\n    ee08:\t2a0203e3 \tmov\tw3, w2\n    ee0c:\t34000282 \tcbz\tw2, ee5c <sem_timedwait+0x74>\n    ee10:\tb90083a2 \tstr\tw2, [x29,#128]\n    ee14:\t885ffc02 \tldaxr\tw2, [x0]\n    ee18:\t6b03005f \tcmp\tw2, w3\n    ee1c:\t54000061 \tb.ne\tee28 <sem_timedwait+0x40>\n    ee20:\t88057c04 \tstxr\tw5, w4, [x0]\n    ee24:\t35ffff85 \tcbnz\tw5, ee14 <sem_timedwait+0x2c>\n    ee28:\t54000101 \tb.ne\tee48 <sem_timedwait+0x60>\n    ee2c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    ee30:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    ee34:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    ee38:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    ee3c:\tf94023f9 \tldr\tx25, [sp,#64]\n    ee40:\ta8ca7bfd \tldp\tx29, x30, [sp],#160\n    ee44:\td65f03c0 \tret\n    ee48:\tb90083a2 \tstr\tw2, [x29,#128]\n    ee4c:\tb9400002 \tldr\tw2, [x0]\n    ee50:\t51000444 \tsub\tw4, w2, #0x1\n    ee54:\t2a0203e3 \tmov\tw3, w2\n    ee58:\t35fffdc2 \tcbnz\tw2, ee10 <sem_timedwait+0x28>\n    ee5c:\tf9400423 \tldr\tx3, [x1,#8]\n    ee60:\td2993fe2 \tmov\tx2, #0xc9ff                \t// #51711\n    ee64:\tf2a77342 \tmovk\tx2, #0x3b9a, lsl #16\n    ee68:\teb02007f \tcmp\tx3, x2\n    ee6c:\t54000aa8 \tb.hi\tefc0 <sem_timedwait+0x1d8>\n    ee70:\taa0103f4 \tmov\tx20, x1\n    ee74:\taa0003f3 \tmov\tx19, x0\n    ee78:\t91002017 \tadd\tx23, x0, #0x8\n    ee7c:\tc85ffee0 \tldaxr\tx0, [x23]\n    ee80:\t91000400 \tadd\tx0, x0, #0x1\n    ee84:\tc8017ee0 \tstxr\tw1, x0, [x23]\n    ee88:\t35ffffa1 \tcbnz\tw1, ee7c <sem_timedwait+0x94>\n    ee8c:\t910203b8 \tadd\tx24, x29, #0x80\n    ee90:\t90000001 \tadrp\tx1, e000 <__pthread_once+0xf8>\n    ee94:\taa1803e0 \tmov\tx0, x24\n    ee98:\t912e4021 \tadd\tx1, x1, #0xb90\n    ee9c:\taa1303e2 \tmov\tx2, x19\n    eea0:\t910183b6 \tadd\tx22, x29, #0x60\n    eea4:\t12807cf5 \tmov\tw21, #0xfffffc18            \t// #-1000\n    eea8:\t9101c3b9 \tadd\tx25, x29, #0x70\n    eeac:\t940000d5 \tbl\tf200 <_pthread_cleanup_push>\n    eeb0:\taa1603e0 \tmov\tx0, x22\n    eeb4:\td2800001 \tmov\tx1, #0x0                   \t// #0\n    eeb8:\t97ffd842 \tbl\t4fc0 <__gettimeofday@plt>\n    eebc:\tf9400682 \tldr\tx2, [x20,#8]\n    eec0:\tf94037a3 \tldr\tx3, [x29,#104]\n    eec4:\tf9400284 \tldr\tx4, [x20]\n    eec8:\t1b030aa3 \tmadd\tw3, w21, w3, w2\n    eecc:\tf94033a2 \tldr\tx2, [x29,#96]\n    eed0:\t4b020084 \tsub\tw4, w4, w2\n    eed4:\t37f80323 \ttbnz\tw3, #31, ef38 <sem_timedwait+0x150>\n    eed8:\t37f803a4 \ttbnz\tw4, #31, ef4c <sem_timedwait+0x164>\n    eedc:\t93407c84 \tsxtw\tx4, w4\n    eee0:\t93407c63 \tsxtw\tx3, w3\n    eee4:\taa1303e0 \tmov\tx0, x19\n    eee8:\taa1903e1 \tmov\tx1, x25\n    eeec:\tf9003ba4 \tstr\tx4, [x29,#112]\n    eef0:\tf9003fa3 \tstr\tx3, [x29,#120]\n    eef4:\t97ffffa7 \tbl\ted90 <do_futex_timed_wait>\n    eef8:\t31002c1f \tcmn\tw0, #0xb\n    eefc:\t54000040 \tb.eq\tef04 <sem_timedwait+0x11c>\n    ef00:\t35000520 \tcbnz\tw0, efa4 <sem_timedwait+0x1bc>\n    ef04:\tb9400263 \tldr\tw3, [x19]\n    ef08:\t51000460 \tsub\tw0, w3, #0x1\n    ef0c:\t2a0303e2 \tmov\tw2, w3\n    ef10:\t34fffd03 \tcbz\tw3, eeb0 <sem_timedwait+0xc8>\n    ef14:\tb9005fa3 \tstr\tw3, [x29,#92]\n    ef18:\t885ffe61 \tldaxr\tw1, [x19]\n    ef1c:\t6b02003f \tcmp\tw1, w2\n    ef20:\t54000061 \tb.ne\tef2c <sem_timedwait+0x144>\n    ef24:\t88037e60 \tstxr\tw3, w0, [x19]\n    ef28:\t35ffff83 \tcbnz\tw3, ef18 <sem_timedwait+0x130>\n    ef2c:\t540001e0 \tb.eq\tef68 <sem_timedwait+0x180>\n    ef30:\tb9005fa1 \tstr\tw1, [x29,#92]\n    ef34:\t17fffff4 \tb\tef04 <sem_timedwait+0x11c>\n    ef38:\t52994000 \tmov\tw0, #0xca00                \t// #51712\n    ef3c:\t51000484 \tsub\tw4, w4, #0x1\n    ef40:\t72a77340 \tmovk\tw0, #0x3b9a, lsl #16\n    ef44:\t0b000063 \tadd\tw3, w3, w0\n    ef48:\t36fffca4 \ttbz\tw4, #31, eedc <sem_timedwait+0xf4>\n    ef4c:\td53bd040 \tmrs\tx0, tpidr_el0\n    ef50:\tb0000101 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    ef54:\tf947c421 \tldr\tx1, [x1,#3976]\n    ef58:\t52800dc2 \tmov\tw2, #0x6e                  \t// #110\n    ef5c:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n    ef60:\tb8216802 \tstr\tw2, [x0,x1]\n    ef64:\t14000002 \tb\tef6c <sem_timedwait+0x184>\n    ef68:\t52800013 \tmov\tw19, #0x0                   \t// #0\n    ef6c:\taa1803e0 \tmov\tx0, x24\n    ef70:\t52800001 \tmov\tw1, #0x0                   \t// #0\n    ef74:\t940000ab \tbl\tf220 <_pthread_cleanup_pop>\n    ef78:\tc85ffee0 \tldaxr\tx0, [x23]\n    ef7c:\td1000400 \tsub\tx0, x0, #0x1\n    ef80:\tc8017ee0 \tstxr\tw1, x0, [x23]\n    ef84:\t35ffffa1 \tcbnz\tw1, ef78 <sem_timedwait+0x190>\n    ef88:\t2a1303e0 \tmov\tw0, w19\n    ef8c:\tf94023f9 \tldr\tx25, [sp,#64]\n    ef90:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    ef94:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    ef98:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    ef9c:\ta8ca7bfd \tldp\tx29, x30, [sp],#160\n    efa0:\td65f03c0 \tret\n    efa4:\t4b0003e1 \tneg\tw1, w0\n    efa8:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    efac:\tf947c442 \tldr\tx2, [x2,#3976]\n    efb0:\td53bd040 \tmrs\tx0, tpidr_el0\n    efb4:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n    efb8:\tb8226801 \tstr\tw1, [x0,x2]\n    efbc:\t17ffffec \tb\tef6c <sem_timedwait+0x184>\n    efc0:\td53bd041 \tmrs\tx1, tpidr_el0\n    efc4:\tb0000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    efc8:\tf947c442 \tldr\tx2, [x2,#3976]\n    efcc:\t528002c3 \tmov\tw3, #0x16                  \t// #22\n    efd0:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    efd4:\tb8226823 \tstr\tw3, [x1,x2]\n    efd8:\t17ffff96 \tb\tee30 <sem_timedwait+0x48>\n\n000000000000efdc <sem_post@@GLIBC_2.17>:\n    efdc:\td10043ff \tsub\tsp, sp, #0x10\n    efe0:\t12b00004 \tmov\tw4, #0x7fffffff            \t// #2147483647\n    efe4:\tb9400001 \tldr\tw1, [x0]\n    efe8:\t6b04003f \tcmp\tw1, w4\n    efec:\t11000423 \tadd\tw3, w1, #0x1\n    eff0:\t2a0103e2 \tmov\tw2, w1\n    eff4:\t540002c0 \tb.eq\tf04c <sem_post@@GLIBC_2.17+0x70>\n    eff8:\tb9000fe1 \tstr\tw1, [sp,#12]\n    effc:\t885f7c01 \tldxr\tw1, [x0]\n    f000:\t6b02003f \tcmp\tw1, w2\n    f004:\t54000061 \tb.ne\tf010 <sem_post@@GLIBC_2.17+0x34>\n    f008:\t8805fc03 \tstlxr\tw5, w3, [x0]\n    f00c:\t35ffff85 \tcbnz\tw5, effc <sem_post@@GLIBC_2.17+0x20>\n    f010:\t54fffea1 \tb.ne\tefe4 <sem_post@@GLIBC_2.17+0x8>\n    f014:\td5033bbf \tdmb\tish\n    f018:\tf9400401 \tldr\tx1, [x0,#8]\n    f01c:\tb4000141 \tcbz\tx1, f044 <sem_post@@GLIBC_2.17+0x68>\n    f020:\tb9400401 \tldr\tw1, [x0,#4]\n    f024:\td2800022 \tmov\tx2, #0x1                   \t// #1\n    f028:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    f02c:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    f030:\t52000021 \teor\tw1, w1, #0x1\n    f034:\t93407c21 \tsxtw\tx1, w1\n    f038:\td4000001 \tsvc\t#0x0\n    f03c:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    f040:\t54000168 \tb.hi\tf06c <sem_post@@GLIBC_2.17+0x90>\n    f044:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    f048:\t14000007 \tb\tf064 <sem_post@@GLIBC_2.17+0x88>\n    f04c:\td53bd041 \tmrs\tx1, tpidr_el0\n    f050:\t90000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    f054:\tf947c442 \tldr\tx2, [x2,#3976]\n    f058:\t52800963 \tmov\tw3, #0x4b                  \t// #75\n    f05c:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    f060:\tb8226823 \tstr\tw3, [x1,x2]\n    f064:\t910043ff \tadd\tsp, sp, #0x10\n    f068:\td65f03c0 \tret\n    f06c:\td53bd042 \tmrs\tx2, tpidr_el0\n    f070:\t90000103 \tadrp\tx3, 2f000 <__FRAME_END__+0x18e30>\n    f074:\tf947c463 \tldr\tx3, [x3,#3976]\n    f078:\t4b0003e1 \tneg\tw1, w0\n    f07c:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    f080:\tb8236841 \tstr\tw1, [x2,x3]\n    f084:\t17fffff8 \tb\tf064 <sem_post@@GLIBC_2.17+0x88>\n\n000000000000f088 <__pthread_register_cancel>:\n    f088:\td53bd041 \tmrs\tx1, tpidr_el0\n    f08c:\td11bc021 \tsub\tx1, x1, #0x6f0\n    f090:\tf9408022 \tldr\tx2, [x1,#256]\n    f094:\tf9005c02 \tstr\tx2, [x0,#184]\n    f098:\tf9407c22 \tldr\tx2, [x1,#248]\n    f09c:\tf9006002 \tstr\tx2, [x0,#192]\n    f0a0:\tf9008020 \tstr\tx0, [x1,#256]\n    f0a4:\td65f03c0 \tret\n\n000000000000f0a8 <__pthread_unregister_cancel>:\n    f0a8:\tf9405c01 \tldr\tx1, [x0,#184]\n    f0ac:\td53bd040 \tmrs\tx0, tpidr_el0\n    f0b0:\td11bc000 \tsub\tx0, x0, #0x6f0\n    f0b4:\tf9008001 \tstr\tx1, [x0,#256]\n    f0b8:\td65f03c0 \tret\n\n000000000000f0bc <__pthread_register_cancel_defer>:\n    f0bc:\td53bd041 \tmrs\tx1, tpidr_el0\n    f0c0:\td10043ff \tsub\tsp, sp, #0x10\n    f0c4:\td11bc021 \tsub\tx1, x1, #0x6f0\n    f0c8:\tf9408022 \tldr\tx2, [x1,#256]\n    f0cc:\tf9005c02 \tstr\tx2, [x0,#184]\n    f0d0:\tf9407c22 \tldr\tx2, [x1,#248]\n    f0d4:\tf9006002 \tstr\tx2, [x0,#192]\n    f0d8:\tb9410822 \tldr\tw2, [x1,#264]\n    f0dc:\t370800c2 \ttbnz\tw2, #1, f0f4 <__pthread_register_cancel_defer+0x38>\n    f0e0:\td3410442 \tubfx\tx2, x2, #1, #1\n    f0e4:\tb900c802 \tstr\tw2, [x0,#200]\n    f0e8:\tf9008020 \tstr\tx0, [x1,#256]\n    f0ec:\t910043ff \tadd\tsp, sp, #0x10\n    f0f0:\td65f03c0 \tret\n    f0f4:\t91042023 \tadd\tx3, x1, #0x108\n    f0f8:\t2a0203e4 \tmov\tw4, w2\n    f0fc:\t910033e7 \tadd\tx7, sp, #0xc\n    f100:\tb9000fe2 \tstr\tw2, [sp,#12]\n    f104:\t121e7845 \tand\tw5, w2, #0xfffffffd\n    f108:\t885ffc66 \tldaxr\tw6, [x3]\n    f10c:\t6b0200df \tcmp\tw6, w2\n    f110:\t54000061 \tb.ne\tf11c <__pthread_register_cancel_defer+0x60>\n    f114:\t88087c65 \tstxr\tw8, w5, [x3]\n    f118:\t35ffff88 \tcbnz\tw8, f108 <__pthread_register_cancel_defer+0x4c>\n    f11c:\t54000040 \tb.eq\tf124 <__pthread_register_cancel_defer+0x68>\n    f120:\tb90000e6 \tstr\tw6, [x7]\n    f124:\tb9400fe2 \tldr\tw2, [sp,#12]\n    f128:\t6b02009f \tcmp\tw4, w2\n    f12c:\t54fffda0 \tb.eq\tf0e0 <__pthread_register_cancel_defer+0x24>\n    f130:\t2a0203e4 \tmov\tw4, w2\n    f134:\t17fffff3 \tb\tf100 <__pthread_register_cancel_defer+0x44>\n\n000000000000f138 <__pthread_unregister_cancel_restore>:\n    f138:\td53bd042 \tmrs\tx2, tpidr_el0\n    f13c:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    f140:\td11bc041 \tsub\tx1, x2, #0x6f0\n    f144:\t910003fd \tmov\tx29, sp\n    f148:\tf9405c03 \tldr\tx3, [x0,#184]\n    f14c:\tf9008023 \tstr\tx3, [x1,#256]\n    f150:\tb940c800 \tldr\tw0, [x0,#200]\n    f154:\t340002e0 \tcbz\tw0, f1b0 <__pthread_unregister_cancel_restore+0x78>\n    f158:\tb9410820 \tldr\tw0, [x1,#264]\n    f15c:\t370802a0 \ttbnz\tw0, #1, f1b0 <__pthread_unregister_cancel_restore+0x78>\n    f160:\t91042024 \tadd\tx4, x1, #0x108\n    f164:\t910073a7 \tadd\tx7, x29, #0x1c\n    f168:\tb9001fa0 \tstr\tw0, [x29,#28]\n    f16c:\t321f0003 \torr\tw3, w0, #0x2\n    f170:\t2a0003e5 \tmov\tw5, w0\n    f174:\t885ffc86 \tldaxr\tw6, [x4]\n    f178:\t6b0500df \tcmp\tw6, w5\n    f17c:\t54000061 \tb.ne\tf188 <__pthread_unregister_cancel_restore+0x50>\n    f180:\t88087c83 \tstxr\tw8, w3, [x4]\n    f184:\t35ffff88 \tcbnz\tw8, f174 <__pthread_unregister_cancel_restore+0x3c>\n    f188:\t54000040 \tb.eq\tf190 <__pthread_unregister_cancel_restore+0x58>\n    f18c:\tb90000e6 \tstr\tw6, [x7]\n    f190:\tb9401fa3 \tldr\tw3, [x29,#28]\n    f194:\t6b03001f \tcmp\tw0, w3\n    f198:\t540002c1 \tb.ne\tf1f0 <__pthread_unregister_cancel_restore+0xb8>\n    f19c:\tb9410823 \tldr\tw3, [x1,#264]\n    f1a0:\t128008c0 \tmov\tw0, #0xffffffb9            \t// #-71\n    f1a4:\t0a000060 \tand\tw0, w3, w0\n    f1a8:\t7100201f \tcmp\tw0, #0x8\n    f1ac:\t54000060 \tb.eq\tf1b8 <__pthread_unregister_cancel_restore+0x80>\n    f1b0:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    f1b4:\td65f03c0 \tret\n    f1b8:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    f1bc:\td117a042 \tsub\tx2, x2, #0x5e8\n    f1c0:\tf9021420 \tstr\tx0, [x1,#1064]\n    f1c4:\tb9400040 \tldr\tw0, [x2]\n    f1c8:\tb9001fa0 \tstr\tw0, [x29,#28]\n    f1cc:\t321c0005 \torr\tw5, w0, #0x10\n    f1d0:\t885ffc83 \tldaxr\tw3, [x4]\n    f1d4:\t6b00007f \tcmp\tw3, w0\n    f1d8:\t54000061 \tb.ne\tf1e4 <__pthread_unregister_cancel_restore+0xac>\n    f1dc:\t88067c85 \tstxr\tw6, w5, [x4]\n    f1e0:\t35ffff86 \tcbnz\tw6, f1d0 <__pthread_unregister_cancel_restore+0x98>\n    f1e4:\t540000a0 \tb.eq\tf1f8 <__pthread_unregister_cancel_restore+0xc0>\n    f1e8:\tb90000e3 \tstr\tw3, [x7]\n    f1ec:\t17fffff6 \tb\tf1c4 <__pthread_unregister_cancel_restore+0x8c>\n    f1f0:\t2a0303e0 \tmov\tw0, w3\n    f1f4:\t17ffffdd \tb\tf168 <__pthread_unregister_cancel_restore+0x30>\n    f1f8:\tf9408020 \tldr\tx0, [x1,#256]\n    f1fc:\t940000c2 \tbl\tf504 <__pthread_unwind>\n\n000000000000f200 <_pthread_cleanup_push>:\n    f200:\td53bd043 \tmrs\tx3, tpidr_el0\n    f204:\tf9000001 \tstr\tx1, [x0]\n    f208:\td11bc063 \tsub\tx3, x3, #0x6f0\n    f20c:\tf9407c61 \tldr\tx1, [x3,#248]\n    f210:\tf9000c01 \tstr\tx1, [x0,#24]\n    f214:\tf9000402 \tstr\tx2, [x0,#8]\n    f218:\tf9007c60 \tstr\tx0, [x3,#248]\n    f21c:\td65f03c0 \tret\n\n000000000000f220 <_pthread_cleanup_pop>:\n    f220:\td53bd042 \tmrs\tx2, tpidr_el0\n    f224:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    f228:\td11bc042 \tsub\tx2, x2, #0x6f0\n    f22c:\t910003fd \tmov\tx29, sp\n    f230:\tf9400c03 \tldr\tx3, [x0,#24]\n    f234:\tf9007c43 \tstr\tx3, [x2,#248]\n    f238:\t34000081 \tcbz\tw1, f248 <_pthread_cleanup_pop+0x28>\n    f23c:\tf9400001 \tldr\tx1, [x0]\n    f240:\tf9400400 \tldr\tx0, [x0,#8]\n    f244:\td63f0020 \tblr\tx1\n    f248:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n    f24c:\td65f03c0 \tret\n\n000000000000f250 <_pthread_cleanup_push_defer>:\n    f250:\td53bd043 \tmrs\tx3, tpidr_el0\n    f254:\tf9000001 \tstr\tx1, [x0]\n    f258:\td11bc063 \tsub\tx3, x3, #0x6f0\n    f25c:\td10043ff \tsub\tsp, sp, #0x10\n    f260:\tf9407c64 \tldr\tx4, [x3,#248]\n    f264:\tb9410861 \tldr\tw1, [x3,#264]\n    f268:\tf9000402 \tstr\tx2, [x0,#8]\n    f26c:\tf9000c04 \tstr\tx4, [x0,#24]\n    f270:\t370800c1 \ttbnz\tw1, #1, f288 <_pthread_cleanup_push_defer+0x38>\n    f274:\td3410421 \tubfx\tx1, x1, #1, #1\n    f278:\tb9001001 \tstr\tw1, [x0,#16]\n    f27c:\tf9007c60 \tstr\tx0, [x3,#248]\n    f280:\t910043ff \tadd\tsp, sp, #0x10\n    f284:\td65f03c0 \tret\n    f288:\t91042062 \tadd\tx2, x3, #0x108\n    f28c:\t2a0103e4 \tmov\tw4, w1\n    f290:\t910033e7 \tadd\tx7, sp, #0xc\n    f294:\tb9000fe1 \tstr\tw1, [sp,#12]\n    f298:\t121e7825 \tand\tw5, w1, #0xfffffffd\n    f29c:\t885ffc46 \tldaxr\tw6, [x2]\n    f2a0:\t6b0100df \tcmp\tw6, w1\n    f2a4:\t54000061 \tb.ne\tf2b0 <_pthread_cleanup_push_defer+0x60>\n    f2a8:\t88087c45 \tstxr\tw8, w5, [x2]\n    f2ac:\t35ffff88 \tcbnz\tw8, f29c <_pthread_cleanup_push_defer+0x4c>\n    f2b0:\t54000040 \tb.eq\tf2b8 <_pthread_cleanup_push_defer+0x68>\n    f2b4:\tb90000e6 \tstr\tw6, [x7]\n    f2b8:\tb9400fe1 \tldr\tw1, [sp,#12]\n    f2bc:\t6b01009f \tcmp\tw4, w1\n    f2c0:\t54fffda0 \tb.eq\tf274 <_pthread_cleanup_push_defer+0x24>\n    f2c4:\t2a0103e4 \tmov\tw4, w1\n    f2c8:\t17fffff3 \tb\tf294 <_pthread_cleanup_push_defer+0x44>\n\n000000000000f2cc <_pthread_cleanup_pop_restore>:\n    f2cc:\td53bd043 \tmrs\tx3, tpidr_el0\n    f2d0:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    f2d4:\td11bc062 \tsub\tx2, x3, #0x6f0\n    f2d8:\t910003fd \tmov\tx29, sp\n    f2dc:\tf9400c05 \tldr\tx5, [x0,#24]\n    f2e0:\tb9401004 \tldr\tw4, [x0,#16]\n    f2e4:\tf9007c45 \tstr\tx5, [x2,#248]\n    f2e8:\t350000e4 \tcbnz\tw4, f304 <_pthread_cleanup_pop_restore+0x38>\n    f2ec:\t34000081 \tcbz\tw1, f2fc <_pthread_cleanup_pop_restore+0x30>\n    f2f0:\tf9400001 \tldr\tx1, [x0]\n    f2f4:\tf9400400 \tldr\tx0, [x0,#8]\n    f2f8:\td63f0020 \tblr\tx1\n    f2fc:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    f300:\td65f03c0 \tret\n    f304:\tb9410844 \tldr\tw4, [x2,#264]\n    f308:\t370fff24 \ttbnz\tw4, #1, f2ec <_pthread_cleanup_pop_restore+0x20>\n    f30c:\t91042046 \tadd\tx6, x2, #0x108\n    f310:\t910073a9 \tadd\tx9, x29, #0x1c\n    f314:\tb9001fa4 \tstr\tw4, [x29,#28]\n    f318:\t321f0085 \torr\tw5, w4, #0x2\n    f31c:\t2a0403e7 \tmov\tw7, w4\n    f320:\t885ffcc8 \tldaxr\tw8, [x6]\n    f324:\t6b07011f \tcmp\tw8, w7\n    f328:\t54000061 \tb.ne\tf334 <_pthread_cleanup_pop_restore+0x68>\n    f32c:\t880a7cc5 \tstxr\tw10, w5, [x6]\n    f330:\t35ffff8a \tcbnz\tw10, f320 <_pthread_cleanup_pop_restore+0x54>\n    f334:\t540002e1 \tb.ne\tf390 <_pthread_cleanup_pop_restore+0xc4>\n    f338:\tb9401fa5 \tldr\tw5, [x29,#28]\n    f33c:\t6b05009f \tcmp\tw4, w5\n    f340:\t540002c1 \tb.ne\tf398 <_pthread_cleanup_pop_restore+0xcc>\n    f344:\tb9410845 \tldr\tw5, [x2,#264]\n    f348:\t128008c4 \tmov\tw4, #0xffffffb9            \t// #-71\n    f34c:\t0a0400a4 \tand\tw4, w5, w4\n    f350:\t7100209f \tcmp\tw4, #0x8\n    f354:\t54fffcc1 \tb.ne\tf2ec <_pthread_cleanup_pop_restore+0x20>\n    f358:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    f35c:\td117a063 \tsub\tx3, x3, #0x5e8\n    f360:\tf9021440 \tstr\tx0, [x2,#1064]\n    f364:\tb9400060 \tldr\tw0, [x3]\n    f368:\tb9001fa0 \tstr\tw0, [x29,#28]\n    f36c:\t321c0004 \torr\tw4, w0, #0x10\n    f370:\t885ffcc1 \tldaxr\tw1, [x6]\n    f374:\t6b00003f \tcmp\tw1, w0\n    f378:\t54000061 \tb.ne\tf384 <_pthread_cleanup_pop_restore+0xb8>\n    f37c:\t88057cc4 \tstxr\tw5, w4, [x6]\n    f380:\t35ffff85 \tcbnz\tw5, f370 <_pthread_cleanup_pop_restore+0xa4>\n    f384:\t540000e0 \tb.eq\tf3a0 <_pthread_cleanup_pop_restore+0xd4>\n    f388:\tb9000121 \tstr\tw1, [x9]\n    f38c:\t17fffff6 \tb\tf364 <_pthread_cleanup_pop_restore+0x98>\n    f390:\tb9000128 \tstr\tw8, [x9]\n    f394:\t17ffffe9 \tb\tf338 <_pthread_cleanup_pop_restore+0x6c>\n    f398:\t2a0503e4 \tmov\tw4, w5\n    f39c:\t17ffffde \tb\tf314 <_pthread_cleanup_pop_restore+0x48>\n    f3a0:\tf9408040 \tldr\tx0, [x2,#256]\n    f3a4:\t94000058 \tbl\tf504 <__pthread_unwind>\n\n000000000000f3a8 <unwind_cleanup>:\n    f3a8:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    f3ac:\tf0000001 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n    f3b0:\td2800040 \tmov\tx0, #0x2                   \t// #2\n    f3b4:\t910003fd \tmov\tx29, sp\n    f3b8:\t9134c021 \tadd\tx1, x1, #0xd30\n    f3bc:\td28003c2 \tmov\tx2, #0x1e                  \t// #30\n    f3c0:\td2800808 \tmov\tx8, #0x40                  \t// #64\n    f3c4:\td4000001 \tsvc\t#0x0\n    f3c8:\t97ffd76a \tbl\t5170 <abort@plt>\n\n000000000000f3cc <unwind_stop>:\n    f3cc:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n    f3d0:\t910003fd \tmov\tx29, sp\n    f3d4:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    f3d8:\td53bd054 \tmrs\tx20, tpidr_el0\n    f3dc:\tf90023f9 \tstr\tx25, [sp,#64]\n    f3e0:\td11bc294 \tsub\tx20, x20, #0x6f0\n    f3e4:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    f3e8:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    f3ec:\tf9424a95 \tldr\tx21, [x20,#1168]\n    f3f0:\taa0503f7 \tmov\tx23, x5\n    f3f4:\tf9424e82 \tldr\tx2, [x20,#1176]\n    f3f8:\tf9407e93 \tldr\tx19, [x20,#248]\n    f3fc:\t8b0202b5 \tadd\tx21, x21, x2\n    f400:\t362000a1 \ttbz\tw1, #4, f414 <unwind_stop+0x48>\n    f404:\tb5000333 \tcbnz\tx19, f468 <unwind_stop+0x9c>\n    f408:\taa1703e0 \tmov\tx0, x23\n    f40c:\t52800021 \tmov\tw1, #0x1                   \t// #1\n    f410:\t97ffd7e4 \tbl\t53a0 <__libc_longjmp@plt>\n    f414:\taa0403e0 \tmov\tx0, x4\n    f418:\tf9002fa4 \tstr\tx4, [x29,#88]\n    f41c:\t940009a2 \tbl\t11aa4 <_Unwind_GetCFA>\n    f420:\tcb150000 \tsub\tx0, x0, x21\n    f424:\t90000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    f428:\tf94036e3 \tldr\tx3, [x23,#104]\n    f42c:\tf9402fa4 \tldr\tx4, [x29,#88]\n    f430:\tf947d042 \tldr\tx2, [x2,#4000]\n    f434:\tf9400041 \tldr\tx1, [x2]\n    f438:\tca010061 \teor\tx1, x3, x1\n    f43c:\tcb150021 \tsub\tx1, x1, x21\n    f440:\teb01001f \tcmp\tx0, x1\n    f444:\t54fffe02 \tb.cs\tf404 <unwind_stop+0x38>\n    f448:\tb5000313 \tcbnz\tx19, f4a8 <unwind_stop+0xdc>\n    f44c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    f450:\tf94023f9 \tldr\tx25, [sp,#64]\n    f454:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    f458:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    f45c:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    f460:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    f464:\td65f03c0 \tret\n    f468:\taa0403e0 \tmov\tx0, x4\n    f46c:\tf94062f5 \tldr\tx21, [x23,#192]\n    f470:\t9400098d \tbl\t11aa4 <_Unwind_GetCFA>\n    f474:\teb15027f \tcmp\tx19, x21\n    f478:\t54fffc80 \tb.eq\tf408 <unwind_stop+0x3c>\n    f47c:\tf9400261 \tldr\tx1, [x19]\n    f480:\tf9400660 \tldr\tx0, [x19,#8]\n    f484:\tf9400e76 \tldr\tx22, [x19,#24]\n    f488:\td63f0020 \tblr\tx1\n    f48c:\taa1603f3 \tmov\tx19, x22\n    f490:\teb1502df \tcmp\tx22, x21\n    f494:\t54ffff41 \tb.ne\tf47c <unwind_stop+0xb0>\n    f498:\t52800020 \tmov\tw0, #0x1                   \t// #1\n    f49c:\tf9007e96 \tstr\tx22, [x20,#248]\n    f4a0:\t34fffd60 \tcbz\tw0, f44c <unwind_stop+0x80>\n    f4a4:\t17ffffd9 \tb\tf408 <unwind_stop+0x3c>\n    f4a8:\taa0403e0 \tmov\tx0, x4\n    f4ac:\tf94062f8 \tldr\tx24, [x23,#192]\n    f4b0:\t9400097d \tbl\t11aa4 <_Unwind_GetCFA>\n    f4b4:\teb18027f \tcmp\tx19, x24\n    f4b8:\t54fffca0 \tb.eq\tf44c <unwind_stop+0x80>\n    f4bc:\tcb150019 \tsub\tx25, x0, x21\n    f4c0:\tcb150260 \tsub\tx0, x19, x21\n    f4c4:\teb00033f \tcmp\tx25, x0\n    f4c8:\t54fffc23 \tb.cc\tf44c <unwind_stop+0x80>\n    f4cc:\tf9400261 \tldr\tx1, [x19]\n    f4d0:\tf9400660 \tldr\tx0, [x19,#8]\n    f4d4:\tf9400e76 \tldr\tx22, [x19,#24]\n    f4d8:\td63f0020 \tblr\tx1\n    f4dc:\teb16031f \tcmp\tx24, x22\n    f4e0:\t540000e0 \tb.eq\tf4fc <unwind_stop+0x130>\n    f4e4:\tcb1502c1 \tsub\tx1, x22, x21\n    f4e8:\taa1603f3 \tmov\tx19, x22\n    f4ec:\teb19003f \tcmp\tx1, x25\n    f4f0:\t54fffee9 \tb.ls\tf4cc <unwind_stop+0x100>\n    f4f4:\tf9007e96 \tstr\tx22, [x20,#248]\n    f4f8:\t17ffffd5 \tb\tf44c <unwind_stop+0x80>\n    f4fc:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    f500:\t17ffffe7 \tb\tf49c <unwind_stop+0xd0>\n\n000000000000f504 <__pthread_unwind>:\n    f504:\td53bd043 \tmrs\tx3, tpidr_el0\n    f508:\t90000001 \tadrp\tx1, f000 <sem_post@@GLIBC_2.17+0x24>\n    f50c:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    f510:\td11bc063 \tsub\tx3, x3, #0x6f0\n    f514:\t90000004 \tadrp\tx4, f000 <sem_post@@GLIBC_2.17+0x24>\n    f518:\t910003fd \tmov\tx29, sp\n    f51c:\taa0003e2 \tmov\tx2, x0\n    f520:\t910ea084 \tadd\tx4, x4, #0x3a8\n    f524:\t910f3021 \tadd\tx1, x1, #0x3cc\n    f528:\tf902387f \tstr\txzr, [x3,#1136]\n    f52c:\t9111c060 \tadd\tx0, x3, #0x470\n    f530:\tf9023c64 \tstr\tx4, [x3,#1144]\n    f534:\t94000943 \tbl\t11a40 <_Unwind_ForcedUnwind>\n    f538:\t97ffd70e \tbl\t5170 <abort@plt>\n\n000000000000f53c <__pthread_unwind_next>:\n    f53c:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    f540:\t910003fd \tmov\tx29, sp\n    f544:\tf9405c00 \tldr\tx0, [x0,#184]\n    f548:\t97ffffef \tbl\tf504 <__pthread_unwind>\n\n000000000000f54c <longjmp>:\n    f54c:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n    f550:\t910003fd \tmov\tx29, sp\n    f554:\t97ffd793 \tbl\t53a0 <__libc_longjmp@plt>\n\n000000000000f558 <__GI___pthread_cleanup_upto>:\n    f558:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n    f55c:\t910003fd \tmov\tx29, sp\n    f560:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    f564:\td53bd058 \tmrs\tx24, tpidr_el0\n    f568:\td11bc318 \tsub\tx24, x24, #0x6f0\n    f56c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    f570:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    f574:\tf9424b14 \tldr\tx20, [x24,#1168]\n    f578:\tf9424f02 \tldr\tx2, [x24,#1176]\n    f57c:\tf9407f13 \tldr\tx19, [x24,#248]\n    f580:\t8b020294 \tadd\tx20, x20, x2\n    f584:\tcb140037 \tsub\tx23, x1, x20\n    f588:\tb40003b3 \tcbz\tx19, f5fc <__GI___pthread_cleanup_upto+0xa4>\n    f58c:\t90000116 \tadrp\tx22, 2f000 <__FRAME_END__+0x18e30>\n    f590:\tf9403403 \tldr\tx3, [x0,#104]\n    f594:\tcb140262 \tsub\tx2, x19, x20\n    f598:\tf947d2c1 \tldr\tx1, [x22,#4000]\n    f59c:\tf9400021 \tldr\tx1, [x1]\n    f5a0:\tca010061 \teor\tx1, x3, x1\n    f5a4:\tcb140021 \tsub\tx1, x1, x20\n    f5a8:\teb01005f \tcmp\tx2, x1\n    f5ac:\t540002a2 \tb.cs\tf600 <__GI___pthread_cleanup_upto+0xa8>\n    f5b0:\teb0202ff \tcmp\tx23, x2\n    f5b4:\taa0003f5 \tmov\tx21, x0\n    f5b8:\t54000163 \tb.cc\tf5e4 <__GI___pthread_cleanup_upto+0x8c>\n    f5bc:\t14000010 \tb\tf5fc <__GI___pthread_cleanup_upto+0xa4>\n    f5c0:\tf947d2c2 \tldr\tx2, [x22,#4000]\n    f5c4:\tf94036a4 \tldr\tx4, [x21,#104]\n    f5c8:\tf9400042 \tldr\tx2, [x2]\n    f5cc:\tca020082 \teor\tx2, x4, x2\n    f5d0:\tcb140042 \tsub\tx2, x2, x20\n    f5d4:\teb02007f \tcmp\tx3, x2\n    f5d8:\t54000142 \tb.cs\tf600 <__GI___pthread_cleanup_upto+0xa8>\n    f5dc:\teb0302ff \tcmp\tx23, x3\n    f5e0:\t540000e2 \tb.cs\tf5fc <__GI___pthread_cleanup_upto+0xa4>\n    f5e4:\tf9400262 \tldr\tx2, [x19]\n    f5e8:\tf9400660 \tldr\tx0, [x19,#8]\n    f5ec:\td63f0040 \tblr\tx2\n    f5f0:\tf9400e73 \tldr\tx19, [x19,#24]\n    f5f4:\tcb140263 \tsub\tx3, x19, x20\n    f5f8:\tb5fffe53 \tcbnz\tx19, f5c0 <__GI___pthread_cleanup_upto+0x68>\n    f5fc:\td2800013 \tmov\tx19, #0x0                   \t// #0\n    f600:\tf9007f13 \tstr\tx19, [x24,#248]\n    f604:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    f608:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    f60c:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    f610:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n    f614:\td65f03c0 \tret\n\n000000000000f618 <__pthread_enable_asynccancel>:\n    f618:\td53bd046 \tmrs\tx6, tpidr_el0\n    f61c:\td11bc0c5 \tsub\tx5, x6, #0x6f0\n    f620:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n    f624:\t910003fd \tmov\tx29, sp\n    f628:\tb94108a1 \tldr\tw1, [x5,#264]\n    f62c:\t321f0022 \torr\tw2, w1, #0x2\n    f630:\t6b01005f \tcmp\tw2, w1\n    f634:\t540002e0 \tb.eq\tf690 <__pthread_enable_asynccancel+0x78>\n    f638:\t910083a4 \tadd\tx4, x29, #0x20\n    f63c:\t910420a3 \tadd\tx3, x5, #0x108\n    f640:\t2a0103e0 \tmov\tw0, w1\n    f644:\tb81fcc81 \tstr\tw1, [x4,#-4]!\n    f648:\t885ffc67 \tldaxr\tw7, [x3]\n    f64c:\t6b0000ff \tcmp\tw7, w0\n    f650:\t54000061 \tb.ne\tf65c <__pthread_enable_asynccancel+0x44>\n    f654:\t88087c62 \tstxr\tw8, w2, [x3]\n    f658:\t35ffff88 \tcbnz\tw8, f648 <__pthread_enable_asynccancel+0x30>\n    f65c:\t54000040 \tb.eq\tf664 <__pthread_enable_asynccancel+0x4c>\n    f660:\tb9001fa7 \tstr\tw7, [x29,#28]\n    f664:\tb9401fa0 \tldr\tw0, [x29,#28]\n    f668:\t6b00003f \tcmp\tw1, w0\n    f66c:\t540000e1 \tb.ne\tf688 <__pthread_enable_asynccancel+0x70>\n    f670:\t12800881 \tmov\tw1, #0xffffffbb            \t// #-69\n    f674:\t0a010042 \tand\tw2, w2, w1\n    f678:\t7100285f \tcmp\tw2, #0xa\n    f67c:\t540000e0 \tb.eq\tf698 <__pthread_enable_asynccancel+0x80>\n    f680:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n    f684:\td65f03c0 \tret\n    f688:\t2a0003e1 \tmov\tw1, w0\n    f68c:\t17ffffe8 \tb\tf62c <__pthread_enable_asynccancel+0x14>\n    f690:\t2a0103e0 \tmov\tw0, w1\n    f694:\t17fffffb \tb\tf680 <__pthread_enable_asynccancel+0x68>\n    f698:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    f69c:\td117a0c6 \tsub\tx6, x6, #0x5e8\n    f6a0:\tf90214a0 \tstr\tx0, [x5,#1064]\n    f6a4:\tb94000c0 \tldr\tw0, [x6]\n    f6a8:\tb9001fa0 \tstr\tw0, [x29,#28]\n    f6ac:\t321c0002 \torr\tw2, w0, #0x10\n    f6b0:\t885ffc61 \tldaxr\tw1, [x3]\n    f6b4:\t6b00003f \tcmp\tw1, w0\n    f6b8:\t54000061 \tb.ne\tf6c4 <__pthread_enable_asynccancel+0xac>\n    f6bc:\t88077c62 \tstxr\tw7, w2, [x3]\n    f6c0:\t35ffff87 \tcbnz\tw7, f6b0 <__pthread_enable_asynccancel+0x98>\n    f6c4:\t54000060 \tb.eq\tf6d0 <__pthread_enable_asynccancel+0xb8>\n    f6c8:\tb9000081 \tstr\tw1, [x4]\n    f6cc:\t17fffff6 \tb\tf6a4 <__pthread_enable_asynccancel+0x8c>\n    f6d0:\tf94080a0 \tldr\tx0, [x5,#256]\n    f6d4:\t97ffff8c \tbl\tf504 <__pthread_unwind>\n\n000000000000f6d8 <__pthread_disable_asynccancel>:\n    f6d8:\td10043ff \tsub\tsp, sp, #0x10\n    f6dc:\t370802a0 \ttbnz\tw0, #1, f730 <__pthread_disable_asynccancel+0x58>\n    f6e0:\td53bd044 \tmrs\tx4, tpidr_el0\n    f6e4:\t910033e6 \tadd\tx6, sp, #0xc\n    f6e8:\td11bc084 \tsub\tx4, x4, #0x6f0\n    f6ec:\t91042085 \tadd\tx5, x4, #0x108\n    f6f0:\tb9410881 \tldr\tw1, [x4,#264]\n    f6f4:\tb9000fe1 \tstr\tw1, [sp,#12]\n    f6f8:\t121e7822 \tand\tw2, w1, #0xfffffffd\n    f6fc:\t2a0103e0 \tmov\tw0, w1\n    f700:\t885ffca3 \tldaxr\tw3, [x5]\n    f704:\t6b00007f \tcmp\tw3, w0\n    f708:\t54000061 \tb.ne\tf714 <__pthread_disable_asynccancel+0x3c>\n    f70c:\t88077ca2 \tstxr\tw7, w2, [x5]\n    f710:\t35ffff87 \tcbnz\tw7, f700 <__pthread_disable_asynccancel+0x28>\n    f714:\t54000121 \tb.ne\tf738 <__pthread_disable_asynccancel+0x60>\n    f718:\tb9400fe0 \tldr\tw0, [sp,#12]\n    f71c:\t6b00003f \tcmp\tw1, w0\n    f720:\t54000201 \tb.ne\tf760 <__pthread_disable_asynccancel+0x88>\n    f724:\t121e0440 \tand\tw0, w2, #0xc\n    f728:\t7100101f \tcmp\tw0, #0x4\n    f72c:\t540000a0 \tb.eq\tf740 <__pthread_disable_asynccancel+0x68>\n    f730:\t910043ff \tadd\tsp, sp, #0x10\n    f734:\td65f03c0 \tret\n    f738:\tb90000c3 \tstr\tw3, [x6]\n    f73c:\t17fffff7 \tb\tf718 <__pthread_disable_asynccancel+0x40>\n    f740:\taa0503e0 \tmov\tx0, x5\n    f744:\td2801001 \tmov\tx1, #0x80                  \t// #128\n    f748:\t93407c42 \tsxtw\tx2, w2\n    f74c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    f750:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    f754:\td4000001 \tsvc\t#0x0\n    f758:\tb9410882 \tldr\tw2, [x4,#264]\n    f75c:\t17fffff2 \tb\tf724 <__pthread_disable_asynccancel+0x4c>\n    f760:\t2a0003e1 \tmov\tw1, w0\n    f764:\t17ffffe4 \tb\tf6f4 <__pthread_disable_asynccancel+0x1c>\n\n000000000000f768 <__lll_lock_wait_private>:\n    f768:\tb9400001 \tldr\tw1, [x0]\n    f76c:\taa0003e4 \tmov\tx4, x0\n    f770:\t7100083f \tcmp\tw1, #0x2\n    f774:\t540001c0 \tb.eq\tf7ac <__lll_lock_wait_private+0x44>\n    f778:\t52800045 \tmov\tw5, #0x2                   \t// #2\n    f77c:\t14000007 \tb\tf798 <__lll_lock_wait_private+0x30>\n    f780:\taa0403e0 \tmov\tx0, x4\n    f784:\td2801001 \tmov\tx1, #0x80                  \t// #128\n    f788:\td2800042 \tmov\tx2, #0x2                   \t// #2\n    f78c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    f790:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    f794:\td4000001 \tsvc\t#0x0\n    f798:\t885ffc80 \tldaxr\tw0, [x4]\n    f79c:\t88017c85 \tstxr\tw1, w5, [x4]\n    f7a0:\t35ffffc1 \tcbnz\tw1, f798 <__lll_lock_wait_private+0x30>\n    f7a4:\t35fffee0 \tcbnz\tw0, f780 <__lll_lock_wait_private+0x18>\n    f7a8:\td65f03c0 \tret\n    f7ac:\td2801001 \tmov\tx1, #0x80                  \t// #128\n    f7b0:\td2800042 \tmov\tx2, #0x2                   \t// #2\n    f7b4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    f7b8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    f7bc:\td4000001 \tsvc\t#0x0\n    f7c0:\t17ffffee \tb\tf778 <__lll_lock_wait_private+0x10>\n\n000000000000f7c4 <__lll_lock_wait>:\n    f7c4:\t2a0103e5 \tmov\tw5, w1\n    f7c8:\tb9400001 \tldr\tw1, [x0]\n    f7cc:\taa0003e4 \tmov\tx4, x0\n    f7d0:\t7100083f \tcmp\tw1, #0x2\n    f7d4:\t54000200 \tb.eq\tf814 <__lll_lock_wait+0x50>\n    f7d8:\t521900a5 \teor\tw5, w5, #0x80\n    f7dc:\t52800046 \tmov\tw6, #0x2                   \t// #2\n    f7e0:\t93407ca5 \tsxtw\tx5, w5\n    f7e4:\t14000007 \tb\tf800 <__lll_lock_wait+0x3c>\n    f7e8:\taa0403e0 \tmov\tx0, x4\n    f7ec:\taa0503e1 \tmov\tx1, x5\n    f7f0:\td2800042 \tmov\tx2, #0x2                   \t// #2\n    f7f4:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    f7f8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    f7fc:\td4000001 \tsvc\t#0x0\n    f800:\t885ffc80 \tldaxr\tw0, [x4]\n    f804:\t88017c86 \tstxr\tw1, w6, [x4]\n    f808:\t35ffffc1 \tcbnz\tw1, f800 <__lll_lock_wait+0x3c>\n    f80c:\t35fffee0 \tcbnz\tw0, f7e8 <__lll_lock_wait+0x24>\n    f810:\td65f03c0 \tret\n    f814:\t521900a1 \teor\tw1, w5, #0x80\n    f818:\td2800042 \tmov\tx2, #0x2                   \t// #2\n    f81c:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    f820:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    f824:\t93407c21 \tsxtw\tx1, w1\n    f828:\td4000001 \tsvc\t#0x0\n    f82c:\t17ffffeb \tb\tf7d8 <__lll_lock_wait+0x14>\n\n000000000000f830 <__lll_timedlock_wait>:\n    f830:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n    f834:\td2993fe3 \tmov\tx3, #0xc9ff                \t// #51711\n    f838:\t910003fd \tmov\tx29, sp\n    f83c:\tf9400424 \tldr\tx4, [x1,#8]\n    f840:\tf2a77343 \tmovk\tx3, #0x3b9a, lsl #16\n    f844:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    f848:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    f84c:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n    f850:\teb03009f \tcmp\tx4, x3\n    f854:\taa0003f3 \tmov\tx19, x0\n    f858:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    f85c:\t540000c9 \tb.ls\tf874 <__lll_timedlock_wait+0x44>\n    f860:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    f864:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    f868:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    f86c:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    f870:\td65f03c0 \tret\n    f874:\t52190055 \teor\tw21, w2, #0x80\n    f878:\taa0103f4 \tmov\tx20, x1\n    f87c:\t52800057 \tmov\tw23, #0x2                   \t// #2\n    f880:\t910103b6 \tadd\tx22, x29, #0x40\n    f884:\t910143b8 \tadd\tx24, x29, #0x50\n    f888:\t93407eb5 \tsxtw\tx21, w21\n    f88c:\t14000009 \tb\tf8b0 <__lll_timedlock_wait+0x80>\n    f890:\tf9002fa2 \tstr\tx2, [x29,#88]\n    f894:\taa1303e0 \tmov\tx0, x19\n    f898:\taa1503e1 \tmov\tx1, x21\n    f89c:\tb7f80405 \ttbnz\tx5, #63, f91c <__lll_timedlock_wait+0xec>\n    f8a0:\td2800042 \tmov\tx2, #0x2                   \t// #2\n    f8a4:\taa1803e3 \tmov\tx3, x24\n    f8a8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    f8ac:\td4000001 \tsvc\t#0x0\n    f8b0:\t885ffe62 \tldaxr\tw2, [x19]\n    f8b4:\t88007e77 \tstxr\tw0, w23, [x19]\n    f8b8:\t35ffffc0 \tcbnz\tw0, f8b0 <__lll_timedlock_wait+0x80>\n    f8bc:\taa1603e0 \tmov\tx0, x22\n    f8c0:\td2800001 \tmov\tx1, #0x0                   \t// #0\n    f8c4:\t34000382 \tcbz\tw2, f934 <__lll_timedlock_wait+0x104>\n    f8c8:\t97ffd5be \tbl\t4fc0 <__gettimeofday@plt>\n    f8cc:\tf94027a6 \tldr\tx6, [x29,#72]\n    f8d0:\tf94023a2 \tldr\tx2, [x29,#64]\n    f8d4:\tf9400285 \tldr\tx5, [x20]\n    f8d8:\tcb0614c4 \tsub\tx4, x6, x6, lsl #5\n    f8dc:\tf9400687 \tldr\tx7, [x20,#8]\n    f8e0:\td37ef484 \tlsl\tx4, x4, #2\n    f8e4:\tcb0200a5 \tsub\tx5, x5, x2\n    f8e8:\tcb060082 \tsub\tx2, x4, x6\n    f8ec:\tf9002ba5 \tstr\tx5, [x29,#80]\n    f8f0:\tab020ce2 \tadds\tx2, x7, x2, lsl #3\n    f8f4:\t54fffce5 \tb.pl\tf890 <__lll_timedlock_wait+0x60>\n    f8f8:\td2994001 \tmov\tx1, #0xca00                \t// #51712\n    f8fc:\td10004a5 \tsub\tx5, x5, #0x1\n    f900:\tf2a77341 \tmovk\tx1, #0x3b9a, lsl #16\n    f904:\tf9002ba5 \tstr\tx5, [x29,#80]\n    f908:\t8b010042 \tadd\tx2, x2, x1\n    f90c:\tf9002fa2 \tstr\tx2, [x29,#88]\n    f910:\taa1303e0 \tmov\tx0, x19\n    f914:\taa1503e1 \tmov\tx1, x21\n    f918:\tb6fffc45 \ttbz\tx5, #63, f8a0 <__lll_timedlock_wait+0x70>\n    f91c:\t52800dc0 \tmov\tw0, #0x6e                  \t// #110\n    f920:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    f924:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    f928:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    f92c:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    f930:\td65f03c0 \tret\n    f934:\t2a0203e0 \tmov\tw0, w2\n    f938:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    f93c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    f940:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n    f944:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    f948:\td65f03c0 \tret\n\n000000000000f94c <__lll_timedwait_tid>:\n    f94c:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n    f950:\td2993fe2 \tmov\tx2, #0xc9ff                \t// #51711\n    f954:\t910003fd \tmov\tx29, sp\n    f958:\tf9400423 \tldr\tx3, [x1,#8]\n    f95c:\tf2a77342 \tmovk\tx2, #0x3b9a, lsl #16\n    f960:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n    f964:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n    f968:\tf9001bf7 \tstr\tx23, [sp,#48]\n    f96c:\teb02007f \tcmp\tx3, x2\n    f970:\taa0003f5 \tmov\tx21, x0\n    f974:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    f978:\t540000c9 \tb.ls\tf990 <__lll_timedwait_tid+0x44>\n    f97c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    f980:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    f984:\tf9401bf7 \tldr\tx23, [sp,#48]\n    f988:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    f98c:\td65f03c0 \tret\n    f990:\tb94002b3 \tldr\tw19, [x21]\n    f994:\taa0103f4 \tmov\tx20, x1\n    f998:\t910103b7 \tadd\tx23, x29, #0x40\n    f99c:\t910143b6 \tadd\tx22, x29, #0x50\n    f9a0:\t35000093 \tcbnz\tw19, f9b0 <__lll_timedwait_tid+0x64>\n    f9a4:\t14000029 \tb\tfa48 <__lll_timedwait_tid+0xfc>\n    f9a8:\tb94002b3 \tldr\tw19, [x21]\n    f9ac:\t340004f3 \tcbz\tw19, fa48 <__lll_timedwait_tid+0xfc>\n    f9b0:\td2800001 \tmov\tx1, #0x0                   \t// #0\n    f9b4:\taa1703e0 \tmov\tx0, x23\n    f9b8:\t97ffd582 \tbl\t4fc0 <__gettimeofday@plt>\n    f9bc:\tf94027a7 \tldr\tx7, [x29,#72]\n    f9c0:\tf9400286 \tldr\tx6, [x20]\n    f9c4:\tf9400682 \tldr\tx2, [x20,#8]\n    f9c8:\tcb0714e5 \tsub\tx5, x7, x7, lsl #5\n    f9cc:\tf94023a1 \tldr\tx1, [x29,#64]\n    f9d0:\td37ef4a5 \tlsl\tx5, x5, #2\n    f9d4:\tcb0700a4 \tsub\tx4, x5, x7\n    f9d8:\tcb0100c6 \tsub\tx6, x6, x1\n    f9dc:\tf9002ba6 \tstr\tx6, [x29,#80]\n    f9e0:\tab040c44 \tadds\tx4, x2, x4, lsl #3\n    f9e4:\t54000264 \tb.mi\tfa30 <__lll_timedwait_tid+0xe4>\n    f9e8:\tf9002fa4 \tstr\tx4, [x29,#88]\n    f9ec:\taa1503e0 \tmov\tx0, x21\n    f9f0:\td2800001 \tmov\tx1, #0x0                   \t// #0\n    f9f4:\t93407e62 \tsxtw\tx2, w19\n    f9f8:\taa1603e3 \tmov\tx3, x22\n    f9fc:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    fa00:\tb7f800c6 \ttbnz\tx6, #63, fa18 <__lll_timedwait_tid+0xcc>\n    fa04:\td4000001 \tsvc\t#0x0\n    fa08:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    fa0c:\t54fffce9 \tb.ls\tf9a8 <__lll_timedwait_tid+0x5c>\n    fa10:\tb101b81f \tcmn\tx0, #0x6e\n    fa14:\t54fffca1 \tb.ne\tf9a8 <__lll_timedwait_tid+0x5c>\n    fa18:\t52800dc0 \tmov\tw0, #0x6e                  \t// #110\n    fa1c:\tf9401bf7 \tldr\tx23, [sp,#48]\n    fa20:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n    fa24:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n    fa28:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n    fa2c:\td65f03c0 \tret\n    fa30:\td2994001 \tmov\tx1, #0xca00                \t// #51712\n    fa34:\td10004c6 \tsub\tx6, x6, #0x1\n    fa38:\tf2a77341 \tmovk\tx1, #0x3b9a, lsl #16\n    fa3c:\tf9002ba6 \tstr\tx6, [x29,#80]\n    fa40:\t8b010084 \tadd\tx4, x4, x1\n    fa44:\t17ffffe9 \tb\tf9e8 <__lll_timedwait_tid+0x9c>\n    fa48:\t52800000 \tmov\tw0, #0x0                   \t// #0\n    fa4c:\t17ffffcc \tb\tf97c <__lll_timedwait_tid+0x30>\n\n000000000000fa50 <__lll_robust_lock_wait>:\n    fa50:\td53bd042 \tmrs\tx2, tpidr_el0\n    fa54:\taa0003e4 \tmov\tx4, x0\n    fa58:\td11bc042 \tsub\tx2, x2, #0x6f0\n    fa5c:\tb9400000 \tldr\tw0, [x0]\n    fa60:\td10043ff \tsub\tsp, sp, #0x10\n    fa64:\t2a0103e6 \tmov\tw6, w1\n    fa68:\tb940d047 \tldr\tw7, [x2,#208]\n    fa6c:\t34000260 \tcbz\tw0, fab8 <__lll_robust_lock_wait+0x68>\n    fa70:\t37f00380 \ttbnz\tw0, #30, fae0 <__lll_robust_lock_wait+0x90>\n    fa74:\t32010002 \torr\tw2, w0, #0x80000000\n    fa78:\t6b02001f \tcmp\tw0, w2\n    fa7c:\t54000100 \tb.eq\tfa9c <__lll_robust_lock_wait+0x4c>\n    fa80:\tb9000fe0 \tstr\tw0, [sp,#12]\n    fa84:\t885ffc81 \tldaxr\tw1, [x4]\n    fa88:\t6b00003f \tcmp\tw1, w0\n    fa8c:\t54000061 \tb.ne\tfa98 <__lll_robust_lock_wait+0x48>\n    fa90:\t88037c82 \tstxr\tw3, w2, [x4]\n    fa94:\t35ffff83 \tcbnz\tw3, fa84 <__lll_robust_lock_wait+0x34>\n    fa98:\t54000101 \tb.ne\tfab8 <__lll_robust_lock_wait+0x68>\n    fa9c:\t521900c5 \teor\tw5, w6, #0x80\n    faa0:\taa0403e0 \tmov\tx0, x4\n    faa4:\t93407c42 \tsxtw\tx2, w2\n    faa8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n    faac:\t93407ca1 \tsxtw\tx1, w5\n    fab0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    fab4:\td4000001 \tsvc\t#0x0\n    fab8:\tb9000fff \tstr\twzr, [sp,#12]\n    fabc:\t320100e0 \torr\tw0, w7, #0x80000000\n    fac0:\t885ffc81 \tldaxr\tw1, [x4]\n    fac4:\t6b1f003f \tcmp\tw1, wzr\n    fac8:\t54000061 \tb.ne\tfad4 <__lll_robust_lock_wait+0x84>\n    facc:\t88027c80 \tstxr\tw2, w0, [x4]\n    fad0:\t35ffff82 \tcbnz\tw2, fac0 <__lll_robust_lock_wait+0x70>\n    fad4:\t540000a1 \tb.ne\tfae8 <__lll_robust_lock_wait+0x98>\n    fad8:\tb9400fe0 \tldr\tw0, [sp,#12]\n    fadc:\t35fffca0 \tcbnz\tw0, fa70 <__lll_robust_lock_wait+0x20>\n    fae0:\t910043ff \tadd\tsp, sp, #0x10\n    fae4:\td65f03c0 \tret\n    fae8:\tb9000fe1 \tstr\tw1, [sp,#12]\n    faec:\tb9400fe0 \tldr\tw0, [sp,#12]\n    faf0:\t35fffc00 \tcbnz\tw0, fa70 <__lll_robust_lock_wait+0x20>\n    faf4:\t17fffffb \tb\tfae0 <__lll_robust_lock_wait+0x90>\n\n000000000000faf8 <__lll_robust_timedlock_wait>:\n    faf8:\taa0103e6 \tmov\tx6, x1\n    fafc:\td2993fe5 \tmov\tx5, #0xc9ff                \t// #51711\n    fb00:\tf9400421 \tldr\tx1, [x1,#8]\n    fb04:\tf2a77345 \tmovk\tx5, #0x3b9a, lsl #16\n    fb08:\taa0003e7 \tmov\tx7, x0\n    fb0c:\td10043ff \tsub\tsp, sp, #0x10\n    fb10:\teb05003f \tcmp\tx1, x5\n    fb14:\t2a0203e9 \tmov\tw9, w2\n    fb18:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n    fb1c:\t54000069 \tb.ls\tfb28 <__lll_robust_timedlock_wait+0x30>\n    fb20:\t910043ff \tadd\tsp, sp, #0x10\n    fb24:\td65f03c0 \tret\n    fb28:\td53bd040 \tmrs\tx0, tpidr_el0\n    fb2c:\tb94000e4 \tldr\tw4, [x7]\n    fb30:\td11bc000 \tsub\tx0, x0, #0x6f0\n    fb34:\tb940d00a \tldr\tw10, [x0,#208]\n    fb38:\t340001c4 \tcbz\tw4, fb70 <__lll_robust_timedlock_wait+0x78>\n    fb3c:\tf94000c0 \tldr\tx0, [x6]\n    fb40:\tb7f804a0 \ttbnz\tx0, #63, fbd4 <__lll_robust_timedlock_wait+0xdc>\n    fb44:\t37f002a4 \ttbnz\tw4, #30, fb98 <__lll_robust_timedlock_wait+0xa0>\n    fb48:\t32010082 \torr\tw2, w4, #0x80000000\n    fb4c:\t6b02009f \tcmp\tw4, w2\n    fb50:\t54000280 \tb.eq\tfba0 <__lll_robust_timedlock_wait+0xa8>\n    fb54:\tb9000fe4 \tstr\tw4, [sp,#12]\n    fb58:\t885ffce0 \tldaxr\tw0, [x7]\n    fb5c:\t6b04001f \tcmp\tw0, w4\n    fb60:\t54000061 \tb.ne\tfb6c <__lll_robust_timedlock_wait+0x74>\n    fb64:\t88017ce2 \tstxr\tw1, w2, [x7]\n    fb68:\t35ffff81 \tcbnz\tw1, fb58 <__lll_robust_timedlock_wait+0x60>\n    fb6c:\t540001a0 \tb.eq\tfba0 <__lll_robust_timedlock_wait+0xa8>\n    fb70:\tb9000fff \tstr\twzr, [sp,#12]\n    fb74:\t32010140 \torr\tw0, w10, #0x80000000\n    fb78:\t885ffce1 \tldaxr\tw1, [x7]\n    fb7c:\t6b1f003f \tcmp\tw1, wzr\n    fb80:\t54000061 \tb.ne\tfb8c <__lll_robust_timedlock_wait+0x94>\n    fb84:\t88027ce0 \tstxr\tw2, w0, [x7]\n    fb88:\t35ffff82 \tcbnz\tw2, fb78 <__lll_robust_timedlock_wait+0x80>\n    fb8c:\t54000201 \tb.ne\tfbcc <__lll_robust_timedlock_wait+0xd4>\n    fb90:\tb9400fe4 \tldr\tw4, [sp,#12]\n    fb94:\t35fffd84 \tcbnz\tw4, fb44 <__lll_robust_timedlock_wait+0x4c>\n    fb98:\t2a0403e0 \tmov\tw0, w4\n    fb9c:\t17ffffe1 \tb\tfb20 <__lll_robust_timedlock_wait+0x28>\n    fba0:\t52803121 \tmov\tw1, #0x189                 \t// #393\n    fba4:\taa0703e0 \tmov\tx0, x7\n    fba8:\t4a010121 \teor\tw1, w9, w1\n    fbac:\t93407c42 \tsxtw\tx2, w2\n    fbb0:\taa0603e3 \tmov\tx3, x6\n    fbb4:\td2800004 \tmov\tx4, #0x0                   \t// #0\n    fbb8:\t93407c21 \tsxtw\tx1, w1\n    fbbc:\tb2407fe5 \tmov\tx5, #0xffffffff            \t// #4294967295\n    fbc0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n    fbc4:\td4000001 \tsvc\t#0x0\n    fbc8:\t17ffffea \tb\tfb70 <__lll_robust_timedlock_wait+0x78>\n    fbcc:\tb9000fe1 \tstr\tw1, [sp,#12]\n    fbd0:\t17fffff0 \tb\tfb90 <__lll_robust_timedlock_wait+0x98>\n    fbd4:\t52800dc0 \tmov\tw0, #0x6e                  \t// #110\n    fbd8:\t17ffffd2 \tb\tfb20 <__lll_robust_timedlock_wait+0x28>\n\n000000000000fbdc <__fork>:\n    fbdc:\t17ffd531 \tb\t50a0 <__libc_fork@plt>\n\n000000000000fbe0 <vfork_resolve>:\n    fbe0:\t90000100 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n    fbe4:\tf947d800 \tldr\tx0, [x0,#4016]\n    fbe8:\td65f03c0 \tret\n    fbec:\t00000000 \t.inst\t0x00000000 ; undefined\n\n000000000000fbf0 <__write_nocancel>:\n    fbf0:\td2800808 \tmov\tx8, #0x40                  \t// #64\n    fbf4:\td4000001 \tsvc\t#0x0\n    fbf8:\tb13ffc1f \tcmn\tx0, #0xfff\n    fbfc:\t54000042 \tb.cs\tfc04 <__write_nocancel+0x14>\n    fc00:\td65f03c0 \tret\n    fc04:\t90000101 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    fc08:\t4b0003e2 \tneg\tw2, w0\n    fc0c:\tf947c421 \tldr\tx1, [x1,#3976]\n    fc10:\td53bd043 \tmrs\tx3, tpidr_el0\n    fc14:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    fc18:\tb8236822 \tstr\tw2, [x1,x3]\n    fc1c:\td65f03c0 \tret\n\n000000000000fc20 <__write>:\n    fc20:\tb0000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n    fc24:\tb9432a10 \tldr\tw16, [x16,#808]\n    fc28:\t34fffe50 \tcbz\tw16, fbf0 <__write_nocancel>\n    fc2c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n    fc30:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n    fc34:\t97fffe79 \tbl\tf618 <__pthread_enable_asynccancel>\n    fc38:\taa0003f0 \tmov\tx16, x0\n    fc3c:\tf94007e0 \tldr\tx0, [sp,#8]\n    fc40:\ta9410be1 \tldp\tx1, x2, [sp,#16]\n    fc44:\td2800808 \tmov\tx8, #0x40                  \t// #64\n    fc48:\td4000001 \tsvc\t#0x0\n    fc4c:\tf90007e0 \tstr\tx0, [sp,#8]\n    fc50:\taa1003e0 \tmov\tx0, x16\n    fc54:\t97fffea1 \tbl\tf6d8 <__pthread_disable_asynccancel>\n    fc58:\ta8c403fe \tldp\tx30, x0, [sp],#64\n    fc5c:\t17ffffe7 \tb\tfbf8 <__write_nocancel+0x8>\n\n000000000000fc60 <__read_nocancel>:\n    fc60:\td28007e8 \tmov\tx8, #0x3f                  \t// #63\n    fc64:\td4000001 \tsvc\t#0x0\n    fc68:\tb13ffc1f \tcmn\tx0, #0xfff\n    fc6c:\t54000042 \tb.cs\tfc74 <__read_nocancel+0x14>\n    fc70:\td65f03c0 \tret\n    fc74:\t90000101 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    fc78:\t4b0003e2 \tneg\tw2, w0\n    fc7c:\tf947c421 \tldr\tx1, [x1,#3976]\n    fc80:\td53bd043 \tmrs\tx3, tpidr_el0\n    fc84:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    fc88:\tb8236822 \tstr\tw2, [x1,x3]\n    fc8c:\td65f03c0 \tret\n\n000000000000fc90 <__read>:\n    fc90:\tb0000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n    fc94:\tb9432a10 \tldr\tw16, [x16,#808]\n    fc98:\t34fffe50 \tcbz\tw16, fc60 <__read_nocancel>\n    fc9c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n    fca0:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n    fca4:\t97fffe5d \tbl\tf618 <__pthread_enable_asynccancel>\n    fca8:\taa0003f0 \tmov\tx16, x0\n    fcac:\tf94007e0 \tldr\tx0, [sp,#8]\n    fcb0:\ta9410be1 \tldp\tx1, x2, [sp,#16]\n    fcb4:\td28007e8 \tmov\tx8, #0x3f                  \t// #63\n    fcb8:\td4000001 \tsvc\t#0x0\n    fcbc:\tf90007e0 \tstr\tx0, [sp,#8]\n    fcc0:\taa1003e0 \tmov\tx0, x16\n    fcc4:\t97fffe85 \tbl\tf6d8 <__pthread_disable_asynccancel>\n    fcc8:\ta8c403fe \tldp\tx30, x0, [sp],#64\n    fccc:\t17ffffe7 \tb\tfc68 <__read_nocancel+0x8>\n\n000000000000fcd0 <__close_nocancel>:\n    fcd0:\td2800728 \tmov\tx8, #0x39                  \t// #57\n    fcd4:\td4000001 \tsvc\t#0x0\n    fcd8:\tb13ffc1f \tcmn\tx0, #0xfff\n    fcdc:\t54000042 \tb.cs\tfce4 <__close_nocancel+0x14>\n    fce0:\td65f03c0 \tret\n    fce4:\t90000101 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    fce8:\t4b0003e2 \tneg\tw2, w0\n    fcec:\tf947c421 \tldr\tx1, [x1,#3976]\n    fcf0:\td53bd043 \tmrs\tx3, tpidr_el0\n    fcf4:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    fcf8:\tb8236822 \tstr\tw2, [x1,x3]\n    fcfc:\td65f03c0 \tret\n\n000000000000fd00 <__close>:\n    fd00:\tb0000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n    fd04:\tb9432a10 \tldr\tw16, [x16,#808]\n    fd08:\t34fffe50 \tcbz\tw16, fcd0 <__close_nocancel>\n    fd0c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n    fd10:\t97fffe42 \tbl\tf618 <__pthread_enable_asynccancel>\n    fd14:\taa0003f0 \tmov\tx16, x0\n    fd18:\tf94007e0 \tldr\tx0, [sp,#8]\n    fd1c:\td2800728 \tmov\tx8, #0x39                  \t// #57\n    fd20:\td4000001 \tsvc\t#0x0\n    fd24:\tf90007e0 \tstr\tx0, [sp,#8]\n    fd28:\taa1003e0 \tmov\tx0, x16\n    fd2c:\t97fffe6b \tbl\tf6d8 <__pthread_disable_asynccancel>\n    fd30:\ta8c403fe \tldp\tx30, x0, [sp],#64\n    fd34:\t17ffffe9 \tb\tfcd8 <__close_nocancel+0x8>\n    fd38:\td503201f \tnop\n    fd3c:\td503201f \tnop\n\n000000000000fd40 <__fcntl_nocancel>:\n    fd40:\td10383ff \tsub\tsp, sp, #0xe0\n    fd44:\t7100243f \tcmp\tw1, #0x9\n    fd48:\t93407c00 \tsxtw\tx0, w0\n    fd4c:\t3d800fe0 \tstr\tq0, [sp,#48]\n    fd50:\tf9005fe3 \tstr\tx3, [sp,#184]\n    fd54:\t910383e3 \tadd\tx3, sp, #0xe0\n    fd58:\tf9000be3 \tstr\tx3, [sp,#16]\n    fd5c:\tf9000fe3 \tstr\tx3, [sp,#24]\n    fd60:\t9102c3e3 \tadd\tx3, sp, #0xb0\n    fd64:\tf90013e3 \tstr\tx3, [sp,#32]\n    fd68:\t128005e3 \tmov\tw3, #0xffffffd0            \t// #-48\n    fd6c:\tf9005be2 \tstr\tx2, [sp,#176]\n    fd70:\tb9002be3 \tstr\tw3, [sp,#40]\n    fd74:\t12800fe3 \tmov\tw3, #0xffffff80            \t// #-128\n    fd78:\tf90063e4 \tstr\tx4, [sp,#192]\n    fd7c:\tf90067e5 \tstr\tx5, [sp,#200]\n    fd80:\tf9006be6 \tstr\tx6, [sp,#208]\n    fd84:\tf9006fe7 \tstr\tx7, [sp,#216]\n    fd88:\tb9002fe3 \tstr\tw3, [sp,#44]\n    fd8c:\t3d8013e1 \tstr\tq1, [sp,#64]\n    fd90:\t3d8017e2 \tstr\tq2, [sp,#80]\n    fd94:\t3d801be3 \tstr\tq3, [sp,#96]\n    fd98:\t3d801fe4 \tstr\tq4, [sp,#112]\n    fd9c:\t3d8023e5 \tstr\tq5, [sp,#128]\n    fda0:\t3d8027e6 \tstr\tq6, [sp,#144]\n    fda4:\t3d802be7 \tstr\tq7, [sp,#160]\n    fda8:\t54000100 \tb.eq\tfdc8 <__fcntl_nocancel+0x88>\n    fdac:\t93407c21 \tsxtw\tx1, w1\n    fdb0:\td2800328 \tmov\tx8, #0x19                  \t// #25\n    fdb4:\td4000001 \tsvc\t#0x0\n    fdb8:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    fdbc:\t540001e8 \tb.hi\tfdf8 <__fcntl_nocancel+0xb8>\n    fdc0:\t910383ff \tadd\tsp, sp, #0xe0\n    fdc4:\td65f03c0 \tret\n    fdc8:\td2800201 \tmov\tx1, #0x10                  \t// #16\n    fdcc:\t910023e2 \tadd\tx2, sp, #0x8\n    fdd0:\td2800328 \tmov\tx8, #0x19                  \t// #25\n    fdd4:\td4000001 \tsvc\t#0x0\n    fdd8:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    fddc:\t540001c8 \tb.hi\tfe14 <__fcntl_nocancel+0xd4>\n    fde0:\tb9400be0 \tldr\tw0, [sp,#8]\n    fde4:\t7100081f \tcmp\tw0, #0x2\n    fde8:\tb9400fe0 \tldr\tw0, [sp,#12]\n    fdec:\t54fffea1 \tb.ne\tfdc0 <__fcntl_nocancel+0x80>\n    fdf0:\t4b0003e0 \tneg\tw0, w0\n    fdf4:\t17fffff3 \tb\tfdc0 <__fcntl_nocancel+0x80>\n    fdf8:\td53bd041 \tmrs\tx1, tpidr_el0\n    fdfc:\t90000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    fe00:\tf947c442 \tldr\tx2, [x2,#3976]\n    fe04:\t4b0003e3 \tneg\tw3, w0\n    fe08:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    fe0c:\tb8226823 \tstr\tw3, [x1,x2]\n    fe10:\t17ffffec \tb\tfdc0 <__fcntl_nocancel+0x80>\n    fe14:\td53bd042 \tmrs\tx2, tpidr_el0\n    fe18:\t90000103 \tadrp\tx3, 2f000 <__FRAME_END__+0x18e30>\n    fe1c:\tf947c463 \tldr\tx3, [x3,#3976]\n    fe20:\t4b0003e1 \tneg\tw1, w0\n    fe24:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n    fe28:\tb8236841 \tstr\tw1, [x2,x3]\n    fe2c:\t17ffffe5 \tb\tfdc0 <__fcntl_nocancel+0x80>\n\n000000000000fe30 <__fcntl>:\n    fe30:\ta9af7bfd \tstp\tx29, x30, [sp,#-272]!\n    fe34:\t71001c3f \tcmp\tw1, #0x7\n    fe38:\t910003fd \tmov\tx29, sp\n    fe3c:\tf9000bf3 \tstr\tx19, [sp,#16]\n    fe40:\t3d801ba0 \tstr\tq0, [x29,#96]\n    fe44:\tf90077a3 \tstr\tx3, [x29,#232]\n    fe48:\t910443a3 \tadd\tx3, x29, #0x110\n    fe4c:\tf90023a3 \tstr\tx3, [x29,#64]\n    fe50:\tf90027a3 \tstr\tx3, [x29,#72]\n    fe54:\t910383a3 \tadd\tx3, x29, #0xe0\n    fe58:\tf9002ba3 \tstr\tx3, [x29,#80]\n    fe5c:\t128005e3 \tmov\tw3, #0xffffffd0            \t// #-48\n    fe60:\tf90073a2 \tstr\tx2, [x29,#224]\n    fe64:\tb9005ba3 \tstr\tw3, [x29,#88]\n    fe68:\t12800fe3 \tmov\tw3, #0xffffff80            \t// #-128\n    fe6c:\tf9007ba4 \tstr\tx4, [x29,#240]\n    fe70:\tf9007fa5 \tstr\tx5, [x29,#248]\n    fe74:\tf90083a6 \tstr\tx6, [x29,#256]\n    fe78:\tf90087a7 \tstr\tx7, [x29,#264]\n    fe7c:\tb9005fa3 \tstr\tw3, [x29,#92]\n    fe80:\t3d801fa1 \tstr\tq1, [x29,#112]\n    fe84:\t3d8023a2 \tstr\tq2, [x29,#128]\n    fe88:\t3d8027a3 \tstr\tq3, [x29,#144]\n    fe8c:\t3d802ba4 \tstr\tq4, [x29,#160]\n    fe90:\t3d802fa5 \tstr\tq5, [x29,#176]\n    fe94:\t3d8033a6 \tstr\tq6, [x29,#192]\n    fe98:\t3d8037a7 \tstr\tq7, [x29,#208]\n    fe9c:\t54000081 \tb.ne\tfeac <__fcntl+0x7c>\n    fea0:\tb0000123 \tadrp\tx3, 34000 <__GI___pthread_keys+0x3d78>\n    fea4:\tb9432863 \tldr\tw3, [x3,#808]\n    fea8:\t350004c3 \tcbnz\tw3, ff40 <__fcntl+0x110>\n    feac:\t7100243f \tcmp\tw1, #0x9\n    feb0:\t93407c00 \tsxtw\tx0, w0\n    feb4:\t54000160 \tb.eq\tfee0 <__fcntl+0xb0>\n    feb8:\t93407c21 \tsxtw\tx1, w1\n    febc:\td2800328 \tmov\tx8, #0x19                  \t// #25\n    fec0:\td4000001 \tsvc\t#0x0\n    fec4:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    fec8:\t540002e8 \tb.hi\tff24 <__fcntl+0xf4>\n    fecc:\t2a0003f3 \tmov\tw19, w0\n    fed0:\t2a1303e0 \tmov\tw0, w19\n    fed4:\tf9400bf3 \tldr\tx19, [sp,#16]\n    fed8:\ta8d17bfd \tldp\tx29, x30, [sp],#272\n    fedc:\td65f03c0 \tret\n    fee0:\td2800201 \tmov\tx1, #0x10                  \t// #16\n    fee4:\t9100e3a2 \tadd\tx2, x29, #0x38\n    fee8:\td2800328 \tmov\tx8, #0x19                  \t// #25\n    feec:\td4000001 \tsvc\t#0x0\n    fef0:\t3140041f \tcmn\tw0, #0x1, lsl #12\n    fef4:\t54000188 \tb.hi\tff24 <__fcntl+0xf4>\n    fef8:\tb9403ba0 \tldr\tw0, [x29,#56]\n    fefc:\t7100081f \tcmp\tw0, #0x2\n    ff00:\t540000c0 \tb.eq\tff18 <__fcntl+0xe8>\n    ff04:\tb9403fb3 \tldr\tw19, [x29,#60]\n    ff08:\t2a1303e0 \tmov\tw0, w19\n    ff0c:\tf9400bf3 \tldr\tx19, [sp,#16]\n    ff10:\ta8d17bfd \tldp\tx29, x30, [sp],#272\n    ff14:\td65f03c0 \tret\n    ff18:\tb9403fa0 \tldr\tw0, [x29,#60]\n    ff1c:\t4b0003f3 \tneg\tw19, w0\n    ff20:\t17ffffec \tb\tfed0 <__fcntl+0xa0>\n    ff24:\td53bd041 \tmrs\tx1, tpidr_el0\n    ff28:\t90000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    ff2c:\tf947c442 \tldr\tx2, [x2,#3976]\n    ff30:\t4b0003e0 \tneg\tw0, w0\n    ff34:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n    ff38:\tb8226820 \tstr\tw0, [x1,x2]\n    ff3c:\t17ffffe5 \tb\tfed0 <__fcntl+0xa0>\n    ff40:\t2a0003f3 \tmov\tw19, w0\n    ff44:\tf90017a2 \tstr\tx2, [x29,#40]\n    ff48:\t97fffdb4 \tbl\tf618 <__pthread_enable_asynccancel>\n    ff4c:\t2a0003e3 \tmov\tw3, w0\n    ff50:\td28000e1 \tmov\tx1, #0x7                   \t// #7\n    ff54:\t93407e60 \tsxtw\tx0, w19\n    ff58:\tf94017a2 \tldr\tx2, [x29,#40]\n    ff5c:\td2800328 \tmov\tx8, #0x19                  \t// #25\n    ff60:\td4000001 \tsvc\t#0x0\n    ff64:\tb140041f \tcmn\tx0, #0x1, lsl #12\n    ff68:\t540000a8 \tb.hi\tff7c <__fcntl+0x14c>\n    ff6c:\t2a0003f3 \tmov\tw19, w0\n    ff70:\t2a0303e0 \tmov\tw0, w3\n    ff74:\t97fffdd9 \tbl\tf6d8 <__pthread_disable_asynccancel>\n    ff78:\t17ffffd6 \tb\tfed0 <__fcntl+0xa0>\n    ff7c:\td53bd041 \tmrs\tx1, tpidr_el0\n    ff80:\t90000102 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n    ff84:\tf947c442 \tldr\tx2, [x2,#3976]\n    ff88:\t4b0003e0 \tneg\tw0, w0\n    ff8c:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n    ff90:\tb8226820 \tstr\tw0, [x1,x2]\n    ff94:\t17fffff7 \tb\tff70 <__fcntl+0x140>\n\t...\n\n000000000000ffa0 <__accept_nocancel>:\n    ffa0:\td2801948 \tmov\tx8, #0xca                  \t// #202\n    ffa4:\td4000001 \tsvc\t#0x0\n    ffa8:\tb13ffc1f \tcmn\tx0, #0xfff\n    ffac:\t54000042 \tb.cs\tffb4 <__accept_nocancel+0x14>\n    ffb0:\td65f03c0 \tret\n    ffb4:\t90000101 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n    ffb8:\t4b0003e2 \tneg\tw2, w0\n    ffbc:\tf947c421 \tldr\tx1, [x1,#3976]\n    ffc0:\td53bd043 \tmrs\tx3, tpidr_el0\n    ffc4:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n    ffc8:\tb8236822 \tstr\tw2, [x1,x3]\n    ffcc:\td65f03c0 \tret\n\n000000000000ffd0 <accept>:\n    ffd0:\tb0000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n    ffd4:\tb9432a10 \tldr\tw16, [x16,#808]\n    ffd8:\t34fffe50 \tcbz\tw16, ffa0 <__accept_nocancel>\n    ffdc:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n    ffe0:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n    ffe4:\t97fffd8d \tbl\tf618 <__pthread_enable_asynccancel>\n    ffe8:\taa0003f0 \tmov\tx16, x0\n    ffec:\tf94007e0 \tldr\tx0, [sp,#8]\n    fff0:\ta9410be1 \tldp\tx1, x2, [sp,#16]\n    fff4:\td2801948 \tmov\tx8, #0xca                  \t// #202\n    fff8:\td4000001 \tsvc\t#0x0\n    fffc:\tf90007e0 \tstr\tx0, [sp,#8]\n   10000:\taa1003e0 \tmov\tx0, x16\n   10004:\t97fffdb5 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10008:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   1000c:\t17ffffe7 \tb\tffa8 <__accept_nocancel+0x8>\n\n0000000000010010 <__connect_nocancel>:\n   10010:\td2801968 \tmov\tx8, #0xcb                  \t// #203\n   10014:\td4000001 \tsvc\t#0x0\n   10018:\tb13ffc1f \tcmn\tx0, #0xfff\n   1001c:\t54000042 \tb.cs\t10024 <__connect_nocancel+0x14>\n   10020:\td65f03c0 \tret\n   10024:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10028:\t4b0003e2 \tneg\tw2, w0\n   1002c:\tf947c421 \tldr\tx1, [x1,#3976]\n   10030:\td53bd043 \tmrs\tx3, tpidr_el0\n   10034:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10038:\tb8236822 \tstr\tw2, [x1,x3]\n   1003c:\td65f03c0 \tret\n\n0000000000010040 <__connect>:\n   10040:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10044:\tb9432a10 \tldr\tw16, [x16,#808]\n   10048:\t34fffe50 \tcbz\tw16, 10010 <__connect_nocancel>\n   1004c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   10050:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   10054:\t97fffd71 \tbl\tf618 <__pthread_enable_asynccancel>\n   10058:\taa0003f0 \tmov\tx16, x0\n   1005c:\tf94007e0 \tldr\tx0, [sp,#8]\n   10060:\ta9410be1 \tldp\tx1, x2, [sp,#16]\n   10064:\td2801968 \tmov\tx8, #0xcb                  \t// #203\n   10068:\td4000001 \tsvc\t#0x0\n   1006c:\tf90007e0 \tstr\tx0, [sp,#8]\n   10070:\taa1003e0 \tmov\tx0, x16\n   10074:\t97fffd99 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10078:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   1007c:\t17ffffe7 \tb\t10018 <__connect_nocancel+0x8>\n\n0000000000010080 <recv>:\n   10080:\t90000124 \tadrp\tx4, 34000 <__GI___pthread_keys+0x3d78>\n   10084:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   10088:\t910003fd \tmov\tx29, sp\n   1008c:\tb9432884 \tldr\tw4, [x4,#808]\n   10090:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   10094:\t350001c4 \tcbnz\tw4, 100cc <recv+0x4c>\n   10098:\td2800004 \tmov\tx4, #0x0                   \t// #0\n   1009c:\t93407c00 \tsxtw\tx0, w0\n   100a0:\t93407c63 \tsxtw\tx3, w3\n   100a4:\taa0403e5 \tmov\tx5, x4\n   100a8:\td28019e8 \tmov\tx8, #0xcf                  \t// #207\n   100ac:\td4000001 \tsvc\t#0x0\n   100b0:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   100b4:\t540003a8 \tb.hi\t10128 <recv+0xa8>\n   100b8:\taa0003f3 \tmov\tx19, x0\n   100bc:\taa1303e0 \tmov\tx0, x19\n   100c0:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   100c4:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   100c8:\td65f03c0 \tret\n   100cc:\t2a0303f3 \tmov\tw19, w3\n   100d0:\tf90013a2 \tstr\tx2, [x29,#32]\n   100d4:\tf90017a1 \tstr\tx1, [x29,#40]\n   100d8:\t2a0003f4 \tmov\tw20, w0\n   100dc:\t97fffd4f \tbl\tf618 <__pthread_enable_asynccancel>\n   100e0:\t2a0003e6 \tmov\tw6, w0\n   100e4:\td2800004 \tmov\tx4, #0x0                   \t// #0\n   100e8:\t93407e80 \tsxtw\tx0, w20\n   100ec:\tf94017a1 \tldr\tx1, [x29,#40]\n   100f0:\t93407e63 \tsxtw\tx3, w19\n   100f4:\tf94013a2 \tldr\tx2, [x29,#32]\n   100f8:\taa0403e5 \tmov\tx5, x4\n   100fc:\td28019e8 \tmov\tx8, #0xcf                  \t// #207\n   10100:\td4000001 \tsvc\t#0x0\n   10104:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10108:\t540001e8 \tb.hi\t10144 <recv+0xc4>\n   1010c:\taa0003f3 \tmov\tx19, x0\n   10110:\t2a0603e0 \tmov\tw0, w6\n   10114:\t97fffd71 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10118:\taa1303e0 \tmov\tx0, x19\n   1011c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   10120:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   10124:\td65f03c0 \tret\n   10128:\td53bd041 \tmrs\tx1, tpidr_el0\n   1012c:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10130:\tf947c442 \tldr\tx2, [x2,#3976]\n   10134:\t4b0003e0 \tneg\tw0, w0\n   10138:\t92800013 \tmov\tx19, #0xffffffffffffffff    \t// #-1\n   1013c:\tb8226820 \tstr\tw0, [x1,x2]\n   10140:\t17ffffdf \tb\t100bc <recv+0x3c>\n   10144:\td53bd041 \tmrs\tx1, tpidr_el0\n   10148:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   1014c:\tf947c442 \tldr\tx2, [x2,#3976]\n   10150:\t4b0003e0 \tneg\tw0, w0\n   10154:\t92800013 \tmov\tx19, #0xffffffffffffffff    \t// #-1\n   10158:\tb8226820 \tstr\tw0, [x1,x2]\n   1015c:\t17ffffed \tb\t10110 <recv+0x90>\n\n0000000000010160 <__recvfrom_nocancel>:\n   10160:\td28019e8 \tmov\tx8, #0xcf                  \t// #207\n   10164:\td4000001 \tsvc\t#0x0\n   10168:\tb13ffc1f \tcmn\tx0, #0xfff\n   1016c:\t54000042 \tb.cs\t10174 <__recvfrom_nocancel+0x14>\n   10170:\td65f03c0 \tret\n   10174:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10178:\t4b0003e2 \tneg\tw2, w0\n   1017c:\tf947c421 \tldr\tx1, [x1,#3976]\n   10180:\td53bd043 \tmrs\tx3, tpidr_el0\n   10184:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10188:\tb8236822 \tstr\tw2, [x1,x3]\n   1018c:\td65f03c0 \tret\n\n0000000000010190 <recvfrom>:\n   10190:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10194:\tb9432a10 \tldr\tw16, [x16,#808]\n   10198:\t34fffe50 \tcbz\tw16, 10160 <__recvfrom_nocancel>\n   1019c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   101a0:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   101a4:\ta90213e3 \tstp\tx3, x4, [sp,#32]\n   101a8:\tf9001be5 \tstr\tx5, [sp,#48]\n   101ac:\t97fffd1b \tbl\tf618 <__pthread_enable_asynccancel>\n   101b0:\taa0003f0 \tmov\tx16, x0\n   101b4:\ta94087e0 \tldp\tx0, x1, [sp,#8]\n   101b8:\ta9418fe2 \tldp\tx2, x3, [sp,#24]\n   101bc:\ta94297e4 \tldp\tx4, x5, [sp,#40]\n   101c0:\td28019e8 \tmov\tx8, #0xcf                  \t// #207\n   101c4:\td4000001 \tsvc\t#0x0\n   101c8:\tf90007e0 \tstr\tx0, [sp,#8]\n   101cc:\taa1003e0 \tmov\tx0, x16\n   101d0:\t97fffd42 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   101d4:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   101d8:\t17ffffe4 \tb\t10168 <__recvfrom_nocancel+0x8>\n   101dc:\td503201f \tnop\n\n00000000000101e0 <__recvmsg_nocancel>:\n   101e0:\td2801a88 \tmov\tx8, #0xd4                  \t// #212\n   101e4:\td4000001 \tsvc\t#0x0\n   101e8:\tb13ffc1f \tcmn\tx0, #0xfff\n   101ec:\t54000042 \tb.cs\t101f4 <__recvmsg_nocancel+0x14>\n   101f0:\td65f03c0 \tret\n   101f4:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   101f8:\t4b0003e2 \tneg\tw2, w0\n   101fc:\tf947c421 \tldr\tx1, [x1,#3976]\n   10200:\td53bd043 \tmrs\tx3, tpidr_el0\n   10204:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10208:\tb8236822 \tstr\tw2, [x1,x3]\n   1020c:\td65f03c0 \tret\n\n0000000000010210 <recvmsg>:\n   10210:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10214:\tb9432a10 \tldr\tw16, [x16,#808]\n   10218:\t34fffe50 \tcbz\tw16, 101e0 <__recvmsg_nocancel>\n   1021c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   10220:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   10224:\t97fffcfd \tbl\tf618 <__pthread_enable_asynccancel>\n   10228:\taa0003f0 \tmov\tx16, x0\n   1022c:\tf94007e0 \tldr\tx0, [sp,#8]\n   10230:\ta9410be1 \tldp\tx1, x2, [sp,#16]\n   10234:\td2801a88 \tmov\tx8, #0xd4                  \t// #212\n   10238:\td4000001 \tsvc\t#0x0\n   1023c:\tf90007e0 \tstr\tx0, [sp,#8]\n   10240:\taa1003e0 \tmov\tx0, x16\n   10244:\t97fffd25 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10248:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   1024c:\t17ffffe7 \tb\t101e8 <__recvmsg_nocancel+0x8>\n\n0000000000010250 <__send>:\n   10250:\t90000124 \tadrp\tx4, 34000 <__GI___pthread_keys+0x3d78>\n   10254:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   10258:\t910003fd \tmov\tx29, sp\n   1025c:\tb9432884 \tldr\tw4, [x4,#808]\n   10260:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   10264:\t350001c4 \tcbnz\tw4, 1029c <__send+0x4c>\n   10268:\td2800004 \tmov\tx4, #0x0                   \t// #0\n   1026c:\t93407c00 \tsxtw\tx0, w0\n   10270:\t93407c63 \tsxtw\tx3, w3\n   10274:\taa0403e5 \tmov\tx5, x4\n   10278:\td28019c8 \tmov\tx8, #0xce                  \t// #206\n   1027c:\td4000001 \tsvc\t#0x0\n   10280:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10284:\t540003a8 \tb.hi\t102f8 <__send+0xa8>\n   10288:\taa0003f3 \tmov\tx19, x0\n   1028c:\taa1303e0 \tmov\tx0, x19\n   10290:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   10294:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   10298:\td65f03c0 \tret\n   1029c:\t2a0303f3 \tmov\tw19, w3\n   102a0:\tf90013a2 \tstr\tx2, [x29,#32]\n   102a4:\tf90017a1 \tstr\tx1, [x29,#40]\n   102a8:\t2a0003f4 \tmov\tw20, w0\n   102ac:\t97fffcdb \tbl\tf618 <__pthread_enable_asynccancel>\n   102b0:\t2a0003e6 \tmov\tw6, w0\n   102b4:\td2800004 \tmov\tx4, #0x0                   \t// #0\n   102b8:\t93407e80 \tsxtw\tx0, w20\n   102bc:\tf94017a1 \tldr\tx1, [x29,#40]\n   102c0:\t93407e63 \tsxtw\tx3, w19\n   102c4:\tf94013a2 \tldr\tx2, [x29,#32]\n   102c8:\taa0403e5 \tmov\tx5, x4\n   102cc:\td28019c8 \tmov\tx8, #0xce                  \t// #206\n   102d0:\td4000001 \tsvc\t#0x0\n   102d4:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   102d8:\t540001e8 \tb.hi\t10314 <__send+0xc4>\n   102dc:\taa0003f3 \tmov\tx19, x0\n   102e0:\t2a0603e0 \tmov\tw0, w6\n   102e4:\t97fffcfd \tbl\tf6d8 <__pthread_disable_asynccancel>\n   102e8:\taa1303e0 \tmov\tx0, x19\n   102ec:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   102f0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   102f4:\td65f03c0 \tret\n   102f8:\td53bd041 \tmrs\tx1, tpidr_el0\n   102fc:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10300:\tf947c442 \tldr\tx2, [x2,#3976]\n   10304:\t4b0003e0 \tneg\tw0, w0\n   10308:\t92800013 \tmov\tx19, #0xffffffffffffffff    \t// #-1\n   1030c:\tb8226820 \tstr\tw0, [x1,x2]\n   10310:\t17ffffdf \tb\t1028c <__send+0x3c>\n   10314:\td53bd041 \tmrs\tx1, tpidr_el0\n   10318:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   1031c:\tf947c442 \tldr\tx2, [x2,#3976]\n   10320:\t4b0003e0 \tneg\tw0, w0\n   10324:\t92800013 \tmov\tx19, #0xffffffffffffffff    \t// #-1\n   10328:\tb8226820 \tstr\tw0, [x1,x2]\n   1032c:\t17ffffed \tb\t102e0 <__send+0x90>\n\n0000000000010330 <__sendmsg_nocancel>:\n   10330:\td2801a68 \tmov\tx8, #0xd3                  \t// #211\n   10334:\td4000001 \tsvc\t#0x0\n   10338:\tb13ffc1f \tcmn\tx0, #0xfff\n   1033c:\t54000042 \tb.cs\t10344 <__sendmsg_nocancel+0x14>\n   10340:\td65f03c0 \tret\n   10344:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10348:\t4b0003e2 \tneg\tw2, w0\n   1034c:\tf947c421 \tldr\tx1, [x1,#3976]\n   10350:\td53bd043 \tmrs\tx3, tpidr_el0\n   10354:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10358:\tb8236822 \tstr\tw2, [x1,x3]\n   1035c:\td65f03c0 \tret\n\n0000000000010360 <sendmsg>:\n   10360:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10364:\tb9432a10 \tldr\tw16, [x16,#808]\n   10368:\t34fffe50 \tcbz\tw16, 10330 <__sendmsg_nocancel>\n   1036c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   10370:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   10374:\t97fffca9 \tbl\tf618 <__pthread_enable_asynccancel>\n   10378:\taa0003f0 \tmov\tx16, x0\n   1037c:\tf94007e0 \tldr\tx0, [sp,#8]\n   10380:\ta9410be1 \tldp\tx1, x2, [sp,#16]\n   10384:\td2801a68 \tmov\tx8, #0xd3                  \t// #211\n   10388:\td4000001 \tsvc\t#0x0\n   1038c:\tf90007e0 \tstr\tx0, [sp,#8]\n   10390:\taa1003e0 \tmov\tx0, x16\n   10394:\t97fffcd1 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10398:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   1039c:\t17ffffe7 \tb\t10338 <__sendmsg_nocancel+0x8>\n\n00000000000103a0 <__sendto_nocancel>:\n   103a0:\td28019c8 \tmov\tx8, #0xce                  \t// #206\n   103a4:\td4000001 \tsvc\t#0x0\n   103a8:\tb13ffc1f \tcmn\tx0, #0xfff\n   103ac:\t54000042 \tb.cs\t103b4 <__sendto_nocancel+0x14>\n   103b0:\td65f03c0 \tret\n   103b4:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   103b8:\t4b0003e2 \tneg\tw2, w0\n   103bc:\tf947c421 \tldr\tx1, [x1,#3976]\n   103c0:\td53bd043 \tmrs\tx3, tpidr_el0\n   103c4:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   103c8:\tb8236822 \tstr\tw2, [x1,x3]\n   103cc:\td65f03c0 \tret\n\n00000000000103d0 <sendto>:\n   103d0:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   103d4:\tb9432a10 \tldr\tw16, [x16,#808]\n   103d8:\t34fffe50 \tcbz\tw16, 103a0 <__sendto_nocancel>\n   103dc:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   103e0:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   103e4:\ta90213e3 \tstp\tx3, x4, [sp,#32]\n   103e8:\tf9001be5 \tstr\tx5, [sp,#48]\n   103ec:\t97fffc8b \tbl\tf618 <__pthread_enable_asynccancel>\n   103f0:\taa0003f0 \tmov\tx16, x0\n   103f4:\ta94087e0 \tldp\tx0, x1, [sp,#8]\n   103f8:\ta9418fe2 \tldp\tx2, x3, [sp,#24]\n   103fc:\ta94297e4 \tldp\tx4, x5, [sp,#40]\n   10400:\td28019c8 \tmov\tx8, #0xce                  \t// #206\n   10404:\td4000001 \tsvc\t#0x0\n   10408:\tf90007e0 \tstr\tx0, [sp,#8]\n   1040c:\taa1003e0 \tmov\tx0, x16\n   10410:\t97fffcb2 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10414:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   10418:\t17ffffe4 \tb\t103a8 <__sendto_nocancel+0x8>\n   1041c:\td503201f \tnop\n\n0000000000010420 <__fsync_nocancel>:\n   10420:\td2800a48 \tmov\tx8, #0x52                  \t// #82\n   10424:\td4000001 \tsvc\t#0x0\n   10428:\tb13ffc1f \tcmn\tx0, #0xfff\n   1042c:\t54000042 \tb.cs\t10434 <__fsync_nocancel+0x14>\n   10430:\td65f03c0 \tret\n   10434:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10438:\t4b0003e2 \tneg\tw2, w0\n   1043c:\tf947c421 \tldr\tx1, [x1,#3976]\n   10440:\td53bd043 \tmrs\tx3, tpidr_el0\n   10444:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10448:\tb8236822 \tstr\tw2, [x1,x3]\n   1044c:\td65f03c0 \tret\n\n0000000000010450 <fsync>:\n   10450:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10454:\tb9432a10 \tldr\tw16, [x16,#808]\n   10458:\t34fffe50 \tcbz\tw16, 10420 <__fsync_nocancel>\n   1045c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   10460:\t97fffc6e \tbl\tf618 <__pthread_enable_asynccancel>\n   10464:\taa0003f0 \tmov\tx16, x0\n   10468:\tf94007e0 \tldr\tx0, [sp,#8]\n   1046c:\td2800a48 \tmov\tx8, #0x52                  \t// #82\n   10470:\td4000001 \tsvc\t#0x0\n   10474:\tf90007e0 \tstr\tx0, [sp,#8]\n   10478:\taa1003e0 \tmov\tx0, x16\n   1047c:\t97fffc97 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10480:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   10484:\t17ffffe9 \tb\t10428 <__fsync_nocancel+0x8>\n   10488:\td503201f \tnop\n   1048c:\td503201f \tnop\n\n0000000000010490 <__lseek_nocancel>:\n   10490:\td28007c8 \tmov\tx8, #0x3e                  \t// #62\n   10494:\td4000001 \tsvc\t#0x0\n   10498:\tb13ffc1f \tcmn\tx0, #0xfff\n   1049c:\t54000042 \tb.cs\t104a4 <__lseek_nocancel+0x14>\n   104a0:\td65f03c0 \tret\n   104a4:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   104a8:\t4b0003e2 \tneg\tw2, w0\n   104ac:\tf947c421 \tldr\tx1, [x1,#3976]\n   104b0:\td53bd043 \tmrs\tx3, tpidr_el0\n   104b4:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   104b8:\tb8236822 \tstr\tw2, [x1,x3]\n   104bc:\td65f03c0 \tret\n\n00000000000104c0 <__lseek>:\n   104c0:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   104c4:\tb9432a10 \tldr\tw16, [x16,#808]\n   104c8:\t34fffe50 \tcbz\tw16, 10490 <__lseek_nocancel>\n   104cc:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   104d0:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   104d4:\t97fffc51 \tbl\tf618 <__pthread_enable_asynccancel>\n   104d8:\taa0003f0 \tmov\tx16, x0\n   104dc:\tf94007e0 \tldr\tx0, [sp,#8]\n   104e0:\ta9410be1 \tldp\tx1, x2, [sp,#16]\n   104e4:\td28007c8 \tmov\tx8, #0x3e                  \t// #62\n   104e8:\td4000001 \tsvc\t#0x0\n   104ec:\tf90007e0 \tstr\tx0, [sp,#8]\n   104f0:\taa1003e0 \tmov\tx0, x16\n   104f4:\t97fffc79 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   104f8:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   104fc:\t17ffffe7 \tb\t10498 <__lseek_nocancel+0x8>\n\n0000000000010500 <__msync_nocancel>:\n   10500:\td2801c68 \tmov\tx8, #0xe3                  \t// #227\n   10504:\td4000001 \tsvc\t#0x0\n   10508:\tb13ffc1f \tcmn\tx0, #0xfff\n   1050c:\t54000042 \tb.cs\t10514 <__msync_nocancel+0x14>\n   10510:\td65f03c0 \tret\n   10514:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10518:\t4b0003e2 \tneg\tw2, w0\n   1051c:\tf947c421 \tldr\tx1, [x1,#3976]\n   10520:\td53bd043 \tmrs\tx3, tpidr_el0\n   10524:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10528:\tb8236822 \tstr\tw2, [x1,x3]\n   1052c:\td65f03c0 \tret\n\n0000000000010530 <msync>:\n   10530:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10534:\tb9432a10 \tldr\tw16, [x16,#808]\n   10538:\t34fffe50 \tcbz\tw16, 10500 <__msync_nocancel>\n   1053c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   10540:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   10544:\t97fffc35 \tbl\tf618 <__pthread_enable_asynccancel>\n   10548:\taa0003f0 \tmov\tx16, x0\n   1054c:\tf94007e0 \tldr\tx0, [sp,#8]\n   10550:\ta9410be1 \tldp\tx1, x2, [sp,#16]\n   10554:\td2801c68 \tmov\tx8, #0xe3                  \t// #227\n   10558:\td4000001 \tsvc\t#0x0\n   1055c:\tf90007e0 \tstr\tx0, [sp,#8]\n   10560:\taa1003e0 \tmov\tx0, x16\n   10564:\t97fffc5d \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10568:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   1056c:\t17ffffe7 \tb\t10508 <__msync_nocancel+0x8>\n\n0000000000010570 <__nanosleep_nocancel>:\n   10570:\td2800ca8 \tmov\tx8, #0x65                  \t// #101\n   10574:\td4000001 \tsvc\t#0x0\n   10578:\tb13ffc1f \tcmn\tx0, #0xfff\n   1057c:\t54000042 \tb.cs\t10584 <__nanosleep_nocancel+0x14>\n   10580:\td65f03c0 \tret\n   10584:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10588:\t4b0003e2 \tneg\tw2, w0\n   1058c:\tf947c421 \tldr\tx1, [x1,#3976]\n   10590:\td53bd043 \tmrs\tx3, tpidr_el0\n   10594:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10598:\tb8236822 \tstr\tw2, [x1,x3]\n   1059c:\td65f03c0 \tret\n\n00000000000105a0 <__nanosleep>:\n   105a0:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   105a4:\tb9432a10 \tldr\tw16, [x16,#808]\n   105a8:\t34fffe50 \tcbz\tw16, 10570 <__nanosleep_nocancel>\n   105ac:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   105b0:\tf9000be1 \tstr\tx1, [sp,#16]\n   105b4:\t97fffc19 \tbl\tf618 <__pthread_enable_asynccancel>\n   105b8:\taa0003f0 \tmov\tx16, x0\n   105bc:\ta94087e0 \tldp\tx0, x1, [sp,#8]\n   105c0:\td2800ca8 \tmov\tx8, #0x65                  \t// #101\n   105c4:\td4000001 \tsvc\t#0x0\n   105c8:\tf90007e0 \tstr\tx0, [sp,#8]\n   105cc:\taa1003e0 \tmov\tx0, x16\n   105d0:\t97fffc42 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   105d4:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   105d8:\t17ffffe8 \tb\t10578 <__nanosleep_nocancel+0x8>\n   105dc:\td503201f \tnop\n\n00000000000105e0 <__open>:\n   105e0:\ta9b07bfd \tstp\tx29, x30, [sp,#-256]!\n   105e4:\t910003fd \tmov\tx29, sp\n   105e8:\tf9000bf3 \tstr\tx19, [sp,#16]\n   105ec:\t2a0103f3 \tmov\tw19, w1\n   105f0:\t3d8017a0 \tstr\tq0, [x29,#80]\n   105f4:\taa0003e1 \tmov\tx1, x0\n   105f8:\tf9006fa3 \tstr\tx3, [x29,#216]\n   105fc:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   10600:\tf9006ba2 \tstr\tx2, [x29,#208]\n   10604:\tf90073a4 \tstr\tx4, [x29,#224]\n   10608:\tf90077a5 \tstr\tx5, [x29,#232]\n   1060c:\tf9007ba6 \tstr\tx6, [x29,#240]\n   10610:\tf9007fa7 \tstr\tx7, [x29,#248]\n   10614:\t3d801ba1 \tstr\tq1, [x29,#96]\n   10618:\t3d801fa2 \tstr\tq2, [x29,#112]\n   1061c:\t3d8023a3 \tstr\tq3, [x29,#128]\n   10620:\t3d8027a4 \tstr\tq4, [x29,#144]\n   10624:\t3d802ba5 \tstr\tq5, [x29,#160]\n   10628:\t3d802fa6 \tstr\tq6, [x29,#176]\n   1062c:\t3d8033a7 \tstr\tq7, [x29,#192]\n   10630:\t373001f3 \ttbnz\tw19, #6, 1066c <__open+0x8c>\n   10634:\t90000120 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n   10638:\tb9432800 \tldr\tw0, [x0,#808]\n   1063c:\t35000320 \tcbnz\tw0, 106a0 <__open+0xc0>\n   10640:\t92800c60 \tmov\tx0, #0xffffffffffffff9c    \t// #-100\n   10644:\t93407e62 \tsxtw\tx2, w19\n   10648:\td2800708 \tmov\tx8, #0x38                  \t// #56\n   1064c:\td4000001 \tsvc\t#0x0\n   10650:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10654:\t540004c8 \tb.hi\t106ec <__open+0x10c>\n   10658:\t2a0003f3 \tmov\tw19, w0\n   1065c:\t2a1303e0 \tmov\tw0, w19\n   10660:\tf9400bf3 \tldr\tx19, [sp,#16]\n   10664:\ta8d07bfd \tldp\tx29, x30, [sp],#256\n   10668:\td65f03c0 \tret\n   1066c:\t910343a0 \tadd\tx0, x29, #0xd0\n   10670:\tf90023a0 \tstr\tx0, [x29,#64]\n   10674:\t128005e0 \tmov\tw0, #0xffffffd0            \t// #-48\n   10678:\tb9004ba0 \tstr\tw0, [x29,#72]\n   1067c:\t12800fe0 \tmov\tw0, #0xffffff80            \t// #-128\n   10680:\tb9004fa0 \tstr\tw0, [x29,#76]\n   10684:\t90000120 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n   10688:\t910403a2 \tadd\tx2, x29, #0x100\n   1068c:\tf9001ba2 \tstr\tx2, [x29,#48]\n   10690:\tf9001fa2 \tstr\tx2, [x29,#56]\n   10694:\tb9432800 \tldr\tw0, [x0,#808]\n   10698:\tb980d3a3 \tldrsw\tx3, [x29,#208]\n   1069c:\t34fffd20 \tcbz\tw0, 10640 <__open+0x60>\n   106a0:\tf90013a1 \tstr\tx1, [x29,#32]\n   106a4:\tf90017a3 \tstr\tx3, [x29,#40]\n   106a8:\t97fffbdc \tbl\tf618 <__pthread_enable_asynccancel>\n   106ac:\tf94013a1 \tldr\tx1, [x29,#32]\n   106b0:\t2a0003e4 \tmov\tw4, w0\n   106b4:\t93407e62 \tsxtw\tx2, w19\n   106b8:\t92800c60 \tmov\tx0, #0xffffffffffffff9c    \t// #-100\n   106bc:\tf94017a3 \tldr\tx3, [x29,#40]\n   106c0:\td2800708 \tmov\tx8, #0x38                  \t// #56\n   106c4:\td4000001 \tsvc\t#0x0\n   106c8:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   106cc:\t540001e8 \tb.hi\t10708 <__open+0x128>\n   106d0:\t2a0003f3 \tmov\tw19, w0\n   106d4:\t2a0403e0 \tmov\tw0, w4\n   106d8:\t97fffc00 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   106dc:\t2a1303e0 \tmov\tw0, w19\n   106e0:\tf9400bf3 \tldr\tx19, [sp,#16]\n   106e4:\ta8d07bfd \tldp\tx29, x30, [sp],#256\n   106e8:\td65f03c0 \tret\n   106ec:\td53bd041 \tmrs\tx1, tpidr_el0\n   106f0:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   106f4:\tf947c442 \tldr\tx2, [x2,#3976]\n   106f8:\t4b0003e0 \tneg\tw0, w0\n   106fc:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10700:\tb8226820 \tstr\tw0, [x1,x2]\n   10704:\t17ffffd6 \tb\t1065c <__open+0x7c>\n   10708:\td53bd041 \tmrs\tx1, tpidr_el0\n   1070c:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10710:\tf947c442 \tldr\tx2, [x2,#3976]\n   10714:\t4b0003e0 \tneg\tw0, w0\n   10718:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   1071c:\tb8226820 \tstr\tw0, [x1,x2]\n   10720:\t17ffffed \tb\t106d4 <__open+0xf4>\n\n0000000000010724 <__open_nocancel>:\n   10724:\td10343ff \tsub\tsp, sp, #0xd0\n   10728:\t3d800be0 \tstr\tq0, [sp,#32]\n   1072c:\tf90053e2 \tstr\tx2, [sp,#160]\n   10730:\t93407c22 \tsxtw\tx2, w1\n   10734:\tf90057e3 \tstr\tx3, [sp,#168]\n   10738:\taa0003e1 \tmov\tx1, x0\n   1073c:\tf9005be4 \tstr\tx4, [sp,#176]\n   10740:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   10744:\tf9005fe5 \tstr\tx5, [sp,#184]\n   10748:\tf90063e6 \tstr\tx6, [sp,#192]\n   1074c:\tf90067e7 \tstr\tx7, [sp,#200]\n   10750:\t3d800fe1 \tstr\tq1, [sp,#48]\n   10754:\t3d8013e2 \tstr\tq2, [sp,#64]\n   10758:\t3d8017e3 \tstr\tq3, [sp,#80]\n   1075c:\t3d801be4 \tstr\tq4, [sp,#96]\n   10760:\t3d801fe5 \tstr\tq5, [sp,#112]\n   10764:\t3d8023e6 \tstr\tq6, [sp,#128]\n   10768:\t3d8027e7 \tstr\tq7, [sp,#144]\n   1076c:\t37300102 \ttbnz\tw2, #6, 1078c <__open_nocancel+0x68>\n   10770:\t92800c60 \tmov\tx0, #0xffffffffffffff9c    \t// #-100\n   10774:\td2800708 \tmov\tx8, #0x38                  \t// #56\n   10778:\td4000001 \tsvc\t#0x0\n   1077c:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10780:\t54000248 \tb.hi\t107c8 <__open_nocancel+0xa4>\n   10784:\t910343ff \tadd\tsp, sp, #0xd0\n   10788:\td65f03c0 \tret\n   1078c:\t910283e0 \tadd\tx0, sp, #0xa0\n   10790:\tf9000be0 \tstr\tx0, [sp,#16]\n   10794:\t128005e0 \tmov\tw0, #0xffffffd0            \t// #-48\n   10798:\tb9001be0 \tstr\tw0, [sp,#24]\n   1079c:\t12800fe0 \tmov\tw0, #0xffffff80            \t// #-128\n   107a0:\t910343e4 \tadd\tx4, sp, #0xd0\n   107a4:\tb9001fe0 \tstr\tw0, [sp,#28]\n   107a8:\td2800708 \tmov\tx8, #0x38                  \t// #56\n   107ac:\tb980a3e3 \tldrsw\tx3, [sp,#160]\n   107b0:\t92800c60 \tmov\tx0, #0xffffffffffffff9c    \t// #-100\n   107b4:\tf90003e4 \tstr\tx4, [sp]\n   107b8:\tf90007e4 \tstr\tx4, [sp,#8]\n   107bc:\td4000001 \tsvc\t#0x0\n   107c0:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   107c4:\t54fffe09 \tb.ls\t10784 <__open_nocancel+0x60>\n   107c8:\td53bd041 \tmrs\tx1, tpidr_el0\n   107cc:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   107d0:\tf947c442 \tldr\tx2, [x2,#3976]\n   107d4:\t4b0003e3 \tneg\tw3, w0\n   107d8:\t910343ff \tadd\tsp, sp, #0xd0\n   107dc:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n   107e0:\tb8226823 \tstr\tw3, [x1,x2]\n   107e4:\td65f03c0 \tret\n\n00000000000107e8 <__open64>:\n   107e8:\ta9b07bfd \tstp\tx29, x30, [sp,#-256]!\n   107ec:\t910003fd \tmov\tx29, sp\n   107f0:\tf9000bf3 \tstr\tx19, [sp,#16]\n   107f4:\t2a0103f3 \tmov\tw19, w1\n   107f8:\t3d8017a0 \tstr\tq0, [x29,#80]\n   107fc:\taa0003e1 \tmov\tx1, x0\n   10800:\tf9006fa3 \tstr\tx3, [x29,#216]\n   10804:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   10808:\tf9006ba2 \tstr\tx2, [x29,#208]\n   1080c:\tf90073a4 \tstr\tx4, [x29,#224]\n   10810:\tf90077a5 \tstr\tx5, [x29,#232]\n   10814:\tf9007ba6 \tstr\tx6, [x29,#240]\n   10818:\tf9007fa7 \tstr\tx7, [x29,#248]\n   1081c:\t3d801ba1 \tstr\tq1, [x29,#96]\n   10820:\t3d801fa2 \tstr\tq2, [x29,#112]\n   10824:\t3d8023a3 \tstr\tq3, [x29,#128]\n   10828:\t3d8027a4 \tstr\tq4, [x29,#144]\n   1082c:\t3d802ba5 \tstr\tq5, [x29,#160]\n   10830:\t3d802fa6 \tstr\tq6, [x29,#176]\n   10834:\t3d8033a7 \tstr\tq7, [x29,#192]\n   10838:\t373001f3 \ttbnz\tw19, #6, 10874 <__open64+0x8c>\n   1083c:\t90000120 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n   10840:\tb9432800 \tldr\tw0, [x0,#808]\n   10844:\t35000320 \tcbnz\tw0, 108a8 <__open64+0xc0>\n   10848:\t92800c60 \tmov\tx0, #0xffffffffffffff9c    \t// #-100\n   1084c:\t93407e62 \tsxtw\tx2, w19\n   10850:\td2800708 \tmov\tx8, #0x38                  \t// #56\n   10854:\td4000001 \tsvc\t#0x0\n   10858:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   1085c:\t540004c8 \tb.hi\t108f4 <__open64+0x10c>\n   10860:\t2a0003f3 \tmov\tw19, w0\n   10864:\t2a1303e0 \tmov\tw0, w19\n   10868:\tf9400bf3 \tldr\tx19, [sp,#16]\n   1086c:\ta8d07bfd \tldp\tx29, x30, [sp],#256\n   10870:\td65f03c0 \tret\n   10874:\t910343a0 \tadd\tx0, x29, #0xd0\n   10878:\tf90023a0 \tstr\tx0, [x29,#64]\n   1087c:\t128005e0 \tmov\tw0, #0xffffffd0            \t// #-48\n   10880:\tb9004ba0 \tstr\tw0, [x29,#72]\n   10884:\t12800fe0 \tmov\tw0, #0xffffff80            \t// #-128\n   10888:\tb9004fa0 \tstr\tw0, [x29,#76]\n   1088c:\t90000120 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n   10890:\t910403a2 \tadd\tx2, x29, #0x100\n   10894:\tf9001ba2 \tstr\tx2, [x29,#48]\n   10898:\tf9001fa2 \tstr\tx2, [x29,#56]\n   1089c:\tb9432800 \tldr\tw0, [x0,#808]\n   108a0:\tb980d3a3 \tldrsw\tx3, [x29,#208]\n   108a4:\t34fffd20 \tcbz\tw0, 10848 <__open64+0x60>\n   108a8:\tf90013a1 \tstr\tx1, [x29,#32]\n   108ac:\tf90017a3 \tstr\tx3, [x29,#40]\n   108b0:\t97fffb5a \tbl\tf618 <__pthread_enable_asynccancel>\n   108b4:\tf94013a1 \tldr\tx1, [x29,#32]\n   108b8:\t2a0003e4 \tmov\tw4, w0\n   108bc:\t93407e62 \tsxtw\tx2, w19\n   108c0:\t92800c60 \tmov\tx0, #0xffffffffffffff9c    \t// #-100\n   108c4:\tf94017a3 \tldr\tx3, [x29,#40]\n   108c8:\td2800708 \tmov\tx8, #0x38                  \t// #56\n   108cc:\td4000001 \tsvc\t#0x0\n   108d0:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   108d4:\t540001e8 \tb.hi\t10910 <__open64+0x128>\n   108d8:\t2a0003f3 \tmov\tw19, w0\n   108dc:\t2a0403e0 \tmov\tw0, w4\n   108e0:\t97fffb7e \tbl\tf6d8 <__pthread_disable_asynccancel>\n   108e4:\t2a1303e0 \tmov\tw0, w19\n   108e8:\tf9400bf3 \tldr\tx19, [sp,#16]\n   108ec:\ta8d07bfd \tldp\tx29, x30, [sp],#256\n   108f0:\td65f03c0 \tret\n   108f4:\td53bd041 \tmrs\tx1, tpidr_el0\n   108f8:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   108fc:\tf947c442 \tldr\tx2, [x2,#3976]\n   10900:\t4b0003e0 \tneg\tw0, w0\n   10904:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10908:\tb8226820 \tstr\tw0, [x1,x2]\n   1090c:\t17ffffd6 \tb\t10864 <__open64+0x7c>\n   10910:\td53bd041 \tmrs\tx1, tpidr_el0\n   10914:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10918:\tf947c442 \tldr\tx2, [x2,#3976]\n   1091c:\t4b0003e0 \tneg\tw0, w0\n   10920:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10924:\tb8226820 \tstr\tw0, [x1,x2]\n   10928:\t17ffffed \tb\t108dc <__open64+0xf4>\n\n000000000001092c <pause>:\n   1092c:\t90000120 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n   10930:\ta9b67bfd \tstp\tx29, x30, [sp,#-160]!\n   10934:\t910003fd \tmov\tx29, sp\n   10938:\tb9432800 \tldr\tw0, [x0,#808]\n   1093c:\tf9000bf3 \tstr\tx19, [sp,#16]\n   10940:\t350003c0 \tcbnz\tw0, 109b8 <pause+0x8c>\n   10944:\t910083a4 \tadd\tx4, x29, #0x20\n   10948:\td2800000 \tmov\tx0, #0x0                   \t// #0\n   1094c:\taa0003e1 \tmov\tx1, x0\n   10950:\taa0403e2 \tmov\tx2, x4\n   10954:\td2800103 \tmov\tx3, #0x8                   \t// #8\n   10958:\td28010e8 \tmov\tx8, #0x87                  \t// #135\n   1095c:\td4000001 \tsvc\t#0x0\n   10960:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10964:\t540001c8 \tb.hi\t1099c <pause+0x70>\n   10968:\t2a0003e1 \tmov\tw1, w0\n   1096c:\t35000100 \tcbnz\tw0, 1098c <pause+0x60>\n   10970:\taa0403e0 \tmov\tx0, x4\n   10974:\taa0303e1 \tmov\tx1, x3\n   10978:\td28010a8 \tmov\tx8, #0x85                  \t// #133\n   1097c:\td4000001 \tsvc\t#0x0\n   10980:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10984:\t540000c8 \tb.hi\t1099c <pause+0x70>\n   10988:\t2a0003e1 \tmov\tw1, w0\n   1098c:\t2a0103e0 \tmov\tw0, w1\n   10990:\tf9400bf3 \tldr\tx19, [sp,#16]\n   10994:\ta8ca7bfd \tldp\tx29, x30, [sp],#160\n   10998:\td65f03c0 \tret\n   1099c:\td53bd042 \tmrs\tx2, tpidr_el0\n   109a0:\tf00000e3 \tadrp\tx3, 2f000 <__FRAME_END__+0x18e30>\n   109a4:\tf947c463 \tldr\tx3, [x3,#3976]\n   109a8:\t4b0003e0 \tneg\tw0, w0\n   109ac:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n   109b0:\tb8236840 \tstr\tw0, [x2,x3]\n   109b4:\t17fffff6 \tb\t1098c <pause+0x60>\n   109b8:\t97fffb18 \tbl\tf618 <__pthread_enable_asynccancel>\n   109bc:\t2a0003e5 \tmov\tw5, w0\n   109c0:\t910083a4 \tadd\tx4, x29, #0x20\n   109c4:\td2800000 \tmov\tx0, #0x0                   \t// #0\n   109c8:\taa0003e1 \tmov\tx1, x0\n   109cc:\taa0403e2 \tmov\tx2, x4\n   109d0:\td2800103 \tmov\tx3, #0x8                   \t// #8\n   109d4:\td28010e8 \tmov\tx8, #0x87                  \t// #135\n   109d8:\td4000001 \tsvc\t#0x0\n   109dc:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   109e0:\t54000208 \tb.hi\t10a20 <pause+0xf4>\n   109e4:\t2a0003f3 \tmov\tw19, w0\n   109e8:\t35000100 \tcbnz\tw0, 10a08 <pause+0xdc>\n   109ec:\taa0403e0 \tmov\tx0, x4\n   109f0:\taa0303e1 \tmov\tx1, x3\n   109f4:\td28010a8 \tmov\tx8, #0x85                  \t// #133\n   109f8:\td4000001 \tsvc\t#0x0\n   109fc:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10a00:\t540001e8 \tb.hi\t10a3c <pause+0x110>\n   10a04:\t2a0003f3 \tmov\tw19, w0\n   10a08:\t2a0503e0 \tmov\tw0, w5\n   10a0c:\t97fffb33 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10a10:\t2a1303e0 \tmov\tw0, w19\n   10a14:\tf9400bf3 \tldr\tx19, [sp,#16]\n   10a18:\ta8ca7bfd \tldp\tx29, x30, [sp],#160\n   10a1c:\td65f03c0 \tret\n   10a20:\t4b0003e1 \tneg\tw1, w0\n   10a24:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10a28:\tf947c442 \tldr\tx2, [x2,#3976]\n   10a2c:\td53bd040 \tmrs\tx0, tpidr_el0\n   10a30:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10a34:\tb8226801 \tstr\tw1, [x0,x2]\n   10a38:\t17fffff4 \tb\t10a08 <pause+0xdc>\n   10a3c:\td53bd041 \tmrs\tx1, tpidr_el0\n   10a40:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10a44:\tf947c442 \tldr\tx2, [x2,#3976]\n   10a48:\t4b0003e0 \tneg\tw0, w0\n   10a4c:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10a50:\tb8226820 \tstr\tw0, [x1,x2]\n   10a54:\t17ffffed \tb\t10a08 <pause+0xdc>\n\n0000000000010a58 <__pause_nocancel>:\n   10a58:\td10203ff \tsub\tsp, sp, #0x80\n   10a5c:\td2800000 \tmov\tx0, #0x0                   \t// #0\n   10a60:\taa0003e1 \tmov\tx1, x0\n   10a64:\t910003e2 \tmov\tx2, sp\n   10a68:\td2800103 \tmov\tx3, #0x8                   \t// #8\n   10a6c:\td28010e8 \tmov\tx8, #0x87                  \t// #135\n   10a70:\td4000001 \tsvc\t#0x0\n   10a74:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10a78:\t540001a8 \tb.hi\t10aac <__pause_nocancel+0x54>\n   10a7c:\t2a0003e1 \tmov\tw1, w0\n   10a80:\t35000100 \tcbnz\tw0, 10aa0 <__pause_nocancel+0x48>\n   10a84:\t910003e0 \tmov\tx0, sp\n   10a88:\taa0303e1 \tmov\tx1, x3\n   10a8c:\td28010a8 \tmov\tx8, #0x85                  \t// #133\n   10a90:\td4000001 \tsvc\t#0x0\n   10a94:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10a98:\t540000a8 \tb.hi\t10aac <__pause_nocancel+0x54>\n   10a9c:\t2a0003e1 \tmov\tw1, w0\n   10aa0:\t2a0103e0 \tmov\tw0, w1\n   10aa4:\t910203ff \tadd\tsp, sp, #0x80\n   10aa8:\td65f03c0 \tret\n   10aac:\td53bd042 \tmrs\tx2, tpidr_el0\n   10ab0:\tf00000e3 \tadrp\tx3, 2f000 <__FRAME_END__+0x18e30>\n   10ab4:\tf947c463 \tldr\tx3, [x3,#3976]\n   10ab8:\t4b0003e0 \tneg\tw0, w0\n   10abc:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n   10ac0:\t910203ff \tadd\tsp, sp, #0x80\n   10ac4:\tb8236840 \tstr\tw0, [x2,x3]\n   10ac8:\t2a0103e0 \tmov\tw0, w1\n   10acc:\td65f03c0 \tret\n\n0000000000010ad0 <__pread_nocancel>:\n   10ad0:\td2800868 \tmov\tx8, #0x43                  \t// #67\n   10ad4:\td4000001 \tsvc\t#0x0\n   10ad8:\tb13ffc1f \tcmn\tx0, #0xfff\n   10adc:\t54000042 \tb.cs\t10ae4 <__pread_nocancel+0x14>\n   10ae0:\td65f03c0 \tret\n   10ae4:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10ae8:\t4b0003e2 \tneg\tw2, w0\n   10aec:\tf947c421 \tldr\tx1, [x1,#3976]\n   10af0:\td53bd043 \tmrs\tx3, tpidr_el0\n   10af4:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10af8:\tb8236822 \tstr\tw2, [x1,x3]\n   10afc:\td65f03c0 \tret\n\n0000000000010b00 <__pread64>:\n   10b00:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10b04:\tb9432a10 \tldr\tw16, [x16,#808]\n   10b08:\t34fffe50 \tcbz\tw16, 10ad0 <__pread_nocancel>\n   10b0c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   10b10:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   10b14:\tf90013e3 \tstr\tx3, [sp,#32]\n   10b18:\t97fffac0 \tbl\tf618 <__pthread_enable_asynccancel>\n   10b1c:\taa0003f0 \tmov\tx16, x0\n   10b20:\ta94087e0 \tldp\tx0, x1, [sp,#8]\n   10b24:\ta9418fe2 \tldp\tx2, x3, [sp,#24]\n   10b28:\td2800868 \tmov\tx8, #0x43                  \t// #67\n   10b2c:\td4000001 \tsvc\t#0x0\n   10b30:\tf90007e0 \tstr\tx0, [sp,#8]\n   10b34:\taa1003e0 \tmov\tx0, x16\n   10b38:\t97fffae8 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10b3c:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   10b40:\t17ffffe6 \tb\t10ad8 <__pread_nocancel+0x8>\n   10b44:\td503201f \tnop\n   10b48:\td503201f \tnop\n   10b4c:\td503201f \tnop\n\n0000000000010b50 <__pwrite_nocancel>:\n   10b50:\td2800888 \tmov\tx8, #0x44                  \t// #68\n   10b54:\td4000001 \tsvc\t#0x0\n   10b58:\tb13ffc1f \tcmn\tx0, #0xfff\n   10b5c:\t54000042 \tb.cs\t10b64 <__pwrite_nocancel+0x14>\n   10b60:\td65f03c0 \tret\n   10b64:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10b68:\t4b0003e2 \tneg\tw2, w0\n   10b6c:\tf947c421 \tldr\tx1, [x1,#3976]\n   10b70:\td53bd043 \tmrs\tx3, tpidr_el0\n   10b74:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10b78:\tb8236822 \tstr\tw2, [x1,x3]\n   10b7c:\td65f03c0 \tret\n\n0000000000010b80 <__pwrite64>:\n   10b80:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10b84:\tb9432a10 \tldr\tw16, [x16,#808]\n   10b88:\t34fffe50 \tcbz\tw16, 10b50 <__pwrite_nocancel>\n   10b8c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   10b90:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   10b94:\tf90013e3 \tstr\tx3, [sp,#32]\n   10b98:\t97fffaa0 \tbl\tf618 <__pthread_enable_asynccancel>\n   10b9c:\taa0003f0 \tmov\tx16, x0\n   10ba0:\ta94087e0 \tldp\tx0, x1, [sp,#8]\n   10ba4:\ta9418fe2 \tldp\tx2, x3, [sp,#24]\n   10ba8:\td2800888 \tmov\tx8, #0x44                  \t// #68\n   10bac:\td4000001 \tsvc\t#0x0\n   10bb0:\tf90007e0 \tstr\tx0, [sp,#8]\n   10bb4:\taa1003e0 \tmov\tx0, x16\n   10bb8:\t97fffac8 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10bbc:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   10bc0:\t17ffffe6 \tb\t10b58 <__pwrite_nocancel+0x8>\n   10bc4:\td503201f \tnop\n   10bc8:\td503201f \tnop\n   10bcc:\td503201f \tnop\n\n0000000000010bd0 <tcdrain>:\n   10bd0:\t90000121 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n   10bd4:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n   10bd8:\t910003fd \tmov\tx29, sp\n   10bdc:\tb9432821 \tldr\tw1, [x1,#808]\n   10be0:\tf9000bf3 \tstr\tx19, [sp,#16]\n   10be4:\t350001a1 \tcbnz\tw1, 10c18 <tcdrain+0x48>\n   10be8:\t93407c00 \tsxtw\tx0, w0\n   10bec:\td28a8121 \tmov\tx1, #0x5409                \t// #21513\n   10bf0:\td2800022 \tmov\tx2, #0x1                   \t// #1\n   10bf4:\td28003a8 \tmov\tx8, #0x1d                  \t// #29\n   10bf8:\td4000001 \tsvc\t#0x0\n   10bfc:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10c00:\t540002e8 \tb.hi\t10c5c <tcdrain+0x8c>\n   10c04:\t2a0003f3 \tmov\tw19, w0\n   10c08:\t2a1303e0 \tmov\tw0, w19\n   10c0c:\tf9400bf3 \tldr\tx19, [sp,#16]\n   10c10:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n   10c14:\td65f03c0 \tret\n   10c18:\t2a0003f3 \tmov\tw19, w0\n   10c1c:\t97fffa7f \tbl\tf618 <__pthread_enable_asynccancel>\n   10c20:\td28a8121 \tmov\tx1, #0x5409                \t// #21513\n   10c24:\t2a0003e3 \tmov\tw3, w0\n   10c28:\td2800022 \tmov\tx2, #0x1                   \t// #1\n   10c2c:\t93407e60 \tsxtw\tx0, w19\n   10c30:\td28003a8 \tmov\tx8, #0x1d                  \t// #29\n   10c34:\td4000001 \tsvc\t#0x0\n   10c38:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10c3c:\t540001e8 \tb.hi\t10c78 <tcdrain+0xa8>\n   10c40:\t2a0003f3 \tmov\tw19, w0\n   10c44:\t2a0303e0 \tmov\tw0, w3\n   10c48:\t97fffaa4 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10c4c:\t2a1303e0 \tmov\tw0, w19\n   10c50:\tf9400bf3 \tldr\tx19, [sp,#16]\n   10c54:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n   10c58:\td65f03c0 \tret\n   10c5c:\td53bd041 \tmrs\tx1, tpidr_el0\n   10c60:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10c64:\tf947c442 \tldr\tx2, [x2,#3976]\n   10c68:\t4b0003e0 \tneg\tw0, w0\n   10c6c:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10c70:\tb8226820 \tstr\tw0, [x1,x2]\n   10c74:\t17ffffe5 \tb\t10c08 <tcdrain+0x38>\n   10c78:\td53bd041 \tmrs\tx1, tpidr_el0\n   10c7c:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10c80:\tf947c442 \tldr\tx2, [x2,#3976]\n   10c84:\t4b0003e0 \tneg\tw0, w0\n   10c88:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10c8c:\tb8226820 \tstr\tw0, [x1,x2]\n   10c90:\t17ffffed \tb\t10c44 <tcdrain+0x74>\n\n0000000000010c94 <__wait>:\n   10c94:\taa0003e1 \tmov\tx1, x0\n   10c98:\t90000120 \tadrp\tx0, 34000 <__GI___pthread_keys+0x3d78>\n   10c9c:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   10ca0:\t910003fd \tmov\tx29, sp\n   10ca4:\tb9432800 \tldr\tw0, [x0,#808]\n   10ca8:\tf9000bf3 \tstr\tx19, [sp,#16]\n   10cac:\t350001a0 \tcbnz\tw0, 10ce0 <__wait+0x4c>\n   10cb0:\td2800002 \tmov\tx2, #0x0                   \t// #0\n   10cb4:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10cb8:\taa0203e3 \tmov\tx3, x2\n   10cbc:\td2802088 \tmov\tx8, #0x104                 \t// #260\n   10cc0:\td4000001 \tsvc\t#0x0\n   10cc4:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10cc8:\t54000308 \tb.hi\t10d28 <__wait+0x94>\n   10ccc:\t2a0003f3 \tmov\tw19, w0\n   10cd0:\t2a1303e0 \tmov\tw0, w19\n   10cd4:\tf9400bf3 \tldr\tx19, [sp,#16]\n   10cd8:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   10cdc:\td65f03c0 \tret\n   10ce0:\tf90017a1 \tstr\tx1, [x29,#40]\n   10ce4:\t97fffa4d \tbl\tf618 <__pthread_enable_asynccancel>\n   10ce8:\td2800002 \tmov\tx2, #0x0                   \t// #0\n   10cec:\t2a0003e4 \tmov\tw4, w0\n   10cf0:\tf94017a1 \tldr\tx1, [x29,#40]\n   10cf4:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10cf8:\taa0203e3 \tmov\tx3, x2\n   10cfc:\td2802088 \tmov\tx8, #0x104                 \t// #260\n   10d00:\td4000001 \tsvc\t#0x0\n   10d04:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10d08:\t540001e8 \tb.hi\t10d44 <__wait+0xb0>\n   10d0c:\t2a0003f3 \tmov\tw19, w0\n   10d10:\t2a0403e0 \tmov\tw0, w4\n   10d14:\t97fffa71 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10d18:\t2a1303e0 \tmov\tw0, w19\n   10d1c:\tf9400bf3 \tldr\tx19, [sp,#16]\n   10d20:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   10d24:\td65f03c0 \tret\n   10d28:\td53bd041 \tmrs\tx1, tpidr_el0\n   10d2c:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10d30:\tf947c442 \tldr\tx2, [x2,#3976]\n   10d34:\t4b0003e0 \tneg\tw0, w0\n   10d38:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10d3c:\tb8226820 \tstr\tw0, [x1,x2]\n   10d40:\t17ffffe4 \tb\t10cd0 <__wait+0x3c>\n   10d44:\td53bd041 \tmrs\tx1, tpidr_el0\n   10d48:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10d4c:\tf947c442 \tldr\tx2, [x2,#3976]\n   10d50:\t4b0003e0 \tneg\tw0, w0\n   10d54:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10d58:\tb8226820 \tstr\tw0, [x1,x2]\n   10d5c:\t17ffffed \tb\t10d10 <__wait+0x7c>\n\n0000000000010d60 <waitpid>:\n   10d60:\t90000123 \tadrp\tx3, 34000 <__GI___pthread_keys+0x3d78>\n   10d64:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   10d68:\t910003fd \tmov\tx29, sp\n   10d6c:\tb9432863 \tldr\tw3, [x3,#808]\n   10d70:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   10d74:\t350001a3 \tcbnz\tw3, 10da8 <waitpid+0x48>\n   10d78:\t93407c00 \tsxtw\tx0, w0\n   10d7c:\t93407c42 \tsxtw\tx2, w2\n   10d80:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   10d84:\td2802088 \tmov\tx8, #0x104                 \t// #260\n   10d88:\td4000001 \tsvc\t#0x0\n   10d8c:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10d90:\t54000348 \tb.hi\t10df8 <waitpid+0x98>\n   10d94:\t2a0003f3 \tmov\tw19, w0\n   10d98:\t2a1303e0 \tmov\tw0, w19\n   10d9c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   10da0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   10da4:\td65f03c0 \tret\n   10da8:\t2a0203f3 \tmov\tw19, w2\n   10dac:\t2a0003f4 \tmov\tw20, w0\n   10db0:\tf90017a1 \tstr\tx1, [x29,#40]\n   10db4:\t97fffa19 \tbl\tf618 <__pthread_enable_asynccancel>\n   10db8:\tf94017a1 \tldr\tx1, [x29,#40]\n   10dbc:\t2a0003e4 \tmov\tw4, w0\n   10dc0:\t93407e62 \tsxtw\tx2, w19\n   10dc4:\t93407e80 \tsxtw\tx0, w20\n   10dc8:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   10dcc:\td2802088 \tmov\tx8, #0x104                 \t// #260\n   10dd0:\td4000001 \tsvc\t#0x0\n   10dd4:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   10dd8:\t540001e8 \tb.hi\t10e14 <waitpid+0xb4>\n   10ddc:\t2a0003f3 \tmov\tw19, w0\n   10de0:\t2a0403e0 \tmov\tw0, w4\n   10de4:\t97fffa3d \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10de8:\t2a1303e0 \tmov\tw0, w19\n   10dec:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   10df0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   10df4:\td65f03c0 \tret\n   10df8:\td53bd041 \tmrs\tx1, tpidr_el0\n   10dfc:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10e00:\tf947c442 \tldr\tx2, [x2,#3976]\n   10e04:\t4b0003e0 \tneg\tw0, w0\n   10e08:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10e0c:\tb8226820 \tstr\tw0, [x1,x2]\n   10e10:\t17ffffe2 \tb\t10d98 <waitpid+0x38>\n   10e14:\td53bd041 \tmrs\tx1, tpidr_el0\n   10e18:\tf00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   10e1c:\tf947c442 \tldr\tx2, [x2,#3976]\n   10e20:\t4b0003e0 \tneg\tw0, w0\n   10e24:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   10e28:\tb8226820 \tstr\tw0, [x1,x2]\n   10e2c:\t17ffffed \tb\t10de0 <waitpid+0x80>\n\n0000000000010e30 <__msgrcv_nocancel>:\n   10e30:\td2801788 \tmov\tx8, #0xbc                  \t// #188\n   10e34:\td4000001 \tsvc\t#0x0\n   10e38:\tb13ffc1f \tcmn\tx0, #0xfff\n   10e3c:\t54000042 \tb.cs\t10e44 <__msgrcv_nocancel+0x14>\n   10e40:\td65f03c0 \tret\n   10e44:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10e48:\t4b0003e2 \tneg\tw2, w0\n   10e4c:\tf947c421 \tldr\tx1, [x1,#3976]\n   10e50:\td53bd043 \tmrs\tx3, tpidr_el0\n   10e54:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10e58:\tb8236822 \tstr\tw2, [x1,x3]\n   10e5c:\td65f03c0 \tret\n\n0000000000010e60 <__msgrcv>:\n   10e60:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10e64:\tb9432a10 \tldr\tw16, [x16,#808]\n   10e68:\t34fffe50 \tcbz\tw16, 10e30 <__msgrcv_nocancel>\n   10e6c:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   10e70:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   10e74:\ta90213e3 \tstp\tx3, x4, [sp,#32]\n   10e78:\t97fff9e8 \tbl\tf618 <__pthread_enable_asynccancel>\n   10e7c:\taa0003f0 \tmov\tx16, x0\n   10e80:\tf94007e0 \tldr\tx0, [sp,#8]\n   10e84:\ta9410be1 \tldp\tx1, x2, [sp,#16]\n   10e88:\ta94213e3 \tldp\tx3, x4, [sp,#32]\n   10e8c:\td2801788 \tmov\tx8, #0xbc                  \t// #188\n   10e90:\td4000001 \tsvc\t#0x0\n   10e94:\tf90007e0 \tstr\tx0, [sp,#8]\n   10e98:\taa1003e0 \tmov\tx0, x16\n   10e9c:\t97fffa0f \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10ea0:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   10ea4:\t17ffffe5 \tb\t10e38 <__msgrcv_nocancel+0x8>\n   10ea8:\td503201f \tnop\n   10eac:\td503201f \tnop\n\n0000000000010eb0 <__msgsnd_nocancel>:\n   10eb0:\td28017a8 \tmov\tx8, #0xbd                  \t// #189\n   10eb4:\td4000001 \tsvc\t#0x0\n   10eb8:\tb13ffc1f \tcmn\tx0, #0xfff\n   10ebc:\t54000042 \tb.cs\t10ec4 <__msgsnd_nocancel+0x14>\n   10ec0:\td65f03c0 \tret\n   10ec4:\tf00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   10ec8:\t4b0003e2 \tneg\tw2, w0\n   10ecc:\tf947c421 \tldr\tx1, [x1,#3976]\n   10ed0:\td53bd043 \tmrs\tx3, tpidr_el0\n   10ed4:\t92800000 \tmov\tx0, #0xffffffffffffffff    \t// #-1\n   10ed8:\tb8236822 \tstr\tw2, [x1,x3]\n   10edc:\td65f03c0 \tret\n\n0000000000010ee0 <__msgsnd>:\n   10ee0:\t90000130 \tadrp\tx16, 34000 <__GI___pthread_keys+0x3d78>\n   10ee4:\tb9432a10 \tldr\tw16, [x16,#808]\n   10ee8:\t34fffe50 \tcbz\tw16, 10eb0 <__msgsnd_nocancel>\n   10eec:\ta9bc03fe \tstp\tx30, x0, [sp,#-64]!\n   10ef0:\ta9010be1 \tstp\tx1, x2, [sp,#16]\n   10ef4:\tf90013e3 \tstr\tx3, [sp,#32]\n   10ef8:\t97fff9c8 \tbl\tf618 <__pthread_enable_asynccancel>\n   10efc:\taa0003f0 \tmov\tx16, x0\n   10f00:\ta94087e0 \tldp\tx0, x1, [sp,#8]\n   10f04:\ta9418fe2 \tldp\tx2, x3, [sp,#24]\n   10f08:\td28017a8 \tmov\tx8, #0xbd                  \t// #189\n   10f0c:\td4000001 \tsvc\t#0x0\n   10f10:\tf90007e0 \tstr\tx0, [sp,#8]\n   10f14:\taa1003e0 \tmov\tx0, x16\n   10f18:\t97fff9f0 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   10f1c:\ta8c403fe \tldp\tx30, x0, [sp],#64\n   10f20:\t17ffffe6 \tb\t10eb8 <__msgsnd_nocancel+0x8>\n   10f24:\td503201f \tnop\n   10f28:\td503201f \tnop\n   10f2c:\td503201f \tnop\n\n0000000000010f30 <sigwait>:\n   10f30:\t90000122 \tadrp\tx2, 34000 <__GI___pthread_keys+0x3d78>\n   10f34:\taa0103e5 \tmov\tx5, x1\n   10f38:\ta9b67bfd \tstp\tx29, x30, [sp,#-160]!\n   10f3c:\t910003fd \tmov\tx29, sp\n   10f40:\tb9432842 \tldr\tw2, [x2,#808]\n   10f44:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   10f48:\t350003e2 \tcbnz\tw2, 10fc4 <sigwait+0x94>\n   10f4c:\tb4000080 \tcbz\tx0, 10f5c <sigwait+0x2c>\n   10f50:\tf9400002 \tldr\tx2, [x0]\n   10f54:\tf261045f \ttst\tx2, #0x180000000\n   10f58:\t540002e1 \tb.ne\t10fb4 <sigwait+0x84>\n   10f5c:\taa0003e4 \tmov\tx4, x0\n   10f60:\t14000003 \tb\t10f6c <sigwait+0x3c>\n   10f64:\t3140041f \tcmn\tw0, #0x1, lsl #12\n   10f68:\t54000169 \tb.ls\t10f94 <sigwait+0x64>\n   10f6c:\td2800001 \tmov\tx1, #0x0                   \t// #0\n   10f70:\taa0403e0 \tmov\tx0, x4\n   10f74:\taa0103e2 \tmov\tx2, x1\n   10f78:\td2800103 \tmov\tx3, #0x8                   \t// #8\n   10f7c:\td2801128 \tmov\tx8, #0x89                  \t// #137\n   10f80:\td4000001 \tsvc\t#0x0\n   10f84:\t3100101f \tcmn\tw0, #0x4\n   10f88:\t2a0003e2 \tmov\tw2, w0\n   10f8c:\t2a0003e3 \tmov\tw3, w0\n   10f90:\t54fffea0 \tb.eq\t10f64 <sigwait+0x34>\n   10f94:\t3140047f \tcmn\tw3, #0x1, lsl #12\n   10f98:\t4b0203e0 \tneg\tw0, w2\n   10f9c:\t54000068 \tb.hi\t10fa8 <sigwait+0x78>\n   10fa0:\tb90000a2 \tstr\tw2, [x5]\n   10fa4:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   10fa8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   10fac:\ta8ca7bfd \tldp\tx29, x30, [sp],#160\n   10fb0:\td65f03c0 \tret\n   10fb4:\t925ff442 \tand\tx2, x2, #0xfffffffe7fffffff\n   10fb8:\t910083a4 \tadd\tx4, x29, #0x20\n   10fbc:\tf90013a2 \tstr\tx2, [x29,#32]\n   10fc0:\t17ffffeb \tb\t10f6c <sigwait+0x3c>\n   10fc4:\taa0003f3 \tmov\tx19, x0\n   10fc8:\taa0103f4 \tmov\tx20, x1\n   10fcc:\t97fff993 \tbl\tf618 <__pthread_enable_asynccancel>\n   10fd0:\t2a0003e5 \tmov\tw5, w0\n   10fd4:\tb4000093 \tcbz\tx19, 10fe4 <sigwait+0xb4>\n   10fd8:\tf9400260 \tldr\tx0, [x19]\n   10fdc:\tf261041f \ttst\tx0, #0x180000000\n   10fe0:\t54000341 \tb.ne\t11048 <sigwait+0x118>\n   10fe4:\taa1303e4 \tmov\tx4, x19\n   10fe8:\t14000003 \tb\t10ff4 <sigwait+0xc4>\n   10fec:\t3140041f \tcmn\tw0, #0x1, lsl #12\n   10ff0:\t54000169 \tb.ls\t1101c <sigwait+0xec>\n   10ff4:\td2800001 \tmov\tx1, #0x0                   \t// #0\n   10ff8:\taa0403e0 \tmov\tx0, x4\n   10ffc:\taa0103e2 \tmov\tx2, x1\n   11000:\td2800103 \tmov\tx3, #0x8                   \t// #8\n   11004:\td2801128 \tmov\tx8, #0x89                  \t// #137\n   11008:\td4000001 \tsvc\t#0x0\n   1100c:\t3100101f \tcmn\tw0, #0x4\n   11010:\t2a0003e1 \tmov\tw1, w0\n   11014:\t2a0003e2 \tmov\tw2, w0\n   11018:\t54fffea0 \tb.eq\t10fec <sigwait+0xbc>\n   1101c:\t3140045f \tcmn\tw2, #0x1, lsl #12\n   11020:\t4b0103f3 \tneg\tw19, w1\n   11024:\t54000068 \tb.hi\t11030 <sigwait+0x100>\n   11028:\tb9000281 \tstr\tw1, [x20]\n   1102c:\t52800013 \tmov\tw19, #0x0                   \t// #0\n   11030:\t2a0503e0 \tmov\tw0, w5\n   11034:\t97fff9a9 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   11038:\t2a1303e0 \tmov\tw0, w19\n   1103c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11040:\ta8ca7bfd \tldp\tx29, x30, [sp],#160\n   11044:\td65f03c0 \tret\n   11048:\t925ff400 \tand\tx0, x0, #0xfffffffe7fffffff\n   1104c:\t910083a4 \tadd\tx4, x29, #0x20\n   11050:\tf90013a0 \tstr\tx0, [x29,#32]\n   11054:\t17ffffe8 \tb\t10ff4 <sigwait+0xc4>\n\n0000000000011058 <__libc_sigsuspend>:\n   11058:\tf0000101 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n   1105c:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n   11060:\t910003fd \tmov\tx29, sp\n   11064:\tb9432821 \tldr\tw1, [x1,#808]\n   11068:\tf9000bf3 \tstr\tx19, [sp,#16]\n   1106c:\t35000161 \tcbnz\tw1, 11098 <__libc_sigsuspend+0x40>\n   11070:\td2800101 \tmov\tx1, #0x8                   \t// #8\n   11074:\td28010a8 \tmov\tx8, #0x85                  \t// #133\n   11078:\td4000001 \tsvc\t#0x0\n   1107c:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   11080:\t540002c8 \tb.hi\t110d8 <__libc_sigsuspend+0x80>\n   11084:\t2a0003f3 \tmov\tw19, w0\n   11088:\t2a1303e0 \tmov\tw0, w19\n   1108c:\tf9400bf3 \tldr\tx19, [sp,#16]\n   11090:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n   11094:\td65f03c0 \tret\n   11098:\taa0003f3 \tmov\tx19, x0\n   1109c:\t97fff95f \tbl\tf618 <__pthread_enable_asynccancel>\n   110a0:\td2800101 \tmov\tx1, #0x8                   \t// #8\n   110a4:\t2a0003e2 \tmov\tw2, w0\n   110a8:\td28010a8 \tmov\tx8, #0x85                  \t// #133\n   110ac:\taa1303e0 \tmov\tx0, x19\n   110b0:\td4000001 \tsvc\t#0x0\n   110b4:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   110b8:\t540001e8 \tb.hi\t110f4 <__libc_sigsuspend+0x9c>\n   110bc:\t2a0003f3 \tmov\tw19, w0\n   110c0:\t2a0203e0 \tmov\tw0, w2\n   110c4:\t97fff985 \tbl\tf6d8 <__pthread_disable_asynccancel>\n   110c8:\t2a1303e0 \tmov\tw0, w19\n   110cc:\tf9400bf3 \tldr\tx19, [sp,#16]\n   110d0:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n   110d4:\td65f03c0 \tret\n   110d8:\td53bd041 \tmrs\tx1, tpidr_el0\n   110dc:\td00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   110e0:\tf947c442 \tldr\tx2, [x2,#3976]\n   110e4:\t4b0003e0 \tneg\tw0, w0\n   110e8:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   110ec:\tb8226820 \tstr\tw0, [x1,x2]\n   110f0:\t17ffffe6 \tb\t11088 <__libc_sigsuspend+0x30>\n   110f4:\td53bd041 \tmrs\tx1, tpidr_el0\n   110f8:\td00000e3 \tadrp\tx3, 2f000 <__FRAME_END__+0x18e30>\n   110fc:\tf947c463 \tldr\tx3, [x3,#3976]\n   11100:\t4b0003e0 \tneg\tw0, w0\n   11104:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   11108:\tb8236820 \tstr\tw0, [x1,x3]\n   1110c:\t17ffffed \tb\t110c0 <__libc_sigsuspend+0x68>\n\n0000000000011110 <__sigsuspend_nocancel>:\n   11110:\td2800101 \tmov\tx1, #0x8                   \t// #8\n   11114:\td28010a8 \tmov\tx8, #0x85                  \t// #133\n   11118:\td4000001 \tsvc\t#0x0\n   1111c:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   11120:\t54000048 \tb.hi\t11128 <__sigsuspend_nocancel+0x18>\n   11124:\td65f03c0 \tret\n   11128:\td53bd041 \tmrs\tx1, tpidr_el0\n   1112c:\td00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   11130:\tf947c442 \tldr\tx2, [x2,#3976]\n   11134:\t4b0003e3 \tneg\tw3, w0\n   11138:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n   1113c:\tb8226823 \tstr\tw3, [x1,x2]\n   11140:\td65f03c0 \tret\n\n0000000000011144 <raise>:\n   11144:\td53bd043 \tmrs\tx3, tpidr_el0\n   11148:\t93407c02 \tsxtw\tx2, w0\n   1114c:\td11bc061 \tsub\tx1, x3, #0x6f0\n   11150:\td2801068 \tmov\tx8, #0x83                  \t// #131\n   11154:\tb980d420 \tldrsw\tx0, [x1,#212]\n   11158:\tb980d021 \tldrsw\tx1, [x1,#208]\n   1115c:\tca80fc04 \teor\tx4, x0, x0, asr #63\n   11160:\tcb80fc80 \tsub\tx0, x4, x0, asr #63\n   11164:\t93407c00 \tsxtw\tx0, w0\n   11168:\td4000001 \tsvc\t#0x0\n   1116c:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   11170:\t54000048 \tb.hi\t11178 <raise+0x34>\n   11174:\td65f03c0 \tret\n   11178:\td00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   1117c:\tf947c421 \tldr\tx1, [x1,#3976]\n   11180:\t4b0003e2 \tneg\tw2, w0\n   11184:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n   11188:\tb8216862 \tstr\tw2, [x3,x1]\n   1118c:\td65f03c0 \tret\n\n0000000000011190 <system>:\n   11190:\t17ffcfb4 \tb\t5060 <__libc_system@plt>\n\n0000000000011194 <_IO_flockfile>:\n   11194:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   11198:\t910003fd \tmov\tx29, sp\n   1119c:\tf9404401 \tldr\tx1, [x0,#136]\n   111a0:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   111a4:\td53bd054 \tmrs\tx20, tpidr_el0\n   111a8:\tf9400422 \tldr\tx2, [x1,#8]\n   111ac:\td11bc294 \tsub\tx20, x20, #0x6f0\n   111b0:\teb14005f \tcmp\tx2, x20\n   111b4:\t540001a0 \tb.eq\t111e8 <_IO_flockfile+0x54>\n   111b8:\taa0003f3 \tmov\tx19, x0\n   111bc:\tb9002fbf \tstr\twzr, [x29,#44]\n   111c0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n   111c4:\t885ffc22 \tldaxr\tw2, [x1]\n   111c8:\t6b1f005f \tcmp\tw2, wzr\n   111cc:\t54000061 \tb.ne\t111d8 <_IO_flockfile+0x44>\n   111d0:\t88037c20 \tstxr\tw3, w0, [x1]\n   111d4:\t35ffff83 \tcbnz\tw3, 111c4 <_IO_flockfile+0x30>\n   111d8:\t54000141 \tb.ne\t11200 <_IO_flockfile+0x6c>\n   111dc:\tf9404660 \tldr\tx0, [x19,#136]\n   111e0:\taa0003e1 \tmov\tx1, x0\n   111e4:\tf9000414 \tstr\tx20, [x0,#8]\n   111e8:\tb9400420 \tldr\tw0, [x1,#4]\n   111ec:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   111f0:\t11000400 \tadd\tw0, w0, #0x1\n   111f4:\tb9000420 \tstr\tw0, [x1,#4]\n   111f8:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   111fc:\td65f03c0 \tret\n   11200:\taa0103e0 \tmov\tx0, x1\n   11204:\tb9002fa2 \tstr\tw2, [x29,#44]\n   11208:\t97fff958 \tbl\tf768 <__lll_lock_wait_private>\n   1120c:\t17fffff4 \tb\t111dc <_IO_flockfile+0x48>\n\n0000000000011210 <_IO_ftrylockfile>:\n   11210:\tf9404402 \tldr\tx2, [x0,#136]\n   11214:\td53bd041 \tmrs\tx1, tpidr_el0\n   11218:\td11bc021 \tsub\tx1, x1, #0x6f0\n   1121c:\td10043ff \tsub\tsp, sp, #0x10\n   11220:\tf9400443 \tldr\tx3, [x2,#8]\n   11224:\teb01007f \tcmp\tx3, x1\n   11228:\t54000180 \tb.eq\t11258 <_IO_ftrylockfile+0x48>\n   1122c:\tb9000fff \tstr\twzr, [sp,#12]\n   11230:\t52800023 \tmov\tw3, #0x1                   \t// #1\n   11234:\t885ffc44 \tldaxr\tw4, [x2]\n   11238:\t6b1f009f \tcmp\tw4, wzr\n   1123c:\t54000061 \tb.ne\t11248 <_IO_ftrylockfile+0x38>\n   11240:\t88057c43 \tstxr\tw5, w3, [x2]\n   11244:\t35ffff85 \tcbnz\tw5, 11234 <_IO_ftrylockfile+0x24>\n   11248:\t54000140 \tb.eq\t11270 <_IO_ftrylockfile+0x60>\n   1124c:\t52800200 \tmov\tw0, #0x10                  \t// #16\n   11250:\t910043ff \tadd\tsp, sp, #0x10\n   11254:\td65f03c0 \tret\n   11258:\tb9400441 \tldr\tw1, [x2,#4]\n   1125c:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   11260:\t910043ff \tadd\tsp, sp, #0x10\n   11264:\t11000421 \tadd\tw1, w1, #0x1\n   11268:\tb9000441 \tstr\tw1, [x2,#4]\n   1126c:\td65f03c0 \tret\n   11270:\tf9404402 \tldr\tx2, [x0,#136]\n   11274:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   11278:\tf9000441 \tstr\tx1, [x2,#8]\n   1127c:\tb9000443 \tstr\tw3, [x2,#4]\n   11280:\t17fffff4 \tb\t11250 <_IO_ftrylockfile+0x40>\n\n0000000000011284 <_IO_funlockfile>:\n   11284:\tf9404400 \tldr\tx0, [x0,#136]\n   11288:\tb9400401 \tldr\tw1, [x0,#4]\n   1128c:\t51000421 \tsub\tw1, w1, #0x1\n   11290:\tb9000401 \tstr\tw1, [x0,#4]\n   11294:\t34000041 \tcbz\tw1, 1129c <_IO_funlockfile+0x18>\n   11298:\td65f03c0 \tret\n   1129c:\tf900041f \tstr\txzr, [x0,#8]\n   112a0:\t885f7c02 \tldxr\tw2, [x0]\n   112a4:\t8803fc01 \tstlxr\tw3, w1, [x0]\n   112a8:\t35ffffc3 \tcbnz\tw3, 112a0 <_IO_funlockfile+0x1c>\n   112ac:\t7100045f \tcmp\tw2, #0x1\n   112b0:\t54ffff4d \tb.le\t11298 <_IO_funlockfile+0x14>\n   112b4:\td2801021 \tmov\tx1, #0x81                  \t// #129\n   112b8:\td2800022 \tmov\tx2, #0x1                   \t// #1\n   112bc:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   112c0:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n   112c4:\td4000001 \tsvc\t#0x0\n   112c8:\td65f03c0 \tret\n\n00000000000112cc <__libc_sigaction>:\n   112cc:\ta9aa7bfd \tstp\tx29, x30, [sp,#-352]!\n   112d0:\t910003fd \tmov\tx29, sp\n   112d4:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n   112d8:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   112dc:\t2a0003f6 \tmov\tw22, w0\n   112e0:\taa0103f4 \tmov\tx20, x1\n   112e4:\taa0203f5 \tmov\tx21, x2\n   112e8:\tb4000581 \tcbz\tx1, 11398 <__libc_sigaction+0xcc>\n   112ec:\t9100c3b3 \tadd\tx19, x29, #0x30\n   112f0:\tf8408420 \tldr\tx0, [x1],#8\n   112f4:\taa1303e3 \tmov\tx3, x19\n   112f8:\td2801002 \tmov\tx2, #0x80                  \t// #128\n   112fc:\tf8018460 \tstr\tx0, [x3],#24\n   11300:\taa0303e0 \tmov\tx0, x3\n   11304:\t97ffcf17 \tbl\t4f60 <memcpy@plt>\n   11308:\tb9408a81 \tldr\tw1, [x20,#136]\n   1130c:\t93407c20 \tsxtw\tx0, w1\n   11310:\tf9000660 \tstr\tx0, [x19,#8]\n   11314:\t37d003c1 \ttbnz\tw1, #26, 1138c <__libc_sigaction+0xc0>\n   11318:\taa1503e2 \tmov\tx2, x21\n   1131c:\tb4000055 \tcbz\tx21, 11324 <__libc_sigaction+0x58>\n   11320:\t910323a2 \tadd\tx2, x29, #0xc8\n   11324:\taa1303e1 \tmov\tx1, x19\n   11328:\t93407ec0 \tsxtw\tx0, w22\n   1132c:\td2800103 \tmov\tx3, #0x8                   \t// #8\n   11330:\td28010c8 \tmov\tx8, #0x86                  \t// #134\n   11334:\td4000001 \tsvc\t#0x0\n   11338:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   1133c:\t540003e8 \tb.hi\t113b8 <__libc_sigaction+0xec>\n   11340:\t2a0003f3 \tmov\tw19, w0\n   11344:\t37f801a0 \ttbnz\tw0, #31, 11378 <__libc_sigaction+0xac>\n   11348:\t37f80180 \ttbnz\tw0, #31, 11378 <__libc_sigaction+0xac>\n   1134c:\tb4000175 \tcbz\tx21, 11378 <__libc_sigaction+0xac>\n   11350:\taa1503e0 \tmov\tx0, x21\n   11354:\tf94067a3 \tldr\tx3, [x29,#200]\n   11358:\t910383a1 \tadd\tx1, x29, #0xe0\n   1135c:\td2801002 \tmov\tx2, #0x80                  \t// #128\n   11360:\tf8008403 \tstr\tx3, [x0],#8\n   11364:\t97ffceff \tbl\t4f60 <memcpy@plt>\n   11368:\tf9406ba0 \tldr\tx0, [x29,#208]\n   1136c:\tb9008aa0 \tstr\tw0, [x21,#136]\n   11370:\tf9406fa0 \tldr\tx0, [x29,#216]\n   11374:\tf9004aa0 \tstr\tx0, [x21,#144]\n   11378:\t2a1303e0 \tmov\tw0, w19\n   1137c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11380:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   11384:\ta8d67bfd \tldp\tx29, x30, [sp],#352\n   11388:\td65f03c0 \tret\n   1138c:\tf9404a80 \tldr\tx0, [x20,#144]\n   11390:\tf9000a60 \tstr\tx0, [x19,#16]\n   11394:\t17ffffe1 \tb\t11318 <__libc_sigaction+0x4c>\n   11398:\tb4000262 \tcbz\tx2, 113e4 <__libc_sigaction+0x118>\n   1139c:\t910323a2 \tadd\tx2, x29, #0xc8\n   113a0:\t93407ec0 \tsxtw\tx0, w22\n   113a4:\td2800103 \tmov\tx3, #0x8                   \t// #8\n   113a8:\td28010c8 \tmov\tx8, #0x86                  \t// #134\n   113ac:\td4000001 \tsvc\t#0x0\n   113b0:\tb140041f \tcmn\tx0, #0x1, lsl #12\n   113b4:\t54fffc69 \tb.ls\t11340 <__libc_sigaction+0x74>\n   113b8:\t4b0003e1 \tneg\tw1, w0\n   113bc:\td00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   113c0:\tf947c442 \tldr\tx2, [x2,#3976]\n   113c4:\td53bd040 \tmrs\tx0, tpidr_el0\n   113c8:\t12800013 \tmov\tw19, #0xffffffff            \t// #-1\n   113cc:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   113d0:\tb8226801 \tstr\tw1, [x0,x2]\n   113d4:\t2a1303e0 \tmov\tw0, w19\n   113d8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   113dc:\ta8d67bfd \tldp\tx29, x30, [sp],#352\n   113e0:\td65f03c0 \tret\n   113e4:\taa1503e2 \tmov\tx2, x21\n   113e8:\taa1503e1 \tmov\tx1, x21\n   113ec:\t17ffffcf \tb\t11328 <__libc_sigaction+0x5c>\n\n00000000000113f0 <__sigaction>:\n   113f0:\t51008003 \tsub\tw3, w0, #0x20\n   113f4:\t7100047f \tcmp\tw3, #0x1\n   113f8:\t54000049 \tb.ls\t11400 <__sigaction+0x10>\n   113fc:\t17ffffb4 \tb\t112cc <__libc_sigaction>\n   11400:\td53bd040 \tmrs\tx0, tpidr_el0\n   11404:\td00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   11408:\tf947c421 \tldr\tx1, [x1,#3976]\n   1140c:\t528002c2 \tmov\tw2, #0x16                  \t// #22\n   11410:\tb8216802 \tstr\tw2, [x0,x1]\n   11414:\t12800000 \tmov\tw0, #0xffffffff            \t// #-1\n   11418:\td65f03c0 \tret\n\n000000000001141c <__h_errno_location>:\n   1141c:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n   11420:\tf00000e0 \tadrp\tx0, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   11424:\tf9412001 \tldr\tx1, [x0,#576]\n   11428:\t91090000 \tadd\tx0, x0, #0x240\n   1142c:\td63f0020 \tblr\tx1\n   11430:\t910003fd \tmov\tx29, sp\n   11434:\td53bd041 \tmrs\tx1, tpidr_el0\n   11438:\t8b000020 \tadd\tx0, x1, x0\n   1143c:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n   11440:\td65f03c0 \tret\n\n0000000000011444 <__res_state>:\n   11444:\td00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   11448:\tf947cc21 \tldr\tx1, [x1,#3992]\n   1144c:\td53bd040 \tmrs\tx0, tpidr_el0\n   11450:\tf8616800 \tldr\tx0, [x0,x1]\n   11454:\td65f03c0 \tret\n\n0000000000011458 <__libc_current_sigrtmin>:\n   11458:\t17ffcf92 \tb\t52a0 <__libc_current_sigrtmin_private@plt>\n\n000000000001145c <__libc_current_sigrtmax>:\n   1145c:\t17ffcf4d \tb\t5190 <__libc_current_sigrtmax_private@plt>\n\n0000000000011460 <__libc_allocate_rtsig>:\n   11460:\t17ffcfcc \tb\t5390 <__libc_allocate_rtsig_private@plt>\n\n0000000000011464 <pthread_kill_other_threads_np@GLIBC_2.17>:\n   11464:\td65f03c0 \tret\n\n0000000000011468 <pthread_getaffinity_np@@GLIBC_2.17>:\n   11468:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n   1146c:\taa0103e4 \tmov\tx4, x1\n   11470:\tb2407be1 \tmov\tx1, #0x7fffffff            \t// #2147483647\n   11474:\teb01009f \tcmp\tx4, x1\n   11478:\t910003fd \tmov\tx29, sp\n   1147c:\taa0203e5 \tmov\tx5, x2\n   11480:\t9a819081 \tcsel\tx1, x4, x1, ls\n   11484:\tb980d000 \tldrsw\tx0, [x0,#208]\n   11488:\td2800f68 \tmov\tx8, #0x7b                  \t// #123\n   1148c:\td4000001 \tsvc\t#0x0\n   11490:\t3140041f \tcmn\tw0, #0x1, lsl #12\n   11494:\t54000089 \tb.ls\t114a4 <pthread_getaffinity_np@@GLIBC_2.17+0x3c>\n   11498:\t4b0003e0 \tneg\tw0, w0\n   1149c:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n   114a0:\td65f03c0 \tret\n   114a4:\t93407c02 \tsxtw\tx2, w0\n   114a8:\t52800001 \tmov\tw1, #0x0                   \t// #0\n   114ac:\t8b0200a0 \tadd\tx0, x5, x2\n   114b0:\tcb020082 \tsub\tx2, x4, x2\n   114b4:\t97ffcef7 \tbl\t5090 <memset@plt>\n   114b8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   114bc:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n   114c0:\td65f03c0 \tret\n\n00000000000114c4 <__determine_cpumask_size>:\n   114c4:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n   114c8:\t93407c06 \tsxtw\tx6, w0\n   114cc:\td2801004 \tmov\tx4, #0x80                  \t// #128\n   114d0:\t910003fd \tmov\tx29, sp\n   114d4:\td10243ff \tsub\tsp, sp, #0x90\n   114d8:\t910003e5 \tmov\tx5, sp\n   114dc:\t1400000b \tb\t11508 <__determine_cpumask_size+0x44>\n   114e0:\t927cec63 \tand\tx3, x3, #0xfffffffffffffff0\n   114e4:\t340002a1 \tcbz\tw1, 11538 <__determine_cpumask_size+0x74>\n   114e8:\t91004061 \tadd\tx1, x3, #0x10\n   114ec:\t910003e0 \tmov\tx0, sp\n   114f0:\tcb21601f \tsub\tsp, x0, x1\n   114f4:\t8b040064 \tadd\tx4, x3, x4\n   114f8:\t8b2363e2 \tadd\tx2, sp, x3\n   114fc:\teb0200bf \tcmp\tx5, x2\n   11500:\t910003e5 \tmov\tx5, sp\n   11504:\t9a830084 \tcsel\tx4, x4, x3, eq\n   11508:\taa0603e0 \tmov\tx0, x6\n   1150c:\taa0403e1 \tmov\tx1, x4\n   11510:\taa0503e2 \tmov\tx2, x5\n   11514:\td2800f68 \tmov\tx8, #0x7b                  \t// #123\n   11518:\td4000001 \tsvc\t#0x0\n   1151c:\t3140041f \tcmn\tw0, #0x1, lsl #12\n   11520:\td37ff883 \tlsl\tx3, x4, #1\n   11524:\t1a9f97e1 \tcset\tw1, hi\n   11528:\t3100581f \tcmn\tw0, #0x16\n   1152c:\t93407c02 \tsxtw\tx2, w0\n   11530:\t91003c63 \tadd\tx3, x3, #0xf\n   11534:\t54fffd60 \tb.eq\t114e0 <__determine_cpumask_size+0x1c>\n   11538:\t34000102 \tcbz\tw2, 11558 <__determine_cpumask_size+0x94>\n   1153c:\t350000e1 \tcbnz\tw1, 11558 <__determine_cpumask_size+0x94>\n   11540:\t2a0103e0 \tmov\tw0, w1\n   11544:\tf0000101 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n   11548:\t910003bf \tmov\tsp, x29\n   1154c:\tf901d422 \tstr\tx2, [x1,#936]\n   11550:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n   11554:\td65f03c0 \tret\n   11558:\t910003bf \tmov\tsp, x29\n   1155c:\t4b0203e0 \tneg\tw0, w2\n   11560:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n   11564:\td65f03c0 \tret\n\n0000000000011568 <pthread_setaffinity_np@@GLIBC_2.17>:\n   11568:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   1156c:\t910003fd \tmov\tx29, sp\n   11570:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   11574:\tf0000113 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n   11578:\taa0003f4 \tmov\tx20, x0\n   1157c:\tf941d663 \tldr\tx3, [x19,#936]\n   11580:\tb40002a3 \tcbz\tx3, 115d4 <pthread_setaffinity_np@@GLIBC_2.17+0x6c>\n   11584:\teb01007f \tcmp\tx3, x1\n   11588:\t540000a3 \tb.cc\t1159c <pthread_setaffinity_np@@GLIBC_2.17+0x34>\n   1158c:\t1400000a \tb\t115b4 <pthread_setaffinity_np@@GLIBC_2.17+0x4c>\n   11590:\t91000463 \tadd\tx3, x3, #0x1\n   11594:\teb03003f \tcmp\tx1, x3\n   11598:\t540000e9 \tb.ls\t115b4 <pthread_setaffinity_np@@GLIBC_2.17+0x4c>\n   1159c:\t38636844 \tldrb\tw4, [x2,x3]\n   115a0:\t34ffff84 \tcbz\tw4, 11590 <pthread_setaffinity_np@@GLIBC_2.17+0x28>\n   115a4:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n   115a8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   115ac:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   115b0:\td65f03c0 \tret\n   115b4:\tb980d280 \tldrsw\tx0, [x20,#208]\n   115b8:\td2800f48 \tmov\tx8, #0x7a                  \t// #122\n   115bc:\td4000001 \tsvc\t#0x0\n   115c0:\t3140041f \tcmn\tw0, #0x1, lsl #12\n   115c4:\t5a8097e0 \tcsneg\tw0, wzr, w0, ls\n   115c8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   115cc:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   115d0:\td65f03c0 \tret\n   115d4:\tb940d000 \tldr\tw0, [x0,#208]\n   115d8:\tf90013a2 \tstr\tx2, [x29,#32]\n   115dc:\tf90017a1 \tstr\tx1, [x29,#40]\n   115e0:\t97ffffb9 \tbl\t114c4 <__determine_cpumask_size>\n   115e4:\t35fffe20 \tcbnz\tw0, 115a8 <pthread_setaffinity_np@@GLIBC_2.17+0x40>\n   115e8:\tf941d663 \tldr\tx3, [x19,#936]\n   115ec:\tf94013a2 \tldr\tx2, [x29,#32]\n   115f0:\tf94017a1 \tldr\tx1, [x29,#40]\n   115f4:\t17ffffe4 \tb\t11584 <pthread_setaffinity_np@@GLIBC_2.17+0x1c>\n\n00000000000115f8 <pthread_attr_getaffinity_np@@GLIBC_2.17>:\n   115f8:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   115fc:\t910003fd \tmov\tx29, sp\n   11600:\tf9401405 \tldr\tx5, [x0,#40]\n   11604:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   11608:\tf90013f5 \tstr\tx21, [sp,#32]\n   1160c:\taa0103f4 \tmov\tx20, x1\n   11610:\taa0003f5 \tmov\tx21, x0\n   11614:\tb4000525 \tcbz\tx5, 116b8 <pthread_attr_getaffinity_np@@GLIBC_2.17+0xc0>\n   11618:\tf9401806 \tldr\tx6, [x0,#48]\n   1161c:\teb06003f \tcmp\tx1, x6\n   11620:\t54000142 \tb.cs\t11648 <pthread_attr_getaffinity_np@@GLIBC_2.17+0x50>\n   11624:\t386168a1 \tldrb\tw1, [x5,x1]\n   11628:\t350002c1 \tcbnz\tw1, 11680 <pthread_attr_getaffinity_np@@GLIBC_2.17+0x88>\n   1162c:\taa1403e3 \tmov\tx3, x20\n   11630:\t14000003 \tb\t1163c <pthread_attr_getaffinity_np@@GLIBC_2.17+0x44>\n   11634:\t386368a4 \tldrb\tw4, [x5,x3]\n   11638:\t35000244 \tcbnz\tw4, 11680 <pthread_attr_getaffinity_np@@GLIBC_2.17+0x88>\n   1163c:\t91000463 \tadd\tx3, x3, #0x1\n   11640:\teb06007f \tcmp\tx3, x6\n   11644:\t54ffff83 \tb.cc\t11634 <pthread_attr_getaffinity_np@@GLIBC_2.17+0x3c>\n   11648:\teb06029f \tcmp\tx20, x6\n   1164c:\taa0203e0 \tmov\tx0, x2\n   11650:\taa0503e1 \tmov\tx1, x5\n   11654:\t9a869282 \tcsel\tx2, x20, x6, ls\n   11658:\t52800013 \tmov\tw19, #0x0                   \t// #0\n   1165c:\t97ffcf01 \tbl\t5260 <mempcpy@plt>\n   11660:\tf9401aa2 \tldr\tx2, [x21,#48]\n   11664:\teb02029f \tcmp\tx20, x2\n   11668:\t54000188 \tb.hi\t11698 <pthread_attr_getaffinity_np@@GLIBC_2.17+0xa0>\n   1166c:\t2a1303e0 \tmov\tw0, w19\n   11670:\tf94013f5 \tldr\tx21, [sp,#32]\n   11674:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11678:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   1167c:\td65f03c0 \tret\n   11680:\t528002d3 \tmov\tw19, #0x16                  \t// #22\n   11684:\tf94013f5 \tldr\tx21, [sp,#32]\n   11688:\t2a1303e0 \tmov\tw0, w19\n   1168c:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11690:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   11694:\td65f03c0 \tret\n   11698:\t2a1303e1 \tmov\tw1, w19\n   1169c:\tcb020282 \tsub\tx2, x20, x2\n   116a0:\t97ffce7c \tbl\t5090 <memset@plt>\n   116a4:\tf94013f5 \tldr\tx21, [sp,#32]\n   116a8:\t2a1303e0 \tmov\tw0, w19\n   116ac:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   116b0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   116b4:\td65f03c0 \tret\n   116b8:\taa0203e0 \tmov\tx0, x2\n   116bc:\t12800001 \tmov\tw1, #0xffffffff            \t// #-1\n   116c0:\taa1403e2 \tmov\tx2, x20\n   116c4:\t2a0503f3 \tmov\tw19, w5\n   116c8:\t97ffce72 \tbl\t5090 <memset@plt>\n   116cc:\t17ffffe8 \tb\t1166c <pthread_attr_getaffinity_np@@GLIBC_2.17+0x74>\n\n00000000000116d0 <pthread_attr_setaffinity_np@@GLIBC_2.17>:\n   116d0:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n   116d4:\t910003fd \tmov\tx29, sp\n   116d8:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   116dc:\tf90013f5 \tstr\tx21, [sp,#32]\n   116e0:\taa0003f4 \tmov\tx20, x0\n   116e4:\taa0103f3 \tmov\tx19, x1\n   116e8:\tb40004c2 \tcbz\tx2, 11780 <pthread_attr_setaffinity_np@@GLIBC_2.17+0xb0>\n   116ec:\tb40004a1 \tcbz\tx1, 11780 <pthread_attr_setaffinity_np@@GLIBC_2.17+0xb0>\n   116f0:\tf0000115 \tadrp\tx21, 34000 <__GI___pthread_keys+0x3d78>\n   116f4:\tf941d6a3 \tldr\tx3, [x21,#936]\n   116f8:\tb4000563 \tcbz\tx3, 117a4 <pthread_attr_setaffinity_np@@GLIBC_2.17+0xd4>\n   116fc:\teb03027f \tcmp\tx19, x3\n   11700:\t540001a9 \tb.ls\t11734 <pthread_attr_setaffinity_np@@GLIBC_2.17+0x64>\n   11704:\t38636840 \tldrb\tw0, [x2,x3]\n   11708:\t34000100 \tcbz\tw0, 11728 <pthread_attr_setaffinity_np@@GLIBC_2.17+0x58>\n   1170c:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n   11710:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11714:\tf94013f5 \tldr\tx21, [sp,#32]\n   11718:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n   1171c:\td65f03c0 \tret\n   11720:\t38636844 \tldrb\tw4, [x2,x3]\n   11724:\t35ffff44 \tcbnz\tw4, 1170c <pthread_attr_setaffinity_np@@GLIBC_2.17+0x3c>\n   11728:\t91000463 \tadd\tx3, x3, #0x1\n   1172c:\teb03027f \tcmp\tx19, x3\n   11730:\t54ffff88 \tb.hi\t11720 <pthread_attr_setaffinity_np@@GLIBC_2.17+0x50>\n   11734:\tf9401a80 \tldr\tx0, [x20,#48]\n   11738:\teb13001f \tcmp\tx0, x19\n   1173c:\t54000460 \tb.eq\t117c8 <pthread_attr_setaffinity_np@@GLIBC_2.17+0xf8>\n   11740:\tf9401680 \tldr\tx0, [x20,#40]\n   11744:\taa1303e1 \tmov\tx1, x19\n   11748:\tf9001fa2 \tstr\tx2, [x29,#56]\n   1174c:\t97ffce71 \tbl\t5110 <realloc@plt>\n   11750:\tb4000400 \tcbz\tx0, 117d0 <pthread_attr_setaffinity_np@@GLIBC_2.17+0x100>\n   11754:\tf9401fa2 \tldr\tx2, [x29,#56]\n   11758:\tf9001680 \tstr\tx0, [x20,#40]\n   1175c:\tf9001a93 \tstr\tx19, [x20,#48]\n   11760:\taa0203e1 \tmov\tx1, x2\n   11764:\taa1303e2 \tmov\tx2, x19\n   11768:\t97ffcdfe \tbl\t4f60 <memcpy@plt>\n   1176c:\tf94013f5 \tldr\tx21, [sp,#32]\n   11770:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   11774:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11778:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n   1177c:\td65f03c0 \tret\n   11780:\tf9401680 \tldr\tx0, [x20,#40]\n   11784:\t97ffcea7 \tbl\t5220 <free@plt>\n   11788:\tf900169f \tstr\txzr, [x20,#40]\n   1178c:\tf9001a9f \tstr\txzr, [x20,#48]\n   11790:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   11794:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11798:\tf94013f5 \tldr\tx21, [sp,#32]\n   1179c:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n   117a0:\td65f03c0 \tret\n   117a4:\td53bd040 \tmrs\tx0, tpidr_el0\n   117a8:\tf9001fa2 \tstr\tx2, [x29,#56]\n   117ac:\td11bc000 \tsub\tx0, x0, #0x6f0\n   117b0:\tb940d000 \tldr\tw0, [x0,#208]\n   117b4:\t97ffff44 \tbl\t114c4 <__determine_cpumask_size>\n   117b8:\t35fffac0 \tcbnz\tw0, 11710 <pthread_attr_setaffinity_np@@GLIBC_2.17+0x40>\n   117bc:\tf941d6a3 \tldr\tx3, [x21,#936]\n   117c0:\tf9401fa2 \tldr\tx2, [x29,#56]\n   117c4:\t17ffffce \tb\t116fc <pthread_attr_setaffinity_np@@GLIBC_2.17+0x2c>\n   117c8:\tf9401680 \tldr\tx0, [x20,#40]\n   117cc:\t17ffffe5 \tb\t11760 <pthread_attr_setaffinity_np@@GLIBC_2.17+0x90>\n   117d0:\t52800180 \tmov\tw0, #0xc                   \t// #12\n   117d4:\t17ffffcf \tb\t11710 <pthread_attr_setaffinity_np@@GLIBC_2.17+0x40>\n\n00000000000117d8 <pthread_mutexattr_getrobust>:\n   117d8:\tb9400002 \tldr\tw2, [x0]\n   117dc:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   117e0:\td35e7842 \tubfx\tx2, x2, #30, #1\n   117e4:\tb9000022 \tstr\tw2, [x1]\n   117e8:\td65f03c0 \tret\n\n00000000000117ec <pthread_mutexattr_setrobust>:\n   117ec:\t350000c1 \tcbnz\tw1, 11804 <pthread_mutexattr_setrobust+0x18>\n   117f0:\tb9400002 \tldr\tw2, [x0]\n   117f4:\t12017842 \tand\tw2, w2, #0xbfffffff\n   117f8:\tb9000002 \tstr\tw2, [x0]\n   117fc:\t2a0103e0 \tmov\tw0, w1\n   11800:\td65f03c0 \tret\n   11804:\t7100043f \tcmp\tw1, #0x1\n   11808:\t540000e1 \tb.ne\t11824 <pthread_mutexattr_setrobust+0x38>\n   1180c:\tb9400002 \tldr\tw2, [x0]\n   11810:\t52800001 \tmov\tw1, #0x0                   \t// #0\n   11814:\t32020042 \torr\tw2, w2, #0x40000000\n   11818:\tb9000002 \tstr\tw2, [x0]\n   1181c:\t2a0103e0 \tmov\tw0, w1\n   11820:\td65f03c0 \tret\n   11824:\t528002c1 \tmov\tw1, #0x16                  \t// #22\n   11828:\t17fffff5 \tb\t117fc <pthread_mutexattr_setrobust+0x10>\n\n000000000001182c <pthread_mutex_consistent>:\n   1182c:\tb9401002 \tldr\tw2, [x0,#16]\n   11830:\t528002c1 \tmov\tw1, #0x16                  \t// #22\n   11834:\t37200062 \ttbnz\tw2, #4, 11840 <pthread_mutex_consistent+0x14>\n   11838:\t2a0103e0 \tmov\tw0, w1\n   1183c:\td65f03c0 \tret\n   11840:\tb9400803 \tldr\tw3, [x0,#8]\n   11844:\t12b00002 \tmov\tw2, #0x7fffffff            \t// #2147483647\n   11848:\t6b02007f \tcmp\tw3, w2\n   1184c:\t54ffff61 \tb.ne\t11838 <pthread_mutex_consistent+0xc>\n   11850:\td53bd042 \tmrs\tx2, tpidr_el0\n   11854:\t52800001 \tmov\tw1, #0x0                   \t// #0\n   11858:\td11bc042 \tsub\tx2, x2, #0x6f0\n   1185c:\tb940d042 \tldr\tw2, [x2,#208]\n   11860:\tb9000802 \tstr\tw2, [x0,#8]\n   11864:\t17fffff5 \tb\t11838 <pthread_mutex_consistent+0xc>\n\n0000000000011868 <__pthread_cleanup_routine>:\n   11868:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n   1186c:\t910003fd \tmov\tx29, sp\n   11870:\tb9401001 \tldr\tw1, [x0,#16]\n   11874:\t34000081 \tcbz\tw1, 11884 <__pthread_cleanup_routine+0x1c>\n   11878:\tf9400001 \tldr\tx1, [x0]\n   1187c:\tf9400400 \tldr\tx0, [x0,#8]\n   11880:\td63f0020 \tblr\tx1\n   11884:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n   11888:\td65f03c0 \tret\n\n000000000001188c <pthread_cancel_init>:\n   1188c:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n   11890:\t910003fd \tmov\tx29, sp\n   11894:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   11898:\tf0000113 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n   1189c:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n   118a0:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n   118a4:\tf9417660 \tldr\tx0, [x19,#744]\n   118a8:\t910ba274 \tadd\tx20, x19, #0x2e8\n   118ac:\tb40000c0 \tcbz\tx0, 118c4 <pthread_cancel_init+0x38>\n   118b0:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   118b4:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   118b8:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n   118bc:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n   118c0:\td65f03c0 \tret\n   118c4:\tb0000000 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n   118c8:\t320107e1 \tmov\tw1, #0x80000001            \t// #-2147483647\n   118cc:\t91354000 \tadd\tx0, x0, #0xd50\n   118d0:\t97ffce38 \tbl\t51b0 <__libc_dlopen_mode@plt>\n   118d4:\taa0003f5 \tmov\tx21, x0\n   118d8:\tb40004a0 \tcbz\tx0, 1196c <pthread_cancel_init+0xe0>\n   118dc:\tb0000001 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n   118e0:\t91368021 \tadd\tx1, x1, #0xda0\n   118e4:\t97ffce67 \tbl\t5280 <__libc_dlsym@plt>\n   118e8:\taa0003f6 \tmov\tx22, x0\n   118ec:\tb4000400 \tcbz\tx0, 1196c <pthread_cancel_init+0xe0>\n   118f0:\tb0000001 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n   118f4:\taa1503e0 \tmov\tx0, x21\n   118f8:\t9136c021 \tadd\tx1, x1, #0xdb0\n   118fc:\t97ffce61 \tbl\t5280 <__libc_dlsym@plt>\n   11900:\taa0003f8 \tmov\tx24, x0\n   11904:\tb4000340 \tcbz\tx0, 1196c <pthread_cancel_init+0xe0>\n   11908:\tb0000001 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n   1190c:\taa1503e0 \tmov\tx0, x21\n   11910:\t91372021 \tadd\tx1, x1, #0xdc8\n   11914:\t97ffce5b \tbl\t5280 <__libc_dlsym@plt>\n   11918:\taa0003f7 \tmov\tx23, x0\n   1191c:\tb4000280 \tcbz\tx0, 1196c <pthread_cancel_init+0xe0>\n   11920:\tb0000001 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n   11924:\taa1503e0 \tmov\tx0, x21\n   11928:\t91378021 \tadd\tx1, x1, #0xde0\n   1192c:\t97ffce55 \tbl\t5280 <__libc_dlsym@plt>\n   11930:\tb40001e0 \tcbz\tx0, 1196c <pthread_cancel_init+0xe0>\n   11934:\td00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   11938:\tf947d042 \tldr\tx2, [x2,#4000]\n   1193c:\tf9400041 \tldr\tx1, [x2]\n   11940:\tca0102d6 \teor\tx22, x22, x1\n   11944:\tca010318 \teor\tx24, x24, x1\n   11948:\tca0102f7 \teor\tx23, x23, x1\n   1194c:\tf9000696 \tstr\tx22, [x20,#8]\n   11950:\tf9000a98 \tstr\tx24, [x20,#16]\n   11954:\tca010001 \teor\tx1, x0, x1\n   11958:\tf9000e97 \tstr\tx23, [x20,#24]\n   1195c:\tf9001281 \tstr\tx1, [x20,#32]\n   11960:\td5033bbf \tdmb\tish\n   11964:\tf9017675 \tstr\tx21, [x19,#744]\n   11968:\t17ffffd2 \tb\t118b0 <pthread_cancel_init+0x24>\n   1196c:\tb0000000 \tadrp\tx0, 12000 <__pthread_current_priority+0xa8>\n   11970:\t91358000 \tadd\tx0, x0, #0xd60\n   11974:\t97ffcd9f \tbl\t4ff0 <__libc_fatal@plt>\n\n0000000000011978 <_Unwind_Resume>:\n   11978:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   1197c:\t910003fd \tmov\tx29, sp\n   11980:\tf9000bf3 \tstr\tx19, [sp,#16]\n   11984:\tf0000113 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n   11988:\tf9417661 \tldr\tx1, [x19,#744]\n   1198c:\tb4000181 \tcbz\tx1, 119bc <_Unwind_Resume+0x44>\n   11990:\td5033bbf \tdmb\tish\n   11994:\td00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   11998:\t910ba273 \tadd\tx19, x19, #0x2e8\n   1199c:\tf947d042 \tldr\tx2, [x2,#4000]\n   119a0:\tf9400663 \tldr\tx3, [x19,#8]\n   119a4:\tf9400041 \tldr\tx1, [x2]\n   119a8:\tca010061 \teor\tx1, x3, x1\n   119ac:\td63f0020 \tblr\tx1\n   119b0:\tf9400bf3 \tldr\tx19, [sp,#16]\n   119b4:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   119b8:\td65f03c0 \tret\n   119bc:\tf90017a0 \tstr\tx0, [x29,#40]\n   119c0:\t97ffffb3 \tbl\t1188c <pthread_cancel_init>\n   119c4:\tf94017a0 \tldr\tx0, [x29,#40]\n   119c8:\t17fffff3 \tb\t11994 <_Unwind_Resume+0x1c>\n\n00000000000119cc <__gcc_personality_v0>:\n   119cc:\ta9bb7bfd \tstp\tx29, x30, [sp,#-80]!\n   119d0:\t910003fd \tmov\tx29, sp\n   119d4:\tf9000bf3 \tstr\tx19, [sp,#16]\n   119d8:\tf0000113 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n   119dc:\tf9417665 \tldr\tx5, [x19,#744]\n   119e0:\tb4000185 \tcbz\tx5, 11a10 <__gcc_personality_v0+0x44>\n   119e4:\td5033bbf \tdmb\tish\n   119e8:\td00000e6 \tadrp\tx6, 2f000 <__FRAME_END__+0x18e30>\n   119ec:\t910ba273 \tadd\tx19, x19, #0x2e8\n   119f0:\tf947d0c6 \tldr\tx6, [x6,#4000]\n   119f4:\tf9400a67 \tldr\tx7, [x19,#16]\n   119f8:\tf94000c5 \tldr\tx5, [x6]\n   119fc:\tca0500e5 \teor\tx5, x7, x5\n   11a00:\td63f00a0 \tblr\tx5\n   11a04:\tf9400bf3 \tldr\tx19, [sp,#16]\n   11a08:\ta8c57bfd \tldp\tx29, x30, [sp],#80\n   11a0c:\td65f03c0 \tret\n   11a10:\tf90017a4 \tstr\tx4, [x29,#40]\n   11a14:\tf9001ba3 \tstr\tx3, [x29,#48]\n   11a18:\tf9001fa2 \tstr\tx2, [x29,#56]\n   11a1c:\tf90023a1 \tstr\tx1, [x29,#64]\n   11a20:\tf90027a0 \tstr\tx0, [x29,#72]\n   11a24:\t97ffff9a \tbl\t1188c <pthread_cancel_init>\n   11a28:\tf94027a0 \tldr\tx0, [x29,#72]\n   11a2c:\tf94023a1 \tldr\tx1, [x29,#64]\n   11a30:\tf9401fa2 \tldr\tx2, [x29,#56]\n   11a34:\tf9401ba3 \tldr\tx3, [x29,#48]\n   11a38:\tf94017a4 \tldr\tx4, [x29,#40]\n   11a3c:\t17ffffeb \tb\t119e8 <__gcc_personality_v0+0x1c>\n\n0000000000011a40 <_Unwind_ForcedUnwind>:\n   11a40:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n   11a44:\t910003fd \tmov\tx29, sp\n   11a48:\tf9000bf3 \tstr\tx19, [sp,#16]\n   11a4c:\tf0000113 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n   11a50:\tf9417663 \tldr\tx3, [x19,#744]\n   11a54:\tb4000183 \tcbz\tx3, 11a84 <_Unwind_ForcedUnwind+0x44>\n   11a58:\td5033bbf \tdmb\tish\n   11a5c:\td00000e4 \tadrp\tx4, 2f000 <__FRAME_END__+0x18e30>\n   11a60:\t910ba273 \tadd\tx19, x19, #0x2e8\n   11a64:\tf947d084 \tldr\tx4, [x4,#4000]\n   11a68:\tf9400e65 \tldr\tx5, [x19,#24]\n   11a6c:\tf9400083 \tldr\tx3, [x4]\n   11a70:\tca0300a3 \teor\tx3, x5, x3\n   11a74:\td63f0060 \tblr\tx3\n   11a78:\tf9400bf3 \tldr\tx19, [sp,#16]\n   11a7c:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n   11a80:\td65f03c0 \tret\n   11a84:\tf90017a2 \tstr\tx2, [x29,#40]\n   11a88:\tf9001ba1 \tstr\tx1, [x29,#48]\n   11a8c:\tf9001fa0 \tstr\tx0, [x29,#56]\n   11a90:\t97ffff7f \tbl\t1188c <pthread_cancel_init>\n   11a94:\tf9401fa0 \tldr\tx0, [x29,#56]\n   11a98:\tf9401ba1 \tldr\tx1, [x29,#48]\n   11a9c:\tf94017a2 \tldr\tx2, [x29,#40]\n   11aa0:\t17ffffef \tb\t11a5c <_Unwind_ForcedUnwind+0x1c>\n\n0000000000011aa4 <_Unwind_GetCFA>:\n   11aa4:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   11aa8:\t910003fd \tmov\tx29, sp\n   11aac:\tf9000bf3 \tstr\tx19, [sp,#16]\n   11ab0:\tf0000113 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n   11ab4:\tf9417661 \tldr\tx1, [x19,#744]\n   11ab8:\tb4000181 \tcbz\tx1, 11ae8 <_Unwind_GetCFA+0x44>\n   11abc:\td5033bbf \tdmb\tish\n   11ac0:\td00000e2 \tadrp\tx2, 2f000 <__FRAME_END__+0x18e30>\n   11ac4:\t910ba273 \tadd\tx19, x19, #0x2e8\n   11ac8:\tf947d042 \tldr\tx2, [x2,#4000]\n   11acc:\tf9401263 \tldr\tx3, [x19,#32]\n   11ad0:\tf9400041 \tldr\tx1, [x2]\n   11ad4:\tca010061 \teor\tx1, x3, x1\n   11ad8:\td63f0020 \tblr\tx1\n   11adc:\tf9400bf3 \tldr\tx19, [sp,#16]\n   11ae0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   11ae4:\td65f03c0 \tret\n   11ae8:\tf90017a0 \tstr\tx0, [x29,#40]\n   11aec:\t97ffff68 \tbl\t1188c <pthread_cancel_init>\n   11af0:\tf94017a0 \tldr\tx0, [x29,#40]\n   11af4:\t17fffff3 \tb\t11ac0 <_Unwind_GetCFA+0x1c>\n\n0000000000011af8 <pthread_mutexattr_getprotocol>:\n   11af8:\tb9400002 \tldr\tw2, [x0]\n   11afc:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   11b00:\td35c7442 \tubfx\tx2, x2, #28, #2\n   11b04:\tb9000022 \tstr\tw2, [x1]\n   11b08:\td65f03c0 \tret\n\n0000000000011b0c <pthread_mutexattr_setprotocol>:\n   11b0c:\t7100083f \tcmp\tw1, #0x2\n   11b10:\t54000108 \tb.hi\t11b30 <pthread_mutexattr_setprotocol+0x24>\n   11b14:\tb9400002 \tldr\tw2, [x0]\n   11b18:\t52800003 \tmov\tw3, #0x0                   \t// #0\n   11b1c:\t12027442 \tand\tw2, w2, #0xcfffffff\n   11b20:\t2a017041 \torr\tw1, w2, w1, lsl #28\n   11b24:\tb9000001 \tstr\tw1, [x0]\n   11b28:\t2a0303e0 \tmov\tw0, w3\n   11b2c:\td65f03c0 \tret\n   11b30:\t528002c3 \tmov\tw3, #0x16                  \t// #22\n   11b34:\t2a0303e0 \tmov\tw0, w3\n   11b38:\td65f03c0 \tret\n\n0000000000011b3c <pthread_mutexattr_getprioceiling>:\n   11b3c:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   11b40:\t910003fd \tmov\tx29, sp\n   11b44:\tb9400000 \tldr\tw0, [x0]\n   11b48:\tf9000bf3 \tstr\tx19, [sp,#16]\n   11b4c:\td34c5c00 \tubfx\tx0, x0, #12, #12\n   11b50:\t350000e0 \tcbnz\tw0, 11b6c <pthread_mutexattr_getprioceiling+0x30>\n   11b54:\tf00000f3 \tadrp\tx19, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   11b58:\tb9427e60 \tldr\tw0, [x19,#636]\n   11b5c:\t3100041f \tcmn\tw0, #0x1\n   11b60:\t54000100 \tb.eq\t11b80 <pthread_mutexattr_getprioceiling+0x44>\n   11b64:\t6b1f001f \tcmp\tw0, wzr\n   11b68:\t1a9fa000 \tcsel\tw0, w0, wzr, ge\n   11b6c:\tb9000020 \tstr\tw0, [x1]\n   11b70:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   11b74:\tf9400bf3 \tldr\tx19, [sp,#16]\n   11b78:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   11b7c:\td65f03c0 \tret\n   11b80:\tf90017a1 \tstr\tx1, [x29,#40]\n   11b84:\t94000026 \tbl\t11c1c <__init_sched_fifo_prio>\n   11b88:\tb9427e60 \tldr\tw0, [x19,#636]\n   11b8c:\tf94017a1 \tldr\tx1, [x29,#40]\n   11b90:\t17fffff5 \tb\t11b64 <pthread_mutexattr_getprioceiling+0x28>\n\n0000000000011b94 <pthread_mutexattr_setprioceiling>:\n   11b94:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   11b98:\t910003fd \tmov\tx29, sp\n   11b9c:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   11ba0:\tf00000f4 \tadrp\tx20, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   11ba4:\taa0003f3 \tmov\tx19, x0\n   11ba8:\tb9427e82 \tldr\tw2, [x20,#636]\n   11bac:\t3100045f \tcmn\tw2, #0x1\n   11bb0:\t540002c0 \tb.eq\t11c08 <pthread_mutexattr_setprioceiling+0x74>\n   11bb4:\t6b02003f \tcmp\tw1, w2\n   11bb8:\t5400020b \tb.lt\t11bf8 <pthread_mutexattr_setprioceiling+0x64>\n   11bbc:\tf00000e0 \tadrp\tx0, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   11bc0:\tb9427800 \tldr\tw0, [x0,#632]\n   11bc4:\t6b00003f \tcmp\tw1, w0\n   11bc8:\t5400018c \tb.gt\t11bf8 <pthread_mutexattr_setprioceiling+0x64>\n   11bcc:\t12002c20 \tand\tw0, w1, #0xfff\n   11bd0:\t6b00003f \tcmp\tw1, w0\n   11bd4:\t54000121 \tb.ne\t11bf8 <pthread_mutexattr_setprioceiling+0x64>\n   11bd8:\tb9400262 \tldr\tw2, [x19]\n   11bdc:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   11be0:\t12084c42 \tand\tw2, w2, #0xff000fff\n   11be4:\t2a013041 \torr\tw1, w2, w1, lsl #12\n   11be8:\tb9000261 \tstr\tw1, [x19]\n   11bec:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11bf0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   11bf4:\td65f03c0 \tret\n   11bf8:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n   11bfc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11c00:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   11c04:\td65f03c0 \tret\n   11c08:\tf90017a1 \tstr\tx1, [x29,#40]\n   11c0c:\t94000004 \tbl\t11c1c <__init_sched_fifo_prio>\n   11c10:\tb9427e82 \tldr\tw2, [x20,#636]\n   11c14:\tf94017a1 \tldr\tx1, [x29,#40]\n   11c18:\t17ffffe7 \tb\t11bb4 <pthread_mutexattr_setprioceiling+0x20>\n\n0000000000011c1c <__init_sched_fifo_prio>:\n   11c1c:\ta9be7bfd \tstp\tx29, x30, [sp,#-32]!\n   11c20:\t52800020 \tmov\tw0, #0x1                   \t// #1\n   11c24:\t910003fd \tmov\tx29, sp\n   11c28:\tf9000bf3 \tstr\tx19, [sp,#16]\n   11c2c:\t97ffcd45 \tbl\t5140 <sched_get_priority_max@plt>\n   11c30:\tf00000e1 \tadrp\tx1, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   11c34:\t9109e033 \tadd\tx19, x1, #0x278\n   11c38:\tb9027820 \tstr\tw0, [x1,#632]\n   11c3c:\t52800020 \tmov\tw0, #0x1                   \t// #1\n   11c40:\td5033bbf \tdmb\tish\n   11c44:\t97ffcd7b \tbl\t5230 <sched_get_priority_min@plt>\n   11c48:\tb9000660 \tstr\tw0, [x19,#4]\n   11c4c:\tf9400bf3 \tldr\tx19, [sp,#16]\n   11c50:\ta8c27bfd \tldp\tx29, x30, [sp],#32\n   11c54:\td65f03c0 \tret\n\n0000000000011c58 <__pthread_tpp_change_priority>:\n   11c58:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n   11c5c:\t910003fd \tmov\tx29, sp\n   11c60:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n   11c64:\td53bd058 \tmrs\tx24, tpidr_el0\n   11c68:\tf90023f9 \tstr\tx25, [sp,#64]\n   11c6c:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n   11c70:\td11bc315 \tsub\tx21, x24, #0x6f0\n   11c74:\t2a0003f6 \tmov\tw22, w0\n   11c78:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   11c7c:\t2a0103f3 \tmov\tw19, w1\n   11c80:\tf9425ab4 \tldr\tx20, [x21,#1200]\n   11c84:\tb4000df4 \tcbz\tx20, 11e40 <__pthread_tpp_change_priority+0x1e8>\n   11c88:\tb9400297 \tldr\tw23, [x20]\n   11c8c:\t3100067f \tcmn\tw19, #0x1\n   11c90:\t54000640 \tb.eq\t11d58 <__pthread_tpp_change_priority+0x100>\n   11c94:\tf00000e0 \tadrp\tx0, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   11c98:\t52800164 \tmov\tw4, #0xb                   \t// #11\n   11c9c:\tb9427c01 \tldr\tw1, [x0,#636]\n   11ca0:\t4b010260 \tsub\tw0, w19, w1\n   11ca4:\t8b20ca80 \tadd\tx0, x20, w0, sxtw #2\n   11ca8:\tb9400402 \tldr\tw2, [x0,#4]\n   11cac:\t3100045f \tcmn\tw2, #0x1\n   11cb0:\t54000460 \tb.eq\t11d3c <__pthread_tpp_change_priority+0xe4>\n   11cb4:\t11000442 \tadd\tw2, w2, #0x1\n   11cb8:\t6b17027f \tcmp\tw19, w23\n   11cbc:\tb9000402 \tstr\tw2, [x0,#4]\n   11cc0:\t540004cd \tb.le\t11d58 <__pthread_tpp_change_priority+0x100>\n   11cc4:\t310006df \tcmn\tw22, #0x1\n   11cc8:\t54000680 \tb.eq\t11d98 <__pthread_tpp_change_priority+0x140>\n   11ccc:\t4b0102c2 \tsub\tw2, w22, w1\n   11cd0:\t8b22ca82 \tadd\tx2, x20, w2, sxtw #2\n   11cd4:\tb9400440 \tldr\tw0, [x2,#4]\n   11cd8:\t51000400 \tsub\tw0, w0, #0x1\n   11cdc:\tb9000440 \tstr\tw0, [x2,#4]\n   11ce0:\t350005c0 \tcbnz\tw0, 11d98 <__pthread_tpp_change_priority+0x140>\n   11ce4:\t6b1702df \tcmp\tw22, w23\n   11ce8:\t54000581 \tb.ne\t11d98 <__pthread_tpp_change_priority+0x140>\n   11cec:\t6b1302df \tcmp\tw22, w19\n   11cf0:\t5400054d \tb.le\t11d98 <__pthread_tpp_change_priority+0x140>\n   11cf4:\t510006d3 \tsub\tw19, w22, #0x1\n   11cf8:\t6b01027f \tcmp\tw19, w1\n   11cfc:\t540001ab \tb.lt\t11d30 <__pthread_tpp_change_priority+0xd8>\n   11d00:\t4b010260 \tsub\tw0, w19, w1\n   11d04:\t8b20ca80 \tadd\tx0, x20, w0, sxtw #2\n   11d08:\tb9400400 \tldr\tw0, [x0,#4]\n   11d0c:\t34000080 \tcbz\tw0, 11d1c <__pthread_tpp_change_priority+0xc4>\n   11d10:\t14000008 \tb\t11d30 <__pthread_tpp_change_priority+0xd8>\n   11d14:\tb9400400 \tldr\tw0, [x0,#4]\n   11d18:\t350000c0 \tcbnz\tw0, 11d30 <__pthread_tpp_change_priority+0xd8>\n   11d1c:\t51000673 \tsub\tw19, w19, #0x1\n   11d20:\t6b01027f \tcmp\tw19, w1\n   11d24:\t4b010260 \tsub\tw0, w19, w1\n   11d28:\t8b20ca80 \tadd\tx0, x20, w0, sxtw #2\n   11d2c:\t54ffff4a \tb.ge\t11d14 <__pthread_tpp_change_priority+0xbc>\n   11d30:\t6b17027f \tcmp\tw19, w23\n   11d34:\t54000321 \tb.ne\t11d98 <__pthread_tpp_change_priority+0x140>\n   11d38:\t52800004 \tmov\tw4, #0x0                   \t// #0\n   11d3c:\t2a0403e0 \tmov\tw0, w4\n   11d40:\tf94023f9 \tldr\tx25, [sp,#64]\n   11d44:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11d48:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   11d4c:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n   11d50:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n   11d54:\td65f03c0 \tret\n   11d58:\t310006df \tcmn\tw22, #0x1\n   11d5c:\t54fffee0 \tb.eq\t11d38 <__pthread_tpp_change_priority+0xe0>\n   11d60:\tf00000e0 \tadrp\tx0, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   11d64:\tb9427c01 \tldr\tw1, [x0,#636]\n   11d68:\t4b0102c2 \tsub\tw2, w22, w1\n   11d6c:\t8b22ca82 \tadd\tx2, x20, w2, sxtw #2\n   11d70:\tb9400440 \tldr\tw0, [x2,#4]\n   11d74:\t51000400 \tsub\tw0, w0, #0x1\n   11d78:\tb9000440 \tstr\tw0, [x2,#4]\n   11d7c:\t35fffde0 \tcbnz\tw0, 11d38 <__pthread_tpp_change_priority+0xe0>\n   11d80:\t6b1702df \tcmp\tw22, w23\n   11d84:\t54fffda1 \tb.ne\t11d38 <__pthread_tpp_change_priority+0xe0>\n   11d88:\t6b1302df \tcmp\tw22, w19\n   11d8c:\t54fffb4c \tb.gt\t11cf4 <__pthread_tpp_change_priority+0x9c>\n   11d90:\t52800004 \tmov\tw4, #0x0                   \t// #0\n   11d94:\t17ffffea \tb\t11d3c <__pthread_tpp_change_priority+0xe4>\n   11d98:\tb9005bbf \tstr\twzr, [x29,#88]\n   11d9c:\t911062b6 \tadd\tx22, x21, #0x418\n   11da0:\t52800020 \tmov\tw0, #0x1                   \t// #1\n   11da4:\t885ffec1 \tldaxr\tw1, [x22]\n   11da8:\t6b1f003f \tcmp\tw1, wzr\n   11dac:\t54000061 \tb.ne\t11db8 <__pthread_tpp_change_priority+0x160>\n   11db0:\t88027ec0 \tstxr\tw2, w0, [x22]\n   11db4:\t35ffff82 \tcbnz\tw2, 11da4 <__pthread_tpp_change_priority+0x14c>\n   11db8:\t54000080 \tb.eq\t11dc8 <__pthread_tpp_change_priority+0x170>\n   11dbc:\taa1603e0 \tmov\tx0, x22\n   11dc0:\tb9005ba1 \tstr\tw1, [x29,#88]\n   11dc4:\t97fff669 \tbl\tf768 <__lll_lock_wait_private>\n   11dc8:\tb9410ea0 \tldr\tw0, [x21,#268]\n   11dcc:\tb9000293 \tstr\tw19, [x20]\n   11dd0:\t362805c0 \ttbz\tw0, #5, 11e88 <__pthread_tpp_change_priority+0x230>\n   11dd4:\t121a0004 \tand\tw4, w0, #0x40\n   11dd8:\t363007a0 \ttbz\tw0, #6, 11ecc <__pthread_tpp_change_priority+0x274>\n   11ddc:\tb94432a0 \tldr\tw0, [x21,#1072]\n   11de0:\tb9005ba0 \tstr\tw0, [x29,#88]\n   11de4:\t6b00027f \tcmp\tw19, w0\n   11de8:\t540006cd \tb.le\t11ec0 <__pthread_tpp_change_priority+0x268>\n   11dec:\tb9005bb3 \tstr\tw19, [x29,#88]\n   11df0:\tb940d2a0 \tldr\tw0, [x21,#208]\n   11df4:\t910163a2 \tadd\tx2, x29, #0x58\n   11df8:\tb94436a1 \tldr\tw1, [x21,#1076]\n   11dfc:\t97ffcd25 \tbl\t5290 <__sched_setscheduler@plt>\n   11e00:\t37f80840 \ttbnz\tw0, #31, 11f08 <__pthread_tpp_change_priority+0x2b0>\n   11e04:\t52800014 \tmov\tw20, #0x0                   \t// #0\n   11e08:\t52800001 \tmov\tw1, #0x0                   \t// #0\n   11e0c:\t885f7ec0 \tldxr\tw0, [x22]\n   11e10:\t8802fec1 \tstlxr\tw2, w1, [x22]\n   11e14:\t35ffffc2 \tcbnz\tw2, 11e0c <__pthread_tpp_change_priority+0x1b4>\n   11e18:\t7100041f \tcmp\tw0, #0x1\n   11e1c:\t2a1403e4 \tmov\tw4, w20\n   11e20:\t54fff8ed \tb.le\t11d3c <__pthread_tpp_change_priority+0xe4>\n   11e24:\taa1603e0 \tmov\tx0, x22\n   11e28:\td2801021 \tmov\tx1, #0x81                  \t// #129\n   11e2c:\td2800022 \tmov\tx2, #0x1                   \t// #1\n   11e30:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   11e34:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n   11e38:\td4000001 \tsvc\t#0x0\n   11e3c:\t17ffffc0 \tb\t11d3c <__pthread_tpp_change_priority+0xe4>\n   11e40:\tf00000f4 \tadrp\tx20, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   11e44:\t9109e299 \tadd\tx25, x20, #0x278\n   11e48:\tb9400737 \tldr\tw23, [x25,#4]\n   11e4c:\t310006ff \tcmn\tw23, #0x1\n   11e50:\t54000720 \tb.eq\t11f34 <__pthread_tpp_change_priority+0x2dc>\n   11e54:\tb9427a82 \tldr\tw2, [x20,#632]\n   11e58:\td2800021 \tmov\tx1, #0x1                   \t// #1\n   11e5c:\td2800080 \tmov\tx0, #0x4                   \t// #4\n   11e60:\t4b170042 \tsub\tw2, w2, w23\n   11e64:\t11000442 \tadd\tw2, w2, #0x1\n   11e68:\t8b22c800 \tadd\tx0, x0, w2, sxtw #2\n   11e6c:\t97ffcca1 \tbl\t50f0 <calloc@plt>\n   11e70:\taa0003f4 \tmov\tx20, x0\n   11e74:\tb4000520 \tcbz\tx0, 11f18 <__pthread_tpp_change_priority+0x2c0>\n   11e78:\t510006f7 \tsub\tw23, w23, #0x1\n   11e7c:\tf9025aa0 \tstr\tx0, [x21,#1200]\n   11e80:\tb9000017 \tstr\tw23, [x0]\n   11e84:\t17ffff82 \tb\t11c8c <__pthread_tpp_change_priority+0x34>\n   11e88:\tb940d2a0 \tldr\tw0, [x21,#208]\n   11e8c:\t9110c2a1 \tadd\tx1, x21, #0x430\n   11e90:\t97ffcca8 \tbl\t5130 <__sched_getparam@plt>\n   11e94:\t34000320 \tcbz\tw0, 11ef8 <__pthread_tpp_change_priority+0x2a0>\n   11e98:\td00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   11e9c:\tf947c421 \tldr\tx1, [x1,#3976]\n   11ea0:\tb9410ea0 \tldr\tw0, [x21,#268]\n   11ea4:\tb8616b14 \tldr\tw20, [x24,x1]\n   11ea8:\t36300140 \ttbz\tw0, #6, 11ed0 <__pthread_tpp_change_priority+0x278>\n   11eac:\t35fffaf4 \tcbnz\tw20, 11e08 <__pthread_tpp_change_priority+0x1b0>\n   11eb0:\tb94432a0 \tldr\tw0, [x21,#1072]\n   11eb4:\tb9005ba0 \tstr\tw0, [x29,#88]\n   11eb8:\t6b00027f \tcmp\tw19, w0\n   11ebc:\t54fff98c \tb.gt\t11dec <__pthread_tpp_change_priority+0x194>\n   11ec0:\t6b17001f \tcmp\tw0, w23\n   11ec4:\t54fff96b \tb.lt\t11df0 <__pthread_tpp_change_priority+0x198>\n   11ec8:\t17ffffcf \tb\t11e04 <__pthread_tpp_change_priority+0x1ac>\n   11ecc:\t2a0403f4 \tmov\tw20, w4\n   11ed0:\tb940d2a0 \tldr\tw0, [x21,#208]\n   11ed4:\t97ffcd17 \tbl\t5330 <__sched_getscheduler@plt>\n   11ed8:\t3100041f \tcmn\tw0, #0x1\n   11edc:\tb90436a0 \tstr\tw0, [x21,#1076]\n   11ee0:\t54000200 \tb.eq\t11f20 <__pthread_tpp_change_priority+0x2c8>\n   11ee4:\tb9410ea0 \tldr\tw0, [x21,#268]\n   11ee8:\t321a0000 \torr\tw0, w0, #0x40\n   11eec:\tb9010ea0 \tstr\tw0, [x21,#268]\n   11ef0:\t35fff8d4 \tcbnz\tw20, 11e08 <__pthread_tpp_change_priority+0x1b0>\n   11ef4:\t17ffffef \tb\t11eb0 <__pthread_tpp_change_priority+0x258>\n   11ef8:\tb9410ea0 \tldr\tw0, [x21,#268]\n   11efc:\t321b0000 \torr\tw0, w0, #0x20\n   11f00:\tb9010ea0 \tstr\tw0, [x21,#268]\n   11f04:\t17ffffb4 \tb\t11dd4 <__pthread_tpp_change_priority+0x17c>\n   11f08:\td00000e0 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n   11f0c:\tf947c400 \tldr\tx0, [x0,#3976]\n   11f10:\tb8606b14 \tldr\tw20, [x24,x0]\n   11f14:\t17ffffbd \tb\t11e08 <__pthread_tpp_change_priority+0x1b0>\n   11f18:\t52800184 \tmov\tw4, #0xc                   \t// #12\n   11f1c:\t17ffff88 \tb\t11d3c <__pthread_tpp_change_priority+0xe4>\n   11f20:\td00000e0 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n   11f24:\tf947c400 \tldr\tx0, [x0,#3976]\n   11f28:\tb8606b14 \tldr\tw20, [x24,x0]\n   11f2c:\t35fff6f4 \tcbnz\tw20, 11e08 <__pthread_tpp_change_priority+0x1b0>\n   11f30:\t17ffffe0 \tb\t11eb0 <__pthread_tpp_change_priority+0x258>\n   11f34:\t52800020 \tmov\tw0, #0x1                   \t// #1\n   11f38:\t97ffcc82 \tbl\t5140 <sched_get_priority_max@plt>\n   11f3c:\tb9027a80 \tstr\tw0, [x20,#632]\n   11f40:\t52800020 \tmov\tw0, #0x1                   \t// #1\n   11f44:\td5033bbf \tdmb\tish\n   11f48:\t97ffccba \tbl\t5230 <sched_get_priority_min@plt>\n   11f4c:\t2a0003f7 \tmov\tw23, w0\n   11f50:\tb9000720 \tstr\tw0, [x25,#4]\n   11f54:\t17ffffc0 \tb\t11e54 <__pthread_tpp_change_priority+0x1fc>\n\n0000000000011f58 <__pthread_current_priority>:\n   11f58:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   11f5c:\t910003fd \tmov\tx29, sp\n   11f60:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   11f64:\td53bd053 \tmrs\tx19, tpidr_el0\n   11f68:\td11bc273 \tsub\tx19, x19, #0x6f0\n   11f6c:\tb9410e60 \tldr\tw0, [x19,#268]\n   11f70:\t121b0400 \tand\tw0, w0, #0x60\n   11f74:\t7101801f \tcmp\tw0, #0x60\n   11f78:\t540003c0 \tb.eq\t11ff0 <__pthread_current_priority+0x98>\n   11f7c:\tb9002fbf \tstr\twzr, [x29,#44]\n   11f80:\t91106274 \tadd\tx20, x19, #0x418\n   11f84:\t52800020 \tmov\tw0, #0x1                   \t// #1\n   11f88:\t885ffe81 \tldaxr\tw1, [x20]\n   11f8c:\t6b1f003f \tcmp\tw1, wzr\n   11f90:\t54000061 \tb.ne\t11f9c <__pthread_current_priority+0x44>\n   11f94:\t88027e80 \tstxr\tw2, w0, [x20]\n   11f98:\t35ffff82 \tcbnz\tw2, 11f88 <__pthread_current_priority+0x30>\n   11f9c:\t540001e1 \tb.ne\t11fd8 <__pthread_current_priority+0x80>\n   11fa0:\tb9410e60 \tldr\tw0, [x19,#268]\n   11fa4:\t36280300 \ttbz\tw0, #5, 12004 <__pthread_current_priority+0xac>\n   11fa8:\t363003e0 \ttbz\tw0, #6, 12024 <__pthread_current_priority+0xcc>\n   11fac:\tb9443264 \tldr\tw4, [x19,#1072]\n   11fb0:\t52800001 \tmov\tw1, #0x0                   \t// #0\n   11fb4:\t885f7e80 \tldxr\tw0, [x20]\n   11fb8:\t8802fe81 \tstlxr\tw2, w1, [x20]\n   11fbc:\t35ffffc2 \tcbnz\tw2, 11fb4 <__pthread_current_priority+0x5c>\n   11fc0:\t7100041f \tcmp\tw0, #0x1\n   11fc4:\t5400060c \tb.gt\t12084 <__pthread_current_priority+0x12c>\n   11fc8:\t2a0403e0 \tmov\tw0, w4\n   11fcc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11fd0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   11fd4:\td65f03c0 \tret\n   11fd8:\taa1403e0 \tmov\tx0, x20\n   11fdc:\tb9002fa1 \tstr\tw1, [x29,#44]\n   11fe0:\t97fff5e2 \tbl\tf768 <__lll_lock_wait_private>\n   11fe4:\tb9410e60 \tldr\tw0, [x19,#268]\n   11fe8:\t372ffe00 \ttbnz\tw0, #5, 11fa8 <__pthread_current_priority+0x50>\n   11fec:\t14000006 \tb\t12004 <__pthread_current_priority+0xac>\n   11ff0:\tb9443264 \tldr\tw4, [x19,#1072]\n   11ff4:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   11ff8:\t2a0403e0 \tmov\tw0, w4\n   11ffc:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   12000:\td65f03c0 \tret\n   12004:\tb940d260 \tldr\tw0, [x19,#208]\n   12008:\t9110c261 \tadd\tx1, x19, #0x430\n   1200c:\t97ffcc49 \tbl\t5130 <__sched_getparam@plt>\n   12010:\t350001e0 \tcbnz\tw0, 1204c <__pthread_current_priority+0xf4>\n   12014:\tb9410e60 \tldr\tw0, [x19,#268]\n   12018:\t321b0000 \torr\tw0, w0, #0x20\n   1201c:\tb9010e60 \tstr\tw0, [x19,#268]\n   12020:\t3737fc60 \ttbnz\tw0, #6, 11fac <__pthread_current_priority+0x54>\n   12024:\tb940d260 \tldr\tw0, [x19,#208]\n   12028:\t97ffccc2 \tbl\t5330 <__sched_getscheduler@plt>\n   1202c:\t3100041f \tcmn\tw0, #0x1\n   12030:\tb9043660 \tstr\tw0, [x19,#1076]\n   12034:\t54000100 \tb.eq\t12054 <__pthread_current_priority+0xfc>\n   12038:\tb9410e60 \tldr\tw0, [x19,#268]\n   1203c:\tb9443264 \tldr\tw4, [x19,#1072]\n   12040:\t321a0000 \torr\tw0, w0, #0x40\n   12044:\tb9010e60 \tstr\tw0, [x19,#268]\n   12048:\t17ffffda \tb\t11fb0 <__pthread_current_priority+0x58>\n   1204c:\tb9410e60 \tldr\tw0, [x19,#268]\n   12050:\t36300060 \ttbz\tw0, #6, 1205c <__pthread_current_priority+0x104>\n   12054:\t12800004 \tmov\tw4, #0xffffffff            \t// #-1\n   12058:\t17ffffd6 \tb\t11fb0 <__pthread_current_priority+0x58>\n   1205c:\tb940d260 \tldr\tw0, [x19,#208]\n   12060:\t97ffccb4 \tbl\t5330 <__sched_getscheduler@plt>\n   12064:\t3100041f \tcmn\tw0, #0x1\n   12068:\tb9043660 \tstr\tw0, [x19,#1076]\n   1206c:\t54ffff40 \tb.eq\t12054 <__pthread_current_priority+0xfc>\n   12070:\tb9410e60 \tldr\tw0, [x19,#268]\n   12074:\t12800004 \tmov\tw4, #0xffffffff            \t// #-1\n   12078:\t321a0000 \torr\tw0, w0, #0x40\n   1207c:\tb9010e60 \tstr\tw0, [x19,#268]\n   12080:\t17ffffcc \tb\t11fb0 <__pthread_current_priority+0x58>\n   12084:\taa1403e0 \tmov\tx0, x20\n   12088:\td2801021 \tmov\tx1, #0x81                  \t// #129\n   1208c:\td2800022 \tmov\tx2, #0x1                   \t// #1\n   12090:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   12094:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n   12098:\td4000001 \tsvc\t#0x0\n   1209c:\t17ffffcb \tb\t11fc8 <__pthread_current_priority+0x70>\n\n00000000000120a0 <pthread_mutex_getprioceiling>:\n   120a0:\tb9401002 \tldr\tw2, [x0,#16]\n   120a4:\t363000c2 \ttbz\tw2, #6, 120bc <pthread_mutex_getprioceiling+0x1c>\n   120a8:\tb9400002 \tldr\tw2, [x0]\n   120ac:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   120b0:\t53137c42 \tlsr\tw2, w2, #19\n   120b4:\tb9000022 \tstr\tw2, [x1]\n   120b8:\td65f03c0 \tret\n   120bc:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n   120c0:\td65f03c0 \tret\n\n00000000000120c4 <pthread_mutex_setprioceiling>:\n   120c4:\ta9bc7bfd \tstp\tx29, x30, [sp,#-64]!\n   120c8:\t910003fd \tmov\tx29, sp\n   120cc:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   120d0:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n   120d4:\taa0003f3 \tmov\tx19, x0\n   120d8:\t2a0103f4 \tmov\tw20, w1\n   120dc:\tb9401000 \tldr\tw0, [x0,#16]\n   120e0:\taa0203f5 \tmov\tx21, x2\n   120e4:\t373000c0 \ttbnz\tw0, #6, 120fc <pthread_mutex_setprioceiling+0x38>\n   120e8:\t528002c0 \tmov\tw0, #0x16                  \t// #22\n   120ec:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   120f0:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   120f4:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n   120f8:\td65f03c0 \tret\n   120fc:\td00000f6 \tadrp\tx22, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   12100:\tb9427ec0 \tldr\tw0, [x22,#636]\n   12104:\t3100041f \tcmn\tw0, #0x1\n   12108:\t54000dc0 \tb.eq\t122c0 <pthread_mutex_setprioceiling+0x1fc>\n   1210c:\t6b00029f \tcmp\tw20, w0\n   12110:\t54fffecb \tb.lt\t120e8 <pthread_mutex_setprioceiling+0x24>\n   12114:\td00000e0 \tadrp\tx0, 30000 <_GLOBAL_OFFSET_TABLE_+0x88>\n   12118:\tb9427800 \tldr\tw0, [x0,#632]\n   1211c:\t6b00029f \tcmp\tw20, w0\n   12120:\t54fffe4c \tb.gt\t120e8 <pthread_mutex_setprioceiling+0x24>\n   12124:\t12002e80 \tand\tw0, w20, #0xfff\n   12128:\t6b00029f \tcmp\tw20, w0\n   1212c:\t54fffde1 \tb.ne\t120e8 <pthread_mutex_setprioceiling+0x24>\n   12130:\td53bd040 \tmrs\tx0, tpidr_el0\n   12134:\tb9400a61 \tldr\tw1, [x19,#8]\n   12138:\td11bc000 \tsub\tx0, x0, #0x6f0\n   1213c:\tb9401262 \tldr\tw2, [x19,#16]\n   12140:\tb940d000 \tldr\tw0, [x0,#208]\n   12144:\t6b00003f \tcmp\tw1, w0\n   12148:\t54000960 \tb.eq\t12274 <pthread_mutex_setprioceiling+0x1b0>\n   1214c:\tb9400264 \tldr\tw4, [x19]\n   12150:\t120d3084 \tand\tw4, w4, #0xfff80000\n   12154:\tb9003fa4 \tstr\tw4, [x29,#60]\n   12158:\t32000086 \torr\tw6, w4, #0x1\n   1215c:\t885ffe60 \tldaxr\tw0, [x19]\n   12160:\t6b04001f \tcmp\tw0, w4\n   12164:\t54000061 \tb.ne\t12170 <pthread_mutex_setprioceiling+0xac>\n   12168:\t88017e66 \tstxr\tw1, w6, [x19]\n   1216c:\t35ffff81 \tcbnz\tw1, 1215c <pthread_mutex_setprioceiling+0x98>\n   12170:\t54000040 \tb.eq\t12178 <pthread_mutex_setprioceiling+0xb4>\n   12174:\tb9003fa0 \tstr\tw0, [x29,#60]\n   12178:\tb9403fa0 \tldr\tw0, [x29,#60]\n   1217c:\t6b00009f \tcmp\tw4, w0\n   12180:\t540009c0 \tb.eq\t122b8 <pthread_mutex_setprioceiling+0x1f4>\n   12184:\t321f0087 \torr\tw7, w4, #0x2\n   12188:\t9100f3aa \tadd\tx10, x29, #0x3c\n   1218c:\t93407ce9 \tsxtw\tx9, w7\n   12190:\tb9003fa6 \tstr\tw6, [x29,#60]\n   12194:\t2a0603e0 \tmov\tw0, w6\n   12198:\t885ffe61 \tldaxr\tw1, [x19]\n   1219c:\t6b00003f \tcmp\tw1, w0\n   121a0:\t54000061 \tb.ne\t121ac <pthread_mutex_setprioceiling+0xe8>\n   121a4:\t88027e67 \tstxr\tw2, w7, [x19]\n   121a8:\t35ffff82 \tcbnz\tw2, 12198 <pthread_mutex_setprioceiling+0xd4>\n   121ac:\t54000040 \tb.eq\t121b4 <pthread_mutex_setprioceiling+0xf0>\n   121b0:\tb9000141 \tstr\tw1, [x10]\n   121b4:\tb9403fa5 \tldr\tw5, [x29,#60]\n   121b8:\taa1303e0 \tmov\tx0, x19\n   121bc:\taa0903e2 \tmov\tx2, x9\n   121c0:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   121c4:\t120d30a1 \tand\tw1, w5, #0xfff80000\n   121c8:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n   121cc:\t6b04003f \tcmp\tw1, w4\n   121d0:\t54000261 \tb.ne\t1221c <pthread_mutex_setprioceiling+0x158>\n   121d4:\t6b05009f \tcmp\tw4, w5\n   121d8:\t540000a0 \tb.eq\t121ec <pthread_mutex_setprioceiling+0x128>\n   121dc:\tb9401261 \tldr\tw1, [x19,#16]\n   121e0:\t2a2103e1 \tmvn\tw1, w1\n   121e4:\t92790021 \tand\tx1, x1, #0x80\n   121e8:\td4000001 \tsvc\t#0x0\n   121ec:\tb9003fa4 \tstr\tw4, [x29,#60]\n   121f0:\t2a0403e0 \tmov\tw0, w4\n   121f4:\t885ffe61 \tldaxr\tw1, [x19]\n   121f8:\t6b00003f \tcmp\tw1, w0\n   121fc:\t54000061 \tb.ne\t12208 <pthread_mutex_setprioceiling+0x144>\n   12200:\t88027e67 \tstxr\tw2, w7, [x19]\n   12204:\t35ffff82 \tcbnz\tw2, 121f4 <pthread_mutex_setprioceiling+0x130>\n   12208:\t54000040 \tb.eq\t12210 <pthread_mutex_setprioceiling+0x14c>\n   1220c:\tb9000141 \tstr\tw1, [x10]\n   12210:\tb9403fa0 \tldr\tw0, [x29,#60]\n   12214:\t6b00009f \tcmp\tw4, w0\n   12218:\t54fffbc1 \tb.ne\t12190 <pthread_mutex_setprioceiling+0xcc>\n   1221c:\t53137ca5 \tlsr\tw5, w5, #19\n   12220:\tb4000075 \tcbz\tx21, 1222c <pthread_mutex_setprioceiling+0x168>\n   12224:\tb90002a5 \tstr\tw5, [x21]\n   12228:\t52800015 \tmov\tw21, #0x0                   \t// #0\n   1222c:\t2a144eb4 \torr\tw20, w21, w20, lsl #19\n   12230:\tb9000274 \tstr\tw20, [x19]\n   12234:\taa1303e0 \tmov\tx0, x19\n   12238:\tb2407be2 \tmov\tx2, #0x7fffffff            \t// #2147483647\n   1223c:\td5033bbf \tdmb\tish\n   12240:\tb9401261 \tldr\tw1, [x19,#16]\n   12244:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   12248:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n   1224c:\t12190024 \tand\tw4, w1, #0x80\n   12250:\t52801021 \tmov\tw1, #0x81                  \t// #129\n   12254:\t4a010081 \teor\tw1, w4, w1\n   12258:\t93407c21 \tsxtw\tx1, w1\n   1225c:\td4000001 \tsvc\t#0x0\n   12260:\t2a0303e0 \tmov\tw0, w3\n   12264:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   12268:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   1226c:\ta8c47bfd \tldp\tx29, x30, [sp],#64\n   12270:\td65f03c0 \tret\n   12274:\t12001842 \tand\tw2, w2, #0x7f\n   12278:\t52800460 \tmov\tw0, #0x23                  \t// #35\n   1227c:\t7101085f \tcmp\tw2, #0x42\n   12280:\t54fff360 \tb.eq\t120ec <pthread_mutex_setprioceiling+0x28>\n   12284:\t7101045f \tcmp\tw2, #0x41\n   12288:\t54fff621 \tb.ne\t1214c <pthread_mutex_setprioceiling+0x88>\n   1228c:\tb9400276 \tldr\tw22, [x19]\n   12290:\t2a1403e1 \tmov\tw1, w20\n   12294:\t53137ed6 \tlsr\tw22, w22, #19\n   12298:\t2a1603e0 \tmov\tw0, w22\n   1229c:\t97fffe6f \tbl\t11c58 <__pthread_tpp_change_priority>\n   122a0:\t35fff260 \tcbnz\tw0, 120ec <pthread_mutex_setprioceiling+0x28>\n   122a4:\tb4000055 \tcbz\tx21, 122ac <pthread_mutex_setprioceiling+0x1e8>\n   122a8:\tb90002b6 \tstr\tw22, [x21]\n   122ac:\tb9400275 \tldr\tw21, [x19]\n   122b0:\t12004ab5 \tand\tw21, w21, #0x7ffff\n   122b4:\t17ffffde \tb\t1222c <pthread_mutex_setprioceiling+0x168>\n   122b8:\t2a0403e5 \tmov\tw5, w4\n   122bc:\t17ffffd8 \tb\t1221c <pthread_mutex_setprioceiling+0x158>\n   122c0:\t97fffe57 \tbl\t11c1c <__init_sched_fifo_prio>\n   122c4:\tb9427ec0 \tldr\tw0, [x22,#636]\n   122c8:\t17ffff91 \tb\t1210c <pthread_mutex_setprioceiling+0x48>\n\n00000000000122cc <pthread_setname_np>:\n   122cc:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n   122d0:\t910003fd \tmov\tx29, sp\n   122d4:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n   122d8:\taa0003f5 \tmov\tx21, x0\n   122dc:\taa0103e0 \tmov\tx0, x1\n   122e0:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   122e4:\tf9001bf7 \tstr\tx23, [sp,#48]\n   122e8:\taa0103f4 \tmov\tx20, x1\n   122ec:\t97ffcb25 \tbl\t4f80 <strlen@plt>\n   122f0:\tf1003c1f \tcmp\tx0, #0xf\n   122f4:\taa0003f3 \tmov\tx19, x0\n   122f8:\t52800440 \tmov\tw0, #0x22                  \t// #34\n   122fc:\t540000c9 \tb.ls\t12314 <pthread_setname_np+0x48>\n   12300:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   12304:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   12308:\tf9401bf7 \tldr\tx23, [sp,#48]\n   1230c:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n   12310:\td65f03c0 \tret\n   12314:\td53bd056 \tmrs\tx22, tpidr_el0\n   12318:\td11bc2c0 \tsub\tx0, x22, #0x6f0\n   1231c:\teb0002bf \tcmp\tx21, x0\n   12320:\t540004e0 \tb.eq\t123bc <pthread_setname_np+0xf0>\n   12324:\tb940d2a2 \tldr\tw2, [x21,#208]\n   12328:\t90000001 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n   1232c:\t910103a0 \tadd\tx0, x29, #0x40\n   12330:\t9137c021 \tadd\tx1, x1, #0xdf0\n   12334:\taa0003f5 \tmov\tx21, x0\n   12338:\t97ffcb3a \tbl\t5020 <sprintf@plt>\n   1233c:\taa1503e0 \tmov\tx0, x21\n   12340:\t52800041 \tmov\tw1, #0x2                   \t// #2\n   12344:\t97fff8f8 \tbl\t10724 <__open_nocancel>\n   12348:\t3100041f \tcmn\tw0, #0x1\n   1234c:\t2a0003f5 \tmov\tw21, w0\n   12350:\t540003e0 \tb.eq\t123cc <pthread_setname_np+0x100>\n   12354:\tb00000f7 \tadrp\tx23, 2f000 <__FRAME_END__+0x18e30>\n   12358:\tf947c6f7 \tldr\tx23, [x23,#3976]\n   1235c:\t14000004 \tb\t1236c <pthread_setname_np+0xa0>\n   12360:\tb8776ac3 \tldr\tw3, [x22,x23]\n   12364:\t7100107f \tcmp\tw3, #0x4\n   12368:\t54000181 \tb.ne\t12398 <pthread_setname_np+0xcc>\n   1236c:\t2a1503e0 \tmov\tw0, w21\n   12370:\taa1403e1 \tmov\tx1, x20\n   12374:\taa1303e2 \tmov\tx2, x19\n   12378:\t97fff61e \tbl\tfbf0 <__write_nocancel>\n   1237c:\t93407c00 \tsxtw\tx0, w0\n   12380:\tb100041f \tcmn\tx0, #0x1\n   12384:\t54fffee0 \tb.eq\t12360 <pthread_setname_np+0x94>\n   12388:\tb7f802a0 \ttbnz\tx0, #63, 123dc <pthread_setname_np+0x110>\n   1238c:\teb13001f \tcmp\tx0, x19\n   12390:\t528000a3 \tmov\tw3, #0x5                   \t// #5\n   12394:\t1a8303e3 \tcsel\tw3, wzr, w3, eq\n   12398:\t93407ea0 \tsxtw\tx0, w21\n   1239c:\td2800728 \tmov\tx8, #0x39                  \t// #57\n   123a0:\td4000001 \tsvc\t#0x0\n   123a4:\t2a0303e0 \tmov\tw0, w3\n   123a8:\tf9401bf7 \tldr\tx23, [sp,#48]\n   123ac:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   123b0:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   123b4:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n   123b8:\td65f03c0 \tret\n   123bc:\t528001e0 \tmov\tw0, #0xf                   \t// #15\n   123c0:\taa1403e1 \tmov\tx1, x20\n   123c4:\t97ffcbef \tbl\t5380 <prctl@plt>\n   123c8:\t34fff9c0 \tcbz\tw0, 12300 <pthread_setname_np+0x34>\n   123cc:\tb00000e0 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n   123d0:\tf947c400 \tldr\tx0, [x0,#3976]\n   123d4:\tb8606ac0 \tldr\tw0, [x22,x0]\n   123d8:\t17ffffca \tb\t12300 <pthread_setname_np+0x34>\n   123dc:\tb00000e0 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n   123e0:\tf947c400 \tldr\tx0, [x0,#3976]\n   123e4:\tb8606ac3 \tldr\tw3, [x22,x0]\n   123e8:\t17ffffec \tb\t12398 <pthread_setname_np+0xcc>\n\n00000000000123ec <pthread_getname_np>:\n   123ec:\ta9ba7bfd \tstp\tx29, x30, [sp,#-96]!\n   123f0:\tf1003c5f \tcmp\tx2, #0xf\n   123f4:\taa0003e3 \tmov\tx3, x0\n   123f8:\t910003fd \tmov\tx29, sp\n   123fc:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   12400:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n   12404:\tf9001bf7 \tstr\tx23, [sp,#48]\n   12408:\taa0103f4 \tmov\tx20, x1\n   1240c:\t52800440 \tmov\tw0, #0x22                  \t// #34\n   12410:\t540000c8 \tb.hi\t12428 <pthread_getname_np+0x3c>\n   12414:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   12418:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   1241c:\tf9401bf7 \tldr\tx23, [sp,#48]\n   12420:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n   12424:\td65f03c0 \tret\n   12428:\td53bd056 \tmrs\tx22, tpidr_el0\n   1242c:\taa0203f3 \tmov\tx19, x2\n   12430:\td11bc2c0 \tsub\tx0, x22, #0x6f0\n   12434:\teb00007f \tcmp\tx3, x0\n   12438:\t54000580 \tb.eq\t124e8 <pthread_getname_np+0xfc>\n   1243c:\t910103b5 \tadd\tx21, x29, #0x40\n   12440:\tb940d062 \tldr\tw2, [x3,#208]\n   12444:\t90000001 \tadrp\tx1, 12000 <__pthread_current_priority+0xa8>\n   12448:\taa1503e0 \tmov\tx0, x21\n   1244c:\t9137c021 \tadd\tx1, x1, #0xdf0\n   12450:\t97ffcaf4 \tbl\t5020 <sprintf@plt>\n   12454:\taa1503e0 \tmov\tx0, x21\n   12458:\t52800001 \tmov\tw1, #0x0                   \t// #0\n   1245c:\t97fff8b2 \tbl\t10724 <__open_nocancel>\n   12460:\t3100041f \tcmn\tw0, #0x1\n   12464:\t2a0003f5 \tmov\tw21, w0\n   12468:\t54000460 \tb.eq\t124f4 <pthread_getname_np+0x108>\n   1246c:\tb00000f7 \tadrp\tx23, 2f000 <__FRAME_END__+0x18e30>\n   12470:\tf947c6f7 \tldr\tx23, [x23,#3976]\n   12474:\t14000004 \tb\t12484 <pthread_getname_np+0x98>\n   12478:\tb8776ac3 \tldr\tw3, [x22,x23]\n   1247c:\t7100107f \tcmp\tw3, #0x4\n   12480:\t54000221 \tb.ne\t124c4 <pthread_getname_np+0xd8>\n   12484:\t2a1503e0 \tmov\tw0, w21\n   12488:\taa1403e1 \tmov\tx1, x20\n   1248c:\taa1303e2 \tmov\tx2, x19\n   12490:\t97fff5f4 \tbl\tfc60 <__read_nocancel>\n   12494:\t93407c03 \tsxtw\tx3, w0\n   12498:\tb100047f \tcmn\tx3, #0x1\n   1249c:\t54fffee0 \tb.eq\t12478 <pthread_getname_np+0x8c>\n   124a0:\tb7f803c3 \ttbnz\tx3, #63, 12518 <pthread_getname_np+0x12c>\n   124a4:\td1000460 \tsub\tx0, x3, #0x1\n   124a8:\t38606a81 \tldrb\tw1, [x20,x0]\n   124ac:\t7100283f \tcmp\tw1, #0xa\n   124b0:\t540002a0 \tb.eq\t12504 <pthread_getname_np+0x118>\n   124b4:\teb03027f \tcmp\tx19, x3\n   124b8:\t540002c0 \tb.eq\t12510 <pthread_getname_np+0x124>\n   124bc:\t38236a9f \tstrb\twzr, [x20,x3]\n   124c0:\t52800003 \tmov\tw3, #0x0                   \t// #0\n   124c4:\t93407ea0 \tsxtw\tx0, w21\n   124c8:\td2800728 \tmov\tx8, #0x39                  \t// #57\n   124cc:\td4000001 \tsvc\t#0x0\n   124d0:\t2a0303e0 \tmov\tw0, w3\n   124d4:\tf9401bf7 \tldr\tx23, [sp,#48]\n   124d8:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   124dc:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   124e0:\ta8c67bfd \tldp\tx29, x30, [sp],#96\n   124e4:\td65f03c0 \tret\n   124e8:\t52800200 \tmov\tw0, #0x10                  \t// #16\n   124ec:\t97ffcba5 \tbl\t5380 <prctl@plt>\n   124f0:\t34fff920 \tcbz\tw0, 12414 <pthread_getname_np+0x28>\n   124f4:\tb00000e0 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n   124f8:\tf947c400 \tldr\tx0, [x0,#3976]\n   124fc:\tb8606ac0 \tldr\tw0, [x22,x0]\n   12500:\t17ffffc5 \tb\t12414 <pthread_getname_np+0x28>\n   12504:\t38206a9f \tstrb\twzr, [x20,x0]\n   12508:\t52800003 \tmov\tw3, #0x0                   \t// #0\n   1250c:\t17ffffee \tb\t124c4 <pthread_getname_np+0xd8>\n   12510:\t52800443 \tmov\tw3, #0x22                  \t// #34\n   12514:\t17ffffec \tb\t124c4 <pthread_getname_np+0xd8>\n   12518:\tb00000e0 \tadrp\tx0, 2f000 <__FRAME_END__+0x18e30>\n   1251c:\tf947c400 \tldr\tx0, [x0,#3976]\n   12520:\tb8606ac3 \tldr\tw3, [x22,x0]\n   12524:\t17ffffe8 \tb\t124c4 <pthread_getname_np+0xd8>\n\n0000000000012528 <pthread_setattr_default_np>:\n   12528:\ta9b87bfd \tstp\tx29, x30, [sp,#-128]!\n   1252c:\t910003fd \tmov\tx29, sp\n   12530:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   12534:\tb9400413 \tldr\tw19, [x0,#4]\n   12538:\ta9025bf5 \tstp\tx21, x22, [sp,#32]\n   1253c:\ta90363f7 \tstp\tx23, x24, [sp,#48]\n   12540:\ta9046bf9 \tstp\tx25, x26, [sp,#64]\n   12544:\ta90573fb \tstp\tx27, x28, [sp,#80]\n   12548:\t71000a7f \tcmp\tw19, #0x2\n   1254c:\tfd0033e8 \tstr\td8, [sp,#96]\n   12550:\t54000188 \tb.hi\t12580 <pthread_setattr_default_np+0x58>\n   12554:\tb9400015 \tldr\tw21, [x0]\n   12558:\taa0003f4 \tmov\tx20, x0\n   1255c:\t6b1f02bf \tcmp\tw21, wzr\n   12560:\t540002cd \tb.le\t125b8 <pthread_setattr_default_np+0x90>\n   12564:\t2a1303e0 \tmov\tw0, w19\n   12568:\t97ffcb06 \tbl\t5180 <__sched_get_priority_min@plt>\n   1256c:\t2a0003f6 \tmov\tw22, w0\n   12570:\t2a1303e0 \tmov\tw0, w19\n   12574:\t97ffcb77 \tbl\t5350 <__sched_get_priority_max@plt>\n   12578:\t37f80056 \ttbnz\tw22, #31, 12580 <pthread_setattr_default_np+0x58>\n   1257c:\t36f80160 \ttbz\tw0, #31, 125a8 <pthread_setattr_default_np+0x80>\n   12580:\t528002c4 \tmov\tw4, #0x16                  \t// #22\n   12584:\t2a0403e0 \tmov\tw0, w4\n   12588:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   1258c:\ta9425bf5 \tldp\tx21, x22, [sp,#32]\n   12590:\ta94363f7 \tldp\tx23, x24, [sp,#48]\n   12594:\ta9446bf9 \tldp\tx25, x26, [sp,#64]\n   12598:\ta94573fb \tldp\tx27, x28, [sp,#80]\n   1259c:\tfd4033e8 \tldr\td8, [sp,#96]\n   125a0:\ta8c87bfd \tldp\tx29, x30, [sp],#128\n   125a4:\td65f03c0 \tret\n   125a8:\t6b1602bf \tcmp\tw21, w22\n   125ac:\t54fffeab \tb.lt\t12580 <pthread_setattr_default_np+0x58>\n   125b0:\t6b0002bf \tcmp\tw21, w0\n   125b4:\t54fffe6c \tb.gt\t12580 <pthread_setattr_default_np+0x58>\n   125b8:\td0000116 \tadrp\tx22, 34000 <__GI___pthread_keys+0x3d78>\n   125bc:\tf9401695 \tldr\tx21, [x20,#40]\n   125c0:\tf9401a93 \tldr\tx19, [x20,#48]\n   125c4:\tf941d6c1 \tldr\tx1, [x22,#936]\n   125c8:\tb40009c1 \tcbz\tx1, 12700 <pthread_setattr_default_np+0x1d8>\n   125cc:\teb01027f \tcmp\tx19, x1\n   125d0:\t54000129 \tb.ls\t125f4 <pthread_setattr_default_np+0xcc>\n   125d4:\t38616aa0 \tldrb\tw0, [x21,x1]\n   125d8:\t34000080 \tcbz\tw0, 125e8 <pthread_setattr_default_np+0xc0>\n   125dc:\t17ffffe9 \tb\t12580 <pthread_setattr_default_np+0x58>\n   125e0:\t38616aa2 \tldrb\tw2, [x21,x1]\n   125e4:\t35fffce2 \tcbnz\tw2, 12580 <pthread_setattr_default_np+0x58>\n   125e8:\t91000421 \tadd\tx1, x1, #0x1\n   125ec:\teb01027f \tcmp\tx19, x1\n   125f0:\t54ffff88 \tb.hi\t125e0 <pthread_setattr_default_np+0xb8>\n   125f4:\tf9401295 \tldr\tx21, [x20,#32]\n   125f8:\tb27f3fe0 \tmov\tx0, #0x1fffe               \t// #131070\n   125fc:\td10006a1 \tsub\tx1, x21, #0x1\n   12600:\teb00003f \tcmp\tx1, x0\n   12604:\t54fffbe9 \tb.ls\t12580 <pthread_setattr_default_np+0x58>\n   12608:\tb9400a93 \tldr\tw19, [x20,#8]\n   1260c:\t121d0260 \tand\tw0, w19, #0x8\n   12610:\t371ffb93 \ttbnz\tw19, #3, 12580 <pthread_setattr_default_np+0x58>\n   12614:\tb9007fa0 \tstr\tw0, [x29,#124]\n   12618:\td0000116 \tadrp\tx22, 34000 <__GI___pthread_keys+0x3d78>\n   1261c:\tb9400280 \tldr\tw0, [x20]\n   12620:\t52800021 \tmov\tw1, #0x1                   \t// #1\n   12624:\tb940069c \tldr\tw28, [x20,#4]\n   12628:\tf9400a9b \tldr\tx27, [x20,#16]\n   1262c:\tf9400e9a \tldr\tx26, [x20,#24]\n   12630:\tf9401699 \tldr\tx25, [x20,#40]\n   12634:\tf9401a97 \tldr\tx23, [x20,#48]\n   12638:\t1e270008 \tfmov\ts8, w0\n   1263c:\t910a22c0 \tadd\tx0, x22, #0x288\n   12640:\t885ffc02 \tldaxr\tw2, [x0]\n   12644:\t6b1f005f \tcmp\tw2, wzr\n   12648:\t54000061 \tb.ne\t12654 <pthread_setattr_default_np+0x12c>\n   1264c:\t88037c01 \tstxr\tw3, w1, [x0]\n   12650:\t35ffff83 \tcbnz\tw3, 12640 <pthread_setattr_default_np+0x118>\n   12654:\t54000060 \tb.eq\t12660 <pthread_setattr_default_np+0x138>\n   12658:\tb9007fa2 \tstr\tw2, [x29,#124]\n   1265c:\t97fff443 \tbl\tf768 <__lll_lock_wait_private>\n   12660:\td0000118 \tadrp\tx24, 34000 <__GI___pthread_keys+0x3d78>\n   12664:\t910cc300 \tadd\tx0, x24, #0x330\n   12668:\tb40005d7 \tcbz\tx23, 12720 <pthread_setattr_default_np+0x1f8>\n   1266c:\tf9401801 \tldr\tx1, [x0,#48]\n   12670:\teb17003f \tcmp\tx1, x23\n   12674:\t540005c0 \tb.eq\t1272c <pthread_setattr_default_np+0x204>\n   12678:\tf9401400 \tldr\tx0, [x0,#40]\n   1267c:\taa1703e1 \tmov\tx1, x23\n   12680:\t97ffcaa4 \tbl\t5110 <realloc@plt>\n   12684:\taa0003f9 \tmov\tx25, x0\n   12688:\tb40005e0 \tcbz\tx0, 12744 <pthread_setattr_default_np+0x21c>\n   1268c:\tf9401681 \tldr\tx1, [x20,#40]\n   12690:\taa1703e2 \tmov\tx2, x23\n   12694:\t97ffca33 \tbl\t4f60 <memcpy@plt>\n   12698:\tb5000075 \tcbnz\tx21, 126a4 <pthread_setattr_default_np+0x17c>\n   1269c:\t910cc300 \tadd\tx0, x24, #0x330\n   126a0:\tf9401015 \tldr\tx21, [x0,#32]\n   126a4:\t910cc303 \tadd\tx3, x24, #0x330\n   126a8:\tbd033308 \tstr\ts8, [x24,#816]\n   126ac:\t52800004 \tmov\tw4, #0x0                   \t// #0\n   126b0:\tb900047c \tstr\tw28, [x3,#4]\n   126b4:\tb9000873 \tstr\tw19, [x3,#8]\n   126b8:\tf900087b \tstr\tx27, [x3,#16]\n   126bc:\tf9000c7a \tstr\tx26, [x3,#24]\n   126c0:\tf9001075 \tstr\tx21, [x3,#32]\n   126c4:\tf9001479 \tstr\tx25, [x3,#40]\n   126c8:\tf9001877 \tstr\tx23, [x3,#48]\n   126cc:\t910a22c0 \tadd\tx0, x22, #0x288\n   126d0:\t52800002 \tmov\tw2, #0x0                   \t// #0\n   126d4:\t885f7c01 \tldxr\tw1, [x0]\n   126d8:\t8803fc02 \tstlxr\tw3, w2, [x0]\n   126dc:\t35ffffc3 \tcbnz\tw3, 126d4 <pthread_setattr_default_np+0x1ac>\n   126e0:\t7100043f \tcmp\tw1, #0x1\n   126e4:\t54fff50d \tb.le\t12584 <pthread_setattr_default_np+0x5c>\n   126e8:\td2801021 \tmov\tx1, #0x81                  \t// #129\n   126ec:\td2800022 \tmov\tx2, #0x1                   \t// #1\n   126f0:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   126f4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n   126f8:\td4000001 \tsvc\t#0x0\n   126fc:\t17ffffa2 \tb\t12584 <pthread_setattr_default_np+0x5c>\n   12700:\td53bd040 \tmrs\tx0, tpidr_el0\n   12704:\td11bc000 \tsub\tx0, x0, #0x6f0\n   12708:\tb940d000 \tldr\tw0, [x0,#208]\n   1270c:\t97fffb6e \tbl\t114c4 <__determine_cpumask_size>\n   12710:\t2a0003e4 \tmov\tw4, w0\n   12714:\t35fff380 \tcbnz\tw0, 12584 <pthread_setattr_default_np+0x5c>\n   12718:\tf941d6c1 \tldr\tx1, [x22,#936]\n   1271c:\t17ffffac \tb\t125cc <pthread_setattr_default_np+0xa4>\n   12720:\tf9401400 \tldr\tx0, [x0,#40]\n   12724:\t97ffcabf \tbl\t5220 <free@plt>\n   12728:\t17ffffdc \tb\t12698 <pthread_setattr_default_np+0x170>\n   1272c:\tf9401419 \tldr\tx25, [x0,#40]\n   12730:\taa1703e2 \tmov\tx2, x23\n   12734:\tf9401681 \tldr\tx1, [x20,#40]\n   12738:\taa1903e0 \tmov\tx0, x25\n   1273c:\t97ffca09 \tbl\t4f60 <memcpy@plt>\n   12740:\t17ffffd6 \tb\t12698 <pthread_setattr_default_np+0x170>\n   12744:\t52800184 \tmov\tw4, #0xc                   \t// #12\n   12748:\t17ffffe1 \tb\t126cc <pthread_setattr_default_np+0x1a4>\n\n000000000001274c <pthread_getattr_default_np>:\n   1274c:\ta9bd7bfd \tstp\tx29, x30, [sp,#-48]!\n   12750:\t52800021 \tmov\tw1, #0x1                   \t// #1\n   12754:\t910003fd \tmov\tx29, sp\n   12758:\ta90153f3 \tstp\tx19, x20, [sp,#16]\n   1275c:\td0000113 \tadrp\tx19, 34000 <__GI___pthread_keys+0x3d78>\n   12760:\taa0003f4 \tmov\tx20, x0\n   12764:\tb9002fbf \tstr\twzr, [x29,#44]\n   12768:\t910a2260 \tadd\tx0, x19, #0x288\n   1276c:\t885ffc02 \tldaxr\tw2, [x0]\n   12770:\t6b1f005f \tcmp\tw2, wzr\n   12774:\t54000061 \tb.ne\t12780 <pthread_getattr_default_np+0x34>\n   12778:\t88037c01 \tstxr\tw3, w1, [x0]\n   1277c:\t35ffff83 \tcbnz\tw3, 1276c <pthread_getattr_default_np+0x20>\n   12780:\t540002c1 \tb.ne\t127d8 <pthread_getattr_default_np+0x8c>\n   12784:\td0000101 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n   12788:\t910a2262 \tadd\tx2, x19, #0x288\n   1278c:\t910cc021 \tadd\tx1, x1, #0x330\n   12790:\ta9401424 \tldp\tx4, x5, [x1]\n   12794:\ta9001684 \tstp\tx4, x5, [x20]\n   12798:\ta9411424 \tldp\tx4, x5, [x1,#16]\n   1279c:\ta9011684 \tstp\tx4, x5, [x20,#16]\n   127a0:\ta9421424 \tldp\tx4, x5, [x1,#32]\n   127a4:\ta9021684 \tstp\tx4, x5, [x20,#32]\n   127a8:\tf9401820 \tldr\tx0, [x1,#48]\n   127ac:\t52800001 \tmov\tw1, #0x0                   \t// #0\n   127b0:\tf9001a80 \tstr\tx0, [x20,#48]\n   127b4:\t885f7c40 \tldxr\tw0, [x2]\n   127b8:\t8803fc41 \tstlxr\tw3, w1, [x2]\n   127bc:\t35ffffc3 \tcbnz\tw3, 127b4 <pthread_getattr_default_np+0x68>\n   127c0:\t7100041f \tcmp\tw0, #0x1\n   127c4:\t5400010c \tb.gt\t127e4 <pthread_getattr_default_np+0x98>\n   127c8:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   127cc:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   127d0:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   127d4:\td65f03c0 \tret\n   127d8:\tb9002fa2 \tstr\tw2, [x29,#44]\n   127dc:\t97fff3e3 \tbl\tf768 <__lll_lock_wait_private>\n   127e0:\t17ffffe9 \tb\t12784 <pthread_getattr_default_np+0x38>\n   127e4:\taa0203e0 \tmov\tx0, x2\n   127e8:\td2801021 \tmov\tx1, #0x81                  \t// #129\n   127ec:\td2800022 \tmov\tx2, #0x1                   \t// #1\n   127f0:\td2800003 \tmov\tx3, #0x0                   \t// #0\n   127f4:\td2800c48 \tmov\tx8, #0x62                  \t// #98\n   127f8:\td4000001 \tsvc\t#0x0\n   127fc:\t52800000 \tmov\tw0, #0x0                   \t// #0\n   12800:\ta94153f3 \tldp\tx19, x20, [sp,#16]\n   12804:\ta8c37bfd \tldp\tx29, x30, [sp],#48\n   12808:\td65f03c0 \tret\n\n000000000001280c <__errno_location>:\n   1280c:\tb00000e1 \tadrp\tx1, 2f000 <__FRAME_END__+0x18e30>\n   12810:\tf947c421 \tldr\tx1, [x1,#3976]\n   12814:\td53bd040 \tmrs\tx0, tpidr_el0\n   12818:\t8b010000 \tadd\tx0, x0, x1\n   1281c:\td65f03c0 \tret\n\nDisassembly of section __libc_freeres_fn:\n\n0000000000012820 <nptl_freeres>:\n   12820:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n   12824:\t910003fd \tmov\tx29, sp\n   12828:\t94000004 \tbl\t12838 <__unwind_freeres>\n   1282c:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n   12830:\td2800000 \tmov\tx0, #0x0                   \t// #0\n   12834:\t17ffccdb \tb\t5ba0 <__free_stacks>\n\n0000000000012838 <__unwind_freeres>:\n   12838:\td0000101 \tadrp\tx1, 34000 <__GI___pthread_keys+0x3d78>\n   1283c:\tf9417420 \tldr\tx0, [x1,#744]\n   12840:\tb4000060 \tcbz\tx0, 1284c <__unwind_freeres+0x14>\n   12844:\tf901743f \tstr\txzr, [x1,#744]\n   12848:\t17ffc9e6 \tb\t4fe0 <__libc_dlclose@plt>\n   1284c:\td65f03c0 \tret\n\nDisassembly of section .fini:\n\n0000000000012850 <_fini>:\n   12850:\ta9bf7bfd \tstp\tx29, x30, [sp,#-16]!\n   12854:\t910003fd \tmov\tx29, sp\n   12858:\ta8c17bfd \tldp\tx29, x30, [sp],#16\n   1285c:\td65f03c0 \tret\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/proccontrol/src/int_thread_db.C": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n *\n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n *\n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n#include \"common/src/Types.h\"\n#include \"int_thread_db.h\"\n\n\n#include <cassert>\n#include <cerrno>\n#include <cstdarg>\n#include <cstring>\n#include <set>\n#include <dlfcn.h>\n#include <iostream>\n\n#include \"common/src/dthread.h\"\n#include \"common/h/SymReader.h\"\n#include \"int_event.h\"\n#include \"Mailbox.h\"\n\n#include \"boost/filesystem.hpp\"\n\nusing namespace std;\n\n#if defined(cap_thread_db)\n\n/*\n * proc_service interface implementation, needed by libthread_db\n */\n\nps_err_e ps_pglobal_lookup(struct ps_prochandle *handle, const char *objName,\n        const char *symName, psaddr_t *symbolAddr)\n{\n    pthrd_printf(\"Looking up symbol %s in %s\\n\", symName, objName);\n    return handle->thread_db_proc->getSymbolAddr(objName, symName, symbolAddr);\n}\n\nps_err_e ps_pread(struct ps_prochandle *handle, psaddr_t remote, void *local, size_t size) {\n   thread_db_process *llproc = handle->thread_db_proc;\n   pthrd_printf(\"thread_db reading from %#lx to %#lx, size = %d on %d\\n\",\n                (unsigned long)remote, (unsigned long)local, (int)size, llproc->getPid());\n\n   llproc->resps.clear();\n   async_ret_t result = llproc->getMemCache()->readMemory(local, (Address) remote, size,\n                                                          llproc->resps,\n                                                          llproc->triggerThread());\n\n\n   switch (result) {\n      case aret_success:\n         llproc->hasAsyncPending = false;\n         return PS_OK;\n      case aret_async:\n         llproc->hasAsyncPending = true;\n         pthrd_printf(\"Incomplete async read in thread_db read\\n\");\n         return PS_ERR;\n      case aret_error:\n         llproc->hasAsyncPending = false;\n         pthrd_printf(\"Unexpected read error in thread_db read\\n\");\n         return PS_ERR;\n   }\n   assert(0);\n   return PS_ERR;\n}\n\nps_err_e ps_pdread(struct ps_prochandle *handle, psaddr_t remote, void *local, size_t size) {\n   return ps_pread(handle, remote, local, size);\n}\n\nps_err_e ps_ptread(struct ps_prochandle *handle, psaddr_t remote, void *local, size_t size) {\n   return ps_pread(handle, remote, local, size);\n}\n\nps_err_e ps_pwrite(struct ps_prochandle *handle, psaddr_t remote, const void *local, size_t size) {\n    pthrd_printf(\"thread_db writing to %#lx from %#lx, size = %d on %d\\n\",\n            (unsigned long)remote, (unsigned long)local, (int)size, handle->thread_db_proc->getPid());\n\n    thread_db_process *proc = handle->thread_db_proc;\n\n    async_ret_t result = proc->getMemCache()->writeMemory((Address) remote,\n                                                          const_cast<void *>(local),\n                                                          size,\n                                                          proc->res_resps,\n                                                          proc->triggerThread());\n    switch (result) {\n      case aret_success:\n         proc->hasAsyncPending = false;\n         return PS_OK;\n      case aret_async:\n         proc->hasAsyncPending = true;\n         pthrd_printf(\"Incomplete async write in thread_db write\\n\");\n         return PS_ERR;\n      case aret_error:\n         proc->hasAsyncPending = false;\n         pthrd_printf(\"Unexpected read error in thread_db write\\n\");\n         return PS_ERR;\n    }\n    assert(0);\n    return PS_ERR;\n}\n\nps_err_e ps_pdwrite(struct ps_prochandle *handle, psaddr_t remote, const void *local, size_t size) {\n   return ps_pwrite(handle, remote, local, size);\n}\n\nps_err_e ps_ptwrite(struct ps_prochandle *handle, psaddr_t remote, const void *local, size_t size) {\n   return ps_pwrite(handle, remote, local, size);\n}\n\nps_err_e ps_linfo(struct ps_prochandle *handle, lwpid_t lwp, void *lwpInfo) {\n   if( !handle->thread_db_proc->plat_getLWPInfo(lwp, lwpInfo) ) {\n      pthrd_printf(\"thread_db called ps_linfo, returning error\\n\");\n      return PS_ERR;\n   }\n   pthrd_printf(\"thread_db called ps_linfo, returning info\\n\");\n   return PS_OK;\n}\n\nps_err_e ps_lstop(struct ps_prochandle *handle, lwpid_t lwp) {\n   int_process *proc = handle->thread_db_proc;\n   int_threadPool *tp = proc->threadPool();\n   assert(tp);\n   int_thread *thr = tp->findThreadByLWP((Dyninst::LWP) lwp);\n   if (!thr) {\n      perr_printf(\"ps_lstop is unable to find LWP %d in process %d\\n\",\n                  lwp, proc->getPid());\n      return PS_ERR;\n   }\n   pthrd_printf(\"ps_lstop on %d/%d\\n\", proc->getPid(), thr->getLWP());\n\n   if (thr->getInternalState().getState() == int_thread::stopped) {\n      return PS_OK;\n   }\n   else if (thr->getInternalState().getState() != int_thread::running) {\n      perr_printf(\"Error, ps_lstop on thread in bad state\\n\");\n      return PS_ERR;\n   }\n\n   thr->getInternalState().setState(int_thread::stopped);\n\n   return PS_OK;\n}\n\nps_err_e ps_lcontinue(struct ps_prochandle *handle, lwpid_t lwp) {\n   int_process *proc = handle->thread_db_proc;\n   int_threadPool *tp = proc->threadPool();\n   assert(tp);\n   int_thread *thr = tp->findThreadByLWP((Dyninst::LWP) lwp);\n   if (!thr) {\n      perr_printf(\"ps_lcontinue is unable to find LWP %d in process %d\\n\",\n                  lwp, proc->getPid());\n      return PS_ERR;\n   }\n   pthrd_printf(\"ps_lcontinue on %d/%d\\n\", proc->getPid(), thr->getLWP());\n\n   if (thr->getInternalState().getState() == int_thread::running) {\n      return PS_OK;\n   }\n   else if (thr->getInternalState().getState() != int_thread::stopped) {\n      perr_printf(\"Error, ps_lcontinue on thread in bad state\\n\");\n      return PS_ERR;\n   }\n\n   thr->getInternalState().setState(int_thread::stopped);\n   return PS_OK;\n}\n\nps_err_e ps_lgetregs(struct ps_prochandle *handle, lwpid_t lwp, prgregset_t regs) {\n   thread_db_process *proc = handle->thread_db_proc;\n   int_threadPool *tp = proc->threadPool();\n   assert(tp);\n   int_thread *llthr = tp->findThreadByLWP((Dyninst::LWP) lwp);\n   if (!llthr) {\n      perr_printf(\"ps_lgetregs is unable to find LWP %d in process %d\\n\",\n                  lwp, proc->getPid());\n      return PS_ERR;\n   }\n\n   thread_db_thread *thr = dynamic_cast<thread_db_thread *>(llthr);\n\n   pthrd_printf(\"thread_db reading registers on thread %d/%d\\n\",\n                proc->getPid(), thr->getLWP());\n\n   int_registerPool pool;\n   async_ret_t result = proc->getMemCache()->getRegisters(llthr, pool);\n   if (result == aret_async) {\n      pthrd_printf(\"Async return during get reg\\n\");\n      return PS_ERR;\n   }\n   if (result == aret_error) {\n      pthrd_printf(\"Error return during get reg\\n\");\n      return PS_ERR;\n   }\n\n   bool bresult = thr->plat_convertToSystemRegs(pool, (unsigned char *) regs, true);\n   if (!bresult) {\n      pthrd_printf(\"Error convering to system regs\\n\");\n      return PS_ERR;\n   }\n   return PS_OK;\n}\n\npid_t ps_getpid (struct ps_prochandle *ph)\n{\n   int pid = ph->thread_db_proc->threaddb_getPid();\n   pthrd_printf(\"thread_db called ps_getpid.  Returning %d\\n\", pid);\n   return pid;\n}\n\nvoid ps_plog(const char *format, ...) {\n   pthrd_printf(\"thread_db called ps_plog\\n\");\n    if( !dyninst_debug_proccontrol ) return;\n    if( NULL == format ) return;\n\n    va_list va;\n    va_start(va, format);\n    vfprintf(pctrl_err_out, format, va);\n    va_end(va);\n}\n\n#define NA_IMPLEMENTED \"This function is not implemented\"\n\nps_err_e ps_lgetfpregs(struct ps_prochandle *, lwpid_t, prfpregset_t *) {\n    assert(!NA_IMPLEMENTED);\n    return PS_ERR;\n}\n\nps_err_e ps_lsetfpregs(struct ps_prochandle *, lwpid_t, const prfpregset_t *) {\n    assert(!NA_IMPLEMENTED);\n    return PS_ERR;\n}\n\nps_err_e ps_lsetregs(struct ps_prochandle *, lwpid_t, const prgregset_t) {\n    assert(!NA_IMPLEMENTED);\n    return PS_ERR;\n}\n\nps_err_e ps_lgetxmmregs (struct ps_prochandle *, lwpid_t, char *) {\n    assert(!NA_IMPLEMENTED);\n    return PS_ERR;\n}\n\nps_err_e ps_lsetxmmregs (struct ps_prochandle *, lwpid_t, const char *) {\n    assert(!NA_IMPLEMENTED);\n    return PS_ERR;\n}\n\nps_err_e ps_pcontinue(struct ps_prochandle *) {\n    assert(!NA_IMPLEMENTED);\n    return PS_ERR;\n}\n\nps_err_e ps_pdmodel(struct ps_prochandle *, int *) {\n    assert(!NA_IMPLEMENTED);\n    return PS_ERR;\n}\n\nps_err_e ps_pstop(struct ps_prochandle *) {\n    assert(!NA_IMPLEMENTED);\n    return PS_ERR;\n}\n\nps_err_e ps_get_thread_area(const struct ps_prochandle *phandle, lwpid_t lwp, int val, psaddr_t *addr)\n{\n   thread_db_process *tdb_proc = phandle->thread_db_proc;\n   thread_db_thread *tdb_thread = dynamic_cast<thread_db_thread *>(tdb_proc->threadPool()->findThreadByLWP(lwp));\n\n   Dyninst::Address daddr = 0;\n   bool result = tdb_thread->thrdb_getThreadArea(val, daddr);\n   if (addr && result)\n      *addr = (psaddr_t) daddr;\n\n   pthrd_printf(\"thread_db called ps_get_thread_area.  Returning %s\\n\", result ? \"PS_OK\" : \"PS_ERR\");\n   return result ? PS_OK : PS_ERR;\n}\n\n#if defined(THREAD_DB_STATIC)\n#define TDB_BIND(SYM) \\\n   p_ ## SYM = SYM\n#else\n#define TDB_BIND(SYM) \\\n   do { \\\n     p_ ## SYM = (SYM ## _t) dlsym(libhandle, #SYM); \\\n     if (!p_ ## SYM) { \\\n       const char *errmsg = dlerror();                                       \\\n       perr_printf(\"Error looking up %s in threaddb.so: %s\\n\", #SYM, errmsg); \\\n       return false; \\\n     } \\\n   } while (0)\n#endif\n\n#if defined(THREAD_DB_PATH)\n#define THREAD_DB_PATH_STR THREAD_DB_PATH\n#else\n#define THREAD_DB_PATH_STR NULL\n#endif\n\nthread_db_process::td_init_t thread_db_process::p_td_init;\nthread_db_process::td_ta_new_t thread_db_process::p_td_ta_new;\nthread_db_process::td_ta_delete_t thread_db_process::p_td_ta_delete;\nthread_db_process::td_ta_event_addr_t thread_db_process::p_td_ta_event_addr;\nthread_db_process::td_ta_set_event_t thread_db_process::p_td_ta_set_event;\nthread_db_process::td_ta_map_lwp2thr_t thread_db_process::p_td_ta_map_lwp2thr;\nthread_db_process::td_ta_event_getmsg_t thread_db_process::p_td_ta_event_getmsg;\nthread_db_process::td_thr_get_info_t thread_db_process::p_td_thr_get_info;\nthread_db_process::td_thr_event_enable_t thread_db_process::p_td_thr_event_enable;\nthread_db_process::td_thr_set_event_t thread_db_process::p_td_thr_set_event;\nthread_db_process::td_thr_event_getmsg_t thread_db_process::p_td_thr_event_getmsg;\nthread_db_process::td_thr_dbsuspend_t thread_db_process::p_td_thr_dbsuspend;\nthread_db_process::td_thr_dbresume_t thread_db_process::p_td_thr_dbresume;\nthread_db_process::td_thr_tls_get_addr_t thread_db_process::p_td_thr_tls_get_addr;\nthread_db_process::td_thr_tlsbase_t thread_db_process::p_td_thr_tlsbase;\n\nbool thread_db_process::tdb_loaded = false;\nbool thread_db_process::tdb_loaded_result = false;\n\n#if !defined(THREAD_DB_STATIC)\nstatic void *dlopenThreadDB(char *path)\n{\n   std::string filename;\n   std::string alt_filename;\n   if (path) {\n      filename = std::string(path);\n      if (*filename.rend() != '/') {\n         filename += std::string(\"/\");\n      }\n      filename += std::string(\"libthread_db.so\");\n#if !defined(os_bg)\n      //On BG alt_filename would try to load /lib/libthread_db.so, which is\n      // for the IO node.\n      alt_filename = std::string(\"libthread_db.so\");\n#endif\n\n   }\n   else {\n      filename = std::string(\"libthread_db.so\");\n   }\n\n#if defined(os_bgq)\n   alt_filename = filename;\n   filename = std::string(\"/bgsys/drivers/ppcfloor/gnu-linux/powerpc64-bgq-linux/lib/libthread_db.so.1\");\n#endif\n\n   pthrd_printf(\"Opening thread_db with %s\\n\", filename.c_str());\n   void *libhandle = dlopen(filename.c_str(), RTLD_LAZY);\n   if (!libhandle && !alt_filename.empty()) {\n   pthrd_printf(\"Opening thread_db with %s\\n\", alt_filename.c_str());\n      libhandle = dlopen(alt_filename.c_str(), RTLD_LAZY);\n   }\n   if (!libhandle) {\n      const char *errmsg = dlerror();\n      perr_printf(\"Error loading libthread_db.so: %s\\n\", errmsg);\n      return NULL;\n   }\n   return libhandle;\n}\n\n#else\nstatic void *dlopenThreadDB(char *)\n{\n   return (void *) 0x1;  //Return anything non-NULL\n}\n#endif\n\nbool thread_db_process::loadedThreadDBLibrary()\n{\n   if (tdb_loaded)\n      return tdb_loaded_result;\n   tdb_loaded = true;\n\n   void *libhandle = dlopenThreadDB(THREAD_DB_PATH_STR);\n   if (!libhandle)\n      return false;\n\n   TDB_BIND(td_init);\n   TDB_BIND(td_ta_new);\n   TDB_BIND(td_ta_delete);\n   TDB_BIND(td_ta_event_addr);\n   TDB_BIND(td_ta_set_event);\n   TDB_BIND(td_ta_event_getmsg);\n   TDB_BIND(td_ta_map_lwp2thr);\n   TDB_BIND(td_thr_get_info);\n   TDB_BIND(td_thr_event_enable);\n   TDB_BIND(td_thr_set_event);\n   TDB_BIND(td_thr_event_getmsg);\n   TDB_BIND(td_thr_dbsuspend);\n   TDB_BIND(td_thr_dbresume);\n   TDB_BIND(td_thr_tls_get_addr);\n   TDB_BIND(td_thr_tlsbase);\n\n   pthrd_printf(\"Successfully loaded thread_db.so library\\n\");\n   tdb_loaded_result = true;\n   return true;\n}\n\n#ifndef CASE_RETURN_STR\n#define CASE_RETURN_STR(x) case x: return #x;\n#endif\n\nstatic const char *tdErr2Str(td_err_e errVal) {\n    switch(errVal) {\n        CASE_RETURN_STR(TD_ERR)\n        CASE_RETURN_STR(TD_OK)\n        CASE_RETURN_STR(TD_BADKEY)\n        CASE_RETURN_STR(TD_BADPH)\n        CASE_RETURN_STR(TD_BADSH)\n        CASE_RETURN_STR(TD_BADTA)\n        CASE_RETURN_STR(TD_BADTH)\n        CASE_RETURN_STR(TD_DBERR)\n        CASE_RETURN_STR(TD_MALLOC)\n        CASE_RETURN_STR(TD_NOAPLIC)\n        CASE_RETURN_STR(TD_NOCAPAB)\n        CASE_RETURN_STR(TD_NOEVENT)\n        CASE_RETURN_STR(TD_NOFPREGS)\n        CASE_RETURN_STR(TD_NOLIBTHREAD)\n        CASE_RETURN_STR(TD_NOLWP)\n        CASE_RETURN_STR(TD_NOMSG)\n        CASE_RETURN_STR(TD_NOSV)\n        CASE_RETURN_STR(TD_NOTHR)\n        CASE_RETURN_STR(TD_NOTSD)\n        CASE_RETURN_STR(TD_NOXREGS)\n        CASE_RETURN_STR(TD_PARTIALREG)\n        default:\n            return \"?\";\n    }\n}\n\nEvent::ptr thread_db_process::decodeThreadEvent(td_event_msg_t *eventMsg, bool &async)\n{\n   td_thrinfo_t info;\n   async = false;\n#if !defined(os_freebsd)\n   td_thrhandle_t *handle = const_cast<td_thrhandle_t *>(eventMsg->th_p);\n#else\n   td_thrhandle_t *handle = (td_thrhandle_t *)(eventMsg->th_p);\n#endif\n   pthrd_printf(\"Decoding thread event on %u\\n\", getPid());\n   async_ret_t result = ll_fetchThreadInfo(handle, &info);\n   if (result == aret_error) {\n      pthrd_printf(\"Failed to fetch thread info\\n\");\n      return Event::ptr();\n   }\n   if (result == aret_async) {\n      async = true;\n      pthrd_printf(\"Returning async from decodeThreadEvent\\n\");\n      return Event::ptr();\n   }\n   Dyninst::LWP lwp = (Dyninst::LWP) info.ti_lid;\n   int_thread *thr = threadPool()->findThreadByLWP(lwp); //thr may be NULL if OS doesn't support LWP events (BG/P)\n   switch(eventMsg->event) {\n      case TD_CREATE:\n      {\n         pthrd_printf(\"Decoded to user thread create of %d/%d\\n\", getPid(), lwp);\n\n         EventNewUserThread::ptr new_ev = EventNewUserThread::ptr(new EventNewUserThread());\n         new_ev->setProcess(proc());\n         new_ev->setThread(thr ? thr->thread() : Thread::ptr());\n         new_ev->setSyncType(Event::sync_process);\n         int_eventNewUserThread *iev = new_ev->getInternalEvent();\n\n         new_thread_data_t *thrdata = (new_thread_data_t *) malloc(sizeof(new_thread_data_t));\n         thrdata->thr_handle = new td_thrhandle_t(*handle);\n         thrdata->thr_info = info;\n         thrdata->threadHandle_alloced = true;\n\n         iev->raw_data = (void *) thrdata;\n         iev->lwp = lwp;\n\n         if (threadPool()->initialThread() == thr)\n            initialThreadEventCreated = true;\n\n         return new_ev;\n      }\n      case TD_DEATH: {\n         pthrd_printf(\"Decoded to user thread death of %d/%d\\n\", getPid(), lwp);\n         if (!thr) {\n            perr_printf(\"Error.  Got thread delete event for unknown LWP\\n\");\n            return Event::ptr();\n         }\n\n         EventUserThreadDestroy::ptr new_ev = EventUserThreadDestroy::ptr(new EventUserThreadDestroy(EventType::Pre));\n         new_ev->setProcess(proc());\n         new_ev->setThread(thr->thread());\n         new_ev->setSyncType(Event::sync_process);\n\n         return new_ev;\n      }\n      default: {\n         pthrd_printf(\"Unimplemented libthread_db event encountered. Skipping for now.\\n\");\n         break;\n      }\n   }\n\n   return Event::ptr();\n}\n\nvolatile bool thread_db_process::thread_db_initialized = false;\nMutex<> thread_db_process::thread_db_init_lock;\n\nthread_db_process::thread_db_process(Dyninst::PID p, std::string e, std::vector<std::string> envp, std::vector<std::string> a, std::map<int, int> f) :\n  int_process(p, e, a, envp, f),\n  int_threadTracking(p, e, a, envp, f),\n  thread_db_proc_initialized(false),\n  threadAgent(NULL),\n  createdThreadAgent(false),\n  self(NULL),\n  trigger_thread(NULL),\n  hasAsyncPending(false),\n  initialThreadEventCreated(false),\n  setEventSet(false),\n  completed_post(false),\n  track_threads(ThreadTracking::getDefaultTrackThreads())\n{\n   if (!loadedThreadDBLibrary())\n      return;\n   self = new ps_prochandle();\n   assert(self);\n   self->thread_db_proc = this;\n}\n\nthread_db_process::thread_db_process(Dyninst::PID pid_, int_process *p) :\n  int_process(pid_, p),\n  int_threadTracking(pid_, p),\n  thread_db_proc_initialized(false),\n  threadAgent(NULL),\n  createdThreadAgent(false),\n  self(NULL),\n  trigger_thread(NULL),\n  hasAsyncPending(false),\n  initialThreadEventCreated(false),\n  setEventSet(false),\n  completed_post(false),\n  track_threads(ThreadTracking::getDefaultTrackThreads())\n{\n   if (!loadedThreadDBLibrary())\n      return;\n   self = new ps_prochandle();\n   assert(self);\n   self->thread_db_proc = this;\n}\n\nthread_db_process::~thread_db_process()\n{\n    // Free the breakpoints allocated for events\n    map<Dyninst::Address, pair<int_breakpoint *, EventType> >::iterator brkptIter;\n    for(brkptIter = addr2Event.begin(); brkptIter != addr2Event.end(); ++brkptIter) {\n        delete brkptIter->second.first;\n    }\n\n    if (self)\n       delete self;\n}\n\nasync_ret_t thread_db_process::initThreadWithHandle(td_thrhandle_t *thr, td_thrinfo_t *info, LWP lwp)\n{\n   pthrd_printf(\"initThreadWithHandle on %d/%d\\n\", getPid(), lwp);\n\n   td_thrinfo_t tinfo;\n   if (!info) {\n      async_ret_t result = ll_fetchThreadInfo(thr, &tinfo);\n      if (result == aret_error) {\n         pthrd_printf(\"Error calling ll_fetchThreadInfo from initThreadWithHandle\\n\");\n         return aret_error;\n      }\n      if (result == aret_async) {\n         pthrd_printf(\"Returning async from initThreadWithHandle\\n\");\n         return aret_async;\n      }\n      info = &tinfo;\n   }\n\n   if (lwp == NULL_LWP) {\n      lwp = (Dyninst::LWP) info->ti_lid;\n      pthrd_printf(\"initThreadWithHandle found thread %d/%d\\n\", getPid(), lwp);\n   }\n   thread_db_thread *tdb_thread = dynamic_cast<thread_db_thread *>(threadPool()->findThreadByLWP(lwp));\n   if (!tdb_thread) {\n      perr_printf(\"Error.  Thread_db reports thread %d/%d, but couldn't find existing LWP\\n\",\n                  getPid(), lwp);\n      return aret_error;\n   }\n   if (tdb_thread->thread_initialized) {\n      return aret_success;\n   }\n   pthrd_printf(\"thread_db handling thread create for %d/%d\\n\", getPid(), lwp);\n   tdb_thread->threadHandle = thr;\n   tdb_thread->tinfo = *info;\n   if (info->ti_tid)\n      tdb_thread->tinfo_initialized = true;\n\n   getMemCache()->markToken(token_seteventreporting);\n   async_ret_t result = tdb_thread->setEventReporting(true);\n   if (result == aret_error) {\n      pthrd_printf(\"Error in setEventReporting for %d/%d\\n\", getPid(), tdb_thread->getLWP());\n      return aret_error;\n   }\n   if (result == aret_async) {\n      pthrd_printf(\"Async return in setEventReporting for %d/%d\\n\", getPid(), tdb_thread->getLWP());\n      return aret_async;\n   }\n   getMemCache()->condense();\n   tdb_thread->thread_initialized = true;\n   return aret_success;\n}\n\n\nasync_ret_t thread_db_process::handleThreadAttach(td_thrhandle_t *thr, Dyninst::LWP lwp)\n{\n   return initThreadWithHandle(thr, NULL, lwp);\n}\n\nasync_ret_t thread_db_process::initThreadDB() {\n    // Q: Why isn't this in the constructor?\n    // A: This function depends on the corresponding thread library being loaded\n    // and this event occurs some time after process creation.\n\n   if (!track_threads) {\n      return aret_success;\n   }\n    // Make sure thread_db is initialized - only once for all instances\n   if( !thread_db_initialized ) {\n      pthrd_printf(\"Initializing thread_db library\\n\");\n      thread_db_init_lock.lock();\n      if( !thread_db_initialized ) {\n         if (!loadedThreadDBLibrary()) {\n            setLastError(err_internal, \"libthread_db was not loaded\");\n            thread_db_init_lock.unlock();\n            return aret_error;\n         }\n         td_err_e errVal;\n         if( TD_OK != (errVal = p_td_init()) ) {\n            perr_printf(\"Failed to initialize libthread_db: %s(%d)\\n\",\n                        tdErr2Str(errVal), errVal);\n            setLastError(err_internal, \"libthread_db initialization failed\");\n            thread_db_init_lock.unlock();\n            return aret_error;\n          }\n         pthrd_printf(\"Sucessfully initialized thread_db\\n\");\n         thread_db_initialized = true;\n      }\n      thread_db_init_lock.unlock();\n   }\n   if (thread_db_proc_initialized) {\n      return aret_success;\n   }\n\n   getMemCache()->markToken(token_init);\n   // Create the thread agent\n   td_err_e errVal;\n   if (!createdThreadAgent)\n   {\n      pthrd_printf(\"Creating threadAgent\\n\");\n      errVal = p_td_ta_new(self, &threadAgent);\n      switch(errVal) {\n         case TD_OK:\n            pthrd_printf(\"Retrieved thread agent from thread_db\\n\");\n            break;\n         case TD_NOLIBTHREAD:\n            pthrd_printf(\"Debuggee isn't multithreaded at this point, libthread_db not enabled\\n\");\n            return aret_success;\n         case TD_ERR:\n            if (getMemCache()->hasPendingAsync()) {\n               pthrd_printf(\"Postponing thread_db initialization for async\\n\");\n               return aret_async;\n            }\n            //FALLTHROUGH\n         default:\n            perr_printf(\"Failed to create thread agent: %s(%d)\\n\",\n                        tdErr2Str(errVal), errVal);\n            thread_db_proc_initialized = true;\n            setLastError(err_internal, \"Failed to create libthread_db agent\");\n            return aret_error;\n      }\n      createdThreadAgent = true;\n   }\n\n   bool hasAsync = false;\n   set<pair<td_thrhandle_t *, LWP> > all_handles;\n   for (int_threadPool::iterator i = threadPool()->begin(); i != threadPool()->end(); i++) {\n      thread_db_thread *tdb_thread = dynamic_cast<thread_db_thread *>(*i);\n\n      if (tdb_thread->threadHandle_alloced) {\n         all_handles.insert(pair<td_thrhandle_t *, LWP>(tdb_thread->threadHandle, tdb_thread->getLWP()));\n         continue;\n      }\n\n      if (!tdb_thread->threadHandle) {\n         tdb_thread->threadHandle = new td_thrhandle_t;\n         memset(tdb_thread->threadHandle, 0, sizeof(td_thrhandle_t));\n      }\n\n      pthrd_printf(\"lwp2thr on %d/%d\\n\", getPid(), tdb_thread->getLWP());\n      errVal = p_td_ta_map_lwp2thr(getThreadDBAgent(), tdb_thread->getLWP(), tdb_thread->threadHandle);\n      if (errVal != TD_OK) {\n         if (getMemCache()->hasPendingAsync()) {\n            pthrd_printf(\"Hit async during lwp2thr\\n\");\n            hasAsync = true;\n            continue;\n         }\n         perr_printf(\"Failed to map LWP %d to thread_db thread: %s(%d)\\n\",\n                     tdb_thread->getLWP(), tdErr2Str(errVal), errVal);\n         setLastError(err_internal, \"Failed to get thread_db thread handle\");\n         delete tdb_thread->threadHandle;\n         tdb_thread->threadHandle = NULL;\n         continue;\n      }\n      pthrd_printf(\"Successful lwp2thr on %d/%d\\n\", getPid(), tdb_thread->getLWP());\n      tdb_thread->threadHandle_alloced = true;\n      all_handles.insert(pair<td_thrhandle_t *, LWP>(tdb_thread->threadHandle, tdb_thread->getLWP()));\n   }\n   if (hasAsync) {\n      pthrd_printf(\"Postponing lwp2thr for async\\n\");\n      return aret_async;\n   }\n\n   pthrd_printf(\"handleThreadAttach for %d threads\\n\", (int) all_handles.size());\n   for (set<pair<td_thrhandle_t *, LWP> >::iterator i = all_handles.begin(); i != all_handles.end(); i++)\n   {\n      async_ret_t result = handleThreadAttach(i->first, i->second);\n      if (result == aret_error) {\n         perr_printf(\"Error handling thread_db attach\\n\");\n         return aret_error;\n      }\n      if (result == aret_async) {\n         pthrd_printf(\"handleThreadAttach returned async in initThreadDB\\n\");\n         return aret_async;\n      }\n   }\n\n   // Enable all events\n   td_thr_events_t eventMask;\n#if defined(td_event_fillset)\n   //Macro on GNU libc\n   td_event_fillset(&eventMask);\n#elif defined(os_freebsd)\n   //Inline header file function on FreeBSD\n   td_event_fillset(&eventMask);\n#else\n//Need to make td_event_fillset a function pointer if this hits\n#error td_event_fillset is not a macro on this platform\n#endif\n\n   if (!setEventSet) {\n      getMemCache()->markToken(token_setevent);\n      errVal = p_td_ta_set_event(threadAgent, &eventMask);\n      if( errVal != TD_OK && getMemCache()->hasPendingAsync()) {\n         pthrd_printf(\"Async return from td_ta_set_event in initThreadDB\\n\");\n         return aret_async;\n      }\n      setEventSet = true;\n      getMemCache()->condense();\n      if (errVal != TD_OK) {\n         perr_printf(\"Failed to enable events: %s(%d)\\n\",\n                     tdErr2Str(errVal), errVal);\n         setLastError(err_internal, \"Failed to enable libthread_db events\");\n         thread_db_proc_initialized = true;\n         return aret_error;\n      }\n   }\n\n    // Determine the addresses for all events\n   td_event_e allEvents[] = { TD_CATCHSIG, TD_CONCURRENCY, TD_CREATE,\n                              TD_DEATH, TD_IDLE, TD_LOCK_TRY, TD_PREEMPT, TD_PRI_INHERIT,\n                              TD_READY, TD_REAP, TD_SLEEP, TD_SWITCHFROM, TD_SWITCHTO,\n                              TD_TIMEOUT };\n\n   for(unsigned i = 0; i < (sizeof(allEvents)/sizeof(td_event_e)); ++i) {\n      td_notify_t notifyResult;\n      errVal = p_td_ta_event_addr(threadAgent, allEvents[i], &notifyResult);\n\n      // This indicates that the event isn't supported\n      if( TD_OK != errVal ) continue;\n\n      assert( notifyResult.type == NOTIFY_BPT && \"Untested notify type\" );\n\n      EventType newEvent;\n      switch(allEvents[i]) {\n         case TD_CREATE:\n            newEvent = EventType(EventType::Post, EventType::ThreadCreate);\n            pthrd_printf(\"Installing breakpoint for thread creation events\\n\");\n            break;\n         case TD_DEATH:\n            newEvent = EventType(EventType::Post, EventType::ThreadDestroy);\n            pthrd_printf(\"Installing breakpoint for thread destroy events\\n\");\n            break;\n         default:\n            pthrd_printf(\"Unimplemented libthread_db event encountered. Skipping for now.\\n\");\n            continue;\n      }\n\n      Address addr = (Address) notifyResult.u.bptaddr;\n      pthrd_printf(\"Received address of 0x%lx for breakpoint, checking platform conversion\\n\",\n\t\t   addr);\n      if( !plat_convertToBreakpointAddress(addr, triggerThread()) ) {\n         perr_printf(\"Failed to determine breakpoint address\\n\");\n         setLastError(err_internal, \"Failed to install new thread_db event breakpoint\");\n         thread_db_proc_initialized = true;\n         return aret_error;\n      }\n      pthrd_printf(\"Post-conversion, using address of 0x%lx\\n\", addr);\n#if defined(os_freebsd)\n      notifyResult.u.bptaddr = (psaddr_t) addr;\n#else\n      notifyResult.u.bptaddr = (void *) addr;\n#endif\n      int_breakpoint *newEventBrkpt = new int_breakpoint(Breakpoint::ptr());\n      newEventBrkpt->setProcessStopper(true);\n      if( !addBreakpoint(addr, newEventBrkpt))\n      {\n         perr_printf(\"Failed to install new event breakpoint\\n\");\n         setLastError(err_internal, \"Failed to install new thread_db event breakpoint\");\n         delete newEventBrkpt;\n         thread_db_proc_initialized = true;\n         return aret_error;\n         }\n\n      pair<map<Dyninst::Address, pair<int_breakpoint *, EventType> >::iterator, bool> insertIter;\n      insertIter = addr2Event.insert(make_pair(addr, make_pair(newEventBrkpt, newEvent)));\n\n      assert( insertIter.second && \"event breakpoint address not unique\" );\n   }\n\n   thread_db_proc_initialized = true;\n   return aret_success;\n}\n\nvoid thread_db_process::freeThreadDBAgent() {\n    // This code cannot be in the destructor because it makes use of\n    // the proc_service interface and this makes calls to functions\n    // that are pure virtual in this class.\n    //\n    // A possible, better solution would be to make the functions static\n    // but we lose all the convenience of pure virtual functions\n    //\n    // At any rate, this function should be called from a derived class'\n    // destructor for the time being.\n\n    if( thread_db_initialized && threadAgent ) {\n        td_err_e errVal = p_td_ta_delete(threadAgent);\n        if( TD_OK != errVal ) {\n            perr_printf(\"Failed to delete thread agent: %s(%d)\\n\",\n                    tdErr2Str(errVal), errVal);\n        }\n        assert( TD_OK == errVal && \"Failed to delete thread agent\" );\n        threadAgent = NULL;\n    }\n}\n\nconst char *thread_db_process::getThreadLibName(const char *)\n{\n   return \"\";\n}\n\nbool thread_db_process::decodeTdbLWPExit(EventLWPDestroy::ptr lwp_ev)\n{\n   thread_db_thread *db_thread = dynamic_cast<thread_db_thread *>(lwp_ev->getThread()->llthrd());\n   assert(db_thread);\n\n   if (db_thread->destroyed || !db_thread->thread_initialized)\n      return false;\n\n   pthrd_printf(\"Decoded LWP exit without thread exit on %d/%d.  Faking thread exit event\\n\",\n                db_thread->llproc()->getPid(), db_thread->getLWP());\n\n   EventUserThreadDestroy::ptr new_ev = EventUserThreadDestroy::ptr(new EventUserThreadDestroy(EventType::Post));\n   new_ev->setProcess(db_thread->llproc()->proc());\n   new_ev->setThread(db_thread->thread());\n   new_ev->setSyncType(Event::async);\n   lwp_ev->addSubservientEvent(new_ev);\n\n   return true;\n}\n\nasync_ret_t thread_db_process::decodeTdbBreakpoint(EventBreakpoint::ptr bp)\n{\n    // Decoding thread_db events needs to be a two-step process:\n    // 1) Create events depending on the breakpoint address\n    //    Don't get events from thread_db as this can write to memory\n    //    and threads could currently be running -- introduces some race\n    //    conditions where the running threads could be modifying data\n    //    structures thread_db is accessing\n    //    Just create placeholder events that can later be filled in with\n    //    more information\n    // 2) Get events from thread_db in the handler for the event, at this\n    //    point all threads are stopped and it is safe to make changes to\n    //    memory because the parent event is a breakpoint and requires\n    //    that all threads are stopped\n    Dyninst::Address addr = bp->getAddress();\n\n    // Determine what type of event occurs at the specified address\n    map<Dyninst::Address, pair<int_breakpoint *, EventType> >::iterator addrIter;\n    addrIter = addr2Event.find(addr);\n    if (addrIter == addr2Event.end())\n       return aret_error;\n\n    vector<Event::ptr> threadEvents;\n\n    EventType::Code ecode = addrIter->second.second.code();\n    pthrd_printf(\"Address 0x%lx corresponds to a thread %s breakpoint.\\n\",\n                 addr, ecode == EventType::ThreadCreate ? \"create\" : \"destroy\");\n    switch(ecode) {\n       case EventType::ThreadCreate:\n       case EventType::ThreadDestroy:\n          threadEvents.push_back(EventThreadDB::ptr(new EventThreadDB()));\n          break;\n       default:\n          pthrd_printf(\"Failed to decode any thread events due to the breakpoint\\n\");\n          return aret_error;\n    }\n\n    for (vector<Event::ptr>::iterator i = threadEvents.begin(); i != threadEvents.end(); i++) {\n       Event::ptr ev = *i;\n       if (!ev->getThread())\n          ev->setThread(bp->getThread());\n       if (!ev->getProcess())\n          ev->setProcess(proc());\n       if (ev->getSyncType() == Event::unset)\n          ev->setSyncType(Event::sync_process);\n       bp->addSubservientEvent(ev);\n    }\n    bp->setSuppressCB(true);\n    return aret_success;\n}\n\ntd_thragent_t *thread_db_process::getThreadDBAgent() {\n    return threadAgent;\n}\n\nstatic string stripLibraryName(const char *libname)\n{\n   boost::filesystem::path p(libname);\n   return p.filename().string();\n}\n\nps_err_e thread_db_process::getSymbolAddr(const char *objName, const char *symName,\n        psaddr_t *symbolAddr)\n{\n    SymReader *objSymReader = NULL;\n    int_library *lib = NULL;\n\n    if (plat_isStaticBinary()) {\n       // For static executables, we need to search the executable instead of the\n       // thread library.\n       assert(memory()->libs.size() == 1);\n       lib = *memory()->libs.begin();\n    }\n    else\n    {\n       // FreeBSD implementation doesn't set objName\n       const char *name_c = objName ? objName : getThreadLibName(symName);\n       std::string name = stripLibraryName(name_c);\n\n       for (set<int_library *>::iterator i = memory()->libs.begin(); i != memory()->libs.end(); i++) {\n          int_library *l = *i;\n          if (stripLibraryName(l->getName().c_str()) ==  name) {\n             lib = l;\n             break;\n          }\n       }\n    }\n\n    if( NULL == lib ) {\n       pthrd_printf(\"Didn't yet find loaded thread library\\n\");\n       return PS_ERR;\n    }\n\n    objSymReader = getSymReader()->openSymbolReader(lib->getName());\n    if( NULL == objSymReader ) {\n        perr_printf(\"Failed to open symbol reader for %s\\n\",\n                    lib->getName().c_str());\n        setLastError(err_internal, \"Failed to open executable for symbol reading\");\n        return PS_ERR;\n    }\n\n    Symbol_t lookupSym = objSymReader->getSymbolByName(string(symName));\n\n    if( !objSymReader->isValidSymbol(lookupSym) ) {\n       pthrd_printf(\"thread_db getSymbolAddr(%s, %s) = none\\n\", objName ? objName : \"NULL\",\n                    symName ? symName : \"NULL\");\n       return PS_NOSYM;\n    }\n\n    Address tmp = lib->getAddr() + objSymReader->getSymbolOffset(lookupSym);\n    if (getAddressWidth() == 4) {\n       tmp &= 0xffffffff;\n    }\n\n    *symbolAddr = (psaddr_t) tmp;\n\n    pthrd_printf(\"thread_db getSymbolAddr(%s, %s) = %p\\n\", objName ? objName : \"NULL\",\n                 symName ? symName : \"NULL\", (void *) *symbolAddr);\n    return PS_OK;\n}\n\n\nasync_ret_t thread_db_process::post_create(std::set<response::ptr> &async_responses)\n{\n   async_ret_t result;\n   if (!completed_post) {\n      result = int_process::post_create(async_responses);\n      if (result != aret_success)\n         return result;\n      completed_post = true;\n   }\n\n   err_t last_error = getLastError();\n   const char *last_err_msg = getLastErrorMsg();\n\n   getMemCache()->setSyncHandling(true);\n   for (;;) {\n      result = initThreadDB();\n      if (result != aret_async)\n         break;\n      getMemCache()->getPendingAsyncs(async_responses);\n      return aret_async;\n   }\n   getMemCache()->setSyncHandling(false);\n\n   setLastError(last_error, last_err_msg);\n   return aret_success; //Swallow these errors, thread_db failure does not bring down rest of startup\n}\n\nasync_ret_t thread_db_process::post_attach(bool wasDetached, set<response::ptr> &aresps) {\n   async_ret_t result;\n   if (!completed_post) {\n      result = int_process::post_attach(wasDetached, aresps);\n      if (result != aret_success)\n         return result;\n      completed_post = true;\n   }\n\n   err_t last_error = getLastError();\n   const char *last_err_msg = getLastErrorMsg();\n\n   getMemCache()->setSyncHandling(true);\n   for (;;) {\n      result = initThreadDB();\n      if (result != aret_async)\n         break;\n      getMemCache()->getPendingAsyncs(aresps);\n      return aret_async;\n   }\n   getMemCache()->setSyncHandling(false);\n\n   setLastError(last_error, last_err_msg);\n   return aret_success; //Swallow these errors, thread_db failure does not bring down rest of startup\n}\n\n#if 0\n#warning TODO fix detach part in post attach rewrite\nbool thread_db_process::post_attach(bool wasDetached) {\n    if( !int_process::post_attach(wasDetached) ) return false;\n\n    if( !wasDetached ) {\n        return initThreadDB();\n    }else{\n        // Need to initialize all new threads\n        bool success = true;\n        td_err_e errVal;\n        for (int_threadPool::iterator i = threadPool()->begin(); i != threadPool()->end(); i++) {\n           thread_db_thread *tdb_thread = static_cast<thread_db_thread *>(*i);\n           if( tdb_thread->thread_initialized ) continue;\n\n           tdb_thread->threadHandle = new td_thrhandle_t;\n\n           errVal = td_ta_map_lwp2thr(getThreadDBAgent(), tdb_thread->getLWP(), tdb_thread->threadHandle);\n           if (errVal != TD_OK) {\n              perr_printf(\"Failed to map LWP %d to thread_db thread: %s(%d)\\n\",\n                          tdb_thread->getLWP(), tdErr2Str(errVal), errVal);\n              setLastError(err_internal, \"Failed to get thread_db thread handle\");\n              delete tdb_thread->threadHandle;\n              tdb_thread->threadHandle = NULL;\n              success = false;\n              continue;\n           }\n           tdb_thread->threadHandle_alloced = true;\n\n           if( !handleThreadAttach(tdb_thread->threadHandle) ) {\n               perr_printf(\"Error handling thread_db attach\\n\");\n               success = false;\n           }\n        }\n\n        return success;\n    }\n}\n#endif\n\nbool thread_db_process::isSupportedThreadLib(string libName) {\n   return (libName.find(\"libpthread\") != string::npos);\n}\n\nvoid thread_db_process::addThreadDBHandlers(HandlerPool *hpool) {\n   static bool initialized = false;\n   static ThreadDBLibHandler *libHandler = NULL;\n   static ThreadDBCreateHandler *createHandler = NULL;\n   static ThreadDBDestroyHandler *destroyHandler = NULL;\n   static ThreadDBDispatchHandler *dispatchHandler = NULL;\n   if( !initialized ) {\n      libHandler = new ThreadDBLibHandler();\n      createHandler = new ThreadDBCreateHandler();\n      destroyHandler = new ThreadDBDestroyHandler();\n      dispatchHandler = new ThreadDBDispatchHandler();\n      initialized = true;\n   }\n   hpool->addHandler(libHandler);\n   hpool->addHandler(createHandler);\n   hpool->addHandler(destroyHandler);\n   hpool->addHandler(dispatchHandler);\n}\n\nbool thread_db_process::plat_getLWPInfo(lwpid_t, void *)\n{\n   perr_printf(\"Attempt to use unsupported plat_getLWPInfo\\n\");\n   return false;\n}\n\nbool thread_db_process::plat_supportThreadEvents()\n{\n   if (!loadedThreadDBLibrary()) {\n      return false;\n   }\n   return true;\n}\n\nbool thread_db_thread::plat_convertToSystemRegs(const int_registerPool &,\n                                                unsigned char *, bool)\n{\n    return true;\n}\n\nint_thread *thread_db_process::triggerThread() const\n{\n   return trigger_thread;\n}\n\nasync_ret_t thread_db_process::ll_fetchThreadInfo(td_thrhandle_t *th, td_thrinfo_t *info)\n{\n   td_err_e result = thread_db_process::p_td_thr_get_info(th, info);\n   if (result != TD_OK) {\n      if (getMemCache()->hasPendingAsync()) {\n         pthrd_printf(\"Async return from td_thr_get_info in ll_fetchThreadInfo\\n\");\n         return aret_async;\n      }\n      perr_printf(\"Error calling td_thr_get_info: %s (%d)\\n\", tdErr2Str(result), (int) result);\n      return aret_error;\n   }\n   pthrd_printf(\"Successful ll_fetchThreadInfo for handle %p - tid = %lu, lid = %lu\\n\", th, (unsigned long) info->ti_tid, (unsigned long) info->ti_lid);\n   return aret_success;\n}\n\nThreadDBDispatchHandler::ThreadDBDispatchHandler() :\n   Handler(\"thread_db Dispatch Handler\")\n{\n}\n\nThreadDBDispatchHandler::~ThreadDBDispatchHandler()\n{\n}\n\nint ThreadDBDispatchHandler::getPriority() const\n{\n   return Handler::PostPlatformPriority;\n}\n\nHandler::handler_ret_t ThreadDBDispatchHandler::handleEvent(Event::ptr ev)\n{\n   /**\n    * All we know is that we got a thread_db breakpoint, but we don't\n    * know whether that was a thread create/destroy, or any information\n    * about those events.  We'll collect that info here, then add\n    * UserThreadCreate or UserThreadDestroy events as 'late' events\n    * (means they were generated at handle time) to this event.\n    **/\n   pthrd_printf(\"At top of ThreadDB Dispatch handler\\n\");\n   EventThreadDB::ptr etdb = ev->getEventThreadDB();\n   assert(etdb);\n   int_eventThreadDB *int_ev = etdb->getInternal();\n   assert(int_ev);\n\n   thread_db_process *proc = dynamic_cast<thread_db_process *>(etdb->getProcess()->llproc());\n   assert(proc);\n\n   if (proc->dispatch_event && proc->dispatch_event != etdb) {\n      //We don't need to handle a new dispatch event if another is in\n      //progress.  We'll drop the second.\n      pthrd_printf(\"Dropping dispatch event, another is in progress\\n\");\n      return ret_success;\n   }\n   proc->dispatch_event = etdb;\n\n   if (!int_ev->completed_new_evs) {\n      async_ret_t result = proc->getEventForThread(int_ev);\n      if (result == aret_async) {\n         pthrd_printf(\"getEventForThread returned async\\n\");\n         return ret_async;\n      }\n      int_ev->completed_new_evs = true;\n      if (result == aret_error) {\n         pthrd_printf(\"getEventForThread returned error\\n\");\n         proc->dispatch_event = EventThreadDB::ptr();\n         return ret_error;\n      }\n   }\n\n   thread_db_thread *main_thread = dynamic_cast<thread_db_thread *>(proc->threadPool()->initialThread());\n   if (main_thread->tinfo_initialized)\n      proc->initialThreadEventCreated = true;\n\n   if (!proc->initialThreadEventCreated) {\n      pthrd_printf(\"Creating thread event for main thread\\n\");\n\n      if (!main_thread->threadHandle) {\n         main_thread->threadHandle = new td_thrhandle_t;\n         bzero(&main_thread->threadHandle, sizeof(td_thrhandle_t));\n         main_thread->threadHandle_alloced = true;\n      }\n\n      int td_result = thread_db_process::p_td_ta_map_lwp2thr(proc->getThreadDBAgent(), main_thread->getLWP(), main_thread->threadHandle);\n      if (td_result == TD_ERR && proc->getMemCache()->hasPendingAsync()) {\n         pthrd_printf(\"async return from td_ta_map_lwp2thr while creating event for main thread\\n\");\n         std::set<response::ptr> resps;\n         proc->getMemCache()->getPendingAsyncs(resps);\n         proc->handlerPool()->notifyOfPendingAsyncs(resps, ev);\n         return Handler::ret_async;\n      }\n      else if (td_result == TD_ERR) {\n         perr_printf(\"Error return from td_ta_map_lwp2thr while creating event for main thread\\n\");\n         proc->dispatch_event = EventThreadDB::ptr();\n         return ret_error;\n      }\n\n      td_thrinfo_t tinfo;\n      bzero(&tinfo, sizeof(td_thrinfo_t));\n      async_ret_t result = proc->ll_fetchThreadInfo(main_thread->threadHandle, &tinfo);\n      if (result == aret_async) {\n         pthrd_printf(\"Async return during ll_fetchThreadInfo for main thread\\n\");\n         std::set<response::ptr> resps;\n         proc->getMemCache()->getPendingAsyncs(resps);\n         proc->handlerPool()->notifyOfPendingAsyncs(resps, ev);\n         return Handler::ret_async;\n      }\n      if (result == aret_error) {\n         pthrd_printf(\"Error return during ll_fetchThreadInfo for main thread\\n\");\n         proc->dispatch_event = EventThreadDB::ptr();\n         return Handler::ret_error;\n      }\n      if (tinfo.ti_tid) {\n         new_thread_data_t *thrdata = (new_thread_data_t *) malloc(sizeof(new_thread_data_t));\n         thrdata->thr_handle = main_thread->threadHandle;\n         thrdata->thr_info = tinfo;\n         thrdata->threadHandle_alloced = main_thread->threadHandle_alloced;\n\n         EventNewUserThread::ptr new_ev = EventNewUserThread::ptr(new EventNewUserThread());\n         new_ev->setProcess(proc->proc());\n         new_ev->setThread(main_thread->thread());\n         new_ev->setSyncType(Event::sync_process);\n         new_ev->getInternalEvent()->thr = main_thread;\n         new_ev->getInternalEvent()->lwp = main_thread->getLWP();\n         new_ev->getInternalEvent()->raw_data = (void *) thrdata;\n         proc->initialThreadEventCreated = true;\n         int_ev->new_evs.insert(new_ev);\n         pthrd_printf(\"Success creating event for main thread\\n\");\n      }\n      else {\n         pthrd_printf(\"TID info for main thread not ready yet\\n\");\n      }\n   }\n   pthrd_printf(\"Got %u events, adding as late events\\n\", (unsigned int) int_ev->new_evs.size());\n   for (set<Event::ptr>::iterator i = int_ev->new_evs.begin(); i != int_ev->new_evs.end(); i++) {\n      proc->handlerPool()->addLateEvent(*i);\n   }\n   proc->dispatch_event = EventThreadDB::ptr();\n   return ret_success;\n}\n\nvoid ThreadDBDispatchHandler::getEventTypesHandled(std::vector<EventType> &etypes)\n{\n   etypes.push_back(EventType(EventType::None, EventType::ThreadDB));\n}\n\nThreadDBLibHandler::ThreadDBLibHandler() :\n    Handler(\"thread_db Library Handler\")\n{\n}\n\nThreadDBLibHandler::~ThreadDBLibHandler()\n{\n}\n\nHandler::handler_ret_t ThreadDBLibHandler::handleEvent(Event::ptr ev) {\n   if (!thread_db_process::loadedThreadDBLibrary()) {\n      pthrd_printf(\"Failed to load thread_db.  Not running handlers\\n\");\n      return Handler::ret_success;\n   }\n   EventLibrary::const_ptr libEv = ev->getEventLibrary();\n   thread_db_process *proc = dynamic_cast<thread_db_process *>(ev->getProcess()->llproc());\n\n   //Check if we need to clear the library->tls cache on library unload\n   const set<Library::ptr> &rmLibs = libEv->libsRemoved();\n   set<int_library *> &cached_libs = proc->libs_with_cached_tls_areas;\n   for (set<Library::ptr>::const_iterator i = rmLibs.begin(); i != rmLibs.end(); i++) {\n      int_library *ll_lib = (*i)->debug();\n      if (cached_libs.find(ll_lib) == cached_libs.end())\n         continue;\n      pthrd_printf(\"Removing library %s from internal tls cached on unload\\n\",\n                   ll_lib->getName().c_str());\n      for (int_threadPool::iterator j = proc->threadPool()->begin(); j != proc->threadPool()->end(); j++) {\n         thread_db_thread *thrd = dynamic_cast<thread_db_thread *>(*j);\n         if (!thrd)\n            continue;\n         map<int_library*, Address>::iterator k = thrd->cached_tls_areas.find(ll_lib);\n         if (k == thrd->cached_tls_areas.end())\n            continue;\n         thrd->cached_tls_areas.erase(k);\n      }\n   }\n\n   //Check if thread library is being loaded, init thread_db if so\n   const set<Library::ptr> &addLibs = libEv->libsAdded();\n   set<Library::ptr>::iterator libIter;\n   for( libIter = addLibs.begin(); libIter != addLibs.end(); ++libIter ) {\n      if( ! proc->isSupportedThreadLib((*libIter)->getName()) )\n         continue;\n\n      pthrd_printf(\"Enabling thread_db support for pid %d\\n\",\n                   proc->getPid());\n      async_ret_t ret = proc->initThreadDB();\n\n      if (ret == aret_error) {\n         pthrd_printf(\"Failed to initialize thread_db for pid %d\\n\",\n                      proc->getPid());\n         return Handler::ret_error;\n      }\n      else if (ret == aret_success) {\n         return Handler::ret_success;\n      }\n      else if (ret == aret_async) {\n         std::set<response::ptr> resps;\n         proc->getMemCache()->getPendingAsyncs(resps);\n         proc->handlerPool()->notifyOfPendingAsyncs(resps, ev);\n         return Handler::ret_async;\n      }\n   }\n\n   return Handler::ret_success;\n}\n\nint ThreadDBLibHandler::getPriority() const {\n    return PostPlatformPriority;\n}\n\nvoid ThreadDBLibHandler::getEventTypesHandled(vector<EventType> &etypes) {\n    etypes.push_back(EventType(EventType::None, EventType::Library));\n}\n\nThreadDBCreateHandler::ThreadDBCreateHandler() :\n    Handler(\"thread_db New Thread Handler\")\n{\n}\n\nThreadDBCreateHandler::~ThreadDBCreateHandler()\n{\n}\n\nint ThreadDBCreateHandler::getPriority() const\n{\n   //After dispatch handler, which runs at PostPlatformPriority\n   return Handler::PostPlatformPriority + 1;\n}\n\nHandler::handler_ret_t ThreadDBCreateHandler::handleEvent(Event::ptr ev) {\n  pthrd_printf(\"ThreadDBCreateHandler::handleEvent\\n\");\n   if (!thread_db_process::loadedThreadDBLibrary()) {\n      pthrd_printf(\"Failed to load thread_db.  Not running handlers\");\n      return Handler::ret_success;\n   }\n\n   EventNewUserThread::ptr threadEv = ev->getEventNewUserThread();\n   thread_db_process *tdb_proc = dynamic_cast<thread_db_process *>(threadEv->getProcess()->llproc());\n   thread_db_thread *tdb_thread = dynamic_cast<thread_db_thread *>(threadEv->getNewThread()->llthrd());\n\n   pthrd_printf(\"ThreadDBCreateHandler::handleEvent for %d/%d\\n\", tdb_proc->getPid(), tdb_thread->getLWP());\n   if (threadEv->getInternalEvent()->needs_update) {\n      pthrd_printf(\"Updating user thread data for %d/%d in thread_db create handler\\n\",\n                   tdb_proc->getPid(), tdb_thread->getLWP());\n      assert(tdb_proc);\n      new_thread_data_t *thrdata = (new_thread_data_t *) threadEv->getInternalEvent()->raw_data;\n\n      async_ret_t result = tdb_proc->initThreadWithHandle(thrdata->thr_handle, &thrdata->thr_info, NULL_LWP);\n      if (result == aret_error) {\n         pthrd_printf(\"ThreadDBCreateHandler returning error\\n\");\n         return Handler::ret_error;\n      }\n      if (result == aret_async) {\n         pthrd_printf(\"ThreadDBCreateHandler returning async\\n\");\n         return Handler::ret_async;\n      }\n      if (thrdata->threadHandle_alloced) tdb_thread->threadHandle_alloced = true;\n   }\n\n   return Handler::ret_success;\n}\n\nvoid ThreadDBCreateHandler::getEventTypesHandled(vector<EventType> &etypes) {\n   etypes.push_back(EventType(EventType::Any, EventType::UserThreadCreate));\n}\n\nThreadDBDestroyHandler::ThreadDBDestroyHandler() :\n   Handler(\"thread_db Destroy Handler\")\n{\n}\n\nThreadDBDestroyHandler::~ThreadDBDestroyHandler()\n{\n}\n\nint ThreadDBDestroyHandler::getPriority() const\n{\n   //After dispatch handler, which runs at PostPlatformPriority\n   return Handler::PostPlatformPriority + 1;\n}\n\nHandler::handler_ret_t ThreadDBDestroyHandler::handleEvent(Event::ptr ev) {\n   if (!thread_db_process::loadedThreadDBLibrary()) {\n      pthrd_printf(\"Failed to load thread_db.  Not running handlers\\n\");\n      return Handler::ret_success;\n   }\n   thread_db_process *proc = dynamic_cast<thread_db_process *>(ev->getProcess()->llproc());\n   thread_db_thread *thrd = dynamic_cast<thread_db_thread *>(ev->getThread()->llthrd());\n\n   if(thrd) {\n      pthrd_printf(\"Running ThreadDBDestroyHandler on %d/%d\\n\", proc->getPid(), thrd->getLWP());\n      thrd->markDestroyed();\n   }\n\n   return Handler::ret_success;\n}\n\nvoid ThreadDBDestroyHandler::getEventTypesHandled(vector<EventType> &etypes) {\n    etypes.push_back(EventType(EventType::Any, EventType::UserThreadDestroy));\n}\n\nthread_db_thread::thread_db_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l) :\n   int_thread(p, t, l),\n   threadHandle(NULL),\n   destroyed(false),\n   tinfo_initialized(false),\n   thread_initialized(false),\n   threadHandle_alloced(false),\n   enabled_event_reporting(false)\n{\n   memset(&tinfo, 0, sizeof(tinfo));\n}\n\nthread_db_thread::~thread_db_thread()\n{\n   if (threadHandle_alloced)\n      delete threadHandle;\n}\n\nbool thread_db_thread::initThreadHandle() {\n    if( NULL != threadHandle ) return true;\n\n    thread_db_process *lproc = dynamic_cast<thread_db_process *>(llproc());\n    if( NULL == lproc->getThreadDBAgent() ) return false;\n\n    threadHandle = new td_thrhandle_t;\n\n    td_err_e errVal = thread_db_process::p_td_ta_map_lwp2thr(lproc->getThreadDBAgent(),\n                                          lwp, threadHandle);\n    if( TD_OK != errVal ) {\n        perr_printf(\"Failed to map LWP %d to thread_db thread: %s(%d)\\n\",\n                lwp, tdErr2Str(errVal), errVal);\n        setLastError(err_internal, \"Failed to get thread_db thread handle\");\n        delete threadHandle;\n        threadHandle = NULL;\n        return false;\n    }\n    threadHandle_alloced = true;\n\n    return true;\n}\n\nasync_ret_t thread_db_process::getEventForThread(int_eventThreadDB *iev) {\n   // These specific calls into thread_db can modify the memory of the process\n   // and can introduce some race conditions if the platform allows memory reads\n   // while some threads are running\n   assert( threadPool()->allHandlerStopped() );\n\n   // We need to save thread_db generated events because we need to use the\n   // process-level event retrieval call to get thread creation events (at\n   // least on some platforms).\n\n   bool local_async = false;\n   td_err_e msgErr = TD_OK;\n\n   if (!iev->completed_getmsgs) {\n      getMemCache()->markToken(token_getmsg);\n      vector<td_event_msg_t> msgs;\n      vector<td_thrhandle_t> handles;\n\n      td_event_msg_t evMsg;\n\n      for (;;) {\n         msgErr = p_td_ta_event_getmsg(threadAgent, &evMsg);\n         if (msgErr != TD_OK) {\n            if (getMemCache()->hasPendingAsync()) {\n               pthrd_printf(\"Async return in getEventForThread from td_ta_event_getmsg\\n\");\n               return aret_async;\n            }\n            else if (msgErr == TD_NOMSG) {\n               pthrd_printf(\"No more messages ready in thread_db\\n\");\n               break;\n            }\n            else {\n               perr_printf(\"Error reading messages from thread_db\\n\");\n               return aret_error;\n            }\n         }\n         msgs.push_back(evMsg);\n         //GLIBC's thread_db returns a pointer to a static variable inside\n         // evMsg.  Thus subsequent calls will override the data from prior\n         // calls.  Annoying.  Make a copy of the th_p in handles to avoid\n         // this problem.\n         handles.push_back(*evMsg.th_p);\n      }\n      pthrd_printf(\"Received %lu messages from thread_db on %d\\n\", (unsigned long)msgs.size(), getPid());\n      iev->msgs = msgs;\n      iev->handles = handles;\n      iev->completed_getmsgs = true;\n   }\n\n   getMemCache()->condense();\n\n   for (int i=iev->msgs.size()-1; i>=0; i--) {\n      td_event_msg_t &evMsg = iev->msgs[i];\n      evMsg.th_p = & iev->handles[i];\n      Event::ptr newEvent = decodeThreadEvent(&evMsg, local_async);\n      if (local_async) {\n         pthrd_printf(\"Async return from decodeThreadEvent\\n\");\n         return aret_async;\n      }\n      if (newEvent)\n         iev->new_evs.insert(newEvent);\n      iev->msgs.pop_back();\n      iev->handles.pop_back();\n   }\n\n   return aret_success;\n}\n\nbool thread_db_process::setTrackThreads(bool b, std::set<std::pair<int_breakpoint *, Address> > &bps,\n                                                 bool &add_bp)\n{\n   if (b == track_threads) {\n      pthrd_printf(\"User wants to %s thread_db on %d, which is already done.  Leaving in same state\\n\",\n                   b ? \"enable\" : \"disable\", getPid());\n      return true;\n   }\n   track_threads = b;\n\n   std::map<Address, pair<int_breakpoint *, EventType> >::iterator i;\n   for (i = addr2Event.begin(); i != addr2Event.end(); i++) {\n      Address addr = i->first;\n      int_breakpoint *bp = i->second.first;\n      bps.insert(make_pair(bp, addr));\n   }\n\n   add_bp = b;\n   return true;\n}\n\nbool thread_db_process::isTrackingThreads()\n{\n   return track_threads;\n}\n\nbool thread_db_process::refreshThreads()\n{\n   EventThreadDB::ptr ev = EventThreadDB::ptr(new EventThreadDB());\n   ev->setSyncType(Event::async);\n   ev->setProcess(proc());\n   ev->setThread(threadPool()->initialThread()->thread());\n   mbox()->enqueue(ev);\n   return true;\n}\n\nint thread_db_process::threaddb_getPid()\n{\n   return getPid();\n}\n\nasync_ret_t thread_db_process::plat_calcTLSAddress(int_thread *thread, int_library *lib, Offset off,\n                                                   Address &outaddr, set<response::ptr> &resps)\n{\n   thread_db_thread *thrd = dynamic_cast<thread_db_thread *>(thread);\n   if (!thrd || !thrd->initThreadHandle()) {\n      perr_printf(\"Thread_db not supported on thread %d/%d\\n\", getPid(), thread->getLWP());\n      setLastError(err_unsupported, \"TLS Operations not supported on this thread\\n\");\n      return aret_error;\n   }\n   bool is_staticbinary = plat_isStaticBinary();\n\n   if ((!is_staticbinary && !p_td_thr_tls_get_addr) ||\n       (is_staticbinary && !p_td_thr_tlsbase)) {\n      perr_printf(\"TLS operations not supported in this version of thread_db\\n\");\n      setLastError(err_unsupported, \"TLS Operations not supported on this system\\n\");\n      return aret_error;\n   }\n\n   map<int_library *, Address>::iterator i = thrd->cached_tls_areas.find(lib);\n   if (i != thrd->cached_tls_areas.end()) {\n      outaddr = i->second + off;\n      return aret_success;\n   }\n\n   getMemCache()->setSyncHandling(true);\n   void *tls_base = NULL;\n   td_err_e err;\n\n   if (!is_staticbinary)\n      err = p_td_thr_tls_get_addr(thrd->threadHandle, (void *) lib->mapAddress(),\n                                  0, &tls_base);\n   else\n      err = p_td_thr_tlsbase(thrd->threadHandle, 1, &tls_base);\n\n   if (err != TD_OK && getMemCache()->hasPendingAsync()) {\n      pthrd_printf(\"Async return in plat_calcTLSAddress\\n\");\n      getMemCache()->getPendingAsyncs(resps);\n      return aret_async;\n   }\n   getMemCache()->setSyncHandling(false);\n   if (err != TD_OK) {\n      perr_printf(\"Error [%s] return from td_thr_tls_get_addr from thread_db\\n\", tdErr2Str(err));\n      return aret_error;\n   }\n\n   Address tls_base_addr = (Address) tls_base;\n   thrd->cached_tls_areas[lib] = tls_base_addr;\n   libs_with_cached_tls_areas.insert(lib);\n   outaddr = tls_base_addr + off;\n   return aret_success;\n}\n\nasync_ret_t thread_db_thread::setEventReporting(bool on) {\n    if( !initThreadHandle() ) return aret_error;\n    if (enabled_event_reporting == on) return aret_success;\n\n    pthrd_printf(\"Enabled thread_db events for LWP %d\\n\", lwp);\n    td_err_e errVal = thread_db_process::p_td_thr_event_enable(threadHandle, (on ? 1 : 0 ));\n    if (errVal != TD_OK && llproc()->getMemCache()->hasPendingAsync()) {\n       pthrd_printf(\"td_thr_event_enable returned async in setEventReporting\\n\");\n       return aret_async;\n    }\n    enabled_event_reporting = on;\n    if (errVal != TD_OK) {\n       perr_printf(\"Failed to enable events for LWP %d: %s(%d)\\n\",\n                   lwp, tdErr2Str(errVal), errVal);\n       setLastError(err_internal, \"Failed to enable thread_db events\");\n       return aret_error;\n    }\n\n    return aret_success;\n}\n\nbool thread_db_thread::fetchThreadInfo() {\n   if (!thread_db_process::loadedThreadDBLibrary()) {\n      perr_printf(\"Failed to load thread_db.  Not fetching thread data.\");\n      setLastError(err_unsupported, \"thread_db.so not loaded.  User-level thread data unavailable.\");\n      return false;\n   }\n   if (!thread_initialized) {\n      perr_printf(\"Attempt to read user thread info of %d/%d before user thread create\\n\",\n                  llproc()->getPid(), getLWP());\n      setLastError(err_nouserthrd, \"Attempted to read user thread info, but user thread has not been created.\");\n      return false;\n   }\n   if (tinfo_initialized) {\n      return true;\n   }\n   if( !initThreadHandle() ) return false;\n\n   pthrd_printf(\"Calling td_thr_get_info on %d/%d\\n\", llproc()->getPid(), getLWP());\n   thread_db_process *tdb_proc = dynamic_cast<thread_db_process *>(llproc());\n   async_ret_t result = tdb_proc->ll_fetchThreadInfo(threadHandle, &tinfo);\n   if (result == aret_error) {\n      pthrd_printf(\"Returning error in fetchThreadInfo due to ll_fetchThreadInfo\\n\");\n      return false;\n   }\n   while (result == aret_async) {\n      std::set<response::ptr> resps;\n      llproc()->getMemCache()->getPendingAsyncs(resps);\n      llproc()->waitForAsyncEvent(resps);\n      result = tdb_proc->ll_fetchThreadInfo(threadHandle, &tinfo);\n      if (result == aret_error) {\n         pthrd_printf(\"Returning error in fetchThreadInfo due to ll_fetchThreadInfo\\n\");\n         return false;\n      }\n   }\n\n   if( tinfo.ti_tid ) tinfo_initialized = true;\n   return true;\n}\n\nvoid thread_db_thread::markDestroyed() {\n    destroyed = true;\n}\n\nbool thread_db_thread::isDestroyed() {\n    return destroyed;\n}\n\nbool thread_db_thread::thrdb_getThreadArea(int, Dyninst::Address &)\n{\n   assert(0); //Unsupported.  Currently only known to be needed on linux/x86_64\n   return false;\n}\n\nbool thread_db_thread::haveUserThreadInfo()\n{\n   pthrd_printf(\"haveUserThreadInfo (%d/%d): %d\\n\", (llproc() ? llproc()->getPid() : 0), lwp, thread_initialized);\n   return thread_initialized;\n}\n\nbool thread_db_thread::getTID(Dyninst::THR_ID &tid)\n{\n   if (!fetchThreadInfo()) {\n      return false;\n   }\n#if defined(os_freebsd)\n   tid = (Dyninst::THR_ID) tinfo.ti_thread;\n#else\n   tid = (Dyninst::THR_ID) tinfo.ti_tid;\n#endif\n   return true;\n}\n\nbool thread_db_thread::getStartFuncAddress(Dyninst::Address &addr)\n{\n   if (!fetchThreadInfo()) {\n      return false;\n   }\n   addr = (Dyninst::Address) tinfo.ti_startfunc;\n   return true;\n}\n\nbool thread_db_thread::getStackBase(Dyninst::Address &addr)\n{\n   if (!fetchThreadInfo()) {\n      return false;\n   }\n   addr = (Dyninst::Address) tinfo.ti_stkbase;\n   return true;\n}\n\nbool thread_db_thread::getStackSize(unsigned long &size)\n{\n   if (!fetchThreadInfo()) {\n      return false;\n   }\n   size = (unsigned long) tinfo.ti_stksize;\n   return true;\n}\n\nbool thread_db_thread::getTLSPtr(Dyninst::Address &addr)\n{\n   if (!fetchThreadInfo()) {\n      return false;\n   }\n   addr = (Dyninst::Address) tinfo.ti_tls;\n   return true;\n}\n\n#else\n\n//Empty place holder functions in-case we're built on a machine without libthread_db.so\n\nthread_db_process::thread_db_process(Dyninst::PID p, std::string e, std::vector<std::string> a, std::vector<std::string> envp, std::map<int, int> f) :\n\tint_process(p, e, a, envp, f)\n{\n  cerr << \"Thread DB process constructor\" << endl;\n}\n\nthread_db_process::thread_db_process(Dyninst::PID pid_, int_process *p) :\n\tint_process(pid_, p)\n{\n}\n\nthread_db_process::~thread_db_process()\n{\n}\n\nbool thread_db_process::decodeTdbLWPExit(EventLWPDestroy::ptr)\n{\n   return false;\n}\n\nasync_ret_t thread_db_process::decodeTdbBreakpoint(EventBreakpoint::ptr)\n{\n   return aret_error;\n}\n\nvoid thread_db_process::addThreadDBHandlers(HandlerPool *)\n{\n}\n\nthread_db_thread::thread_db_thread(int_process *p, Dyninst::THR_ID t, Dyninst::LWP l) :\n   int_thread(p, t, l)\n{\n}\n\nthread_db_thread::~thread_db_thread()\n{\n}\n\nbool thread_db_thread::thrdb_getThreadArea(int, Dyninst::Address &)\n{\n   assert(0); //Should not be called if there's no thread_db\n   return false;\n}\n\nbool thread_db_thread::haveUserThreadInfo()\n{\n   return false;\n}\n\nbool thread_db_thread::getTID(Dyninst::THR_ID &)\n{\n   perr_printf(\"Error. thread_db not installed on this platform.\\n\");\n   setLastError(err_unsupported, \"Cannot perform thread operations without thread_db\\n\");\n   return false;\n}\n\nbool thread_db_thread::getStartFuncAddress(Dyninst::Address &)\n{\n   perr_printf(\"Error. thread_db not installed on this platform.\\n\");\n   setLastError(err_unsupported, \"Cannot perform thread operations without thread_db\\n\");\n   return false;\n}\n\nbool thread_db_thread::getStackBase(Dyninst::Address &)\n{\n   perr_printf(\"Error. thread_db not installed on this platform.\\n\");\n   setLastError(err_unsupported, \"Cannot perform thread operations without thread_db\\n\");\n   return false;\n}\n\nbool thread_db_thread::getStackSize(unsigned long &)\n{\n   perr_printf(\"Error. thread_db not installed on this platform.\\n\");\n   setLastError(err_unsupported, \"Cannot perform thread operations without thread_db\\n\");\n   return false;\n}\n\nbool thread_db_thread::getTLSPtr(Dyninst::Address &)\n{\n   perr_printf(\"Error. thread_db not installed on this platform.\\n\");\n   setLastError(err_unsupported, \"Cannot perform thread operations without thread_db\\n\");\n   return false;\n}\n\nbool thread_db_thread::plat_convertToSystemRegs(const int_registerPool &,\n                                                unsigned char *, bool)\n{\n   return true;\n}\n\nasync_ret_t thread_db_process::post_attach(bool b, set<response::ptr> &s) {\n   return int_process::post_attach(b, s);\n}\n\nasync_ret_t thread_db_process::post_create(std::set<response::ptr> &async_responses) {\n   return int_process::post_create(async_responses);\n}\n\nbool thread_db_process::plat_getLWPInfo(lwpid_t, void *) {\n   return false;\n}\n\nconst char *thread_db_process::getThreadLibName(const char *)\n{\n   return \"\";\n}\n\nvoid thread_db_process::freeThreadDBAgent() {\n}\n\nasync_ret_t thread_db_process::getEventForThread(int_eventThreadDB *)\n{\n   return aret_error;\n}\n\nbool thread_db_process::isSupportedThreadLib(string) {\n   return false;\n}\n\nbool thread_db_process::plat_supportThreadEvents() {\n   return false;\n}\n\nbool thread_db_process::setTrackThreads(bool, std::set<std::pair<int_breakpoint *, Address> > &,\n                                                 bool &)\n{\n   perr_printf(\"Error. thread_db not installed on this platform.\\n\");\n   setLastError(err_unsupported, \"Cannot perform thread operations without thread_db\\n\");\n   return false;\n}\n\nbool thread_db_process::isTrackingThreads()\n{\n   perr_printf(\"Error. thread_db not installed on this platform.\\n\");\n   setLastError(err_unsupported, \"Cannot perform thread operations without thread_db\\n\");\n   return false;\n}\n\nThreadTracking *thread_db_process::threaddb_getThreadTracking()\n{\n   perr_printf(\"Error. thread_db not installed on this platform.\\n\");\n   setLastError(err_unsupported, \"Cannot perform thread operations without thread_db\\n\");\n   return NULL;\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/proccontrol/src/loadLibrary/codegen-linux.C": "// Linux-specific routines to generate a code sequence to load a library\n// into a target process.\n\n#include \"loadLibrary/codegen.h\"\n#include <dlfcn.h>\n#include <iostream>\n#include \"PCProcess.h\"\n#include <sys/mman.h>\n\nusing namespace Dyninst;\nusing namespace std;\nusing namespace ProcControlAPI;\n\nstatic const int DLOPEN_MODE = RTLD_NOW | RTLD_GLOBAL;\n\n// Note: this is an internal libc flag -- it is only used\n// when libc and ld.so don't have symbols\n#ifndef __RTLD_DLOPEN\n#define __RTLD_DLOPEN 0x80000000\n#endif\n\nstatic const char DL_OPEN_FUNC_EXPORTED[] = \"dlopen\";\nstatic const char DL_OPEN_LIBC_FUNC_EXPORTED[] = \"__libc_dlopen_mode\";\nstatic const char DL_OPEN_FUNC_NAME[] = \"do_dlopen\";\n\n\nbool Codegen::generateInt() {\n   Address dlopen_addr = 0;\n\n    int mode = DLOPEN_MODE;\n    bool useHiddenFunction = false;\n    bool needsStackUnprotect = false;\n    Address var_addr = 0;\n    Address mprotect_addr = 0;\n    do {\n       dlopen_addr = findSymbolAddr(DL_OPEN_FUNC_EXPORTED, true); \n       if (dlopen_addr) {\n          break;\n       }\n       \n       // This approach will work if libc and the loader have symbols\n       // Note: this is more robust than the next approach\n       useHiddenFunction = true;\n       needsStackUnprotect = true;\n       dlopen_addr = findSymbolAddr(DL_OPEN_FUNC_NAME, true);\n       var_addr = findSymbolAddr(\"__stack_prot\");\n       mprotect_addr = findSymbolAddr(\"mprotect\", true);\n       if (dlopen_addr && var_addr && mprotect_addr) {\n          break;\n       }\n       \n       // If libc and the loader don't have symbols, we need to take a\n       // different approach. We still need to the stack protection turned\n       // off, but since we don't have symbols we use an undocumented flag\n       // to turn off the stack protection\n       useHiddenFunction = false;\n       needsStackUnprotect = false;\n       mode |= __RTLD_DLOPEN;\n       dlopen_addr = findSymbolAddr(DL_OPEN_LIBC_FUNC_EXPORTED, true);\n       if (dlopen_addr) {\n          break;\n       }\n       fprintf(stderr, \"Couldn't find dlopen address, bailing\\n\");\n       // We can't go farther without parsing\n       return false;\n    } while(0);\n\n    assert(dlopen_addr);\n\n    std::vector<Address> arguments;\n\n    Address libbase = copyString(libname_);\n\n    if (useHiddenFunction) {\n       // The argument is a pointer to a struct rather than\n       // arguments directly\n       Address structbase = buildLinuxArgStruct(libbase, mode);\n       arguments.push_back(structbase);\n    }\n    else {\n       arguments.push_back(libbase);\n       arguments.push_back(mode);\n    }\n\n    generateNoops();\n    codeStart_ = buffer_.curAddr();\n    \n    generatePreamble();\n    \n    if (needsStackUnprotect) {\n      if (!generateStackUnprotect(var_addr, mprotect_addr)) return false;\n    }\n\n    if (!generateCall(dlopen_addr, arguments)) return false;\n    \n    return true;\n}\n\nAddress Codegen::buildLinuxArgStruct(Address libbase, unsigned mode) {\n   struct libc_dlopen_args_32 {\n      uint32_t namePtr;\n      uint32_t mode;\n      uint32_t linkMapPtr;\n   };\n   \n   struct libc_dlopen_args_64 {\n      uint64_t namePtr;\n      uint32_t mode;\n      uint64_t linkMapPtr;\n   };\n   \n   // Construct the argument to the internal function\n   struct libc_dlopen_args_32 args32;\n   struct libc_dlopen_args_64 args64;\n   unsigned argsSize = 0;\n   void *argsPtr = NULL;\n\n   if (proc_->getArchitecture() == Arch_x86 ||\n       proc_->getArchitecture() == Arch_ppc32) {\n      args32.namePtr = (uint32_t) libbase;\n      args32.mode = mode;\n      args32.linkMapPtr = 0;\n      argsSize = sizeof(args32);\n      argsPtr = &args32;\n   }\n   else {\n      args64.namePtr = libbase;\n      args64.mode = mode;\n      args64.linkMapPtr = 0;\n      argsSize = sizeof(args64);\n      argsPtr = &args64;\n   }\n\n   return copyBuf(argsPtr, argsSize);\n}\n\nbool Codegen::generateStackUnprotect(Address var_addr, Address mprotect_addr) {\n   // Since we are punching our way down to an internal function, we\n   // may run into problems due to stack execute protection. Basically,\n   // glibc knows that it needs to be able to execute on the stack in\n   // in order to load libraries with dl_open(). It has code in\n   // _dl_map_object_from_fd (the workhorse of dynamic library loading)\n   // that unprotects a global, exported variable (__stack_prot), sets\n   // the execute flag, and reprotects it. This only happens, however,\n   // when the higher-level dl_open() functions (which we skip) are called,\n   // as they append an undocumented flag to the library open mode. Otherwise,\n   // assignment to the variable happens without protection, which will\n   // cause a fault.\n   //\n   // Instead of chasing the value of the undocumented flag, we will\n   // unprotect the __stack_prot variable ourselves (if we can find it).\n\n\n   if (!var_addr || !mprotect_addr) {\n     fprintf(stderr, \"Couldn't find symbols to unprotect stack, bailing\\n\");\n     return false;\n   }\n   Address page_start;\n   Address pagesize = getpagesize();\n\n   page_start = var_addr & ~(pagesize - 1);\n\n\n   std::vector<Address> args;\n   args.push_back(page_start);\n   args.push_back(pagesize);\n   args.push_back(PROT_READ | PROT_WRITE | PROT_EXEC); // read | write | execute\n\n   return generateCall(mprotect_addr, args);\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/proccontrol/src/loadLibrary/codegen.h": "// Codegen.h\n//\n// Interface class for generating a dlopen() call\n//\n\n#if !defined(_INJECTOR_CODEGEN_H_)\n#define _INJECTOR_CODEGEN_H_\n\n#include \"PCProcess.h\"\n#include \"Buffer.h\"\n\nnamespace Dyninst {\n\nnamespace ProcControlAPI {\n\nclass Codegen {\n  public:\n   Codegen(ProcControlAPI::Process *proc,\n           std::string libname);\n   ~Codegen();\n\n   // Override for assembly generation\n   bool generate();\n\n   const Buffer &buffer() { return buffer_; }\n   unsigned startOffset() const;\n\n  private:\n\n   unsigned estimateSize();\n   bool generateInt();\n   Address findSymbolAddr(const std::string name, bool saveTOC = false);\n   Address copyString(std::string);\n   Address copyBuf(void *buf, unsigned size);\n   Address copyByte(unsigned char);\n   Address copyInt(unsigned int);\n   Address copyLong(unsigned long);\n\n#if defined(os_linux)\n   Address buildLinuxArgStruct(Address libbase, unsigned mode);\n   bool generateStackUnprotect(Address var, Address mprotect);\n#endif\n\n   bool generateCall(Address addr, const std::vector<Address> &args);\n\n   bool generateCallIA32(Address addr, const std::vector<Address> &args);\n   bool generateCallAMD64(Address addr, const std::vector<Address> &args);\n\n   bool generateCallPPC32(Address addr, const std::vector<Address> &args);\n   bool generateCallPPC64(Address addr, const std::vector<Address> &args);\n\n\n   bool generatePreamble();\n   bool generatePreambleIA32();\n   bool generatePreambleAMD64();\n\n   bool generatePreamblePPC32();\n   bool generatePreamblePPC64();\n\n   void generatePPC32(Address val, unsigned reg);\n   void generatePPC64(Address val, unsigned reg);\n\n   bool generatePreambleAARCH64();\n   bool generateCallAARCH64(Address addr, const std::vector<Address> &args);\n\n   bool generateTrap();\n   bool generateNoops();\n\n   ProcControlAPI::Process *proc_;\n   std::string libname_;\n\n   Address codeStart_;\n   Buffer buffer_;\n\n   // PPC64 only, but it's handy to stash it here\n   std::map<Address, Address> toc_;\n   int abimajversion_;\n   int abiminversion_;\n};\n\n};\n};\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/proccontrol/src/loadLibrary/codegen-freebsd.C": "// Linux-specific routines to generate a code sequence to load a library\n// into a target process.\n\n#include \"loadLibrary/codegen.h\"\n#include <dlfcn.h>\n#include <iostream>\n#include \"PCProcess.h\"\n#include \"int_process.h\"\n#include \"common/src/pathName.h\"\n#include <sys/mman.h>\n\nusing namespace Dyninst;\nusing namespace std;\nusing namespace ProcControlAPI;\n\nstatic const int DLOPEN_MODE = RTLD_NOW | RTLD_GLOBAL;\n\nconst char DL_OPEN_FUNC_EXPORTED[] = \"dlopen\";\n\nbool Codegen::generateInt() {\n    // We need to make sure that the correct dlopen function is being used -- the\n    // dlopen in the runtime linker. A symbol for dlopen exists in ld.so even\n    // when it is stripped so we should always find that version of dlopen\n\n    auto aout = proc_->libraries().getExecutable();\n    SymReader *objSymReader = proc_->llproc()->getSymReader()->openSymbolReader(aout->getName());\n    if (!objSymReader) {\n      return false;\n    }\n    std::string interp = resolve_file_path(objSymReader->getInterpreterName());\n\n    objSymReader = proc_->llproc()->getSymReader()->openSymbolReader(interp);\n    if (!objSymReader) {\n      return false;\n    }\n    auto lookupSym = objSymReader->getSymbolByName(DL_OPEN_FUNC_EXPORTED);\n    if (!objSymReader->isValidSymbol(lookupSym)) {\n      return false;\n    }\n\n    Address dlopenAddr = objSymReader->getSymbolOffset(lookupSym);\n\n    // But we still need the load addr...\n    bool found = false;\n    for (auto li = proc_->libraries().begin(); li != proc_->libraries().end(); ++li) {\n      std::string canonical = resolve_file_path((*li)->getName());\n      if (canonical == interp) {\n\tfound = true;\n\tdlopenAddr += (*li)->getLoadAddress();\n\tbreak;\n      }\n    }\n    if (!found) {\n      return false;\n    }\n\n    std::vector<Address> arguments;\n\n    Address libbase = copyString(libname_);\n\n    arguments.push_back(libbase);\n    arguments.push_back(DLOPEN_MODE);\n\n    generateNoops();\n    codeStart_ = buffer_.curAddr();\n    \n    generatePreamble();\n    \n    if (!generateCall(dlopenAddr, arguments)) return false;\n    \n    return true;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI_RT/src/RTmutatedBinary_ELF.c": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n * \n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n * \n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n/* $Id: RTmutatedBinary_ELF.c,v 1.29 2007/07/11 17:58:24 ssuen Exp $ */\n\n/* this file contains the code to restore the necessary\n   data for a mutated binary \n */\n\n#include <stdlib.h>\n#include \"dyninstAPI_RT/h/dyninstAPI_RT.h\"\n#include <unistd.h>\n#include  <fcntl.h>\n#include <string.h>\n\n#include <libelf.h>\n\n\n\n#if defined(i386_unknown_linux2_0) \\\n || (defined(arch_power) && defined(os_linux)) \\\n || defined(x86_64_unknown_linux2_4) /* Blind duplication - Ray */\n#define __USE_GNU\n#endif\n\n#include <sys/mman.h>\n#include <dlfcn.h>\n#include <link.h> /* ccw 23 jan 2002 */\n#include <limits.h>\n\n#if defined(i386_unknown_linux2_0) \\\n   || defined(x86_64_unknown_linux2_4) /* Blind duplication - Ray */\nextern ElfW(Dyn) _DYNAMIC[];\n\n#endif\n\n/* Borrowed from Linux's link.h: Allows us to use functions from\n   libelf regardless of word size. */\n//#define ELF_FUNC(type)      _ELF_FUNC (elf, __ELF_NATIVE_CLASS, type)\n#define ELF_FUNC(type)      _ELF_FUNC (Elf, __ELF_NATIVE_CLASS, type)\n#define _ELF_FUNC(e,w,t)    _ELF_FUNC_1 (e, w, _##t)\n#define _ELF_FUNC_1(e,w,t)  e##w##t\n\ntypedef struct {\n      ElfW(Sword) d_tag;\n      union {\n          ElfW(Sword) d_val;\n          ElfW(Addr) d_ptr;\n      } d_un;\n  } __Elf_Dyn;\n\nunsigned long checkAddr;\n/*extern int isMutatedExec;\nchar *buffer;\n*/\n\nstruct link_map* map=NULL;\n\nchar *sharedLibraryInfo = NULL;\nunsigned int originalInsnBkpt;\nunsigned int addressBkpt;\n\n/* \tthis is not misnamed.  In the future, this function will contain\n\tcode to patch the instrumentation of a shared library that has \n\tbeen loaded into a different place during a mutated binary run.\n\n\tNow, it just exit()s, as you can see\n*/\n\nvoid fixInstrumentation(char* soName, unsigned long currAddr, unsigned long oldAddr){\n\tprintf(\" %s loaded at wrong address: 0x%lx (expected at 0x%lx) \\n\", soName, currAddr, oldAddr);\n\tprintf(\" This is an unrecoverable error, the instrumentation will not\");\n\tprintf(\"\\n run correctly if shared libraries are loaded at a different address\\n\");\n\tprintf(\"\\n Exiting.....\\n\");\n\tfflush(stdout);\n        //while(1);\n\t//exit(9);\n}\n\n/* \tthis function checks the shared library (soName) to see if it\n\tis currently loaded (loadAddr) at the same place it was before (address).\n\tIf the shared library is not found in the list (sharedLibraryInfo) that\n\tmean the shared library was *NOT* instrumented and can be loaded\n\tanywhere\n*/\nunsigned long checkSOLoadAddr(char *soName, unsigned long loadAddr){\n\tunsigned long result=0, found = 0;\n\tunsigned long address;\n\tchar *ptr = sharedLibraryInfo;\n\twhile(ptr &&  *ptr && !found ){\n\t\t/*fprintf(stderr,\" CHECKING FOR %s in %s\\n\", ptr, soName);*/\n\n        \tif(strstr(soName, ptr) || strstr(ptr,soName)){\n                \tfound = 1;\n\t\t\tptr += (strlen(ptr) +1);\n\t\t\tmemcpy(&address, ptr, sizeof(unsigned long)); \n\t\t\t/* previous line is done b/c of alignment issues on sparc*/\n\t\t\tif(loadAddr == address) {\n\t\t\t\tresult = 0;\n\t\t\t}else{\n\t\t\t\tresult = address;\n\t\t\t}\t\n\t\t}\n\n\t\tptr += (strlen(ptr) +1);\n\t\tptr += sizeof(unsigned long);\n\t\tptr += sizeof(unsigned long); /* for flag */\n\n\n\t}\n\tif(!found){\n\t\tresult = 0;\n\t\t/*fprintf(stderr,\" NOT FOUND %s\\n\",soName);*/\n\t}\n\n\t/*fprintf(stderr,\" checkSOLoadAddr: %s %lx %lx\\n\", soName, loadAddr, result);*/\n\treturn result;\n}\n\n\n#if defined(i386_unknown_linux2_0) \\\n || defined(x86_64_unknown_linux2_4) /* Blind duplication - Ray */\nunsigned long loadAddr;\nvoid (*dl_debug_state_func)(void);\n\nvoid dyninst_dl_debug_state(){\n\tasm(\"nop\");\n\tif(_r_debug.r_state == 1){\n\tdo {\n\t\t\tif(map->l_next){\n\t\t\t\tmap = map->l_next;\n\t\t\t}\n\t\t\tloadAddr = checkSOLoadAddr(map->l_name, (unsigned long)map->l_ld);/*l_addr*/\n\t\t\tif(loadAddr){\n\t\t\t\tfixInstrumentation(map->l_name, (unsigned long)map->l_ld, loadAddr);/*l_addr*/\n\t\t\t}\n\t\t}while(map->l_next);\n\n\t}\n\n\t/* the following call is used to call\n\t * _dl_debug_state to ensure correctness (if\n\t * someone relies on it being called it is\n\t * execuated after this function)\n\t * The value stored in dl_debug_state_func is\n\t * the address of the function _dl_debug_state\n\t * and is set in checkElfFile\n\t */\n\tasm(\"nop\");\n\tasm(\"nop\");\n\tasm(\"nop\");\n\t(*dl_debug_state_func)();\n\tasm(\"nop\");\n\n}\n\nvoid hack_ld_linux_plt(unsigned long pltEntryAddr){ \n/* this is ugly.\n * save the world needs to check each shared library\n * that is loaded to ensure that it is loaded at the\n * same base address it was loaded at when the mutator/mutatee\n * pair ran.  \n * So, we know dlopen calls _dl_debug_state per the r_debug\n * interface to let the process know a shared library has changed\n * state.\n * with this function we change the Procedure Linkage Table (.plt)\n * for ld-linux.so so that the entry that used to point to\n * _dl_debug_state points to dyninst_dl_debug_state.\n *\n * dyninst_dl_debug_state then calls _dl_debug_state before\n * exiting \n *\n * dont try this at home\n */\n\tunsigned long mprotectAddr = pltEntryAddr - (pltEntryAddr % getpagesize());\t\n\tunsigned long newTarget = (unsigned long) &dyninst_dl_debug_state ;\n\t\n\tmprotect( (void*) mprotectAddr, pltEntryAddr - mprotectAddr + sizeof(long), \n\t\t\t\tPROT_READ|PROT_WRITE|PROT_EXEC);\n\n\tmemcpy( (void*) dl_debug_state_func, (void*) pltEntryAddr, sizeof(long)); \n\n\tmemcpy( (void*) pltEntryAddr, &newTarget, sizeof(long));\n}\n#endif\n\nunsigned (*Elf_version)(unsigned) = NULL;\nElf *(*Elf_begin)(int fildes, Elf_Cmd cmd, Elf *ref) = NULL;\nElf_Scn *(*Elf_getscn)(Elf *elf, size_t index) = NULL;\nElf_Data *(*Elf_getdata)(Elf_Scn *scn, Elf_Data *data) = NULL;\nElf_Scn *(*Elf_nextscn)(Elf *elf, Elf_Scn *scn) = NULL;\nElf32_Shdr *(*Elf32_getshdr)(Elf_Scn *scn) = NULL;\nElf32_Ehdr *(*Elf32_getehdr)(Elf *elf) = NULL;\nElf64_Shdr *(*Elf64_getshdr)(Elf_Scn *scn) = NULL;\nElf64_Ehdr *(*Elf64_getehdr)(Elf *elf) = NULL;\nconst char *(*Elf_errmsg)(int err) = NULL;\nint (*Elf_errno)(void) = NULL;\nint (*Elf_end)(Elf *elf) = NULL;\n\n\nint checkSO(char* soName){\n\tElfW(Shdr) *shdr;\n\tElfW(Ehdr) *   ehdr;\n    \tElf *          elf;\n\tint       fd;\n\tElf_Data *strData;\n\tElf_Scn *scn;\n\tint result = 0;\n\n \tif((fd = (int) open(soName, O_RDONLY)) == -1){\n\t\tRTprintf(\"cannot open : %s\\n\",soName);\n    \t\tfflush(stdout); \n\t\treturn result;\n\t}\n\tif((elf = Elf_begin(fd, ELF_C_READ, NULL)) ==NULL){\n\t\tRTprintf(\"%s %s \\n\",soName, Elf_errmsg(Elf_errno()));\n\t\tRTprintf(\"cannot elf_begin\\n\");\n\t\tfflush(stdout);\n\t\tclose(fd);\n\t\treturn result;\n\t}\n\n\tehdr = ELF_FUNC( getehdr(elf) );\n\tscn = Elf_getscn(elf, ehdr->e_shstrndx);\n\tstrData = Elf_getdata(scn,NULL);\n   \tfor( scn = NULL; !result && (scn = Elf_nextscn(elf, scn)); ){\n\t\tshdr = ELF_FUNC( getshdr(scn) );\n\t\tif(!strcmp((char *)strData->d_buf + shdr->sh_name, \".dyninst_mutated\")) {\n\t\t\tresult = 1;\n\t\t}\n\t}\n\tElf_end(elf);\n\tclose(fd);\n\n\treturn result;\n}\n\nint checkMutatedFile(){\n\n    /* Apparently a future section stomps on the tramp guard. Whoops. Instead,\n       we'll keep the address around and initialize the guard at the end. */\n    int *trampGuardBase_ = NULL;\n    int trampGuardSize_ = 0;\n\n\tElfW(Shdr) *shdr;\n\tElfW(Ehdr) *   ehdr;\n\tElf *          elf;\n\tint       cnt,fd;\n\tElf_Data *elfData,*strData;\n\tElf_Scn *scn;\n\tchar *execStr;\n\tint retVal = 0;\n\tunsigned long mmapAddr;\n\tint pageSize;\n\tAddress dataAddress;\n\tint dataSize;\n\tchar* tmpPtr;\n\tunsigned long updateAddress, updateSize, updateOffset;\n\tunsigned long *dataPtr;\n\tunsigned int numberUpdates,i ;\n\tchar* oldPageData;\n\tDl_info dlip;\n\tint soError = 0; \n\n     char * error_msg = NULL;\n     void * elfHandle = NULL;\n\n\t//fprintf(stderr,\"SBRK 0x%x\\n\",sbrk(1));;\n\n//     elfHandle = dlopen(\"/usr/lib/libelf.so.1\", RTLD_NOW);\n\n     elfHandle = dlopen(\"libelf.so\", RTLD_NOW);\n     if(! elfHandle){\n        error_msg = dlerror();\n        if (error_msg) {\n          //fprintf(stderr,\"Could not open lib: %s- %s\\n\",\"libelf\",error_msg);\n        }\n        else{\n          //fprintf(stderr, \"failure\\n\");\n        }\n\treturn 0;\n     }\n\n     Elf_version = (unsigned (*)(unsigned)) dlsym(elfHandle, \"elf_version\");\n     Elf_begin = (Elf *(*)(int,Elf_Cmd,Elf *)) dlsym(elfHandle, \"elf_begin\");\n     Elf_getscn = (Elf_Scn *(*)(Elf *, size_t)) dlsym(elfHandle, \"elf_getscn\");\n     Elf_nextscn = (Elf_Scn *(*)(Elf *, Elf_Scn *)) dlsym(elfHandle, \"elf_nextscn\");\n     Elf_getdata = (Elf_Data *(*)(Elf_Scn *, Elf_Data *)) dlsym(elfHandle, \"elf_getdata\");\n     Elf32_getehdr = (Elf32_Ehdr *(*)(Elf *)) dlsym(elfHandle, \"elf32_getehdr\");\n     Elf32_getshdr = (Elf32_Shdr *(*)(Elf_Scn *)) dlsym(elfHandle, \"elf32_getshdr\");\n     Elf64_getehdr = (Elf64_Ehdr *(*)(Elf *)) dlsym(elfHandle, \"elf64_getehdr\");\n     Elf64_getshdr = (Elf64_Shdr *(*)(Elf_Scn *)) dlsym(elfHandle, \"elf64_getshdr\");\n     Elf_errmsg = (const char *(*)(int)) dlsym(elfHandle, \"elf_errmsg\");\n     Elf_errno = (int (*)(void)) dlsym(elfHandle, \"elf_errno\");\n     Elf_end = (int (*)(Elf *)) dlsym(elfHandle, \"elf_end\");\n\n\tElf_version(EV_CURRENT);\n\n\texecStr = (char*) malloc(1024);\n\tmemset(execStr,'\\0',1024);\n\n#if defined(i386_unknown_linux2_0) \\\n   || defined(x86_64_unknown_linux2_4) /* Blind duplication - Ray */ \\\n   || (defined(os_linux) && defined(arch_power))\n\tsprintf(execStr,\"/proc/%d/exe\",getpid());\n#endif\n\n\tif((fd = (int) open(execStr, O_RDONLY)) == -1){\n\t\tprintf(\"cannot open : %s\\n\",execStr);\n    \t\tfflush(stdout); \n\t\treturn retVal;\n\t}\n\tif((elf = Elf_begin(fd, ELF_C_READ, NULL)) ==NULL){\n\t\tprintf(\"%s %s \\n\",execStr, Elf_errmsg( Elf_errno()));\n\t\tprintf(\"cannot Elf_begin\\n\");\n\t\tfflush(stdout);\n\t\tclose(fd);\n\t\treturn retVal;\n\t}\n\n\tehdr = ELF_FUNC( getehdr(elf) );\n\tscn = Elf_getscn(elf, ehdr->e_shstrndx);\n\tstrData = Elf_getdata(scn,NULL);\n\tpageSize =  getpagesize();\n\n\t/*fprintf(stderr,\"IN MUTATED FILE\\n\");*/\n   \tfor(cnt = 0, scn = NULL; !soError &&  (scn = Elf_nextscn(elf, scn));cnt++){\n\t\tshdr = ELF_FUNC( getshdr(scn) );\n\t\tif(!strncmp((char *)strData->d_buf + shdr->sh_name, \"dyninstAPItrampgu\", 17)) {\n\t\t\tdataAddress = shdr->sh_addr;\n\t\t\telfData = Elf_getdata(scn, NULL);\n\t\t\ttmpPtr = elfData->d_buf;\n\t\t\t//fprintf(stderr,\"tramp guard addr %x, tmpPtr %p (%d)\\n\", dataAddress, tmpPtr, *tmpPtr);\n                        trampGuardBase_ = (int *)dataAddress;\n                        trampGuardSize_ = *(int *)tmpPtr;\n\n\n\t\t\t/* \twe already own it. \n\t\n\t\t\t\tbecause we have moved the start of the heap beyond this address\n\t\t\t*/\n\n\t\t\t/* set tramp guard to 1 */\n\t\t\tfor(i=0;i<*(int*)tmpPtr;i++){\n                            ((unsigned*) dataAddress)[i]=1;\n                        }\n                        /* This may get reverted, so we'll re-do the work below. */\n\n\t\t}else if(!strncmp((char *)strData->d_buf + shdr->sh_name, \"dyninstAPI_data\", 15)) {\n\t\t\telfData = Elf_getdata(scn, NULL);\n\t\t\ttmpPtr = elfData->d_buf;\n\t\t\tdataAddress = -1;\n\t\t\twhile( dataAddress != 0 ) { \n\t\t\t\t/*tmpPtr may not be aligned on the correct boundry\n\t\t\t\tso use memcpy to set dataSize\n\t\t\t\tdataSize = *(int*) tmpPtr;*/\n\t\t\t\tmemcpy((char*) & dataSize, tmpPtr, sizeof(int));\n\n\t\t\t\ttmpPtr+=sizeof(int);\n\t\t\t\tmemcpy( (char*) & dataAddress, tmpPtr, sizeof(Address));\n\n\t\t\t\ttmpPtr += sizeof(Address);\n\t\t\t\tif(dataAddress){\n\t\t\t\t\tmemcpy((char*) dataAddress, tmpPtr, dataSize);\n\n\t\t\t\t\ttmpPtr += dataSize;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}else if(!strncmp((char *)strData->d_buf + shdr->sh_name, \"dyninstAPI_\",11)){ \n\t\t\tchar *tmpStr = strchr((char *)strData->d_buf + shdr->sh_name, (int)'_'); ;\n\n\t\t\ttmpStr ++;\n\n\t\t\tif( *tmpStr>=0x30 && *tmpStr <= 0x39 ) {\n\t\t\t\t/* we dont want to do this unless this is a dyninstAPI_### section\n\t\t\t\t\tspecifically, dont do this for dyninstAPI_SharedLibraries*/\n\t\t\t\tretVal = 1; /* this is a restored run */\n\n\t\t\t\tif( *tmpStr>=0x30 && *tmpStr <= 0x39 ) {\n\t\t\t\t\t/* this is a heap tramp section */\n\n\t\t\t\t\t/* \tthe new starting address of the heap is immediately AFTER the last\n\t\t\t\t\t\tdyninstAPI_### section, so we can ALWAYS memcpy the data into place\n\t\t\t\t\t\tsee the value of newHeapAddr in writeBackElf.C\n\t\t\t\t\t*/\n\t\t\t\t\telfData = Elf_getdata(scn, NULL);\n\t\t\t\t\tmemcpy((void*)shdr->sh_addr, elfData->d_buf, shdr->sh_size);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!strcmp((char *)strData->d_buf + shdr->sh_name, \"dyninstAPI_mutatedSO\")){\n\t\t\t/* make sure the mutated SOs are loaded, not the original ones */\n\t\t\tchar *soNames;\n\t\t\tint mutatedFlag = 0;\n\t\t\tint totallen=0;\n#if defined(i386_unknown_linux2_0) \\\n   || (defined(arch_power) && defined(os_linux)) \\\n   || defined(x86_64_unknown_linux2_4) /* Blind duplication - Ray */\n\t\t\tstruct link_map *lmap=0;\n#endif\n\t\t\tchar *loadedname, *dyninstname;\n\n\t\t\telfData = Elf_getdata(scn, NULL);\n\n\t\t\tsharedLibraryInfo = (char*) malloc(elfData->d_size);\n\t\t\tmemcpy(sharedLibraryInfo, elfData->d_buf, elfData->d_size);\n\t\t\tlmap = _r_debug.r_map;\n\n\t\t\tfor(soNames = (char*) elfData->d_buf ; totallen<elfData->d_size; \n\t\t\t\tsoNames = &((char*) elfData->d_buf)[strlen(soNames)+1+sizeof(unsigned int) +sizeof(unsigned int)]){\n\t\t\t\t/* added a +sizeof(unsigned int) above for flag */\n\t\t\t\ttotallen += strlen(soNames) + 1 + sizeof(unsigned int) +sizeof(unsigned int); /*for flag*/\n\t\t\t\tmemcpy(&mutatedFlag, &((char*) elfData->d_buf)[totallen-sizeof(unsigned int)], sizeof(unsigned int));\n\t\t\t\tlmap = _r_debug.r_map;\n\t\t\t\twhile(lmap){\n\t\t\t\t\tloadedname = strrchr(lmap->l_name,'/');\n\t\t\t\t\tdyninstname =  strrchr((const char *)soNames,(int)'/');\n\t\t\t\t\tif(loadedname == 0){\n\t\t\t\t\t\tloadedname = lmap->l_name;\n\t\t\t\t\t}\n\t\t\t\t\tif(dyninstname == 0){\n\t\t\t\t\t\tdyninstname = soNames;\n\t\t\t\t\t}\t\n\t\t\t\t\tif(mutatedFlag && !strcmp(loadedname, dyninstname)) {\n\t\t\t\t\t\tif(!checkSO(lmap->l_name)){\n\t\t\tprintf(\"ERROR: %s was mutated during saveworld and\",lmap->l_name);\n\t\t\tprintf(\" the currently loaded %s has not been mutated\\n\", lmap->l_name);\n\t\t\tprintf(\" check your LD path to be sure the mutated %s is visible\\n\", soNames);\n\t\t\t\t\t\t\tsoError = 1;\n\t\t\n\t\t\t\t\t\t}\n\n\t\t\n\t\t\t\t\t}\n\t\t\t\t\tlmap = lmap->l_next;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!strcmp((char *)strData->d_buf + shdr->sh_name, \"rtlib_addr\")){\n\t\t\tunsigned int ptr;\n\t\t\tint done = 0;\n\n\n\t\t\telfData = Elf_getdata(scn, NULL);\n\n\t\t\t/*ptr = elfData->d_buf;*/\n\t\t\t/* use memcpy because of alignment issues on sparc */\t\n\t\t\tmemcpy(&ptr,elfData->d_buf,sizeof(unsigned int));\n\n\t\n\t\t\tmap = _r_debug.r_map;\n\n\t\t\twhile(map && !done){\n\t\t\t\t/*fprintf(stderr,\"CHECKING %s 0x%x\\n\", map->l_name,map->l_addr);*/\n\t\t\t\tif( * map->l_name  && strstr(map->l_name, \"libdyninstAPI_RT\")){\n\t\t\t\t\tunsigned long loadaddr = (unsigned long)map->l_addr;\n\n\t\t\t\t\t/* \tLINUX PROBLEM. in the link_map structure the map->l_addr field is NOT\n\t\t\t\t\t\tthe load address of the dynamic object, as the documentation says.  It is the\n\t\t\t\t\t\tRELOCATED address of the object. If the object was not relocated then the\n\t\t\t\t\t\tvalue is ZERO.\n\n\t\t\t\t\t\tSo, on LINUX we check the address of the dynamic section, map->l_ld, which is\n\t\t\t\t\t\tcorrect.\n\t\t\t\t\t*/\n#if defined(i386_unknown_linux2_0) || defined(x86_64_unknown_linux2_4)\n\t\t\t\t\tloadaddr = (unsigned long)map->l_ld;\n#endif\n\n\t\t\t\t\t/*fprintf(stderr,\" loadadd %x ptr %x\\n\", loadaddr, ptr);*/\n\t\t\t\t\tif( loadaddr !=  (ptr)){\n\t\t\t\t\t\tfixInstrumentation(map->l_name, loadaddr,  (ptr));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* check every loaded SO but leave map such that map->l_next == NULL.\n\t\t\t\t\tThe next time a SO is loaded it will be placed at \n\t\t\t\t\tmap->l_next, so keep a tail pointer such that we \n\t\t\t\t\tdont need to loop through the entire list again\n\t\t\t\t*/\n\t\t\t\tif(map->l_next){\n\t\t\t\t\tmap = map->l_next;\n\t\t\t\t}else{\n\t\t\t\t\tdone = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!strcmp((char *)strData->d_buf + shdr->sh_name, \"dyninstAPI_SharedLibraries\")){\n\t\t\tunsigned long diffAddr;\n\t\t\tunsigned long ld_linuxBaseAddr;\n\t\t\tchar *ptr;\n\t\t\tint done = 0;\n\n\n\t\t\telfData = Elf_getdata(scn, NULL);\n\n\t\t\tptr = elfData->d_buf;\n\t\t\n\t\t\tmap = _r_debug.r_map;\n\n\t\t\twhile(map && !done){\n\t\t\t\tif( map->l_name && * map->l_name ){\n\t\t\t\t\tunsigned int loadaddr = map->l_addr;\n\n\t\t\t\t\t/* \tLINUX PROBLEM. in the link_map structure the map->l_addr field is NOT\n\t\t\t\t\t\tthe load address of the dynamic object, as the documentation says.  It is the\n\t\t\t\t\t\tRELOCATED address of the object. If the object was not relocated then the\n\t\t\t\t\t\tvalue is ZERO.\n\n\t\t\t\t\t\tSo, on LINUX we check the address of the dynamic section, map->l_ld, which is\n\t\t\t\t\t\tcorrect.\n\t\t\t\t\t*/\n#if defined(i386_unknown_linux2_0) || defined(x86_64_unknown_linux2_4)\n\t\t\t\t\tloadaddr = (unsigned long)map->l_ld;\n#endif\n\n\t\t\t\t\t/*fprintf(stderr,\" CHECKING: %s %x\\n\",map->l_name, map->l_addr);*/\n\t\t\t\t\tdiffAddr = checkSOLoadAddr(map->l_name, loadaddr);\n\t\t\t\t\tif(diffAddr){\n\t\t\t\t\t\tfixInstrumentation(map->l_name, loadaddr, diffAddr);\n\t\t\t\t\t}\n#if defined(i386_unknown_linux2_0) \\\n || defined(x86_64_unknown_linux2_4) /* Blind duplication - Ray */\n\t\t\t\t\t/* ld-linux.so will never be hand relocated so l_addr should be correct. right? */\n\t\t\t\t\tif(strstr(map->l_name, \"ld-linux.so\")){\n\t\t\t\t\t\tld_linuxBaseAddr = map->l_addr;\n\t\t\t\t\t}\t\n#endif\n\t\t\t\t}\n\t\t\t\t/* check every loaded SO but leave map such that map->l_next == NULL.\n\t\t\t\t\tThe next time a SO is loaded it will be placed at \n\t\t\t\t\tmap->l_next, so keep a tail pointer such that we \n\t\t\t\t\tdont need to loop through the entire list again\n\t\t\t\t*/\n\t\t\t\tif(map->l_next){\n\t\t\t\t\tmap = map->l_next;\n\t\t\t\t}else{\n\t\t\t\t\tdone = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( shdr->sh_addr != 0){\n\t\t\t\t/* if the addr is zero, then there is \n\t\t\t\t\tno PLT entry for dlopen.  if there is\n\t\t\t\t\tno entry for dlopen the mutatee must not\n\t\t\t\t\tcall it.  -- what about calling it from\n\t\t\t\t\ta shared lib that is statically loaded?\n\t\t\t\t*/\n\n\t\t\t/* WHY IS THERE A POUND DEFINE HERE? \n\n\t\t\t\twell, we need to intercept the dlopen calls from the mutated binary\n\t\t\t\tbecause our trampolines expect the shared libraries to be in\n\t\t\t\ta particular location and if they are not where they are expected\n\t\t\t\tour trampolines can jump off into nothingness, or even worse, some\n\t\t\t\trandom bit of executable code.  \n\n\t\t\t\tSo we must intercept the dlopen call and then check to be sure\n\t\t\t\tthe shared libraries are loaded in the same place as before.  If\n\t\t\t\tthey are not we exit with a message to the user saying this is\n\t\t\t\ta fatal error.\n\t\t\n\t\t\t\tNote, only shared libraries that have been instrumented are checked\n\t\t\t\there.  \n\t\t\t*/\n\n#if defined(i386_unknown_linux2_0) \\\n   || defined(x86_64_unknown_linux2_4) /* Blind duplication - Ray */\n\t\t\t/* install jump to catch call to _dl_debug_state */\n\t\t\t/* see comment int hack_ld_linux_plt for explainations */\n\t\t\thack_ld_linux_plt(ld_linuxBaseAddr + shdr->sh_addr); \n#endif\n\t\t}/* shdr->sh_addr != 0 */ \n\t\t}\n\t\tif( !strncmp((char *)strData->d_buf + shdr->sh_name, \"dyninstAPIhighmem_\",18)){\n\t\t\t/*the layout of dyninstAPIhighmem_ is:\n\t\t\tpageData\n\t\t\taddress of update\n\t\t\tsize of update\n\t\t\t...\t\n\t\t\taddress of update\n\t\t\tsize of update\t\n\t\t\tnumber of updates\n\t\n\t\t\twe must ONLY overwrite the updates, the other\n\t\t\tareas of the page may be important (and different than\n\t\t\tthe saved data in the file.  we first copy out the\n\t\t\tpage, the apply the updates to it, and then\n\t\t\twrite it back.\n\t\t\t*/\n\n\t\t\tint oldPageDataSize;\n\t\t\tint count =0;\n\n\t\t\tretVal = 1; /* just to be sure */\n\t\t\telfData = Elf_getdata(scn, NULL);\n\t\t\tnumberUpdates = 0;\n\t\t\t\n\t\t\t/*this section may be padded out with zeros to align the next section\n\t\t\t  so we need to look backwards until we find a nonzero value */\n\t\t\twhile(numberUpdates == 0){\n\t\t\t\tcount++;\n\t\t\t\tnumberUpdates = (unsigned int) ( ((unsigned int*) elfData->d_buf)[\n\t\t\t\t\t(elfData->d_size - (sizeof(unsigned int)*count))/ sizeof(unsigned int) ]);\n\t\t\t}\n\n\t\t\t/*fprintf(stderr,\" numberUpdates: %d :: (%d - 4) / 4  %x\\n\", numberUpdates, elfData->d_size, (unsigned int*) &elfData->d_buf );*/\n\n\t\t\toldPageDataSize = shdr->sh_size-(((2*numberUpdates)* sizeof(unsigned int)) +((sizeof(unsigned int)*count))) ;\n\n\n\t\t\toldPageData = (char*) malloc(oldPageDataSize+sizeof(unsigned long));\n\t\t\t/*fprintf(stderr,\"oldpagedatasize %d datasize %d \\n\",oldPageDataSize,elfData->d_size);\n\t\t\tperror(\"malloc\");*/\n\t\t\t/*copy old page data */\n\n\n\t\t\t/* probe memory to see if we own it */\n\t\t\tcheckAddr = dladdr((void*)shdr->sh_addr, &dlip);\n\n\n\t\t\tupdateSize  = shdr->sh_size-((2*numberUpdates)* (sizeof(unsigned int)) -(count* (sizeof(unsigned int))));\n\t\t\t/*fprintf(stderr,\" updateSize : %d-((2 * %d + 1) * 4))\",shdr->sh_size, numberUpdates);*/\n\t\n\t\t\tif(!checkAddr){ \n\t\t\t\t/* we dont own it,mmap it!*/\n\n                        \tmmapAddr = shdr->sh_offset;\n                        \tmmapAddr =(unsigned long) mmap((void*) shdr->sh_addr,oldPageDataSize,\n                                \tPROT_READ|PROT_WRITE|PROT_EXEC,MAP_FIXED|MAP_PRIVATE,fd,mmapAddr);\n\t\t\t\t\t/*fprintf(stderr,\"MMAP %x %d %x size: %x\\n\",shdr->sh_addr, mmapAddr,shdr->sh_offset,oldPageDataSize);*/\n\t\t\t\t\t\n\n\t\t\t}else{\n\t\t\t\t/*we own it, finish the memcpy */\n\t\t\t\tmmapAddr = (unsigned long) memcpy((void*) oldPageData, \n                                      (const void*) shdr->sh_addr, oldPageDataSize);\n\t\t\t\t/*fprintf(stderr,\"memcpy %x %d\\n\",shdr->sh_addr, updateSize);*/\n\n\t\t\t}\n\n\t\t\tdataPtr =(unsigned long *) &(((char*)  elfData->d_buf)[oldPageDataSize]);\t\n\t\t\t/*apply updates*/\n\t\t\tfor(i = 0; i< numberUpdates; i++){\n\t\t\t\tupdateAddress = *dataPtr; \n\t\t\t\tupdateSize = *(++dataPtr);\n\n\t\t\t\tupdateOffset = updateAddress - shdr->sh_addr;\n\t\t\t\t/*do update*/\t\n\t\t\t\t/*fprintf(stderr,\"updateAddress %x : %x %x %d %d\\n\",updateAddress,&( oldPageData[updateOffset]), &(((char*)elfData->d_buf)[updateOffset]) , updateSize,updateOffset);*/\n\t\t\t\tmemcpy(&( oldPageData[updateOffset]),\n\t\t\t\t\t\t&(((char*)elfData->d_buf)[updateOffset]) , updateSize);\t\n\n\t\t\t\tdataPtr ++;\n\n\t\t\t\n\t\t\t} \n\t\t\tif(!checkAddr){\n\t\t\t\tmmapAddr = shdr->sh_offset ;\n\n\t\t\t\tmmapAddr =(unsigned long) mmap((void*) shdr->sh_addr,oldPageDataSize, \n\t\t\t\t\tPROT_READ|PROT_WRITE|PROT_EXEC, MAP_FIXED| MAP_PRIVATE,fd,mmapAddr);\n\n\t\t\t\t\t/*fprintf(stderr,\"2MMAP %x %d\\n\",shdr->sh_addr, mmapAddr);*/\n\n\n\t\t\t}else{\n\n\t\t\t\tmemcpy((void*) shdr->sh_addr, oldPageData,oldPageDataSize );\n\t\t\t\t/*fprintf(stderr,\"2memcpy %x %d\\n\",shdr->sh_addr, oldPageDataSize);*/\n\n\t\t\t}\n\t\t}\n\t\tif(!strcmp((char *)strData->d_buf + shdr->sh_name, \"dyninstAPI_loadLib\")){\n\t\t\t/* ccw 14 may 2002 */\n\t\t\t/* this section loads shared libraries into the mutated binary\n\t\t\t\tthat were loaded by BPatch_thread::loadLibrary */\n\t\t\tvoid * handle =NULL;\n\t\t\telfData = Elf_getdata(scn, NULL);\n\t\t\ttmpPtr = elfData->d_buf;\n\n\t\t\twhile(*tmpPtr) { \n\t\t\t\thandle = dlopen(tmpPtr, RTLD_LAZY);\n\t\t\t\tif(handle){\n\n\t\t\t\t}else{\n\n\t\t\t\t\tprintf(\" %s cannot be loaded at the correct address\\n\", tmpPtr );\n\t\t\t\t\tprintf(\" This is an unrecoverable error, the instrumentation will not\");\n\t\t\t\t\tprintf(\"\\n run correctly if shared libraries are loaded at a different address\\n\");\n\t\t\t\t\tprintf(\"\\n Exiting.....\\n\");\n\n\t\t\t\t\tprintf(\"\\n%s\\n\",dlerror());\n\t\t\t\t\tfflush(stdout);\n\t\t\t\t\texit(9);\n\n\t\t\t\t}\n                                /* brk ptr not used for ELF */\n\t\t\t\ttmpPtr += (strlen(tmpPtr) +1 + sizeof(void *));\t\n\n\t\t\t}\n\n\t\t}\n\t}\n\n\n        Elf_end(elf);\n        close(fd);\n\n\tfree(execStr);\n\n\tif(soError){\n\t\texit(2);\n\t}\n\n        for(i=0;i < trampGuardSize_; i++){\n            trampGuardBase_[i]=1;\n        }\n        \n\treturn retVal;\n}\n/* vim:set ts=5: */\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI_RT/src/RTlinux.c": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n *\n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n *\n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n/************************************************************************\n * $Id: RTlinux.c,v 1.54 2008/04/11 23:30:44 legendre Exp $\n * RTlinux.c: mutatee-side library function specific to Linux\n ************************************************************************/\n\n#include \"dyninstAPI_RT/h/dyninstAPI_RT.h\"\n#include \"dyninstAPI_RT/src/RTthread.h\"\n#include \"dyninstAPI_RT/src/RTcommon.h\"\n#include <assert.h>\n#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n\n#if !defined(DYNINST_RT_STATIC_LIB)\n#include <dlfcn.h>\n#endif\n\n#include <sys/types.h>\n#include <sys/syscall.h>\n#include <string.h>\n#include <errno.h>\n#include <signal.h>\n#include <sys/mman.h>\n#include <link.h>\n\n#if defined(DYNINST_RT_STATIC_LIB)\n/*\n * The weak symbol here removes the dependence of the static version of this\n * library on pthread_self. If pthread_self is available, then it will be\n * linked.  Otherwise, the linker will ignore it.\n */\n#pragma weak pthread_self\nextern pthread_t pthread_self(void);\n#else\n#include <pthread.h>\n#endif\n\nextern double DYNINSTstaticHeap_512K_lowmemHeap_1[];\nextern double DYNINSTstaticHeap_16M_anyHeap_1[];\nextern unsigned long sizeOfLowMemHeap1;\nextern unsigned long sizeOfAnyHeap1;\n\nstatic struct trap_mapping_header *getStaticTrapMap(unsigned long addr);\n\n#if defined(arch_power) && defined(arch_64bit) && defined(os_linux)\nunsigned long DYNINSTlinkSave;\nunsigned long DYNINSTtocSave;\n#endif\n\n/************************************************************************\n * void DYNINSTbreakPoint(void)\n *\n * stop oneself.\n************************************************************************/\n\n#ifndef SYS_tkill\n#define SYS_tkill 238\n#endif\n\nint t_kill(int pid, int sig) {\n    static int has_tkill = 1;\n    long int result = 0;\n    if (has_tkill) {\n        result = syscall(SYS_tkill, pid, sig);\n        if (result == -1 && errno == ENOSYS) {\n            has_tkill = 0;\n        }\n    }\n    if (!has_tkill) {\n        result = kill(pid, sig);\n    }\n\n    return (result == 0);\n}\n\nvoid DYNINSTbreakPoint()\n{\n   if (DYNINSTstaticMode)\n      return;\n   // Call into a funtion that contains a \n   // trap instruction. \n   DYNINSTtrapFunction();\n}\n\nstatic int failed_breakpoint = 0;\nvoid uncaught_breakpoint(int sig)\n{\n   (void)sig; /* unused parameter */\n   failed_breakpoint = 1;\n}\n\nvoid DYNINSTsafeBreakPoint()\n{\n   if (DYNINSTstaticMode)\n      return;\n\n    DYNINST_break_point_event = 2; /* Not the same as above */\n    //    while (DYNINST_break_point_event)\n    kill(dyn_lwp_self(), SIGSTOP);\n}\n\nvoid mark_heaps_exec() {\n\t/* Grab the page size, to align the heap pointer. */\n\tlong int pageSize = sysconf( _SC_PAGESIZE );\n\tif( pageSize == 0 || pageSize == - 1 ) {\n\t\tfprintf( stderr, \"*** Failed to obtain page size, guessing 16K.\\n\" );\n\t\tperror( \"mark_heaps_exec\" );\n\t\tpageSize = 1024 * 16;\n\t\t} /* end pageSize initialization */\n\n\t/* Align the heap pointer. */\n\tunsigned long int alignedHeapPointer = (unsigned long int) DYNINSTstaticHeap_16M_anyHeap_1;\n\talignedHeapPointer = (alignedHeapPointer) & ~(pageSize - 1);\n\tunsigned long int adjustedSize = (unsigned long int) DYNINSTstaticHeap_16M_anyHeap_1 - alignedHeapPointer + sizeOfAnyHeap1;\n\n\t/* Make the heap's page executable. */\n\tint result = mprotect( (void *) alignedHeapPointer, (size_t) adjustedSize, PROT_READ | PROT_WRITE | PROT_EXEC );\n\tif( result != 0 ) {\n\t\tfprintf( stderr, \"%s[%d]: Couldn't make DYNINSTstaticHeap_16M_anyHeap_1 executable!\\n\", __FILE__, __LINE__);\n\t\tperror( \"mark_heaps_exec\" );\n\t\t}\n\tRTprintf( \"*** Marked memory from 0x%lx to 0x%lx executable.\\n\", alignedHeapPointer, alignedHeapPointer + adjustedSize );\n\n\t/* Mark _both_ heaps executable. */\n\talignedHeapPointer = (unsigned long int) DYNINSTstaticHeap_512K_lowmemHeap_1;\n\talignedHeapPointer = (alignedHeapPointer) & ~(pageSize - 1);\n\tadjustedSize = (unsigned long int) DYNINSTstaticHeap_512K_lowmemHeap_1 - alignedHeapPointer + sizeOfLowMemHeap1;\n\n\t/* Make the heap's page executable. */\n\tresult = mprotect( (void *) alignedHeapPointer, (size_t) adjustedSize, PROT_READ | PROT_WRITE | PROT_EXEC );\n\tif( result != 0 ) {\n\t\tfprintf( stderr, \"%s[%d]: Couldn't make DYNINSTstaticHeap_512K_lowmemHeap_1 executable!\\n\", __FILE__, __LINE__ );\n\t\tperror( \"mark_heaps_exec\" );\n\t\t}\n\tRTprintf( \"*** Marked memory from 0x%lx to 0x%lx executable.\\n\", alignedHeapPointer, alignedHeapPointer + adjustedSize );\n\t} /* end mark_heaps_exec() */\n\n/************************************************************************\n * void DYNINSTos_init(void)\n *\n * OS initialization function\n************************************************************************/\nint DYNINST_sysEntry;\n\n#if !defined(DYNINST_RT_STATIC_LIB)\n/*\n * For now, removing dependence of static version of this library\n * on libdl.\n */\ntypedef struct dlopen_args {\n  const char *libname;\n  int mode;\n  void *result;\n  void *caller;\n} dlopen_args_t;\n\nvoid *(*DYNINST_do_dlopen)(dlopen_args_t *) = NULL;\n\nstatic int get_dlopen_error() {\n   char *err_str;\n   err_str = dlerror();\n   if (err_str) {\n      strncpy(gLoadLibraryErrorString, err_str, (size_t) ERROR_STRING_LENGTH);\n      return 1;\n   }\n   else {\n      sprintf(gLoadLibraryErrorString,\"unknown error with dlopen\");\n      return 0;\n   }\n   return 0;\n}\n\nint DYNINSTloadLibrary(char *libname)\n{\n   void *res;\n   gLoadLibraryErrorString[0]='\\0';\n   res = dlopen(libname, RTLD_LAZY | RTLD_GLOBAL);\n   if (res)\n   {\n      return 1;\n   }\n\n   get_dlopen_error();\n#if defined(arch_x86)\n   /* dlopen on recent glibcs has a \"security check\" so that\n      only registered modules can call it. Unfortunately, progs\n      that don't include libdl break this check, so that we\n      can only call _dl_open (the dlopen worker function) from\n      within glibc. We do this by calling do_dlopen\n      We fool this check by calling an addr written by the\n      mutator */\n   if (strstr(gLoadLibraryErrorString, \"invalid caller\") != NULL &&\n       DYNINST_do_dlopen != NULL) {\n      dlopen_args_t args;\n      args.libname = libname;\n      args.mode = RTLD_NOW | RTLD_GLOBAL;\n      args.result = 0;\n      args.caller = (void *)DYNINST_do_dlopen;\n      // There's a do_dlopen function in glibc. However, it's _not_\n      // exported; thus, getting the address is a bit of a pain.\n\n      (*DYNINST_do_dlopen)(&args);\n      // Duplicate the above\n      if (args.result != NULL)\n      {\n         return 1;\n      }\n      else\n         get_dlopen_error();\n   }\n#endif\n   return 0;\n}\n#endif\n\n//Define this value so that we can compile on a system that doesn't have\n// gettid and still run on one that does.\n#if !defined(SYS_gettid)\n\n#if defined(arch_x86)\n#define SYS_gettid 224\n#elif defined(arch_x86_64)\n#define SYS_gettid 186\n#endif\n\n#endif\n\nint dyn_lwp_self()\n{\n   static int gettid_not_valid = 0;\n   int result;\n\n   if (gettid_not_valid)\n      return getpid();\n\n   result = syscall((long int) SYS_gettid);\n   if (result == -1 && errno == ENOSYS)\n   {\n      gettid_not_valid = 1;\n      return getpid();\n   }\n   return result;\n}\n\nint dyn_pid_self()\n{\n   return getpid();\n}\n\ndyntid_t (*DYNINST_pthread_self)(void);\n\ndyntid_t dyn_pthread_self()\n{\n   dyntid_t me;\n   if (DYNINSTstaticMode) {\n#if defined(DYNINST_RT_STATIC_LIB)\n       /* This special case is necessary because the static\n        * version of libc doesn't define a version of pthread_self\n        * unlike the shared version of the library.\n        */\n       if( !pthread_self ) {\n           return (dyntid_t) DYNINST_SINGLETHREADED;\n       }\n#endif\n      return (dyntid_t) pthread_self();\n   }\n   if (!DYNINST_pthread_self) {\n      return (dyntid_t) DYNINST_SINGLETHREADED;\n   }\n   me = (*DYNINST_pthread_self)();\n   return (dyntid_t) me;\n}\n\n/*\n   We reserve index 0 for the initial thread. This value varies by\n   platform but is always constant for that platform. Wrap that\n   platform-ness here.\n*/\nint DYNINST_am_initial_thread( dyntid_t tid ) {\n\t(void)tid; /* unused parameter */\n\tif( dyn_lwp_self() == getpid() ) {\n\t\treturn 1;\n   }\n\treturn 0;\n} /* end DYNINST_am_initial_thread() */\n\n#if defined(cap_mutatee_traps)\n\n#include <ucontext.h>\n\n// Register numbers experimentally verified\n\n#if defined(arch_x86)\n  #define UC_PC(x) x->uc_mcontext.gregs[14]\n#elif defined(arch_x86_64)\n  #if defined(MUTATEE_32)\n    #define UC_PC(x) x->uc_mcontext.gregs[14]\n  #else // 64-bit\n    #define UC_PC(x) x->uc_mcontext.gregs[16]\n  #endif // amd-64\n#elif defined(arch_power)\n  #if defined(arch_64bit)\n    #define UC_PC(x) x->uc_mcontext.regs->gpr[32]\n  #else // 32-bit\n    #define UC_PC(x) x->uc_mcontext.uc_regs->gregs[32]\n  #endif // power\n#elif defined(arch_aarch64)\n\t//#warning \"UC_PC: in aarch64, pc is not directly accessable.\"\n\t//aarch64 pc is not one of 31 GPRs, but an independent reg\n\t#define UC_PC(x) x->uc_mcontext.pc\n#endif // UC_PC\n\nextern volatile unsigned long dyninstTrapTableUsed;\nextern volatile unsigned long dyninstTrapTableVersion;\nextern volatile trapMapping_t *dyninstTrapTable;\nextern volatile unsigned long dyninstTrapTableIsSorted;\n\n/**\n * This comment is now obsolete, left for historic purposes\n *\n * Called by the SIGTRAP handler, dyninstTrapHandler.  This function is\n * closly intwined with dyninstTrapHandler, don't modify one without\n * understanding the other.\n *\n * This function sets up the calling context that was passed to the\n * SIGTRAP handler so that control will be redirected to our instrumentation\n * when we do the setcontext call.\n *\n * There are a couple things that make this more difficult than it should be:\n *   1. The OS provided calling context is similar to the GLIBC calling context,\n *      but not compatible.  We'll create a new GLIBC compatible context and\n *      copy the possibly stomped registers from the OS context into it.  The\n *      incompatiblities seem to deal with FP and other special purpose registers.\n *   2. setcontext doesn't restore the flags register.  Thus dyninstTrapHandler\n *      will save the flags register first thing and pass us its value in the\n *      flags parameter.  We'll then push the instrumentation entry and flags\n *      onto the context's stack.  Instead of transfering control straight to the\n *      instrumentation, we'll actually go back to dyninstTrapHandler, which will\n *      do a popf/ret to restore flags and go to instrumentation.  The 'retPoint'\n *      parameter is the address in dyninstTrapHandler the popf/ret can be found.\n **/\n\nvoid dyninstTrapHandler(int sig, siginfo_t *sg, ucontext_t *context)\n{\n   void *orig_ip;\n   void *trap_to;\n   (void)sig; /* unused parameter */\n   (void)sg; /* unused parameter */\n\n   orig_ip = (void *) UC_PC(context);\n   assert(orig_ip);\n   // Find the new IP we're going to and substitute. Leave everything else untouched.\n   if (DYNINSTstaticMode) {\n      unsigned long zero = 0;\n      unsigned long one = 1;\n      struct trap_mapping_header *hdr = getStaticTrapMap((unsigned long) orig_ip);\n      assert(hdr);\n      volatile trapMapping_t *mapping = &(hdr->traps[0]);\n      trap_to = dyninstTrapTranslate(orig_ip,\n                                     (unsigned long *) &hdr->num_entries,\n                                     &zero,\n                                     &mapping,\n                                     &one);\n   }\n   else {\n      trap_to = dyninstTrapTranslate(orig_ip,\n                                     &dyninstTrapTableUsed,\n                                     &dyninstTrapTableVersion,\n                                     &dyninstTrapTable,\n                                     &dyninstTrapTableIsSorted);\n\n   }\n   UC_PC(context) = (long) trap_to;\n}\n\n#if defined(cap_binary_rewriter)\n\nextern struct r_debug _r_debug;\nDLLEXPORT struct r_debug _r_debug __attribute__ ((weak));\n\n/* Verify that the r_debug variable is visible */\nvoid r_debugCheck() { assert(_r_debug.r_map); }\n\n#define NUM_LIBRARIES 512 //Important, max number of rewritten libraries\n\n#define WORD_SIZE (8 * sizeof(unsigned))\n#define NUM_LIBRARIES_BITMASK_SIZE (1 + NUM_LIBRARIES / WORD_SIZE)\nstruct trap_mapping_header *all_headers[NUM_LIBRARIES];\n\nstatic unsigned all_headers_current[NUM_LIBRARIES_BITMASK_SIZE];\nstatic unsigned all_headers_last[NUM_LIBRARIES_BITMASK_SIZE];\n\n#if !defined(arch_x86_64) || defined(MUTATEE_32)\ntypedef Elf32_Dyn ElfX_Dyn;\n#else\ntypedef Elf64_Dyn ElfX_Dyn;\n#endif\n\nstruct trap_mapping_header *getStaticTrapMap(unsigned long addr);\n\nstatic int parse_libs();\nstatic int parse_link_map(struct link_map *l);\nstatic void clear_unloaded_libs();\n\nstatic void set_bit(unsigned *bit_mask, int bit, char value);\n//static char get_bit(unsigned *bit_mask, int bit);\nstatic void clear_bitmask(unsigned *bit_mask);\nstatic unsigned get_next_free_bitmask(unsigned *bit_mask, int last_pos);\nstatic unsigned get_next_set_bitmask(unsigned *bit_mask, int last_pos);\n\nstatic tc_lock_t trap_mapping_lock;\n\nstatic struct trap_mapping_header *getStaticTrapMap(unsigned long addr)\n{\n#if !defined (arch_aarch64)\n   struct trap_mapping_header *header;\n   int i;\n\n   tc_lock_lock(&trap_mapping_lock);\n   parse_libs();\n\n   i = -1;\n   for (;;) {\n      i = get_next_set_bitmask(all_headers_current, i);\n      assert(i >= 0 && i <= NUM_LIBRARIES);\n      if (i == NUM_LIBRARIES) {\n         header = NULL;\n         rtdebug_printf(\"%s[%d]:  getStaticTrapMap: returning NULL\\n\", __FILE__, __LINE__);\n         goto done;\n      }\n      header = all_headers[i];\n      if (addr >= header->low_entry && addr <= header->high_entry) {\n         goto done;\n      }\n   }\n done:\n   tc_lock_unlock(&trap_mapping_lock);\n   return header;\n#else\n\tassert(0);\n\treturn NULL;\n#endif\n}\n\nstatic int parse_libs()\n{\n   struct link_map *l_current;\n\n   l_current = _r_debug.r_map;\n   if (!l_current) {\n        rtdebug_printf(\"%s[%d]:  parse_libs: _r_debug.r_map was not set\\n\", __FILE__, __LINE__);\n       return -1;\n   }\n\n   clear_bitmask(all_headers_current);\n   while (l_current) {\n      parse_link_map(l_current);\n      l_current = l_current->l_next;\n   }\n   clear_unloaded_libs();\n\n   return 0;\n}\n\n//parse_link_map return values\n#define PARSED 0\n#define NOT_REWRITTEN 1\n#define ALREADY_PARSED 2\n#define ERROR_INTERNAL -1\n#define ERROR_FULL -2\nstatic int parse_link_map(struct link_map *l)\n{\n   ElfX_Dyn *dynamic_ptr;\n   struct trap_mapping_header *header;\n   unsigned int i, new_pos;\n\n   dynamic_ptr = (ElfX_Dyn *) l->l_ld;\n   if (!dynamic_ptr)\n      return -1;\n\n   assert(sizeof(dynamic_ptr->d_un.d_ptr) == sizeof(void *));\n   for (; dynamic_ptr->d_tag != DT_NULL && dynamic_ptr->d_tag != DT_DYNINST; dynamic_ptr++);\n   if (dynamic_ptr->d_tag == DT_NULL) {\n      return NOT_REWRITTEN;\n   }\n\n   header = (struct trap_mapping_header *) (dynamic_ptr->d_un.d_val + l->l_addr);\n\n   if (header->signature != TRAP_HEADER_SIG)\n      return ERROR_INTERNAL;\n   if (header->pos != -1) {\n      set_bit(all_headers_current, header->pos, 1);\n      assert(all_headers[header->pos] == header);\n      return ALREADY_PARSED;\n   }\n\n   for (i = 0; i < header->num_entries; i++)\n   {\n      header->traps[i].source = (void *) (((unsigned long) header->traps[i].source) + l->l_addr);\n      header->traps[i].target = (void *) (((unsigned long) header->traps[i].target) + l->l_addr);\n      if (!header->low_entry || header->low_entry > (unsigned long) header->traps[i].source)\n         header->low_entry = (unsigned long) header->traps[i].source;\n      if (!header->high_entry || header->high_entry < (unsigned long) header->traps[i].source)\n         header->high_entry = (unsigned long) header->traps[i].source;\n   }\n\n   new_pos = get_next_free_bitmask(all_headers_last, -1);\n   assert(new_pos < NUM_LIBRARIES);\n   if (new_pos == NUM_LIBRARIES)\n      return ERROR_FULL;\n\n   header->pos = new_pos;\n   all_headers[new_pos] = header;\n   set_bit(all_headers_current, new_pos, 1);\n   set_bit(all_headers_last, new_pos, 1);\n\n   return PARSED;\n}\n\nstatic void clear_unloaded_libs()\n{\n   unsigned i;\n   for (i = 0; i<NUM_LIBRARIES_BITMASK_SIZE; i++)\n   {\n      all_headers_last[i] = all_headers_current[i];\n   }\n}\n\nstatic void set_bit(unsigned *bit_mask, int bit, char value) {\n   assert(bit < NUM_LIBRARIES);\n   unsigned *word = bit_mask + bit / WORD_SIZE;\n   unsigned shift = bit % WORD_SIZE;\n   if (value) {\n      *word |= (1 << shift);\n   }\n   else {\n      *word &= ~(1 << shift);\n   }\n}\n\n//Wasn't actually needed\n/*\nstatic char get_bit(unsigned *bit_mask, int bit) {\n   assert(bit < NUM_LIBRARIES);\n   unsigned *word = bit_mask + bit / WORD_SIZE;\n   unsigned shift = bit % WORD_SIZE;\n   return (*word & (1 << shift)) ? 1 : 0;\n}\n*/\n\nstatic void clear_bitmask(unsigned *bit_mask) {\n   unsigned i;\n   for (i = 0; i < NUM_LIBRARIES_BITMASK_SIZE; i++) {\n      bit_mask[i] = 0;\n   }\n}\n\nstatic unsigned get_next_free_bitmask(unsigned *bit_mask, int last_pos) {\n   unsigned i, j;\n   j = last_pos+1;\n   i = j / WORD_SIZE;\n   for (; j < NUM_LIBRARIES; i++) {\n      if (bit_mask[i] == (unsigned) -1) {\n         j += WORD_SIZE;\n         continue;\n      }\n      for (;;) {\n         if (!((1 << (j % WORD_SIZE) & bit_mask[i]))) {\n            return j;\n         }\n         j++;\n         if (j % WORD_SIZE == 0) {\n            break;\n         }\n      }\n   }\n   return NUM_LIBRARIES;\n}\n\nstatic unsigned get_next_set_bitmask(unsigned *bit_mask, int last_pos) {\n   unsigned i, j;\n   j = last_pos+1;\n   i = j / WORD_SIZE;\n   for (; j < NUM_LIBRARIES; i++) {\n      if (bit_mask[i] == (unsigned) 0) {\n         j += WORD_SIZE;\n         continue;\n      }\n      for (;;) {\n         if ((1 << (j % WORD_SIZE) & bit_mask[i])) {\n            return j;\n         }\n         j++;\n         if (j % WORD_SIZE == 0) {\n            break;\n         }\n      }\n   }\n   return NUM_LIBRARIES;\n}\n\n#endif\n\n\n\n#endif /* cap_mutatee_traps */\n\n#if defined(cap_binary_rewriter) && !defined(DYNINST_RT_STATIC_LIB)\n/* For a static binary, all global constructors are combined in an undefined\n * order. Also, DYNINSTBaseInit must be run after all global constructors have\n * been run. Since the order of global constructors is undefined, DYNINSTBaseInit\n * cannot be run as a constructor in static binaries. Instead, it is run from a\n * special constructor handler that processes all the global constructors in\n * the binary. Leaving this code in would create a global constructor for the\n * function runDYNINSTBaseInit(). See DYNINSTglobal_ctors_handler.\n */\nextern void r_debugCheck();\nextern void DYNINSTBaseInit();\nvoid runDYNINSTBaseInit() __attribute__((constructor));\nvoid runDYNINSTBaseInit()\n{\n    r_debugCheck();\n   DYNINSTBaseInit();\n}\n#endif\n\n\n/*\n//Small program for finding the correct values to fill in pos_in_pthreadt\n// above\n#include <pthread.h>\n#include <stdio.h>\n#include <sys/syscall.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n#define gettid() syscall(SYS_gettid)\n\npthread_attr_t attr;\n\nvoid *foo(void *f) {\n  pid_t pid, tid;\n  unsigned stack_addr;\n  unsigned best_stack = 0xffffffff;\n  int best_stack_pos = 0;\n  void *start_func;\n  int *p;\n  int i = 0;\n  pid = getpid();\n  tid = gettid();\n  start_func = foo;\n  //x86 only.\n  asm(\"movl %%ebp,%0\" : \"=r\" (stack_addr));\n  p = (int *) pthread_self();\n  while (i < 1000)\n  {\n    if (*p == (unsigned) pid)\n      printf(\"pid @ %d\\n\", i);\n    if (*p == (unsigned) tid)\n      printf(\"lwp @ %d\\n\", i);\n    if (*p > stack_addr && *p < best_stack)\n    {\n      best_stack = *p;\n      best_stack_pos = i;\n    }\n    if (*p == (unsigned) start_func)\n      printf(\"func @ %d\\n\", i);\n    i += sizeof(int);\n    p++;\n  }\n  printf(\"stack @ %d\\n\", best_stack_pos);\n  return NULL;\n}\n\nint main(int argc, char *argv[])\n{\n  pthread_t t;\n  void *result;\n  pthread_attr_init(&attr);\n  pthread_create(&t, &attr, foo, NULL);\n  pthread_join(t, &result);\n  return 0;\n}\n*/\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI_RT/src/RTfreebsd.c": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n * \n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n * \n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n/************************************************************************\n * $Id: RTlinux.c,v 1.54 2008/04/11 23:30:44 legendre Exp $\n * RTlinux.c: mutatee-side library function specific to Linux\n ************************************************************************/\n\n#include \"dyninstAPI_RT/h/dyninstAPI_RT.h\"\n#include \"dyninstAPI_RT/src/RTthread.h\"\n#include \"dyninstAPI_RT/src/RTcommon.h\"\n#include <assert.h>\n#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n\n#include <dlfcn.h>\n#include <sys/types.h>\n#include <sys/syscall.h>\n#include <string.h>\n#include <errno.h>\n#include <signal.h>\n#include <sys/mman.h>\n#include <link.h>\n\n/* FreeBSD libc has stubs so a static version shouldn't need libpthreads */\n#include <pthread.h>\n\nextern double DYNINSTstaticHeap_512K_lowmemHeap_1[];\nextern double DYNINSTstaticHeap_16M_anyHeap_1[];\nextern unsigned long sizeOfLowMemHeap1;\nextern unsigned long sizeOfAnyHeap1;\n\nstatic struct trap_mapping_header *getStaticTrapMap(unsigned long addr);\n\n/** RT lib initialization **/\n\nvoid mark_heaps_exec() {\n    RTprintf( \"*** Initializing dyninstAPI runtime.\\n\" );\n\n    /* Grab the page size, to align the heap pointer. */\n    long int pageSize = sysconf( _SC_PAGESIZE );\n    if( pageSize == 0 || pageSize == - 1 ) {\n        fprintf( stderr, \"*** Failed to obtain page size, guessing 16K.\\n\" );\n        perror( \"mark_heaps_exec\" );\n        pageSize = 1024 * 16;\n    } /* end pageSize initialization */\n\n    /* Align the heap pointer. */\n    unsigned long int alignedHeapPointer = (unsigned long int) DYNINSTstaticHeap_16M_anyHeap_1;\n    alignedHeapPointer = (alignedHeapPointer) & ~(pageSize - 1);\n    unsigned long int adjustedSize = (unsigned long int) DYNINSTstaticHeap_16M_anyHeap_1 - alignedHeapPointer + sizeOfAnyHeap1;\n\n    /* Make the heap's page executable. */\n    int result = mprotect( (void *) alignedHeapPointer, (size_t) adjustedSize, PROT_READ | PROT_WRITE | PROT_EXEC );\n    if( result != 0 ) {\n        fprintf( stderr, \"%s[%d]: Couldn't make DYNINSTstaticHeap_16M_anyHeap_1 executable!\\n\", __FILE__, __LINE__);\n        perror( \"mark_heaps_exec\" );\n    }\n    RTprintf( \"*** Marked memory from 0x%lx to 0x%lx executable.\\n\", alignedHeapPointer, alignedHeapPointer + adjustedSize );\n\n    /* Mark _both_ heaps executable. */\n    alignedHeapPointer = (unsigned long int) DYNINSTstaticHeap_512K_lowmemHeap_1;\n    alignedHeapPointer = (alignedHeapPointer) & ~(pageSize - 1);\n    adjustedSize = (unsigned long int) DYNINSTstaticHeap_512K_lowmemHeap_1 - alignedHeapPointer + sizeOfLowMemHeap1;\n\n    /* Make the heap's page executable. */\n    result = mprotect( (void *) alignedHeapPointer, (size_t) adjustedSize, PROT_READ | PROT_WRITE | PROT_EXEC );\n    if( result != 0 ) {\n        fprintf( stderr, \"%s[%d]: Couldn't make DYNINSTstaticHeap_512K_lowmemHeap_1 executable!\\n\", __FILE__, __LINE__ );\n        perror( \"mark_heaps_exec\" );\n    }\n    RTprintf( \"*** Marked memory from 0x%lx to 0x%lx executable.\\n\", alignedHeapPointer, alignedHeapPointer + adjustedSize );\n} /* end mark_heaps_exec() */\n\n\n#if defined(cap_binary_rewriter) && !defined(DYNINST_RT_STATIC_LIB)\n/* For a static binary, all global constructors are combined in an undefined\n * order. Also, DYNINSTBaseInit must be run after all global constructors have\n * been run. Since the order of global constructors is undefined, DYNINSTBaseInit\n * cannot be run as a constructor in static binaries. Instead, it is run from a\n * special constructor handler that processes all the global constructors in\n * the binary. Leaving this code in would create a global constructor for the\n * function runDYNINSTBaseInit(). See DYNINSTglobal_ctors_handler.\n */ \nextern void DYNINSTBaseInit();\nvoid runDYNINSTBaseInit() __attribute__((constructor));\nvoid runDYNINSTBaseInit()\n{\n   DYNINSTBaseInit();\n}\n#endif\n\n/** Dynamic instrumentation support **/\n\nstatic\nint tkill(pid_t pid, long lwp, int sig) {\n    static int has_tkill = 1;\n    int result = 0;\n\n    if( has_tkill ) {\n        result = syscall(SYS_thr_kill2, pid, lwp, sig);\n        if( 0 != result && ENOSYS == errno ) {\n            has_tkill = 0;\n        }\n    }\n\n    if( !has_tkill ) {\n        result = kill(pid, sig);\n    }\n\n    return (result == 0);\n}\n\nvoid DYNINSTbreakPoint()\n{\n    if(DYNINSTstaticMode) return;\n\n    DYNINST_break_point_event = 1;\n    while( DYNINST_break_point_event ) {\n        tkill(getpid(), dyn_lwp_self(), DYNINST_BREAKPOINT_SIGNUM);\n    }\n    /* Mutator resets to 0 */\n}\n\nstatic int failed_breakpoint = 0;\nvoid uncaught_breakpoint(int sig)\n{\n   failed_breakpoint = 1;\n}\n\nvoid DYNINSTsafeBreakPoint()\n{\n    if(DYNINSTstaticMode) return;\n\n    DYNINST_break_point_event = 1;\n    while( DYNINST_break_point_event ) {\n        tkill(getpid(), dyn_lwp_self(), SIGSTOP);\n    }\n    /* Mutator resets to 0 */\n\n#if 0\n    if( DYNINSTstaticMode ) return;\n    DYNINST_break_point_event = 2;\n    sigset_t emptyset;\n    sigemptyset(&emptyset);\n\n    // There is a bug with attaching to a stopped process on FreeBSD This\n    // achieves the same result as long as Dyninst attaches to the process when\n    // it is in sigsuspend\n    while( DYNINST_break_point_event ) {\n        sigsuspend(&emptyset);\n    }\n#endif\n}\n\n#if !defined(DYNINST_RT_STATIC_LIB)\nstatic int get_dlopen_error() {\n    const char *err_str;\n    err_str = dlerror();\n    if( err_str ) {\n        strncpy(gLoadLibraryErrorString, err_str, (size_t) ERROR_STRING_LENGTH);\n        return 1;\n    }\n\n    sprintf(gLoadLibraryErrorString, \"unknown error withe dlopen\");\n    return 0;\n}\n\nint DYNINSTloadLibrary(char *libname)\n{\n    void *res;\n    gLoadLibraryErrorString[0] = '\\0';\n    res = dlopen(libname, RTLD_NOW | RTLD_GLOBAL);\n    if( res ) return 1;\n\n    get_dlopen_error();\n    return 0;\n}\n#endif\n\n/** threading support **/\n\nint dyn_lwp_self()\n{\n    static int gettid_not_valid = 0;\n    int result;\n    \n    if( gettid_not_valid )\n        return getpid();\n\n    long lwp_id;\n    result = syscall(SYS_thr_self, &lwp_id);\n    if( result && errno == ENOSYS ) {\n        gettid_not_valid = 1;\n        return getpid();\n    }\n\n    return lwp_id;\n}\n\nint dyn_pid_self()\n{\n   return getpid();\n}\n\ndyntid_t (*DYNINST_pthread_self)(void);\n\ndyntid_t dyn_pthread_self()\n{\n   dyntid_t me;\n   if (DYNINSTstaticMode) {\n      return (dyntid_t) pthread_self();\n   }\n   if (!DYNINST_pthread_self) {\n      return (dyntid_t) DYNINST_SINGLETHREADED;\n   }\n   me = (*DYNINST_pthread_self)();\n   return (dyntid_t) me;\n}\n\nint DYNINST_am_initial_thread( dyntid_t tid ) {\n    /*\n     * LWPs and PIDs are in different namespaces on FreeBSD.\n     *\n     * I don't really know a good way to determine this without\n     * doing an expensive sysctl.\n     *\n     * Luckily, this function isn't used anymore\n     */\n    assert(!\"This function is unimplemented on FreeBSD\");\n    return 0;\n}\n\n/** trap based instrumentation **/\n\n#if defined(cap_mutatee_traps)\n\n#include <ucontext.h>\n\n#if defined(arch_x86) || defined(MUTATEE_32)\n#define UC_PC(x) x->uc_mcontext.mc_eip\n#elif defined(arch_x86_64)\n#define UC_PC(x) x->uc_mcontext.mc_rip\n#endif // UC_PC\n\nextern unsigned long dyninstTrapTableUsed;\nextern unsigned long dyninstTrapTableVersion;\nextern trapMapping_t *dyninstTrapTable;\nextern unsigned long dyninstTrapTableIsSorted;\n\n/**\n * This comment is now obsolete, left for historic purposes\n *\n * Called by the SIGTRAP handler, dyninstTrapHandler.  This function is \n * closly intwined with dyninstTrapHandler, don't modify one without \n * understanding the other.\n *\n * This function sets up the calling context that was passed to the\n * SIGTRAP handler so that control will be redirected to our instrumentation\n * when we do the setcontext call.\n * \n * There are a couple things that make this more difficult than it should be:\n *   1. The OS provided calling context is similar to the GLIBC calling context,\n *      but not compatible.  We'll create a new GLIBC compatible context and\n *      copy the possibly stomped registers from the OS context into it.  The\n *      incompatiblities seem to deal with FP and other special purpose registers.\n *   2. setcontext doesn't restore the flags register.  Thus dyninstTrapHandler\n *      will save the flags register first thing and pass us its value in the\n *      flags parameter.  We'll then push the instrumentation entry and flags\n *      onto the context's stack.  Instead of transfering control straight to the\n *      instrumentation, we'll actually go back to dyninstTrapHandler, which will\n *      do a popf/ret to restore flags and go to instrumentation.  The 'retPoint'\n *      parameter is the address in dyninstTrapHandler the popf/ret can be found.\n **/\nvoid dyninstTrapHandler(int sig, siginfo_t *sg, ucontext_t *context)\n{\n   void *orig_ip;\n   void *trap_to;\n\n   orig_ip = UC_PC(context);\n   assert(orig_ip);\n\n   // Find the new IP we're going to and substitute. Leave everything else untouched\n   if (DYNINSTstaticMode) {\n      unsigned long zero = 0;\n      unsigned long one = 1;\n      struct trap_mapping_header *hdr = getStaticTrapMap((unsigned long) orig_ip);\n      if (!hdr) return;\n\n      assert(hdr);\n      trapMapping_t *mapping = &(hdr->traps[0]);\n      trap_to = dyninstTrapTranslate(orig_ip, \n                                     (unsigned long *) &hdr->num_entries, \n                                     &zero, \n                                     (volatile trapMapping_t **) &mapping,\n                                     &one);\n   }\n   else {\n      trap_to = dyninstTrapTranslate(orig_ip, \n                                     &dyninstTrapTableUsed,\n                                     &dyninstTrapTableVersion,\n                                     (volatile trapMapping_t **) &dyninstTrapTable,\n                                     &dyninstTrapTableIsSorted);\n                                     \n   }\n   UC_PC(context) = (long) trap_to;\n}\n\n#if defined(cap_binary_rewriter)\n\n#define NUM_LIBRARIES 512 //Important, max number of rewritten libraries\n\n#define WORD_SIZE (8 * sizeof(unsigned))\n#define NUM_LIBRARIES_BITMASK_SIZE (1 + NUM_LIBRARIES / WORD_SIZE)\nstruct trap_mapping_header *all_headers[NUM_LIBRARIES];\n\nstatic unsigned all_headers_current[NUM_LIBRARIES_BITMASK_SIZE];\nstatic unsigned all_headers_last[NUM_LIBRARIES_BITMASK_SIZE];\n\n#if !defined(arch_x86_64) || defined(MUTATEE_32)\ntypedef Elf32_Dyn ElfX_Dyn;\ntypedef Elf32_Ehdr ElfX_Ehdr;\n#else\ntypedef Elf64_Dyn ElfX_Dyn;\ntypedef Elf64_Ehdr ElfX_Ehdr;\n#endif\n\nstatic int parse_libs();\nstatic int parse_link_map(struct link_map *l);\nstatic void clear_unloaded_libs();\n\nstatic void set_bit(unsigned *bit_mask, int bit, char value);\nstatic void clear_bitmask(unsigned *bit_mask);\nstatic unsigned get_next_free_bitmask(unsigned *bit_mask, int last_pos);\nstatic unsigned get_next_set_bitmask(unsigned *bit_mask, int last_pos);\n\nstatic tc_lock_t trap_mapping_lock;\n\nstatic struct trap_mapping_header *getStaticTrapMap(unsigned long addr)\n{\n   struct trap_mapping_header *header;\n   int i;\n   \n   tc_lock_lock(&trap_mapping_lock);\n   parse_libs();\n\n   i = -1;\n   for (;;) {\n      i = get_next_set_bitmask(all_headers_current, i);\n      assert(i >= 0 && i <= NUM_LIBRARIES);\n      if (i == NUM_LIBRARIES) {\n         header = NULL;\n         goto done;\n      }\n      header = all_headers[i];\n      if (addr >= header->low_entry && addr <= header->high_entry) {\n         goto done;\n      }\n   }  \n done:\n   tc_lock_unlock(&trap_mapping_lock);\n   return header;\n}\n\nstatic struct link_map *getLinkMap() {\n    struct link_map *map = NULL;\n#if !defined(DYNINST_RT_STATIC_LIB)\n    if( dlinfo(RTLD_SELF, RTLD_DI_LINKMAP, &map) ) {\n        return NULL;\n    }\n\n    // Rewind the current link map pointer to find the\n    // start of the list\n    struct link_map *last_map;\n    while( map != NULL ) {\n        last_map = map;\n        map = map->l_prev;\n    }\n\n    map = last_map;\n#endif\n    return map;\n}\n\nstatic int parse_libs()\n{\n   struct link_map *l_current;\n\n   l_current = getLinkMap();\n   if (!l_current)\n      return -1;\n\n   clear_bitmask(all_headers_current);\n   while (l_current) {\n      parse_link_map(l_current);\n      l_current = l_current->l_next;\n   }\n   clear_unloaded_libs();\n\n   return 0;\n}\n\n//parse_link_map return values\n#define PARSED 0\n#define NOT_REWRITTEN 1\n#define ALREADY_PARSED 2\n#define ERROR_INTERNAL -1\n#define ERROR_FULL -2\nstatic int parse_link_map(struct link_map *l) \n{\n   ElfX_Dyn *dynamic_ptr;\n   struct trap_mapping_header *header;\n   unsigned int i, new_pos;\n\n   dynamic_ptr = (ElfX_Dyn *) l->l_ld;\n   if (!dynamic_ptr)\n      return -1;\n\n   assert(sizeof(dynamic_ptr->d_un.d_ptr) == sizeof(void *));\n   for (; dynamic_ptr->d_tag != DT_NULL && dynamic_ptr->d_tag != DT_DYNINST; dynamic_ptr++);\n   if (dynamic_ptr->d_tag == DT_NULL) {\n      return NOT_REWRITTEN;\n   }\n\n   header = (struct trap_mapping_header *) (dynamic_ptr->d_un.d_val + l->l_addr);\n\n   caddr_t libAddr = l->l_addr;\n\n   // Executables have an implicit zero load address but the library load address\n   // may be non-zero\n   if( ((ElfX_Ehdr *)libAddr)->e_type == ET_EXEC ) {\n       libAddr = 0;\n   }else if( ((ElfX_Ehdr *)libAddr)->e_type == ET_DYN ) {\n       // Account for library_adjust mechanism which is used for shared libraries\n       // on FreeBSD\n       libAddr += getpagesize();\n   }\n\n   header = (struct trap_mapping_header *) (dynamic_ptr->d_un.d_val + libAddr);\n   \n   if (header->signature != TRAP_HEADER_SIG)\n      return ERROR_INTERNAL;\n   if (header->pos != -1) {\n      set_bit(all_headers_current, header->pos, 1);\n      assert(all_headers[header->pos] == header);\n      return ALREADY_PARSED;\n   }\n \n   for (i = 0; i < header->num_entries; i++)\n   {\n      header->traps[i].source = (void *) (((unsigned long) header->traps[i].source) + libAddr);\n      header->traps[i].target = (void *) (((unsigned long) header->traps[i].target) + libAddr);\n      if (!header->low_entry || header->low_entry > (unsigned long) header->traps[i].source)\n         header->low_entry = (unsigned long) header->traps[i].source;\n      if (!header->high_entry || header->high_entry < (unsigned long) header->traps[i].source)\n         header->high_entry = (unsigned long) header->traps[i].source;\n   }\n\n   new_pos = get_next_free_bitmask(all_headers_last, -1);\n   assert(new_pos >= 0 && new_pos < NUM_LIBRARIES);\n   if (new_pos == NUM_LIBRARIES)\n      return ERROR_FULL;\n\n   header->pos = new_pos;\n   all_headers[new_pos] = header;\n   set_bit(all_headers_current, new_pos, 1);\n   set_bit(all_headers_last, new_pos, 1);\n\n   return PARSED;\n}\n\nstatic void clear_unloaded_libs()\n{\n   unsigned i;\n   for (i = 0; i<NUM_LIBRARIES_BITMASK_SIZE; i++)\n   {\n      all_headers_last[i] = all_headers_current[i];\n   }\n}\n\nstatic void set_bit(unsigned *bit_mask, int bit, char value) {\n   assert(bit < NUM_LIBRARIES);\n   unsigned *word = bit_mask + bit / WORD_SIZE;\n   unsigned shift = bit % WORD_SIZE;\n   if (value) {\n      *word |= (1 << shift);\n   }\n   else {\n      *word &= ~(1 << shift);\n   }\n}\n\nstatic void clear_bitmask(unsigned *bit_mask) {\n   unsigned i;\n   for (i = 0; i < NUM_LIBRARIES_BITMASK_SIZE; i++) {\n      bit_mask[i] = 0;\n   }\n}\n\nstatic unsigned get_next_free_bitmask(unsigned *bit_mask, int last_pos) {\n   unsigned i, j;\n   j = last_pos+1;\n   i = j / WORD_SIZE;\n   for (; j < NUM_LIBRARIES; i++) {\n      if (bit_mask[i] == (unsigned) -1) {\n         j += WORD_SIZE;\n         continue;\n      }\n      for (;;) {\n         if (!((1 << (j % WORD_SIZE) & bit_mask[i]))) {\n            return j;\n         }\n         j++;\n         if (j % WORD_SIZE == 0) {\n            break;\n         }\n      }\n   }\n   return NUM_LIBRARIES;\n}\n\nstatic unsigned get_next_set_bitmask(unsigned *bit_mask, int last_pos) {\n   unsigned i, j;\n   j = last_pos+1;\n   i = j / WORD_SIZE;\n   for (; j < NUM_LIBRARIES; i++) {\n      if (bit_mask[i] == (unsigned) 0) {\n         j += WORD_SIZE;\n         continue;\n      }\n      for (;;) {\n         if ((1 << (j % WORD_SIZE) & bit_mask[i])) {\n            return j;\n         }\n         j++;\n         if (j % WORD_SIZE == 0) {\n            break;\n         }\n      }\n   }\n   return NUM_LIBRARIES;\n}\n\n#endif\n\n#endif /* cap_mutatee_traps */\n\n/*\n * Note: this program is for historical purposes only, we use libthread_db\n * now to get thread information.\n *\n * A program to determine the offsets of certain thread structures on FreeBSD\n *\n * This program should be compiled with the headers from the libthr library from\n * /usr/src. This can be installed using sysinstall. The following arguments \n * should be added to the compile once these headers are installed.\n *\n * -I/usr/src/lib/libthr/arch/amd64/include -I/usr/src/lib/libthr/thread\n *\n * Change amd64 to what ever is appropriate.\n\n#include <pthread.h>\n#include <stdio.h>\n#include <sys/syscall.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n#include \"thr_private.h\"\n\npthread_attr_t attr;\n\nvoid *foo(void *f) {\n    unsigned long stack_addr;\n    void *(*start_func)(void *);\n    unsigned long tid;\n\n    // Get all the values\n    syscall(SYS_thr_self, &tid);\n\n    start_func = foo;\n\n    asm(\"mov %%rbp,%0\" : \"=r\" (stack_addr));\n\n    pthread_t threadSelf = pthread_self();\n\n    printf(\"TID: %u == %u\\n\", tid, threadSelf->tid);\n    printf(\"STACK: 0x%lx == 0x%lx\\n\", stack_addr, threadSelf->attr.stackaddr_attr + threadSelf->attr.stacksize_attr);\n    printf(\"START: 0x%lx == 0x%lx\\n\", (unsigned long)start_func, (unsigned long)threadSelf->start_routine);\n\n    unsigned char *ptr = (unsigned char *)threadSelf;\n    unsigned long tidVal = *((unsigned long *)(ptr + offsetof(struct pthread, tid)));\n    unsigned long stackAddrVal = *((unsigned long *)(ptr + offsetof(struct pthread, attr) + offsetof(struct pthread_attr, stackaddr_attr)));\n    unsigned long stackSizeVal = *((unsigned long *)(ptr + offsetof(struct pthread, attr) + offsetof(struct pthread_attr, stacksize_attr)));\n    unsigned long startFuncVal = *((unsigned long *)(ptr + offsetof(struct pthread, start_routine)));\n\n    printf(\"TID = %u, offset = %u\\n\", tidVal, offsetof(struct pthread, tid));\n    printf(\"STACK = 0x%lx, offset = %u\\n\", stackAddrVal, offsetof(struct pthread, attr) + offsetof(struct pthread_attr, stackaddr_attr));\n    printf(\"SIZE = 0x%lx, offset = %u\\n\", stackSizeVal, offsetof(struct pthread, attr) + offsetof(struct pthread_attr, stacksize_attr));\n    printf(\"START = 0x%lx, offset = %u\\n\", startFuncVal, offsetof(struct pthread, start_routine));\n\n    return NULL;\n}\n\nint main(int argc, char *argv[]) {\n    pthread_t t;\n    void *result;\n    pthread_attr_init(&attr);\n    pthread_create(&t, &attr, foo, NULL);\n    pthread_join(t, &result);\n\n    return 0;\n}\n*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/parseThat/configure.ac": "# Process this file with autoconf to produce a configure script.\nAC_INIT([parseThat],[1.0])\nAC_CONFIG_SRCDIR([src/config.C])\nAC_CONFIG_AUX_DIR([.])\nAC_LANG(C++)\n\n\nAC_SEARCH_LIBS(dlopen, dl)\n\nAC_ARG_WITH(dyninst,\n            [AS_HELP_STRING([--with-dyninst],[Base directory to look for dyninst headers and libraries])],\n            [DYNINST_LIB=\"${withval}/${PLATFORM}/lib\"\n             DYNINST_INC=\"${withval}/include\"],)\n\nAC_ARG_WITH(dyninst-lib,\n            [AS_HELP_STRING([--with-dyninst-lib],[Directory to look for dyninst libraries])],\n            [DYNINST_LIB=\"${withval}\"],)\n\nAC_ARG_WITH(dyninst-include,\n            [AS_HELP_STRING([--with-dyninst-include],[Directory to look for dyninst headers])],\n            [DYNINST_INC=\"${withval}\"],)\n\nAC_ARG_WITH(dwarf-lib,\n            [AS_HELP_STRING([--with-dwarf-include],[Directory to look for libdwarf])],\n            [DWARF_LIB=\"${withval}\"],)\n\nAC_ARG_WITH(elf-lib,\n            [AS_HELP_STRING([--with-elf-include],[Directory to look for libelf])],\n            [ELF_LIB=\"${withval}\"],)\n\nAC_ARG_WITH(liberty-lib,\n            [AS_HELP_STRING([--with-liberty-lib],[Link string to use for libiberty])],\n            [LIBERTY_LIB=\"${withval}\"],)\n\nif test -n ${DYNINST_ROOT}; then\n   # Add search paths to CPPFLAGS and LDFLAGS.\n   if test -z ${DYNINST_LIB}; then\n      DYNINST_LIB=\"${DYNINST_ROOT}/lib\"\n   fi\n   if test -z ${DYNINST_INC}; then\n      DYNINST_INC=\"${DYNINST_ROOT}/include\"\n   fi\nfi\n\nAC_SUBST([LDFLAGS], [\"-L${DYNINST_LIB} ${LDFLAGS}\"])\nAC_SUBST([DWARFFLAGS], [\"${DWARF_LIB}\"])\nAC_SUBST([ELFFLAGS], [\"${ELF_LIB}\"])\nAC_SUBST([LIBERTYFLAGS], [\"${LIBERTY_LIB}\"])\nAC_SUBST([CPPFLAGS], [\"-I${DYNINST_INC} -D_GLIBCXX_USE_CXX11_ABI=0 ${CPPFLAGS}\"])\n\n# Generate host string.\nAC_CANONICAL_HOST\n\n# Build all configure tests with C++ compiler.\nAC_LANG([C++])\n\n# sha1.C requres these system files and endianess to be tested.\nAC_CHECK_HEADERS([inttypes.h], [], [], [// Do not use default includes])\nAC_CHECK_HEADERS([stdint.h], [], [], [// Do not use default includes])\nAC_C_BIGENDIAN\n\n# Search for Dyninst in all the right places.\nAC_CHECK_HEADER([BPatch.h], [],\n\t\t[AC_MSG_ERROR([Cannot find DyninstAPI library include files.])],\n\t\t[// Do not use default includes])\n\n# Check if Dyninst is version 5.0+\nAC_CHECK_HEADERS([BPatch_process.h],\n\t\t [AC_SUBST([DYNINST_VER], [5])],\n\t\t [AC_SUBST([DYNINST_VER], [4])],\n\t\t [// Do not use default includes])\n\n# Find appropriate install program\nAC_PROG_INSTALL\n\nAC_CONFIG_FILES([Makefile])\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI/src/mapped_object.h": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n * \n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n * \n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n// $Id: mapped_object.h,v 1.23 2008/10/27 17:23:53 mlam Exp $\n\n#if !defined(_mapped_object_h)\n#define _mapped_object_h\n\n#include <string>\n#include \"common/src/Types.h\"\n#include \"dyninstAPI/src/image.h\"\n#include \"dyninstAPI/h/BPatch_enums.h\"\n#include <list>\n#include \"dyninstAPI/src/Relocation/DynObject.h\"\n#include \"PCProcess.h\"\n\nclass block_instance;\nclass func_instance;\nclass edge_instance;\n\n//  we really do not want to have this defined, but I'm defining it for the moment to get thru paradyn seperation\n#define CHECK_ALL_CALL_POINTS  // we depend on this for Paradyn\n\nusing namespace std;\nusing namespace Dyninst;\nusing Dyninst::PatchAPI::DynCFGMaker;\n\nclass mapped_module;\n\nclass int_symbol {\n public:\n    int_symbol(SymtabAPI::Symbol *sym, Address base) : addr_(base + sym->getOffset()), sym_(sym) {}\n    int_symbol() : addr_(0), sym_(NULL) {};\n\n    Address getAddr() const { return addr_; }\n    unsigned getSize() const { return sym_->getSize(); }\n    string symTabName() const { return sym_->getMangledName(); }\n    string prettyName() const { return sym_->getPrettyName(); }\n    string typedName() const { return sym_->getTypedName(); }\n    const SymtabAPI::Symbol *sym() const { return sym_; }\n\n private:\n    Address addr_;\n    const SymtabAPI::Symbol *sym_;\n};\n\n\nclass int_variable {\n    // Should subclass this and function off the same thing...\n\n private:\n    int_variable() {};\n public:\n    int_variable(image_variable *var,\n                 Address base,\n                 mapped_module *mod);\n\n    int_variable(int_variable *parVar, mapped_module *child);\n\n    Address getAddress() const { return addr_; }\n    // Can variables have multiple names?\n    string symTabName() const;\n    SymtabAPI::Aggregate::name_iter pretty_names_begin() const;\n    SymtabAPI::Aggregate::name_iter pretty_names_end() const;\n    SymtabAPI::Aggregate::name_iter symtab_names_begin() const;\n    SymtabAPI::Aggregate::name_iter symtab_names_end() const;\n    \n    //const vector<string>& prettyNameVector() const;\n    //const vector<string>& symTabNameVector() const;\n    mapped_module *mod() const { return mod_; };\n    //AddressSpace *as() const { return mod()->proc(); }\n    const image_variable *ivar() const { return ivar_; }\n\n    Address addr_;\n    unsigned size_;\n    // type?\n    image_variable *ivar_;\n\n    mapped_module *mod_;\n};\n\nstruct edgeStub {\n    edgeStub(block_instance *s, Address t, EdgeTypeEnum y)\n    { src = s; trg = t; type = y; }\n    edgeStub(block_instance* s, Address t, EdgeTypeEnum y, bool b) :\n        src(s), trg(t), type(y), checked(b) { }\n    block_instance* src;\n    Address trg;\n    EdgeTypeEnum type;\n    bool checked;\n};\n\n\n/*\n * A class for link map information about a shared object that is mmapped\n * by the dynamic linker into the applications address space at runtime.\n */\n#define \tSHAREDOBJECT_NOCHANGE\t0\n#define \tSHAREDOBJECT_ADDED\t1\n#define \tSHAREDOBJECT_REMOVED\t2\n\n// mapped_object represents a file in memory. It will be a collection\n// of modules (basically, .o's) that are referred to as a unit and\n// loaded as a unit.  The big reason for this is 1) per-process\n// specialization and 2) a way to reduce memory; to create objects for\n// all functions ahead of time is wasteful and expensive. So\n// basically, the mapped_object \"wins\" if it can return useful\n// information without having to allocate memory.\n\nclass mapped_object : public codeRange, public Dyninst::PatchAPI::DynObject {\n    friend class mapped_module; // for findFunction\n    friend class func_instance;\n    friend class block_instance; // Adds to codeRangesByAddr_\n    friend class edge_instance;\n    friend class DynCFGMaker;\n private:\n    mapped_object();\n    mapped_object(fileDescriptor fileDesc,\n                  image *img,\n                  AddressSpace *proc,\n                  BPatch_hybridMode mode = BPatch_normalMode);\n\n public:\n    // We need a way to check for errors; hence a \"get\" method\n    static mapped_object *createMappedObject(fileDescriptor &desc,\n                                             AddressSpace *p,\n                                             BPatch_hybridMode m = BPatch_normalMode,\n                                             bool parseGaps = true);\n    static mapped_object *createMappedObject(ProcControlAPI::Library::const_ptr lib,\n                                             AddressSpace *p,\n                                             BPatch_hybridMode m = BPatch_normalMode,\n                                             bool parseGaps = true);\n\n\n    // Copy constructor: for forks\n    mapped_object(const mapped_object *par_obj, AddressSpace *child);\n\n    // Will delete all func_instances which were originally part of this object; including\n    // any that were relocated (we can always follow the \"I was relocated\" pointer).\n    ~mapped_object();\n\n    bool analyze();\n    bool isAnalyzed() { return analyzed_; }\n\n    const fileDescriptor &getFileDesc() const { return desc_; }\n    // Full name, including path\n    const string &fullName() const { return fullName_; }\n    string fileName() const;\n    Address codeAbs() const;\n    Address codeBase() const { return codeBase_; }\n    Address imageOffset() const { return parse_img()->imageOffset(); }\n    unsigned imageSize() const { return parse_img()->imageLength(); }\n    unsigned memoryEnd(); // largest allocated memory address + 1\n\n    // 32-bit math safe!\n    bool isCode(Address addr) const;\n    bool isData(Address addr) const;\n\n    // Deprecated...\n    Address getBaseAddress() const { return codeBase(); }\n\n    Address dataAbs() const;\n    Address dataBase() const { return dataBase_; }\n    Address dataOffset() const { return parse_img()->dataOffset(); }\n    unsigned dataSize() const { return parse_img()->dataLength(); }\n    Address getTOCBaseAddress() const {return tocBase;}\n    void setTOCBaseAddress(Address addr) {tocBase = addr;}\n\n    image *parse_img() const { return image_; }\n    bool isSharedLib() const;\n    bool isStaticExec() const;\n    static bool isSystemLib(const std::string &name);\n    bool isMemoryImg() const { return memoryImg_; }\n\n    void setMemoryImg() { memoryImg_ = true; };\n\n    // Return an appropriate identification string for debug purposes.\n    // Will eventually be required by a debug base class.\n    const std::string debugString() const;\n\n    // Used for codeRange ONLY! DON'T USE THIS! BAD USER!\n    Address get_address() const { return codeAbs(); }\n    void *get_local_ptr() const;\n    unsigned get_size() const { return imageSize(); }\n\n    AddressSpace *proc() const;\n\n    mapped_module *findModule(string m_name, bool wildcard = false);\n    mapped_module *findModule(pdmodule *mod);\n\n    mapped_module *getDefaultModule();\n\n    func_instance *findFuncByEntry(const Address addr);\n    func_instance *findFuncByEntry(const block_instance *blk);\n\n    bool getInfHeapList(pdvector<heapDescriptor> &infHeaps);\n    void getInferiorHeaps(vector<pair<string, Address> > &infHeaps);\n\n    bool findFuncsByAddr(const Address addr, std::set<func_instance *> &funcs);\n    bool findBlocksByAddr(const Address addr, std::set<block_instance *> &blocks);\n    block_instance *findBlockByEntry(const Address addr);\n    block_instance *findOneBlockByAddr(const Address addr);\n\n    // codeRange method\n    void *getPtrToInstruction(Address addr) const;\n    void *getPtrToData(Address addr) const;\n\n    // Try to avoid using these if you can, since they'll trigger\n    // parsing and allocation.\n    bool getAllFunctions(pdvector<func_instance *> &funcs);\n    bool getAllVariables(pdvector<int_variable *> &vars);\n\n    const pdvector<mapped_module *> &getModules();\n\n    // begin exploratory and defensive mode functions //\n    BPatch_hybridMode hybridMode() { return analysisMode_; }\n    void enableDefensiveMode(bool on = true) {\n        analysisMode_ = on ? BPatch_defensiveMode : BPatch_normalMode;\n    }\n    bool isExploratoryModeOn();\n    bool parseNewEdges(const std::vector<edgeStub>& sources);\n    bool parseNewFunctions(std::vector<Address> &funcEntryAddrs);\n    bool updateCodeBytesIfNeeded(Address entryAddr); // ret true if was needed\n    void updateCodeBytes(const std::list<std::pair<Address,Address> > &owRanges );\n    void setCodeBytesUpdated(bool);\n    void addProtectedPage(Address pageAddr); // adds to protPages_\n    void removeProtectedPage(Address pageAddr);\n    void removeEmptyPages();\n    void remove(func_instance *func);\n    void remove(instPoint *p);\n    void splitBlock(block_instance *first, block_instance *second);\n    bool findBlocksByRange(Address startAddr,\n                          Address endAddr,\n                          std::list<block_instance*> &pageBlocks);\n    void findFuncsByRange(Address startAddr,\n                          Address endAddr,\n                          std::set<func_instance*> &pageFuncs);\n    void addEmulInsn(Address insnAddr, Register effective_addr);\n    bool isEmulInsn(Address insnAddr);\n    Register getEmulInsnReg(Address insnAddr);\n    void setEmulInsnVal(Address insnAddr, void * val);\n    int codeByteUpdates() { return codeByteUpdates_; }\n\n    void replacePLTStub(SymtabAPI::Symbol *PLTsym, \n                        func_instance *func, \n                        Address newAddr);\nprivate:\n    // helper functions\n    void updateCodeBytes(SymtabAPI::Region *reg);\n    bool isUpdateNeeded(Address entryAddr);\n    bool isExpansionNeeded(Address entryAddr);\n    void expandCodeBytes(SymtabAPI::Region *reg);\n    // end exploratory and defensive mode functions //\npublic:\n\n    bool  getSymbolInfo(const std::string &n, int_symbol &sym);\n\n    // All name lookup functions are vectorized, because you can have\n    // multiple overlapping names for all sorts of reasons.\n    // Demangled/\"pretty\": easy overlap (overloaded funcs, etc.).\n    // Mangled: multiple modules with static/private functions and\n    // we've lost the module name.\n\n    const pdvector<func_instance *> *findFuncVectorByPretty(const std::string &funcname);\n    const pdvector<func_instance *> *findFuncVectorByMangled(const std::string &funcname);\n\n    bool findFuncsByAddr(std::vector<func_instance *> &funcs);\n    bool findBlocksByAddr(std::vector<block_instance *> &blocks);\n\n    const pdvector<int_variable *> *findVarVectorByPretty(const std::string &varname);\n    const pdvector<int_variable *> *findVarVectorByMangled(const std::string &varname);\n    const int_variable *getVariable(const std::string &varname);\n\n\t//this marks the shared object as dirty, mutated\n\t//so it needs saved back to disk\n\tvoid setDirty(){ dirty_=true;}\n\tbool isDirty() { return dirty_; }\n\n    func_instance *findFunction(ParseAPI::Function *img_func);\n\n    int_variable *findVariable(image_variable *img_var);\n\n    block_instance *findBlock(ParseAPI::Block *);\n    // If we already know the source or target hand them in for efficiency\n    edge_instance *findEdge(ParseAPI::Edge *, block_instance *src = NULL, block_instance *trg = NULL);\n\n    // These methods should be invoked to find the global constructor and\n    // destructor functions in stripped, static binaries\n    func_instance *findGlobalConstructorFunc(const std::string &ctorHandler);\n    func_instance *findGlobalDestructorFunc(const std::string &dtorHandler);\n\n    // We store callee names at the mapped_object level for\n    // efficiency\n    std::string getCalleeName(block_instance *);\n    void setCalleeName(block_instance *, std::string name);\n\n    void setCallee(const block_instance *, func_instance *);\n    func_instance *getCallee(const block_instance *) const;\n\n    void destroy(PatchAPI::PatchFunction *f);\n    void destroy(PatchAPI::PatchBlock *b);\n    // void destroy(PatchAPI::PatchEdge *e); // don't need to destroy anything\n\n  private:\n    //\n    //     PRIVATE DATA MEMBERS\n    //\n    fileDescriptor desc_; // full file descriptor\n\n    string  fullName_;\t// full file name of the shared object\n    string  fileName_; // name of shared object as it should be identified\n\t\t\t//  in mdl, e.g. as used for \"exclude\"....\n    // Address   codeBase_; // The OS offset where the text segment is loaded;\n    // there is a corresponding codeOffset_ in the image class.\n\n    // For example, an a.out often has a codeBase of 0, and a\n    // codeOffset of 0x<valid>. Libraries are the reverse; codeBase_\n    // of <valid>, codeOffset of 0. All of our incoming functions,\n    // etc. from the image class have codeOffset built in.\n\n    Address   dataBase_; // Where the data starts...\n    Address   tocBase;\n\n    void set_short_name();\n\n    pdvector<mapped_module *> everyModule;\n    typedef std::unordered_map<std::string, std::vector<func_instance *> *> func_index_t;\n    typedef std::unordered_map<std::string, std::vector<int_variable *> *> var_index_t;\n    \n    std::unordered_map<const image_variable *, int_variable *> everyUniqueVariable;\n    func_index_t allFunctionsByMangledName;\n    func_index_t allFunctionsByPrettyName;\n    var_index_t allVarsByMangledName;\n    var_index_t allVarsByPrettyName;\n\n    codeRangeTree codeRangesByAddr_;\n\n    // And those call...\n    void addFunction(func_instance *func);\n    void addVariable(int_variable *var);\n\n    // Add a name after-the-fact\n    typedef enum {\n        mangledName = 1,\n        prettyName = 2,\n        typedName = 4 } nameType_t;\n    void addFunctionName(func_instance *func, const std::string newName, \n                         func_index_t &index);\n\n    bool dirty_; // marks the shared object as dirty\n    bool dirtyCalled_;//see comment for setDirtyCalled\n\n    image  *image_; // pointer to image if processed is true\n    bool dlopenUsed; //mark this shared object as opened by dlopen\n    AddressSpace *proc_; // Parent process\n\n    bool analyzed_; // Prevent multiple adds\n\n    // exploratory and defensive mode variables\n    typedef enum  {\n        PROTECTED,\n        REPROTECTED,\n        UNPROTECTED,\n    } WriteableStatus;\n    BPatch_hybridMode analysisMode_;\n    map<Address,WriteableStatus> protPages_;\n    std::set<SymtabAPI::Region*> expansionCheckedRegions_;\n    bool pagesUpdated_;\n    int codeByteUpdates_;\n    typedef std::map<Address, std::pair<Register,void*> > EmulInsnMap;\n    EmulInsnMap emulInsns_;\n\n    Address memEnd_; // size of object in memory\n\n    mapped_module *getOrCreateForkedModule(mapped_module *mod);\n\n    bool memoryImg_;\n\n    std::map<block_instance *, std::string> calleeNames_;\n    std::map<const block_instance *, func_instance *> callees_;\n\n};\n\n// Aggravation: a mapped object might very well occupy multiple \"ranges\".\nclass mappedObjData : public codeRange {\n public:\n    mappedObjData(mapped_object *obj_) : obj(obj_) {};\n    Address get_address() const { return obj->dataAbs(); }\n    unsigned get_size() const { return obj->dataSize(); }\n    mapped_object *obj;\n};\n\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI/src/dynProcess.C": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n * \n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n * \n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n#include \"dynProcess.h\"\n#include \"dynThread.h\"\n#include \"pcEventHandler.h\"\n#include \"pcEventMuxer.h\"\n#include \"function.h\"\n#include \"os.h\"\n#include \"debug.h\"\n#include \"instPoint.h\"\n#include \"BPatch.h\"\n#include \"mapped_module.h\"\n#include \"baseTramp.h\"\n#include \"registerSpace.h\"\n#include \"mapped_object.h\"\n#include \"image.h\"\n\n#include \"common/src/pathName.h\"\n\n#include \"PCErrors.h\"\n#include \"MemoryEmulator/memEmulator.h\"\n#include <boost/tuple/tuple.hpp>\n\n#include \"symtabAPI/h/SymtabReader.h\"\n#include \"patchAPI/h/PatchMgr.h\"\n#include \"patchAPI/h/Point.h\"\n\n\n#include <sstream>\n\nusing namespace Dyninst::ProcControlAPI;\nusing std::map;\nusing std::vector;\nusing std::string;\nusing std::stringstream;\n\nDyninst::SymtabAPI::SymtabReaderFactory *PCProcess::symReaderFactory_;\n\nPCProcess *PCProcess::createProcess(const string file, pdvector<string> &argv,\n                                    BPatch_hybridMode analysisMode,\n                                    pdvector<string> &envp,\n                                    const string dir, int stdin_fd, int stdout_fd,\n                                    int stderr_fd)\n{\n    // Debugging information\n    startup_cerr << \"Creating process \" << file << \" in directory \" << dir << endl;\n\n    startup_cerr << \"Arguments: (\" << argv.size() << \")\" << endl;\n    for (unsigned a = 0; a < argv.size(); a++)\n        startup_cerr << \"   \" << a << \": \" << argv[a] << endl;\n\n    startup_cerr << \"Environment: (\" << envp.size() << \")\" << endl;\n    for (unsigned e = 0; e < envp.size(); e++)\n        startup_cerr << \"   \" << e << \": \" << envp[e] << endl;\n\n    startup_printf(\"%s[%d]: stdin: %d, stdout: %d, stderr: %d\\n\", FILE__, __LINE__,\n            stdin_fd, stdout_fd, stderr_fd);\n\n    initSymtabReader();\n\n    // Create a full path to the executable\n    string path = createExecPath(file, dir);\n\n    std::map<int, int> fdMap;\n    redirectFds(stdin_fd, stdout_fd, stderr_fd, fdMap);\n\n    if( !setEnvPreload(envp, path) ) {\n        startup_cerr << \"Failed to set environment var to preload RT library\" << endl;\n        return NULL;\n    }\n\n    // Create the ProcControl process\n    Process::ptr tmpPcProc = Process::createProcess(path, argv, envp, fdMap);\n\n    if( !tmpPcProc ) {\n       cerr << \"Failed to create process \" << path << endl;\n       const char *lastErrMsg = getLastErrorMsg();\n        startup_printf(\"%s[%d]: failed to create process for %s: %s\\n\", __FILE__,\n                __LINE__, file.c_str(), lastErrMsg);\n        string msg = string(\"Failed to create process for \") + file +\n           string(\": \") + lastErrMsg;\n        showErrorCallback(68, msg.c_str());\n        return NULL;\n    }\n\n    startup_cerr << \"Created process \" << tmpPcProc->getPid() << endl;\n\n    PCProcess *ret = new PCProcess(tmpPcProc, file, analysisMode);\n    assert(ret);\n    tmpPcProc->setData(ret);\n\n    if( !ret->bootstrapProcess() ) {\n        startup_cerr << \"Failed to bootstrap process \" << ret->getPid()\n                     << \": terminating...\" << endl;\n        ret->terminateProcess();\n\n        delete ret;\n        return NULL;\n    }\n\n    return ret;\n}\n\nPCProcess *PCProcess::attachProcess(const string &progpath, int pid,\n                                    BPatch_hybridMode analysisMode)\n{\n    initSymtabReader();\n\n    startup_cerr << \"Attaching to process \" << pid << endl;\n    Process::ptr tmpPcProc = Process::attachProcess(pid, progpath);\n\n    if( !tmpPcProc ) {\n        const char *lastErrMsg = getLastErrorMsg();\n        startup_printf(\"%s[%d]: Failed to attach process %d: %s\\n\",\n                __FILE__, __LINE__, pid, lastErrMsg);\n        stringstream msg;\n        msg << \"Failed to attach to process \" << pid << \": \" << lastErrMsg;\n        showErrorCallback(26, msg.str());\n        return NULL;\n    }\n    startup_cerr << \"Attached to process \" << tmpPcProc->getPid() << endl;\n        \n    PCProcess *ret = new PCProcess(tmpPcProc, analysisMode);\n    assert(ret);\n\n    tmpPcProc->setData(ret);\n\n    ret->runningWhenAttached_ = tmpPcProc->allThreadsRunningWhenAttached();\n    ret->file_ = tmpPcProc->libraries().getExecutable()->getAbsoluteName();\n\n    if( !ret->bootstrapProcess() ) {\n        startup_cerr << \"Failed to bootstrap process \" << pid \n                     << \": terminating...\" << endl;\n        ret->terminateProcess();\n\n        delete ret;\n        return NULL;\n    }\n\n    return ret;\n}\n\nPCProcess *PCProcess::setupForkedProcess(PCProcess *parent, Process::ptr pcProc) {\n    startup_printf(\"%s[%d]: setting up forked process %d\\n\",\n            FILE__, __LINE__, pcProc->getPid());\n\n    PCProcess *ret = new PCProcess(parent, pcProc);\n    assert(ret);\n\n    pcProc->setData(ret);\n\n    ret->copyAddressSpace(parent);\n\n    // This requires the AddressSpace be copied from the parent\n    if (parent->tracedSyscalls_)\n      ret->tracedSyscalls_ = new syscallNotification(parent->tracedSyscalls_, ret);\n    else\n      ret->tracedSyscalls_ = NULL;\n\n    // Check if RT library exists in child\n    if( ret->runtime_lib.size() == 0 ) {\n        // Set the RT library name\n        if( !ret->getDyninstRTLibName() ) {\n            startup_printf(\"%s[%d]: failed to get Dyninst RT lib name\\n\",\n                    FILE__, __LINE__);\n            delete ret;\n            return NULL;\n        }\n        startup_printf(\"%s[%d]: Got Dyninst RT libname: %s\\n\", FILE__, __LINE__,\n                       ret->dyninstRT_name.c_str());\n\n        for(unsigned i = 0; i < ret->mapped_objects.size(); ++i) {\n            const fileDescriptor &desc = ret->mapped_objects[i]->getFileDesc();\n            fileDescriptor tmpDesc(ret->dyninstRT_name,\n                    desc.code(), desc.data(), true);\n            if( desc == tmpDesc ) {\n                ret->runtime_lib.insert(ret->mapped_objects[i]);\n                break;\n            }\n        }\n    }\n\n    // TODO hybrid mode stuff\n\n    // Copy signal handlers\n    pdvector<codeRange *> sigHandlers;\n    parent->signalHandlerLocations_.elements(sigHandlers);\n    for(unsigned i = 0; i < sigHandlers.size(); ++i) {\n        signal_handler_location *oldSig = dynamic_cast<signal_handler_location *>(sigHandlers[i]);\n        assert(oldSig);\n        signal_handler_location *newSig = new signal_handler_location(*oldSig);\n        ret->signalHandlerLocations_.insert(newSig);\n    }\n\n    // If required\n    if( !ret->copyDanglingMemory(parent) ) {\n        startup_printf(\"%s[%d]: failed to copy dangling memory from parent %d to child %d\\n\",\n                FILE__, __LINE__, parent->getPid(), ret->getPid());\n        ret->terminateProcess();\n\n        delete ret;\n        return NULL;\n    }\n\n    ret->setInEventHandling(true);\n\n    if( !ret->bootstrapProcess() ) {\n        startup_cerr << \"Failed to bootstrap process \" << ret->getPid()\n                     << \": terminating...\" << endl;\n        ret->terminateProcess();\n\n        delete ret;\n        return NULL;\n    }\n\n    ret->setDesiredProcessState(parent->getDesiredProcessState());\n\n    return ret;\n}\n\nPCProcess *PCProcess::setupExecedProcess(PCProcess *oldProc, std::string execPath) {\n    BPatch::bpatch->registerExecCleanup(oldProc, NULL);\n\n    PCProcess *newProc = new PCProcess(oldProc->pcProc_, execPath, oldProc->analysisMode_);\n\n    oldProc->pcProc_->setData(newProc);\n    newProc->setExecing(true);\n\n    if( !newProc->bootstrapProcess() ) {\n        proccontrol_printf(\"%s[%d]: failed to bootstrap execed process %d\\n\",\n                FILE__, __LINE__, newProc->getPid());\n        delete newProc;\n        return NULL;\n    }\n\n    delete oldProc;\n    oldProc = NULL;\n\n    newProc->setInEventHandling(true);\n    //newProc->incPendingEvents();\n\n    BPatch::bpatch->registerExecExit(newProc);\n\n    newProc->setExecing(false);\n    newProc->setDesiredProcessState(ps_running);\n\n    return newProc;\n}\n\nPCProcess::~PCProcess() {\n        proccontrol_printf(\"%s[%d]: destructing PCProcess %d\\n\",\n                FILE__, __LINE__, getPid());\n\n    if( tracedSyscalls_ ) delete tracedSyscalls_;\n    tracedSyscalls_ = NULL;\n\n    if( irpcTramp_ ) delete irpcTramp_;\n    irpcTramp_ = NULL;\n\n    signalHandlerLocations_.clear();\n\n    trapMapping.clearTrapMappings();\n\n    if(pcProc_ && pcProc_->getData() == this) pcProc_->setData(NULL);\n}\n\nvoid PCProcess::initSymtabReader()\n{\n   //Set SymbolReaderFactory in Stackwalker before create/attach\n   if (!symReaderFactory_) {\n      symReaderFactory_ = new Dyninst::SymtabAPI::SymtabReaderFactory();\n      Dyninst::Stackwalker::Walker::setSymbolReader(symReaderFactory_);\n   }\n}\n\n/***************************************************************************\n **** Runtime library initialization code (Dyninst)                     ****\n ***************************************************************************/\n\n/*\n *\n * Gratuitously large comment. This diagrams the startup flow of\n * messages between the mutator and mutatee. Entry points\n * for create and attach process are both given.\n *     Mutator           Signal              Mutatee\n * Create:\n *     Fork/Exec\n *                     <-- Trap              Halted in exec (handled by ProcControlAPI)\n *     Install trap in main\n *                     <-- Trap              Halted in main\n *  Attach: (also paused, not in main)\n *     Install call to dlopen/\n *     LoadLibrary\n *                     <-- Trap              In library load\n *     Set parameters in library\n *                     <-- Trap              Finished loading\n *     Restore code and leave paused\n *     Finalize library\n *       If finalizing fails, init via iRPC\n */\n\n/*\n * In all cases, the process is left paused at the entry of main\n * (create) or where it was (attach). No permanent instrumentation\n * is inserted.\n */\n\nbool PCProcess::hasReachedBootstrapState(bootstrapState_t state) const {\n    return state <= bootstrapState_;\n}\n\nvoid PCProcess::setBootstrapState(bootstrapState_t newState) {\n    bootstrapState_ = newState;\n}\n\nbool PCProcess::bootstrapProcess() {\n    assert( pcProc_->allThreadsStopped() );\n\n    startup_printf(\"%s[%d]: attempting to bootstrap process %d\\n\", \n            FILE__, __LINE__, getPid());\n\n    if( !wasCreatedViaFork() ) {\n        // Initialize the inferior heaps\n        initializeHeap();\n\n        for(unsigned i = 0; i < mapped_objects.size(); ++i) {\n            addInferiorHeap(mapped_objects[i]);\n        }\n\n        // Create the mapped_objects for the executable and shared libraries\n        if( !createInitialMappedObjects() ) {\n            startup_printf(\"%s[%d]: bootstrap failed while creating mapped objects\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n    }\n\n    // Create the initial threads\n    createInitialThreads();\n\n    // Initialize StackwalkerAPI\n    if ( !createStackwalker() )\n    {\n      startup_printf(\"Bootstrap failed while initializing Stackwalker\\n\");\n      return false;\n    }\n\n    // Insert a breakpoint at the entry point of main (and possibly __libc_start_main)\n    if( !hasPassedMain() ) {\n      startup_printf(\"%s[%d]: inserting breakpoint at main\\n\", FILE__, __LINE__);\n        if( !insertBreakpointAtMain() ) {\n            startup_printf(\"%s[%d]: bootstrap failed while setting a breakpoint at main\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n\tstartup_printf(\"%s[%d]: continuing process to breakpoint\\n\", FILE__, __LINE__);\n        if( !continueProcess() ) {\n            startup_printf(\"%s[%d]: bootstrap failed while continuing the process\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n\n        while( !hasReachedBootstrapState(bs_readyToLoadRTLib) ) {\n\t  startup_printf(\"%s[%d]: waiting for main() loop\\n\", FILE__, __LINE__);\n            if( isStopped() ) {\n\t      startup_printf(\"%s[%d]: We think the process is stopped, continuing\\n\", FILE__, __LINE__);\n                if( !continueProcess() ) {\n                    startup_printf(\"%s[%d]: bootstrap failed while continuing the process\\n\",\n                            FILE__, __LINE__);\n                    return false;\n                }\n            }\n\n            if( isTerminated() ) {\n                bperr(\"The process exited during startup.  This is likely due to one \"\n                      \"of two reasons:\\n\"\n                      \"A). The application is mis-built and unable to load.  Try \"\n                      \"running the application outside of Dyninst and see if it \"\n                      \"loads properly.\\n\"\n                      \"B). libdyninstAPI_RT is mis-built.  Try loading the library \"\n                      \"into another application and see if it reports any errors.  \"\n                      \"Ubuntu users - You may need to rebuild the RT library \"\n                      \"with the DISABLE_STACK_PROT line enabled in \"\n                      \"core/make.config.local\");\n                startup_printf(\"%s[%d]: program exited early, never reached \"\n                               \"initialized state\\n\", FILE__, __LINE__);\n                startup_printf(\"Error is likely due to the application or RT \"\n                               \"library having missing symbols or dependencies\\n\");\n                return false;\n            }\n\n            startup_printf(\"%s[%d]: bootstrap waiting for process to initialize\\n\",\n                    FILE__, __LINE__);\n            if( PCEventMuxer::wait(true) == PCEventMuxer::Error) {\n                startup_printf(\"%s[%d]: bootstrap failed to wait for events\\n\",\n                        FILE__, __LINE__);\n                return false;\n            }\n        }\n    }else{\n        bootstrapState_ = bs_readyToLoadRTLib;\n    }\n    startup_printf(\"%s[%d]: process initialized, loading the RT library\\n\",\n            FILE__, __LINE__);\n\n    // Load the RT library\n    if( !loadRTLib() ) {\n        bperr(\"Dyninst was unable to load the dyninst runtime library \"\n              \"into the application.  This may be caused by statically \"\n              \"linked executables, or by having dyninst linked against a \"\n              \"different version of libelf than it was built with.\");\n        startup_printf(\"%s[%d]: bootstrap failed to load RT library\\n\",\n                FILE__, __LINE__);\n        return false;\n    }\n\n\n    pdvector<int_variable *> obsCostVec;\n    if( !findVarsByAll(\"DYNINSTobsCostLow\", obsCostVec) ) {\n        startup_printf(\"%s[%d]: failed to find DYNINSTobsCostLow\\n\",\n                FILE__, __LINE__);\n        return false;\n    }\n\n    costAddr_ = obsCostVec[0]->getAddress();\n    assert(costAddr_);\n\n    if( !wasCreatedViaFork() ) {\n        // Install system call tracing\n        startup_printf(\"%s[%d]: installing default Dyninst instrumentation into process %d\\n\", \n            FILE__, __LINE__, getPid());\n\n        tracedSyscalls_ = new syscallNotification(this);\n\n        // TODO \n        // pre-fork and pre-exit should depend on whether a callback is defined\n        // \n        // This will require checking whether BPatch holds a defined callback and also\n        // adding a way for BPatch enable this instrumentation in all processes when\n        // a callback is registered\n\n        if (!tracedSyscalls_->installPreFork()) {\n            startup_printf(\"%s[%d]: failed pre-fork notification setup\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n\n        if (!tracedSyscalls_->installPostFork()) {\n            startup_printf(\"%s[%d]: failed post-fork notification setup\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n\n        if (!tracedSyscalls_->installPreExec()) {\n            startup_printf(\"%s[%d]: failed pre-exec notification setup\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n\n        if (!tracedSyscalls_->installPostExec()) {\n            startup_printf(\"%s[%d]: failed post-exec notification setup\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n\n        if (!tracedSyscalls_->installPreExit()) {\n            startup_printf(\"%s[%d]: failed pre-exit notification setup\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n\n        if (!tracedSyscalls_->installPreLwpExit()) {\n            startup_printf(\"%s[%d]: failed pre-lwp-exit notification setup\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n\n        // Initialize the MT stuff\n        if (multithread_capable()) {\n            if( !instrumentMTFuncs() ) {\n                startup_printf(\"%s[%d]: Failed to instrument MT funcs\\n\",\n                        FILE__, __LINE__);\n                return false;\n            }\n        }\n    }\n\n    // use heuristics to set hybrid analysis mode\n    if (BPatch_heuristicMode == analysisMode_) {\n        if (getAOut()->parse_img()->codeObject()->defensiveMode()) {\n            analysisMode_ = BPatch_defensiveMode;\n        } else {\n            analysisMode_ = BPatch_normalMode;\n        }\n    }\n\n    bootstrapState_ = bs_initialized;\n    startup_printf(\"%s[%d]: finished bootstrapping process %d\\n\", FILE__, __LINE__, getPid());\n\n    return true;\n}\n\nbool PCProcess::createStackwalker()\n{\n  using namespace Stackwalker;\n  ProcDebug *procDebug = NULL;\n  StackwalkSymLookup *symLookup = NULL;\n\n  // Create ProcessState\n  if (NULL == (procDebug = ProcDebug::newProcDebug(pcProc_)))\n  {\n    startup_printf(\"Could not create Stackwalker process state\\n\");\n    return false;\n  }\n\n  // Create SymbolLookup\n  symLookup = new StackwalkSymLookup(this);\n\n  // Create Walker without default steppers\n  if (NULL == (stackwalker_ = Walker::newWalker(procDebug,\n                                                NULL,\n                                                symLookup,\n                                                false)))\n  {\n    startup_printf(\"Could not create Stackwalker\\n\");\n    return false;\n  }\n\n  return createStackwalkerSteppers();\n}\n\nvoid PCProcess::createInitialThreads() {\n    ThreadPool &pcThreads = pcProc_->threads();\n    initialThread_ = PCThread::createPCThread(this, pcThreads.getInitialThread());\n    addThread(initialThread_);\n\n    for(ThreadPool::iterator i = pcThreads.begin(); i != pcThreads.end(); ++i) {\n        if( *i == pcThreads.getInitialThread() ) continue;\n\n        // Wait to create threads until they have user thread information available\n        if( !(*i)->haveUserThreadInfo() ) continue;\n\n        PCThread *newThr = PCThread::createPCThread(this, *i);\n        addThread(newThr);\n    }\n}\n\nbool PCProcess::createInitialMappedObjects() {\n    if( file_.empty() ) {\n        startup_printf(\"%s[%d]: failed to determine executable for process %d\\n\",\n                FILE__, __LINE__, getPid());\n        return false;\n    }\n\n    startup_printf(\"Processing initial shared objects\\n\");\n    startup_printf(\"----\\n\");\n\n    initPatchAPI();\n\n    // Do the a.out first...\n    mapped_object *aout = mapped_object::createMappedObject(pcProc_->libraries().getExecutable(), this, analysisMode_);\n    addASharedObject(aout);\n\n    // Set the RT library name\n    if( !getDyninstRTLibName() ) {\n      bperr(\"Dyninst was unable to find the dyninst runtime library.\");\n        startup_printf(\"%s[%d]: failed to get Dyninst RT lib name\\n\",\n                FILE__, __LINE__);\n        return false;\n    }\n\n    // Find main\n    startup_printf(\"%s[%d]:  leave setAOut/setting main\\n\", FILE__, __LINE__);\n    setMainFunction();\n\n    // Create mapped objects for any loaded shared libraries\n    const LibraryPool &libraries = pcProc_->libraries();\n    for(LibraryPool::const_iterator i = libraries.begin(); i != libraries.end(); ++i) {\n       // Some platforms don't use the data load address field\n       if ((*i) == libraries.getExecutable()) continue;\n\n       startup_cerr << \"Library: \" << (*i)->getAbsoluteName() \n            << hex << \" / \" << (*i)->getLoadAddress() \n            << \", \" << ((*i)->isSharedLib() ? \"<lib>\" : \"<aout>\") << dec << endl;\n\n       mapped_object *newObj = mapped_object::createMappedObject(*i, \n                                                                 this, analysisMode_);\n       if( newObj == NULL ) {\n           startup_printf(\"%s[%d]: failed to create mapped object for library %s\\n\",\n                   FILE__, __LINE__, (*i)->getAbsoluteName().c_str());\n           return false;\n       }\n\n       const fileDescriptor &desc = newObj->getFileDesc();\n       fileDescriptor tmpDesc(dyninstRT_name, desc.code(), desc.data(), true);\n       if( desc == tmpDesc ) {\n          startup_printf(\"%s[%d]: RT library already loaded, manual loading not necessary\\n\",\n                         FILE__, __LINE__);\n          runtime_lib.insert(newObj);\n       }\n\n       if (analysisMode_ == BPatch_defensiveMode) {\n           std::string lib_name = newObj->fileName();\n           if (lib_name == \"dyninstAPI_RT.dll\" ||\n               lib_name == \"ntdll.dll\" ||\n               lib_name == \"kernel32.dll\" ||\n               lib_name == \"user32.dll\" ||\n               lib_name == \"KERNELBASE.dll\" ||\n               lib_name == \"msvcrt.dll\" ||\n               lib_name == \"msvcr80.dll\" ||\n               lib_name == \"msvcr100d.dll\" ||\n               lib_name == \"msvcp100d.dll\" ||\n               lib_name == \"MSVCR100.dll\") {\n                   startup_cerr << \"Running library \" << lib_name\n                       << \" in normal mode because it is trusted.\\n\";\n                   newObj->enableDefensiveMode(false);\n           }\n       }\n\n       addASharedObject(newObj);\n    }\n\n\n    startup_printf(\"----\\n\");\n\n    return true;\n}\n\n// creates an image, creates new resources for a new shared object\n// adds it to the collection of mapped_objects\nvoid PCProcess::addASharedObject(mapped_object *newObj) {\n    assert(newObj);\n\n    addMappedObject(newObj);\n\n    findSignalHandler(newObj);\n\n    startup_printf(\"%s[%d]: adding shared object %s, addr range 0x%lx to 0x%lx\\n\",\n            FILE__, __LINE__,\n            newObj->fileName().c_str(),\n            newObj->getBaseAddress(),\n            newObj->getBaseAddress() + newObj->get_size());\n    parsing_printf(\"Adding shared object %s, addr range 0x%x to 0x%x\\n\",\n            newObj->fileName().c_str(),\n            newObj->getBaseAddress(),\n            newObj->getBaseAddress() + newObj->get_size());\n\n    if( heapInitialized_ ) {\n        addInferiorHeap(newObj);\n    }else{\n        startup_printf(\"%s[%d]: skipping check for new inferior heaps, heap uninitialized\\n\",\n                                       FILE__, __LINE__);\n    }\n}\n\nvoid PCProcess::removeASharedObject(mapped_object *obj) {\n    // Remove from mapped_objects list\n    for (unsigned j = 0; j < mapped_objects.size(); j++) {\n        if (obj == mapped_objects[j]) {\n            mapped_objects[j] = mapped_objects.back();\n            mapped_objects.pop_back();\n            deletedObjects_.push_back(obj);\n            break;\n        }\n    }\n\n    if (runtime_lib.end() != runtime_lib.find(obj)) {\n        runtime_lib.erase( runtime_lib.find(obj) );\n    }\n    proccontrol_printf(\"Removing shared object %s, addr range 0x%x to 0x%x\\n\",\n                  obj->fileName().c_str(),\n                  obj->getBaseAddress(),\n                  obj->get_size());\n\n    // TODO Signal handler...\n}\n\nbool PCProcess::setAOut(fileDescriptor &desc) {\n    startup_printf(\"%s[%d]:  enter setAOut\\n\", FILE__, __LINE__);\n\n    assert(mapped_objects.size() == 0);\n\n    mapped_object *aout = mapped_object::createMappedObject\n                          (desc, this, getHybridMode());\n    if (!aout) {\n        startup_printf(\"%s[%d]:  fail setAOut\\n\", FILE__, __LINE__);\n        return false;\n    }\n\n\n    return true;\n}\n\n// We keep a vector of all signal handler locations\nvoid PCProcess::findSignalHandler(mapped_object *obj) {\n    startup_printf(\"%s[%d]: findSignalhandler(%p)\\n\", FILE__, __LINE__, obj);\n    assert(obj);\n\n    int_symbol sigSym;\n    string signame(SIGNAL_HANDLER);\n\n    startup_printf(\"%s[%d]: findSignalhandler(%p): gettingSymbolInfo\\n\", FILE__, __LINE__, obj);\n    if (obj->getSymbolInfo(signame, sigSym)) {\n        // Symbols often have a size of 0. This b0rks the codeRange code,\n        // so override to 1 if this is true...\n        unsigned size_to_use = sigSym.getSize();\n        if (!size_to_use) size_to_use = 1;\n\n        startup_printf(\"%s[%d]: findSignalhandler(%p): addingSignalHandler(%p, %d)\\n\", FILE__, __LINE__, obj, (void *) sigSym.getAddr(), size_to_use);\n        addSignalHandler(sigSym.getAddr(), size_to_use);\n    }\n\n    startup_printf(\"%s[%d]: leaving findSignalhandler(%p)\\n\", FILE__, __LINE__, obj);\n}\n\n// NUMBER_OF_MAIN_POSSIBILITIES is defined in image.h\nvoid PCProcess::setMainFunction() {\n    assert(!main_function_);\n\n    for (unsigned i = 0; i < NUMBER_OF_MAIN_POSSIBILITIES; i++) {\n        main_function_ = findOnlyOneFunction(main_function_names[i]);\n        if (main_function_) {\n           break;\n        }\n    }\n}\n \n/*\n * Given an image, add all static heaps inside it\n * (DYNINSTstaticHeap...) to the buffer pool.\n */\nvoid PCProcess::addInferiorHeap(mapped_object *obj) {\n    pdvector<heapDescriptor> infHeaps;\n    /* Get a list of inferior heaps in the new image */\n    if (obj->getInfHeapList(infHeaps)) {\n        /* Add the vector to the inferior heap structure */\n        for (u_int j=0; j < infHeaps.size(); j++) {\n            infmalloc_printf(\"%s[%d]: adding heap at 0x%lx to 0x%lx, name %s\\n\",\n                             FILE__, __LINE__,\n                             infHeaps[j].addr(),\n                             infHeaps[j].addr() + infHeaps[j].size(),\n                             infHeaps[j].name().c_str());\n\n            // platform-specific check to ignore this heap\n            if( skipHeap(infHeaps[j]) ) continue;\n\n            heapItem *h = new heapItem (infHeaps[j].addr(), infHeaps[j].size(),\n                                        infHeaps[j].type(), false);\n\n            infmalloc_printf(\"%s[%d]: Adding heap from 0x%lx - 0x%lx (%d bytes, type %d) from mapped object %s\\n\",\n                             FILE__, __LINE__,\n                             infHeaps[j].addr(),\n                             infHeaps[j].addr() + infHeaps[j].size(),\n                             infHeaps[j].size(),\n                             infHeaps[j].type(),\n                             obj->fileName().c_str());\n\n            addHeap(h);\n\n            // set rtlib heaps (runtime_lib hasn't been set yet)\n            if ( ! obj->fullName().compare( dyninstRT_name ) ) {\n                dyninstRT_heaps_.push_back(h);\n            }\n        }\n    }\n}\n\nstatic const unsigned MAX_THREADS = 32; // Should match MAX_THREADS in RTcommon.c\n\nbool PCProcess::loadRTLib() {\n    // Check if the RT library has already been loaded\n   if( runtime_lib.size() != 0 ) {\n      startup_printf(\"%s[%d]: RT library already loaded\\n\",\n                     FILE__, __LINE__);\n\n      bootstrapState_ = bs_loadedRTLib;\n   }\n   else {\n     if (!pcProc_->addLibrary(dyninstRT_name)) {\n       startup_printf(\"%s[%d]: failed to start loading RT lib\\n\", FILE__,\n\t\t      __LINE__);\n       return false;\n     }\n     bootstrapState_ = bs_loadedRTLib;\n     \n     // Process the library load (we hope)\n     PCEventMuxer::handle(this);\n     \n     if( runtime_lib.size() == 0 ) {\n       startup_printf(\"%s[%d]: failed to load RT lib\\n\", FILE__,\n\t\t      __LINE__);\n       return false;\n     }\n     \n     bootstrapState_ = bs_loadedRTLib;\n   }\n   int loaded_ok = 0;\n   pdvector<int_variable *> vars;\n   if (!findVarsByAll(\"DYNINSThasInitialized\", vars)) {\n        startup_printf(\"%s[%d]: no DYNINSThasInitialized variable\\n\", FILE__, __LINE__);\n\t\treturn false;\n   }\n   if (!readDataWord((void*)vars[0]->getAddress(), sizeof(int), (void *)&loaded_ok, false)) {\n        startup_printf(\"%s[%d]: readDataWord failed\\n\", FILE__, __LINE__);\n        return false;\n   }\n   if(!loaded_ok)\n   {\n\t   startup_printf(\"%s[%d]: DYNINSTinit not called automatically\\n\", FILE__, __LINE__);\n   }\n\n   // Install a breakpoint in DYNINSTtrapFunction.\n   // This is used as RT signal.\n   Address addr = getRTTrapFuncAddr();\n   if (addr == 0) {\n       startup_printf(\"%s[%d]: Cannot find DYNINSTtrapFunction. Needed as RT signal\\n\", FILE__, __LINE__);\n       return false;\n   }\n   if (!setBreakpoint(addr)) {\n       startup_printf(\"%s[%d]: Cannot set breakpoint in DYNINSTtrapFunction.\\n\", FILE__, __LINE__);\n       return false;\n   }\n   startup_printf(\"%s[%d]: DYNINSTinit succeeded\\n\", FILE__, __LINE__);\n   return setRTLibInitParams();\n}\n\n// Set up the parameters for DYNINSTinit in the RT lib\nbool PCProcess::setRTLibInitParams() {\n    startup_printf(\"%s[%d]: welcome to PCProcess::setRTLibInitParams\\n\",\n            FILE__, __LINE__);\n\n    int pid = P_getpid();\n\n\n    // Now we write these variables into the following global vrbles\n    // in the dyninst library:\n    // libdyninstAPI_RT_init_localCause\n    // libdyninstAPI_RT_init_localPid\n\n    pdvector<int_variable *> vars;\n\n\n    if (!findVarsByAll(\"libdyninstAPI_RT_init_localPid\", vars)) {\n        if (!findVarsByAll(\"_libdyninstAPI_RT_init_localPid\", vars)) {\n            startup_printf(\"%s[%d]: could not find necessary internal variable\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n    }\n\n    assert(vars.size() >= 1);\n    if (!writeDataWord((void*)vars[0]->getAddress(), sizeof(int), (void *)&pid)) {\n        startup_printf(\"%s[%d]: writeDataWord failed\\n\", FILE__, __LINE__);\n        return false;\n    }\n    vars.clear();\n\n    if (!findVarsByAll(\"libdyninstAPI_RT_init_maxthreads\", vars)) {\n        if (!findVarsByAll(\"_libdyninstAPI_RT_init_maxthreads\", vars)) {\n            startup_printf(\"%s[%d]: could not find necessary internal variable\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n    }\n\n    unsigned numThreads = MAX_THREADS;\n    if( !multithread_capable() ) numThreads = 1;\n\n    assert(vars.size() >= 1);\n    if (!writeDataWord((void*)vars[0]->getAddress(), sizeof(int), (void *) &numThreads)) {\n        startup_printf(\"%s[%d]: writeDataWord failed\\n\", FILE__, __LINE__);\n        return false;\n    }\n    vars.clear();\n\n    if (!findVarsByAll(\"libdyninstAPI_RT_init_debug_flag\", vars)) {\n        if (!findVarsByAll(\"_libdyninstAPI_RT_init_debug_flag\", vars)) {\n            startup_printf(\"%s[%d]: could not find necessary internal variable\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n    }\n\n    assert(vars.size() >= 1);\n    if (!writeDataWord((void*)vars[0]->getAddress(), sizeof(int), (void *) &dyn_debug_rtlib)) {\n        startup_printf(\"%s[%d]: writeDataWord failed\\n\", FILE__, __LINE__);\n        return false;\n    }\n    vars.clear();\n    if (dyn_debug_rtlib) {\n        fprintf(stderr, \"%s[%d]:  set var in RTlib for debug...\\n\", FILE__, __LINE__);\n    }\n\n    int static_mode = 0;\n    if (!findVarsByAll(\"DYNINSTstaticMode\", vars)) {\n        if (!findVarsByAll(\"DYNINSTstaticMode\", vars)) {\n            startup_printf(\"%s[%d]: could not find necessary internal variable\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n    }\n\n    assert(vars.size() >= 1);\n    if (!writeDataWord((void*)vars[0]->getAddress(), sizeof(int), (void *) &static_mode)) {\n        startup_printf(\"%s[%d]: writeDataWord failed\\n\", FILE__, __LINE__);\n        return false;\n    }\n    vars.clear();\n    return true;\n}\n\n\n#if defined(os_vxworks)\nbool PCProcess::insertBreakpointAtMain() {\n    // We don't need any extra processing of the RTlib.\n    return true;\n}\n#else\nbool PCProcess::insertBreakpointAtMain() {\n    if( main_function_ == NULL ) {\n        startup_printf(\"%s[%d]: main function not yet found, cannot insert breakpoint\\n\",\n                FILE__, __LINE__);\n        return false;\n    }\n    Address addr = main_function_->addr();\n\n    // Create the breakpoint\n    mainBrkPt_ = Breakpoint::newBreakpoint();\n    if( !pcProc_->addBreakpoint(addr, mainBrkPt_) ) {\n        startup_printf(\"%s[%d]: failed to insert a breakpoint at main entry: 0x%x\\n\",\n                FILE__, __LINE__, addr);\n        return false;\n    }\n\n    startup_printf(\"%s[%d]: added trap to entry of main, address 0x%x\\n\", \n            FILE__, __LINE__, addr);\n\n    return true;\n}\n#endif\n\nbool PCProcess::removeBreakpointAtMain() {\n    if( main_function_ == NULL || mainBrkPt_ == Breakpoint::ptr() ) {\n        startup_printf(\"%s[%d]: no breakpoint set at main function, not removing\\n\",\n                FILE__, __LINE__);\n        return true;\n    }\n\n    Address addr = main_function_->addr();\n\n    if( !pcProc_->rmBreakpoint(addr, mainBrkPt_) ) {\n        startup_printf(\"%s[%d]: failed to remove breakpoint at main entry: 0x%x\\n\",\n                FILE__, __LINE__, addr);\n        return false;\n    }\n    mainBrkPt_ = Breakpoint::ptr();\n\n    return true;\n}\n\nBreakpoint::ptr PCProcess::getBreakpointAtMain() const {\n    return mainBrkPt_;\n}\n\n// End Runtime library initialization code\n\nbool PCProcess::continueProcess() {\n    proccontrol_printf(\"%s[%d]: Continuing process %d\\n\", FILE__, __LINE__, getPid());\n\n    if( !isAttached() || isTerminated() ) {\n        bpwarn(\"Warning: continue attempted on non-attached process\\n\");\n        return false;\n    }\n\n    // If the process is in event handling, the process should not be continued, \n    // the processState_t value will be used after event handling to determine the\n    // state of the process\n    if( isInEventHandling() ) {\n        proccontrol_printf(\"%s[%d]: process currently in event handling, not continuing\\n\",\n                FILE__, __LINE__);\n        return true;\n    }\n\n    for(map<dynthread_t, PCThread *>::iterator i = threadsByTid_.begin();\n            i != threadsByTid_.end(); ++i)\n    {\n        i->second->clearStackwalk();\n    }\n\n    return pcProc_->continueProc();\n}\n\nbool PCProcess::stopProcess() {\n    proccontrol_printf(\"%s[%d]: Stopping process %d\\n\", FILE__, __LINE__, getPid());\n\n    if( !isAttached() || isTerminated() ) {\n        bpwarn(\"Warning: stop attempted on non-attached process\\n\");\n        return false;\n    }\n\n    // See comment in continueProcess about this\n    if( isInEventHandling() ) {\n        proccontrol_printf(\"%s[%d]: process currently in event handling, not stopping\\n\",\n                FILE__, __LINE__);\n        return true;\n    }\n\n    return pcProc_->stopProc();\n}\n\nbool PCProcess::terminateProcess() {\n    if( isTerminated() ) return true;\n\n    if( !isAttached() ) return false;\n\n    forcedTerminating_ = true;\n\n    proccontrol_printf(\"%s[%d]: Terminating process %d\\n\", FILE__, __LINE__, getPid());\n    if( !pcProc_->terminate() ) {\n        proccontrol_printf(\"%s[%d]: Failed to terminate process %d\\n\", FILE__, __LINE__, \n                getPid());\n        return false;\n    }\n    PCEventMuxer::handle();\n\n    proccontrol_printf(\"%s[%d]: finished terminating process %d\\n\", FILE__, __LINE__, getPid());\n\n    return true;\n}\n\nbool PCProcess::detachProcess(bool cont = true) {\n    if( isTerminated() ) return true;\n\n    if( !isAttached() ) return false;\n\n    if (tracedSyscalls_) {\n        // Process needs to be stopped to change instrumentation\n        bool needToContinue = false;\n        if( !isStopped() ) {\n            needToContinue = true;\n            if( !stopProcess() ) {\n                proccontrol_printf(\"%s[%d]: failed to stop process for removing syscalls\\n\",\n                        FILE__, __LINE__);\n\t\t        return false;\n            }\n        }\n\n        tracedSyscalls_->removePreFork();\n        tracedSyscalls_->removePostFork();\n        tracedSyscalls_->removePreExec();\n        tracedSyscalls_->removePostExec();\n        tracedSyscalls_->removePreExit();\n        tracedSyscalls_->removePreLwpExit();\n        if (cont) {\n            if( needToContinue ) {\n                if( !continueProcess() ) {\n                    proccontrol_printf(\"%s[%d]: failed to continue process after removing syscalls\\n\",\n                            FILE__, __LINE__);\n                }\n            }\n        }\n    }\n\n    // TODO figure out if ProcControl should care about continuing a process\n    // after detach\n\n    // NB: it's possible to get markExited() while handling events for the\n    // tracedSyscalls_->remove* calls above, clearing pcProc_.\n    if( isTerminated() || pcProc_->detach(!cont) ) {\n        attached_ = false;\n        return true;\n    }\n\n    return false;\n}\n\nbool PCProcess::isBootstrapped() const {\n    return bootstrapState_ == bs_initialized;\n}\n\nbool PCProcess::isAttached() const {\n    return attached_;\n}\n\nbool PCProcess::isStopped() const {\n    if( pcProc_ == Process::ptr() ) return true;\n    return pcProc_->allThreadsStopped();\n}\n\nbool PCProcess::isTerminated() const {\n    if( pcProc_ == Process::ptr() ) return true;\n    return pcProc_->isTerminated();\n}\n\nbool PCProcess::hasExitedNormally() const {\n    if( pcProc_ == Process::ptr() ) return true;\n    return pcProc_->isExited();\n}\n\nbool PCProcess::isExecing() const {\n    return execing_;\n}\n\nvoid PCProcess::setExecing(bool b) {\n    execing_ = b;\n}\n\nbool PCProcess::isExiting() const {\n    return exiting_;\n}\n\nvoid PCProcess::setExiting(bool b) {\n    exiting_ = b;\n}\n\nbool PCProcess::isInEventHandling() const {\n    return inEventHandling_;\n}\n\nvoid PCProcess::setInEventHandling(bool b) {\n    inEventHandling_ = b;\n}\n\nbool PCProcess::hasReportedEvent() const {\n    return reportedEvent_;\n}\n\nvoid PCProcess::setReportingEvent(bool b) {\n    reportedEvent_ = b;\n}\n\nvoid PCProcess::markExited() {\n    pcProc_.reset();\n}\n\nvoid PCProcess::writeDebugDataSpace(void *inTracedProcess, u_int amount,\n        const void *inSelf)\n{\n    static unsigned write_no = 0;\n\n    if( !dyn_debug_write ) return;\n\n    write_printf(\"const unsigned char \");\n    switch(getArch()) {\n        case Arch_x86:\n            write_printf(\"x86_\");\n            break;\n        case Arch_x86_64:\n            write_printf(\"amd64_\");\n            break;\n        case Arch_ppc32:\n        case Arch_ppc64:\n            write_printf(\"power_\");\n            break;\n        default:\n            write_printf(\"unknown_\");\n            break;\n    }\n    write_printf(\"%lx_%d_%u[] = {\", inTracedProcess, getPid(), write_no++);\n\n    if( amount > 0 ) {\n       const unsigned char *buffer = (const unsigned char *)inSelf;\n       for(unsigned i = 0; i < amount-1; ++i) {\n           if( i % 10 == 0 ) write_printf(\"\\n\");\n           write_printf(\"0x%02hhx, \", buffer[i]);\n       }\n       write_printf(\"0x%02hhx\", buffer[amount-1]);\n    }\n    write_printf(\"\\n};\\n\");\n}\n\nbool PCProcess::writeDataSpace(void *inTracedProcess, u_int amount,\n                               const void *inSelf) {\n    if( isTerminated() ) {\n       cerr << \"Writing to terminated process!\" << endl;\n       return false;\n    }\n    bool result = pcProc_->writeMemory((Address)inTracedProcess, inSelf,\n                                       amount);\n\n    if( BPatch_defensiveMode == proc()->getHybridMode() && !result ) {\n        // the write may have failed because we've removed write permissions\n        // from the page, remove them and try again\n\n        PCMemPerm origRights, rights(true, true, true);\n        if (!pcProc_->setMemoryAccessRights((Address)inTracedProcess,\n                                            amount, rights, origRights)) {\n            cerr << \"Fail to set memory permissions!\" << endl;\n            return false;\n        }\n\n        /*\n        int oldRights = pcProc_->setMemoryAccessRights((Address)inTracedProcess,\n                                                       amount,\n                                                       PAGE_EXECUTE_READWRITE);\n\n        if( oldRights == PAGE_EXECUTE_READ || oldRights == PAGE_READONLY ) {\n        */\n\n        if( origRights.isRX() || origRights.isR() ) {\n            result = pcProc_->writeMemory((Address)inTracedProcess, inSelf,\n                                          amount);\n\n            /*\n            if( pcProc_->setMemoryAccessRights((Address)inTracedProcess,\n                                               amount, oldRights) == false ) {\n            */\n\n            PCMemPerm tmpRights;\n            if( !pcProc_->setMemoryAccessRights((Address)inTracedProcess,\n                                                amount, origRights, tmpRights)) {\n                result = false;\n            }\n        } else {\n            result = false;\n        }\n    }\n\n    if( result && dyn_debug_write ) writeDebugDataSpace(inTracedProcess, amount, inSelf);\n\n    return result;\n}\n\nbool PCProcess::writeDataWord(void *inTracedProcess,\n                   u_int amount, const void *inSelf) \n{\n    if( isTerminated() ) return false;\n\n    // XXX ProcControlAPI should support word writes in the future\n    bool result = pcProc_->writeMemory((Address)inTracedProcess, inSelf, amount);\n    if( result && dyn_debug_write ) writeDebugDataSpace(inTracedProcess, amount, inSelf);\n    return result;\n}\n\nbool PCProcess::readDataSpace(const void *inTracedProcess, u_int amount,\n                   void *inSelf, bool displayErrMsg)\n{\n    if( isTerminated() ) return false;\n\n    bool result = pcProc_->readMemory(inSelf, (Address)inTracedProcess, amount);\n    if( !result && displayErrMsg ) {\n        stringstream msg;\n        msg << \"System error: unable to read \" << amount << \"@\" \n            << Address_str((Address)inTracedProcess) << \" from process data space: \"\n            << getLastErrorMsg() << \"(pid = \" << getPid() << \")\";\n       showErrorCallback(38, msg.str()); \n    }\n    return result;\n}\n\nbool PCProcess::readDataWord(const void *inTracedProcess, u_int amount,\n                  void *inSelf, bool displayErrMsg)\n{\n    if( isTerminated() ) return false;\n\n    // XXX see writeDataWord above\n    bool result = pcProc_->readMemory(inSelf, (Address)inTracedProcess, amount);\n    if( !result && displayErrMsg ) {\n        stringstream msg;\n        msg << \"System error: unable to read \" << amount << \"@\" \n            << Address_str((Address)inTracedProcess) << \" from process data space: \"\n            << getLastErrorMsg() << \"(pid = \" << getPid() << \")\";\n       showErrorCallback(38, msg.str());\n    }\n\n    return result;\n}\n\nbool PCProcess::writeTextSpace(void *inTracedProcess, u_int amount, const void *inSelf)\n{\n    if( isTerminated() ) return false;\n    bool result = pcProc_->writeMemory((Address)inTracedProcess, inSelf, amount);\n\n    if( result && dyn_debug_write ) writeDebugDataSpace(inTracedProcess, amount, inSelf);\n\n    return result;\n}\n\nbool PCProcess::writeTextWord(void *inTracedProcess, u_int amount, const void *inSelf)\n{\n    if( isTerminated() ) return false;\n\n    // XXX see writeDataWord above\n    bool result = pcProc_->writeMemory((Address)inTracedProcess, inSelf, amount);\n\n    if( result && dyn_debug_write ) writeDebugDataSpace(inTracedProcess, amount, inSelf);\n\n    return result;\n}\n\nbool PCProcess::readTextSpace(const void *inTracedProcess, u_int amount,\n                   void *inSelf)\n{\n    if( isTerminated() ) return false;\n\n    return pcProc_->readMemory(inSelf, (Address)inTracedProcess, amount);\n}\n\nbool PCProcess::readTextWord(const void *inTracedProcess, u_int amount,\n                  void *inSelf)\n{\n    if( isTerminated() ) return false;\n\n    // XXX see writeDataWord above\n    return pcProc_->readMemory(inSelf, (Address)inTracedProcess, amount);\n}\n\nPCThread *PCProcess::getInitialThread() const {\n    return initialThread_;\n}\n\nPCThread *PCProcess::getThread(dynthread_t tid) const {\n    map<dynthread_t, PCThread *>::const_iterator findIter;\n    findIter = threadsByTid_.find(tid);\n    if( findIter == threadsByTid_.end() ) {\n        return NULL;\n    }\n\n    return findIter->second;\n}\n\nbool PCProcess::removeThread(dynthread_t tid) {\n    map<dynthread_t, PCThread *>::iterator result;\n    result = threadsByTid_.find(tid);\n\n    if( result == threadsByTid_.end() ) return false;\n\n    PCThread *toDelete = result->second;\n\n    //if( !unregisterThread(toDelete) ) return false;\n\n    threadsByTid_.erase(result);\n\n    if( toDelete == initialThread_ ) {\n        initialThread_ = NULL;\n    }\n\n    toDelete->markExited();\n\n    // Note: don't delete the thread here, the BPatch_thread takes care of it\n    proccontrol_printf(\"%s[%d]: removed thread %lu from process %d\\n\",\n            FILE__, __LINE__, toDelete->getLWP(), getPid());\n    return true;\n}\nextern Address getVarAddr(PCProcess *proc, std::string str);\n\n#if 0\nbool PCProcess::registerThread(PCThread *thread) {\n  \n   Address tid = (Address) thread->getTid();\n   Address index = thread->getIndex();\n   \n   Address tmp = 0;\n   unsigned ptrsize = getAddressWidth();\n\n   if (tid == (Address) -1) return true;\n   if (index == (Address) -1) return true;\n\n   if (!initializeRegisterThread()) {\n      startup_printf(\"%s[%d]: initializeRegisterThread failed\\n\",\n                     FILE__, __LINE__);\n\t   \n\t   return false;\n   }\n   // Must match the \"hash\" algorithm used in the RT lib\n   int working = (tid % thread_hash_size);\n   while(1) {\n      tmp = 0;\n      if (!readDataWord(( void *)(thread_hash_indices + (working * ptrsize)), ptrsize, &tmp, false)) {\n         startup_printf(\"%s[%d]: Failed to read index slot, base 0x%lx, active 0x%lx\\n\", FILE__, __LINE__,\n                        thread_hash_indices, thread_hash_indices + (working * ptrsize));\n         return false;\n      }\n      startup_printf(\"%s[%d]: value of tid in slot %p is 0x%lx\\n\",\n                     FILE__, __LINE__, thread_hash_indices + (working * ptrsize), tmp);\n      if (ptrsize == 4 && tmp == 0xffffffff) {\n         int index_int = (int) index;\n         int tid_int = (int) tid;\n         startup_printf(\"%s[%d]: writing %d to %p and 0x%x to %p\\n\",\n                        FILE__, __LINE__, index_int, thread_hash_indices + (working * ptrsize),\n                        tid_int, thread_hash_tids + (working * ptrsize));\n         writeDataWord(( void *)(thread_hash_indices + (working * ptrsize)), ptrsize, &index_int);\n         writeDataWord(( void *)(thread_hash_tids + (working * ptrsize)), ptrsize, &tid_int);\n         break;\n      }\n      else if (ptrsize == 8 && tmp == (Address)-1)  {\n         writeDataWord(( void *)(thread_hash_indices + (working * ptrsize)), ptrsize, &index);\n         writeDataWord(( void *)(thread_hash_tids + (working * ptrsize)), ptrsize, &tid);\n         break;\n      }\n      working++;\n      if (working == thread_hash_size) working = 0;\n      if (working == (int) (tid % thread_hash_size)) {\n         startup_printf(\"%s[%d]: Failed to find empty tid slot\\n\", FILE__, __LINE__);\n         return false;\n      }\n   }\n   return true;\n}\nbool PCProcess::unregisterThread(PCThread *thread) {\t\n   return true;\n   Address tid = (Address) thread->getTid();\n   Address index = thread->getIndex();\n   Address tmp = 0;\n   \n   unsigned ptrsize = getAddressWidth();\n   if (tid == (Address) -1) return true;\n   if (index == (Address) -1) return true;\n\n   initializeRegisterThread();\n\n   // Must match the \"hash\" algorithm used in the RT lib\n   int working = tid % thread_hash_size;\n   while(1) {\n      tmp = 0;\n      if (!readDataWord((void *)(thread_hash_tids + (working * ptrsize)), ptrsize, &tmp, false)) return false;\n      if (tmp == tid) {\n         // Zero it out\n         tmp = (Address) -1;\n         writeDataWord(( void *)(thread_hash_indices + (working * ptrsize)), ptrsize, &tmp);\n         break;\n      }\n      working++;\n      if (working == thread_hash_size) working = 0;\n      if (working == (int) (tid % thread_hash_size)) return false;\n   }\n   return true;\n}\n\nbool PCProcess::initializeRegisterThread() {\n//   if (thread_hash_tids) return true;\n\n   unsigned ptrsize = getAddressWidth();\n   \n   Address tidPtr = getVarAddr(this, \"DYNINST_thread_hash_tids\");\n   if (!tidPtr) return false;\n   Address indexPtr = getVarAddr(this, \"DYNINST_thread_hash_indices\");\n   if (!indexPtr) return false;\n   Address sizePtr = getVarAddr(this, \"DYNINST_thread_hash_size\");\n   if (!sizePtr) return false;\n   \n   if (!readDataWord((const void *)tidPtr, ptrsize, &thread_hash_tids, false)) return false;\n\n   if (!readDataWord((const void *)indexPtr, ptrsize, &thread_hash_indices, false)) return false;\n\n   if (!readDataWord((const void *)sizePtr, sizeof(int), &thread_hash_size, false)) return false;\n\n   return true;\n}\n#endif\n\n\nvoid PCProcess::addThread(PCThread *thread) {\n    pair<map<dynthread_t, PCThread *>::iterator, bool> result;\n    result = threadsByTid_.insert(make_pair(thread->getTid(), thread));\n\n    assert( result.second && \"Thread already in collection of threads\" );\n    proccontrol_printf(\"%s[%d]: added thread %lu to process %d\\n\",\n            FILE__, __LINE__, thread->getLWP(), getPid());\n}\n\nvoid PCProcess::getThreads(vector<PCThread* > &threads) const {\n    for(map<dynthread_t, PCThread *>::const_iterator i = threadsByTid_.begin();\n            i != threadsByTid_.end(); ++i)\n    {\n        threads.push_back(i->second);\n    }\n}\n\nbool PCProcess::wasRunningWhenAttached() const {\n    return runningWhenAttached_;\n}\n\nbool PCProcess::wasCreatedViaAttach() const {\n    return createdViaAttach_;\n}\n\nbool PCProcess::wasCreatedViaFork() const {\n    return parent_ != NULL;\n}\n\nunsigned PCProcess::getMemoryPageSize() const {\n   assert(pcProc_);\n   return pcProc_->getMemoryPageSize();\n}\n\nint PCProcess::getPid() const {\n    return savedPid_;\n}\n\nint PCProcess::incrementThreadIndex() {\n    int ret = curThreadIndex_;\n    curThreadIndex_++;\n    return ret;\n}\n\nunsigned PCProcess::getAddressWidth() const {\n    if( mapped_objects.size() > 0 ) {\n        return mapped_objects[0]->parse_img()->codeObject()->cs()->getAddressWidth();\n    }\n\n    // We can call this before we've attached...best effort guess\n    return sizeof(Address);\n}\n\nPCEventHandler * PCProcess::getPCEventHandler() const {\n    return eventHandler_;\n}\n\nbool PCProcess::walkStacks(pdvector<pdvector<Frame> > &stackWalks) {\n    bool needToContinue = false;\n    bool retval = true;\n\n    // sanity check\n\tif( stackwalker_ == NULL ) return false;\n\n    // Process needs to be stopped before doing a stackwalk\n    if( !isStopped() ) {\n        needToContinue = true;\n        if( !stopProcess() ) {\n            proccontrol_printf(\"%s[%d]: failed to stop process for stackwalking\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n    }\n\n    for(map<dynthread_t, PCThread *>::iterator i = threadsByTid_.begin();\n           i != threadsByTid_.end(); ++i)\n    {\n        PCThread *curThr = i->second;\n\n        pdvector<Frame> stackWalk;\n        if( !curThr->walkStack(stackWalk) ) {\n            retval = false;\n            proccontrol_printf(\"%s[%d]: failed to walk stack for thread 0x%lx(%d)\\n\",\n                    FILE__, __LINE__,\n                    curThr->getTid(), curThr->getLWP());\n        }else{\n            stackWalks.push_back(stackWalk);\n        }\n    }\n\n    if( needToContinue ) {\n        if( !continueProcess() ) {\n            proccontrol_printf(\"%s[%d]: failed to continue process after performing stackwalking\\n\",\n                    FILE__, __LINE__);\n            return false;\n        }\n    }\n\n    return retval;\n}\n\n// Return a vector (possibly with one object) of active frames in the process\nbool PCProcess::getAllActiveFrames(pdvector<Frame> &activeFrames) {\n    Frame active;\n    if( threadsByTid_.size() == 0 ) return false;\n\n    for(map<dynthread_t, PCThread *>::iterator i = threadsByTid_.begin();\n            i != threadsByTid_.end(); ++i)\n    {\n        Frame active = i->second->getActiveFrame();\n        if( active == Frame() ) return false;\n        activeFrames.push_back(active);\n    }\n\n    return true;\n}\n\n//\n// dynamic inferior heap stuff\n//\n\n#if defined(os_vxworks)\n#include \"vxworks.h\"\n#define HEAP_DYN_BUF_SIZE (0x4000)\n#else\n#define HEAP_DYN_BUF_SIZE (0x100000)\n#endif\n\nstatic const Address ADDRESS_LO = ((Address)0x10000);\nstatic const Address ADDRESS_HI = ((Address)~((Address)0));\n\nAddress PCProcess::inferiorMalloc(unsigned size, inferiorHeapType type,\n                                  Address near_, bool *err) \n{\n   if(bootstrapState_ <= bs_readyToLoadRTLib) {\n      return 0;\n   }\n\n    enum MallocAttempt {\n        AsIs = 0,\n        DeferredFree = 1, // compact free blocks\n        NewSegment1MBConstrained = 2, // allocate new segment (1 MB, constrained)\n        NewSegmentSizedConstrained = 3, // allocate new segment (sized, constrained)\n        RemoveRangeConstraints = 4,\n        NewSegment1MBUnconstrained = 5,\n        NewSegmentSizedUnconstrained = 6,\n        DeferredFreeAgain = 7 // why again?\n    };\n\n    Address ret = 0;\n    if (err) *err = false;\n\n    if( size <= 0 ) {\n        infmalloc_printf(\"%s[%d]: inferior malloc cannot be <= 0\\n\",\n                FILE__, __LINE__);\n        if( err ) *err = true;\n        return 0;\n    }\n\n    // allocation range\n    Address lo = ADDRESS_LO; // Should get reset to a more reasonable value\n    Address hi = ADDRESS_HI; // Should get reset to a more reasonable value\n\n    //#if defined(cap_dynamic_heap)\n    inferiorMallocAlign(size); // align size\n    // Set the lo/hi constraints (if necessary)\n    inferiorMallocConstraints(near_, lo, hi, type);\n    //#else\n    /* align to cache line size (32 bytes on SPARC) */\n    //size = (size + 0x1f) & ~0x1f;\n    //#endif\n\n    infmalloc_printf(\"%s[%d]: inferiorMalloc entered; size %d, type %d, near 0x%lx (0x%lx to 0x%lx)\\n\",\n                     FILE__, __LINE__, size, type, near_, lo, hi);\n\n    // find free memory block (multiple attempts)\n    int freeIndex = -1;\n    int ntry = 0;\n    for (ntry = 0; freeIndex == -1; ntry++) {\n        switch(ntry) {\n        case AsIs: \n            infmalloc_printf(\"%s[%d]:  (1) AsIs\\n\", FILE__, __LINE__);\n            break;\n\t    //#if defined(cap_dynamic_heap)\n        case DeferredFree: \n            infmalloc_printf(\"%s[%d]:  (2) garbage collecting and compacting\\n\",\n                             FILE__, __LINE__);\n            inferiorFreeCompact();\n            break;\n        case NewSegment1MBConstrained: \n            infmalloc_printf(\"%s[%d]:  (3) inferiorMallocDynamic \"\n                    \"for %d (0x%x) bytes between 0x%lx - 0x%lx\\n\", FILE__, __LINE__,\n                    HEAP_DYN_BUF_SIZE, HEAP_DYN_BUF_SIZE, lo, hi);\n            inferiorMallocDynamic(HEAP_DYN_BUF_SIZE, lo, hi);\n            break;\n        case NewSegmentSizedConstrained: \n            infmalloc_printf(\"%s[%d]:  (4) inferiorMallocDynamic \"\n                    \"for %d (0x%x) bytes between 0x%lx - 0x%lx\\n\",\n                             FILE__, __LINE__, size, size, lo, hi);\n            inferiorMallocDynamic(size, lo, hi);\n            break;\n        case RemoveRangeConstraints: \n            infmalloc_printf(\"%s[%d]:  (5) inferiorMalloc: removing range constraints\\n\",\n                             FILE__, __LINE__);\n            lo = ADDRESS_LO;\n            hi = ADDRESS_HI;\n            if (err) {\n                infmalloc_printf(\"%s[%d]: error in inferiorMalloc\\n\", FILE__, __LINE__);\n                *err = true;\n            }\n            break;\n        case NewSegment1MBUnconstrained: \n            infmalloc_printf(\"%s[%d]:  (6) inferiorMallocDynamic for %d (0x%x) bytes between 0x%lx - 0x%lx\\n\",\n                             FILE__, __LINE__, HEAP_DYN_BUF_SIZE, HEAP_DYN_BUF_SIZE, lo, hi);\n            inferiorMallocDynamic(HEAP_DYN_BUF_SIZE, lo, hi);\n            break;\n        case NewSegmentSizedUnconstrained: \n            infmalloc_printf(\"%s[%d]:  (7) inferiorMallocDynamic for %d (0x%x) bytes between 0x%lx - 0x%lx\\n\",\n                             FILE__, __LINE__, size, size, lo, hi);\n            inferiorMallocDynamic(size, lo, hi);\n            break;\n        case DeferredFreeAgain: \n            infmalloc_printf(\"%s[%d]: inferiorMalloc: recompacting\\n\", FILE__, __LINE__);\n            inferiorFreeCompact();\n            break;\n\t    //#else /* !(cap_dynamic_heap) */\n\t    //case DeferredFree: // deferred free, compact free blocks\n            //inferiorFreeCompact();\n            //break;\n\t    //#endif /* cap_dynamic_heap */\n\n        default: // error - out of memory\n            infmalloc_printf(\"%s[%d]: failed to allocate memory\\n\", FILE__, __LINE__);\n            if( err ) *err = true;\n            return 0;\n        }\n\n        ret = inferiorMallocInternal(size, lo, hi, type);\n        if (ret) break;\n    }\n    infmalloc_printf(\"%s[%d]: inferiorMalloc, returning address 0x%lx\\n\", FILE__, __LINE__, ret);\n    return ret;\n}\n\nvoid PCProcess::inferiorFree(Dyninst::Address item) {\n    inferiorFreeInternal(item);\n}\n\nbool PCProcess::inferiorRealloc(Dyninst::Address item, unsigned int newSize) {\n\tif(bootstrapState_ <= bs_readyToLoadRTLib) {\n      return true;\n   }\n   return inferiorReallocInternal(item, newSize);\n}\n\nstatic\nvoid alignUp(int &val, int align) {\n    assert(val >= 0);\n    assert(align >= 0);\n\n    if (val % align != 0) {\n        val = ((val / align) + 1) * align;\n    }\n}\n\nbool PCProcess::inferiorMallocDynamic(int size, Address lo, Address hi) {\n    const int MallocFailed = 0;\n    const int UnalignedBuffer = -1;\n\n    infmalloc_printf(\"%s[%d]: entering inferiorMallocDynamic\\n\", FILE__, __LINE__);\n\n    // word-align buffer size\n    // (see \"DYNINSTheap_align\" in rtinst/src/RTheap-<os>.c)\n    alignUp(size, 4);\n    // build AstNode for \"DYNINSTos_malloc\" call\n    std::string callee = \"DYNINSTos_malloc\";\n    pdvector<AstNodePtr> args(3);\n    args[0] = AstNode::operandNode(AstNode::Constant, (void *)(Address)size);\n    args[1] = AstNode::operandNode(AstNode::Constant, (void *)lo);\n    args[2] = AstNode::operandNode(AstNode::Constant, (void *)hi);\n    AstNodePtr code = AstNode::funcCallNode(callee, args);\n\n    // issue RPC and wait for result\n    bool wasRunning = !isStopped();\n\n    proccontrol_printf(\"%s[%d]: running inferiorMalloc via iRPC on process %d\\n\",\n            FILE__, __LINE__, getPid());\n\n    Address result = 0;\n    if( !postIRPC(code,\n                  NULL, // only care about the result\n                  wasRunning, // run when finished?\n                  NULL, // no specific thread\n                  true, // wait for completion\n                  (void **)&result,\n                  false, // internal iRPC\n                  true) ) // is a memory allocation RPC\n    {\n        infmalloc_printf(\"%s[%d]: failed to post iRPC for inferior malloc\\n\",\n                FILE__, __LINE__);\n        return false;\n    }\n    proccontrol_printf(\"%s[%d]: inferiorMalloc via iRPC returned 0x%lx\\n\",\n            FILE__, __LINE__, result);\n\n    switch ((int)result) {\n        case MallocFailed:\n            infmalloc_printf(\"%s[%d]: DYNINSTos_malloc() failed\\n\",\n                               FILE__, __LINE__);\n            return false;\n        case UnalignedBuffer:\n            infmalloc_printf(\"%s[%d]: DYNINSTos_malloc(): unaligned buffer size\\n\",\n                               FILE__, __LINE__);\n            return false;\n        default:\n            // add new segment to buffer pool\n            heapItem *h = new heapItem(result, size, getDynamicHeapType(),\n                    true, HEAPfree);\n            addHeap(h);\n            break;\n    }\n\n    return true;\n}\n\n// A copy of the BPatch-level instrumentation installer\nvoid PCProcess::installInstrRequests(const pdvector<instMapping*> &requests) {\n    if (requests.size() == 0) {\n        return;\n    }\n\n    // Instrumentation is now generated on a per-function basis, while\n    // the requests are per-inst, not per-function. So \n    // accumulate functions, then generate afterwards. \n\n    vector<func_instance *> instrumentedFuncs;\n\n    for (unsigned lcv=0; lcv < requests.size(); lcv++) {\n      inst_printf(\"%s[%d]: handling request %d of %d\\n\", FILE__, __LINE__, lcv+1, requests.size());\n\n        instMapping *req = requests[lcv];\n        pdvector<miniTramp *> minis;\n        \n        if(!multithread_capable() && req->is_MTonly())\n            continue;\n        \n        pdvector<func_instance *> matchingFuncs;\n        \n        if (!findFuncsByAll(req->func, matchingFuncs, req->lib)) {\n            inst_printf(\"%s[%d]: failed to find any functions matching %s (lib %s), returning failure from installInstrRequests\\n\", FILE__, __LINE__, req->func.c_str(), req->lib.c_str());\n            return;\n        }\n        else {\n            inst_printf(\"%s[%d]: found %d functions matching %s (lib %s), instrumenting...\\n\",\n                        FILE__, __LINE__, matchingFuncs.size(), req->func.c_str(), req->lib.c_str());\n        }\n\n        for (unsigned funcIter = 0; funcIter < matchingFuncs.size(); funcIter++) {\n           func_instance *func = matchingFuncs[funcIter];\n           if (!func) {\n              inst_printf(\"%s[%d]: null int_func detected\\n\",\n                          FILE__,__LINE__);\n              continue;  // probably should have a flag telling us whether errors\n           }\n\n\t   inst_printf(\"%s[%d]: Instrumenting %s at 0x%lx, offset 0x%lx in %s\\n\",\n\t\t       FILE__, __LINE__, \n\t\t       func->symTabName().c_str(),\n\t\t       func->addr(),\n\t\t       func->addr() - func->obj()->codeBase(),\n\t\t       func->obj()->fullName().c_str());\n            \n           // should be silently handled or not\n           AstNodePtr ast;\n           if ((req->where & FUNC_ARG) && req->args.size()>0) {\n              ast = AstNode::funcCallNode(req->inst, \n                                          req->args,\n                                          this);\n           }\n           else {\n              pdvector<AstNodePtr> def_args;\n              def_args.push_back(AstNode::operandNode(AstNode::Constant,\n                                                      (void *)0));\n              ast = AstNode::funcCallNode(req->inst,\n                                          def_args);\n           }\n           // We mask to strip off the FUNC_ARG bit...\n           std::vector<Point *> points;\n           switch ( ( req->where & 0x7) ) {\n              case FUNC_EXIT:\n                 mgr()->findPoints(Dyninst::PatchAPI::Scope(func),\n                                   Point::FuncExit,\n                                   std::back_inserter(points));\n                 break;\n              case FUNC_ENTRY:\n                 mgr()->findPoints(Dyninst::PatchAPI::Scope(func),\n                                   Point::FuncEntry,\n                                   std::back_inserter(points));\n                 break;\n              case FUNC_CALL:\n                 mgr()->findPoints(Dyninst::PatchAPI::Scope(func),\n                                   Point::PreCall,\n                                   std::back_inserter(points));\n                 break;\n              default:\n                 fprintf(stderr, \"Unknown where: %d\\n\",\n                         req->where);\n                 break;\n           } // switch\n\t   inst_printf(\"%s[%d]: found %d points to instrument\\n\", FILE__, __LINE__, points.size());\n           for (std::vector<Point *>::iterator iter = points.begin();\n                iter != points.end(); ++iter) {\n              Dyninst::PatchAPI::Instance::Ptr inst = (req->order == orderFirstAtPoint) ? \n                 (*iter)->pushFront(ast) :\n                 (*iter)->pushBack(ast);\n              if (inst) {\n                 if (!req->useTrampGuard) inst->disableRecursiveGuard();\n                 req->instances.push_back(inst);\n              }\n              else {\n                 fprintf(stderr, \"%s[%d]:  failed to addInst here\\n\", FILE__, __LINE__);\n              }\n           }        } // matchingFuncs        \n        \n    } // requests\n    relocate();\n    return;\n}\n\nstatic const unsigned MAX_IRPC_SIZE = 0x100000;\n\n\nbool PCProcess::postIRPC(void* buffer, int size, void* userData, bool runProcessWhenDone,\n                         PCThread* thread, bool synchronous, void** result,\n                         bool userRPC, bool isMemAlloc, Address addr)\n{\n   return postIRPC_internal(buffer,\n                            size,\n                            size,\n                            REG_NULL,\n                            addr,\n                            userData,\n                            runProcessWhenDone,\n                            thread,\n                            synchronous,\n                            userRPC,\n                            isMemAlloc,\n                            result);    \n}\n\nbool PCProcess::postIRPC(AstNodePtr action, void *userData, \n                         bool runProcessWhenDone, PCThread *thread, bool synchronous,\n                         void **result, bool userRPC, bool isMemAlloc, Address addr)\n{   \n   // Generate the code for the iRPC\n   codeGen irpcBuf(MAX_IRPC_SIZE);\n   irpcBuf.setAddrSpace(this);\n   irpcBuf.setRegisterSpace(registerSpace::irpcRegSpace(proc()));\n   irpcBuf.beginTrackRegDefs();\n   irpcBuf.setThread(thread);\n   \n#if defined(bug_syscall_changepc_rewind)\n   // Reported by SGI, during attach to a process in a system call:\n   \n   // Insert eight NOP instructions before the actual call to dlopen(). Loading\n   // the runtime library when the mutatee was in a system call will sometimes\n   // cause the process to (on IA32 anyway) execute the instruction four bytes\n   // PREVIOUS to the PC we actually set here. No idea why. Prepending the\n   // actual dlopen() call with eight NOP instructions insures this doesn't\n   // really matter. Eight was selected rather than four because I don't know\n   // if x86-64 does the same thing (and jumps eight bytes instead of four).\n   \n   // We will put in <addr width> rather than always 8; this will be 4 on x86 and\n   // 32-bit AMD64, and 8 on 64-bit AMD64.\n   irpcBuf.fill(proc()->getAddressWidth(), codeGen::cgNOP);\n#endif\n\n   irpcTramp_->setIRPCAST(action);\n   \n   // Create a stack frame for the RPC\n   if( !irpcTramp_->generateSaves(irpcBuf, irpcBuf.rs()) ) {\n      proccontrol_printf(\"%s[%d]: failed to generate saves via baseTramp\\n\",\n                         FILE__, __LINE__);\n      return false;\n   }\n   \n   Register resultReg = REG_NULL;\n   if( !action->generateCode(irpcBuf, false, resultReg) ) {\n      proccontrol_printf(\"%s[%d]: failed to generate code from AST\\n\",\n                         FILE__, __LINE__);\n      return false;\n   }\n\n    // Note: we should not do a corresponding baseTramp restore here:\n    // 1) It isn't necessary because ProcControl will restore the\n    //    registers\n    // 2) We need to be able to read registers to get the result of the iRPC\n    //    If we restore, we can't do that\n\n    // Emit the trailer for the iRPC\n\n    // breakOffset: where the irpc ends\n    unsigned breakOffset = irpcBuf.used();\n    insnCodeGen::generateTrap(irpcBuf);\n    insnCodeGen::generateTrap(irpcBuf);\n\n    irpcBuf.endTrackRegDefs();\n\n    //#sasha printing code patch for DYNINSTos_malloc\n    //cerr << \"BUFFER for IRPC\" << endl;\n    //cerr << irpcBuf.format() << endl;\n\n    return postIRPC_internal(irpcBuf.start_ptr(),\n                             irpcBuf.used(),\n                             breakOffset,\n                             resultReg,\n                             addr,\n                             userData,\n                             runProcessWhenDone,\n                             thread,\n                             synchronous,\n                             userRPC,\n                             isMemAlloc,\n                             result);    \n}\n\n// DEBUG\n#include \"instructionAPI/h/InstructionDecoder.h\"\n\nbool PCProcess::postIRPC_internal(void *buf,\n                                  unsigned size,\n                                  unsigned breakOffset,\n                                  Register resultReg,\n                                  Address addr,\n                                  void *userData,\n                                  bool runProcessWhenDone,\n                                  PCThread *thread,\n                                  bool synchronous,\n                                  bool userRPC,\n                                  bool isMemAlloc,\n                                  void **result) {\n   if( isTerminated() ) {\n      proccontrol_printf(\"%s[%d]: cannot post RPC to exited or terminated process %d\\n\",\n                         FILE__, __LINE__, getpid());\n      return false;\n   }\n   \n   if( thread && !thread->isLive() ) {\n      proccontrol_printf(\"%s[%d]: attempted to post RPC to dead thread %d\\n\",\n                         FILE__, __LINE__, thread->getLWP());\n      return false;\n   }\n\n\n   inferiorRPCinProgress *newRPC = new inferiorRPCinProgress;\n   newRPC->runProcWhenDone = runProcessWhenDone;\n   newRPC->deliverCallbacks = userRPC;\n   newRPC->userData = userData;\n   newRPC->synchronous = synchronous;\n\n   newRPC->resultRegister = resultReg;\n   \n   // Create the iRPC at the ProcControl level\n   if( addr == 0 ) {\n      bool err = false;\n      if( isMemAlloc ) {\n         // This assumes that there will always be space\n         addr = inferiorMalloc(size, lowmemHeap, 0, &err);\n      }else{\n         // recursive RPCs are okay when this isn't an inferiorMalloc RPC\n         addr = inferiorMalloc(size, anyHeap, 0, &err);\n      }\n      \n      if( err ) {\n         proccontrol_printf(\"%s[%d]: failed to allocate memory for RPC\\n\",\n                            FILE__, __LINE__);\n         delete newRPC;\n         return false;\n      }\n      newRPC->memoryAllocated = true;\n   }\n   \n    if (addr)\n       newRPC->rpc = IRPC::createIRPC(buf, size, addr);\n    else\n       newRPC->rpc = IRPC::createIRPC(buf, size);\n\n#if 0\n   // DEBUG\n   InstructionAPI::InstructionDecoder d(buf,size,getArch());\n   Address foo = addr;\n   InstructionAPI::Instruction::Ptr insn = d.decode();\n   while(insn) {\n      cerr << \"\\t\" << hex << foo << \": \" << insn->format(foo) << dec << endl;\n      foo += insn->size();\n      insn = d.decode();\n   }\n#endif\n    newRPC->rpc->setData(newRPC);\n\n    unsigned int start_offset = 0;\n#if defined(bug_syscall_changepc_rewind)\n    // Some Linux kernels have the following behavior:\n    // Process is in a system call;\n    // We interrupt the system call;\n    // We say \"change PC to address N\"\n    // The kernel helpfully changes it to (N - address width)\n    // The program crashes\n    // See a more complete comment above.\n    // For now, we pad the start of our code with NOOPS and change to just\n    // after those; if we hit rewind behavior, then we're executing safe code.\n    //\n    // Matt Note:  The above comment is slightly incorrect.  The kernel subracts\n    //  the length of the syscall/int instruction that triggered the system call,\n    //  not the address width.  Still address width is big enough, so I'm not\n    //  changing anything.\n    start_offset = proc()->getAddressWidth();\n    newRPC->rpcStartAddr += start_offset;\n#endif\n    newRPC->rpc->setStartOffset(start_offset);\n    newRPC->rpcCompletionAddr = addr + breakOffset;\n\n    // Post the iRPC\n    Thread::ptr t;\n    if (thread) {\n       t = thread->pcThr();\n    }\n    newRPC->thread = t;\n    \n    bool res = false;\n    proccontrol_printf(\"%s[%d]: Launching IRPC\\n\", FILE__, __LINE__);\n    if (synchronous) {\n       // We have an interesting problem here. ProcControl allows callbacks to specify whether the \n       // process should stop or run; however, that allows us to stop a process in the middle of an\n       // inferior RPC. If that happens, manually execute a continue and wait for completion ourselves.\n       if (t)\n          res = t->runIRPCSync(newRPC->rpc);\n       else\n          res = pcProc_->runIRPCSync(newRPC->rpc);\n       if (!res) {\n          bool done = false;\n          while (!done) {\n             proccontrol_printf(\"%s[%d]: Iterating in loop waiting for IRPC to complete\\n\", FILE__, __LINE__);\n             if (isTerminated()) {\n                fprintf(stderr, \"IRPC on terminated process, ret false!\\n\");\n                delete newRPC;\n                return false;\n             }\n\n            if (ProcControlAPI::getLastError() != ProcControlAPI::err_notrunning) {\n                // Something went wrong\n               proccontrol_printf(\"%s[%d]: failed to post %s RPC to %s, error %s\\n\",\n                                  FILE__, __LINE__, (synchronous ? \"sync\" : \"async\"), \n                                  ((thread == NULL) ? \"thread\" : \"process\"),\n                                  ProcControlAPI::getLastErrorMsg());\n               delete newRPC;\n               return false;\n            }\n            else {\n               proccontrol_printf(\"%s[%d]: ProcControl reported IRPC thread stopped, continuing and consuming events\\n\", FILE__, __LINE__);\n               newRPC->rpc->continueStoppedIRPC();\n               proccontrol_printf(\"%s[%d]: handling events in ProcControl\\n\", FILE__, __LINE__);\n               res = pcProc_->handleEvents(true);\n               PCEventMuxer::muxer().handle(NULL);\n               if (newRPC->rpc->state() == ProcControlAPI::IRPC::Done) {\n                  proccontrol_printf(\"%s[%d]: IRPC complete\\n\", FILE__, __LINE__);\n                  done = true;\n               }\n            }\n          }\n       }\n    }\n    else {\n       if (t)\n          res = t->runIRPCAsync(newRPC->rpc);\n       else\n          res = pcProc_->runIRPCAsync(newRPC->rpc);\n    }\n    if(!res) {\n       proccontrol_printf(\"%s[%d]: failed to post %s RPC to %s\\n\",\n                          FILE__, __LINE__, (synchronous ? \"sync\" : \"async\"), ((thread == NULL) ? \"thread\" : \"process\"));\n       delete newRPC;\n       return false;\n    }\n    \n    if( result ) {\n       *result = newRPC->returnValue;\n    }\n    \n    // Make sure Dyninst has worked everything out\n    PCEventMuxer::muxer().wait(false);\n\n   return true;\n}\n\n\nBPatch_hybridMode PCProcess::getHybridMode() {\n    return analysisMode_;\n}\n\nbool PCProcess::isExploratoryModeOn() const {\n    return BPatch_exploratoryMode == analysisMode_ ||\n           BPatch_defensiveMode   == analysisMode_;\n}\n\nbool PCProcess::isRuntimeHeapAddr(Address addr) const {\n    for (unsigned hidx=0; hidx < dyninstRT_heaps_.size(); hidx++) {\n        if (addr >= dyninstRT_heaps_[hidx]->addr &&\n            addr < dyninstRT_heaps_[hidx]->addr + dyninstRT_heaps_[hidx]->length) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* returns true if blocks were overwritten, initializes overwritten\n * blocks and ranges by contrasting shadow pages with current memory\n * contents\n * 1. reads shadow pages in from memory\n * 2. constructs overwritten region list\n * 3. constructs overwrittn basic block list\n * 4. determines if the last of the blocks has an abrupt end, in which\n *    case it marks it as overwritten\n */\nbool PCProcess::getOverwrittenBlocks\n  ( std::map<Address, unsigned char *>& overwrittenPages,//input\n    std::list<std::pair<Address,Address> >& overwrittenRanges,//output\n    std::list<block_instance *> &writtenBBIs)//output\n{\n    const unsigned MEM_PAGE_SIZE = getMemoryPageSize();\n    unsigned char * memVersion = (unsigned char *) ::malloc(MEM_PAGE_SIZE);\n    Address regionStart = 0;\n    bool foundStart = false;\n    map<Address, unsigned char*>::iterator pIter = overwrittenPages.begin();\n    set<mapped_object*> owObjs;\n    for (; pIter != overwrittenPages.end(); pIter++) {\n        Address curPageAddr = (*pIter).first / MEM_PAGE_SIZE * MEM_PAGE_SIZE;\n        unsigned char *curShadow = (*pIter).second;\n\n        // 0. check to make sure curShadow is non-null, if it is null, \n        //    that means it hasn't been written to\n        if ( ! curShadow ) {\n                        cerr << \"\\t\\t No current shadow, continuing\" << endl;\n                        continue;\n        }\n\n        mapped_object* obj = findObject(curPageAddr);\n        if (owObjs.end() != owObjs.find(obj)) {\n            obj->setCodeBytesUpdated(false);\n        }\n\n        // 1. Read the modified page in from memory\n        Address readAddr = curPageAddr;\n        if (isMemoryEmulated()) {\n            bool valid = false;\n            boost::tie(valid,readAddr) = getMemEm()->translate(curPageAddr);\n                        cerr << \"\\t\\t Reading from shadow page \" << hex << readAddr << \" instead of original \" << curPageAddr << endl;\n            assert(valid);\n        }\n        readTextSpace((void*)readAddr, MEM_PAGE_SIZE, memVersion);\n\n        // 2. build overwritten region list by comparing shadow, memory\n        for (unsigned mIdx = 0; mIdx < MEM_PAGE_SIZE; mIdx++) {\n            if ( ! foundStart && curShadow[mIdx] != memVersion[mIdx] ) {\n                foundStart = true;\n                regionStart = curPageAddr+mIdx;\n            } else if (foundStart && curShadow[mIdx] == memVersion[mIdx]) {\n                foundStart = false;\n                                cerr << \"\\t\\t Adding overwritten range \" << hex << regionStart << \" -> \" << curPageAddr + mIdx << dec << endl;\n\n                overwrittenRanges.push_back(\n                    pair<Address,Address>(regionStart,curPageAddr+mIdx));\n            }\n        }\n        if (foundStart) {\n\n            foundStart = false;\n                        cerr << \"\\t\\t Adding overwritten range \" << hex << regionStart << \" -> \" << curPageAddr + MEM_PAGE_SIZE << dec << endl;\n\n            overwrittenRanges.push_back(\n                pair<Address,Address>(regionStart,curPageAddr+MEM_PAGE_SIZE));\n        }\n    }\n\n    // 3. Determine which basic blocks have been overwritten\n    list<pair<Address,Address> >::const_iterator rIter = overwrittenRanges.begin();\n    std::list<block_instance*> curBBIs;\n    while (rIter != overwrittenRanges.end()) {\n        mapped_object *curObject = findObject((*rIter).first);\n\n        curObject->findBlocksByRange((*rIter).first,(*rIter).second,curBBIs);\n        if (curBBIs.size()) {\n            mal_printf(\"overwrote %d blocks in range %lx %lx \\n\",\n                       curBBIs.size(),(*rIter).first,(*rIter).second);\n            writtenBBIs.splice(writtenBBIs.end(), curBBIs);\n        }\n\n        curBBIs.clear();\n        rIter++;\n    }\n\n    free(memVersion);\n    if (writtenBBIs.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// distribute the work to mapped_objects\nvoid PCProcess::updateCodeBytes\n    ( const list<pair<Address, Address> > &owRanges ) // input\n{\n    std::map<mapped_object *,list<pair<Address,Address> >*> objRanges;\n    list<pair<Address,Address> >::const_iterator rIter = owRanges.begin();\n    for (; rIter != owRanges.end(); rIter++) {\n        mapped_object *obj = findObject((*rIter).first);\n        if (objRanges.find(obj) == objRanges.end()) {\n            objRanges[obj] = new list<pair<Address,Address> >();\n        }\n        objRanges[obj]->push_back(pair<Address,Address>(rIter->first, rIter->second));\n    }\n\n    std::map<mapped_object *,list<pair<Address,Address> > *>::iterator oIter = \n        objRanges.begin();\n    for (; oIter != objRanges.end(); oIter++) \n    {\n        oIter->first->updateCodeBytes( *(oIter->second) );\n        delete (oIter->second);\n    }\n    assert(objRanges.size() <= 1); //o/w analysis code may not be prepared for other cases\n}\n\n#if 0\nstatic void otherFuncBlocks(func_instance *func, \n                            const set<block_instance*> &blks, \n                            set<block_instance*> &otherBlks)\n{\n    const func_instance::BlockSet &allBlocks = \n        func->blocks();\n    for (func_instance::BlockSet::const_iterator bit =\n         allBlocks.begin();\n         bit != allBlocks.end(); \n         bit++) \n    {\n        if (blks.end() == blks.find((*bit))) {\n            otherBlks.insert((*bit));\n        }\n    }\n}\n#endif\n\n/* Summary\n * Given a list of overwritten blocks, find blocks that are unreachable,\n * functions that have been overwritten at their entry points and can go away,\n * and new function entry for functions that are being overwritten while still\n * executing\n *\n * variables\n * f:  the overwritten function\n * ow: the set of overwritten blocks\n * ex: the set of blocks that are executing on the call stack that were not overwritten\n * \n * primitives\n * R(b,s): yields set of reachable blocks for collection of blocks b, starting\n *         at seed blocks s.\n * B(f):   the blocks pertaining to function f\n * EP(f):  the entry point of function f\n * F(b):   functions containing block b\n * \n * calculations\n * Elim(f): the set of blocks to eliminate from function f.\n *          Elim(f) = B(f) - R( B(f)-ow , EP(f) )\n * New(f):  new function entry candidates for f's surviving blocks.\n *          If EB(f) not in ow(f), empty set\n *          Else, all blocks b such that ( b in ex AND e in Elim(f) )\n *          Eliminate New(f) elements that have ancestors in New(f)\n * Del(f):  A block can be deleted altogether if\n *          forall f in F(b): B(F) - R( B(f) - ow , New(f) U (EP(f) \\ ow(f)) U (ex(f) intersect Elim(f)) ),\n *          b is not in the resulting set. In other words, b is not\n *          reachable from non-overwritten blocks in the functions in\n *          which it appears, seeded at new entry points and original\n *          non-overwritten entry points to the function, and at f's\n *          executing blocks if these will be deleted from the\n *          function (they constitute an entry point into the function \n *          even if they've been overwritten). \n * DeadF:   the set of functions that have no executing blocks \n *          and were overwritten in their entry blocks\n *          EP(f) in ow(f) AND ex(f) is empty\n */\nbool PCProcess::getDeadCode\n( const std::list<block_instance*> & /*owBlocks*/, // input\n  std::set<block_instance*> & /*delBlocks*/, //output: Del(for all f)\n  std::map<func_instance*,set<block_instance*> > & /*elimMap*/, //output: elimF\n  std::list<func_instance*> & /*deadFuncs*/, //output: DeadF\n  std::map<func_instance*,block_instance*> & /*newFuncEntries*/) //output: newF\n{\n   assert(0 && \"TODO\");\n   return false;\n#if 0\n    // do a stackwalk to see which functions are currently executing\n    pdvector<pdvector<Frame> >  stacks;\n    pdvector<Address> pcs;\n    if (!walkStacks(stacks)) {\n        inst_printf(\"%s[%d]:  walkStacks failed\\n\", FILE__, __LINE__);\n        return false;\n    }\n    for (unsigned i = 0; i < stacks.size(); ++i) {\n        pdvector<Frame> &stack = stacks[i];\n        for (unsigned int j = 0; j < stack.size(); ++j) {\n            Address origPC = 0;\n            vector<func_instance*> dontcare1;\n            baseTramp *dontcare2 = NULL;\n            getAddrInfo(stack[j].getPC(), origPC, dontcare1, dontcare2);\n            pcs.push_back( origPC );\n        }\n    }\n\n    // group blocks by function\n    std::map<func_instance*,set<block_instance*> > deadMap;\n    std::set<func_instance*> deadEntryFuncs;\n    std::set<Address> owBlockAddrs;\n    for (list<block_instance*>::const_iterator bIter=owBlocks.begin();\n         bIter != owBlocks.end(); \n         bIter++) \n    {\n       deadMap[(*bIter)->func()].insert(*bIter);\n       owBlockAddrs.insert((*bIter)->start());\n       if ((*bIter)->llb() == (*bIter)->func()->ifunc()->entry()) {\n          deadEntryFuncs.insert((*bIter)->func());\n       }\n    }\n\n    // for each modified function, calculate ex, ElimF, NewF, DelF\n    for (map<func_instance*,set<block_instance*> >::iterator fit = deadMap.begin();\n         fit != deadMap.end(); \n         fit++) \n    {\n\n        // calculate ex(f)\n        set<block_instance*> execBlocks;\n        for (unsigned pidx=0; pidx < pcs.size(); pidx++) {\n            std::set<block_instance *> candidateBlocks;\n            fit->first->findBlocksByAddr(pcs[pidx], candidateBlocks);\n            for (std::set<block_instance *>::iterator cb_iter = candidateBlocks.begin();\n                cb_iter != candidateBlocks.end(); ++cb_iter) {\n                block_instance *exB = *cb_iter;\n                if (exB && owBlockAddrs.end() == owBlockAddrs.find(\n                                                        exB->start())) \n                {\n                    execBlocks.insert(exB);\n                }\n            }\n        }\n\n        // calculate DeadF: EP(f) in ow and EP(f) not in ex\n        if ( 0 == execBlocks.size() ) {\n            set<block_instance*>::iterator eb = fit->second.find(\n                fit->first->entryBlock());\n            if (eb != fit->second.end()) {\n                deadFuncs.push_back(fit->first);\n                continue;// treated specially, don't need elimF, NewF or DelF\n            }\n        } \n\n        // calculate elimF\n        set<block_instance*> keepF;\n        list<block_instance*> seedBs;\n        seedBs.push_back(fit->first->entryBlock());\n        fit->first->getReachableBlocks(fit->second, seedBs, keepF);\n        otherFuncBlocks(fit->first, keepF, elimMap[fit->first]);\n\n        // calculate NewF\n        if (deadEntryFuncs.end() != deadEntryFuncs.find(fit->first)) {\n            for (set<block_instance*>::iterator bit = execBlocks.begin();\n                 bit != execBlocks.end();\n                 bit++) \n            {\n                if (elimMap[fit->first].end() != \n                    elimMap[fit->first].find(*bit)) \n                {\n                    newFuncEntries[fit->first] = *bit;\n                    break; // just need one candidate\n                }\n            }\n        }\n\n        // calculate Del(f)\n        seedBs.clear();\n        if (deadEntryFuncs.end() == deadEntryFuncs.find(fit->first)) {\n            seedBs.push_back(fit->first->entryBlock());\n        }\n        else if (newFuncEntries.end() != newFuncEntries.find(fit->first)) {\n            seedBs.push_back(newFuncEntries[fit->first]);\n        }\n        for (set<block_instance*>::iterator xit = execBlocks.begin();\n             xit != execBlocks.end();\n             xit++) \n        {\n            if (elimMap[fit->first].end() != elimMap[fit->first].find(*xit)) {\n                seedBs.push_back(*xit);\n            }\n        }\n        keepF.clear();\n        fit->first->getReachableBlocks(fit->second, seedBs, keepF);\n        otherFuncBlocks(fit->first, keepF, delBlocks);\n        \n    }\n\n    return true;\n#endif\n}\n\n// will flush addresses of all addresses in the specified range, if the\n// range is null, flush all addresses from the cache.  Also flush \n// rt-lib heap addrs that correspond to the range\nvoid PCProcess::flushAddressCache_RT(Address start, unsigned size)\n{\n    if (start != 0) {\n        mal_printf(\"Flushing address cache of range [%lx %lx]\\n\",\n                   start, \n                   start + size);\n    } else {\n        mal_printf(\"Flushing address cache of rt_lib heap addrs only \\n\");\n    }\n\n    // Find the runtime cache's address if it hasn't been set yet\n    if (0 == RT_address_cache_addr_) {\n        std::string arg_str (\"DYNINST_target_cache\");\n        pdvector<int_variable *> vars;\n        if ( ! findVarsByAll(arg_str, vars) ) {\n            fprintf(stderr, \"%s[%d]:  cannot find var %s\\n\", \n                    FILE__, __LINE__, arg_str.c_str());\n            assert(0);\n        }\n        if (vars.size() != 1) {\n            fprintf(stderr, \"%s[%d]:  ERROR:  %d vars matching %s, not 1\\n\", \n                    FILE__, __LINE__, (int)vars.size(), arg_str.c_str());\n            assert(0);\n        }\n        RT_address_cache_addr_ = vars[0]->getAddress();\n    }\n\n    // Clear all cache entries that match the runtime library\n    // Read in the contents of the cache\n    Address* cacheCopy = (Address*)malloc(TARGET_CACHE_WIDTH*sizeof(Address));\n    if ( ! readDataSpace( (void*)RT_address_cache_addr_, \n                          sizeof(Address)*TARGET_CACHE_WIDTH,(void*)cacheCopy,\n                          false ) ) \n    {\n        assert(0);\n    }\n\n    assert(dyninstRT_heaps_.size());\n    bool flushedHeaps = false;\n\n    while ( true ) // iterate twice, once to flush the heaps, \n    {              // and once to flush the flush range\n        Address flushStart=0;\n        Address flushEnd=0;\n        if (!flushedHeaps) {\n            // figure out the range of addresses we'll want to flush from\n\n            flushStart = dyninstRT_heaps_[0]->addr;\n            flushEnd = flushStart + dyninstRT_heaps_[0]->length;\n            for (unsigned idx=1; idx < dyninstRT_heaps_.size(); idx++) {\n                Address curAddr = dyninstRT_heaps_[idx]->addr;\n                if (flushStart > curAddr) {\n                    flushStart = curAddr;\n                }\n                curAddr += dyninstRT_heaps_[idx]->length;\n                if (flushEnd < curAddr) {\n                    flushEnd = curAddr;\n                }\n            }\n        } else {\n            flushStart = start;\n            flushEnd = start + size;\n        }\n        //zero out entries that lie in the runtime heaps\n        for(int idx=0; idx < TARGET_CACHE_WIDTH; idx++) {\n            //printf(\"cacheCopy[%d]=%lx\\n\",idx,cacheCopy[idx]);\n            if (flushStart <= cacheCopy[idx] &&\n                flushEnd   >  cacheCopy[idx]) {\n                cacheCopy[idx] = 0;\n            }\n        }\n        if ( flushedHeaps || (start == 0) ) {\n            break;\n        }\n        flushedHeaps = true;\n    }\n\n    // write the modified cache back into the RT_library\n    if ( ! writeDataSpace( (void*)RT_address_cache_addr_,\n                           sizeof(Address)*TARGET_CACHE_WIDTH,\n                           (void*)cacheCopy ) ) {\n        assert(0);\n    }\n    free(cacheCopy);\n}\n\n/* Given an address that's on the call stack, find the function that's\n * actively executing that address.  This makes most sense for finding the\n * address that's triggered a context switch back to Dyninst, either\n * through instrumentation or a signal\n */\nfunc_instance *PCProcess::findActiveFuncByAddr(Address addr)\n{\n    std::set<func_instance *> funcs;\n    // error checking by size...\n    (void)findFuncsByAddr(addr, funcs, true);\n    if (funcs.empty()) return NULL;\n\n    if (funcs.size() == 1) {\n        return *(funcs.begin());\n    }\n\n    // unrelocated shared function address, do a stack walk to figure \n    // out which of the shared functions is on the call stack\n    bool foundFrame = false;\n    func_instance *activeFunc = NULL; \n    pdvector<pdvector<Frame> >  stacks;\n    if ( false == walkStacks(stacks) ) {\n        fprintf(stderr,\"ERROR: %s[%d], walkStacks failed\\n\", \n                FILE__, __LINE__);\n        assert(0);\n    }\n    for (unsigned int i = 0; !foundFrame && i < stacks.size(); ++i) {\n        pdvector<Frame> &stack = stacks[i];\n        for (unsigned int j = 0; !foundFrame && j < stack.size(); ++j) {\n            Frame *curFrame = &stack[j];\n            Address framePC = curFrame->getPC();\n\n            // if we're at a relocated address, we can translate \n            // back to the right function, if translation fails \n            // frameFunc will still be NULL\n            RelocInfo ri;\n            func_instance *frameFunc = NULL;\n\n            if (getRelocInfo(framePC, ri) &&\n                ri.func) {\n               frameFunc = ri.func;\n            }\n            else if (j < (stack.size() - 1)) {\n                // Okay, crawl original code. \n                // Step 1: get our current function\n                std::set<func_instance *> curFuncs;\n                findFuncsByAddr(framePC, curFuncs);\n                // Step 2: get return addresses one frame up and map to possible callers\n                std::set<block_instance *> callerBlocks;\n                findBlocksByAddr(stack[j+1].getPC() - 1, callerBlocks);\n                for (std::set<block_instance *>::iterator cb_iter = callerBlocks.begin();\n                    cb_iter != callerBlocks.end(); ++cb_iter)\n                {\n                    if (!(*cb_iter)->containsCall()) continue;\n                    // We have a call point; now see if it called the entry of any function\n                    // that maps to a curFunc.\n                    for (std::set<func_instance *>::iterator cf_iter = curFuncs.begin();\n                         cf_iter != curFuncs.end(); ++cf_iter) {\n                       if ((*cf_iter) == (*cb_iter)->callee()) {\n                          frameFunc = *cf_iter;\n                       }\n                    }\n                }\n            }\n            if (frameFunc) {\n                foundFrame = true;\n                activeFunc = frameFunc;\n            }\n        }\n    }\n    if (!foundFrame) {\n        activeFunc = *(funcs.begin());\n    }\n                \n    return activeFunc;\n}\n\nbool PCProcess::patchPostCallArea(instPoint *callPt) {\n   // 1) Find all the post-call patch areas that correspond to this \n   //    call point\n   // 2) Generate and install the branches that will be inserted into \n   //    these patch areas\n   \n   // 1...\n   AddrPairSet patchAreas;\n   if ( ! generateRequiredPatches(callPt, patchAreas) ) {\n      return false;\n   }\n   \n   // 2...\n   generatePatchBranches(patchAreas);\n   return true;\n}\n\nbool PCProcess::generateRequiredPatches(instPoint *callPoint, \n                                        AddrPairSet &patchAreas)\n{\n    // We need to figure out where this patch should branch to.\n    // To do that, we're going to:\n    // 1) Forward map the entry of the ft block to\n    //    its most recent relocated version (if that exists)\n    // 2) For each padding area, create a (padAddr,target) pair\n\n    // 3)\n\n    block_instance *callB = callPoint->block();\n    block_instance *ftBlk = callB->getFallthrough()->trg();\n    if (!ftBlk) {\n        // find the block at the next address, if there's no fallthrough block\n        ftBlk = callB->obj()->findBlockByEntry(callB->end());\n        assert(ftBlk);\n    }\n\n    // ensure that we patch other callPts at the same address\n\n    vector<ParseAPI::Function*> callFuncs;\n    callPoint->block()->llb()->getFuncs(callFuncs);\n    for (vector<ParseAPI::Function*>::iterator fit = callFuncs.begin();\n         fit != callFuncs.end();\n         fit++)\n    {\n        func_instance *callF = findFunction((parse_func*)*fit);\n        instPoint *callP = instPoint::preCall(callF, callB);\n        Relocation::CodeTracker::RelocatedElements reloc;\n        CodeTrackers::reverse_iterator rit;\n        for (rit = relocatedCode_.rbegin(); rit != relocatedCode_.rend(); rit++)\n        {\n            if ((*rit)->origToReloc(ftBlk->start(), ftBlk, callF, reloc)) {\n                break;\n            }\n        }\n        if (rit == relocatedCode_.rend()) {\n            mal_printf(\"WARNING: no relocs of call-fallthrough at %lx \"\n                       \"in func at %lx, will not patch its post-call \"\n                       \"padding\\n\", callP->block()->last(),callF->addr());\n            (*relocatedCode_.rbegin())->debug();\n            continue;\n        }\n\n        Address to = reloc.instruction;\n        if (!reloc.instrumentation.empty()) {\n           // There could be a lot of instrumentation at this point. Bias towards the lowest,\n           // non-edge instrumentation\n           for (std::map<instPoint *, Address>::iterator inst_iter = reloc.instrumentation.begin();\n                inst_iter != reloc.instrumentation.end(); ++inst_iter) {\n              if (inst_iter->first->type() == PatchAPI::Point::EdgeDuring) continue;\n              to = (inst_iter->second < to) ? inst_iter->second : to;\n           }\n        }\n\n        // 2) \n        Address callInsnAddr = callP->block()->last();\n        if (forwardDefensiveMap_.end() != forwardDefensiveMap_.find(callInsnAddr)) {\n            map<func_instance*,set<DefensivePad> >::iterator mit = forwardDefensiveMap_[callInsnAddr].begin();\n            for (; mit != forwardDefensiveMap_[callInsnAddr].end(); ++mit) {\n              if (callF == mit->first) {\n                  set<DefensivePad>::iterator dit = mit->second.begin();\n                  for (; dit != mit->second.end(); ++dit) {\n                     Address jumpAddr = dit->first;\n                     patchAreas.insert(std::make_pair(jumpAddr, to));\n                     mal_printf(\"patching post-call pad for %lx[%lx] with %lx %s[%d]\\n\",\n                                callB->end(), jumpAddr, to, FILE__,__LINE__);\n                  }\n              }\n            }\n        }\n    }\n    if (patchAreas.empty()) {\n       mal_printf(\"WARNING: no relocs to patch for call at %lx, block end %lx\\n\", \n                  callPoint->addr_compat(),ftBlk->start());\n    }\n    return ! patchAreas.empty();\n}\n\nvoid PCProcess::generatePatchBranches(AddrPairSet &branchesNeeded) {\n  for (AddrPairSet::iterator iter = branchesNeeded.begin();\n       iter != branchesNeeded.end(); ++iter) \n  {\n    Address from = iter->first;\n    Address to = iter->second;\n\n    codeGen gen(64);\n    insnCodeGen::generateBranch(gen, from, to);\n\n    // Safety check: make sure we didn't overrun the patch area\n    Address lb = 0, ub = 0;\n    std::pair<func_instance*,Address> tmp;\n    if (!reverseDefensiveMap_.find(from, lb, ub, tmp)) {\n      // Huh? This worked before!\n      assert(0);\n    }\n    assert((from + gen.used()) <= ub);\n    if (!writeTextSpace((void *)from, \n\t\t\tgen.used(),\n\t\t\tgen.start_ptr())) {\n      assert(0);\n    }\n  }\n}\n\n/* debugSuicide is a kind of alternate debugging continueProc.  It runs the\n * process until terminated in single step mode, printing each instruction as\n * it executes.\n */\nvoid PCProcess::debugSuicide() {\n    if( isTerminated() ) return;\n\n    isInDebugSuicide_ = true;\n\n    pdvector<Frame> activeFrames;\n    getAllActiveFrames(activeFrames);\n\n    for(unsigned i=0; i < activeFrames.size(); ++i) {\n        Address addr = activeFrames[i].getPC();\n        fprintf(stderr, \"Frame %u @ 0x%lx\\n\", i , addr);\n    }\n\n    Thread::ptr initialThread = pcProc_->threads().getInitialThread();\n\n    initialThread->setSingleStepMode(true);\n    while( !isTerminated() && isAttached() && initialThread->isLive() ) {\n        // Get the current PC\n        MachRegister pcReg = MachRegister::getPC(getArch());\n        MachRegisterVal resultVal;\n        if( !initialThread->getRegister(pcReg, resultVal) ) {\n            fprintf(stderr, \"%s[%d]: failed to retreive register from thread %d/%d\\n\",\n                    FILE__, __LINE__, getPid(), initialThread->getLWP());\n            return;\n        }\n    }\n}\n\npdvector<func_instance *> PCProcess::pcsToFuncs(pdvector<Frame> stackWalk) {\n    pdvector <func_instance *> ret;\n    unsigned i;\n    func_instance *fn;\n    for(i=0;i<stackWalk.size();i++) {\n        fn = (func_instance *)findOneFuncByAddr(stackWalk[i].getPC());\n        // no reason to add a null function to ret\n        if (fn != 0) ret.push_back(fn);\n    }\n    return ret;\n}\n\nbool PCProcess::isInSignalHandler(Address addr) {\n    codeRange *range;\n    if( signalHandlerLocations_.find(addr, range) ) {\n        return true;\n    }\n\n    return false;\n}\n\nvoid PCProcess::addSignalHandler(Address addr, unsigned size) {\n    codeRange *handlerLoc;\n    if (signalHandlerLocations_.find(addr, handlerLoc)) {\n        return; // we're already tracking this location\n    }\n    handlerLoc = new signal_handler_location(addr, size);\n    signalHandlerLocations_.insert((signal_handler_location *)handlerLoc);\n}\n\nbool PCProcess::mappedObjIsDeleted(mapped_object *obj) {\n    for(unsigned i = 0; i < deletedObjects_.size(); ++i) {\n        if( obj == deletedObjects_[i] ) return true;\n    }\n\n    return false;\n}\n\n// AddressSpace Implementation //\nAddress PCProcess::offset() const {\n    assert(!\"This function is not implemented\");\n    return 0;\n}\n\nAddress PCProcess::length() const {\n    assert(!\"This function is not implemented\");\n    return 0;\n}\n\nArchitecture PCProcess::getArch() const {\n    return savedArch_;\n}\n\nbool PCProcess::multithread_ready(bool ignoreIfMtNotSet) {\n    // Since ProcControlAPI has taken over handling thread creation\n    // and destruction from the RT library, as soon as the process reaches\n    // the initialized state, the process is multithread ready if it\n    // is multithread capable.\n\n    if( !hasReachedBootstrapState(bs_initialized) ) return false;\n    if( !multithread_capable(ignoreIfMtNotSet) ) return false;\n\n    return true;\n}\n\nbool PCProcess::needsPIC() {\n    return false;\n}\n\nbool PCProcess::isInDebugSuicide() const {\n    return isInDebugSuicide_;\n}\n\nPCProcess::processState_t PCProcess::getDesiredProcessState() const {\n    return processState_;\n}\n\nvoid PCProcess::setDesiredProcessState(PCProcess::processState_t pc) {\n    processState_ = pc;\n}\n\nbool PCProcess::walkStack(pdvector<Frame> &stackWalk,\n                          PCThread *thread)\n{\n  if( stackwalker_ == NULL ) return false;\n\n  vector<Dyninst::Stackwalker::Frame> swWalk;\n\n  if (!stackwalker_->walkStack(swWalk, thread->getLWP()))\n  {\n    return false;\n  }\n\n  for (vector<Dyninst::Stackwalker::Frame>::iterator SWB = swWalk.begin(),\n       SWI = SWB,\n       SWE = swWalk.end();\n       SWI != SWE;\n       ++SWI)\n  {\n    stackWalk.push_back(Frame(*SWI, this, thread, (SWI == SWB)));\n  }\n\n  return true;\n}\n\nbool PCProcess::getActiveFrame(Frame &frame, PCThread *thread)\n{\n  Dyninst::Stackwalker::Frame swFrame;\n  if (!stackwalker_->getInitialFrame(swFrame, thread->getLWP()))\n  {\n    return false;\n  }\n\n  frame = Frame(swFrame, this, thread, true);\n  return true;\n}\n\n/* This is the simple version\n * 1. Need three pieces of information:\n * 1a. The instrumentation point that triggered the stopThread event (pointAddress)\n * 1b. The ID of the callback function given at the registration\n *     of the stopThread snippet\n * 1c. The result of the snippet calculation that was given by the user,\n *     if the point is a return instruction, read the return address\n * 2. If the calculation is an address that is meant to be interpreted, do that\n * 3. Invoke the callback\n */\nbool PCProcess::triggerStopThread(Address pointAddress, int callbackID, void *calculation) {\n    AddressSpace::RelocInfo ri;\n    if( !getRelocInfo(pointAddress, ri) ) {\n        assert(0);\n        return false;\n    }\n\n    // get instPoint from point address\n    func_instance *pointfunc = ri.func;\n    if (!pointfunc) {\n        mal_printf(\"%s[%d]: failed to find active function at 0x%lx\\n\",\n                FILE__, __LINE__, pointAddress);\n        return false;\n    }\n\n    instPoint *intPoint = ri.bt->point();\n    if (!intPoint) {\n        mal_printf(\"%s[%d]: failed to find inst point at 0x%lx\\n\",\n                FILE__, __LINE__, pointAddress);\n        return false;\n    }\n\n    mal_printf(\"handling stopThread %lx[%lx]=>%lx %s[%d]\\n\",\n            ri.reloc, pointAddress, (long)calculation, FILE__, __LINE__);\n\n    /* 2. If the callbackID is negative, the calculation is meant to be\n      interpreted as the address of code, so we call stopThreadCtrlTransfer\n      to translate the target to an unrelocated address */\n    if (callbackID < 0) {\n        callbackID *= -1;\n        calculation = (void*)\n            stopThreadCtrlTransfer(intPoint, (Address)calculation);\n    }\n\n    /* 3. Trigger the callback for the stopThread\n      using the correct snippet instance ID & event type */\n    ((BPatch_process*)up_ptr())->triggerStopThread\n        (intPoint, pointfunc, callbackID, (void*)calculation);\n\n    return true;\n}\n\n/*    If calculation is a relocated address, translate it to the original addr\n *    case 1: The point is at a return instruction\n *    case 2: The point is a control transfer into the runtime library\n *    Mark returning functions as returning\n *    Save the targets of indirect control transfers (not regular returns)\n */\nAddress PCProcess::stopThreadCtrlTransfer (instPoint* intPoint, \n                                         Address target)\n{\n   Address pointAddr = intPoint->addr_compat();\n\n    // if the point is a real return instruction and its target is a stack \n    // address, get the return address off of the stack \n    if (intPoint->type() == instPoint::FuncExit &&\n        intPoint->block()->isFuncExit() &&\n        !intPoint->func()->isSignalHandler()) \n    {\n        mal_printf(\"%s[%d]: return address is %lx\\n\", FILE__,\n                    __LINE__,target);\n    }\n\n    Address unrelocTarget = target;\n\n    if ( isRuntimeHeapAddr( target ) ) {\n        // get unrelocated target address, there are three possibilities\n        // a. We're in post-call padding, and targBBI is the call block\n        // b. We're in an analyzed fallthrough block\n        // c. The stack was tampered with and we need the (mod_pc - pc) \n        //    offset to figure out where we should be\n        malware_cerr << \"Looking for matches to incoming address \" \n            << hex << target << dec << endl;\n        std::pair<func_instance*,Address> tmp;\n\n        if ( reverseDefensiveMap_.find(target,tmp) ) {\n            // a. \n           std::set<block_instance*> callBs;\n           tmp.first->getBlocks(tmp.second, callBs);\n           block_instance *callB = (*callBs.begin());\n           edge_instance *fallthrough = callB->getFallthrough();\n           if (fallthrough) {\n              unrelocTarget = fallthrough->trg()->start();\n           } else {\n              unrelocTarget = callB->end();\n           }\n        }\n        else {\n            // b. \n            // if we're in the fallthrough block, match to call block, \n            // and if necessary, add fallthrough edge\n           AddressSpace::RelocInfo ri;\n           bool hasFT = getRelocInfo(target, ri);\n           assert(hasFT); // otherwise we should be in the defensive map\n           if (ri.pad) {\n               unrelocTarget = ri.block->end();\n           } else {\n               unrelocTarget = ri.block->start();\n           }\n        }\n        mal_printf(\"translated target %lx to %lx %s[%d]\\n\",\n            target, unrelocTarget, FILE__, __LINE__);\n    }\n    else { // target is not relocated, nothing to do but find the \n           // mapped_object, creating one if necessary, for transfers\n           // into memory regions that are allocated at runtime\n        mapped_object *obj = findObject(target);\n        if (!obj) {\n\n#if 0           \n           Frame activeFrame = threads[0]->get_lwp()->getActiveFrame();\n           for (unsigned i = 0; i < 0x100; ++i) {\n\t\t          Address stackTOP = activeFrame.esp;\n\t\t          Address stackTOPVAL =0;\n                readDataSpace((void *) (stackTOP + 4*i), \n                              sizeof(getAddressWidth()), \n                              &stackTOPVAL, false);\n\t\t          malware_cerr << \"\\tSTACK[\" << hex << stackTOP+4*i << \"]=\" \n                             << stackTOPVAL << dec << endl;\n           }\n#endif\n\n            obj = createObjectNoFile(target);\n            if (!obj) {\n                fprintf(stderr,\"ERROR, point %lx has target %lx that responds \"\n                        \"to no object %s[%d]\\n\", pointAddr, target, \n                        FILE__,__LINE__);\n                assert(0 && \"stopThread snippet has an invalid target\");\n                return 0;\n            }\n        }\n    }\n\n#if 0\n           Frame activeFrame = threads[0]->get_lwp()->getActiveFrame();\n           Address stackTOP = activeFrame.esp;\n           Address stackTOPVAL =0;\n           for (unsigned i = 0; \n                i < 0x100 && 0 != ((stackTOP + 4*i) % memoryPageSize_); \n                ++i) \n           {\n                readDataSpace((void *) (stackTOP + 4*i), \n                              sizeof(getAddressWidth()), \n                              &stackTOPVAL, false);\n\t\t          malware_cerr << \"\\tSTACK[\" << hex << stackTOP+4*i << \"]=\" \n                             << stackTOPVAL << dec << endl;\n           }\n#endif\n\n    return unrelocTarget;\n}\n\nvoid PCProcess::triggerNormalExit(int exitcode) {\n    for(std::map<dynthread_t, PCThread *>::iterator i = threadsByTid_.begin();\n            i != threadsByTid_.end(); ++i)\n    {\n        if( i->second != initialThread_ ) \n            BPatch::bpatch->registerThreadExit(this, i->second);\n    }\n    BPatch::bpatch->registerNormalExit(this, exitcode);\n\n    // Let the event handler know that the process should be moved to\n    // an exited state\n    setExiting(true);\n}\n\n// Debugging only\nbool PCProcess::setBreakpoint(Address addr) {\n    Breakpoint::ptr brkPt = Breakpoint::newBreakpoint();\n    if( !pcProc_->addBreakpoint(addr, brkPt) ) {\n        proccontrol_printf(\"%s[%d]: failed to set breakpoint at 0x%lx\\n\",\n                FILE__, __LINE__, addr);\n        return false;\n    }\n\n    return true;\n}\n\nbool PCProcess::launchDebugger() {\n    // Stop the process on detach \n    pdvector<func_instance *> breakpointFuncs;\n    if( !findFuncsByAll(\"DYNINSTsafeBreakPoint\", breakpointFuncs) ) {\n        fprintf(stderr, \"Failed to find function DYNINSTsafeBreakPoint\\n\");\n        return false;\n    }\n\n    func_instance *safeBreakpoint = breakpointFuncs[0];\n    for(map<dynthread_t, PCThread *>::iterator i = threadsByTid_.begin();\n            i != threadsByTid_.end(); ++i)\n    {\n        if( !i->second->pcThr_->setRegister(MachRegister::getPC(getArch()),\n                    safeBreakpoint->addr()) )\n        {\n            fprintf(stderr, \"Failed to set PC to 0x%lx\\n\", \n                    safeBreakpoint->addr());\n            return false;\n        }\n    }\n\n    // Detach the process\n    if( !detachProcess(true) ) {\n        fprintf(stderr, \"Failed to detach from process %d\\n\", getPid());\n        return false;\n    }\n\n    if( !startDebugger() ) {\n        fprintf(stderr, \"Failed to start debugger on process %d\\n\", getPid());\n        return false;\n    }\n\n    return true;\n}\n\n// End debugging\n\nAddress getVarAddr(PCProcess *proc, std::string str) {\n    Address retAddr = 0;\n\n    pdvector<int_variable *> vars;\n    if( proc->findVarsByAll(str, vars) ) {\n        if( vars.size() != 1 ) {\n            proccontrol_printf(\"%s[%d]: WARNING: multiple copies of %s found\\n\",\n                    FILE__, __LINE__, str.c_str());\n        }else{\n            retAddr = vars[0]->getAddress();\n        }\n    }else{\n        proccontrol_printf(\"%s[%d]: failed to find variable %s\\n\",\n                FILE__, __LINE__, str.c_str());\n    }\n    return retAddr;\n}\n\nAddress PCProcess::getRTEventBreakpointAddr() {\n    if( sync_event_breakpoint_addr_ == 0 ) {\n        sync_event_breakpoint_addr_ = getVarAddr(this, \"DYNINST_break_point_event\");\n    }\n\n    return sync_event_breakpoint_addr_;\n}\n\nAddress PCProcess::getRTEventIdAddr() {\n    if( sync_event_id_addr_ == 0 ) {\n        sync_event_id_addr_ = getVarAddr(this, \"DYNINST_synch_event_id\");\n    }\n\n    return sync_event_id_addr_;\n}\n\nAddress PCProcess::getRTEventArg1Addr() {\n    if( sync_event_arg1_addr_ == 0 ) {\n        sync_event_arg1_addr_ = getVarAddr(this, \"DYNINST_synch_event_arg1\");\n    }\n\n    return sync_event_arg1_addr_;\n}\n\nAddress PCProcess::getRTEventArg2Addr() {\n    if( sync_event_arg2_addr_ == 0 ) {\n        sync_event_arg2_addr_ = getVarAddr(this, \"DYNINST_synch_event_arg2\");\n    }\n\n    return sync_event_arg2_addr_;\n}\n\nAddress PCProcess::getRTEventArg3Addr() {\n    if( sync_event_arg3_addr_ == 0 ) {\n        sync_event_arg3_addr_ = getVarAddr(this, \"DYNINST_synch_event_arg3\");\n    }\n\n    return sync_event_arg3_addr_;\n}\n\nAddress PCProcess::getRTTrapFuncAddr() {\n    if (rt_trap_func_addr_ == 0) {\n        func_instance* func = findOnlyOneFunction(\"DYNINSTtrapFunction\");\n        rt_trap_func_addr_ = func->addr();\n    }\n    return rt_trap_func_addr_;\n}\n\nbool PCProcess::hasPendingEvents() {\n   // Go to the muxer as a final arbiter\n   return PCEventMuxer::muxer().hasPendingEvents(this);\n}\n\nbool PCProcess::hasRunningSyncRPC() const {\n    return (syncRPCThreads_.size() > 0);\n}\n\nvoid PCProcess::addSyncRPCThread(Thread::ptr thr) {\n   proccontrol_printf(\"%s[%d]: added sync rpc thread %d/%d\\n\",\n                      FILE__, __LINE__, getPid(), thr ? thr->getLWP() : 0);\n    syncRPCThreads_.insert(thr);\n}\n\nvoid PCProcess::removeSyncRPCThread(Thread::ptr thr) {\n    proccontrol_printf(\"%s[%d]: removed sync rpc thread %d/%d\\n\",\n\t\tFILE__, __LINE__, getPid(), thr ? thr->getLWP() : 0);\n    syncRPCThreads_.erase(thr);\n}\n\nbool PCProcess::continueSyncRPCThreads() {\n\tfor(set<Thread::ptr>::iterator i = syncRPCThreads_.begin();\n            i != syncRPCThreads_.end(); ++i)\n    {\n\t\tif(!(*i)) {\n\t\t\tif(!pcProc_->continueProc())\n\t\t\t{\n\t\t\t\tproccontrol_printf(\"%s[%d]: failed to continue entire process %d for sync RPC\\n\",\n\t\t\t\t\t\tFILE__, __LINE__, getPid());\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if( !(*i)->continueThread() ) {\n            proccontrol_printf(\"%s[%d]: failed to continue thread %d/%d for sync RPC\\n\",\n                    FILE__, __LINE__, getPid(), (*i)->getLWP());\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid PCProcess::addTrap(Address from, Address to, codeGen &gen) {\n   gen.invalidate();\n   gen.allocate(4);\n   gen.setAddrSpace(this);\n   gen.setAddr(from);\n   insnCodeGen::generateTrap(gen);\n   trapMapping.addTrapMapping(from, to, true);\n   springboard_cerr << \"Generated springboard trap \" << hex << from << \"->\" << to << dec << endl;\n}\n\nvoid PCProcess::removeTrap(Address from) {\n    map<Address, Breakpoint::ptr>::iterator breakIter = \n        installedCtrlBrkpts.find(from);\n    if( breakIter == installedCtrlBrkpts.end() ) return;\n\n    if( !pcProc_->rmBreakpoint(from, breakIter->second) ) {\n        proccontrol_printf(\"%s[%d]: failed to remove ctrl transfer breakpoint from 0x%lx\\n\",\n                FILE__, __LINE__, from);\n    }\n\n    installedCtrlBrkpts.erase(breakIter);\n}\n\nvoid PCProcess::invalidateMTCache() {\n    mt_cache_result_ = not_cached;\n}\n\nbool PCProcess::supportsUserThreadEvents() {\n    if (!pcProc_) return false;\n    return pcProc_->supportsUserThreadEvents();\n}\n\nStackwalkSymLookup::StackwalkSymLookup(PCProcess *p)\n  : proc_(p)\n{}\n\nStackwalkSymLookup::~StackwalkSymLookup()\n{}\n\nbool StackwalkSymLookup::lookupAtAddr(Dyninst::Address addr, std::string &out_name, void* &out_value)\n{\n  func_instance *func = proc_->findOneFuncByAddr(addr);\n  if( func == NULL ) return false;\n\n  // set out_name to the name of the function at this addr\n  // set out_value to NULL, this value is no longer used\n\n  out_value = NULL;\n\n  if (func)\n  {\n    out_name = func->prettyName();\n  }\n  else\n  {\n    out_name = string(\"[UNKNOWN]\");\n  }\n  \n  return true;\n}\n\nStackwalkInstrumentationHelper::StackwalkInstrumentationHelper(PCProcess *p)\n  : proc_(p)\n{}\n\nStackwalkInstrumentationHelper::~StackwalkInstrumentationHelper()\n{}\n\nDynFrameHelper::DynFrameHelper(PCProcess *p)\n  : FrameFuncHelper(NULL),\n  proc_(p)\n{}\n\nDynFrameHelper::~DynFrameHelper()\n{}\n\nDynWandererHelper::DynWandererHelper(PCProcess *p)\n  : WandererHelper(NULL),\n  proc_(p)\n{}\n\nDynWandererHelper::~DynWandererHelper()\n{}\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI/src/BPatch_process.C": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n * \n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n * \n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n#define BPATCH_FILE\n\n#include <string>\n\n#include \"inst.h\"\n#include \"instP.h\"\n#include \"instPoint.h\"\n#include \"function.h\" // func_instance\n#include \"codeRange.h\"\n#include \"dynProcess.h\"\n#include \"dynThread.h\"\n#include \"pcEventHandler.h\"\n#include \"os.h\"\n\n#include \"mapped_module.h\"\n#include \"mapped_object.h\"\n\n#include \"BPatch_libInfo.h\"\n#include \"BPatch.h\"\n#include \"BPatch_point.h\"\n#include \"BPatch_thread.h\"\n#include \"BPatch_function.h\"\n#include \"BPatch_basicBlock.h\"\n#include \"BPatch_module.h\"\n#include \"hybridAnalysis.h\"\n#include \"BPatch_private.h\"\n#include \"parseAPI/h/CFG.h\"\n#include \"ast.h\"\n#include \"debug.h\"\n#include \"MemoryEmulator/memEmulator.h\"\n#include <boost/tuple/tuple.hpp>\n\n#include \"PatchMgr.h\"\n#include \"PatchModifier.h\"\n#include \"Command.h\"\n#include \"Relocation/DynAddrSpace.h\"\n#include \"Relocation/DynPointMaker.h\"\n#include \"Relocation/DynObject.h\"\n\n#include \"Point.h\"\n\nusing namespace Dyninst;\nusing namespace Dyninst::SymtabAPI;\nusing PatchAPI::DynObject;\nusing PatchAPI::DynAddrSpace;\nusing PatchAPI::PatchMgr;\nusing PatchAPI::Patcher;\n\nint BPatch_process::getAddressWidth(){\n        return llproc->getAddressWidth();\n}\n\n/*\n * BPatch_process::getPid\n *\n * Return the process ID of the thread associated with this object.\n */\nint BPatch_process::getPid()\n{\n   return llproc ? llproc->getPid() : -1;\n}\n\n/*\n * BPatch_process::BPatch_process\n *\n * Starts a new process and associates it with the BPatch_process being\n * constructed.  The new process is placed into a stopped state before\n * executing any code.\n *\n * path         Pathname of the executable to start.\n * argv         A list of pointers to character strings which are the\n *              arguments for the new process, terminated by a NULL pointer.\n * envp         A list of pointers to character strings which are the\n *              environment variables for the new process, terminated by a\n *              NULL pointer.  If NULL, the default environment will be used.\n */\nBPatch_process::BPatch_process(const char *path, const char *argv[],\n                               BPatch_hybridMode mode, const char **envp,\n                               int stdin_fd, int stdout_fd, int stderr_fd)\n   : llproc(NULL), lastSignal(-1), exitCode(-1), exitSignal(-1),\n     exitedNormally(false), exitedViaSignal(false), mutationsActive(true), \n     createdViaAttach(false), detached(false), \n     terminated(false), reportedExit(false),\n     hybridAnalysis_(NULL)\n{\n   image = NULL;\n   pendingInsertions = NULL;\n\n   pdvector<std::string> argv_vec;\n   pdvector<std::string> envp_vec;\n   // Contruct a vector out of the contents of argv\n   if (argv) {\n      for(int i = 0; argv[i] != NULL; i++)\n         argv_vec.push_back(argv[i]);\n   }\n\n   // Construct a vector out of the contents of envp\n   if(envp) {\n      for(int i = 0; envp[i] != NULL; ++i)\n         envp_vec.push_back(envp[i]);\n   }\n\n   std::string directoryName = \"\";\n\n #if !defined(os_windows)\n   // this fixes a problem on linux and alpha platforms where pathless\n   // filenames are searched for either in a standard, predefined path, or\n   // in $PATH by execvp.  thus paths that should resolve to \"./\" are\n   // missed.  Note that the previous use of getcwd() here for the alpha\n   // platform was dangerous since this is an API and we don't know where\n   // the user's code will leave the cwd pointing.\n\n   if (NULL == strchr(path, '/')) {\n      const char *pathenv = getenv(\"PATH\");\n      char *pathenv_copy = strdup(pathenv);\n      char *ptrptr;\n      char *nextpath = strtok_r(pathenv_copy, \":\", &ptrptr);\n      while (nextpath) {\n         struct stat statbuf;\n\n         char *fullpath = new char[strlen(nextpath)+strlen(path)+2];\n         strcpy(fullpath,nextpath);\n         strcat(fullpath,\"/\");\n         strcat(fullpath,path);\n\n         if (!stat(fullpath,&statbuf)) {\n            directoryName = nextpath;\n            delete[] fullpath;\n            break;\n         }\n         delete[] fullpath;\n         nextpath = strtok_r(NULL,\":\", &ptrptr);\n      }\n      ::free(pathenv_copy);\n\n      if (nextpath == NULL) {\n         const char *dotslash = \"./\";\n         directoryName = dotslash;\n      }\n   }\n#endif\n\n   /*\n    * Set directoryName if a current working directory can be found in\n    * the new process' environment (and override any previous settings).\n    */\n   if (envp) {\n       for (int i = 0; envp[i] != NULL; ++i) {\n           if (strncmp(envp[i], \"PWD=\", 4) == 0) {\n               directoryName = envp[i] + 4;\n               break;\n           }\n       }\n   }\n\n   std::string spath(path);\n   llproc = PCProcess::createProcess(spath, argv_vec, mode, envp_vec,\n                                     directoryName, \n                                     stdin_fd, stdout_fd, stderr_fd);\n   if (llproc == NULL) {\n      BPatch_reportError(BPatchFatal, 68,\n           \"Dyninst was unable to create the specified process\");\n      return;\n   }\n\n   startup_cerr << \"Registering function callback...\" << endl;\n   llproc->registerFunctionCallback(createBPFuncCB);\n\n\n   startup_cerr << \"Registering instPoint callback...\" << endl;\n   llproc->registerInstPointCallback(createBPPointCB);\n   llproc->set_up_ptr(this);\n\n   assert(BPatch::bpatch != NULL);\n   startup_cerr << \"Registering process...\" << endl;\n   BPatch::bpatch->registerProcess(this);\n\n   // Create an initial thread\n   startup_cerr << \"Getting initial thread...\" << endl;\n   PCThread *thr = llproc->getInitialThread();\n   BPatch_thread *initial_thread = new BPatch_thread(this, thr);\n   threads.push_back(initial_thread);\n\n   startup_cerr << \"Creating new BPatch_image...\" << endl;\n   image = new BPatch_image(this);\n\n   assert(llproc->isBootstrapped());\n\n   assert(BPatch_heuristicMode != llproc->getHybridMode());\n   if ( BPatch_normalMode != mode ) {\n       BPatch::bpatch->setInstrStackFrames(true);\n       hybridAnalysis_ = new HybridAnalysis(llproc->getHybridMode(),this);\n   }\n\n   // Let's try to profile memory usage\n#if defined(PROFILE_MEM_USAGE)\n   void *mem_usage = sbrk(0);\n   fprintf(stderr, \"Post BPatch_process: sbrk %p\\n\", mem_usage);\n#endif\n\n   startup_cerr << \"BPatch_process::BPatch_process, completed.\" << endl;\n}\n\n#if defined(os_linux)\n/* Particular linux kernels running dyninst in particular patterns\n   (namely, with a single process having spawned the mutator and the\n   mutatee) are susceptible to a kernel bug that will cause a panic\n   if the mutator exits before the mutatee. See the comment above\n   class ForkNewProcessCallback : public DBICallbackBase in\n   debuggerinterface.h for details.\n*/\nbool LinuxConsideredHarmful(pid_t pid) // PUSH\n{\n    int major, minor, sub, subsub; // version numbers\n    pid_t my_ppid, my_pid, mutatee_ppid = 0;\n    FILE *fd;\n    char buf[1024];\n    char filename[64];\n\n    get_linux_version(major,minor,sub,subsub);\n\n    if( major == 2 && minor == 6 &&\n        (sub < 11 || (sub == 11 && subsub <= 11)) )\n    {\n        my_ppid = getppid();\n        my_pid = getpid();\n        // If anybody knows a better way to get the parent pid, be my\n        // guest to change this.\n        snprintf(filename, 64, \"/proc/%d/status\", pid);\n        fd = fopen(filename, \"r\");\n        if (!fd) {\n            startup_printf(\"Failed to open %s, assuming no linux kernel bug\\n\",\n                            filename);\n            return false;\n        }\n        while (fgets(buf, 1024, fd)) {\n            if (strncmp(buf, \"PPid\", 4) == 0) {\n                sscanf(buf, \"%*s %d\", &mutatee_ppid);\n                break;\n            }\n        }\n        fclose(fd);\n\n        if(my_ppid == mutatee_ppid ||\n           my_pid == mutatee_ppid)\n            return true;\n    }\n\n    return false;\n}\n#endif\n/*\n * BPatch_process::BPatch_process\n *\n * Constructs a new BPatch_process and associates it with a running process.\n * Stops execution of the process.\n *\n * path         Pathname of the executable file for the process.\n * pid          Process ID of the target process.\n */\nBPatch_process::BPatch_process\n(const char *path, int pid, BPatch_hybridMode mode)\n   : llproc(NULL), lastSignal(-1), exitCode(-1), exitSignal(-1),\n     exitedNormally(false), exitedViaSignal(false), mutationsActive(true), \n     createdViaAttach(true), detached(false), \n     terminated(false), reportedExit(false),\n     hybridAnalysis_(NULL)\n{\n   image = NULL;\n   pendingInsertions = NULL;\n\n#if defined(os_linux)\n    /* We need to test whether we are in kernel 2.6.9 - 2.6.11.11 (inclusive).\n       If so, and if the mutatee's parent and our parent are one and the same,\n       we are exposing the user to a potential kernel panic.\n    */\n    startup_printf(\"Checking for potential Linux kernel bug...\\n\");\n    if(LinuxConsideredHarmful(pid))\n    {\n        fprintf(stderr,\n            \"\\nWARNING: You are running a Linux kernel between 2.6.9 and \\n\"\n            \"2.6.11.11 (inclusive). Executing Dyninst under this kernel \\n\"\n            \"may exercise a bug in the Linux kernel and lead to a panic \\n\"\n            \"under some conditions. We STRONGLY suggest that you upgrade \\n\"\n            \"your kernel to 2.6.11.12 or higher.\\n\\n\");\n    }\n#endif\n\n   assert(BPatch::bpatch != NULL);\n\n    startup_printf(\"%s[%d]:  creating new BPatch_image...\\n\", FILE__, __LINE__);\n   image = new BPatch_image(this);\n    startup_printf(\"%s[%d]:  created new BPatch_image...\\n\", FILE__, __LINE__);\n   std::string spath = path ? std::string(path) : std::string();\n    startup_printf(\"%s[%d]:  attaching to process %s/%d\\n\", FILE__, __LINE__,\n          path ? path : \"no_path\", pid);\n\n   llproc = PCProcess::attachProcess(spath, pid, mode);\n   if (!llproc) {\n      BPatch_reportError(BPatchFatal, 68, \"Dyninst was unable to attach to the specified process\");\n      BPatch::bpatch->unRegisterProcess(pid, this);\n\n      return;\n   }\n\n   BPatch::bpatch->registerProcess(this, pid);\n   startup_printf(\"%s[%d]:  attached to process %s/%d\\n\", FILE__, __LINE__, path ? path : \n            \"no_path\", pid);\n\n   // Create the initial threads\n   pdvector<PCThread *> llthreads;\n   llproc->getThreads(llthreads);\n   for (pdvector<PCThread *>::iterator i = llthreads.begin();\n           i != llthreads.end(); ++i)\n   {\n      BPatch_thread *thrd = new BPatch_thread(this, *i);\n      threads.push_back(thrd);\n   }\n\n   llproc->registerFunctionCallback(createBPFuncCB);\n   llproc->registerInstPointCallback(createBPPointCB);\n   llproc->set_up_ptr(this);\n\n   assert(llproc->isBootstrapped());\n   assert(llproc->isStopped());\n\n   assert(BPatch_heuristicMode != llproc->getHybridMode());\n   if ( BPatch_normalMode != mode ) {\n       hybridAnalysis_ = new HybridAnalysis(llproc->getHybridMode(),this);\n   }\n}\n\n/*\n * BPatch_process::BPatch_process\n *\n * Constructs a new BPatch_process and associates it with a forked process.\n *\n * parentPid          Pathname of the executable file for the process.\n * childPid           Process ID of the target process.\n */\nBPatch_process::BPatch_process(PCProcess *nProc)\n   : llproc(nProc), lastSignal(-1), exitCode(-1), exitSignal(-1),\n     exitedNormally(false), exitedViaSignal(false), mutationsActive(true),\n     createdViaAttach(true), detached(false),\n     terminated(false),\n     reportedExit(false), hybridAnalysis_(NULL)\n{\n   // Add this object to the list of threads\n   assert(BPatch::bpatch != NULL);\n   image = NULL;\n   pendingInsertions = NULL;\n\n   BPatch::bpatch->registerProcess(this);\n\n   // Create the initial threads\n   pdvector<PCThread *> llthreads;\n   llproc->getThreads(llthreads);\n   for (pdvector<PCThread *>::iterator i = llthreads.begin();\n           i != llthreads.end(); ++i)\n   {\n      BPatch_thread *thrd = new BPatch_thread(this, *i);\n      threads.push_back(thrd);\n   }\n\n   llproc->registerFunctionCallback(createBPFuncCB);\n   llproc->registerInstPointCallback(createBPPointCB);\n   llproc->set_up_ptr(this);\n\n   image = new BPatch_image(this);\n}\n\n/*\n * BPatch_process::~BPatch_process\n *\n * Destructor for BPatch_process.\n */\nBPatch_process::~BPatch_process()\n{\n   if( llproc ) {\n       //  unRegister process before doing detach\n       BPatch::bpatch->unRegisterProcess(getPid(), this);   \n\n       /**\n        * If we attached to the process, then we detach and leave it be,\n        * otherwise we'll terminate it\n        **/\n\n       if (createdViaAttach) \n       {\n           llproc->detachProcess(true);\n       }\n       else  \n       {\n           if (llproc->isAttached()) {\n               terminateExecution();\n           }\n       }\n       delete llproc;\n       llproc = NULL;\n   }\n\n   for (int i=threads.size()-1; i>=0; i--) {\n       delete threads[i];\n   }\n\n   if (image) delete image;\n\n   image = NULL;\n\n   if (pendingInsertions)\n   {\n       for (unsigned f = 0; f < pendingInsertions->size(); f++)\n           {\n           delete (*pendingInsertions)[f];\n       }\n\n       delete pendingInsertions;\n       pendingInsertions = NULL;\n   }\n\n   if (NULL != hybridAnalysis_) {\n       delete hybridAnalysis_;\n   }\n\n   assert(BPatch::bpatch != NULL);\n}\n\n/*\n * BPatch_process::triggerInitialThreadEvents\n *\n * Events and callbacks shouldn't be delivered from a constructor so after a\n * BPatch_process is constructed, this should be called.\n */\nvoid BPatch_process::triggerInitialThreadEvents() {\n    // For compatibility, only do this for multithread capable processes\n    if( llproc->multithread_capable() ) {\n        for (BPatch_Vector<BPatch_thread *>::iterator i = threads.begin();\n                i != threads.end(); ++i) \n        {\n            BPatch::bpatch->registerThreadCreate(this, *i);\n        }\n    }\n}\n\n/*\n * BPatch_process::stopExecution\n *\n * Puts the thread into the stopped state.\n */\nbool BPatch_process::stopExecution() \n{\n    if( NULL == llproc ) return false;\n\n    // The user has already indicated they would like the process stopped\n    if( llproc->getDesiredProcessState() == PCProcess::ps_stopped ) return true;\n\n    llproc->setDesiredProcessState(PCProcess::ps_stopped);\n    return llproc->stopProcess();\n}\n\n/*\n * BPatch_process::continueExecution\n *\n * Puts the thread into the running state.\n */\nbool BPatch_process::continueExecution() \n{\n    if( NULL == llproc ) return false;\n    if( !llproc->isBootstrapped() ) return false;\n\n    // The user has already indicated they would like the process running\n    if( llproc->getDesiredProcessState() == PCProcess::ps_running ) return true;\n\n    llproc->setDesiredProcessState(PCProcess::ps_running);\n\n    return llproc->continueProcess();\n}\n\n/*\n * BPatch_process::terminateExecution\n *\n * Kill the thread.\n */\nbool BPatch_process::terminateExecution() \n{\n    if( NULL == llproc ) return false;\n\n    if( isTerminated() ) return true;\n\n    proccontrol_printf(\"%s[%d]:  about to terminate proc\\n\", FILE__, __LINE__);\n    return llproc->terminateProcess();\n}\n\n/*\n * BPatch_process::isStopped\n *\n * Returns true if the thread has stopped, and false if it has not.  \n */\nbool BPatch_process::isStopped()\n{\n    if( llproc == NULL ) return true;\n\n    // The state visible to the user is different than the state\n    // maintained by ProcControlAPI because processes remain in\n    // a stopped state while doing event handling -- the user \n    // shouldn't see the process in a stopped state in this\n    // case\n    //\n    // The following list is all cases where the user should see\n    // the process stopped:\n    // 1) BPatch_process::stopExecution is invoked\n    // 2) A snippet breakpoint occurs\n    // 3) The mutatee is delivered a stop signal\n\n    return llproc->getDesiredProcessState() == PCProcess::ps_stopped;\n}\n\n/*\n * BPatch_process::stopSignal\n *\n * Returns the number of the signal which caused the thread to stop.\n */\nint BPatch_process::stopSignal()\n{\n    if (!isStopped()) {\n        BPatch::reportError(BPatchWarning, 0, \n                \"Request for stopSignal when process is not stopped\");\n        return -1;\n    }\n    return lastSignal;\n}\n\n/*\n * BPatch_process::statusIsTerminated\n *\n * Returns true if the process has terminated, false if it has not.\n */\nbool BPatch_process::statusIsTerminated()\n{\n   if (llproc == NULL) return true;\n   return llproc->isTerminated();\n}\n\n/*\n * BPatch_process::isTerminated\n *\n * Returns true if the thread has terminated, and false if it has not.  This\n * may involve checking for thread events that may have recently changed this\n * thread's status.  \n */\nbool BPatch_process::isTerminated()\n{\n    if( NULL == llproc ) return true;\n\n    if( exitedNormally || exitedViaSignal ) return true;\n\n    return llproc->isTerminated();\n}\n\n/*\n * BPatch_process::terminationStatus\n *\n * Indicates how the program exited.  Returns one of NoExit, ExitedNormally,\n * or ExitedViaSignal.\n *\n */\nBPatch_exitType BPatch_process::terminationStatus() {\n   if(exitedNormally)\n      return ExitedNormally;\n   else if(exitedViaSignal)\n      return ExitedViaSignal;\n   return NoExit;\n}\n\n/*\n * BPatch_process::getExitCode\n *\n * Returns exit code of applications\n *\n */\nint BPatch_process::getExitCode()\n{\n   return exitCode;\n}\n\n/*\n * BPatch_process::getExitSignal\n *\n * Returns signal number that caused application to exit.\n *\n */\nint BPatch_process::getExitSignal()\n{\n   return lastSignal;\n}\n\nbool BPatch_process::wasRunningWhenAttached()\n{\n  if (!llproc) return false;\n  return llproc->wasRunningWhenAttached();\n}\n\n/*\n * BPatch_process::detach\n *\n * Detach from the thread represented by this object.\n *\n * cont         True if the thread should be continued as the result of the\n *              detach, false if it should not.\n */\nbool BPatch_process::detach(bool cont)\n{\n   if (image)\n      image->removeAllModules();\n   detached = llproc->detachProcess(cont);\n   BPatch::bpatch->unRegisterProcess(getPid(), this);\n   return detached;\n}\n\n/*\n * BPatch_process::isDetached\n *\n * Returns whether dyninstAPI is detached from this mutatee\n *\n */\nbool BPatch_process::isDetached()\n{\n   return detached;\n}\n\n/*\n * BPatch_process::dumpCore\n *\n * Causes the process to dump its state to a file, and optionally to terminate.\n * Returns true upon success, and false upon failure.\n *\n * file         The name of the file to which the state should be written.\n * terminate    Indicates whether or not the thread should be terminated after\n *              dumping core.  True indicates that it should, false that is\n *              should not.\n */\nbool BPatch_process::dumpCore(const char *file, bool terminate)\n{\n   bool was_stopped = isStopped();\n\n   stopExecution();\n\n   bool ret = llproc->dumpCore(file);\n   if (ret && terminate) {\n      terminateExecution();\n   } else if (!was_stopped) {\n      continueExecution();\n   }\n\n   return ret;\n}\n\n/*\n * BPatch_process::dumpImage\n *\n * Writes the contents of memory into a file.\n * Returns true upon success, and false upon failure.\n *\n * file         The name of the file to which the image should be written.\n */\nbool BPatch_process::dumpImage(const char *file)\n{\n#if defined(os_windows) \n   return false;\n#else\n   bool was_stopped = isStopped();\n\n   stopExecution();\n\n   bool ret = llproc->dumpImage(file);\n   if (!was_stopped) continueExecution();\n\n   return ret;\n#endif\n}\n\n/*\n * BPatch_process::getInheritedVariable\n *\n * Allows one to retrieve a variable which exists in a child process that\n * was inherited from and originally created in the parent process.\n * Function is invoked on the child BPatch_process (created from a fork in\n * the application).\n *\n * parentVar   A BPatch_variableExpr created in the parent thread\n *\n * Returns:    The corresponding BPatch_variableExpr from the child thread\n *             or NULL if the variable argument hasn't been malloced\n *             in a parent process.\n */\nBPatch_variableExpr *BPatch_process::getInheritedVariable(\n                                                             BPatch_variableExpr &parentVar)\n{\n   if(! llproc->isInferiorAllocated((Address)parentVar.getBaseAddr())) {\n      // isn't defined in this process so must not have been defined in a\n      // parent process\n      return NULL;\n   }\n\n   return new BPatch_variableExpr(this, llproc, parentVar.getBaseAddr(), Null_Register,\n                                  const_cast<BPatch_type *>(parentVar.getType()));\n}\n\n\n/*\n * BPatch_process::getInheritedSnippet\n *\n * Allows one to retrieve a snippet which exists in a child process which\n * was inherited from and originally created in the parent process.\n * Function is invoked on the child BPatch_process (created from a fork in\n * the application).\n *\n * Allows one to retrieve a snippet which exists in a child process which\n * was inherited from and originally created in the parent process.\n * Function is invoked on the child BPatch_process (created from a fork in\n * the application).\n *\n * parentSnippet: A BPatchSnippetHandle created in the parent thread\n *\n * Returns:       The corresponding BPatchSnippetHandle from the child thread.\n *\n */\n\nBPatchSnippetHandle *BPatch_process::getInheritedSnippet(BPatchSnippetHandle &parentSnippet)\n{\n    // a BPatchSnippetHandle has an miniTramp for each point that\n    // the instrumentation is inserted at\n   const BPatch_Vector<Dyninst::PatchAPI::Instance::Ptr> &instances = parentSnippet.instances_;\n\n   BPatchSnippetHandle *childSnippet = new BPatchSnippetHandle(this);\n   for(unsigned i=0; i<instances.size(); i++) {\n      Dyninst::PatchAPI::Instance::Ptr child = getChildInstance(instances[0], llproc);\n      if (child) childSnippet->addInstance(child);\n   }\n   return childSnippet;\n}\n\n/*\n * BPatch_addressSpace::beginInsertionSet\n *\n * Starts a batch insertion set; that is, all calls to insertSnippet until\n * finalizeInsertionSet are delayed.\n *\n */\n\nvoid BPatch_process::beginInsertionSet()\n{\n    if (pendingInsertions == NULL)\n        pendingInsertions = new BPatch_Vector<batchInsertionRecord *>;\n    // Nothing else to do...\n}\n\n\n/*\n * BPatch_process::finalizeInsertionSet\n *\n * Installs all instrumentation specified since the last beginInsertionSet call.\n *\n * modified gets set as a result of the catchup/fixup logic and is helpful in\n * interpreting a false return value...  if finalizeInsertionSet returns false,\n * but modified comes back true, then something horrible happened, because, if\n * we go thru the trouble to modify the process state to make everything work\n * then the function really should work.\n */\nbool BPatch_process::finalizeInsertionSet(bool, bool *)\n{\n\n   if (statusIsTerminated()) return false;\n\n\n  // Can't insert code when mutations are not active.\n  bool shouldContinue = false;\n  if (!mutationsActive) {\n    return false;\n  }\n  \n  if ( ! isStopped() ) {\n    shouldContinue = true;\n    stopExecution();\n  }\n\n  /* PatchAPI stuffs */\n  bool ret = AddressSpace::patch(llproc);\n  /* End of PatchAPI stuffs */\n\n  llproc->trapMapping.flush();\n\n  if (shouldContinue)\n    continueExecution();\n\n  if (pendingInsertions) {\n    delete pendingInsertions;\n    pendingInsertions = NULL;\n  }\n\n  return ret;\n}\n\n\nbool BPatch_process::finalizeInsertionSetWithCatchup(bool, bool *,\n                                                        BPatch_Vector<BPatch_catchupInfo> &)\n{\n   return false;\n}\n\n/*\n * BPatch_process::oneTimeCode\n *\n * execute argument <expr> once.\n *\n */\nvoid *BPatch_process::oneTimeCode(const BPatch_snippet &expr, bool *err)\n{\n    if( !isStopped() ) {\n        BPatch_reportError(BPatchWarning, 0,\n                \"oneTimeCode failing because process is not stopped\");\n        if( err ) *err = true;\n        return NULL;\n    }\n\n    return oneTimeCodeInternal(expr, NULL, NULL, NULL, true, err, true);\n}\n\n/*\n * BPatch_process::oneTimeCodeCallbackDispatch\n *\n * theProc\tThe process in which the RPC completed.\n * userData\tThis is a value that can be set when we invoke an inferior RPC\n * returnValue\tThe value returned by the RPC.\n */\nint BPatch_process::oneTimeCodeCallbackDispatch(PCProcess *theProc,\n                                                 unsigned /* rpcid */, \n                                                 void *userData,\n                                                 void *returnValue)\n{\n    // Don't care what the process state is...\n    int retval = RPC_LEAVE_AS_IS;\n\n    assert(BPatch::bpatch != NULL);\n\n    OneTimeCodeInfo *info = (OneTimeCodeInfo *)userData;\n\n    BPatch_process *bproc =\n    BPatch::bpatch->getProcessByPid(theProc->getPid());\n\n    assert(bproc != NULL);\n\n    assert(info && !info->isCompleted());\n\n    info->setReturnValue(returnValue);\n    info->setCompleted(true);\n\n    if (!info->isSynchronous()) {\n        // Do the callback specific to this OneTimeCode, if set\n        BPatchOneTimeCodeCallback specificCB = info->getCallback();\n        if( specificCB ) {\n            (*specificCB)(bproc->threads[0], info->getUserData(), returnValue);\n        }\n\n        // Do the registered callback\n        BPatchOneTimeCodeCallback cb = BPatch::bpatch->oneTimeCodeCallback;\n        if( cb ) {\n            (*cb)(bproc->threads[0], info->getUserData(), returnValue);\n        }\n\n        // This is the case if the user requested a stop in a callback\n        if (bproc->isStopped()) retval = RPC_STOP_WHEN_DONE;\n        else retval = RPC_RUN_WHEN_DONE;\n\n        delete info;\n    }\n\n    return retval;\n}\n\n/*\n * BPatch_process::oneTimeCodeInternal\n *\n * Causes a snippet expression to be evaluated once in the mutatee at the next\n * available opportunity.  Optionally, Dyninst will call a callback function\n * when the snippet has executed in the mutatee, and can wait until the\n * snippet has executed to return.\n *\n * expr         The snippet to evaluate.\n * userData     This value is given to the callback function along with the\n *              return value for the snippet.  Can be used by the caller to\n *              store per-oneTimeCode information.\n * synchronous  True means wait until the snippet has executed, false means\n *              return immediately.\n */\nvoid *BPatch_process::oneTimeCodeInternal(const BPatch_snippet &expr,\n                                          BPatch_thread *thread,\n                                          void *userData,\n                                          BPatchOneTimeCodeCallback cb,\n                                          bool synchronous,\n                                          bool *err,\n                                          bool userRPC)\n{\n    if( statusIsTerminated() ) { \n        BPatch_reportError(BPatchWarning, 0,\n                \"oneTimeCode failing because process has already exited\");\n        if( err ) *err = true;\n        return NULL;\n    }\n\n    proccontrol_printf(\"%s[%d]: UI top of oneTimeCode...\\n\", FILE__, __LINE__);\n\n    OneTimeCodeInfo *info = new OneTimeCodeInfo(synchronous, userData, cb,\n            (thread) ? thread->getBPatchID() : 0);\n\n    if( !llproc->postIRPC(expr.ast_wrapper, \n            (void *)info,\n            !isStopped(), \n            (thread ? thread->llthread : NULL),\n            synchronous,\n            NULL, // the result will be passed to the callback \n            userRPC) )\n    {\n        BPatch_reportError(BPatchWarning, 0,\n                    \"failed to continue process to run oneTimeCode\");\n        if( err ) *err = true;\n        delete info;\n        return NULL;\n    }\n\n    if( !synchronous ) return NULL;\n\n    assert( info->isCompleted() );\n\n    void *ret = info->getReturnValue();\n\n    proccontrol_printf(\"%s[%d]: RPC completed, process status %s\\n\",\n                       FILE__, __LINE__, isStopped() ? \"stopped\" : \"running\");\n\n    if (err) *err = false;\n    delete info;\n    return ret;\n}\n\n//  BPatch_process::oneTimeCodeAsync\n//\n//  Have the specified code be executed by the mutatee once.  Don't wait\n//  until done.\nbool BPatch_process::oneTimeCodeAsync(const BPatch_snippet &expr,\n                                         void *userData, BPatchOneTimeCodeCallback cb)\n{\n   bool err = false;\n   oneTimeCodeInternal(expr, NULL, userData,  cb, false, &err, true);\n\n   if( err ) return false;\n   return true;\n}\n\n/*\n * BPatch_process::loadLibrary\n *\n * Load a dynamically linked library into the address space of the mutatee.\n *\n * libname      The name of the library to load.\n */\nBPatch_object *BPatch_process::loadLibrary(const char *libname, bool)\n{\n   if (!libname) {\n      fprintf(stderr, \"[%s:%u] - loadLibrary called with NULL library name\\n\",\n              __FILE__, __LINE__);\n      return NULL;\n   }\n\n   bool wasStopped = isStopped();\n   if( !wasStopped ) {\n       if (!stopExecution()) {\n          BPatch_reportError(BPatchWarning, 0, \n                  \"Failed to stop process for loadLibrary\");\n          return NULL;\n       }\n   }\n\n   BPatch_object *object = NULL;\n   do {\n\n      /**\n       * Find the DYNINSTloadLibrary function\n       **/\n      BPatch_Vector<BPatch_function *> bpfv;\n      image->findFunction(\"DYNINSTloadLibrary\", bpfv);\n      if (!bpfv.size()) {\n         cerr << __FILE__ << \":\" << __LINE__ << \": FATAL:  Cannot find Internal\"\n              << \"Function DYNINSTloadLibrary\" << endl;\n         break;\n      }\n      if (bpfv.size() > 1) {\n         std::string msg = std::string(\"Found \") + utos(bpfv.size()) +\n            std::string(\"functions called DYNINSTloadLibrary -- not fatal but weird\");\n         BPatch_reportError(BPatchSerious, 100, msg.c_str());\n      }\n      BPatch_function *dlopen_func = bpfv[0];\n      if (dlopen_func == NULL)\n        break;\n\n      /**\n       * Generate a call to DYNINSTloadLibrary, and then run the generated code.\n       **/\n      BPatch_Vector<BPatch_snippet *> args;\n      BPatch_constExpr nameArg(libname);\n      args.push_back(&nameArg);\n      BPatch_funcCallExpr call_dlopen(*dlopen_func, args);\n\n      if (!oneTimeCodeInternal(call_dlopen, NULL, NULL, NULL, true)) {\n         BPatch_variableExpr *dlerror_str_var =\n            image->findVariable(\"gLoadLibraryErrorString\");\n         assert(NULL != dlerror_str_var);\n         char dlerror_str[256];\n         dlerror_str_var->readValue((void *)dlerror_str, 256);\n         BPatch_reportError(BPatchSerious, 124, dlerror_str);\n         break;\n      }\n      /* Find the new mapped_object, map it to a BPatch_module, and return it */\n\n      mapped_object* plib = llproc->findObject(libname);\n      if (!plib) {\n        std::string wildcard(libname);\n        wildcard += \"*\";\n        plib = llproc->findObject(wildcard, true);\n      }\n      if (!plib) {\n         // Best effort; take the latest added mapped_object\n         plib = llproc->mappedObjects().back();\n      }\n\n      dynamic_cast<DynAddrSpace*>(llproc->mgr()->as())->loadLibrary(plib);\n      object = getImage()->findOrCreateObject(plib);\n\n   } while (0);\n\n   if( !wasStopped ) {\n       if( !continueExecution() ) {\n           BPatch_reportError(BPatchWarning, 0,\n                   \"Failed to continue process for loadLibrary\");\n       }\n   }\n\n   return object;\n}\n\n\nvoid BPatch_process::enableDumpPatchedImage(){\n    // deprecated; saveTheWorld is dead. Do nothing for now; kill later.\n}\n\nvoid BPatch_process::setExitedViaSignal(int signalnumber)\n{\n   exitedViaSignal = true;\n   lastSignal = signalnumber;\n}\n\nvoid BPatch_process::setExitedNormally()\n{\n   exitedNormally = true;\n}\n\nvoid BPatch_process::getThreads(BPatch_Vector<BPatch_thread *> &thrds)\n{\n   for (unsigned i=0; i<threads.size(); i++)\n      thrds.push_back(threads[i]);\n}\n\nbool BPatch_process::isMultithreaded()\n{\n   return (threads.size() > 1);\n}\n\nbool BPatch_process::isMultithreadCapable()\n{\n   if (!llproc) return false;\n   return llproc->multithread_capable();\n}\n\nBPatch_thread *BPatch_process::getThread(dynthread_t tid)\n{\n   for (unsigned i=0; i<threads.size(); i++)\n      if (threads[i]->getTid() == tid)\n         return threads[i];\n   return NULL;\n}\n\nBPatch_thread *BPatch_process::getThreadByIndex(unsigned index)\n{\n   for (unsigned i=0; i<threads.size(); i++)\n      if (threads[i]->getBPatchID() == index)\n         return threads[i];\n   return NULL;\n}\n\nprocessType BPatch_process::getType()\n{\n  return TRADITIONAL_PROCESS;\n}\n\nvoid BPatch_process::getAS(std::vector<AddressSpace *> &as)\n{\n   as.push_back(static_cast<AddressSpace*>(llproc));\n}\n\n/**\n * Removes the BPatch_thread from this process' collection of\n * threads\n **/\nvoid BPatch_process::deleteBPThread(BPatch_thread *thrd)\n{\n   if (!thrd || !thrd->getBPatchID())\n   {\n      //Don't delete if this is the initial thread.  Some Dyninst programs\n      // may use the initial BPatch_thread as a handle instead of the\n      // BPatch_process, and we don't want to delete that handle out from\n      // under the users.\n      return;\n   }\n\n#if !defined(USE_DEPRECATED_BPATCH_VECTOR)\n   // STL vectors don't have item erase. We use iterators instead...\n   threads.erase(std::find(threads.begin(),\n                                 threads.end(),\n                                 thrd));\n#else\n   for (unsigned i=0; i< threads.size(); i++) {\n      if (threads[i] == thrd) {\n         threads.erase(i);\n         break;\n      }\n   }\n#endif\n\n   llproc->removeThread(thrd->getTid());\n\n   // We allow users to maintain pointers to exited threads\n   // If this changes, the memory can be free'd here\n   // delete thrd;\n}\n\n#ifdef IBM_BPATCH_COMPAT\n/**\n * In IBM's code, this is a wrapper for _BPatch_thread->addSharedObject (linux)\n * which is in turn a wrapper for creating a new\n * ibmBpatchElf32Teader(name, addr)\n **/\nbool BPatch_process::addSharedObject(const char *name,\n                                        const unsigned long loadaddr)\n{\n   return loadLibrary(name);\n}\n#endif\n\n/**\n * This function continues a stopped process, letting it execute in single step mode,\n * and printing the current instruction as it executes.\n **/\n\nvoid BPatch_process::debugSuicide()\n{\n    llproc->debugSuicide();\n}\n\nvoid BPatch_process::triggerThreadCreate(PCThread *thread) {\n  BPatch_thread *newthr = BPatch_thread::createNewThread(this, thread);\n  threads.push_back(newthr);\n  BPatch::bpatch->registerThreadCreate(this, newthr);\n}\n\n/* BPatch::triggerStopThread\n *\n * Causes the execution of a callback in the mutator that was\n * triggered for the evtStopThread event. As BPatch_stopThreadExpr\n * snippets allow a different callback to be triggered for each\n * snippet instance, the cb_ID is used to find the right callback to\n * trigger. This code had to be in a BPatch-level class so that we\n * could utilize the findOrCreateBPFunc and findOrCreateBPPoint\n * functions.\n *\n * @intPoint: the instPoint at which the event occurred, will be\n *    wrapped in a BPatch_point and sent to the callback as a parameter\n * @intFunc: the function in which the event occurred, will be wrapped\n *    in a BPatch_function and sent to the callback as a parameter\n * @proc: the process is needed for the creation of BPatch level objects\n * @cb_ID: helps us identify the correct call\n * @retVal: the return value of a parameter snippet that gets passed\n *    down in the stopThread snippet and evaluated.\n *\n * Return Value: Will always be true if code unless an error occurs, a\n *    callback is triggered for every stopThread snippet instance.\n */\nbool BPatch_process::triggerStopThread(instPoint *intPoint,\n         func_instance *intFunc, int cb_ID, void *retVal)\n{\n    // find the BPatch_point corresponding to the instrumentation point\n    BPatch_function *bpFunc = findOrCreateBPFunc(intFunc, NULL);\n    BPatch_procedureLocation bpPointType =\n        BPatch_point::convertInstPointType_t(intPoint->type());\n    BPatch_point *bpPoint = findOrCreateBPPoint(bpFunc, intPoint, bpPointType);\n    if (!bpPoint) {\n        return false;\n    }\n\n    // Trigger all the callbacks matching this snippet\n    for(unsigned int i = 0; i < BPatch::bpatch->stopThreadCallbacks.size(); ++i) {\n        BPatchStopThreadCallback curCallback = BPatch::bpatch->stopThreadCallbacks[i];\n        if( cb_ID == BPatch::bpatch->info->getStopThreadCallbackID((Address)curCallback) ) {\n            (*curCallback)(bpPoint, retVal);\n        }\n    }\n\n   return true;\n}\n\n\n/* BPatch::triggerSignalHandlerCB\n *\n * Grabs BPatch level objects for the instPoint and enclosing function\n * and triggers any registered callbacks for this signal/exception\n *\n * @intPoint: the instPoint at which the event occurred, will be\n * wrapped in a BPatch_point and sent to the callback as a parameter\n * @intFunc: the function in which the event occurred, will be\n * wrapped in a BPatch_function and sent to the callback as a parameter\n *\n * Return Value: true if a matching callback was found and no error occurred\n *\n */\nbool BPatch_process::triggerSignalHandlerCB(instPoint *intPoint,\n        func_instance *intFunc, long signum, BPatch_Vector<Address> *handlers)\n{\n    // find the BPatch_point corresponding to the exception-raising instruction\n    BPatch_function *bpFunc = findOrCreateBPFunc(intFunc, NULL);\n    BPatch_procedureLocation bpPointType =\n        BPatch_point::convertInstPointType_t(intPoint->type());\n    BPatch_point *bpPoint = findOrCreateBPPoint(bpFunc, intPoint, bpPointType);\n    if (!bpPoint) { return false; }\n\n    // Do the callback\n    InternalSignalHandlerCallback cb = BPatch::bpatch->signalHandlerCallback;\n    if( cb ) {\n        (*cb)(bpPoint, signum, *handlers);\n        return true;\n    }\n\n    return false;\n}\n\n/* BPatch::triggerCodeOverwriteCB\n *\n * Grabs BPatch level objects for the instPoint and enclosing function\n * and triggers a registered callback if there is one\n *\n * @intPoint: the instPoint at which the event occurred, will be\n * wrapped in a BPatch_point and sent to the callback as a parameter\n *\n * Return Value: true if a matching callback was found and no error occurred\n */\nbool BPatch_process::triggerCodeOverwriteCB(instPoint *faultPoint,\n                                            Address faultTarget)\n{\n    BPatch_function *bpFunc = findOrCreateBPFunc\n        (faultPoint->func(),NULL);\n    assert(bpFunc);\n    BPatch_point *bpPoint = findOrCreateBPPoint(\n        bpFunc,\n        faultPoint,\n        BPatch_point::convertInstPointType_t(faultPoint->type()));\n\n    // Do the callback\n    InternalCodeOverwriteCallback cb = BPatch::bpatch->codeOverwriteCallback;\n    if( cb ) {\n        (*cb)(bpPoint, faultTarget);\n        return true;\n    }\n\n    return false;\n}\n\n/* This is a Windows only function that sets the user-space\n * debuggerPresent flag to 0 or 1, 0 meaning that the process is not\n * being debugged.  The debugging process will still have debug\n * access, but system calls that ask if the process is being debugged\n * will say that it is not because they merely return the value of the\n * user-space beingDebugged flag.\n */\nbool BPatch_process::hideDebugger()\n{\n    // do non-instrumentation related hiding\n    bool retval = llproc->hideDebugger();\n\n    // disable API calls //\n    vector<pair<BPatch_function *,BPatch_function *> > disabledFuncs;\n    BPatch_module *user = image->findModule(\"user32.dll\",true);\n    BPatch_module *kern = image->findModule(\"*kernel32.dll\",true);\n\n    if (user) {\n        // BlockInput\n        using namespace SymtabAPI;\n        vector<BPatch_function*> funcs;\n        user->findFunction(\n            \"BlockInput\",\n            funcs, false, false, false, true);\n        assert (funcs.size());\n        BPatch_module *rtlib = this->image->findOrCreateModule(\n            (*llproc->runtime_lib.begin())->getModules().front());\n        vector<BPatch_function*> repfuncs;\n        rtlib->findFunction(\"DYNINST_FakeBlockInput\", repfuncs, false);\n        assert(!repfuncs.empty());\n        replaceFunction(*funcs[0],*repfuncs[0]);\n        disabledFuncs.push_back(pair<BPatch_function*,BPatch_function*>(\n                                funcs[0],repfuncs[0]));\n    }\n\n    if (kern) {\n        // SuspendThread\n        // KEVINTODO: condition the function replacement on its thread ID parameter matching a Dyninst thread\n        using namespace SymtabAPI;\n        vector<BPatch_function*> funcs;\n        kern->findFunction(\n            \"SuspendThread\",\n            funcs, false, false, false, true);\n        assert (funcs.size());\n        BPatch_module *rtlib = this->image->findOrCreateModule(\n            (*llproc->runtime_lib.begin())->getModules().front());\n        vector<BPatch_function*> repfuncs;\n        rtlib->findFunction(\"DYNINST_FakeSuspendThread\", repfuncs, false);\n        assert(!repfuncs.empty());\n        replaceFunction(*funcs[0],*repfuncs[0]);\n        disabledFuncs.push_back(pair<BPatch_function*,BPatch_function*>(\n                                funcs[0],repfuncs[0]));\n    }\n\n    if (kern) {\n        // getTickCount\n        using namespace SymtabAPI;\n        vector<BPatch_function*> funcs;\n        kern->findFunction(\n            \"GetTickCount\",\n            funcs, false, false, false, true);\n        if (!funcs.empty()) {\n\t\t\tBPatch_module *rtlib = this->image->findOrCreateModule(\n\t\t\t\t(*llproc->runtime_lib.begin())->getModules().front());\n\t\t\tvector<BPatch_function*> repfuncs;\n\t\t\trtlib->findFunction(\"DYNINST_FakeTickCount\", repfuncs, false);\n\t\t\tassert(!repfuncs.empty());\n\t\t\treplaceFunction(*funcs[0],*repfuncs[0]);\n\t\t\tdisabledFuncs.push_back(pair<BPatch_function*,BPatch_function*>(\n\t\t\t\t\t\t\t\t\tfuncs[0],repfuncs[0]));\n\t\t}\n    }\n\n    if (kern) {\n        // getSystemTime\n        using namespace SymtabAPI;\n        vector<BPatch_function*> funcs;\n        kern->findFunction(\n            \"GetSystemTime\",\n            funcs, false, false, false, true);\n        assert (!funcs.empty());\n        BPatch_module *rtlib = this->image->findOrCreateModule(\n            (*llproc->runtime_lib.begin())->getModules().front());\n        vector<BPatch_function*> repfuncs;\n        rtlib->findFunction(\"DYNINST_FakeGetSystemTime\", repfuncs, false);\n        assert(!repfuncs.empty());\n        replaceFunction(*funcs[0],*repfuncs[0]);\n        disabledFuncs.push_back(pair<BPatch_function*,BPatch_function*>(\n                                funcs[0],repfuncs[0]));\n    }\n\n    if (kern) {\n        // CheckRemoteDebuggerPresent\n        vector<BPatch_function*> funcs;\n        kern->findFunction(\n            \"CheckRemoteDebuggerPresent\",\n            funcs, false, false, true);\n        assert (funcs.size());\n        BPatch_module *rtlib = this->image->findOrCreateModule(\n            (*llproc->runtime_lib.begin())->getModules().front());\n        vector<BPatch_function*> repfuncs;\n        rtlib->findFunction(\"DYNINST_FakeCheckRemoteDebuggerPresent\", repfuncs, false);\n        assert(!repfuncs.empty());\n        replaceFunction(*funcs[0],*repfuncs[0]);\n        disabledFuncs.push_back(pair<BPatch_function*,BPatch_function*>(\n                                funcs[0],repfuncs[0]));\n    }\n\n    if (kern && user) {\n        // OutputDebugStringA\n        vector<BPatch_function*> funcs;\n        kern->findFunction(\"OutputDebugStringA\",\n            funcs, false, false, true);\n        assert(funcs.size());\n        vector<BPatch_function*> sle_funcs;\n        user->findFunction(\"SetLastErrorEx\", sle_funcs,\n                           false, false, true, true);\n        assert(!sle_funcs.empty());\n        vector<BPatch_snippet*> args;\n        BPatch_constExpr lasterr(1);\n        args.push_back(&lasterr);\n        args.push_back(&lasterr); // need a second parameter, but it goes unused by windows\n        BPatch_funcCallExpr callSLE (*(sle_funcs[0]), args);\n        vector<BPatch_point*> *exitPoints = sle_funcs[0]->findPoint(BPatch_exit);\n        beginInsertionSet();\n        for (unsigned i=0; i < exitPoints->size(); i++) {\n            insertSnippet( callSLE, *((*exitPoints)[i]) );\n        }\n    }\n\n    if (NULL != hybridAnalysis_) {\n        hybridAnalysis_->addReplacedFuncs(disabledFuncs);\n    }\n    finalizeInsertionSet(false);\n\n    if (!user || !kern) {\n        retval = false;\n    }\n    return retval;\n}\n\nbool BPatch_process::setMemoryAccessRights(Address start, size_t size, Dyninst::ProcControlAPI::Process::mem_perm rights) {\n    bool wasStopped = isStopped();\n    if( !wasStopped ) {\n        if (!stopExecution()) {\n            BPatch_reportError(BPatchWarning, 0,\n                               \"Failed to stop process for setMemoryAccessRights\");\n            return false;\n        }\n    }\n\n    int result = llproc->setMemoryAccessRights(start, size, rights);\n\n    if( !wasStopped ) {\n        if( !continueExecution() ) {\n            BPatch_reportError(BPatchWarning, 0,\n                    \"Failed to continue process for setMemoryAccessRights\");\n            return false;\n        }\n    }\n\n    return (result != -1);\n}\n\nunsigned char * BPatch_process::makeShadowPage(Dyninst::Address pageAddr)\n{\n    unsigned pagesize = llproc->getMemoryPageSize();\n    pageAddr = (pageAddr / pagesize) * pagesize;\n\n    Address shadowAddr = pageAddr;\n    if (llproc->isMemoryEmulated()) {\n        bool valid = false;\n        boost::tie(valid, shadowAddr) = llproc->getMemEm()->translate(pageAddr);\n        assert(valid);\n    }\n\n    unsigned char* buf = (unsigned char*) ::malloc(pagesize);\n    llproc->readDataSpace((void*)shadowAddr, pagesize, buf, true);\n    return buf;\n}\n\n// is the first instruction: [00 00] add byte ptr ds:[eax],al ? \nstatic bool hasWeirdEntryBytes(func_instance *func)\n{\n    using namespace SymtabAPI;\n    Symtab *sym = func->obj()->parse_img()->getObject();\n    if (sym->findEnclosingRegion(func->addr())\n        !=\n        sym->findEnclosingRegion(func->addr()+1))\n    {\n        return false;\n    }\n    unsigned short ebytes;\n    memcpy(&ebytes,func->obj()->getPtrToInstruction(func->addr()),2);\n\n    if (0 == ebytes) {\n        mal_printf(\"funct at %lx hasWeirdEntryBytes, 0x0000\\n\", func->addr());\n        return true;\n    }\n    return false;\n}\n\nvoid BPatch_process::overwriteAnalysisUpdate\n    ( std::map<Dyninst::Address,unsigned char*>& owPages, //input\n      std::vector<std::pair<Dyninst::Address,int> >& deadBlocks, //output\n      std::vector<BPatch_function*>& owFuncs, //output: overwritten & modified\n      std::set<BPatch_function *> &monitorFuncs, // output: those that call overwritten or modified funcs\n      bool &changedPages, bool &changedCode) //output\n{\n    //1.  get the overwritten blocks and regions\n    std::list<std::pair<Address,Address> > owRegions;\n    std::list<block_instance *> owBBIs;\n    llproc->getOverwrittenBlocks(owPages, owRegions, owBBIs);\n    changedPages = ! owRegions.empty();\n    changedCode = ! owBBIs.empty();\n\n    if ( !changedCode ) {\n        // update the mapped data for the overwritten ranges\n        llproc->updateCodeBytes(owRegions);\n        return;\n    }\n\n    /*2. remove dead code from the analysis */\n\n    // identify the dead code (see getDeadCode for its parameter definitions)\n    std::set<block_instance*> delBlocks; \n    std::map<func_instance*,set<block_instance*> > elimMap; \n    std::list<func_instance*> deadFuncs; \n    std::map<func_instance*,block_instance*> newFuncEntries; \n    llproc->getDeadCode(owBBIs,delBlocks,elimMap,deadFuncs,newFuncEntries);\n\n    // remove instrumentation from affected funcs\n    beginInsertionSet();\n    for(std::map<func_instance*,set<block_instance*> >::iterator fIter = elimMap.begin();\n        fIter != elimMap.end();\n        fIter++)\n    {\n        BPatch_function *bpfunc = findOrCreateBPFunc(fIter->first,NULL);\n        //hybridAnalysis_->removeInstrumentation(bpfunc,false,false);\n        bpfunc->removeInstrumentation(false);\n    }\n\n    //remove instrumentation from dead functions\n    for(std::list<func_instance*>::iterator fit = deadFuncs.begin();\n        fit != deadFuncs.end();\n        fit++)\n    {\n        // remove instrumentation\n        findOrCreateBPFunc(*fit,NULL)->removeInstrumentation(true);\n    }\n\n    finalizeInsertionSet(false);\n\n    // update the mapped data for the overwritten ranges\n    llproc->updateCodeBytes(owRegions);\n\n    // create stub edge set which is: all edges such that:\n    //     e->trg() in owBBIs and\n    //     while e->src() in delBlocks choose stub from among e->src()->sources()\n    std::map<func_instance*,vector<edgeStub> > stubs =\n       llproc->getStubs(owBBIs,delBlocks,deadFuncs);\n\n    // get stubs for dead funcs\n    map<Address,vector<block_instance*> > deadFuncCallers;\n    for(std::list<func_instance*>::iterator fit = deadFuncs.begin();\n        fit != deadFuncs.end();\n        fit++)\n    {\n       if ((*fit)->getLiveCallerBlocks(delBlocks, deadFuncs, deadFuncCallers) &&\n           ((*fit)->ifunc()->hasWeirdInsns() || hasWeirdEntryBytes(*fit))) \n       {\n          // don't reparse the function if it's likely a garbage function, \n          // but mark the caller point as unresolved so we'll re-parse\n          // if we actually call into the garbage func\n          Address funcAddr = (*fit)->addr();\n          vector<block_instance*>::iterator sit = deadFuncCallers[funcAddr].begin();\n          for ( ; sit != deadFuncCallers[funcAddr].end(); sit++) {\n             (*sit)->llb()->setUnresolvedCF(true);\n             vector<func_instance*> cfuncs;\n             (*sit)->getFuncs(std::back_inserter(cfuncs));\n             for (unsigned i=0; i < cfuncs.size(); i++) {\n                cfuncs[i]->ifunc()->setPrevBlocksUnresolvedCF(0); // force rebuild of unresolved list\n                cfuncs[i]->preCallPoint(*sit, true); // create point\n                monitorFuncs.insert(findOrCreateBPFunc(cfuncs[i], NULL));\n             }\n          }\n          deadFuncCallers.erase(deadFuncCallers.find(funcAddr));\n       }\n    }\n\n    // set new entry points for functions with NewF blocks, the active blocks\n    // in newFuncEntries serve as suggested entry points, but will not be \n    // chosen if there are other blocks in the function with no incoming edges\n    for (map<func_instance*,block_instance*>::iterator nit = newFuncEntries.begin();\n         nit != newFuncEntries.end();\n         nit++)\n    {\n        nit->first->setNewEntry(nit->second,delBlocks);\n    }\n    \n    // delete delBlocks and set new function entry points, if necessary\n    vector<PatchBlock*> delVector;\n    for(set<block_instance*>::reverse_iterator bit = delBlocks.rbegin(); \n        bit != delBlocks.rend();\n        bit++)\n    {\n        mal_printf(\"Deleting block [%lx %lx)\\n\", (*bit)->start(),(*bit)->end());\n        deadBlocks.push_back(pair<Address,int>((*bit)->start(),(*bit)->size()));\n        delVector.push_back(*bit);\n    }\n    if (!delVector.empty() && ! PatchAPI::PatchModifier::remove(delVector,true)) {\n        assert(0);\n    }\n    mal_printf(\"Done deleting blocks\\n\"); \n    // delete completely dead functions // \n\n    // save deadFunc block addresses in deadBlocks\n    for(std::list<func_instance*>::iterator fit = deadFuncs.begin();\n        fit != deadFuncs.end();\n        fit++)\n    {\n        const PatchFunction::Blockset& deadBs = (*fit)->blocks();\n        PatchFunction::Blockset::const_iterator bIter= deadBs.begin();\n        for (; bIter != deadBs.end(); bIter++) {\n            deadBlocks.push_back(pair<Address,int>((*bIter)->start(),\n                                                   (*bIter)->size()));\n        }\n    }\n\n    // now actually delete the dead functions and redirect call edges to sink \n    // block (if there already is an edge to the sink block, redirect \n    // doesn't duplicate the edge)\n    for(std::list<func_instance*>::iterator fit = deadFuncs.begin();\n        fit != deadFuncs.end();\n        fit++)\n    {\n        const PatchBlock::edgelist & srcs = (*fit)->entry()->sources();\n        vector<PatchEdge*> srcVec; // can't operate off edgelist, since we'll be deleting edges\n        srcVec.insert(srcVec.end(), srcs.begin(), srcs.end());\n        for (vector<PatchEdge*>::const_iterator sit = srcVec.begin();\n             sit != srcVec.end();\n             sit++)\n        {\n           if ((*sit)->type() == ParseAPI::CALL) {\n              PatchAPI::PatchModifier::redirect(*sit, NULL);\n           }\n        }\n\n        if (false == PatchAPI::PatchModifier::remove(*fit)) {\n            assert(0);\n        }\n    }\n    mal_printf(\"Done deleting functions\\n\");\n\n\n    // set up data structures for re-parsing dead functions from stubs\n    map<mapped_object*,vector<edgeStub> > dfstubs;\n    for (map<Address, vector<block_instance*> >::iterator sit = deadFuncCallers.begin();\n         sit != deadFuncCallers.end();\n         sit++)\n    {\n       for (vector<block_instance*>::iterator bit = sit->second.begin();\n            bit != sit->second.end();\n            bit++) \n       {\n          // re-instate call edges to the function\n          dfstubs[(*bit)->obj()].push_back(edgeStub(*bit,\n                                                    sit->first,\n                                                    ParseAPI::CALL));\n       }\n   }\n\n    // re-parse the functions\n    for (map<mapped_object*,vector<edgeStub> >::iterator mit= dfstubs.begin();\n         mit != dfstubs.end(); mit++)\n    {\n        mit->first->setCodeBytesUpdated(false);\n        if (mit->first->parseNewEdges(mit->second)) {\n            // add functions to output vector\n            for (unsigned fidx=0; fidx < mit->second.size(); fidx++) {\n               BPatch_function *bpfunc = findFunctionByEntry(mit->second[fidx].trg);\n               if (bpfunc) {\n                  owFuncs.push_back(bpfunc);\n               } else {\n                  // couldn't reparse\n                  mal_printf(\"WARNING: Couldn't re-parse an overwritten \"\n                             \"function at %lx %s[%d]\\n\", mit->second[fidx].trg, \n                             FILE__,__LINE__);\n               }\n            }\n        } else {\n            mal_printf(\"ERROR: Couldn't re-parse overwritten \"\n                       \"functions %s[%d]\\n\", FILE__,__LINE__);\n        }\n    }\n\n    //3. parse new code, one overwritten function at a time\n    for(std::map<func_instance*,set<block_instance*> >::iterator\n        fit = elimMap.begin();\n        fit != elimMap.end();\n        fit++)\n    {\n        // parse new edges in the function\n       if (!stubs[fit->first].empty()) {\n          fit->first->obj()->parseNewEdges(stubs[fit->first]);\n       } else {\n          // stubs may have been shared with another function and parsed in \n          // the other function's context.  \n          mal_printf(\"WARNING: didn't have any stub edges for overwritten \"\n                     \"func %lx\\n\", fit->first->addr());\n          //KEVINTEST: we used to wind up here with deleted functions, hopefully we do not anymore\n       }\n        // add curFunc to owFuncs, and clear the function's BPatch_flowGraph\n        BPatch_function *bpfunc = findOrCreateBPFunc(fit->first,NULL);\n        bpfunc->removeCFG();\n        owFuncs.push_back(bpfunc);\n    }\n\n    // do a consistency check\n    for(std::map<func_instance*,set<block_instance*> >::iterator \n        fit = elimMap.begin();\n        fit != elimMap.end();\n        fit++) \n    {\n        assert(fit->first->consistency());\n    }\n}\n\n/* Protect analyzed code without protecting relocated code in the\n * runtime library and for now only protect code in the aOut,\n * also don't protect code that hasn't been analyzed\n */\nbool BPatch_process::protectAnalyzedCode()\n{\n    bool ret = true;\n    BPatch_Vector<BPatch_module *> *bpMods = image->getModules();\n    for (unsigned midx=0; midx < bpMods->size(); midx++) {\n       if (!(*bpMods)[midx]->setAnalyzedCodeWriteable(false)) {\n           ret = false;\n       }\n    }\n    return ret;\n}\n\n\nbool BPatch_process::supportsUserThreadEvents() {\n    if (llproc == NULL) return false;\n    return llproc->supportsUserThreadEvents(); \n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI/src/BPatch.C": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n * \n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n * \n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n#include <stdio.h>\n#include <assert.h>\n#include <signal.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#if !defined(os_windows)\n#include <unistd.h>\n#endif\n\n#define BPATCH_FILE\n#include \"common/src/Pair.h\"\n#include \"common/src/Vector.h\"\n#include \"common/src/stats.h\"\n#include \"BPatch.h\"\n#include \"BPatch_libInfo.h\"\n#include \"BPatch_collections.h\"\n#include \"BPatch_thread.h\"\n#include \"common/src/timing.h\"\n#include \"debug.h\"\n#include \"mapped_module.h\"\n#include \"instPoint.h\"\n#include \"hybridAnalysis.h\"\n#include \"BPatch_object.h\"\n\n// ProcControlAPI interface\n#include \"dynProcess.h\"\n#include \"dynThread.h\"\n#include \"pcEventMuxer.h\"\n\n#if defined(i386_unknown_nt4_0)\n#include \"nt_signal_emul.h\"\n#endif\n\n#include <fstream>\n\nusing namespace std;\nusing namespace SymtabAPI;\n\nextern void loadNativeDemangler();\n\nBPatch *BPatch::bpatch = NULL;\n\nvoid defaultErrorFunc(BPatchErrorLevel level, int num, const char * const *params);\n\n#ifndef CASE_RETURN_STR\n#define CASE_RETURN_STR(x) case x: return #x\n#endif\n\nconst char *asyncEventType2Str(BPatch_asyncEventType ev) {\n    switch(ev) {\n        CASE_RETURN_STR(BPatch_nullEvent);\n        CASE_RETURN_STR(BPatch_newConnectionEvent);\n        CASE_RETURN_STR(BPatch_internalShutDownEvent);\n        CASE_RETURN_STR(BPatch_threadCreateEvent);\n        CASE_RETURN_STR(BPatch_threadDestroyEvent);\n        CASE_RETURN_STR(BPatch_dynamicCallEvent);\n    default:\n        return \"BadEventType\";\n    }\n}\n\n/*\n * BPatch::BPatch\n *\n * Constructor for BPatch.  Performs one-time initialization needed by the\n * library.\n */\nBPatch::BPatch()\n  : info(NULL),\n    typeCheckOn(true),\n    lastError(0),\n    debugParseOn(true),\n    baseTrampDeletionOn(false),\n    trampRecursiveOn(false),\n    forceRelocation_NP(false),\n    autoRelocation_NP(true),\n    saveFloatingPointsOn(true),\n    forceSaveFloatingPointsOn(false),\n    livenessAnalysisOn_(true),\n    livenessAnalysisDepth_(3),\n    asyncActive(false),\n    delayedParsing_(false),\n    instrFrames(false),\n    systemPrelinkCommand(NULL),\n    notificationFDOutput_(-1),\n    notificationFDInput_(-1),\n    FDneedsPolling_(false),\n    errorCallback(NULL),\n    preForkCallback(NULL),\n    postForkCallback(NULL),\n    execCallback(NULL),\n    exitCallback(NULL),\n    oneTimeCodeCallback(NULL),\n    dynLibraryCallback(NULL),\n    threadCreateCallback(NULL),\n    threadDestroyCallback(NULL),\n    dynamicCallSiteCallback(NULL),\n    signalHandlerCallback(NULL),\n    codeOverwriteCallback(NULL),\n    inDestructor(false),\n    builtInTypes(NULL),\n    stdTypes(NULL),\n    type_Error(NULL),\n    type_Untyped(NULL)\n{\n    init_debug();\n    init_stats();\n\n    memset(&stats, 0, sizeof(BPatch_stats));\n    extern bool init();\n\n    // Save a pointer to the one-and-only bpatch object.\n    if (bpatch == NULL){\n       bpatch = this;\n    }\n    \n    BPatch::bpatch->registerErrorCallback(defaultErrorFunc);\n    bpinfo(\"installed default error reporting function\");\n    \n    /*\n     * Create the list of processes.\n     */\n    info = new BPatch_libInfo();\n\n    /*\n     * Create the \"error\" and \"untyped\" types.\n     */\n    type_Error   = BPatch_type::createFake(\"<error>\");\n    type_Untyped = BPatch_type::createFake(\"<no type>\");\n    \n    /*\n     * Initialize hash table of API types.\n     */\n    APITypes = BPatch_typeCollection::getGlobalTypeCollection();\n\n    stdTypes = BPatch_typeCollection::getGlobalTypeCollection();\n    vector<boost::shared_ptr<Type>> sTypes;\n    Symtab::getAllstdTypes(sTypes);\n    BPatch_type* type = NULL;\n    for(const auto& t: sTypes) {\n        stdTypes->addType(type = new BPatch_type(t));\n        type->decrRefCount();\n    }\n    sTypes.clear();\n\n    builtInTypes = new BPatch_builtInTypeCollection;\n    Symtab::getAllbuiltInTypes(sTypes);\n    for(const auto& t: sTypes) {\n        builtInTypes->addBuiltInType(type = new BPatch_type(t));\n        type->decrRefCount();\n    }\n\n    //loadNativeDemangler();\n\n\t// Start up the event handler thread\n\tPCEventMuxer::start();\n}\n\n\n/*\n * BPatch::~BPatch\n *\n * Destructor for BPatch.  Free allocated memory.\n */\nBPatch::~BPatch()\n{\n   inDestructor = true;\n    for(auto i = info->procsByPid.begin(); \n        i != info->procsByPid.end();\n        ++i)\n    {\n       delete i->second;\n    }\n\n    delete info;\n\n    type_Error->decrRefCount();\n    type_Untyped->decrRefCount();\n\n    if (stdTypes)\n        BPatch_typeCollection::freeTypeCollection(stdTypes);\n    if (APITypes)\n        BPatch_typeCollection::freeTypeCollection(APITypes);\n    if(builtInTypes)\n      delete builtInTypes;\n    \n    if(systemPrelinkCommand){\n        delete [] systemPrelinkCommand;\n    }\n    bpatch = NULL;\n}\n\nBPatch *BPatch::getBPatch() {\n\treturn bpatch;\n}\n\nchar * BPatch::getPrelinkCommand(){\n\treturn systemPrelinkCommand;\n}\n\nvoid BPatch::setPrelinkCommand(char *command){\n\n\tif(systemPrelinkCommand){\n\t\tdelete [] systemPrelinkCommand;\n\t}\n\tsystemPrelinkCommand = new char[strlen(command)+1];\n\tmemcpy(systemPrelinkCommand, command, strlen(command)+1);\n}\n\nbool BPatch::isTypeChecked()\n{\n  return typeCheckOn;\n}\nvoid BPatch::setTypeChecking(bool x)\n{\n  typeCheckOn = x;\n}\nbool BPatch::parseDebugInfo()\n{\n  return debugParseOn;\n}\nbool BPatch::delayedParsingOn()\n{\n  return delayedParsing_;\n}\nvoid BPatch::setDebugParsing(bool x)\n{\n  debugParseOn = x;\n}\nbool BPatch::baseTrampDeletion()\n{\n  return baseTrampDeletionOn;\n}\nvoid BPatch::setBaseTrampDeletion(bool x)\n{\n  baseTrampDeletionOn = x;\n}\nbool BPatch::isTrampRecursive()\n{\n  return trampRecursiveOn;\n}\nvoid BPatch::setTrampRecursive(bool x)\n{\n  trampRecursiveOn = x;\n}\nvoid BPatch::setLivenessAnalysis(bool x)\n{\n    livenessAnalysisOn_ = x;\n}\nbool BPatch::livenessAnalysisOn() {\n    return livenessAnalysisOn_;\n}\n\nvoid BPatch::setLivenessAnalysisDepth(int x)\n{\n    livenessAnalysisDepth_ = x;\n}\nint BPatch::livenessAnalysisDepth() {\n    return livenessAnalysisDepth_;\n}\n\nbool BPatch::hasForcedRelocation_NP()\n{\n  return forceRelocation_NP;\n}\nvoid BPatch::setForcedRelocation_NP(bool x)\n{\n  forceRelocation_NP = x;\n}\nbool BPatch::autoRelocationOn()\n{\n  return autoRelocation_NP;\n}\nvoid BPatch::setAutoRelocation_NP(bool x)\n{\n  autoRelocation_NP = x;\n}\nvoid BPatch::setDelayedParsing(bool x)\n{\n  delayedParsing_ = x;\n}\nbool BPatch::isMergeTramp()\n{\n  return true;\n}\nvoid BPatch::setMergeTramp(bool)\n{\n}\n\nbool BPatch::isSaveFPROn()\n{\n  return saveFloatingPointsOn;\n}\nvoid BPatch::setSaveFPR(bool x)\n{\n  saveFloatingPointsOn = x;\n}\n\nbool BPatch::isForceSaveFPROn()\n{\n  return forceSaveFloatingPointsOn;\n}\nvoid BPatch::forceSaveFPR(bool x)\n{\n  forceSaveFloatingPointsOn = x;\n}\n\n/*\n * BPatch::registerErrorCallback\n *\n * Registers a function that is to be called by the library when an error\n * occurs or when there is status to report.  Returns the address of the\n * previously registered error callback function.\n *\n * function\tThe function to be called.\n */\n\n\nBPatchErrorCallback BPatch::registerErrorCallback(BPatchErrorCallback function)\n{\n    BPatchErrorCallback previous = errorCallback;\n    errorCallback = function;\n    return previous;\n}\n\n/*\n * BPatch::registerPostForkCallback\n *\n * Registers a function that is to be called by the library when a new\n * process has been forked off by an mutatee process.\n *\n * function\tThe function to be called.\n */\nBPatchForkCallback BPatch::registerPostForkCallback(BPatchForkCallback func)\n{\n#if defined(i386_unknown_nt4_0) \n  reportError(BPatchWarning, 0,\n\t      \"postfork callbacks not implemented on this platform\\n\");\n  return NULL;\n#else\n    BPatchForkCallback previous = postForkCallback;\n    postForkCallback = func;\n    return previous;\n#endif\n}\n\n/*\n * BPatch::registerPreForkCallback\n *\n * Registers a function that is to be called by the library when a process\n * is about to fork a new process\n *\n * function\tThe function to be called.\n */\nBPatchForkCallback BPatch::registerPreForkCallback(BPatchForkCallback func)\n{\n#if defined(i386_unknown_nt4_0)\n    reportError(BPatchWarning, 0,\n\t\"prefork callbacks not implemented on this platform\\n\");\n    return NULL;\n#else\n    BPatchForkCallback previous = preForkCallback;\n    preForkCallback = func;\n    return previous;\n#endif\n}\n\n/*\n * BPatch::registerExecCallback\n *\n * Registers a function that is to be called by the library when a \n * process has just completed an exec* call\n *\n * func\tThe function to be called.\n */\nBPatchExecCallback BPatch::registerExecCallback(BPatchExecCallback func)\n{\n\n#if defined(i386_unknown_nt4_0) \n    reportError(BPatchWarning, 0,\n\t\"exec callbacks not implemented on this platform\\n\");\n    return NULL;\n#else\n    BPatchExecCallback previous = execCallback;\n    execCallback = func;\n    return previous;\n#endif\n}\n\n/*\n * BPatch::registerExitCallback\n *\n * Registers a function that is to be called by the library when a \n * process has just called the exit system call\n *\n * func\tThe function to be called.\n */\nBPatchExitCallback BPatch::registerExitCallback(BPatchExitCallback func)\n{\n    BPatchExitCallback previous = exitCallback;\n    exitCallback = func;\n    return previous;\n}\n\n/*\n * BPatch::registerOneTimeCodeCallback\n *\n * Registers a function that is to be called by the library when a \n * oneTimeCode (inferior RPC) is completed.\n *\n * func\tThe function to be called.\n */\nBPatchOneTimeCodeCallback BPatch::registerOneTimeCodeCallback(BPatchOneTimeCodeCallback func)\n{\n    BPatchOneTimeCodeCallback previous = oneTimeCodeCallback;\n    oneTimeCodeCallback = func;\n    return previous;\n}\n\n/*\n * BPatch::registerDynLibraryCallback\n *\n * Registers a function that is to be called by the library when a dynamically\n * loaded library is loaded or unloaded by a process under the API's control.\n * Returns the address of the previously registered callback function.\n *\n * function\tThe function to be called.\n */\nBPatchDynLibraryCallback\nBPatch::registerDynLibraryCallback(BPatchDynLibraryCallback function)\n{\n    BPatchDynLibraryCallback previous = dynLibraryCallback;\n    dynLibraryCallback = function;\n    return previous;\n}\n\n/*\n * BPatch::getEnglishErrorString\n *\n * Returns the descriptive error string for the passed error number.\n *\n * number\tThe number that identifies the error.\n */\nconst char *BPatch::getEnglishErrorString(int /* number */)\n{\n    return \"%s\";\n}\n\n\n/*\n * BPatch::reportError\n *\n * Report an error using the callback mechanism.\n *\n * severity\tThe severity level of the error.\n * number\tIdentifies the error.\n * str\t\tA string to pass as the first element of the list of strings\n *\t\tgiven to the callback function.\n */\nvoid BPatch::reportError(BPatchErrorLevel severity, int number, const char *str)\n{\n   if (bpatch == NULL) {\n      return; //Probably decontructing objects.\n   }\n\n\n    // don't log BPatchWarning or BPatchInfo messages as \"errors\"\n    if ((severity == BPatchFatal) || (severity == BPatchSerious))\n        bpatch->lastError = number;\n\n    if( !BPatch::bpatch->errorCallback ) { \n        fprintf(stdout, \"%s[%d]:  DYNINST ERROR:\\n %s\\n\", FILE__, __LINE__, str);\n        fflush(stdout);\n        return; \n    }\n\n    BPatch::bpatch->errorCallback(severity, number, &str);\n    \n}\n\n\n/*\n * BPatch::formatErrorString\n *\n * Takes a format string with an error message (obtained from\n * getEnglishErrorString) and an array of parameters that were passed to an\n * error callback function, and creates a string with the parameters\n * substituted into it.\n *\n * dst\t\tThe address into which the formatted string should be copied.\n * size\t\tIf the formatted string is equal to or longer than this number\n * \t\tof characters, then it will be truncated to size-1 characters\n * \t\tand terminated with a nul ('\\0').\n * fmt\t\tThe format string (returned by a function such as\n *\t\tgetEnglishErrorString).\n * params\tThe array of parameters that were passed to an error callback\n *\t\tfunction.\n */\nvoid BPatch::formatErrorString(char *dst, int size,\n\t\t\t       const char *fmt, const char * const *params)\n{\n    int cur_param = 0;\n\n    while (size > 1 && *fmt) {\n\tif (*fmt == '%') {\n\t    if (fmt[1] == '\\0') {\n\t\tbreak;\n\t    } else if (fmt[1] == '%') {\n\t\t*dst++ = '%';\n\t\tsize--;\n\t    } else if (fmt[1] == 's') {\n\t\tchar *p = const_cast<char *>(params[cur_param++]);\n\t\twhile (size > 1 && *p) {\n\t\t    *dst++ = *p++;\n\t\t    size--;\n\t\t}\n\t    } else {\n\t\t// Illegal specifier\n\t\t*dst++ = fmt[0];\n\t\t*dst++ = fmt[1];\n\t\tsize -= 2;\n\t    }\n    \t    fmt += 2;\n\t} else {\n\t    *dst++ = *fmt++;\n\t    size--;\n\t}\n    }\n    if (size > 0)\n\t*dst = '\\0';\n}\n\nstatic const char *lvl_str(BPatchErrorLevel lvl)\n{\n  switch(lvl) {\n    case BPatchFatal: return \"--FATAL--\";\n    case BPatchSerious: return \"--SERIOUS--\";\n    case BPatchWarning: return \"--WARN--\";\n    case BPatchInfo: return \"--INFO--\";\n  };\n  return \"BAD ERR CODE\";\n}\n\nvoid defaultErrorFunc(BPatchErrorLevel level, int num, const char * const *params)\n{\n    char line[256];\n\n    if ((level == BPatchWarning) || (level == BPatchInfo)) {\n         // ignore low level errors/warnings in the default reporter\n         return;\n    }\n\n    const char *msg = BPatch::bpatch->getEnglishErrorString(num);\n    BPatch::bpatch->formatErrorString(line, sizeof(line), msg, params);\n\n    if (num != -1) {\n       fprintf(stderr,\"%s #%d: %s\\n\", lvl_str(level),num, line);\n    }\n}\n\n\n/*\n * BPatch::getThreadByPid\n *\n * Given a process ID, this function returns a pointer to the associated\n * BPatch_thread object (or NULL if there is none).  Since a process may be\n * registered provisionally with a thread object pointer of NULL, the boolean\n * pointed to by the parameter \"exists\" is set to true if the pid exists in\n * the table of processes, and false if it does not.\n *\n * pid\t\tThe pid to look up.\n * exists\tA pointer to a boolean to fill in with true if the pid exists\n *\t\tin the table and false if it does not.  NULL may be passed in\n *\t\tif this information is not required.\n */\nBPatch_process *BPatch::getProcessByPid(int pid, bool *exists)\n{\n   auto iter = info->procsByPid.find(pid);\n   if (iter != info->procsByPid.end()) {\n      if (exists) *exists = true;\n      BPatch_process *proc = iter->second;\n      return proc;\n    } else {\n      if (exists) *exists = false;\n      return NULL;\n   }\n}\n\nBPatch_thread *BPatch::getThreadByPid(int pid, bool *exists)\n{\n   BPatch_process *p = getProcessByPid(pid, exists);\n   if (!exists)\n      return NULL;\n   assert(p->threads.size() > 0);\n   return p->threads[0];\n}\n\n\n\n/*\n * BPatch::getProcs\n *\n * Returns a vector of all threads that are currently defined.  Includes\n * threads created directly using the library and those created with UNIX fork\n * or Windows NT spawn system calls.  The caller is responsible for deleting\n * the vector when it is no longer needed.\n */\nBPatch_Vector<BPatch_process *> *BPatch::getProcesses()\n{\n   BPatch_Vector<BPatch_process *> *result = new BPatch_Vector<BPatch_process *>;\n   for (auto iter = info->procsByPid.begin(); iter != info->procsByPid.end(); ++iter) {\n      result->push_back(iter->second);\n   }\n   \n   return result;\n}\n\n\n/*\n * BPatch::registerProvisionalThread\n *\n * Register a new process that is not yet associated with a thread.\n * (this function is called only by createProcess).\n *\n * pid\t\tThe pid of the process to register.\n */\nvoid BPatch::registerProvisionalThread(int pid)\n{\n   assert(info->procsByPid.find(pid) == info->procsByPid.end());\n   info->procsByPid[pid] = NULL;\n}\n\n\n/*\n * BPatch::registerForkedProcess\n *\n * Register a new process that is not yet associated with a thread.\n * (this function is an upcall when a new process is created).\n *\n * parentPid\t\tthe pid of the parent process.\n * childPid\t\tThe pid of the process to register.\n * proc\t\t\tlower lever handle to process specific stuff\n *\n */\nvoid BPatch::registerForkedProcess(PCProcess *parentProc, PCProcess *childProc)\n{\n    int parentPid = parentProc->getPid();\n    int childPid = childProc->getPid();\n\n    proccontrol_printf(\"BPatch: registering fork, parent %d, child %d\\n\",\n                    parentPid, childPid);\n    assert(getProcessByPid(childPid) == NULL);\n    \n    BPatch_process *parent = getProcessByPid(parentPid);\n    assert(parent);\n\n    BPatch_process *child = new BPatch_process(childProc);\n    child->triggerInitialThreadEvents();\n\n    if( postForkCallback ) {\n        postForkCallback(parent->threads[0], child->threads[0]);\n    }\n    \n    proccontrol_printf(\"BPatch: finished registering fork, parent %d, child %d\\n\",\n                    parentPid, childPid);\n}\n\n/*\n * BPatch::registerForkingThread\n *\n * Perform whatever processing is necessary when a thread enters\n * a fork system call. Previously the preForkCallback was made directly.\n *\n * forkingPid   pid of the forking process\n * proc\t\t\tlower lever handle to process specific stuff\n *\n */\nvoid BPatch::registerForkingProcess(int forkingPid, PCProcess * /*proc*/)\n{\n    BPatch_process *forking = getProcessByPid(forkingPid);\n    assert(forking);\n\n    if( preForkCallback ) {\n        preForkCallback(forking->threads[0], NULL);\n    }\n}\n\n\n/*\n * BPatch::registerExecCleanup\n *\n * Register a process that has just entered exec\n *\n * Gives us some cleanup time\n */\n\nvoid BPatch::registerExecCleanup(PCProcess *p, char *) \n{\n    BPatch_process *execing = getProcessByPid(p->getPid());\n    assert(execing);\n\n    for (unsigned i=0; i<execing->threads.size(); i++)\n       registerThreadExit(p, execing->threads[i]->llthread);\n\n}    \n\n/*\n * BPatch::registerExecExit\n *\n * Register a process that has just done an exec call.\n *\n * proc - the representation of the process after the exec\n */\nvoid BPatch::registerExecExit(PCProcess *proc) {\n    int execPid = proc->getPid();\n    BPatch_process *process = getProcessByPid(execPid);\n    assert(process);\n\n    assert( process->threads.size() <= 1 );\n\n    // There is a new underlying process representation\n    process->llproc = proc;\n    PCThread *thr = proc->getInitialThread();\n\n    // Create a new initial thread or update it\n    BPatch_thread *initialThread;\n    if( process->threads.size() == 0 ) { \n        initialThread = new BPatch_thread(process, thr);\n        process->threads.push_back(initialThread);\n    }else{\n        initialThread = process->getThreadByIndex(0);\n        initialThread->updateThread(thr);\n    }\n\n    // build a new BPatch_image for this one\n    if (process->image)\n        process->image->removeAllModules();\n\n    BPatch_image *oldImage = process->image;\n    process->image = new BPatch_image(process);\n    if( oldImage ) delete oldImage;\n\n    assert( proc->isBootstrapped() );\n\n    // ProcControlAPI doesn't deliver callbacks for the initial thread,\n    // even if the mutatee is multithread capable\n    if( proc->multithread_capable() ) {\n        registerThreadCreate(process, initialThread);\n    }\n\n    if( execCallback ) {\n        execCallback(process->threads[0]);\n    }\n}\n\nvoid BPatch::registerNormalExit(PCProcess *proc, int exitcode)\n{\n   if (!proc)\n      return;\n\n\n   int pid = proc->getPid();\n\n   BPatch_process *process = getProcessByPid(pid);\n\n   if (!process) return;\n\n   process->terminated = true;\n\n\n   BPatch_thread *thrd = process->getThreadByIndex(0);\n\n   process->setExitCode(exitcode);\n   process->setExitedNormally();\n\n   if (thrd) {\n\t   if( threadDestroyCallback && !thrd->madeExitCallback() ) {\n          threadDestroyCallback(process, thrd);\n      }\n   }\n\n   if( exitCallback ) {\n       exitCallback(process->threads[0], ExitedNormally);\n   }\n\n   // We now run the process out; set its state to terminated. Really, the user shouldn't\n   // try to do anything else with this, but we can get that happening.\n   BPatch_process *stillAround = getProcessByPid(pid);\n   if (stillAround) {\n      stillAround->reportedExit = true;\n      stillAround->terminated = true;\n   }\n}\n\nvoid BPatch::registerSignalExit(PCProcess *proc, int signalnum)\n{\n   if (!proc)\n      return;\n\n   int pid = proc->getPid();\n\n   BPatch_process *bpprocess = getProcessByPid(pid);\n   if (!bpprocess) {\n       // Error during startup can cause this -- we have a partially\n       // constructed process object, but it was never registered with\n       // bpatch\n       return;\n   }\n   BPatch_thread *thrd = bpprocess->getThreadByIndex(0);\n\n   bpprocess->setExitedViaSignal(signalnum);\n   bpprocess->terminated = true;\n\n   if (thrd) {\n\t   if( threadDestroyCallback && !thrd->madeExitCallback() ) {\n          threadDestroyCallback(bpprocess, thrd);\n      }\n      if( exitCallback ) {\n          exitCallback(bpprocess->threads[0], ExitedViaSignal);\n      }\n   }\n   \n   // We now run the process out; set its state to terminated. Really, the user shouldn't\n   // try to do anything else with this, but we can get that happening.\n   BPatch_process *stillAround = getProcessByPid(pid);\n   if (stillAround) {\n      stillAround->reportedExit = true;\n      stillAround->terminated = true;\n   }\n\n   // We need to clean this up... but the user still has pointers\n   // into this code. Ugh.\n   // Do not continue at this point; process is already gone.\n\n}\n\nbool BPatch::registerThreadCreate(BPatch_process *proc, BPatch_thread *newthr)\n{\n   if( threadCreateCallback ) {\n       threadCreateCallback(proc, newthr);\n   }\n\n   return true;\n}\n\nvoid BPatch::registerThreadExit(PCProcess *llproc, PCThread *llthread)\n{\n    assert( llproc && llthread );\n    \n    BPatch_process *bpprocess = getProcessByPid(llproc->getPid());\n    \n    if (!bpprocess) {\n        // Error during startup can cause this -- we have a partially\n        // constructed process object, but it was never registered with\n        // bpatch\n        return;\n    }\n\n    BPatch_thread *thrd = bpprocess->getThread(llthread->getTid());\n    if (!thrd) {\n        //If we don't have an BPatch thread, then it might have been an internal\n        // thread that we decided not to report to the user (happens during \n        //  windows attach).  Just trigger the lower level clean up in this case.\n        llproc->removeThread(llthread->getTid());\n        return;\n    }\n\n\tif (thrd->madeExitCallback()) return;\n\n    if( threadDestroyCallback ) {\n        threadDestroyCallback(bpprocess, thrd);\n    }\n\n\tthrd->setMadeExitCallback();\n    bpprocess->deleteBPThread(thrd);\n}\n\n\nvoid BPatch::registerUserEvent(BPatch_process *process, void *buffer,\n                       unsigned int bufsize)\n{\n    for(unsigned i = 0; i < userEventCallbacks.size(); ++i) {\n        (userEventCallbacks[i])(process, buffer, bufsize);\n    }\n}\n\nvoid BPatch::registerDynamicCallsiteEvent(BPatch_process *process, Address callTarget,\n                       Address callAddr)\n{\n    // find the point that triggered the event\n\n    proccontrol_printf(\"%s[%d]: dynamic call event from 0x%lx to 0x%lx\\n\",\n            FILE__, __LINE__, callAddr, callTarget);\n    BPatch_point *point = info->getMonitoredPoint(callAddr);\n    if ( point == NULL ) {\n        proccontrol_printf(\"%s[%d]: failed to find point for dynamic callsite event\\n\",\n                FILE__, __LINE__);\n        return;\n    }\n\n    func_instance *targetFunc = process->llproc->findOneFuncByAddr(callTarget);\n    if( targetFunc == NULL ) {\n        proccontrol_printf(\"%s[%d]: failed to find dynamic call target function\\n\",\n                FILE__, __LINE__);\n        return;\n    }\n\n    BPatch_function *bpatchTargetFunc = process->findOrCreateBPFunc(targetFunc, NULL);\n    if( bpatchTargetFunc == NULL ) {\n        proccontrol_printf(\"%s[%d]: failed to find BPatch target function\\n\",\n                FILE__, __LINE__);\n        return;\n    }\n\n    if( dynamicCallSiteCallback ) {\n        dynamicCallSiteCallback(point, bpatchTargetFunc);\n    }\n}\n\n/*\n * BPatch::registerLoadedModule\n *\n * Register a new module loaded by a process (e.g., dlopen)\n */\n\nvoid BPatch::registerLoadedModule(PCProcess *process, mapped_object *obj) {\n\n    BPatch_process *bProc = BPatch::bpatch->getProcessByPid(process->getPid());\n    if (!bProc) return; // Done\n\n    // Squash this notification if the PCProcess has changed (e.g. during exec)\n    if (bProc->llproc != process) return;\n\n    BPatch_image *bImage = bProc->getImage();\n    assert(bImage); // This we can assert to be true\n    \n    BPatch_object *bpobj = bImage->findOrCreateObject(obj);\n\n    if( dynLibraryCallback ) {\n        dynLibraryCallback(bProc->threads[0], bpobj, true);\n    }\n}\n\n/*\n * BPatch::registerUnloadedModule\n *\n * Register a new module loaded by a process (e.g., dlopen)\n */\n\nvoid BPatch::registerUnloadedModule(PCProcess *process, mapped_object *obj) {\n\n    BPatch_process *bProc = BPatch::bpatch->getProcessByPid(process->getPid());\n    if (!bProc) return; // Done\n\n    // Squash this notification if the PCProcess has changed (e.g. during exec)\n    if (bProc->llproc != process) return;\n\n    BPatch_image *bImage = bProc->getImage();\n    if (!bImage) { // we got an event during process startup\n        return;\n    }\n    \n    BPatch_object *bpobj = bImage->findObject(obj);\n    if (bpobj == NULL) return;\n\n    \n    // For now we use the same callback for load and unload of library....\n    if( dynLibraryCallback ) {\n        dynLibraryCallback(bProc->threads[0], bpobj, false);\n    }\n\n    bImage->removeObject(bpobj);\n}\n\n\n/*\n * BPatch::registerProcess\n *\n * Register a new BPatch_process object with the BPatch library (this function\n * is called only by the constructor for BPatch_process).\n *\n * process\tA pointer to the process to register.\n */ \nvoid BPatch::registerProcess(BPatch_process *process, int pid)\n{\n   if (!pid)\n      pid = process->getPid();\n\n   assert(info->procsByPid.find(pid) == info->procsByPid.end());\n   info->procsByPid[pid] = process;\n}\n\n\n/*\n * BPatch::unRegisterProcess\n *\n * Remove the BPatch_thread associated with a given pid from the list of\n * threads being managed by the library.\n *\n * pid\t\tThe pid of the thread to be removed.\n */\nvoid BPatch::unRegisterProcess(int pid, BPatch_process *proc)\n{\n   // DO NOT CHANGE THE MAP!\n   if (inDestructor) return;\n\n   if (pid == -1 || (info->procsByPid.find(pid) == info->procsByPid.end())) {\n      // Deleting an exited process; search and nuke\n      for (auto iter = info->procsByPid.begin(); iter != info->procsByPid.end(); ++iter) {\n         if (iter->second == proc) {\n            info->procsByPid.erase(iter);\n            return;\n         }\n      }\n      if (pid != -1) {\n         char ebuf[256];\n         sprintf(ebuf, \"%s[%d]: no process %d defined in procsByPid\\n\", FILE__, __LINE__, pid);\n         reportError(BPatchFatal, 68, ebuf);\n         return;\n      }\n   }\n   info->procsByPid.erase(pid);\n}\n\nstatic void buildPath(const char *path, const char **argv,\n                      char * &pathToUse,\n                      char ** &argvToUse) {\n   ifstream file;\n   file.open(path);\n   if (!file.is_open()) return;\n   std::string line;\n   getline(file, line);\n   if (line.compare(0, 2, \"#!\") != 0) {\n      file.close();\n      return;\n   }\n\n   // A shell script, so reinterpret path/argv\n\n   // Modeled after Linux's fs/binfmt_script.c\n   // #! lines have the interpreter and optionally a single argument,\n   // all separated by spaces and/or tabs.\n\n   size_t pos_start = line.find_first_not_of(\" \\t\", 2);\n   if (pos_start == std::string::npos) {\n      file.close();\n      return;\n   }\n   size_t pos_end = line.find_first_of(\" \\t\", pos_start);\n   std::string interp = line.substr(pos_start, pos_end - pos_start);\n   pathToUse = strdup(interp.c_str());\n\n   std::string interp_arg;\n   pos_start = line.find_first_not_of(\" \\t\", pos_end);\n   if (pos_start != std::string::npos) {\n      // The argument goes all the way to the last non-space/tab,\n      // even if there are spaces/tabs in the middle somewhere.\n      pos_end = line.find_last_not_of(\" \\t\") + 1;\n      interp_arg = line.substr(pos_start, pos_end - pos_start);\n   }\n\n   // Count the old and new argc values\n   int argc = 0;\n   while(argv[argc] != NULL) {\n      argc++;\n   }\n   int argcToUse = argc + 1;\n   if (!interp_arg.empty()) {\n      argcToUse++;\n   }\n   argvToUse = (char **) malloc((argcToUse+1) * sizeof(char *));\n\n   // The interpreter takes the new argv[0]\n   int argi = 0;\n   argvToUse[argi++] = strdup(pathToUse);\n\n   // If there's an interpreter argument, that's the new argv[1]\n   if (!interp_arg.empty()) {\n      argvToUse[argi++] = strdup(interp_arg.c_str());\n   }\n\n   // Then comes path, *replacing* the old argv[0],\n   // and the old argv[1..] are filled in for the rest\n   argvToUse[argi++] = strdup(path);\n   for (int tmp = 1; tmp < argc; ++tmp) {\n      argvToUse[argi++] = strdup(argv[tmp]);\n   }\n   argvToUse[argcToUse] = NULL;\n   file.close();\n}\n\n/*\n * BPatch::processCreate\n *\n * Create a process and return a BPatch_process representing it.\n * Returns NULL upon failure.\n *\n * path\t\tThe pathname of the executable for the new process.\n * argv\t\tA list of the arguments for the new process, terminated by a\n *\t\tNULL.\n * envp\t\tA list of values that make up the environment for the new\n *\t\tprocess, terminated by a NULL.  If envp is NULL, the new\n *\t\tnew process will inherit the environemnt of the parent.\n * stdin_fd\tfile descriptor to use for stdin for the application\n * stdout_fd\tfile descriptor to use for stdout for the application\n * stderr_fd\tfile descriptor to use for stderr for the application\n\n */\nBPatch_process *BPatch::processCreate(const char *path, const char *argv[], \n                                         const char **envp, int stdin_fd, \n                                         int stdout_fd, int stderr_fd,\n                                         BPatch_hybridMode mode)\n{\n   clearError();\n\n    if (!OS_isConnected()) {\n        reportError(BPatchFatal, 68, \"Attempted to create process before connected to target server\\n\");\n        return NULL;\n    }\n\n   if ( path == NULL ) { return NULL; }\n\n#if !defined (os_windows)\n   //  This might be ok on windows...  not 100% sure and it takes\n   //  to long to build for the moment.\n\n   //  just a sanity check for the exitence of <path>\n   struct stat statbuf;\n   if (-1 == stat(path, &statbuf)) {\n      char ebuf[2048];\n      sprintf(ebuf, \"createProcess(%s,...):  file does not exist\\n\", path);\n      reportError(BPatchFatal, 68, ebuf);\n      return NULL;\n   }\n\n   //  and ensure its a regular file:\n   if (!S_ISREG(statbuf.st_mode)) {\n      char ebuf[2048];\n      sprintf(ebuf, \"createProcess(%s,...):  not a regular file \\n\", path);\n      reportError(BPatchFatal, 68, ebuf);\n      return NULL;\n   }\n\n#if !defined(os_vxworks) // Not necessary for VxWorks modules\n\n   //  and ensure its executable (does not check permissions):\n   if (! ( (statbuf.st_mode & S_IXUSR)\n            || (statbuf.st_mode & S_IXGRP)\n            || (statbuf.st_mode & S_IXOTH) )) {\n      char ebuf[2048];\n      sprintf(ebuf, \"createProcess(%s,...):  not an executable  \\n\", path);\n      reportError(BPatchFatal, 68, ebuf);\n      return NULL;\n   }\n\n#endif // !VxWorks\n#endif // !Windows\n\n   // User request: work on scripts by creating the interpreter instead\n   char *pathToUse = NULL;\n   char **argvToUse = NULL;\n\n   buildPath(path, argv, pathToUse, argvToUse);\n\n   BPatch_process *ret = \n      new BPatch_process((pathToUse ? pathToUse : path), \n                         (argvToUse ? (const_cast<const char **>(argvToUse)) : argv), \n                         mode, envp, stdin_fd,stdout_fd,stderr_fd);\n   \n   if (pathToUse) free(pathToUse);\n   if (argvToUse) {\n\n      int tmp = 0;\n      while(argvToUse[tmp] != NULL) {\n         free(argvToUse[tmp]);\n         tmp++;\n      }\n      free(argvToUse);\n   }\n\n   if (!ret->llproc \n         ||  !ret->llproc->isStopped()\n         ||  !ret->llproc->isBootstrapped()) {\n      delete ret;\n      reportError(BPatchFatal, 68, \"create process failed bootstrap\");\n      return NULL;\n   }\n\n   ret->triggerInitialThreadEvents();\n\n   if (ret->lowlevel_process()->isExploratoryModeOn()) {\n       if (!ret->getHybridAnalysis()->init()) {\n           delete ret;\n           reportError(BPatchFatal, 68, \"create process failed defensive instrumentation\");\n           return NULL;\n       }\n   }\n\n   return ret;\n}\n\n\n/*\n * BPatch::processAttach\n *\n * Attach to a running process and return a BPatch_thread representing it.\n * Returns NULL upon failure.\n *\n * path\t\tThe pathname of the executable for the process.\n * pid\t\tThe id of the process to attach to.\n */\nBPatch_process *BPatch::processAttach\n(const char *path, int pid, BPatch_hybridMode mode)\n{\n   clearError();\n\n    if (!OS_isConnected()) {\n        reportError(BPatchFatal, 68, \"Error: Attempted to attach to process before connected to target server.\");\n        return NULL;\n    }\n\n    if (info->procsByPid.find(pid) != info->procsByPid.end()) {\n      char msg[256];\n      sprintf(msg, \"attachProcess failed.  Dyninst is already attached to %d.\",\n              pid);\n      reportError(BPatchWarning, 26, msg);      \n      return NULL;\n   }\n\n   BPatch_process *ret = new BPatch_process(path, pid, mode);\n\n   if (!ret->llproc ||\n       !ret->llproc->isStopped() ||\n       !ret->llproc->isBootstrapped()) {\n       char msg[256];\n       sprintf(msg,\"attachProcess failed: process %d may now be killed!\",pid);\n       reportError(BPatchWarning, 26, msg);\n\t   \n\t   delete ret;\n       return NULL;\n   }\n\n   ret->triggerInitialThreadEvents();\n\n   if (ret->lowlevel_process()->isExploratoryModeOn()) {\n       ret->getHybridAnalysis()->init();\n   }\n\n   return ret;\n}\n\nstatic bool recursiveEventHandling = false;\n\n/*\n * pollForStatusChange\n *\n * Checks for unreported changes to the status of any child process, and\n * returns true if any are detected.  Returns false otherwise.\n *\n * This function is declared as a friend of BPatch_thread so that it can use\n * the BPatch_thread::getThreadEvent call to check for status changes.\n */\nbool BPatch::pollForStatusChange()\n{\n    // Sanity check: don't allow waiting for events in the callbacks\n    if( recursiveEventHandling ) {\n        BPatch_reportError(BPatchWarning, 0,\n                \"Cannot wait for events in a callback\");\n        return false;\n    }\n\n    proccontrol_printf(\"[%s:%u] Polling for events\\n\", FILE__, __LINE__);\n\n    recursiveEventHandling = true;\n    PCEventMuxer::WaitResult result = PCEventMuxer::wait(false);\n    recursiveEventHandling = false;\n\n    if( result == PCEventMuxer::Error ) {\n        proccontrol_printf(\"[%s:%u] Failed to poll for events\\n\",\n                FILE__, __LINE__);\n        BPatch_reportError(BPatchWarning, 0, \n                \"Failed to handle events and deliver callbacks\");\n        return false;\n    }\n\n\n    if( result == PCEventMuxer::EventsReceived ) {\n        proccontrol_printf(\"[%s:%u] Events received\\n\", FILE__, __LINE__);\n        return true;\n    }\n  \n    proccontrol_printf(\"[%s:%u] No events available\\n\", FILE__, __LINE__);\n    return false;\n}\n\n/*\n * waitForStatusChange\n *\n * Blocks waiting for a change to occur in the running status of a child\n * process.  Returns true upon success, false upon failure.\n */\nbool BPatch::waitForStatusChange() {\n    // Sanity check: don't allow waiting for events in the callbacks\n    if( recursiveEventHandling ) {\n        BPatch_reportError(BPatchWarning, 0,\n                \"Cannot wait for events in a callback\");\n        return false;\n    }\n\n    // Sanity check: make sure there are processes running that could\n    // cause events to occur, otherwise the user will be waiting indefinitely\n    bool processRunning = false;\n    for(auto i = info->procsByPid.begin(); i != info->procsByPid.end(); ++i) \n    {\n       if( !i->second->isStopped() &&\n\t   !i->second->isTerminated()) {\n          processRunning = true;\n          break;\n       }\n    }\n\n    if( !processRunning ) {\n        BPatch_reportError(BPatchWarning, 0,\n                \"No processes running, not waiting for events\");\n\t\treturn false;\n    }\n\n    proccontrol_printf(\"%s:[%d] Waiting for events\\n\", FILE__, __LINE__);\n\n    recursiveEventHandling = true;\n    PCEventMuxer::WaitResult result = PCEventMuxer::wait(true);\n    recursiveEventHandling = false;\n\n    if( result == PCEventMuxer::Error ) {\n        proccontrol_printf(\"%s:[%d] Failed to wait for events\\n\",\n                      FILE__, __LINE__);\n        BPatch_reportError(BPatchWarning, 0,\n\t\t\t\t\t\t\t\"Failed to handle events and deliver callbacks\");\n\t\treturn false;\n    }\n\n\n    if( result == PCEventMuxer::EventsReceived ) {\n        proccontrol_printf(\"%s:[%d] Events received in waitForStatusChange\\n\", FILE__, __LINE__);\n        return true;\n    }\n    else {\n        proccontrol_printf(\"%s:[%d] No events received in waitForStatusChange\\n\", FILE__, __LINE__);\n        return true;\n    }\n    //  we waited for a change, but didn't get it\n    proccontrol_printf(\"%s[%d]:  Error in status change reporting\\n\", FILE__, __LINE__);\n\treturn false;\n}\n\n/*\n * createEnum\n *\n * This function is a wrapper for the BPatch_type constructors for API/User\n * created types.\n *\n * It returns a pointer to a BPatch_type that was added to the APITypes\n * collection.\n */\nBPatch_type * BPatch::createEnum( const char * name, \n\t\t\t\t     BPatch_Vector<char *> &elementNames,\n\t\t\t\t     BPatch_Vector<int> &elementIds)\n{\n    if (elementNames.size() != elementIds.size()) {\n      return NULL;\n    }\n    string typeName = name;\n    dyn_c_vector<pair<string, int> *>elements;\n    for (unsigned int i=0; i < elementNames.size(); i++) \n        elements.push_back(new pair<string, int>(elementNames[i], elementIds[i]));\n    \n    boost::shared_ptr<Type> typ(typeEnum::create( typeName, elements));\n    if (!typ) return NULL;\n    \n    BPatch_type *newType = new BPatch_type(typ);\n    if (!newType) return NULL;\n    \n    APITypes->addType(newType);\n\n    return(newType);\n}\n\n\n/*\n * createEnum\n *\n * This function is a wrapper for the BPatch_type constructors for API/User\n * created types.  The user has left element id specification to us\n *\n * It returns a pointer to a BPatch_type that was added to the APITypes\n * collection.\n */\nBPatch_type * BPatch::createEnum( const char * name, \n\t\t\t\t        BPatch_Vector<char *> &elementNames)\n{\n    string typeName = name;\n    dyn_c_vector<pair<string, int> *>elements;\n    for (unsigned int i=0; i < elementNames.size(); i++) \n        elements.push_back(new pair<string, int>(elementNames[i], i));\n    \n    boost::shared_ptr<Type> typ(typeEnum::create( typeName, elements));\n    if (!typ) return NULL;\n    \n    BPatch_type *newType = new BPatch_type(typ);\n    if (!newType) return NULL;\n    \n    APITypes->addType(newType);\n\n    return(newType);\n}\n\n/*\n * createStructs\n *\n * This function is a wrapper for the BPatch_type constructors for API/User\n * created types.\n *\n * It returns a pointer to a BPatch_type that was added to the APITypes\n * collection.\n */\n\nBPatch_type * BPatch::createStruct( const char * name,\n\t\t\t\t       BPatch_Vector<char *> &fieldNames,\n\t\t\t\t       BPatch_Vector<BPatch_type *> &fieldTypes)\n{\n   unsigned int i;\n   \n   if (fieldNames.size() != fieldTypes.size()) {\n      return NULL;\n   }\n   \n   string typeName = name;\n   dyn_c_vector<pair<string, boost::shared_ptr<Type> > *> fields;\n   for(i=0; i<fieldNames.size(); i++)\n   {\n      if(!fieldTypes[i])\n         return NULL;\n      fields.push_back(new pair<string, boost::shared_ptr<Type>>(fieldNames[i], fieldTypes[i]->getSymtabType(Type::share)));\n   }\t\n   \n   boost::shared_ptr<Type> typ(typeStruct::create(typeName, fields));\n   if (!typ) return NULL;\n   \n   BPatch_type *newType = new BPatch_type(typ);\n   if (!newType) return NULL;\n   \n   APITypes->addType(newType);\n   \n   return(newType);\n}\n\n/*\n * createUnions\n *\n * This function is a wrapper for the BPatch_type constructors for API/User\n * created types.\n *\n * It returns a pointer to a BPatch_type that was added to the APITypes\n * collection.\n */\n\nBPatch_type * BPatch::createUnion( const char * name, \n\t\t\t\t      BPatch_Vector<char *> &fieldNames,\n\t\t\t\t      BPatch_Vector<BPatch_type *> &fieldTypes)\n{\n    unsigned int i;\n    \n    if (fieldNames.size() != fieldTypes.size()) {\n      return NULL;\n    }\n\n    string typeName = name;\n    dyn_c_vector<pair<string, boost::shared_ptr<Type> > *> fields;\n    for(i=0; i<fieldNames.size(); i++)\n    {\n        if(!fieldTypes[i])\n\t    return NULL;\n        fields.push_back(new pair<string, boost::shared_ptr<Type> > (fieldNames[i], fieldTypes[i]->getSymtabType(Type::share)));\n    }\t\n    \n    boost::shared_ptr<Type> typ(typeUnion::create(typeName, fields));\n    if (!typ) return NULL;\n    \n    BPatch_type *newType = new BPatch_type(typ);\n    if (!newType) return NULL;\n\n    APITypes->addType(newType);\n\n    return(newType);\n}    \n\n/*\n * createArray for Arrays and SymTypeRanges\n *\n * This function is a wrapper for the BPatch_type constructors for API/User\n * created types.\n *\n * It returns a pointer to a BPatch_type that was added to the APITypes\n * collection.\n */\nBPatch_type * BPatch::createArray( const char * name, BPatch_type * ptr,\n\t\t\t\t      unsigned int low, unsigned int hi)\n{\n\n    BPatch_type * newType;\n    if (!ptr) \n        return NULL;\n        \n    string typeName = name;\n    boost::shared_ptr<Type> typ(typeArray::create(typeName, ptr->getSymtabType(Type::share), low, hi));\n    if (!typ) return NULL;\n    \n    newType = new BPatch_type(typ);\n    if (!newType) return NULL;\n\n    APITypes->addType(newType);\n    return newType;\n}\n\n/*\n * createPointer for BPatch_pointers\n *\n * This function is a wrapper for the BPatch_type constructors for API/User\n * created types.\n *\n * It returns a pointer to a BPatch_type that was added to the APITypes\n * collection.\n */\nBPatch_type * BPatch::createPointer(const char * name, BPatch_type * ptr,\n                                       int /*size*/)\n{\n    BPatch_type * newType;\n    if(!ptr)\n        return NULL;\n    \n    string typeName = name;\n    boost::shared_ptr<Type> typ(typePointer::create(typeName, ptr->getSymtabType(Type::share)));\n    if (!typ) return NULL;\n    \n    newType = new BPatch_type(typ);\n    if (!newType) return NULL;\n\n    APITypes->addType(newType);\n    return newType;\n}\n\n/*\n * createScalar for scalars with a size and no range\n *\n * This function is a wrapper for the BPatch_type constructors for API/User\n * created types.\n *\n * It returns a pointer to a BPatch_type that was added to the APITypes\n * collection.\n */\n\nBPatch_type * BPatch::createScalar( const char * name, int size)\n{\n    BPatch_type * newType;\n    \n    string typeName = name;\n    boost::shared_ptr<Type> typ(typeScalar::create(typeName, size));\n    if (!typ) return NULL;\n    \n    newType = new BPatch_type(typ);\n    if (!newType) return NULL;\n\n    APITypes->addType(newType);\n    return newType;\n}\n\n/*\n * createType for typedefs\n *\n * This function is a wrapper for the BPatch_type constructors for API/User\n * created types.\n *\n * It returns a pointer to a BPatch_type that was added to the APITypes\n * collection.\n */\nBPatch_type * BPatch::createTypedef( const char * name, BPatch_type * ptr)\n{\n    BPatch_type * newType;\n    if(!ptr)\n        return NULL;\n    \n    string typeName = name;\n    boost::shared_ptr<Type> typ(typeTypedef::create(typeName, ptr->getSymtabType(Type::share)));\n    if (!typ) return NULL;\n    \n    newType = new BPatch_type(typ);\n    if (!newType) return NULL;\n\n    APITypes->addType(newType);\n    return newType;\n}\n\nbool BPatch::waitUntilStopped(BPatch_thread *appThread){\n\n   bool ret = false;\n\n   while (1) {\n     if (!appThread->getProcess()->isStopped() && !appThread->getProcess()->isTerminated()) {\n       this->waitForStatusChange();\n     }\n     else {\n       break;\n     }\n   }\n\n   if (!appThread->getProcess()->isStopped())\n\t{\n\t\tcerr << \"ERROR : process did not signal mutator via stop\"\n\t\t     << endl;\n\t\tret = false;\n \t\tgoto done;\n\t}\n#if defined(os_windows)\n\telse if((appThread->getProcess()->stopSignal() != EXCEPTION_BREAKPOINT) && \n\t\t(appThread->getProcess()->stopSignal() != -1))\n\t{\n\t\tcerr << \"ERROR : process stopped on signal different\"\n\t\t     << \" than SIGTRAP\" << endl;\n\t\tret =  false;\n \t\tgoto done;\n\t}\n#else\n\telse if ((appThread->getProcess()->stopSignal() != SIGSTOP) &&\n\t\t (appThread->getProcess()->stopSignal() != SIGHUP)) {\n\t\tcerr << \"ERROR :  process stopped on signal \"\n\t\t     << \"different than SIGSTOP\" << endl;\n\t\tret =  false;\n \t\tgoto done;\n\t}\n#endif\n\n  done:\n  return ret;\n}\n\nBPatch_stats &BPatch::getBPatchStatistics()\n{\n  updateStats();\n  return stats;\n}\n//  updateStats() -- an internal function called before returning\n//  statistics buffer to caller of BPatch_getStatistics(),\n//  -- just copies global variable statistics counters into \n//  the buffer which is returned to the user.\nvoid BPatch::updateStats() \n{\n  stats.pointsUsed = pointsUsed.value();\n  stats.totalMiniTramps = totalMiniTramps.value();\n  stats.trampBytes = trampBytes.value();\n  stats.ptraceOtherOps = ptraceOtherOps.value();\n  stats.ptraceOps = ptraceOps.value();\n  stats.ptraceBytes = ptraceBytes.value();\n  stats.insnGenerated = insnGenerated.value();\n}\n\nbool BPatch::registerThreadEventCallback(BPatch_asyncEventType type,\n                                            BPatchAsyncThreadEventCallback func)\n{\n    switch(type) {\n        case BPatch_threadCreateEvent:\n            threadCreateCallback = func;\n            break;\n        case BPatch_threadDestroyEvent:\n            threadDestroyCallback = func;\n            break;\n        default:\n            bpwarn(\"Cannot register callback for non-thread event type %s\",\n                    asyncEventType2Str(type));\n            return false;\n    }\n\n    return true;\n}\n\nbool BPatch::removeThreadEventCallback(BPatch_asyncEventType type,\n                                          BPatchAsyncThreadEventCallback cb)\n{\n    bool result = false;\n    switch(type) {\n        case BPatch_threadCreateEvent:\n            if( cb == threadCreateCallback ) {\n                threadCreateCallback = NULL;\n                result = true;\n            }\n            break;\n        case BPatch_threadDestroyEvent:\n            if( cb == threadDestroyCallback ) {\n                threadDestroyCallback = NULL;\n                result = true;\n            }\n            break;\n        default:\n            bpwarn(\"Cannot remove callback for non-thread event type %s\",\n                    asyncEventType2Str(type));\n            return false;\n    }\n\n    return result;\n}\n\nbool BPatch::registerDynamicCallCallback(BPatchDynamicCallSiteCallback func)\n{\n    dynamicCallSiteCallback = func;\n    return true;\n}\n\nbool BPatch::removeDynamicCallCallback(BPatchDynamicCallSiteCallback func)\n{\n    if( dynamicCallSiteCallback == func ) {\n        dynamicCallSiteCallback = func;\n        return true;\n    }\n\n    return false;\n}\n\nbool BPatch::registerUserEventCallback(BPatchUserEventCallback func)\n{\n    userEventCallbacks.push_back(func);\n    return true;\n}\n\nbool BPatch::removeUserEventCallback(BPatchUserEventCallback cb)\n{\n    bool result = false;\n    BPatch_Vector<BPatchUserEventCallback> userCallbacks;\n    for(unsigned int i = 0; i < userEventCallbacks.size(); ++i) {\n        if( cb != userEventCallbacks[i] ) {\n            userCallbacks.push_back(userEventCallbacks[i]);\n        }else{\n            result = true;\n        }\n    }\n\n    userEventCallbacks = userCallbacks;\n\n    return result;\n}\n\nbool BPatch::registerCodeDiscoveryCallback(BPatchCodeDiscoveryCallback cb)\n{\n    std::vector<BPatch_process*> *procs = getProcesses();\n    for(unsigned i =0; i < procs->size(); i++) {\n        HybridAnalysis *hybrid = (*procs)[i]->getHybridAnalysis();\n        hybrid->registerCodeDiscoveryCallback(cb);\n    }\n    return true;\n}\n\nbool BPatch::removeCodeDiscoveryCallback(BPatchCodeDiscoveryCallback)\n{\n    std::vector<BPatch_process*> *procs = getProcesses();\n    for(unsigned i =0; i < procs->size(); i++) {\n        HybridAnalysis *hybrid = (*procs)[i]->getHybridAnalysis();\n        hybrid->removeCodeDiscoveryCallback();\n    }\n    return true;\n}\n\nbool BPatch::registerSignalHandlerCallback(BPatchSignalHandlerCallback bpatchCB, \n                                           std::set<long> &signums)\n{\n    signalHandlerCallback = HybridAnalysis::getSignalHandlerCB();\n    callbackSignals = signums;\n\n    std::vector<BPatch_process*> *procs = getProcesses();\n    for(unsigned i=0; i < procs->size(); i++) {\n        HybridAnalysis *hybrid = (*procs)[i]->getHybridAnalysis();\n        hybrid->registerSignalHandlerCallback(bpatchCB);\n    }\n    return true;\n}\n\nbool BPatch::registerSignalHandlerCallback(BPatchSignalHandlerCallback bpatchCB, \n                                           BPatch_Set<long> *signums) {\n   // This is unfortunate, but our method above takes a std::set<long>,\n   // not a std::set<long, comparison<long>>\n   \n   std::set<long> tmp;\n   if (NULL == signums || signums->empty())\n\t   tmp = std::set<long>();\n   else\n       std::copy(signums->begin(), signums->end(), std::inserter(tmp, tmp.end()));\n   \n   return registerSignalHandlerCallback(bpatchCB, tmp);\n}\n\nbool BPatch::removeSignalHandlerCallback(BPatchSignalHandlerCallback)\n{\n    signalHandlerCallback = NULL;\n    callbackSignals.clear();\n\n    std::vector<BPatch_process*> *procs = getProcesses();\n    for(unsigned i=0; i < procs->size(); i++) {\n        HybridAnalysis *hybrid = (*procs)[i]->getHybridAnalysis();\n        hybrid->removeSignalHandlerCallback();\n    }\n    return true;\n}\n\nbool BPatch::registerCodeOverwriteCallbacks\n    (BPatchCodeOverwriteBeginCallback cbBegin,\n     BPatchCodeOverwriteEndCallback cbEnd)\n{\n    codeOverwriteCallback = HybridAnalysisOW::getCodeOverwriteCB();\n\n    std::vector<BPatch_process*> *procs = getProcesses();\n    for(unsigned i=0; i < procs->size(); i++) {\n        HybridAnalysis *hybrid = (*procs)[i]->getHybridAnalysis();\n        hybrid->hybridOW()->registerCodeOverwriteCallbacks(cbBegin,cbEnd);\n    }\n    return true;\n}\n\nvoid BPatch::continueIfExists(int pid) \n{\n    BPatch_process *proc = getProcessByPid(pid);\n    if (!proc) return;\n\n    proc->continueExecution();\n}\n\n\nint BPatch::getNotificationFD() {\n#if !defined(os_windows)\n   return Dyninst::ProcControlAPI::evNotify()->getFD(); \n#else\n    return -1;\n#endif\n}\n\n/* If true, we return just filenames when the user asks for line info\n   otherwise, we return filename plus path information. */\nvoid BPatch::truncateLineInfoFilenames(bool newval) {\n   mapped_module::truncateLineFilenames = newval;\n}\n\nvoid BPatch::getBPatchVersion(int &major, int &minor, int &subminor) \n{\n   major = DYNINST_MAJOR;\n   minor = DYNINST_MINOR;\n   subminor = DYNINST_SUBMINOR;\n}\n\nBPatch_binaryEdit *BPatch::openBinary(const char *path, bool openDependencies /* = false */) {\n   BPatch_binaryEdit *editor = new BPatch_binaryEdit(path, openDependencies);\n   if (!editor)\n      return NULL;\n   if (editor->creation_error) {\n      delete editor;\n      return NULL;\n   }\n   return editor;\n}\n\nvoid BPatch::setInstrStackFrames(bool r)\n{\n   instrFrames = r;\n}\n\nbool BPatch::getInstrStackFrames()\n{\n   return instrFrames;\n}\n\nbool BPatch::isConnected()\n{\n    return OS_isConnected();\n}\n\n// -----------------------------------------------------------\n// Undocumented public remote debugging interface.\n// See comments in BPatch.h about the future of these methods.\nbool BPatch::remoteConnect(BPatch_remoteHost &remote)\n{\n    if (remote.type >= BPATCH_REMOTE_DEBUG_END) {\n        fprintf(stderr, \"Unknown remote debugging protocol %d\\n\", remote.type);\n        return false;\n    }\n\n    return OS_connect(remote);\n}\n\nbool BPatch::getPidList(BPatch_remoteHost &remote, BPatch_Vector<unsigned int> &pidlist)\n{\n    if (remote.type >= BPATCH_REMOTE_DEBUG_END) {\n        fprintf(stderr, \"Unknown remote debugging protocol %d\\n\", remote.type);\n        return false;\n    }\n\n    return OS_getPidList(remote, pidlist);\n}\n\nbool BPatch::getPidInfo(BPatch_remoteHost &remote, unsigned int pid,\n                           std::string &pidInfo)\n{\n    if (remote.type >= BPATCH_REMOTE_DEBUG_END) {\n        fprintf(stderr, \"Unknown remote debugging protocol %d\\n\", remote.type);\n        return false;\n    }\n\n    return OS_getPidInfo(remote, pid, pidInfo);\n}\n\nbool BPatch::remoteDisconnect(BPatch_remoteHost &remote)\n{\n    if (remote.type >= BPATCH_REMOTE_DEBUG_END) {\n        fprintf(stderr, \"Unknown remote debugging protocol %d\\n\", remote.type);\n        return false;\n    }\n\n    return OS_disconnect(remote);\n}\n// -----------------------------------------------------------\n\nvoid BPatch::addNonReturningFunc(std::string name)\n{\n  Dyninst::ParseAPI::SymtabCodeSource::addNonReturning(name);\n}\n\nint BPatch_libInfo::getStopThreadCallbackID(Address cb) {\n   auto iter = stopThreadCallbacks_.find(cb);\n   if (iter != stopThreadCallbacks_.end()) {\n      return iter->second;\n   }\n\n    int cb_id = ++stopThreadIDCounter_;\n    stopThreadCallbacks_[cb] = cb_id;\n    return cb_id;\n}\n\nbool BPatch_libInfo::registerMonitoredPoint(BPatch_point *point) {\n   if (monitoredPoints_.find((Address) point->getAddress()) != monitoredPoints_.end())\n      return false;\n\n    monitoredPoints_[(Address)point->getAddress()] = point;\n\n    proccontrol_printf(\"%s[%d]: monitoring address 0x%lx for dynamic calls\\n\",\n            FILE__, __LINE__, (unsigned long)point->getAddress());\n\n    return true;\n}\n\nBPatch_point *BPatch_libInfo::getMonitoredPoint(Address addr) {\n   auto iter = monitoredPoints_.find(addr);\n   if (iter == monitoredPoints_.end()) return NULL;\n   return iter->second;\n}\n\n// Functions for accessing stop thread callback state\nvoid BPatch::registerStopThreadCallback(BPatchStopThreadCallback stopCB) {\n    stopThreadCallbacks.push_back(stopCB);\n}\n\nint BPatch::getStopThreadCallbackID(BPatchStopThreadCallback stopCB) {\n    return info->getStopThreadCallbackID((Address)stopCB);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI/src/mapped_object.C": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n * \n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n * \n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n// $Id: mapped_object.C,v 1.39 2008/09/03 06:08:44 jaw Exp $\n\n#include <string>\n#include <cctype>\n#include <algorithm>\n\n#include \"dyninstAPI/src/mapped_object.h\"\n#include \"dyninstAPI/src/mapped_module.h\"\n#include \"dyninstAPI/src/image.h\"\n#include \"dyninstAPI/src/function.h\"\n#include \"dyninstAPI/h/BPatch_function.h\"\n#include \"dyninstAPI/src/debug.h\"\n#include \"dyninstAPI/src/addressSpace.h\"\n#include \"dyninstAPI/src/dynProcess.h\"\n#include \"symtabAPI/h/Symtab.h\"\n#include \"InstructionDecoder.h\"\n#include \"Parsing.h\"\n#include \"instPoint.h\"\n#include \"MemoryEmulator/memEmulator.h\"\n#include <boost/tuple/tuple.hpp>\n\n#include \"PatchCFG.h\"\n#include \"PCProcess.h\"\n\nusing namespace Dyninst;\nusing namespace Dyninst::ParseAPI;\nusing namespace Dyninst::ProcControlAPI;\n#if defined(os_windows)\n#define FS_FIELD_SEPERATOR '\\\\'\n#else\n#define FS_FIELD_SEPERATOR '/'\n#endif\n// Whee hasher...\n\n\n// triggered when parsing needs to check if the underlying data has changed\nbool codeBytesUpdateCB(void *objCB, Address targ)\n{\n    mapped_object *obj = (mapped_object*) objCB;\n    return obj->updateCodeBytesIfNeeded(targ);\n}\n\nmapped_object::mapped_object(fileDescriptor fileDesc,\n      image *img,\n      AddressSpace *proc,\n      BPatch_hybridMode mode):\n  DynObject(img->codeObject(), proc, fileDesc.code()),\n  desc_(fileDesc),\n  fullName_(img->getObject()->file()),\n  dirty_(false),\n  dirtyCalled_(false),\n  image_(img),\n  dlopenUsed(false),\n  proc_(proc),\n  analyzed_(false),\n  analysisMode_(mode),\n  pagesUpdated_(true),\n  codeByteUpdates_(0),\n  memEnd_(-1),\n  memoryImg_(false)\n{\n// Set occupied range (needs to be ranges)\n   dataBase_ = fileDesc.data();\n\n#if defined(os_linux)\n   // Handling for non-fPIE\n   if (codeBase_ == image_->imageOffset()) {\n      // Normal, non-PIE executable, so set the codeBase to 0. \n      codeBase_ = 0;\n      dataBase_ = 0;\n   }\n#endif\n   \n   startup_printf(\"[%s:%d] Creating new mapped_object %s/%s\\n\",\n                  FILE__, __LINE__, fullName_.c_str(), getFileDesc().member().c_str());\n   startup_printf(\"[%s:%d] \\tcodeBase 0x%lx, codeOffset 0x%lx, size %d\\n\",\n                  FILE__, __LINE__, codeBase_, image_->imageOffset(), image_->imageLength());\n   startup_printf(\"[%s:%d] \\tdataBase 0x%lx, dataOffset 0x%lx, size %d\\n\",\n                  FILE__, __LINE__, dataBase_, image_->dataOffset(), image_->dataLength());\n   startup_printf(\"[%s:%d] \\tfileDescriptor: code at 0x%lx, data 0x%lx\\n\",\n                  FILE__, __LINE__, fileDesc.code(), fileDesc.data());\n   startup_printf(\"[%s:%d] \\tCode: 0x%lx to 0x%lx\\n\",\n                  FILE__, __LINE__, codeAbs(), codeAbs() + imageSize());\n   startup_printf(\"[%s:%d] \\tData: 0x%lx to 0x%lx\\n\",\n                  FILE__, __LINE__, dataAbs(), dataAbs() + dataSize());\n   image_->getObject()->rebase(codeBase_);\n\n\n   // Sets \"fileName_\"\n   set_short_name();\n\n   if (analysisMode_ != BPatch_normalMode && fileName() == \"dyninstAPI_RT.dll\") {\n       startup_cerr << \"Warning, running dyninstAPI_RT.dll in normal mode.\\n\";\n       analysisMode_ = BPatch_normalMode;\n   }\n   tocBase = 0;\n}\n\nmapped_object *mapped_object::createMappedObject(Library::const_ptr lib,\n                                                 AddressSpace *p,\n                                                 BPatch_hybridMode analysisMode,\n                                                 bool parseGaps) {\n   fileDescriptor desc(lib->getAbsoluteName(),\n                       lib->getLoadAddress(),\n                       p->usesDataLoadAddress() ? lib->getDataLoadAddress() : lib->getLoadAddress(),\n                       lib->isSharedLib());\n   return createMappedObject(desc, p, analysisMode, parseGaps);\n}\n   \n\nmapped_object *mapped_object::createMappedObject(fileDescriptor &desc,\n                                                 AddressSpace *p,\n                                                 BPatch_hybridMode analysisMode,\n                                                 bool parseGaps) {\n   if (!p) return NULL;\n   if ( BPatch_defensiveMode == analysisMode ) {\n       // parsing in the gaps in defensive mode is a bad idea because\n       // we mark all binary regions as possible code-containing areas\n       parseGaps = false;\n   }\n   assert(desc.file() != \"\");\n   startup_printf(\"%s[%d]:  about to parseImage\\n\", FILE__, __LINE__);\n   startup_printf(\"%s[%d]: name %s, codeBase 0x%lx, dataBase 0x%lx\\n\",\n                  FILE__, __LINE__, desc.file().c_str(), desc.code(), desc.data());\n   image *img = image::parseImage( desc, analysisMode, parseGaps);\n   if (!img)  {\n      startup_printf(\"%s[%d]:  failed to parseImage\\n\", FILE__, __LINE__);\n      return NULL;\n   }\n\n\n   if (img->isDyninstRTLib()) {\n       parseGaps = false;\n   }\n#if defined(os_linux) && defined(arch_x86_64)\n   //Our x86_64 is actually reporting negative load addresses.  Go fig.\n   // On Linux/x86_64 with 32-bit mutatees this causes problems because we\n   // treat the load address as a unsigned 64 bit integer, and things don't\n   // correctly wrap.\n   //\n   // We'll detect this by noticing that the dynamic entry doesn't match up\n   // and then correct.\n   if (desc.dynamic() &&\n       p->getAddressWidth() == 4 &&\n       img->getObject()->getElfDynamicOffset() + desc.code() != desc.dynamic()) {\n      Address new_load_addr;\n      new_load_addr = desc.dynamic() - img->getObject()->getElfDynamicOffset();\n      startup_printf(\"[%s:%u] - Incorrect binary load address %lx, changing \"\n              \"to %lx\\n\", FILE__, __LINE__, (unsigned long) desc.code(),\n              (unsigned long) new_load_addr);\n      desc.setCode(new_load_addr);\n      desc.setData(new_load_addr);\n   }\n#endif\n\n   // Adds exported functions and variables..\n   startup_printf(\"%s[%d]:  creating mapped object\\n\", FILE__, __LINE__);\n   mapped_object *obj = new mapped_object(desc, img, p, analysisMode);\n   if (img->codeObject()->cs()->getArch() == Arch_ppc64) { \n  const CodeObject::funclist & allFuncs = img->codeObject()->funcs();\n  CodeObject::funclist::const_iterator fit = allFuncs.begin();\n  for( ; fit != allFuncs.end(); ++fit) {\n      parse_func * f = (parse_func*)*fit;\n      if (f->getNoPowerPreambleFunc() != NULL) {\n          func_instance * preambleFunc = obj->findFunction(f);\n          func_instance * noPreambleFunc = obj->findFunction(f->getNoPowerPreambleFunc());\n          preambleFunc->setNoPowerPreambleFunc(noPreambleFunc);\n          noPreambleFunc->setPowerPreambleFunc(preambleFunc);\n          if (obj->getTOCBaseAddress() == 0 && f->getPowerTOCBaseAddress() > 0) {\n              obj->setTOCBaseAddress(f->getPowerTOCBaseAddress());\n          }\n      }\n  }\n   }\n   if (BPatch_defensiveMode == analysisMode) {\n       img->register_codeBytesUpdateCB(obj);\n   }\n   startup_printf(\"%s[%d]:  leaving createMappedObject(%s)\\n\", FILE__, __LINE__, desc.file().c_str());\n\n  return obj;\n}\n\nmapped_object::mapped_object(const mapped_object *s, AddressSpace *child) :\n   codeRange(),\n   DynObject(s, child, s->codeBase_),\n   desc_(s->desc_),\n   fullName_(s->fullName_),\n   fileName_(s->fileName_),\n   dataBase_(s->dataBase_),\n   dirty_(s->dirty_),\n   dirtyCalled_(s->dirtyCalled_),\n   image_(s->image_),\n   dlopenUsed(s->dlopenUsed),\n   proc_(child),\n   analyzed_(s->analyzed_),\n   analysisMode_(s->analysisMode_),\n   pagesUpdated_(true),\n   codeByteUpdates_(0),\n   memEnd_(s->memEnd_),\n   memoryImg_(s->memoryImg_)\n{\n   // Let's do modules\n   for (unsigned k = 0; k < s->everyModule.size(); k++) {\n      // Doesn't copy things like line info. Ah, well.\n      mapped_module *parMod = s->everyModule[k];\n      mapped_module *mod = mapped_module::createMappedModule(this, parMod->pmod());\n      assert(mod);\n      everyModule.push_back(mod);\n   }\n\n   copyCFG(const_cast<mapped_object*>(s));\n\n   for (auto iter = s->everyUniqueVariable.begin();\n        iter != s->everyUniqueVariable.end(); ++iter) {\n      int_variable *parVar = iter->second;\n      assert(parVar->mod());\n      mapped_module *mod = getOrCreateForkedModule(parVar->mod());\n      int_variable *newVar = new int_variable(parVar,\n            mod);\n      addVariable(newVar);\n   }\n\n   assert(BPatch_defensiveMode != analysisMode_);\n\n   image_ = s->image_->clone();\n   tocBase = s->tocBase;\n}\n\n\nmapped_object::~mapped_object()\n{\n   // desc_ is static\n   // fullName_ is static\n   // fileName_ is static\n   // codeBase_ is static\n   // dataBase_ is static\n\n   for (unsigned i = 0; i < everyModule.size(); i++)\n      delete everyModule[i];\n   everyModule.clear();\n\n   for (auto iter = everyUniqueVariable.begin();\n        iter != everyUniqueVariable.end(); ++iter) {\n      delete iter->second;\n   }\n   everyUniqueVariable.clear();\n\n   for (auto fm_iter = allFunctionsByMangledName.begin(); \n        fm_iter != allFunctionsByMangledName.end(); ++fm_iter) {\n      delete fm_iter->second;\n   }\n   allFunctionsByMangledName.clear();\n\n   for (auto fp_iter = allFunctionsByPrettyName.begin(); \n        fp_iter != allFunctionsByPrettyName.end(); ++fp_iter) {\n      delete fp_iter->second;\n   }\n   allFunctionsByPrettyName.clear();\n\n   for (auto vm_iter = allVarsByMangledName.begin(); \n        vm_iter != allVarsByMangledName.end(); ++vm_iter) {\n      delete vm_iter->second;\n   }\n   allVarsByMangledName.clear();\n\n   for (auto vp_iter = allVarsByPrettyName.begin(); \n        vp_iter != allVarsByPrettyName.end(); ++vp_iter) {\n      delete vp_iter->second;\n   }\n   allVarsByPrettyName.clear();\n\n   // codeRangesByAddr_ is static\n    // Remainder are static\n   image::removeImage(image_);\n}\n\nAddress mapped_object::codeAbs() const {\n  return codeBase_ + imageOffset();\n}\n\nAddress mapped_object::dataAbs() const {\n  return dataBase_ + dataOffset();\n}\n\nbool mapped_object::isCode(Address addr) const {\n   Address offset;\n   offset = addr - codeBase();\n\n   return parse_img()->getObject()->isCode(offset);\n}\n\nbool mapped_object::isData(Address addr) const {\n   Address offset;\n   offset = addr - codeBase();\n\n   return parse_img()->getObject()->isData(offset);\n}\n\nbool mapped_object::analyze()\n{\n    if (analyzed_) return true;\n  // Create a process-specific version of the image; all functions and\n  // variables at an absolute address (and modifiable).\n\n  // At some point, we should do better handling of base\n  // addresses. Right now we assume we have one per mapped object; AIX\n  // is a special case with two (one for functions, one for\n  // variables).\n\n  if (!image_) return false;\n\n  image_->analyzeIfNeeded();\n\n  analyzed_ = true;\n\n  // TODO: CLEANUP, shouldn't need this for loop, calling findFunction forces \n  // PatchAPI to create function objects, destroying lazy function creation\n  // We already have exported ones. Force analysis (if needed) and get\n  // the functions we created via analysis.\n  const CodeObject::funclist & allFuncs = parse_img()->getAllFunctions();\n  CodeObject::funclist::const_iterator fit = allFuncs.begin();\n  for( ; fit != allFuncs.end(); ++fit) {\n      parse_func * f = (parse_func*)*fit;\n  // For each function, we want to add our base address\n      if((*fit)->src() != HINT)\n        findFunction(f);\n      \n  }\n\n  // Remember: variables don't.\n  pdvector<image_variable *> unmappedVars = image_->getCreatedVariables();\n  for (unsigned vi = 0; vi < unmappedVars.size(); vi++) {\n      findVariable(unmappedVars[vi]);\n  }\n  return true;\n}\n\nmapped_module *mapped_object::findModule(string m_name, bool wildcard)\n{\n   parsing_printf(\"findModule for %s (substr match %d)\\n\",\n         m_name.c_str(), wildcard);\n   std::string tmp = m_name.c_str();\n   for (unsigned i = 0; i < everyModule.size(); i++) {\n      if (everyModule[i]->fileName() == m_name ||\n            everyModule[i]->fullName() == m_name ||\n            (wildcard &&\n             (wildcardEquiv(tmp, everyModule[i]->fileName()) ||\n              wildcardEquiv(tmp, everyModule[i]->fullName())))) {\n         //parsing_printf(\"... found!\\n\");\n         return everyModule[i];\n      }\n   }\n   // Create a new one IF there's one in the child pd_module\n\n   pdmodule *pdmod = image_->findModule(m_name, wildcard);\n   if (pdmod) {\n      mapped_module *mod = mapped_module::createMappedModule(this,\n            pdmod);\n      everyModule.push_back(mod);\n      //parsing_printf(\"... made new module!\\n\");\n      return mod;\n   }\n   else {\n      //parsing_printf(\"... error, no module found...\\n\");\n      return NULL;\n   }\n}\n\n\nmapped_module *mapped_object::findModule(pdmodule *pdmod)\n{\n   if (!pdmod) {\n      fprintf(stderr, \"%s[%d]:  please call this findModule with nonNULL parameter\\n\", FILE__, __LINE__);\n      return NULL;\n   }\n\n   assert(pdmod);\n\n   if (pdmod->imExec() != parse_img()) {\n      fprintf(stderr, \"%s[%d]: WARNING: lookup for module in wrong mapped object! %p != %p\\n\", FILE__, __LINE__, pdmod->imExec(), parse_img());\n      fprintf(stderr, \"%s[%d]:  \\t\\t %s \\n\", FILE__, __LINE__, parse_img()->name().c_str());\n      fprintf(stderr, \"%s[%d]:  \\t %s != \\n\", FILE__, __LINE__, pdmod->imExec()->name().c_str());\n      return NULL;\n   }\n\n   //parsing_printf(\"findModule for pdmod %s\\n\",\n   //pdmod->fullName().c_str());\n\n   for (unsigned i = 0; i < everyModule.size(); i++) {\n      if (everyModule[i]->pmod() == pdmod) {\n         //parsing_printf(\"... found at index %d\\n\", i);\n         return everyModule[i];\n      }\n   }\n\n   mapped_module *mod = mapped_module::createMappedModule(this,\n         pdmod);\n   if (mod) {\n      //parsing_printf(\"... created new module\\n\");\n      everyModule.push_back(mod);\n      return mod;\n   }\n   else\n      return NULL;\n}\n\n// fill in \"short_name\" data member.  Use last component of \"name\" data\n// member with FS_FIELD_SEPERATOR (\"/\") as field seperator....\nvoid mapped_object::set_short_name() {\n   const char *name_string = fullName_.c_str();\n   const char *ptr = strrchr(name_string, FS_FIELD_SEPERATOR);\n   if (ptr != NULL) {\n      fileName_ = ptr+1;\n   } else {\n      fileName_ = fullName_;\n   }\n}\n\nconst pdvector<func_instance *> *mapped_object::findFuncVectorByPretty(const std::string &funcname)\n{\n   if (funcname.c_str() == 0) return NULL;\n   // First, check the underlying image.\n   const pdvector<parse_func *> *img_funcs = parse_img()->findFuncVectorByPretty(funcname);\n   if (img_funcs == NULL) {\n      return NULL;\n   }\n\n   assert(img_funcs->size());\n   // Fast path:\n   auto iter = allFunctionsByPrettyName.find(funcname);\n   if (iter != allFunctionsByPrettyName.end()) {\n      // Okay, we've pulled in some of the functions before (this can happen as a\n      // side effect of adding functions). But did we get them all?\n      pdvector<func_instance *> *map_funcs = iter->second;\n      if (map_funcs->size() == img_funcs->size()) {\n         // We're allocating at the lower level....\n         delete img_funcs;\n         return map_funcs;\n      }\n   }\n\n   // Slow path: check each img_func, add those we don't already have, and return.\n   for (unsigned i = 0; i < img_funcs->size(); i++) {\n       parse_func *func = (*img_funcs)[i];\n       if (funcs_.find(func) == funcs_.end()) {\n           findFunction(func);\n       }\n       assert(funcs_[func]);\n   }\n   delete img_funcs;\n   return allFunctionsByPrettyName[funcname];\n}\n\nconst pdvector <func_instance *> *mapped_object::findFuncVectorByMangled(const std::string &funcname)\n{\n    if (funcname.c_str() == 0) return NULL;\n\n    // First, check the underlying image.\n    const pdvector<parse_func *> *img_funcs = parse_img()->findFuncVectorByMangled(funcname);\n    if (img_funcs == NULL) {\n       return NULL;\n    }\n\n    assert(img_funcs->size());\n    // Fast path:\n    auto iter = allFunctionsByMangledName.find(funcname);\n    if (iter != allFunctionsByMangledName.end()) {\n        // Okay, we've pulled in some of the functions before (this can happen as a\n        // side effect of adding functions). But did we get them all?\n       pdvector<func_instance *> *map_funcs = iter->second;\n       if (map_funcs->size() == img_funcs->size()) {\n          // We're allocating at the lower level...\n          delete img_funcs;\n          return map_funcs;\n       }\n    }\n    \n    // Slow path: check each img_func, add those we don't already have, and return.\n    for (unsigned i = 0; i < img_funcs->size(); i++) {\n       parse_func *func = (*img_funcs)[i];\n       if (funcs_.find(func) == funcs_.end()) {\n          findFunction(func);\n       }\n       assert(funcs_[func]);\n    }\n    delete img_funcs;\n    return allFunctionsByMangledName[funcname];\n}\n\n\nconst pdvector<int_variable *> *mapped_object::findVarVectorByPretty(const std::string &varname)\n{\n    if (varname.c_str() == 0) return NULL;\n\n    // First, check the underlying image.\n    const pdvector<image_variable *> *img_vars = parse_img()->findVarVectorByPretty(varname);\n    if (img_vars == NULL) return NULL;\n\n    assert(img_vars->size());\n    // Fast path:\n    auto iter = allVarsByPrettyName.find(varname);\n    if (iter != allVarsByPrettyName.end()) {\n       // Okay, we've pulled in some of the variabletions before (this can happen as a\n       // side effect of adding variabletions). But did we get them all?\n       pdvector<int_variable *> *map_variables = iter->second;\n       if (map_variables->size() == img_vars->size()) {\n          delete img_vars;\n          return map_variables;\n       }\n    }\n    \n    // Slow path: check each img_variable, add those we don't already have, and return.\n    for (unsigned i = 0; i < img_vars->size(); i++) {\n        image_variable *var = (*img_vars)[i];\n        auto iter2 = everyUniqueVariable.find(var);\n        if (iter2 == everyUniqueVariable.end()) {\n           findVariable(var);\n        }\n        assert(everyUniqueVariable[var]);\n    }\n    delete img_vars;\n    return allVarsByPrettyName[varname];\n}\n\nconst pdvector <int_variable *> *mapped_object::findVarVectorByMangled(const std::string &varname)\n{\n  if (varname.c_str() == 0) return NULL;\n\n  // First, check the underlying image.\n  const pdvector<image_variable *> *img_vars = parse_img()->findVarVectorByMangled(varname);\n  if (img_vars == NULL) return NULL;\n\n  assert(img_vars->size());\n  // Fast path:\n\n  auto iter = allVarsByMangledName.find(varname);\n  if (iter != allVarsByMangledName.end()) {\n      // Okay, we've pulled in some of the variabletions before (this can happen as a\n      // side effect of adding variables). But did we get them all?\n     pdvector<int_variable *> *map_variables = iter->second;\n      if (map_variables->size() == img_vars->size()) {\n         delete img_vars;\n         return map_variables;\n      }\n  }\n  \n  // Slow path: check each img_variable, add those we don't already have, and return.\n  for (unsigned i = 0; i < img_vars->size(); i++) {\n     image_variable *var = (*img_vars)[i];\n     auto iter2 = everyUniqueVariable.find(var);\n     if (iter2 == everyUniqueVariable.end()) {\n        findVariable(var);\n     }\n     assert(everyUniqueVariable[var]);\n  }\n  delete img_vars;\n  return allVarsByMangledName[varname];\n}\n\n//Returns one variable, doesn't search other mapped_objects.  Use carefully.\nconst int_variable *mapped_object::getVariable(const std::string &varname) {\n    const pdvector<int_variable *> *vars = NULL;\n    vars = findVarVectorByPretty(varname);\n    if (!vars) vars = findVarVectorByMangled(varname);\n    if (vars) {\n        assert(vars->size() > 0);\n        return (*vars)[0];\n    }\n    return NULL;\n}\n\nblock_instance *mapped_object::findBlockByEntry(Address addr)\n{\n    std::set<block_instance *> allBlocks;\n    if (!findBlocksByAddr(addr, allBlocks)) return NULL;\n    for (std::set<block_instance *>::iterator iter = allBlocks.begin();\n        iter != allBlocks.end(); ++iter)\n    {\n        if ((*iter)->start() == addr)\n        {\n           return *iter;\n        }\n    }\n    return NULL;\n}\n\n\nbool mapped_object::findBlocksByAddr(const Address addr, std::set<block_instance *> &blocks)\n{\n    // Quick bounds check...\n    if (addr < codeAbs()) {\n        return false;\n    }\n    if (addr >= (codeAbs() + imageSize())) {\n        return false;\n    }\n\n    // Duck into the image class to see if anything matches\n    set<ParseAPI::Block *> stab;\n    parse_img()->findBlocksByAddr(addr - codeBase(), stab);\n    if (stab.empty()) return false;\n\n    for (set<ParseAPI::Block *>::iterator llb_iter = stab.begin();\n        llb_iter != stab.end(); ++llb_iter)\n    {\n        // For each block b \\in stab\n        //   For each func f \\in b.funcs()\n        //     Let i_f = up_map(f)\n        //       add up_map(b, i_f)\n        std::vector<ParseAPI::Function *> ll_funcs;\n        (*llb_iter)->getFuncs(ll_funcs);\n        for (std::vector<ParseAPI::Function *>::iterator llf_iter = ll_funcs.begin();\n            llf_iter != ll_funcs.end(); ++llf_iter) {\n           block_instance *block = findBlock(*llb_iter);\n           assert(block);\n           blocks.insert(block);\n        }\n    }\n    return !blocks.empty();\n}\n\nbool mapped_object::findFuncsByAddr(const Address addr, std::set<func_instance *> &funcs)\n{\n    bool ret = false;\n    // Quick and dirty implementation\n    std::set<block_instance *> blocks;\n    if (!findBlocksByAddr(addr, blocks)) return false;\n    for (std::set<block_instance *>::iterator iter = blocks.begin();\n         iter != blocks.end(); ++iter) {\n       (*iter)->getFuncs(std::inserter(funcs, funcs.end()));\n       ret = true;\n    }\n    return ret;\n}\n\nfunc_instance *mapped_object::findFuncByEntry(const Address addr) {\n   std::set<func_instance *> funcs;\n   if (!findFuncsByAddr(addr, funcs)) return NULL;\n   for (std::set<func_instance *>::iterator iter = funcs.begin();\n        iter != funcs.end(); ++iter) {\n      if ((*iter)->entryBlock()->start() == addr) return *iter;\n   }\n   return NULL;\n}\n\n\nconst pdvector<mapped_module *> &mapped_object::getModules() {\n    // everyModule may be out of date...\n    std::vector<pdmodule *> pdmods;\n    parse_img()->getModules(pdmods);\n    if (everyModule.size() == pdmods.size())\n        return everyModule;\n    for (unsigned i = 0; i < pdmods.size(); i++) {\n        findModule(pdmods[i]);\n    }\n\n    return everyModule;\n}\n\nbool mapped_object::getAllFunctions(pdvector<func_instance *> &funcs) {\n    unsigned start = funcs.size();\n\n    const CodeObject::funclist &img_funcs = parse_img()->getAllFunctions();\n    CodeObject::funclist::const_iterator fit = img_funcs.begin();\n    for( ; fit != img_funcs.end(); ++fit) {\n        if(funcs_.find((parse_func*)*fit) == funcs_.end()) {\n            findFunction((parse_func*)*fit);\n        }\n        funcs.push_back(SCAST_FI(funcs_[*fit]));\n    }\n    return funcs.size() > start;\n}\n\nbool mapped_object::getAllVariables(pdvector<int_variable *> &vars) {\n    unsigned start = vars.size();\n\n    const pdvector<image_variable *> &img_vars = parse_img()->getAllVariables();\n\n    for (unsigned i = 0; i < img_vars.size(); i++) {\n       auto iter = everyUniqueVariable.find(img_vars[i]);\n       if (iter == everyUniqueVariable.end()) {\n          findVariable(img_vars[i]);\n       }\n       vars.push_back(everyUniqueVariable[img_vars[i]]);\n    }\n    return vars.size() > start;\n}\n\nfunc_instance *mapped_object::findFunction(ParseAPI::Function *papi_func) {\n  return SCAST_FI(getFunc(papi_func));\n}\n\nvoid mapped_object::addFunctionName(func_instance *func,\n                                    const std::string newName,\n                                    func_index_t &index) {\n   pdvector<func_instance *> *funcsByName = NULL;\n   \n   auto iter = index.find(newName); \n   if (iter != index.end()) {\n      funcsByName = iter->second;\n   }\n   else {\n      funcsByName = new std::vector<func_instance *>;\n      index[newName] = funcsByName;\n   }\n\n   assert(funcsByName != NULL);\n   if(std::find(funcsByName->begin(),\n\t\tfuncsByName->end(),\n\t\tfunc) == funcsByName->end()) \n   {\n     funcsByName->push_back(func);\n   }\n}\n\n\n\nvoid mapped_object::addFunction(func_instance *func) {\n    // Possibly multiple demangled (pretty) names...\n    // And multiple functions (different addr) with the same pretty\n    // name. So we have a many::many mapping...\n  for (auto pretty_iter = func->pretty_names_begin();\n       pretty_iter != func->pretty_names_end();\n       ++pretty_iter)\n  {\n        addFunctionName(func, pretty_iter->c_str(), allFunctionsByPrettyName);\n  }\n  for(auto symtab_iter = func->symtab_names_begin();\n      symtab_iter != func->symtab_names_end();\n      ++symtab_iter)\n  {\n    \n    // And multiple symtab names...\n        addFunctionName(func, symtab_iter->c_str(), allFunctionsByMangledName);\n    }\n\n    func->mod()->addFunction(func);\n}\n\n// Enter a function in all the appropriate tables\nint_variable *mapped_object::findVariable(image_variable *img_var) {\n    if (!img_var) return NULL;\n\n    auto iter = everyUniqueVariable.find(img_var);\n    if (iter != everyUniqueVariable.end()) { return iter->second; }\n\n    mapped_module *mod = findModule(img_var->pdmod());\n    assert(mod);\n\n    int_variable *var = new int_variable(img_var, dataBase_, mod);\n    addVariable(var);\n    return var;\n}\n\nvoid mapped_object::addVariable(int_variable *var) {\n\n    // Possibly multiple demangled (pretty) names...\n    // And multiple functions (different addr) with the same pretty\n    // name. So we have a many::many mapping...\n  \n  for (auto pretty_iter = var->pretty_names_begin();\n         pretty_iter != var->pretty_names_end();\n         pretty_iter++) {\n        string pretty_name = *pretty_iter;\n        pdvector<int_variable *> *varsByPrettyEntry = NULL;\n\n        // Ensure a vector exists\n        auto iter = allVarsByPrettyName.find(pretty_name);\n        if (iter == allVarsByPrettyName.end()) {\n           varsByPrettyEntry = new std::vector<int_variable *>;\n           allVarsByPrettyName[pretty_name] = varsByPrettyEntry;\n        }\n        else {\n           varsByPrettyEntry = iter->second;\n        }\n\tif(std::find(varsByPrettyEntry->begin(),\n\t\t     varsByPrettyEntry->end(),\n\t\t     var) == varsByPrettyEntry->end())\n\t{\n\t  varsByPrettyEntry->push_back(var);\n\t}\n\t\n    }\n\n    \n    // And multiple symtab names...\n    for (auto symtab_iter = var->symtab_names_begin();\n         symtab_iter != var->symtab_names_end();\n         symtab_iter++) {\n      string symtab_name = *symtab_iter;\n      pdvector<int_variable *> *varsBySymTabEntry = NULL;\n\n        // Ensure a vector exist\n        auto iter = allVarsByMangledName.find(symtab_name);\n        if (iter == allVarsByMangledName.end()) {\n           varsBySymTabEntry = new std::vector<int_variable *>;\n           allVarsByMangledName[symtab_name] = varsBySymTabEntry;\n        }\n        else {\n           varsBySymTabEntry = iter->second;\n        }\n\tif(std::find(varsBySymTabEntry->begin(),\n\t\t     varsBySymTabEntry->end(),\n\t\t     var) == varsBySymTabEntry->end())\n\t{\n\t  varsBySymTabEntry->push_back(var);\n\t}\n    }\n\n    everyUniqueVariable[var->ivar()] = var;\n\n    var->mod()->addVariable(var);\n}\n\n/////////// Dinky functions\n\n// This way we don't have to cross-include every header file in the\n// world.\n\nAddressSpace *mapped_object::proc() const { return proc_; }\n\nbool mapped_object::isSharedLib() const\n{\n    if (isMemoryImg()) return false;\n\n    return parse_img()->isSharedObj();\n    // HELL NO\n    //return desc_.isSharedObject();\n}\n\nbool mapped_object::isStaticExec() const\n{\n    return parse_img()->getObject()->isStaticBinary();\n}\n\nconst std::string mapped_object::debugString() const\n{\n    std::string debug;\n    debug = std::string(fileName_.c_str()) + \":\"\n       + utos(codeBase_)\n       + \"/\" + utos(imageSize());\n    return debug;\n}\n\n// Search an object for heapage\nbool mapped_object::getInfHeapList(pdvector<heapDescriptor> &infHeaps) {\n    vector<pair<string,Address> > foundHeaps;\n\n    getInferiorHeaps(foundHeaps);\n\n    for (u_int j = 0; j < foundHeaps.size(); j++) {\n        // The string layout is: DYNINSTstaticHeap_size_type_unique\n        // Can't allocate a variable-size array on NT, so malloc\n        // that sucker\n        char *temp_str = (char *)malloc(strlen(foundHeaps[j].first.c_str())+1);\n        strcpy(temp_str, foundHeaps[j].first.c_str());\n        char *garbage_str = strtok(temp_str, \"_\"); // Don't care about beginning\n        assert(!strcmp(\"DYNINSTstaticHeap\", garbage_str));\n        // Name is as is.\n        // If address is zero, then skip (error condition)\n        if (foundHeaps[j].second == 0) {\n            cerr << \"Skipping heap \" << foundHeaps[j].first.c_str()\n                 << \"with address 0\" << endl;\n            continue;\n        }\n        // Size needs to be parsed out (second item)\n        // Just to make life difficult, the heap can have an optional\n        // trailing letter (k,K,m,M,g,G) which indicates that it's in\n        // kilobytes, megabytes, or gigabytes. Why gigs? I was bored.\n        char *heap_size_str = strtok(NULL, \"_\"); // Second element, null-terminated\n        unsigned heap_size = (unsigned) atol(heap_size_str);\n        if (heap_size == 0)\n            /* Zero size or error, either way this makes no sense for a heap */\n        {\n            free(temp_str);\n            continue;\n        }\n        switch (heap_size_str[strlen(heap_size_str)-1]) {\n        case 'g':\n        case 'G':\n            heap_size *= 1024;\n        case 'm':\n        case 'M':\n            heap_size *= 1024;\n        case 'k':\n        case 'K':\n            heap_size *= 1024;\n        default:\n            break;\n        }\n\n        // Type needs to be parsed out. Can someone clean this up?\n        inferiorHeapType heap_type;\n        char *heap_type_str = strtok(NULL, \"_\");\n\n        if (!strcmp(heap_type_str, \"anyHeap\"))\n            heap_type = anyHeap;\n        else if (!strcmp(heap_type_str, \"lowmemHeap\"))\n            heap_type = lowmemHeap;\n        else if (!strcmp(heap_type_str, \"dataHeap\"))\n            heap_type = dataHeap;\n        else if (!strcmp(heap_type_str, \"textHeap\"))\n            heap_type = textHeap;\n        else if (!strcmp(heap_type_str, \"uncopiedHeap\"))\n            heap_type = uncopiedHeap;\n        else {\n            cerr << \"Unknown heap string \" << heap_type_str << \" read from file!\" << endl;\n            free(temp_str);\n            continue;\n        }\n        infHeaps.push_back(heapDescriptor(foundHeaps[j].first.c_str(),\n                                          foundHeaps[j].second,\n                                          heap_size, heap_type));\n        free(temp_str);\n    }\n    return foundHeaps.size() > 0;\n}\n\nunsigned mapped_object::memoryEnd() \n{ \n    if ((long)memEnd_ != -1) {\n        return memEnd_;\n    }\n    memEnd_ = 0;\n    vector<SymtabAPI::Region*> regs;\n    parse_img()->getObject()->getMappedRegions(regs);\n    for (unsigned ridx=0; ridx < regs.size(); ridx++) {\n        if (memEnd_ < regs[ridx]->getMemOffset() + regs[ridx]->getMemSize()) {\n            memEnd_ = regs[ridx]->getMemOffset() + regs[ridx]->getMemSize();\n        }\n    }\n    memEnd_ += codeBase();\n    return memEnd_;\n}\n\n\n// This gets called once per image. Poke through to the internals;\n// all we care about, amusingly, is symbol table information.\n\nvoid mapped_object::getInferiorHeaps(vector<pair<string, Address> > &foundHeaps)\n{\n    vector<pair<string, Address> > code_heaps;\n    vector<pair<string, Address> > data_heaps;\n\n    if (!parse_img()->getInferiorHeaps(code_heaps, data_heaps)) {\n        return;\n    }\n\n\n    // We have a bunch of offsets, now add in the base addresses\n    for (unsigned i = 0; i < code_heaps.size(); i++) {\n\t\tfoundHeaps.push_back(pair<string,Address>(code_heaps[i].first,\n                                                  code_heaps[i].second + codeBase()));\n    }\n    for (unsigned i = 0; i < data_heaps.size(); i++) {\n        foundHeaps.push_back(pair<string,Address>(data_heaps[i].first,\n                                                  data_heaps[i].second + dataBase()));\n    }\n}\n\n\nvoid *mapped_object::getPtrToInstruction(Address addr) const {\n   if (!isCode(addr)) return NULL;\n   \n   Address offset;\n   if (proc()->getAddressWidth() == 8) {\n      offset = addr - codeBase();\n   }\n   else {\n      offset = ((unsigned) addr) - ((unsigned) codeBase());\n   }\n\n  return image_->codeObject()->cs()->getPtrToInstruction(offset);\n}\n\nvoid *mapped_object::getPtrToData(Address addr) const\n{\n   assert(addr >= dataAbs());\n   assert(addr < (dataAbs() + dataSize()));\n\n   // Don't go from the code base... the image adds back in the code\n   // offset.\n   Address offset = addr - dataBase();\n   return image_->codeObject()->cs()->getPtrToData(offset);\n}\n\n// mapped objects may contain multiple Symtab::Regions, this function\n// should not be used, but must be included in the class because this\n// function is a subclass of codeRange\nvoid *mapped_object::get_local_ptr() const\n{\n    assert(0);// if you crash here, blame me. -kevin\n    return NULL;\n    //   return image_->getObject()->image_ptr();\n}\n\n\nbool mapped_object::getSymbolInfo(const std::string &n, int_symbol &info)\n{\n    using SymtabAPI::Symbol;\n\n    assert(image_);\n\n    Symbol *lowlevel_sym = image_->symbol_info(n);\n    if (!lowlevel_sym) {\n        lowlevel_sym = image_->symbol_info(std::string(\"_\") + n);\n    }\n\n    if (!lowlevel_sym) return false;\n\n    if (lowlevel_sym->getType() == Symbol::ST_OBJECT)\n        info = int_symbol(lowlevel_sym, dataBase_);\n    else\n        info = int_symbol(lowlevel_sym, codeBase_);\n\n    return true;\n}\n\nmapped_module *mapped_object::getOrCreateForkedModule(mapped_module *parMod)\n{\n   // Okay. We're forking, and this is the child mapped_object.\n   // And now, given a parent module, we need to find the right one\n   // in our little baby modules.\n\n   // Since we've already copied modules, we can just do a name lookup.\n   mapped_module *childModule = findModule(parMod->fileName(), false);\n   assert(childModule);\n   return childModule;\n\n}\n\nmapped_module* mapped_object::getDefaultModule()\n{\n  mapped_module* ret = findModule(\"DEFAULT_MODULE\");\n  if(ret) return ret;\n\n  // Make sure the everyModule vector is initialized\n  getModules();\n\n  assert(everyModule.size() > 0);\n  return everyModule[0];\n\n}\n\n\n// Grabs all block_instances corresponding to the region (horribly inefficient)\nbool mapped_object::findBlocksByRange(Address startAddr,\n                                      Address endAddr,\n                                      list<block_instance*> &rangeBlocks)//output\n{\n   std::set<ParseAPI::Block *> papiBlocks;\n   for (Address cur = startAddr; cur < endAddr; ++cur) {\n      Address papiCur = cur - codeBase();\n      parse_img()->codeObject()->findBlocks(NULL, papiCur, papiBlocks);\n   }\n\n   for (std::set<ParseAPI::Block *>::iterator iter = papiBlocks.begin();\n        iter != papiBlocks.end(); ++iter) {\n      // For each parseAPI block, up-map it to a block_instance\n      block_instance *bbl = this->findBlock(*iter);\n      assert(bbl);\n      rangeBlocks.push_back(bbl);\n   }\n   return !rangeBlocks.empty();\n}\n\nvoid mapped_object::findFuncsByRange(Address startAddr,\n                                      Address endAddr,\n                                      std::set<func_instance*> &pageFuncs)\n{\n   std::list<block_instance *> bbls;\n   findBlocksByRange(startAddr, endAddr, bbls);\n   for (std::list<block_instance *>::iterator iter = bbls.begin();\n        iter != bbls.end(); ++iter) {\n      (*iter)->getFuncs(std::inserter(pageFuncs, pageFuncs.end()));\n   }\n}\n\n/* Re-trigger parsing in the object.  This function should\n * only be invoked if all funcEntryAddrs lie within the boundaries of\n * the object.\n *\n * Copies over the raw data if a funcEntryAddr lies in between\n * the region's disk size and memory size, also copies raw data\n * if the memory around the entry point has changed\n *\n * A true return value means that new functions were parsed\n*/\nbool mapped_object::parseNewFunctions(vector<Address> &funcEntryAddrs)\n{\n\n    bool reparsedObject = false;\n    Address baseAddress = codeBase();\n    SymtabAPI::Region *reg;\n    std::set<SymtabAPI::Region*> visitedRegions;\n\n    // code page bytes may need updating\n    if (BPatch_defensiveMode == analysisMode_) {\n        setCodeBytesUpdated(false);\n    }\n\n    assert(!parse_img()->hasNewBlocks());\n\n    // update regions if necessary, check that functions not parsed already\n    vector<Address>::iterator curEntry = funcEntryAddrs.begin();\n    while (curEntry != funcEntryAddrs.end()) {\n        Address entryOffset = (*curEntry)-baseAddress;\n        reg = parse_img()->getObject()->findEnclosingRegion(entryOffset);\n        if (reg != NULL) {\n\n            if (parse_img()->codeObject()->defensiveMode() &&\n                visitedRegions.end() == visitedRegions.find(reg))\n            {\n                updateCodeBytesIfNeeded(*curEntry);\n                visitedRegions.insert(reg);\n            }\n\n            if (parse_img()->findFuncByEntry(entryOffset)) {\n                fprintf(stderr,\"WARNING: tried to parse at %lx, where a \"\n                        \"function entry exists already %s[%d]\\n\",\n                        *curEntry, FILE__,__LINE__);\n                curEntry = funcEntryAddrs.erase(curEntry);\n            }\n            else {\n                curEntry++;\n            }\n\n        }\n        else {\n            fprintf(stderr,\"ERROR: passed invalid address %lx to \"\n                    \"parseNewFunctions %s[%d]\\n\", *curEntry,FILE__,__LINE__);\n            assert(0);\n            curEntry++;\n        }\n    }\n\n    // parse at funcEntryAddrs\n    curEntry = funcEntryAddrs.begin();\n    set<ParseAPI::Function*> tmpfuncs;\n    while (curEntry != funcEntryAddrs.end()) {\n        Address entryOffset = (*curEntry)  - baseAddress;\n        parse_img()->codeObject()->parse( entryOffset, true );\n\n        if ( ! parse_img()->findFuncs(entryOffset, tmpfuncs) ) {\n            // parse failed, this can happen when the function is just a\n            // jump or return instruction, but it doesn't mean that we\n            // didn't do any parsing\n            fprintf(stderr,\"WARNING, failed to parse function at %lx, \"\n                    \"%s[%d]\\n\", *curEntry, FILE__, __LINE__);\n        }\n        else {\n            reparsedObject = true;\n            tmpfuncs.clear();\n        }\n        curEntry++;\n    }\n\n    assert(consistency(&(*addrSpace())));\n    return reparsedObject;\n}\n\n\n/* 0. The target and source must be in the same mapped region, make sure memory\n *    for the target is up to date\n * 1. Parse from target address, add new edge at image layer\n * 2. Register all newly created functions as a result of new edge parsing\n * 3. Add image blocks as block_instances\n * 4. fix up mapping of split blocks with points\n * 5. Add image points, as instPoints\n*/\nbool mapped_object::parseNewEdges(const std::vector<edgeStub> &stubs)\n{\n    using namespace SymtabAPI;\n    using namespace ParseAPI;\n\n    vector<ParseAPI::CodeObject::NewEdgeToParse> edgesInThisObject;\n\n/* 0. Make sure memory for the target is up to date */\n\n    // Do various checks and set edge types, if necessary\n    for (unsigned idx=0; idx < stubs.size(); idx++) {\n        mapped_object *targ_obj = proc()->findObject(stubs[idx].trg);\n        assert(targ_obj);\n\n        // update target region if needed\n        if (BPatch_defensiveMode == hybridMode())\n        {\n          targ_obj->updateCodeBytesIfNeeded(stubs[idx].trg);\n        }\n\n        EdgeTypeEnum edgeType = stubs[idx].type;\n\n        // Determine if this stub already has been parsed\n        // Which means looking up a block at the target address\n        if (targ_obj->findBlockByEntry(stubs[idx].trg)) {\n           cerr << \"KEVINTEST: VERIFY THAT I WORK: parsing edge for target that already exists\" << endl;\n          //continue; //KEVINTODO: don't we maybe want to add the edge anyway?\n        }\n\n        // Otherwise we don't have a target block, so we need to make one.\n        if (stubs[idx].type == ParseAPI::NOEDGE)\n        {\n            using namespace InstructionAPI;\n            // And we don't know what type of edge this is. Lovely. Let's\n            // figure it out from the instruction class, since that's\n            // the easy way to do things.\n            block_instance::Insns insns;\n            stubs[idx].src->getInsns(insns);\n            InstructionAPI::Instruction cf = insns[stubs[idx].src->last()];\n            assert(cf.isValid());\n            switch (cf.getCategory()) {\n            case c_CallInsn:\n                if (stubs[idx].trg == stubs[idx].src->end())\n                {\n                    edgeType = CALL_FT;\n                }\n                else\n                {\n                    edgeType = CALL;\n                }\n                break;\n            case c_ReturnInsn:\n                //edgeType = RET;\n                // The above doesn't work according to Nate\n                edgeType = INDIRECT;\n                break;\n            case c_BranchInsn:\n                if (cf.readsMemory())\n                {\n                    edgeType = INDIRECT;\n                }\n                else if (!cf.allowsFallThrough())\n                {\n                    edgeType = DIRECT;\n                }\n                else if (stubs[idx].trg == stubs[idx].src->end())\n                {\n                    edgeType = COND_NOT_TAKEN;\n                }\n                else\n                {\n                    edgeType = COND_TAKEN;\n                }\n                break;\n            default:\n                edgeType = FALLTHROUGH;\n                break;\n            }\n        }\n\n\t\t/* 1. Parse from target address, add new edge at image layer  */\n\t\tCodeObject::NewEdgeToParse newEdge(stubs[idx].src->llb(),\n            stubs[idx].trg - targ_obj->codeBase(),\n            stubs[idx].checked, \n            edgeType);\n\t\tif (this != targ_obj) {\n\t\t\tstd::vector<ParseAPI::CodeObject::NewEdgeToParse> newEdges;\n\t\t\tnewEdges.push_back(newEdge);\n\t\t\ttarg_obj->parse_img()->codeObject()->parseNewEdges(newEdges);\n\t\t}\n\t\telse {\n\t\t\tedgesInThisObject.push_back(newEdge);\n\t\t}\n\t}\n \n\t/* 2. Parse intra-object edges, after removing any edges that \n          would be duplicates at the image-layer */\n\tparse_img()->codeObject()->parseNewEdges(edgesInThisObject);\n\n    // build list of potentially modified functions\n    vector<ParseAPI::Function*> modIFuncs;\n    vector<func_instance*> modFuncs;\n    for(unsigned sidx=0; sidx < stubs.size(); sidx++) {\n        if (stubs[sidx].src != NULL) {\n            stubs[sidx].src->llb()->getFuncs(modIFuncs);\n        }\n    }\n\n    for (unsigned fidx=0; fidx < modIFuncs.size(); fidx++)\n    {\n       func_instance *func = findFunction(modIFuncs[fidx]);\n       modFuncs.push_back(func);\n\n       //func->ifunc()->invalidateCache();//KEVINTEST: used to call this, which might have been important\n\n       modFuncs[fidx]->triggerModified();\n       modFuncs[fidx]->blocks();\n       modFuncs[fidx]->callBlocks();\n       modFuncs[fidx]->exitBlocks();\n    }\n\n    assert(consistency(&(*addrSpace())));\n    return true;\n}\n\n\n/* 1. Copy the entire region in from the mutatee,\n * 2. if memory emulation is not on, copy blocks back in from the\n * mapped file, since we don't want to copy instrumentation into\n * the mutatee.\n */\nvoid mapped_object::expandCodeBytes(SymtabAPI::Region *reg)\n{\n    assert(reg);\n    void *mappedPtr = reg->getPtrToRawData();\n    Address regStart = reg->getMemOffset();\n    ParseAPI::Block *cur = NULL;\n    ParseAPI::CodeObject *cObj = parse_img()->codeObject();\n    ParseAPI::CodeRegion *parseReg = NULL;\n    Address copySize = reg->getMemSize();\n    void* regBuf = malloc(copySize);\n    Address initializedEnd = regStart + copySize;\n\n    set<ParseAPI::CodeRegion*> parseRegs;\n    cObj->cs()->findRegions(regStart, parseRegs);\n    parseReg = * parseRegs.begin();\n    parseRegs.clear();\n\n    // 1. copy memory into regBuf\n    Address readAddr = regStart + codeBase();\n    if (proc()->isMemoryEmulated()) {\n        bool valid = false;\n        boost::tie(valid, readAddr) = proc()->getMemEm()->translate(readAddr);\n        assert(valid);\n    }\n    if (!proc()->readDataSpace((void*)readAddr,\n                               copySize,\n                               regBuf,\n                               true))\n    {\n        fprintf(stderr, \"%s[%d] Failed to read from region [%lX %lX]\\n\",\n                __FILE__, __LINE__, (long)regStart+codeBase(), copySize);\n        assert(0);\n    }\n    mal_printf(\"EXTEND_CB: copied to [%lx %lx)\\n\", codeBase()+regStart, codeBase()+regStart+copySize);\n\n\n    if ( ! proc()->isMemoryEmulated() ) {\n\n    // 2. copy code bytes back into the regBuf to wipe out instrumentation\n    //    and set regBuf to be the data for the region\n\n        // find the first block in the region\n        set<ParseAPI::Block*> analyzedBlocks;\n        cObj->findBlocks(parseReg, regStart, analyzedBlocks);\n        if (analyzedBlocks.size()) {\n            cur = * analyzedBlocks.begin();\n        } else {\n            cur = cObj->findNextBlock(parseReg, regStart);\n        }\n\n        // copy code ranges from old mapped data into regBuf\n        while (cur != NULL &&\n               cur->start() < initializedEnd)\n        {\n            if ( ! memcpy((void*)((Address)regBuf + cur->start() - regStart),\n                          (void*)((Address)mappedPtr + cur->start() - regStart),\n                          cur->size()) )\n            {\n                assert(0);\n            }\n            mal_printf(\"EX: uncopy [%lx %lx)\\n\", codeBase()+cur->start(),codeBase()+cur->end());\n            // advance to the next block\n            Address prevEnd = cur->end();\n            cur = cObj->findBlockByEntry(parseReg,prevEnd);\n            if (!cur) {\n                cur = cObj->findNextBlock(parseReg,prevEnd);\n            }\n        }\n        mal_printf(\"Expand region: %lx blocks copied back into mapped file\\n\",\n                   analyzedBlocks.size());\n    }\n\n    if (reg->isDirty()) {\n        // if isDirty is true, the pointer was created via malloc\n        // and we can free it.  If not, isDirty is part of a mapped\n        // file and we can't free it\n        free( mappedPtr );\n    }\n\n    // swap out rawDataPtr for the mapped file\n    static_cast<SymtabCodeSource*>(cObj->cs())->\n        resizeRegion( reg, reg->getMemSize() );\n    reg->setPtrToRawData( regBuf , copySize );\n\n    // expand this mapped_object's codeRange\n    if (codeBase() + reg->getMemOffset() + reg->getMemSize()\n        >\n        codeAbs() + get_size())\n    {\n        parse_img()->setImageLength( codeBase()\n                                     + reg->getMemOffset()\n                                     + reg->getMemSize()\n                                     - codeAbs() );\n\n    }\n}\n\n// 1. use other update functions to update non-code areas of mapped files,\n//    expanding them if we overwrote into unmapped areas\n// 2. copy overwritten regions into the mapped objects\nvoid mapped_object::updateCodeBytes(const list<pair<Address,Address> > &owRanges)\n{\n    bool memEmulation = proc()->isMemoryEmulated();\n// 1. use other update functions to update non-code areas of mapped files,\n//    expanding them if we wrote in un-initialized memory\n    using namespace SymtabAPI;\n    std::set<Region *> expandRegs;// so we don't update regions more than once\n    Address baseAddress = codeBase();\n\n    // figure out which regions need expansion and which need updating\n    list<pair<Address,Address> >::const_iterator rIter = owRanges.begin();\n    for(; rIter != owRanges.end(); rIter++) {\n        Address lastChangeOffset = (*rIter).second -1 -baseAddress;\n        Region *curReg = parse_img()->getObject()->findEnclosingRegion\n                                                    ( lastChangeOffset );\n        if ( lastChangeOffset - curReg->getMemOffset() >= curReg->getDiskSize() ) {\n            expandRegs.insert(curReg);\n        }\n    }\n    // expand and update regions\n    for (set<Region*>::iterator regIter = expandRegs.begin();\n         regIter != expandRegs.end(); regIter++)\n    {\n        expandCodeBytes(*regIter);\n    }\n    std::vector<Region *> allregions;\n    parse_img()->getObject()->getCodeRegions(allregions);\n    for (unsigned int ridx=0; ridx < allregions.size(); ridx++)\n    {\n        Region *curreg = allregions[ridx];\n        if (expandRegs.end() == expandRegs.find(curreg)) {\n            updateCodeBytes(curreg); // KEVINOPTIMIZE: major overkill here, only update regions that had unprotected pages\n        }\n    }\n\n// 2. copy overwritten regions into the mapped objects\n    for(rIter = owRanges.begin(); rIter != owRanges.end(); rIter++)\n    {\n        Address readAddr = rIter->first;\n        if (memEmulation) {\n            bool valid = false;\n            boost::tie(valid, readAddr) = proc()->getMemEm()->translate(readAddr);\n            assert(valid);\n        }\n\n        Region *reg = parse_img()->getObject()->findEnclosingRegion\n            ( (*rIter).first - baseAddress );\n        unsigned char* regPtr = (unsigned char*)reg->getPtrToRawData()\n            + (*rIter).first - baseAddress - reg->getMemOffset();\n\n        if (!proc()->readDataSpace((void*)readAddr,\n                                   (*rIter).second - (*rIter).first,\n                                   regPtr,\n                                   true) )\n        {\n            assert(0);\n        }\n        if (0) {\n            mal_printf(\"OW_CB: copied to [%lx %lx): \", rIter->first,rIter->second);\n            for (unsigned idx=0; idx < rIter->second - rIter->first; idx++) {\n                mal_printf(\"%2x \", (unsigned) regPtr[idx]);\n            }\n            mal_printf(\"\\n\");\n        }\n    }\n    pagesUpdated_ = true;\n}\n\n// this is a helper function\n//\n// update mapped data for whole object, or just one region, if specified\n//\n// Read unprotected pages into the mapped file\n// (not analyzed code regions so we don't get instrumentation in our parse)\nvoid mapped_object::updateCodeBytes(SymtabAPI::Region * symReg)\n{\n    assert(NULL != symReg);\n\n    Address base = codeBase();\n    ParseAPI::CodeObject *cObj = parse_img()->codeObject();\n    std::vector<SymtabAPI::Region *> regions;\n\n    Block *curB = NULL;\n    set<ParseAPI::Block *> analyzedBlocks;\n    set<ParseAPI::CodeRegion*> parseRegs;\n\n    void *mappedPtr = symReg->getPtrToRawData();\n    Address regStart = symReg->getMemOffset();\n\n    cObj->cs()->findRegions(regStart, parseRegs);\n    ParseAPI::CodeRegion *parseReg = * parseRegs.begin();\n    parseRegs.clear();\n\n    // find the first block in the region\n    cObj->findBlocks(parseReg, regStart, analyzedBlocks);\n    if (analyzedBlocks.size()) {\n        curB = * analyzedBlocks.begin();\n        analyzedBlocks.clear();\n    } else {\n        curB = cObj->findNextBlock(parseReg, regStart);\n    }\n\n    Address prevEndAddr = regStart;\n    while ( curB != NULL &&\n            curB->start() < regStart + symReg->getDiskSize() )\n    {\n        // if there's a gap between previous and current block\n        if (prevEndAddr < curB->start()) {\n            // update the mapped file\n            Address readAddr = prevEndAddr + base;\n            if (proc()->isMemoryEmulated()) {\n                bool valid = false;\n                boost::tie(valid, readAddr) = proc()->getMemEm()->translate(readAddr);\n                assert(valid);\n            }\n            if (!proc()->readDataSpace(\n                    (void*)readAddr,\n                    curB->start() - prevEndAddr,\n                    (void*)((Address)mappedPtr + prevEndAddr - regStart),\n                    true))\n            {\n                assert(0);//read failed\n            }\n            //mal_printf(\"UPDATE_CB: copied to [%lx %lx)\\n\", prevEndAddr+base,curB->start()+base);\n        }\n\n        // advance curB to last adjacent block and set prevEndAddr\n        prevEndAddr = curB->end();\n        Block *ftBlock = cObj->findBlockByEntry(parseReg,prevEndAddr);\n        while (ftBlock) {\n            curB = ftBlock;\n            prevEndAddr = curB->end();\n            ftBlock = cObj->findBlockByEntry(parseReg,prevEndAddr);\n        }\n\n        curB = cObj->findNextBlock(parseReg, prevEndAddr);\n\n    }\n    // read in from prevEndAddr to the end of the region\n\t// (will read in whole region if there are no ranges in the region)\n    if (prevEndAddr < regStart + symReg->getDiskSize()) {\n        Address readAddr = prevEndAddr + base;\n        if (proc()->isMemoryEmulated()) {\n            bool valid = false;\n            boost::tie(valid, readAddr) = proc()->getMemEm()->translate(readAddr);\n            assert(valid);\n        }\n        if (!proc()->readDataSpace(\n                (void*)readAddr,\n                regStart + symReg->getDiskSize() - prevEndAddr,\n                (void*)((Address)mappedPtr + prevEndAddr - regStart),\n                true))\n        {\n            assert(0);// read failed\n        }\n    }\n    // change all region pages with REPROTECTED status to PROTECTED status\n    Address page_size = proc()->proc()->getMemoryPageSize();\n    Address curPage = (regStart / page_size) * page_size + base;\n    Address regEnd = base + regStart + symReg->getDiskSize();\n    for (; protPages_.end() == protPages_.find(curPage)  && curPage < regEnd;\n         curPage += page_size) {};\n    for (map<Address,WriteableStatus>::iterator pit = protPages_.find(curPage);\n         pit != protPages_.end() && pit->first < regEnd;\n         pit++)\n    {\n        pit->second = PROTECTED;\n    }\n}\n\n// checks if update is needed by looking in the gap between the previous\n// and next block for changes to the underlying bytes\n//\n// should only be called if we've already checked that we're not on an\n// analyzed page that's been protected from overwrites, as this\n// check would not be needed\nbool mapped_object::isUpdateNeeded(Address entry)\n{\n    using namespace ParseAPI;\n    bool updateNeeded = false;\n    void* regBuf = NULL;\n    Address base = codeBase();\n\n    assert( BPatch_defensiveMode == hybridMode() );\n\n    set<CodeRegion*> cregs;\n    CodeObject *co = parse_img()->codeObject();\n    co->cs()->findRegions(entry-base, cregs);\n    assert( ! co->cs()->regionsOverlap() );\n    if (0 == cregs.size()) {\n        mal_printf(\"Object update request has invalid addr[%lx] %s[%d]\\n\",\n                   entry, FILE__,__LINE__);\n        return false;\n    }\n    SymtabCodeRegion *creg = static_cast<SymtabCodeRegion*>( * cregs.begin() );\n\n    // update the range tree, if necessary\n    set<ParseAPI::Block *> analyzedBlocks;\n    if (parse_img()->findBlocksByAddr(entry-base, analyzedBlocks)) {\n        return false; // don't need to update if target is in analyzed code\n    }\n\n    // see if the underlying bytes have changed\n    //\n    // read until the next basic block or until the end of the region\n    // to make sure nothing has changed, otherwise we'll want to read\n    // the section in again\n    Block *nextBlk = co->findNextBlock(creg, entry-base);\n    unsigned comparison_size = 0;\n    if (nextBlk) {\n        comparison_size = nextBlk->start() - (entry-base);\n    } else {\n        comparison_size = creg->symRegion()->getDiskSize()\n            - ( (entry - base) - creg->symRegion()->getMemOffset() );\n    }\n\n    // read until first difference, then see if the difference is to known\n    // in which case the difference is due to instrumentation, as we would\n    // have otherwise detected the overwrite\n    Address page_size = proc()->proc()->getMemoryPageSize();\n    comparison_size = ( comparison_size <  page_size)\n                      ? comparison_size : page_size;\n    regBuf = malloc(comparison_size);\n    Address readAddr = entry;\n    if (proc()->isMemoryEmulated()) {\n        bool valid = false;\n\t\tAddress translated = 0;\n\t\tboost::tie(valid, translated) = proc()->getMemEm()->translate(readAddr);\n\t\tif (valid) readAddr = translated;\n\t}\n\n   // mal_printf(\"%s[%d] Comparing %lx bytes starting at %lx\\n\",\n      //      FILE__,__LINE__,comparison_size,entry);\n    if (!proc()->readDataSpace((void*)readAddr, comparison_size, regBuf, true)) {\n        assert(0);\n    }\n    void *mappedPtr = (void*)\n                      ((Address)creg->symRegion()->getPtrToRawData() +\n                        (entry - base - creg->symRegion()->getMemOffset()) );\n    //compare\n    if (0 != memcmp(mappedPtr,regBuf,comparison_size) ) {\n        updateNeeded = true;\n    }\n    free(regBuf);\n    regBuf = NULL;\n\n    return updateNeeded;\n}\n\n// checks to see if expansion is needed\nbool mapped_object::isExpansionNeeded(Address entry)\n{\n    using namespace SymtabAPI;\n    Address base = codeBase();\n    Region * reg = parse_img()->getObject()->findEnclosingRegion(entry - base);\n\n    if (reg->getMemSize() <= reg->getDiskSize()) {\n        return false;\n    }\n\n    if ( ! parse_img()->getObject()->isCode(entry - base) ) {\n        return true;\n    }\n\n    if (expansionCheckedRegions_.end() !=\n        expansionCheckedRegions_.find(reg)) {\n        return false;\n    }\n    expansionCheckedRegions_.insert(reg);\n\n    // if there is uninitialized space in the region,\n    // see if the first few bytes have been updated\n    Address compareStart =\n        base + reg->getMemOffset() + reg->getDiskSize();\n    if (proc()->isMemoryEmulated()) {\n        bool valid = false;\n        boost::tie(valid, compareStart) = proc()->getMemEm()->translate(compareStart);\n        assert(valid);\n    }\n    unsigned compareSize = InstructionAPI::InstructionDecoder::maxInstructionLength;\n\n    Address uninitSize = reg->getMemSize() - reg->getDiskSize();\n    if (compareSize > uninitSize) {\n        compareSize = uninitSize;\n    }\n    unsigned char* regBuf = (unsigned char*) malloc(compareSize);\n    if (!proc()->readDataSpace((void*)compareStart,compareSize,regBuf,true)) {\n        fprintf(stderr, \"%s[%d] Failed to read from region [%lX %lX]\\n\",\n                __FILE__, __LINE__, compareStart, compareStart+compareSize);\n        assert(0);\n    }\n    // compare to zero if the region has not been expanded yet\n    bool allZeros = true;\n    for (unsigned idx=0; allZeros && idx < compareSize; idx++) {\n        if (0 != regBuf[idx]) {\n            allZeros = false;\n        }\n    }\n    if (allZeros) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n// updates the raw code bytes by fetching from memory, if needed\n//\n// updates if we haven't updated since the last time code could have\n// changed, and if the entry address is on an unprotected code page,\n// or if the address is in an uninitialized memory,\nbool mapped_object::updateCodeBytesIfNeeded(Address entry)\n{\n\n    // we may want to switch between normal and defensive\n    // instrumentation/parsing for trusted modules. simply return if we're\n    // presently in normal mode.\n    if (analysisMode_ != BPatch_defensiveMode) {\n        return true;\n    }\n\n    Address pageAddr = entry -\n        (entry % proc()->proc()->getMemoryPageSize());\n\n    if ( pagesUpdated_ ) {\n\t\t//cerr << \"\\t No pages have been updated in mapped_object, ret false\" << endl;\n        return false;\n    }\n\n    if (protPages_.end() != protPages_.find(pageAddr) &&\n        PROTECTED == protPages_[pageAddr])\n    {\n\t\t//cerr << \"\\t Address corresponds to protected page, ret false\" << endl;\n        return false;\n    }\n\n    bool expand = isExpansionNeeded(entry);\n    if ( ! expand ) {\n        if ( ! isUpdateNeeded(entry) ) {\n\t\t\t//cerr << \"\\t Expansion false and no update needed, ret false\" << endl;\n            return false;\n        }\n    }\n\n    SymtabAPI::Region * reg = parse_img()->getObject()->findEnclosingRegion\n        (entry - codeBase());\n    mal_printf(\"%s[%d] updating region [%lx %lx] for entry point %lx\\n\",\n               FILE__,__LINE__,\n               reg->getMemOffset(),\n               reg->getMemOffset()+reg->getDiskSize(),\n               entry);\n\n    if ( expand ) {\n        expandCodeBytes(reg);\n    }\n    else {\n        updateCodeBytes(reg);\n    }\n\n    codeByteUpdates_++;\n    pagesUpdated_ = true;\n    return true;\n}\n\nvoid mapped_object::remove(func_instance *func) {\n\n    if (as()->isMemoryEmulated()) {\n        as()->getMemEm()->removeSpringboards(func);\n    }\n    \n    // clear out module- and BPatch-level data structures \n    BPatch_addressSpace* bpAS = (BPatch_addressSpace*)proc()->up_ptr();\n    BPatch_module *bpmod = bpAS->getImage()->findModule(func->mod());\n    BPatch_function *bpfunc = bpAS->findOrCreateBPFunc(SCAST_FI(func), bpmod);\n    bpfunc->removeCFG();\n    bpmod->remove(bpfunc);\n    func->mod()->remove(func);\n\n    // remove from func_instance vector\n    funcs_.erase(func->ifunc());\n\n    // remove symtab names\n    for (auto name_iter = func->symtab_names_begin();\n         name_iter != func->symtab_names_end(); \n         ++name_iter) {\n       auto map_iter = allFunctionsByMangledName.find(*name_iter);\n       if (map_iter == allFunctionsByMangledName.end()) continue;\n       \n       std::vector<func_instance *> &name_vec = *(map_iter->second);\n       for (unsigned i = 0; i < name_vec.size(); ++i) {\n          if (name_vec[i] == func) {\n             name_vec[i] = name_vec.back();\n             name_vec.pop_back();\n             if (name_vec.empty()) {\n                delete map_iter->second;\n                allFunctionsByMangledName.erase(map_iter);\n             }\n             break;\n          }\n       }\n    }\n\n    // remove pretty names\n    for (auto name_iter = func->pretty_names_begin();\n         name_iter != func->pretty_names_end(); \n         ++name_iter) {\n       auto map_iter = allFunctionsByPrettyName.find(*name_iter);\n       if (map_iter == allFunctionsByPrettyName.end()) continue;\n       \n       std::vector<func_instance *> &name_vec = *(map_iter->second);\n       for (unsigned i = 0; i < name_vec.size(); ++i) {\n          if (name_vec[i] == func) {\n             name_vec[i] = name_vec.back();\n             name_vec.pop_back();\n             if (name_vec.empty()) {\n                delete map_iter->second;\n                allFunctionsByPrettyName.erase(map_iter);\n             }\n             break;\n          }\n       }\n    }\n\n}\n\nvoid mapped_object::remove(instPoint *point)\n{\n    BPatch_addressSpace* bpAS = (BPatch_addressSpace*)proc()->up_ptr();\n    BPatch_module *bpmod = bpAS->getImage()->findModule(point->func()->mod());\n    bpmod->remove(point);\n}\n\n// does not delete\nvoid mapped_object::destroy(PatchAPI::PatchBlock *b) {\n   calleeNames_.erase(SCAST_BI(b));\n   if (as()->isMemoryEmulated()) {\n      as()->getMemEm()->removeSpringboards(SCAST_BI(b));\n   }\n}\n\n// does not delete\nvoid mapped_object::destroy(PatchAPI::PatchFunction *f) {\n    remove(SCAST_FI(f));\n}\n\nvoid mapped_object::removeEmptyPages()\n{\n    // get all pages currently containing code from the mapped modules\n    set<Address> curPages;\n    vector<Address> emptyPages;\n    const vector<mapped_module*> & mods = getModules();\n    for (unsigned midx=0; midx < mods.size(); midx++) {\n        mods[midx]->getAnalyzedCodePages(curPages);\n    }\n    // find entries in protPages_ that aren't in curPages, add to emptyPages\n    for (map<Address,WriteableStatus>::iterator pit= protPages_.begin();\n         pit != protPages_.end();\n         pit++)\n    {\n        if (curPages.end() == curPages.find(pit->first)) {\n            emptyPages.push_back(pit->first);\n        }\n    }\n    // erase emptyPages from protPages\n    for (unsigned pidx=0; pidx < emptyPages.size(); pidx++) {\n        protPages_.erase(emptyPages[pidx]);\n    }\n}\n\nbool mapped_object::isSystemLib(const std::string &objname)\n{\n   std::string lowname = objname;\n   std::transform(lowname.begin(),lowname.end(),lowname.begin(),\n                  (int(*)(int))std::tolower);\n\n   if (std::string::npos != lowname.find(\"libdyninstapi_rt\"))\n      return true;\n\n#if defined(os_linux)\n   if (std::string::npos != lowname.find(\"libc.so\"))\n      return true;\n   if (std::string::npos != lowname.find(\"libpthread\"))\n      return true;\n#endif\n\n#if defined(os_freebsd)\n   if(std::string::npos != lowname.find(\"libc.so\"))\n       return true;\n   if(std::string::npos != lowname.find(\"libthr\"))\n       return true;\n#endif\n\n#if defined(os_windows)\n   if (std::string::npos != lowname.find(\"windows\\\\system32\\\\\") &&\n       std::string::npos != lowname.find(\".dll\"))\n       return true;\n   if (std::string::npos != lowname.find(\"kernel32.dll\"))\n      return true;\n   if (std::string::npos != lowname.find(\"user32.dll\"))\n      return true;\n   if (std::string::npos != lowname.find(\"advapi32.dll\"))\n      return true;\n   if (std::string::npos != lowname.find(\"ntdll.dll\"))\n      return true;\n   if (std::string::npos != lowname.find(\"msvcrt\") &&\n       std::string::npos != lowname.find(\".dll\"))\n      return true;\n   if (std::string::npos != lowname.find(\".dll\"))\n       return true; //KEVINTODO: find a reliable way of detecting windows system libraries\n#endif\n\n   return false;\n}\n\nbool mapped_object::isExploratoryModeOn()\n{\n    return BPatch_exploratoryMode == analysisMode_ ||\n           BPatch_defensiveMode == analysisMode_;\n}\n\nvoid mapped_object::addProtectedPage(Address pageAddr)\n{\n    map<Address,WriteableStatus>::iterator iter = protPages_.find(pageAddr);\n    if (protPages_.end() == iter) {\n        protPages_[pageAddr] = PROTECTED;\n    }\n    else if (PROTECTED != iter->second) {\n        iter->second = REPROTECTED;\n    }\n}\n\nvoid mapped_object::removeProtectedPage(Address pageAddr)\n{\n    map<Address,WriteableStatus>::iterator iter = protPages_.find(pageAddr);\n    if (iter == protPages_.end()) {\n        // sanity check, make sure there isn't any code on the page, in which\n        // case we're unprotecting a page that was originally set to be writeable\n        Address pageOffset = pageAddr - codeBase();\n        SymtabAPI::Region *reg = parse_img()->getObject()->findEnclosingRegion(pageOffset);\n        assert(reg);\n        set<CodeRegion*> cregs;\n        parse_img()->codeObject()->cs()->findRegions(reg->getMemOffset(), cregs);\n        if (!cregs.empty()) { // (if empty, pageAddr is in uninitialized memory)\n            ParseAPI::Block *blk = parse_img()->codeObject()->findNextBlock\n                (*cregs.begin(), pageOffset);\n            Address pageEnd =  pageOffset + proc()->proc()->getMemoryPageSize();\n            if (blk && blk->start() < pageEnd) {\n                assert(0);\n            }\n        }\n        return;\n    }\n    iter->second = UNPROTECTED;\n}\n\nvoid mapped_object::setCodeBytesUpdated(bool newval)\n{\n    if (BPatch_defensiveMode == analysisMode_) {\n        if (false == newval && newval != pagesUpdated_) {\n            expansionCheckedRegions_.clear();\n        }\n        pagesUpdated_ = newval;\n    } else {\n        cerr << \"WARNING: requesting update of code bytes from memory \"\n             <<  \"on non-defensive mapped object, ignoring request \"\n             << fileName().c_str() << \" \" << __FILE__ << __LINE__ << endl;\n    }\n}\n\n#if !( (defined(os_linux) || defined(os_freebsd)) && \\\n       (defined(arch_x86) || defined(arch_x86_64) || defined(arch_power)\\\n        ||defined(arch_aarch64)\\\n       ) )\nfunc_instance *mapped_object::findGlobalConstructorFunc(const std::string &) {\n    assert(!\"Not implemented\");\n    return NULL;\n}\n\nfunc_instance *mapped_object::findGlobalDestructorFunc(const std::string &) {\n    assert(!\"Not implemented\");\n    return NULL;\n}\n#endif\n\nbool mapped_object::isEmulInsn(Address insnAddr)\n{\n    return ( emulInsns_.end() != emulInsns_.find(insnAddr) );\n}\n\n\nvoid mapped_object::setEmulInsnVal(Address insnAddr, void * val)\n{\n    assert(emulInsns_.end() != emulInsns_.find(insnAddr));\n    emulInsns_[insnAddr] = pair<Register,void*>(emulInsns_[insnAddr].first,val);\n}\n\nRegister mapped_object::getEmulInsnReg(Address insnAddr)\n{\n    assert(emulInsns_.end() != emulInsns_.find(insnAddr));\n    return emulInsns_[insnAddr].first;\n}\n\nvoid mapped_object::addEmulInsn(Address insnAddr, Register effectiveAddrReg)\n{\n    emulInsns_[insnAddr] = pair<Register,void*>(effectiveAddrReg,(void *)0);\n}\n\nstd::string mapped_object::getCalleeName(block_instance *b) {\n   std::map<block_instance *, std::string>::iterator iter = calleeNames_.find(b);\n   if (iter != calleeNames_.end()) return iter->second;\n\n#if defined(os_windows)\n   string calleeName;\n   if (parse_img()->codeObject()->isIATcall(b->last() - codeBase(), calleeName)) {\n      setCalleeName(b, calleeName);\n      return calleeName;\n   }\n#endif\n\n   return std::string();\n}\n\nvoid mapped_object::setCalleeName(block_instance *b, std::string s) {\n   calleeNames_[b] = s;\n}\n\n// Missing\n// findEdge\n// findBlock\n// findOneBlockByAddr\n// splitBlock\n// findFuncByEntry\n// findBlock (again)\n\nedge_instance *mapped_object::findEdge(ParseAPI::Edge *e,\n                                       block_instance *src,\n                                       block_instance *trg) {\n  edge_instance *inst = SCAST_EI(getEdge(e, src, trg));\n  return inst;\n}\n\nblock_instance *mapped_object::findBlock(ParseAPI::Block *b) {\n  return SCAST_BI(getBlock(b));\n}\n\nblock_instance *mapped_object::findOneBlockByAddr(const Address addr) {\n   std::set<block_instance *> possibles;\n   findBlocksByAddr(addr, possibles);\n   for (std::set<block_instance *>::iterator iter = possibles.begin();\n        iter != possibles.end(); ++iter) {\n      block_instance::Insns insns;\n      (*iter)->getInsns(insns);\n      if (insns.find(addr) != insns.end()) {\n         return *iter;\n      }\n   }\n   return NULL;\n}\n\nvoid mapped_object::splitBlock(block_instance * b1, \n                               block_instance * b2) \n{\n    // fix block mappings in: map<block_instance *, std::string> calleeNames_\n    map<block_instance *, std::string>::iterator nit = calleeNames_.find(b1);\n    if (calleeNames_.end() != nit) {\n        string name = nit->second;\n        calleeNames_.erase(nit);\n        calleeNames_[b2] = name;\n    }\n}\n\nfunc_instance *mapped_object::findFuncByEntry(const block_instance *blk) {\n  parse_block *llb = SCAST_PB(blk->llb());\n  parse_func* f = llb->getEntryFunc();\n  if (!f) return NULL;\n  return findFunction(f);\n}\n\nfunc_instance *mapped_object::getCallee(const block_instance *b) const {\n   std::map<const block_instance *, func_instance *>::const_iterator iter = callees_.find(b);\n   if (iter == callees_.end()) return NULL;\n   return iter->second;\n}\n\nvoid mapped_object::setCallee(const block_instance *b, func_instance *f) {\n   callees_[b] = f;\n}\n\n#include \"Symtab.h\"\n\nvoid mapped_object::replacePLTStub(SymtabAPI::Symbol *sym, func_instance *orig, Address newAddr) {\n   // Let's play relocation games...\n   vector<SymtabAPI::relocationEntry> fbt;\n   bool ok = parse_img()->getObject()->getFuncBindingTable(fbt);\n   if(!ok) return;\n   \n   \n   for (unsigned i = 0; i < fbt.size(); ++i) {\n      if (fbt[i].name() == sym->getMangledName()) {\n         proc()->bindPLTEntry(fbt[i], codeBase(), orig, newAddr);\n      }\n   }\n}\n\nstring mapped_object::fileName() const { \n  return parse_img()->getObject()->name();\n  \n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI/src/linux-aarch64.C": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n *\n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n *\n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n//#warning \"This file is not implemented yet!\"\n\n#include <string>\n#include <dlfcn.h>\n\n#include \"dyninstAPI/src/linux-aarch64.h\"\n#include \"dyninstAPI/src/addressSpace.h\"\n#include \"dyninstAPI/src/dynProcess.h\"\n#include \"dyninstAPI/src/frame.h\"\n#include \"dyninstAPI/src/debug.h\"\n#include \"dyninstAPI/src/mapped_object.h\"\n#include \"dyninstAPI/src/inst-aarch64.h\"\n#include \"dyninstAPI/src/baseTramp.h\"\n#include \"dyninstAPI/src/registerSpace.h\"\n#include \"dyninstAPI/src/function.h\"\n\n#define DLOPEN_MODE (RTLD_NOW | RTLD_GLOBAL)\n\nconst char DL_OPEN_FUNC_EXPORTED[] = \"dlopen\";\nconst char DL_OPEN_FUNC_INTERNAL[] = \"_dl_open\";\nconst char DL_OPEN_FUNC_NAME[] = \"do_dlopen\";\nconst char DL_OPEN_LIBC_FUNC_EXPORTED[] = \"__libc_dlopen_mode\";\n\nAddress PCProcess::getLibcStartMainParam(PCThread *) {\n    assert(!\"This function is unimplemented\");\n    return 0;\n}\n\nAddress PCProcess::getTOCoffsetInfo(Address dest) {\n    if ( getAddressWidth() == 4 ) return 0;\n\n    // We have an address, and want to find the module the addr is\n    // contained in. Given the probabilities, we (probably) want\n    // the module dyninst_rt is contained in.\n    // I think this is the right func to use\n\n    // Find out which object we're in (by addr).\n    mapped_object *mobj = findObject(dest);\n\n    // Very odd case if this is not defined.\n    assert(mobj);\n    Address TOCOffset = mobj->parse_img()->getObject()->getTOCoffset();\n\n    if (!TOCOffset)\n       return 0;\n    return TOCOffset + mobj->dataBase();\n}\n\nAddress PCProcess::getTOCoffsetInfo(func_instance *func) {\n    if ( getAddressWidth() == 4 ) return 0;\n\n    mapped_object *mobj = func->obj();\n\n    return mobj->parse_img()->getObject()->getTOCoffset() + mobj->dataBase();\n}\n\nbool PCProcess::getOPDFunctionAddr(Address &addr) {\n    return true;\n}\n\nAstNodePtr PCProcess::createUnprotectStackAST() {\n    // This is not necessary on power\n    return AstNode::nullNode();\n}\n\nbool Frame::setPC(Address newpc) {\n   Address pcAddr = getPClocation();\n   if (!pcAddr)\n   {\n       //fprintf(stderr, \"[%s:%u] - Frame::setPC aborted\", __FILE__, __LINE__);\n      return false;\n   }\n\n   //fprintf(stderr, \"[%s:%u] - Frame::setPC setting %x to %x\",\n   //__FILE__, __LINE__, pcAddr_, newpc);\n   if (getProc()->getAddressWidth() == sizeof(uint64_t)) {\n      uint64_t newpc64 = newpc;\n      if (!getProc()->writeDataSpace((void*)pcAddr, sizeof(newpc64), &newpc64))\n         return false;\n      sw_frame_.setRA(newpc64);\n   }\n   else {\n      uint32_t newpc32 = newpc;\n      if (!getProc()->writeDataSpace((void*)pcAddr, sizeof(newpc32), &newpc32))\n         return false;\n      sw_frame_.setRA(newpc32);\n   }\n\n   return true;\n}\n\nbool AddressSpace::getDyninstRTLibName() {\n//full path to libdyninstAPI_RT (used an _m32 suffix for 32-bit version)\n    startup_printf(\"dyninstRT_name: %s\\n\", dyninstRT_name.c_str());\n    if (dyninstRT_name.length() == 0) {\n        // Get env variable\n        if (getenv(\"DYNINSTAPI_RT_LIB\") != NULL) {\n            dyninstRT_name = getenv(\"DYNINSTAPI_RT_LIB\");\n        }\n        else {\n            std::string msg = std::string(\"Environment variable \") +\n                std::string(\"DYNINSTAPI_RT_LIB\") +\n               std::string(\" has not been defined\");\n            showErrorCallback(101, msg);\n            return false;\n        }\n    }\n\n    // Automatically choose 32-bit library if necessary.\n    const char *modifier = \"\";\n    const char *name = dyninstRT_name.c_str();\n\n    const char *split = P_strrchr(name, '/');\n    if ( !split ) split = name;\n    split = P_strchr(split, '.');\n    if ( !split || P_strlen(split) <= 1 ) {\n        // We should probably print some error here.\n        // Then, of course, the user will find out soon enough.\n        startup_printf(\"Invalid Dyninst RT lib name: %s\\n\",\n                dyninstRT_name.c_str());\n        return false;\n    }\n\n    if (getAddressWidth() == 4 &&\n        (sizeof(void *) == 8)) {\n       // Need _m32...\n       if (P_strstr(name, \"_m32\") == NULL) {\n          modifier = \"_m32\";\n       }\n    }\n\n    const char *suffix = split;\n    if( getAOut()->isStaticExec() ) {\n        suffix = \".a\";\n    }else{\n        if( P_strncmp(suffix, \".a\", 2) == 0 ) {\n            // This will be incorrect if the RT library's version changes\n            suffix = \".so\";\n        }\n    }\n\n    dyninstRT_name = std::string(name, split - name) +\n                     std::string(modifier) +\n                     std::string(suffix);\n\n    startup_printf(\"Dyninst RT Library name set to '%s'\\n\",\n            dyninstRT_name.c_str());\n\n    // Check to see if the library given exists.\n    if (access(dyninstRT_name.c_str(), R_OK)) {\n        std::string msg = std::string(\"Runtime library \") + dyninstRT_name\n        + std::string(\" does not exist or cannot be accessed!\");\n        showErrorCallback(101, msg);\n\tcerr << msg << endl;\n        return false;\n    }\n    return true;\n}\n\n// floor of inferior malloc address range within a single branch of x\n// for 32-bit ELF PowerPC mutatees\nAddress region_lo(const Address x) {\n   const Address floor = getpagesize();\n\n   assert(x >= floor);\n\n   if ((x > floor) && (x - floor > getMaxBranch()))\n      return x - getMaxBranch();\n\n   return floor;\n}\n\n\n// floor of inferior malloc address range within a single branch of x\n// for 64-bit ELF PowerPC mutatees\nAddress region_lo_64(const Address x) {\n   const Address floor = getpagesize();\n\n   assert(x >= floor);\n\n   if ((x > floor) && (x - floor > getMaxBranch()))\n      return x - getMaxBranch();\n\n   return floor;\n}\n\n\n// ceiling of inferior malloc address range within a single branch of x\n// for 32-bit ELF PowerPC mutatees\nAddress region_hi(const Address x) {\n   const Address ceiling = ~(Address)0 & 0xffffffff;\n\n   assert(x < ceiling);\n\n   if ((x < ceiling) && (ceiling - x > getMaxBranch()))\n      return x + getMaxBranch();\n\n   return ceiling;\n}\n\n\n// ceiling of inferior malloc address range within a single branch of x\n// for 64-bit ELF PowerPC mutatees\nAddress region_hi_64(const Address x) {\n   const Address ceiling = ~(Address)0;\n\n   assert(x < ceiling);\n\n   if ((x < ceiling) && (ceiling - x > getMaxBranch()))\n      return x + getMaxBranch();\n\n   return ceiling;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI/src/linux-power.C": "/*\n * See the dyninst/COPYRIGHT file for copyright information.\n * \n * We provide the Paradyn Tools (below described as \"Paradyn\")\n * on an AS IS basis, and do not warrant its validity or performance.\n * We reserve the right to update, modify, or discontinue this\n * software at any time.  We shall have no obligation to supply such\n * updates or modifications or any other form of support to you.\n * \n * By your use of Paradyn, you understand and agree that we (or any\n * other person or entity with proprietary rights in Paradyn) are\n * under no obligation to provide either maintenance services,\n * update services, notices of latent defects, or correction of\n * defects for Paradyn.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n// $Id: linux-power.C,v 1.19 2008/06/19 19:53:26 legendre Exp $\n\n#include <string>\n#include <dlfcn.h>\n\n#include \"dyninstAPI/src/linux-power.h\"\n#include \"dyninstAPI/src/addressSpace.h\"\n#include \"dyninstAPI/src/dynProcess.h\"\n#include \"dyninstAPI/src/frame.h\"\n#include \"dyninstAPI/src/debug.h\"\n#include \"dyninstAPI/src/mapped_object.h\"\n#include \"dyninstAPI/src/inst-power.h\"\n#include \"dyninstAPI/src/baseTramp.h\"\n#include \"dyninstAPI/src/registerSpace.h\"\n#include \"dyninstAPI/src/function.h\"\n\n#define DLOPEN_MODE (RTLD_NOW | RTLD_GLOBAL)\n\nconst char DL_OPEN_FUNC_EXPORTED[] = \"dlopen\";\nconst char DL_OPEN_FUNC_INTERNAL[] = \"_dl_open\";\nconst char DL_OPEN_FUNC_NAME[] = \"do_dlopen\";\nconst char DL_OPEN_LIBC_FUNC_EXPORTED[] = \"__libc_dlopen_mode\";\n\nAddress PCProcess::getLibcStartMainParam(PCThread *) {\n    assert(!\"This function is unimplemented\");\n    return 0;\n}\n\nAddress PCProcess::getTOCoffsetInfo(Address dest) {\n    if ( getAddressWidth() == 4 ) return 0;\n\n    // We have an address, and want to find the module the addr is\n    // contained in. Given the probabilities, we (probably) want\n    // the module dyninst_rt is contained in.\n    // I think this is the right func to use\n\n    // Find out which object we're in (by addr).\n    mapped_object *mobj = findObject(dest);\n\n    // Very odd case if this is not defined.\n    assert(mobj);\n    Address TOCOffset = mobj->parse_img()->getObject()->getTOCoffset();\n    \n    if (!TOCOffset)\n       return 0;\n    return TOCOffset + mobj->dataBase();\n}\n\nAddress PCProcess::getTOCoffsetInfo(func_instance *func) {\n    if ( getAddressWidth() == 4 ) return 0;\n\n    mapped_object *mobj = func->obj();\n\n    return mobj->parse_img()->getObject()->getTOCoffset() + mobj->dataBase();\n}\n\nbool PCProcess::getOPDFunctionAddr(Address &addr) {\n    bool result = true;\n    if( getAddressWidth() == 8 ) {\n        Address resultAddr = 0;\n        if( !readDataSpace((const void *)addr, getAddressWidth(),\n                    (void *)&resultAddr, false) ) \n        {\n            result = false;\n        }else{\n            addr = resultAddr;\n       }\n    }\n    return result;\n}\n\nAstNodePtr PCProcess::createUnprotectStackAST() {\n    // This is not necessary on power\n    return AstNode::nullNode();\n}\n\nbool Frame::setPC(Address newpc) {\n   Address pcAddr = getPClocation();\n   if (!pcAddr)\n   {\n       //fprintf(stderr, \"[%s:%u] - Frame::setPC aborted\", __FILE__, __LINE__);\n      return false;\n   }\n\n   //fprintf(stderr, \"[%s:%u] - Frame::setPC setting %x to %x\",\n   //__FILE__, __LINE__, pcAddr_, newpc);\n   if (getProc()->getAddressWidth() == sizeof(uint64_t)) {\n      uint64_t newpc64 = newpc;\n      if (!getProc()->writeDataSpace((void*)pcAddr, sizeof(newpc64), &newpc64))\n         return false;\n      sw_frame_.setRA(newpc64);\n   }\n   else {\n      uint32_t newpc32 = newpc;\n      if (!getProc()->writeDataSpace((void*)pcAddr, sizeof(newpc32), &newpc32))\n         return false;\n      sw_frame_.setRA(newpc32);\n   }\n\n   return true;\n}\n\nbool AddressSpace::getDyninstRTLibName() {\n//full path to libdyninstAPI_RT (used an _m32 suffix for 32-bit version)\n    startup_printf(\"dyninstRT_name: %s\\n\", dyninstRT_name.c_str());\n    if (dyninstRT_name.length() == 0) {\n        // Get env variable\n        if (getenv(\"DYNINSTAPI_RT_LIB\") != NULL) {\n            dyninstRT_name = getenv(\"DYNINSTAPI_RT_LIB\");\n        }\n        else {\n            std::string msg = std::string(\"Environment variable \") +\n                std::string(\"DYNINSTAPI_RT_LIB\") +\n               std::string(\" has not been defined\");\n            showErrorCallback(101, msg);\n            return false;\n        }\n    }\n\n    // Automatically choose 32-bit library if necessary.\n    const char *modifier = \"\";\n    const char *name = dyninstRT_name.c_str();\n\n    const char *split = P_strrchr(name, '/');\n    if ( !split ) split = name;\n    split = P_strchr(split, '.');\n    if ( !split || P_strlen(split) <= 1 ) {\n        // We should probably print some error here.\n        // Then, of course, the user will find out soon enough.\n        startup_printf(\"Invalid Dyninst RT lib name: %s\\n\", \n                dyninstRT_name.c_str());\n        return false;\n    }\n\n    if (getAddressWidth() == 4 &&\n        (sizeof(void *) == 8)) {\n       // Need _m32...\n       if (P_strstr(name, \"_m32\") == NULL) {\n          modifier = \"_m32\";\n       }\n    }\n\n    const char *suffix = split;\n    if( getAOut()->isStaticExec() ) {\n        suffix = \".a\";\n    }else{\n        if( P_strncmp(suffix, \".a\", 2) == 0 ) {\n            // This will be incorrect if the RT library's version changes\n            suffix = \".so\";\n        }\n    }\n\n    dyninstRT_name = std::string(name, split - name) +\n                     std::string(modifier) +\n                     std::string(suffix);\n\n    startup_printf(\"Dyninst RT Library name set to '%s'\\n\",\n            dyninstRT_name.c_str());\n\n    // Check to see if the library given exists.\n    if (access(dyninstRT_name.c_str(), R_OK)) {\n        std::string msg = std::string(\"Runtime library \") + dyninstRT_name\n        + std::string(\" does not exist or cannot be accessed!\");\n        showErrorCallback(101, msg);\n\tcerr << msg << endl;\n        return false;\n    }\n    return true;\n}\n\n// floor of inferior malloc address range within a single branch of x\n// for 32-bit ELF PowerPC mutatees\nAddress region_lo(const Address x) {\n   const Address floor = getpagesize();\n\n   assert(x >= floor);\n\n   if ((x > floor) && (x - floor > getMaxBranch()))\n      return x - getMaxBranch();\n\n   return floor;\n}\n\n\n// floor of inferior malloc address range within a single branch of x\n// for 64-bit ELF PowerPC mutatees\nAddress region_lo_64(const Address x) {\n   const Address floor = getpagesize();\n\n   assert(x >= floor);\n\n   if ((x > floor) && (x - floor > getMaxBranch()))\n      return x - getMaxBranch();\n\n   return floor;\n}\n\n\n// ceiling of inferior malloc address range within a single branch of x\n// for 32-bit ELF PowerPC mutatees\nAddress region_hi(const Address x) {\n   const Address ceiling = ~(Address)0 & 0xffffffff;\n\n   assert(x < ceiling);\n\n   if ((x < ceiling) && (ceiling - x > getMaxBranch()))\n      return x + getMaxBranch();\n\n   return ceiling;\n}\n\n\n// ceiling of inferior malloc address range within a single branch of x\n// for 64-bit ELF PowerPC mutatees\nAddress region_hi_64(const Address x) {\n   const Address ceiling = ~(Address)0;\n\n   assert(x < ceiling);\n\n   if ((x < ceiling) && (ceiling - x > getMaxBranch()))\n      return x + getMaxBranch();\n\n   return ceiling;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/common/docs/decoding_diagram.png",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/common/docs/rose_structure.png",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/symtabAPI/doc/paradyn_logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/symtabAPI/doc/symtab-text.txt",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/symtabAPI/doc/symtabAPI.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/symtabAPI/doc/API/Symtab/.DS_Store",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/patchAPI/doc/paradyn_logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/patchAPI/doc/patchAPI.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/patchAPI/doc/figure/abstraction/img.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/patchAPI/doc/figure/command/img.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/.git/objects/pack/pack-df0dbee161191055e0179140410389dcb2609135.idx",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/.git/objects/pack/pack-df0dbee161191055e0179140410389dcb2609135.pack",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/parseAPI/doc/paradyn_logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/parseAPI/doc/parseAPI.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/stackwalk/doc/paradyn_logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/stackwalk/doc/stackwalk.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/instructionAPI/doc/instructionAPI.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/instructionAPI/doc/paradyn_logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/instructionAPI/doc/fig/instruction_representation.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/instructionAPI/doc/fig/ownership_graph.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/instructionAPI/doc/fig/refman.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/instructionAPI/doc/fig/decoder_use.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/instructionAPI/doc/fig/full_inheritance_graph.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/instructionAPI/doc/fig/deref-eval.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/instructionAPI/doc/fig/ast_ownership.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/proccontrol/doc/proccontrol.docx",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/proccontrol/doc/proccontrol.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dynC_API/doc/paradyn_logo.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dynC_API/doc/dynC_API.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI/doc/dyninstAPI.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dyninstAPI/doc/dyninstAPI.docx",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dataflowAPI/doc/dataflowAPI.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-dyninst-10.2.0-7pdynez5otvrqznsqjmlowr6crzliptp/spack-src/dataflowAPI/doc/paradyn_logo.pdf"
    ],
    "total_files": 1300
}