{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ACE-INSTALL.html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><!--  -->\n  <meta content=\"text/html; charset=ISO-8859-1\" http-equiv=\"content-type\"><title>Building and Installing ACE and Its Auxiliary Libraries and Services</title>\n\n  <link rev=\"made\" href=\"mailto:d.schmidt@vanderbilt.edu\"></head>\n\n<body bgcolor=\"#ffffff\" link=\"#000fff\" text=\"#000000\" vlink=\"#ff0f0f\">\n\n<hr>\n<h1>Building and Installing ACE and Its Auxiliary Libraries and Services</h1>\n\n<h2>Synopsis</h2>\n\nThe file explains how to build and install ACE, its Network Services,\ntest suite and examples on the various OS platforms and compilers that\nit has been ported to.  Please consult the <a href=\"NEWS\">NEWS</a> and\n<a href=\"ChangeLog\">ChangeLog</a> files to see whether any recent changes\nto the release will affect your code.  In addition, you should check\nout our <a\nhref=\"docs/ACE-development-process.html\">development\nprocess</a>.  As you start working with ACE, we suggest you get copies\nof the <a\nhref=\"http://www.cs.wustl.edu/%7Eschmidt/ACE/book1/\">C++NPv1</a>, <a\nhref=\"http://www.cs.wustl.edu/%7Eschmidt/ACE/book2/\">C++NPv2</a>, and\n<a href=\"http://www.riverace.com/acebooks/\">APG</a> books to help\nguide you after you've built and installed ACE.  You should also\nconsult the <a\nhref=\"docs/ACE-FMM.html\">ACE\nFrequently Made Mistakes page</a>.  If you encounter any problems or\nwould like to request an enhancement, then use our <a\nhref=\"docs/usage-bugzilla.html\">bug\ntracking system</a> to submit a report in accordance with our <a\nhref=\"docs/ACE-bug-process.html\">bug\nreport process</a>.<p>\n\n</p><h2>Document Index</h2>\n\n<ul>\n  <li><a href=\"#platforms\">Platforms, C++ Compilers, and Support</a>\n  </li><li><a href=\"#installpre\">Installation prerequisites</a>\n  </li><li><a href=\"#aceinstall\">Building and Installing ACE</a>\n  </li><li><a href=\"#svcsinstall\">Building and Installing ACE Network Services</a>\n  </li><li><a href=\"#sslinstall\">Building and Installing The ACE_SSL Library</a>\n  </li><li><a href=\"#guireactor_install\">Building and Using GUI Reactors Libraries</a>\n  </li><li><a href=\"#installnotes\">Installation Notes</a>\n  </li><li><a href=\"#g++\">Compiling ACE with GNU g++</a>\n  </li><li><a href=\"#minimum_build\">What Do I Need to Build for TAO?</a>\n  </li><li><a href=\"#resource_requirements\">System Resource Requirements</a>\n  </li><li><a href=\"#MPC\">General MPC Information</a>\n  </li><li><a href=\"#eclipse\">Working with ACE in Eclipse</a>\n  </li><li><a href=\"#advanced\">Advanced Topics</a>\n  </li><li><a href=\"#power\">Building from Subversion</a>\n</li></ul>\n\n\n<p></p><hr><p>\n</p><h2><a name=\"platforms\">Platforms, C++ Compilers, and Support</a></h2>\n\n<p>ACE has been ported to a large number of platforms using many different\ncompilers over the years.\nThe <a href=\"http://www.dre.vanderbilt.edu/\">DOC group</a>,\n<a href=\"http://www.riverace.com/\">Riverace</a>,\n<a href=\"http://www.theaceorb.com/\">OCI</a>,\n<a href=\"http://www.remedy.nl/\">Remedy IT</a>, and members of the ACE\nuser community have all contributed ports to make ACE the successful\nand far-reaching toolkit it is today.  Any UNIX/POSIX/Windows\nvariation is probably an easy target platform for ACE.  If you have\n<a href=\"docs/ACE-porting.html\">porting questions</a> or have a problem\ncompiling the ACE source distribution, please contact one of the\ncommercial support companies, or send a copy of the\n<a href=\"PROBLEM-REPORT-FORM\">PROBLEM-REPORT-FORM</a>, located in the\nACE_wrappers directory, to either the <a href=\"news:comp.soft-sys.ace\">ACE\nNewsgroup</a> or the <a href=\"mailto:ace-users@list.isis.vanderbilt.edu\">ace-users\nmailing list</a>.\nThe DOC groups at Washington University, UC Irvine, and Vanderbilt\nUniversity provide only \"best effort\" support for non-sponsors for the\nlatest release, as described in <a href=\"docs/ACE-bug-process.html\">\ndocs/ACE-bug-process.html</a>.\nThus, if you need more \"predictable\" help, or help with earlier versions of\nACE, it's recommend that you check out the\n<a href=\"http://www.dre.vanderbilt.edu/support.html\">list of\ncommercial support companies</a> for additional assistance.\n</p>\n<p>The responsibility for maintaining ACE across the wide range of\nsupported platforms is divided among a few different groups:\n<ul>\n<li>The DOC group maintains platforms used in the course of their research\nand sponsored work</li>\n<li>Companies that provide support (Riverace, OCI, and Remedy IT), maintain\nplatforms they support in the course of their various service offerings</li>\n<li>The ACE user community maintains any other desired platforms.</li>\n</ul>\nThe <a href=\"http://www.dre.vanderbilt.edu/scoreboard/\" target=\"_blank\">\nbuild scoreboard</a>\nrecords the current status of build and regression testing during\ndevelopment by all of the above groups. It is available to all users wishing\nto provide build results. Members of the ACE community that maintain ACE on\nplatforms not maintained by the DOC group, Riverace, OCI, or Remedy IT are\nencouraged to provide build and regression test results for the scoreboard\nto ensure that all in-use platforms are represented.\nSee the <a href=\"https://raw.githubusercontent.com/DOCGroup/autobuild/master/README\" target=\"_blank\">autobuild README</a> for more information about\nhow to set up a build; contact one of the above groups to inquire about how\nto get your build results recorded on the scoreboard.</p>\n<p>Because older\nplatforms that are not maintained tend to fall into a broken state and\nclutter the ACE sources with code that is no longer used, the development\nteam reserves the right to remove ACE configuration files and source code\nspecific to inactive platform configurations that are not\nlisted on the scoreboard.</p>\n<p>The table below summarizes each group's role and where you can get more\ndetailed information.  For information on TAO's platform coverage and\nsupport, please also see <a href=\"TAO/TAO-INSTALL.html\">TAO's install\ndocument</a>.</p><p>\n\n<table border=\"1\" width=\"75%\">\n<caption><b>Groups Involved in ACE Development and Support<br></b></caption>\n<thead>\n  <tr valign=\"top\">\n    <th>Group</th>\n    <th>Platforms</th>\n    <th>For more information</th>\n  </tr>\n</thead><tbody>\n  <tr>\n    <th>DOC Group</th>\n    <td>Windows 2000, XP (MSVC++ 7.1, 8, 9, and 10);\n        many versions of Linux/Intel (many compilers).\n    </td>\n    <td>DOC sites at <a href=\"http://www.dre.vanderbilt.edu/\">ISIS</a>,\n        <a href=\"http://doc.ece.uci.edu/\">UCI</a> and\n        <a href=\"http://tao.doc.wustl.edu/\">Washington University</a>\n    </td>\n  </tr>\n  <tr>\n    <th>Riverace</th>\n    <td>Offers ACE\n        <a href=\"http://www.riverace.com/training.htm\">training</a>,\n        <a href=\"http://www.riverace.com/support.htm\">support</a> and\n        <a href=\"http://www.riverace.com/consult.htm\">consulting services</a>\n        for many platforms including AIX, HP-UX, Linux, Solaris, and Windows.\n    </td>\n    <td>Riverace's <a href=\"http://www.riverace.com/support.htm\">ACE\n        Support page</a>.</td>\n  </tr>\n  <tr>\n    <th>OCI</th>\n    <td>Maintains ACE on certain platforms required for their TAO\n        software and service offerings.\n    </td>\n    <td>OCI's <a href=\"http://www.theaceorb.com/\">web site</a> and\n        the TAO <a href=\"TAO/TAO-INSTALL.html\">install document</a></td>\n  </tr>\n  <tr>\n    <th>Remedy IT</th>\n    <td>Maintains ACE on many platforms required for their ACE and\n        TAO service offerings. We support AIX,\n        Embarcadero C++ Builder,\n        Windows CE, MinGW, Microsoft Visual C++, GCC,\n        Cygwin, VxWorks 6.x (kernel and rtp), OpenVMS on IA64,\n        BlueCAT Linux, RedHat Linux, Fedora, MacOSX, Solaris,\n        Tru64, SuSE Linux on Alpha/IA32/EM64T/IA64, RTEMS, QNX, LynxOS,\n        HPUX on IA64, and Android.\n        The Intel C++ compiler is supported on\n        Windows 32/64bit, Linux IA32/EM64T/IA64, MacOSX.\n    </td>\n    <td>Remedy IT <a href=\"http://www.remedy.nl/\">web site</a> and\n        the TAO <a href=\"TAO/TAO-INSTALL.html\">install document</a>\n    </td>\n  </tr>\n  <tr>\n    <th>PrismTech</th>\n    <td>Maintains ACE on certain platforms required for their TAO\n        software and service offerings, including LynxOS.\n    </td>\n    <td>PrismTech's <a href=\"http://www.prismtech.com/\">web site</a></td>\n  </tr>\n  <tr>\n    <th>ACE user community</th>\n    <td>Responsible for continued maintenance and testing of platforms\n        to which ACE has been ported, but aren't supported by the\n        above groups. These include\n        Digital UNIX (Compaq Tru64) 4.0 and 5.0;\n        IRIX 6.x; UnixWare 7.1.0;\n        Linux on PPC; OpenMVS;\n        Tandem; SCO; FreeBSD; NetBSD; OpenBSD;\n        Macintosh OS X; OS/9; PharLap ETS 13;\n        QNX RTP and Neutrino 2.0; Interix (Windows Services for Unix)\n    </td>\n  </tr><tr>\n    <th>Not maintained</th>\n    <td>The following platforms have been ported to in the past but are\n        no longer maintained and may be removed from ACE at any time.\n        If you want to have support for these environments contact one\n        of the commercial support organisations. The platforms include:\n        Chorus; DG/UX; HP-UX 9, 10 and 11.00; pSOS;\n        SunOS 4.x and Solaris with SunC++ 4.x; VxWorks 5.4 and earlier;\n        Microsoft Visual C++ 5, 6, and 7.0; Borland C++ Builder 4, 5, 6, and 2006.\n        For up-to-date listings on platform that are deprecated and pending\n        removal from ACE, please see the <a href=\"NEWS\">NEWS file</a>.\n    </td>\n  </tr>\n    <tr><td></td>\n  </tr>\n</tbody></table></p><p>\n\n</p><p>Although the DOC group has provided outstanding support for ACE\nover the years, ACE's success has greatly increased the amount of\neffort required to keep up with its maintenance, answer users'\nquestions, and give design guidance. Riverace offers world-class\ncommercial services to support ACE users.  OCI, PrismTech, and Remedy\noffer similar services for TAO, allowing the DOC group's primary focus\nto shift back to their main goal: <em>research</em>. The DOC group is\nfundamentally focused on (and <a\nhref=\"http://www.cs.wustl.edu/%7Eschmidt/resume-grants.html\">funded\nby</a>) advanced R&amp;D projects. The group continues to be\nintimately involved in ACE+TAO development and maintenance, but with\nrevised priorities for maintenance. The <a\nhref=\"docs/ACE-bug-process.html\">bug\nfixing policies</a> followed by the DOC group are designed to strike a\nbalance between their many <a\nhref=\"http://www.cs.wustl.edu/%7Eschmidt/research.html\">research\nprojects</a> and their commitment to the ACE+TAO <a\nhref=\"http://www.cs.wustl.edu/%7Eschmidt/ACE-users.html\">user\ncommunity</a>.  Naturally, we will be happy to accept well-tested\npatches from the ACE+TAO user community for any platforms that aren't\nsupported by the DOC group, Riverace, OCI or Remedy IT. </p><p>\n\n</p><p></p><hr><p>\n</p><h2><a name=\"installpre\">Installation prerequisites</a></h2>\n\n<p> ACE (as well as TAO and CIAO) use <A\nHREF=\"http://downloads.ociweb.com/MPC/docs/html/MakeProjectCreator.html\">MPC</A>\n(MakeProjectCreator) to generate files used by all supported build\ntools (such as GNUmakefiles for UNIX based platforms, sln and vcproj\nfiles for VC71/VC8 and Embarcadero makefiles) on various platforms. To\nhelp new users to bootstrap quickly the release bundles of ACE (as\nwell as TAO) include all needed files to use the build\ninstructions in this document.\n\n</p>\n<p>\nIf it is necessary to generate\nfiles for build tools for other compilers, one must\nrun MPC to generate the\nappropriate files.  Please see <a href=\"MPC/docs/USAGE\">USAGE</a>, <a\nhref=\"MPC/docs/README\">README</a>, and <a\nhref=\"bin/MakeProjectCreator/README\">README for ACE</a> files for\ndetails. The options that have been used to generate the above build\nfiles can be found in <a\nhref=\"bin/MakeProjectCreator/config/global.features\">\nglobal.features</a> file.\n</p>\n\n<hr>\n<h1><a name=\"aceinstall\">Building and Installing ACE</a></h1>\n\nThe following sections explain how to build ACE on:\n<ul>\n<li><a href=\"#unix\">UNIX</a></li>\n<li><a href=\"#win32\">Windows (including MinGW and Cygwin)</a></li>\n<li><a href=\"#vxworks\">VxWorks</a></li>\n<li><a href=\"#android\">Android</a></li>\n<li><a href=\"#interix\">Interix</a></li>\n<li><a href=\"#rtems\">RTEMS</a></li>\n</ul>\n\n<h2>General Rules</h2>\n<ul>\n  <li><p>Many features in ACE can be modified by defining some macros in\n      <code>$ACE_ROOT/ace/config.h</code>.  These macros should\n      <em><b>always</b></em> appear <em><b>before</b></em> including\n      your platform specific config file.</p>\n  </li><li><p>However, if you want to undefine/redefine macros defined in the\n      platform specific config file, these <code>#undef</code> should\n      come <em><b>after</b></em> the config file.</p>\n  </li><li> If you're planning to build ACE on multiple platforms, you may\n      want to consider <a href=\"#cloning\">cloning the source tree</a>\n      before you start. <p>\n</p></li></ul>\n\n<hr align=\"left\" width=\"50%\">\n<h2><a name=\"unix\">Building and Installing ACE on UNIX</a></h2>\n\nAs of ACE 6.0.6, you can building ACE on\nUNIX with:\n<ol>\n  <li><a href=\"#unix_traditional\">Traditional ACE/GNU Make Configuration</a></li>\n</ol>\nThe <a href=\"#win32\">build process for Windows</a> is different from\nthe UNIX methods.\n\n<h3><a name=\"unix_traditional\">Using the Traditional ACE/GNU Configuration</a></h3>\n<p>\nHere's what you need to do to build ACE using GNU Make and ACE's traditional\nper-platform configuration method:</p>\n\n<ol>\n  <li>Install <a href=\"http://ftp.gnu.org/pub/gnu/make/\">GNU make</a>\n      3.79.1 or greater on your system (available via <code>http</code>\n      anonymous <code>ftp</code> from <code>ftp.gnu.org</code> in the\n      <code>pub/gnu/make/</code> directory).\n      You <em>must</em> use GNU make when using ACE's traditional\n      per-platform configuration method or ACE won't compile.\n  </li>\n  <li>Add an environment variable called ACE_ROOT that contains the\n      name of the root of the directory where you keep the ACE wrapper\n      source tree.  The ACE recursive Makefile scheme needs this information.\n      There are several ways to set the ACE_ROOT variable.  For example:\n      <blockquote>\n      TSCH/CSH:\n      <code>setenv ACE_ROOT /home/cs/faculty/schmidt/ACE_wrappers</code>\n      </blockquote>\n      <blockquote>\n      BASH or Bourne Shell:\n      <code>export ACE_ROOT=/home/cs/faculty/schmidt/ACE_wrappers\n      </code>\n      </blockquote>\n      <p>\n      If you're building a number of versions of ACE, however, (e.g., for\n      different OS platforms or for different releases of ACE) you might use\n      the following approach (assuming TCSH/CSH):\n      <blockquote>\n      <code>setenv ACE_ROOT $cwd</code>\n      </blockquote>\n  </li>\n  <li>Create a configuration file, <code>$ACE_ROOT/ace/config.h</code>,\n      that includes the appropriate platform/compiler-specific\n      header configurations from the ACE source directory. For example:\n<blockquote><code>\n#include \"ace/config-linux.h\"\n</code></blockquote>\n      The platform/compiler-specific configuration file\n      contains the #defines that are used throughout ACE to indicate\n      which features your system supports. See the\n      <code>$ACE_ROOT/ace/README</code> file for a description of these\n      macro settings. If you desire to add some site-specific or build-specific\n      changes, you can add them to your config.h file; place them\n      <strong>before</strong> the inclusion of the platform-specific\n      header file.\n      <p>\n      There are config files for most versions of UNIX.  If there\n      isn't a version of this file that matches your\n      platform/compiler, you'll need to make one.  Please send email\n      to the <a href=\"mailto:ace-users@list.isis.vanderbilt.edu\">ace-users</a> list\n      if you get it working so it can be added to the master ACE\n      release.</p>\n  </li>\n\n  <li>Create a build configuration file,\n      <code>$ACE_ROOT/include/makeinclude/platform_macros.GNU</code>,\n      that contains the appropriate platform/compiler-specific\n      Makefile configurations, e.g.,\n<blockquote><code>\ninclude $(ACE_ROOT)/include/makeinclude/platform_linux.GNU\n</code></blockquote>\n      This file contains the compiler and Makefile directives that are\n      platform/compiler-specific. If you'd like to add make options, you\n      can add them before including the platform-specific configuration.<p>\n      NOTE! There really is not a # character before 'include' in the\n      platform_macros.GNU file. # is a comment character.\n  </li>\n  <li>If you wish to install ACE (using &quot;make install&quot;), set the\n      installation prefix in platform_macros.GNU.\n<blockquote><code>\nINSTALL_PREFIX = /usr/local\n</code></blockquote>\n      Headers will be installed to $INSTALL_PREFIX/include, executables to\n      $INSTALL_PREFIX/bin, documentation and build system files to\n      $INSTALL_PREFIX/share and libraries to $INSTALL_PREFIX/lib.  The library\n      directory can be customized by setting INSTALL_LIB (for example,\n      INSTALL_LIB=lib64).  With INSTALL_PREFIX set, RPATH will be enabled for\n      all executables and shared libraries.  To disable RPATH (for example,\n      if $INSTALL_PREFIX/$INSTALL_LIB is already a system-known location for\n      shared libraries such as those listed in /etc/ld.so.conf), set the make\n      macro install_rpath to 0 by adding install_rpath=0 to platform_macros.GNU.\n  </li>\n  <li>Note that because ACE builds shared libraries, you'll need to set\n      LD_LIBRARY_PATH (or equivalent for your platform) to the directory\n      where binary version of the ACE library is built into. For example,\n      you probably want to do something like the following:\n      <blockquote>\n      <code>% setenv LD_LIBRARY_PATH $ACE_ROOT/lib:$LD_LIBRARY_PATH</code></blockquote>\n      </blockquote>\n      or\n      <blockquote>\n      <code>% export LD_LIBRARY_PATH=$ACE_ROOT/lib:$LD_LIBRARY_PATH</code></blockquote>\n      </blockquote>\n  </li>\n  <li>When all this is done, hopefully all you'll need to do is type:\n      <blockquote>\n      <code>% make</code></blockquote>\n      at the ACE_ROOT directory.  This will build the ACE\n      library, tests, the examples, and the sample applications.\n      Building the entire ACE release can take a long time and consume\n      lots of disk space, however.  Therefore, you might consider\n      cd'ing into the <code>$ACE_ROOT/ace</code> directory and\n      running <code>make</code> there to build just the ACE library.\n      As a sanity check, you might also want to build and run the\n      automated <a href=\"tests/README\">\"one-button\" tests</a> in\n      <code>$ACE_ROOT/tests</code>. Finally, if you're also\n      planning on building <a href=\"http://www.cs.wustl.edu/%7Eschmidt/TAO.html\">TAO</a>, you\n      should build the <a href=\"http://www.cs.wustl.edu/%7Eschmidt/PDF/gperf.pdf\">gperf</a>\n      perfect hash function generator application in\n      <code>$ACE_ROOT/apps/gperf</code>.\n  </li>\n  <li>If you've set the INSTALL_PREFIX before building, now run\n<blockquote><code>% make install</code></blockquote>\n  </li>\n  <li>If you need to regenerate the <code>ace/Svc_Conf_y.cpp</code> file,\n      you'll need to\n      get <a href=\"http://ftp.gnu.org/pub/gnu/bison/\">GNU Bison</a>.\n      However, you should rarely, if ever, need to do this.\n  </li>\n</ol>\n\n<hr align=\"left\" width=\"50%\">\n\n<h2><a name=\"win32\">Building and Installing ACE on Windows</a></h2>\n\n<p>This section contains instructions for building ACE on Microsoft\nWindows with a variety of compilers and development environments.</p>\n\n<p>First, if you are upgrading from an older release, the recommended practice\nis to start with a clean directory. Unpacking the newer release over an older\none will not clean up any old files, and trying to use the environment's\n\"Clean\" command will probably not account for all existing files.</p>\n\n<p>For using MPC and our perl based test framework we recommend\nour windows users to use <a href=\"http://www.activestate.com/Products/ActivePerl/\"> Active\nState Perl.</a></p>\n\n<ul>\n<li><a href=\"#msvc\">Microsoft Visual Studio</a></li>\n<li><a href=\"#embarcadero\">Embarcadero C++Builder</a></li>\n<li><a href=\"#mingw\">MinGW</a></li>\n<li><a href=\"#cygwin\">Cygwin</a></li>\n</ul>\n\n</p><p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h3><a name=\"msvc\">Building and Installing ACE on Windows with\nMicrosoft Visual Studio</a></h3>\n\n<p>ACE contains project files for\nVisual Studio 2009 (VC9), and Visual Studio 2010 (VC10).\nVisual Studio 2005 supports building for\ndesktop/server Windows as well as for Windows CE and Windows Mobile. Since\nnot all users will be interested in the CE/Mobile capability, these platforms\nhave separate solution and project files from the desktop/server Windows.\nFurthermore, VC7.1, VC8, VC9, and 10 use different file formats but the same file\nsuffixes (<code>.sln</code> and <code>.vcproj</code>). To support both\nenvironments, ACE supplies files with different names for the different\ndevelopment and target platforms. The platform/name mapping is shown below.\nAll solution files have a <code>.sln</code> suffix and all project files have\na <code>.vcproj</code> suffix.</p>\n\n<p>\nThe free Visual C++ 2008 Express Edition will work in place of the traditional\nVisual Studio editions.  All the other notes in this document\nthat are for VC8 / VC9 also apply to the express edition.  MFC, 64-bit, and\nCE/mobile options are not available with the express edition.  64-bit binaries\ncan be built with the compiler and linker included in the <a href=\"http://www.microsoft.com/downloads/details.aspx?FamilyID=E6E1C3DF-A74F-4207-8586-711EBE331CDC&displaylang=en\">Windows SDK</a>, using nmake as the build system (generate nmake makefiles with mwc.pl -type nmake).</p>\n\n<table border=\"1\" width=\"400\">\n<caption><b>Mapping of Platform to Solution/Project File Name</b></caption>\n<thead>\n  <tr valign=\"top\">\n    <th>Platform</th>\n    <th>File Name</th>\n  </tr>\n</thead><tbody>\n  <tr>\n    <th>VC7.1</th>\n    <td><i>name</i><code>_vc71</code>\n    </td>\n  </tr>\n  <tr>\n    <th>VC8 for desktop/server</th>\n    <td><i>name</i><code>_vc8</code>\n    </td>\n  </tr>\n  <tr>\n    <th>VC8 for Windows CE/Mobile</th>\n    <td><i>name</i><code>_WinCE</code>\n    </td>\n  </tr>\n  <tr>\n    <th>VC9 for desktop/server</th>\n    <td><i>name</i><code>_vc9</code>\n    </td>\n  </tr>\n  <tr>\n    <th>VC10 for desktop/server</th>\n    <td><i>name</i><code>_vc10</code>\n    </td>\n  </tr>\n</tbody></table>\n\n<p>The VC++ compiler and linker can now be invoked from GNU make just like\nmost UNIX builds.  Follow the instructions in the <a href=\"#unix_traditional\">\nACE/GNU Configuration</a> sections and see the additional information in the\ncomments of\n<a href=\"include/makeinclude/platform_win32_msvc.GNU\">platform_win32_msvc.GNU</a>.\n</p>\n\n<p>If you happen to open a VC7.1 file from within VC8, it will offer to convert\nthe file to the newer format for you. With the stock VC8, do not do this;\nVisual Studio will crash while attempting to convert the large\nsolution and project files to build ACE. Simply refuse the conversion and\nopen the file with the correct format. Note that Microsoft has fixed this\nproblem. See\n<a href=\"https://msdn.microsoft.com/visualc/downloads/default.aspx\">\nhttps://msdn.microsoft.com/visualc/downloads/default.aspx</a> for information.\n</p>\n\n<ol>\n  <li>Uncompress the ACE distribution into a directory, where it will\n  create a ACE_wrappers directory containing the distribution.  The\n  ACE_wrappers directory will be referred to as ACE_ROOT in the\n  following steps -- so  ACE_ROOT\\ace would be C:\\ACE_wrappers\\ace if\n  you uncompressed into the root directory.<br>\n      <br>\n  </li><li>Create a file called <code>config.h</code> in the ACE_ROOT\\ace\n      directory that contains: <br>\n      <br>\n      <code>#include \"ace/config-win32.h\"</code><br>\n      <br>\n\n  </li><li>The static, DLL and MFC library builds are kept in\n  different workspaces. Files with names *_Static contain project\n  files for static builds. Workspaces for static and DLL builds will be\n  available through the stock release at DOC group's website. The\n  workspaces for MFC are not available and have to be generated using\n  MPC. Please see <a href=\"MPC/docs/README\">MPC's README</a> for\n  details.<br><br>\n  </li><li>Now load the solution file for ACE (ACE_ROOT/ACE.sln).<br>\n      <br>\n  </li><li>Make sure you are building the configuration (i.e, Debug/Release)\n  the one you'll use (for example, the debug tests need the debug\n  version of ACE, and so on).  All these different configurations are\n  provided for your convenience.  You can either adopt the scheme to\n  build your applications with different configurations, or use\n  <code>ace/config.h</code> to tweak with the default settings on\n  NT.<br>  <strong>Note:</strong> If you use the dynamic libraries,\n  make sure you include ACE_ROOT\\lib in your PATH whenever you run\n  programs that uses ACE.  Otherwise you may experience problems\n  finding ace.dll or aced.dll.<br>\n      <br>\n  </li><li>To use ACE with MFC libraries, also add the following to\n      your <code>config.h</code> file.  Notice that if you want to\n      spawn a new thread with CWinThread, make sure you spawn the\n      thread with THR_USE_AFX flag set.<br>\n      <br>\n      <code>#define ACE_HAS_MFC 1</code><br>\n      <br>\n      By default, all of the ACE projects use the DLL versions of the\n      MSVC run-time libraries.  You can still choose use the static (LIB)\n      versions of ACE libraries regardless of run-time libraries.  The\n      reason we chose to link only the dynamic run-time library is that\n      almost every NT box has these library installed and to save disk\n      space.  If you prefer to link MFC as a static library into ACE, you\n      can do this by defining <code>ACE_USES_STATIC_MFC</code> in your\n      <code>config.h</code> file.  However, if you would like to link\n      everything (including the MSVC run-time libraries) statically,\n      you'll need to modify the project files in ACE yourself.<p>\n  </p></li><li>Static version of ACE libraries are built with\n      <code>ACE_AS_STATIC_LIBS</code><br> defined.  This macro should\n      also be used in application projects that link to static ACE\n      libraries<br>\n      <br>\n      Optionally you can also add the line <br>\n      <br>\n      <code>#define ACE_NO_INLINE</code><br>\n      <br>\n      before the #include statement in ACE_ROOT\\ace\\config.h to disable\n      inline function and reduce the size of static libraries (and your\n      executables.)<br>\n      <br>\n  </li><li>ACE DLL and LIB naming scheme:<br>\n      <br>\n      We use the following rules to name the DLL and LIB files in ACE\n      when using MSVC.<br>\n      <br>\n      \"Library/DLL name\" + (Is static library ? \"s\" :\n      \"\") + (Is Debugging enable ? \"d\" : \"\")\n      + {\".dll\"|\".lib\"}<br>\n      <br>\n</li></ol>\n\n<p>More information for ACE/TAO on MSVC can be found\n<a href=\"docs/msvc_notes.txt\">here</a>.  The doxygen version of this\ndocument is available under Related Topics in the ACE Library.</p>\n\n<b>ACE TESTS</b><p>\n\nThe tests are located in ACE_ROOT\\tests.  There is also a solution in\nthat directory to build all the tests (tests.sln)</p><p>\n\nOnce you build all the tests (Batch Build works well for this), you\ncan run perl script <code>run_test.pl</code> in the\n<code>tests</code> directory to try all the tests.</p><p>\n\n<a name=\"win32nonic\">\n<b> BUILDING ACE ON A WIN32 MACHINE THAT LACKS A NETWORK CARD </b></a></p><p>\n\n<a name=\"win32nonic\">You may want to run ACE on a non-networked machine. To do so, you must\ninstall TCP/IP and configure it to ignore the absence of a network\ncard.  This is one method:\n\n</a></p><ol>\n<a name=\"win32nonic\">  <li>Run Control Panel\n  </li><li>Choose Network from Control Panel\n  </li><li>Add Adapter: MS Loopback Adapter\n  </li><li>Configure MS Loopback Adapter with 802.3 (default)\n  </li><li>Add Protocol: TCP/IP Protocol\n  </li><li>Configure TCP/IP Protocol with a valid IP address and subnet mask.\n      Leave everything else at the default settings.\n  </li><li>Add Service: Workstation\n  </li><li>Exit and Restart System\n  </li><li>Run Control Panel again\n  </li><li>Choose Services from Control Panel\n  </li><li>The following services are not necessary and may\n      be set to Disabled Startup: <br>\n      Alerter<br>\n      Computer Browser<br>\n      Net logon<br>\n      Messanger<br>\n  </li><li>Choose Network from Control Panel\n  </li><li>Confirm the following setup. This is all you need to run ACE:<br>\n      Installed Software:<br>\n      Computer Browser<br>\n      MS Loopback Adapter Driver<br>\n      TCP/IP Protocol<br>\n      Workstation<br>\n      Installed Adapter Cards:<br>\n      MS Loopback Adapter<p>\n</p></li></a></ol>\n\n<hr align=\"left\" width=\"50%\"><p>&nbsp;</p>\n<h3><a name=\"embarcadero\">Building and Installing ACE on Windows with Embarcadero C++</a></h3>\n\nIf you are building for a machine without a network card, you may want\nto check <a href=\"#win32nonic\">here</a> first. <p>\n\n</p><ol>\n  <li>Uncompress the ACE distribution into a directory, where it will\n      create an\n      ACE_wrappers directory containing the source.  The ACE_wrappers\n      directory will be referred to as ACE_ROOT in the following steps -- so\n      <code>ACE_ROOT\\ace</code> would be <code>C:\\ACE_wrappers\\ace</code> when you uncompressed into the\n      root directory.<br>\n      <br>\n  </li><li>Create a file called <code>config.h</code> in the ACE_ROOT\\ace\n      directory that contains at least: <br>\n      <br>\n      <code>#include \"ace/config-win32.h\"</code><br>\n      <br>\n  </li><li>Open a RAD Studio Command Prompt.<br>\n      <br>\n  </li><li>Set the ACE_ROOT environment variable to point to the ACE_wrappers\n      directory. For example:<br>\n      <br>\n      <code>set ACE_ROOT=C:\\ACE_wrappers</code><br>\n      <br>\n  </li><li>Add ACE_wrappers\\lib and ACE_wrappers\\bin to the PATH environment variable:<br>\n      <br>\n      <code>set PATH=%ACE_ROOT%\\lib;%ACE_ROOT%\\bin;%PATH%</code><br>\n      <br>\n  </li><li>Change to the ACE_ROOT\\ace directory.<br>\n      <br>\n      <code>cd %ACE_ROOT%\\ace</code><br>\n      <br>\n  </li><li>Generate the bmake makefiles using <a href=\"#MPC\">MPC</a>. Use the <code>bmake</code> project type for C++ Builder:<br>\n      <br>\n      <code>%ACE_ROOT%\\bin\\mwc.pl -type bmake</code><br>\n      <br>\n  </li><li>You can build several different versions of ACE by setting the following optional environment\n      variables before you run make:<br>\n      <br>\n      Set the environment variable below to build a debug version of ACE<br>\n      <code>set DEBUG=1</code><br>\n      <br>\n      Set the environment variable below to build a unicode version of ACE<br>\n      <code>set UNICODE=1</code><br>\n      <br>\n      Set the environment variable below to build a version of ACE with\n      Codeguard support. Should only be used when DEBUG is also set<br>\n      <code>set CODEGUARD=1</code><br>\n      <br>\n      By default we are using the clang based compilers. At the moment you\n      want to compile using the old bcc32 compiler set the CLASIC environment variable<br>\n      <code>set CLASSIC=1</code><br>\n      <br>\n      Set the environment variable below to build a version of ACE optimized\n      for a certain CPU. For this there are special compiler flags\n      (-3/-4/-5/-6), see the Embarcadero help for more info.<br>\n      <code>set CPU_FLAG=-6</code><br>\n      <br>\n      You can then start the build with the command\n      <br><code>make -f Makefile.bmak all</code><br>\n      <br>\n      You may also enable the options by passing them as command line options to make, for example:<br>\n      <code>make -f Makefile.bmak -DDEBUG all</code><br>\n      <br>\n  </li><li>Build ACE by doing:<br>\n      <br>\n      <code>make -f Makefile.bmak all</code><br>\n      <br>\n</li></ol>\n\n<p>\n\nNote that when you run <code>make</code> in a sub directory you give <code>make -f Makefile.bmak all</code>. The <code>all</code> is needed to make sure the complete project is build.<p>\n\nThe C++ Builder port has been done by Jody Hagins, <a href=\"mailto:chris@kohlhoff.com\">Christopher Kohlhoff</a> and <a href=\"mailto:jwillemsen@remedy.nl\">Johnny Willemsen</a>. </p><p>\n\n<b>ACE TESTS</b></p><p>\n\nBefore you can build the tests you need to build the protocols directory.\nChange the directory to ACE_ROOT\\protocols and start: </p><p>\n</p><blockquote><code>\n%ACE_ROOT%\\bin\\mwc.pl -type bmake<br>\nmake -f Makefile.bmak all\n</code></blockquote><p>\n\nThe tests are located in ACE_ROOT\\tests, change to this directory.\nYou build then the tests with the following commands:</p><p>\n</p><blockquote><code>\n%ACE_ROOT%\\bin\\mwc.pl -type bmake<br>\nmake -f Makefile.bmak all\n</code></blockquote><p>\n\nOnce you build all the tests, you can run the automated test script using:</p><p>\n</p><blockquote><code>perl run_test.pl</code></blockquote><p> in the\n<code>tests</code> directory to try all the tests. You need to make\nsure the ACE bin and lib directory (in this case\n<code>%ACE_ROOT%\\bin</code> and <code>%ACE_ROOT%\\lib</code>)\nare on the path before you try to run the tests. If your executables are\ncompiled into a subdirectory, add <code>-ExeSubDir subdirname</code> to the\ncommand.</p><p>\n\n<p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h3><a name=\"mingw\">Building and Installing ACE on Win32 with MinGW/ MSYS</a></h3>\n\n<p>\nIf you are building for a machine without a network card, you may want\nto check <a href=\"#win32nonic\">here</a> first.\n\n</p><p>\nBuilding and installing ACE on <a href=\"http://www.mingw.org/\">MinGW</a>\nuses a mix of a <a href=\"#unix\">UNIX</a> building process and\n<a href=\"#win32\">Win32</a> configuration files.\nAlso, as MinGW uses GNU g++, you may want to take\na look at the <a href=\"#g++\">Compiling ACE with GNU g++</a> section.\n\n</p><p>\nYou will need the MinGW build tools and libraries, downloable from\n<a href=\"http://www.mingw.org/\"><tt>http://www.mingw.org</tt></a>.\n\n<br>\nFor our build we require the packages\n<b><tt>MinGW</tt></b> and <b><tt>MSYS</tt></b>.\n\n</p><ol>\n\n  <li> Install the MinGW tools (including the MinGW Development toolkit) into a common directory, say c:/mingw.\n      <br><br>\n\n  </li><li> Install the MSYS tools into a common directory, say c:/msys.\n       <br><br>\n\n  </li><li> Open a MSYS shell. Set your <tt>PATH</tt> environment variable so\n       your MinGW's <tt>bin</tt> directory is first:\n\n       <blockquote><code></code><pre>       % export PATH=/c/mingw/bin:$PATH\n       </pre></blockquote>\n\n  </li><li> Add an <tt>ACE_ROOT</tt> environment variable pointing to the\n       root of your ACE wrappers source tree:\n\n       <blockquote><code></code><pre>       % export ACE_ROOT=/c/work/mingw/ACE_wrappers\n       </pre></blockquote>\n\n       From now on, we will refer to the root directory of the ACE\n       source tree as <tt>$ACE_ROOT</tt>.\n       <br><br>\n\n  </li><li> Create a file called <tt>config.h</tt> in the\n       <tt>$ACE_ROOT/ace</tt> directory that contains:\n\n       <blockquote><code></code><pre>       #include \"ace/config-win32.h\"\n       </pre></blockquote>\n\n  </li><li> Create a file called <tt>platform_macros.GNU</tt> in the\n       <tt>$ACE_ROOT/include/makeinclude</tt> directory containing:\n\n       <blockquote><code></code><pre>       include $(ACE_ROOT)/include/makeinclude/platform_mingw32.GNU\n       </pre></blockquote>\n\n       In the above text, don't replace <tt>$(ACE_ROOT)</tt> with the\n       actual directory, GNU make will take the value from the\n       environment variable you defined previously.\n\n       <p>\n       If you lack Winsock 2, add the line\n\n       </p><blockquote><code></code><pre>       winsock2 = 0\n       </pre></blockquote>\n\n       before the previous one.\n       <br><br>\n\n     <p>\n       If you want to install ACE (using \"make install\") and want all the <tt>.pc</tt> files generated,\n     set the installation prefix in platform_macros.GNU.\n       </p><blockquote><code></code><pre>      INSTALL_PREFIX=/c/ACE\n       </pre></blockquote>\n     Headers will be installed to $INSTALL_PREFIX/include, documentation and\n     build system files to $INSTALL_PREFIX/share and libraries to $INSTALL_PREFIX/lib. With INSTALL_PREFIX set, RPATH will be enabled.\n     To disable RPATH (for example, if $INSTALL_PREFIX/$INSTALL_LIB is already\n     a system-known location for shared libraries), set the make macro\n     install_rpath to 0 by adding install_rpath=0 to platform_macros.GNU.\n\n       <br><br>\n\n  </li><li> In the MSYS shell, change to the $ACE_ROOT/ace directory and\n       run make:\n\n       <blockquote><code></code><pre>       % cd $ACE_ROOT/ace\n       % make\n       </pre></blockquote>\n\n       <p>\n       This should create <tt>libACE.dll</tt> (the Win32 shared library) and\n       <tt>libACE.dll.a</tt> (the Win32 import library for the DLL).\n       Note that the name for the ACE DLL follows the MinGW convention, which itself\n       resembles UNIX.\n\n       </p><p>\n       If you want static libs also, you may run:\n\n       </p><blockquote><code></code><pre>       % make static_libs_only=1\n       </pre></blockquote>\n\n  </li><li> Run make install:\n\n    <blockquote><code></code><pre>       % make install\n       </pre></blockquote>\n     <p>\n       This should create <tt>ACE.pc</tt> to use with pkg-config.\n       </p>\n\n  </li><li> <a name=\"mingwrunpath\">\n       The same rules for Win32 search of DLLs apply for MinGW. If you\n       want to run some ACE programs from the MSYS shell, you may\n       need to add the directory for <tt>libACE.dll</tt> to your PATH:\n\n       </a><blockquote><code></code><pre><a name=\"mingwrunpath\">       % export PATH=/c/work/mingw/ACE_wrappers/ace:$PATH\n       </a></pre></blockquote>\n\n</li></ol>\n\n<a name=\"mingwrunpath\"><b>ACE TESTS</b></a><p>\n\n<a name=\"mingwrunpath\">The tests are located in <tt>$ACE_ROOT/tests</tt>.\nAfter building the library, you can change to that directory and run\nmake:\n\n       </a></p><blockquote><code></code><pre><a name=\"mingwrunpath\">       % cd $ACE_ROOT/tests\n       % make\n       </a></pre></blockquote>\n\n<p>\n<a name=\"mingwrunpath\">Once you build all the tests, you can run\n<code>run_tests.pl</code> in the\n<code>tests</code> directory to try all the tests:\n\n       </a></p><blockquote><code></code><pre><a name=\"mingwrunpath\">       % perl run_test.pl\n       </a></pre></blockquote>\n\n<p>\n<a name=\"mingwrunpath\">If you are using ACE as a DLL, you will need to modify your PATH\nvariable as explained </a><a href=\"#mingwrunpath\">above</a>.\n\n</p><p>\nYou may want to check <tt>$ACE_ROOT/tests/README</tt> for the status\nof the various tests on MinGW and the different Windows flavors.\n\n</p><p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h3><a name=\"cygwin\">Building and Installing ACE on Win32 with Cygwin</a></h3>\n\n<p>\nIf you are building for a machine without a network card, you may want\nto check <a href=\"#win32nonic\">here</a> first.\n\n</p><p>\nBuilding and installing ACE on <a href=\"http://www.cygwin.com/\">Cygwin</a>\nuses the <a href=\"#unix\">UNIX</a> building process.\nAlso, as Cygwin uses GNU g++, you may want to take\na look at the <a href=\"#g++\">Compiling ACE with GNU g++</a> section.\n\n</p><p>\nYou will need the Cygwin build tools and libraries, downloable from\n<a href=\"http://www.cygwin.com/\"><tt>http://www.cygwin.com</tt></a>.\nFor our build we require the following packages besides the packages the\nsetup selects by default:\n<a name=\"cygwinpacks\">\n</a></p><blockquote>\n<a name=\"cygwinpacks\"><b><tt>gcc (version 3.3.3), cygserver, make, perl, binutils</tt></b>.\n</a></blockquote>\n\n<ol>\n\n<a name=\"cygwinpacks\">  <li> Install Cygwin (this can be easy downloading and running\n       <a href=\"http://cygwin.com/setup.exe\"><tt>setup.exe</tt></a>\n       from the Cygwin site). For working with ACE we recommend\n       to select <code>DOS</code> as default text file type.\n       <br><br>\n\n  <li> Open a Cygwin shell. Set your <tt>PATH</tt> environment variable so\n       your Cygwin <tt>bin</tt> directory is first:\n\n       <blockquote><code></code><pre>       % export PATH=//c/cygwin/bin:$PATH\n       </pre></blockquote>\n\n       or\n\n       <blockquote><code></code><pre>       % export PATH=/cygdrive/c/cygwin/bin:$PATH\n       </pre></blockquote>\n\n       <p>\n       Note Cygwin uses ``<tt>/</tt>'' as directory separator,\n       and ``<tt>//X</tt>'' as a notation for Win32 drive <tt>X</tt>.\n       Note also that you <em>can't</em> use ``<tt>c:/cygwin/bin</tt>''\n       because, for Cygwin,\n       ``<tt>:</tt>'' is path separator character, as in UNIX.\n       <br><br>\n\n  </p></li><li> Add an <tt>ACE_ROOT</tt> environment variable pointing to the\n       root of your ACE wrappers source tree (in this example c:/work/cygwin/ACE_wrappers):\n\n       <blockquote><code></code><pre>       % export ACE_ROOT=/cygdrive/c/work/cygwin/ACE_wrappers\n       </pre></blockquote>\n\n       <p>\n       Note here you <em>can't</em> use the ``<tt>//X</tt>'' Cygwin\n       notation as this is seen by Cygwin's compiler and it doesn't\n       support that (it <em>does</em> support ``<tt>/</tt>'' as directory\n       separator however).\n\n       </p><p>\n       From now on, we will refer to the root directory of the ACE\n       source tree as <tt>$ACE_ROOT</tt>.\n       <br><br>\n\n  </p></li><li> Create a file called <tt>config.h</tt> in the\n       <tt>$ACE_ROOT/ace</tt> directory that contains:\n\n       <blockquote><code></code><pre>       #include \"ace/config-cygwin32.h\"\n       </pre></blockquote>\n\n  </li><li> Create a file called <tt>platform_macros.GNU</tt> in the\n       <tt>$ACE_ROOT/include/makeinclude</tt> directory containing:\n\n       <blockquote><code></code><pre>       include $(ACE_ROOT)/include/makeinclude/platform_cygwin32.GNU\n       </pre></blockquote>\n\n       In the above text, don't replace <tt>$(ACE_ROOT)</tt> with the\n       actual directory, GNU make will take the value from the\n       environment variable you defined previously.\n\n  </li><li> On the Cygwin shell, change to the $ACE_ROOT/ace directory and\n       run make:\n\n       <blockquote><code></code><pre>       % cd $ACE_ROOT/ace\n       % make\n       </pre></blockquote>\n\n       <p>\n       This should create <tt>libACE.dll</tt> (the Win32 shared library) and\n       <tt>libACE.dll.a</tt> (the Win32 import library for the DLL).\n       Note the name for the ACE DLL on Cygwin follows the UNIX convention.\n       <br><br>\n\n       </p><p>\n       If you want static libs also, you may run:\n\n       </p><blockquote><code></code><pre>       % make static_libs_only=1\n       </pre></blockquote>\n\n  </li><li> <a name=\"cygwinrunpath\">\n       The same rules for Win32 search of DLLs apply for Cygwin. If you\n       want to run some ACE programs from the Cygwin shell, you may\n       need to add the directory for <tt>libACE.dll</tt> to your PATH:\n\n       </a><blockquote><code></code><pre><a name=\"cygwinrunpath\">       # export PATH=//c/work/cygwin/ACE_wrappers/ace:$PATH\n       </a></pre></blockquote>\n\n<a name=\"cygwinrunpath\">       If you are using MPC-generated Makefiles, then the DLLs have been\n       placed in the lib directory instead of ace and thus your PATH\n       addition would need to look like this:\n\n       </a><blockquote><code></code><pre><a name=\"cygwinrunpath\">       # export PATH=//c/work/mingw/ACE_wrappers/lib:$PATH\n       </a></pre></blockquote>\n\n\n</li></ol>\n\n<a name=\"cygwinrunpath\"><b>ACE TESTS</b></a><p>\n\n<a name=\"cygwinrunpath\">The tests are located in <tt>$ACE_ROOT/tests</tt>.\nAfter building the library, you can change to that directory and run\nmake:\n\n       </a></p><blockquote><code></code><pre><a name=\"cygwinrunpath\">       % cd $ACE_ROOT/tests\n       % make\n       </a></pre></blockquote>\n\n<p>\n<a name=\"cygwinrunpath\">Once you build all the tests, you can run\n<code>run_tests.pl</code> in the\n<code>tests</code> directory to try all the tests:\n\n       </a></p><blockquote><code></code><pre><a name=\"cygwinrunpath\">       % perl run_test.pl\n       </a></pre></blockquote>\n\n<p>\n<a name=\"cygwinrunpath\">If you are using ACE as a DLL, you will need to modify your PATH\nvariable as explained </a><a href=\"#cygwinrunpath\">above</a>.\n\n</p><p>\nYou may want to check <tt>$ACE_ROOT/tests/README</tt> for the status\nof the various tests on Cygwin and the different Windows flavors.\n</p>\n\n<p></P>\n<hr align=left width=\"50%\">\n\n<p>\n<H2><a name=\"interix\">Building and Installing ACE on Win32 with Interix</H2>\n<P>Interix comes with a BSD style make; you need GNU make.\nMake builds easily under Interix or there is a prebuilt\npackage at: </P>\n<P><A\nhref=\"http://www.interopsystems.com/tools/warehouse.htm\">http://www.interopsystems.com/tools/warehouse.htm</A> </P>\n<P>If you are building for a machine without a network\ncard, you may want to check <A href=\"#win32nonic\" ><FONT color=#0000ff>here</FONT></A> first. </P>\n<P>This port was built and tested under Interix 3.5. a.k.a.\n<A href=\"http://www.microsoft.com/windows/sfu/\">Windows\nServices for UNIX 3.5.</A></P>\n<P>To build follow the <A href=\"#unix_traditional\" >Traditional ACE/GNU Make\nConfiguration</A> instructions replacing the following include directives:</P>\n<P><TT>#include\n\"ace/config-win32-interix.h\"</TT> </P>\n<P>for the config.h header </P>\n<P>and: </P>\n<P><TT>include\n$(ACE_ROOT)/include/makeinclude/platform_win32_interix.GNU</TT></P>\n<P>for your platform_macros.GNU file.</P>\n<P>ACE should build fine with just '<TT>make</TT>', the only other option tried thus far is\n'<TT>make static_libs_only=1</TT>' which also works. Any\nother options may not work.</P>\n<P><b>ACE TESTS</B> </P>\n<p>The tests are located in <TT>$ACE_ROOT/tests</TT>. After building the library, you can\nchange to that directory and run make: </P><code></CODE>\n<P><TT>% cd $ACE_ROOT/tests </TT><BR><TT>% make </TT>\n<p>Once you build all the tests, you can run <code>run_test.pl</CODE> in the <code>tests</CODE> directory to try all the tests: </P>\n<P><TT>% run_test.pl </TT></P>\n<p>If you are using ACE as a shared library, you will need\nto modify your LD_LIBRARY_PATH as explained in<A href=\"#unix_traditional\" ><FONT color=#800080>Traditional ACE/GNU Make Configuration</FONT></A>. </P>\n<p></P>\n\n<p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h2><a name=\"vxworks\">Building and Installing ACE on VxWorks</a></h2>\nFor the most part, you should be able to follow the instructions above\nto build ACE and applications that use it.  Start with the\n<a href=\"#unix\">Unix instructions</a> above to build ACE and the\napplications that use it.  Please see below for more information on\n<a href=\"#VxWorks/NT\">building ACE on NT hosts for VxWorks targets</a>.<p>\n\nA few notes on VxWorks builds (thanks to\n<a href=\"mailto:Paul_von_Behren@stortek.com\">Paul von Behren</a> and\n<a href=\"http://www.remedy.nl\">Remedy IT</a> for these notes):</p>\n<p>\n</p><ul>\n  <li>VxWorks builds are done with a cross compiler, i.e., the compiles\n      are done on a workstation creating object modules which are\n      downloaded and loaded into the VxWorks target system.<p>\n  </p></li><li>C++ object modules must be post-processed by a VxWorks\n      utility called \"munch\" to set up calls to static constructors and destructors.\n      ACE integrates the makefile includes/rules files\n      distributed with VxWorks to achieve maximum compatibility and reuse the target\n      specifications and buildcommands defined by Windriver itself.\n      The original ACE support for VxWorks included a perl script called\n      <a href=\"bin/ace_ld\">$ACE_ROOT/bin/ace_ld</a>,\n      which was called from the Makefiles, replacing\n      the traditional <code>ld</code> step. Although this script is currently still\n      available it is not used anymore.<BR>\n      You must have perl installed to use <code>ace_ld</code>.  If perl is not on your path, you'll\n      have to set <code>PERL_PATH</code> to the full path (including\n      perl.exe), either in your\n      <code>$(ACE_ROOT)/include/makeinclude/platform_macros.GNU</code>\n      or in your environment.<p>\n  </p></li><li>Wind River provides GCC/G++ cross-compilers for the\n      supported target platforms.  The executables are named cc&lt;target&gt;\n      and g++&lt;target&gt;; for example, ccppc and g++cpp for PowerPC\n      targets.<p>\n</p></li></ul>\n\nYou'll have to let ACE know the target type at compile time.  There\nare several ways to do this; please see the\n<code>$ACE_ROOT/include/makeinclude/platform_vxworks5.5.x.GNU</code>\nplatform file for detailed information.<p>\n\nThe VxWorks platform_vxworks*.GNU files are set up so that shared\nlibraries are not built on VxWorks, by default.  Only static\nlibraries, with .a extension, are built.  Therefore, it's not\nnecessary to set the LD_LIBRARY_PATH environment variable on your host\nsystem when building for VxWorks targets.  Please note, however, if\nyou use TAO on VxWorks that you will need to set your LD_LIBRARY_PATH\nto find the TAO IDL compiler libraries (installed in the ace\ndirectory) on the host.</p><p>\n\nThese non-default VxWorks kernel configuration <code>#defines</code>\nare required with ACE:</p><p>\n\n</p><pre>#define INCLUDE_CPLUS           /* include C++ support */\n#define INCLUDE_CPLUS_IOSTREAMS /* include iostreams classes */\n#define INCLUDE_POSIX_ALL       /* include all available POSIX functions */\n</pre>\n\nFor completeness, here are the non-default <code>#defines</code> that\nwe used for VxWorks 5.3.1/g++ 2.7.2:\n\n<pre>#define INCLUDE_CPLUS           /* include C++ support */\n#define INCLUDE_CPLUS_IOSTREAMS /* include iostreams classes */\n#define INCLUDE_CONFIGURATION_5_2 /* pre-tornado tools */\n#define INCLUDE_DEBUG           /* pre-tornado debugging */\n#define INCLUDE_LOADER          /* object module loading */\n#define INCLUDE_NET_SYM_TBL     /* load symbol table from network */\n#define INCLUDE_SYM_TBL_SYNC    /* synchronize host and target symbol tables */\n#define INCLUDE_NFS             /* nfs package */\n#define INCLUDE_PING            /* ping() utility */\n#define INCLUDE_POSIX_ALL       /* include all available POSIX functions */\n#define INCLUDE_RDB             /* remote debugging package */\n#define INCLUDE_RLOGIN          /* remote login */\n#define INCLUDE_RPC             /* rpc package */\n#define INCLUDE_SECURITY        /* shell security for network access */\n#define INCLUDE_SHELL           /* interactive c-expression interpreter */\n#define INCLUDE_SHOW_ROUTINES   /* show routines for system facilities*/\n#define INCLUDE_SPY             /* spyLib for task monitoring */\n#define INCLUDE_STARTUP_SCRIPT  /* execute start-up script */\n#define INCLUDE_STAT_SYM_TBL    /* create user-readable error status */\n#define INCLUDE_SYM_TBL         /* symbol table package */\n#define INCLUDE_UNLOADER        /* object module unloading */\n#define INCLUDE_WINDVIEW        /* WindView command server */\n</pre>\n\nAlso, automatic construction/destruction of static objects\nshould be enabled.<p>\n\nIf you use TAO, it's also a good idea to increase the\n<code>NUM_FILES</code> parameter from its default of 50 to,\nsay, 1000.</p><p>\n\nPlease note that those VxWorks kernel configuration parameters\nare set in the VxWorks configAll.h file.  You must rebuild your\nVxWorks kernel after modifying that file.</p><p>\n\nIf you're first getting started with ACE and/or VxWorks, I recommend\njust building the ACE library and tests first.  (Some of the ACE\nexamples, in System_V_IPC, don't build on VxWorks yet.)  Then try\nrunning the tests.  Please see $ACE_ROOT/tests/README for the latest\nstatus of the ACE tests on VxWorks.</p><p>\n\nPlease note that the <code>main</code> entry point is renamed to\n<code>ace_main</code> (configurable via ACE_MAIN) on VxWorks with g++,\nto comply with its restriction against using <code>main</code>.\nIn addition, ACE_HAS_NONSTATIC_OBJECT_MANAGER is enabled by default\nto cleanly support construction and destruction of static objects.\nPlease see the <a href=\"#NonStaticObjectManager\">Non-static\nACE_Object_Manager</a> discussion for the important implication\nof this feature.</p><p>\n\nACE threads (VxWorks tasks) can be named, for example, by supplying a\nnon-null argument to the Thread_Manager spawn routines.  However,\nnames beginning with <code>\"==ace_t==\"</code> are forbidden because\nthat prefix is used internally by ACE.</p><p>\n\nYou can spawn a new task to run <code>ace_main</code>, using either\nVxWorks <code>sp</code>, or ACE'S <a name=\"spa\"><code>spa</code></a>.\n<code>spa</code> can be used from the VxWorks shell to pass arguments\nto <code>ace_main</code>.  Its usage is:\n\n</p><pre><code>\nspa ace_main, \"arg1\" [, ...]\n</code></pre>\n\nAll arguments must be quoted, even numbers. You can start also ace_main\nwithout spawning another thread by using:<p>\n\n</p><pre><code>\nspaef ace_main, \"arg1\" [, ...]\n</code></pre>\n\nACE also provides the function <code>vx_execae</code> which is capable of running\n<code>ace_main</code> in a separate thread, wait for the task to finish and return\nthe return code from <code>ace_main</code>:\n\n<pre><code>\nint vx_execae (FUNCPTR acemain,char* arguments, int prio = 0, int opt = 0, int stacksz = 0);\n</code></pre>\n<p>\nYou could call this from the VxWorks shell like:\n</p>\n<pre><code>\nmy_rc = vx_execae ace_main, \"-o server.ior -ORBDottedDecimalAddresses 1\"\n</code></pre><p>\n\nWhen <code>prio</code>, <code>opt</code> or <code>stacksz</code> are omitted or specified\nas <code>0</code> default values will be used. See the VxWorks shell documentation for the\ndefaults for <code>prio</code> and <code>opt</code>. For <code>stacksz</code> the default is\n<code>ACE_NEEDS_HUGE_THREAD_STACKSIZE</code>.\nThe <code>arguments</code> string will be parsed and passed on to <code>ace_main</code> as\na regular <code>argc</code> and <code>argv</code>.</p><p>\n\nBe aware of the fact that when you execute <code>ace_main</code> directly from the VxWorks\nshell argc will be zero and argv* will also be zero. Using <code>argv[0]</code> will not return\nthe program name, but will result in a crash.<br>\nThe ACE helper functions <code>spa</code>, <code>spaef</code> and <code>vx_execae</code> prevent\nthis problem by building a regular <code>argc</code> and <code>argv</code> which also contain a\nvalid <code>argv[0]</code> element.</p>\n\n<h3><a name=\"VxWorks/SharedLibs\">Building Shared Libraries for VxWorks</a>.</h3>\n\n<strong>NOTE</strong>: Since VxWorks support is currently being reworked with\nan initial focus on static builds the support for shared builds is momentarily\nbroken. This will be remedied(!) as soon as possible.<p>\n\nACE supports shared libraries for VxWorks, but only with the g++\ncompiler.  To build shared libraries instead of the default static\nlibraries, added <code>shared_libs_only=1</code> to either your\n<code>ACE_wrappers/include/makeinclude/platform_macros.GNU</code> or\nyour <code>make</code> invocation.  Then, be sure to load the ACE (and\nany other) shared library before loading your executable(s).</p><p>\n\nA shared library for VxWorks uses the same code as for a static\n(non-shared) library.  However, calls to static constructors/\ndestructors are added.  The code in the shared library <strong>must</strong>\nbe reentrant if you shared it between programs (tasks).  The\nACE library meets this requirement.</p><p>\n\nShared libraries reduce build time, executable size, and load\ntime of the executable.  But, you must manually load the shared\nlibrary before loading your executable(s) with a command such as:\n</p><pre><code>\n-&gt; ld &lt; libACE.so\n</code></pre>\nShared libraries can be unloaded the same way an executable\n(module) is unloaded.<p>\n\n<strong>NOTE</strong>: Shared libraries on VxWorks aren't the same as\nshared libraries on other operating systems.  In particular, there is\nno support for creating copies of writeable global (static) data in\nthe shared library.  This includes the singleton ACE_Object_Manager\ninstance pointer.  If you share global data between separate programs,\nthey may not work properly.  See the discussion of shared code and\nreentrancy in the VxWorks' <em>Programmers Guide</em>.</p><p>\n\nInstead of trying to run separate programs onto a VxWorks target, we\nrecommend creating just one program, and spawning a thread for each\ntask.  The TAO IDL_Cubit test <a href=\"TAO/performance-tests/Cubit/TAO/IDL_Cubit/collocation_test.cpp\">collocation\ntest</a> is a good example.</p><p>\n\n</p><h3><a name=\"VxWorks/LinkToKernel\">Linking ACE and/or TAO Libraries into the VxWorks Kernel</a>.</h3>\n\nIt's easy to link your ACE and/or TAO libraries into the VxWorks kernel.\nJust build <a href=\"#VxWorks/SharedLibs\">shared versions</a>, but\ndisable the munch step.  The easiest way to do that is to set the\n<code>LD</code> make variable to the name of your linker.  For\nexample, to build a libACE.so for PowerPC that can be linked into\nthe kernel:\n<pre>% cd $ACE_ROOT/ace\n% make LD=ldppc shared_libs_only=1\n</pre>\nAfter building the shared lib, link it into the kernel by setting\nthe <code>MACH_EXTRA</code> make variable in the kernel configuration\nMakefile.  Then, build the kernel using <code>make exe</code>.<p>\n\n</p><h3><a name=\"VxWorksTestScript\">Using the one-button ACE tests with VxWorks</a>.</h3>\n\nIt is possible to generate a script to execute all ACE tests. You can do this by executing\n</a></p><blockquote><code></code><pre><a name=\"vxworksscript\">% perl run_test.pl -v -o > run_test.vxworks\n</a></pre></blockquote>\n\nThe ACE tests write their output files in a directory named\n<code>log/</code>, below the current (<code>tests</code>) directory.<br/>\n</p>\n<p>\nTo run the tests from the build directory on an NT host where you crossbuild your\nVxWorks ACE/TAO you can set up the Target Server File System (TSFS) in your Target Server\nconfiguration. If you f.i. set the root for the TSFS to the root directory of your builddisk\nyou can set the default directory for the target by issueing the following command\nfrom a Host shell: '@cd \"/tgtsvr/{path to ACE}/ACE_wrappers/tests\"'.\nThe '@' addition makes sure this command is executed for the target environment and not the\nlocal host shell environment.\nIf you also issue the command 'cd {path to ACE}/ACE_wrappers/tests' you can execute the\ngenerated one button testscript like: '&lt; run_test.vxworks'.\n</p>\n<p>\nRunning the ACE tests automatically from the ACE autobuild tool using Target Server and Host\nshell options is also supported.\n</p>\n<p>\nIf you don't have NFS included in your VxWorks kernel, you can use these steps, provided by\n<a href=\"mailto:clarence_m_weaver@md.northgrum.com\">Clarence M. Weaver</a>,\nto run the tests and capture their output:</p><p>\n</p><ol>\n  <li>What I did was create a log directory on the boot NT host of my VxWorks\n    target.<p>\n  </p></li><li>I copied all the test applications and the run_test.vxworks script to\n    the parent of the log directory.<p>\n  </p></li><li>Using the target shell not the host shell, I \"cd\" to the directory\n    containing the script and test programs.<p>\n  </p></li><li>Invoked the script using <code>&lt; run_test.vxworks</code> from this target shell.<p>\n</p></li></ol>\n\n<a href=\"mailto:Kirk.Davies@pobox.com\">Kirk Davies</a> provided this\napproach for running the ACE tests on Tornado II:\n\n<ul>\n  <li>Under Tornado II, I set up the Target Server File System (TSFS), and\n    the test logs get written to the log subdirectory under that.<p>\n  </p></li><li>You have to set an environment variable before running the tests:\n<pre>putenv(\"ACE_TEST_DIR=/tgtsvr\")\n</pre><p>\n</p></li></ul>\n\n</p><h3><a name=\"VxWorks/NT\">Building ACE on Tornado/NT hosts for VxWorks targets</a>.</h3>\nThe following, very useful information was contributed by\n<a href=\"http://people.qualcomm.com/cryan\">Chris Ryan</a>\nand <a href=\"mailto:Paul_von_Behren@stortek.com\">Paul von Behren</a>.\nPlease submit corrections, additions, or clarifications to the\nthe <a href=\"mailto:ace-users@list.isis.vanderbilt.edu\">ACE mailing list</a>.<p>\n\n<strong>NOTE:</strong>The make (version 3.74) that is provided with\nTornado 2.2 cannot be used to build ACE. A working version is available\nfrom the WindRiver support site, download the\n<a href=\"https://secure.windriver.com/cgi-bin/windsurf/downloads/view_binary.cgi?binaryid=838\">\nmake3_80.gvk_patches</a> and the\n<a href=\"https://secure.windriver.com/cgi-bin/windsurf/downloads/view_binary.cgi?binaryid=100340\">\nmake3_80.tor2_2.new_dependency_rules</a> package and install them.</p><p>\n\nUsing the Cygnus tools, this approach works:\n</p><ul>\n  <li>You'll build both your NT and VxWorks executables in the same\n    workspace (directory hierarchy).  This works because the NT\n    compiler and ACE's Makefiles put their output in different\n    directories.<p>\n  </p></li><li>Set up your\n    <code>ACE_wrappers/include/makeinclude/platform_macros.GNU</code>\n    as usual for VxWorks.  See\n    <a href=\"include/makeinclude/platform_vxworks5.5.x.GNU\">the\n    g++/VxWorks platform file</a> for more information.<p>\n  </p></li><li>Create an <code>ACE_wrappers/ace/config.h</code> file that looks\n    something like the following.\n<pre>#if defined (_MSC_VER)  ||  defined (__BORLANDC__)\n# include \"ace/config-win32.h\"\n#else\n# include \"ace/config-vxworks5.x.h\"\n#endif\n</pre><p>\n   </p></li><li>Set your <code>ACE_ROOT</code>, <code>CPP_LOCATION</code>,\n     <code>WIND_BASE</code>, and <code>WIND_HOST_TYPE</code> environment\n     variables.<p>\n   </p></li><li>Build for NT, then build for VxWorks.<p>\n</p></li></ul>\n\nA few additional Windows Notes, from Paul von Behren:<p>\n</p><ul>\n  <li>Cygnus has created a Win32 API which is compatible with a\n      \"generic\" Unix environment.  Using this library, they have ported a\n      large collection of GNU tools to WinNT/95 - including a port of\n      gcc/g++.  See <a href=\"http://www.cygnus.com/misc/gnu-win32/\">http://www.cygnus.com/misc/gnu-win32/</a>\n      A related link is <a href=\"ftp://ftp.cygnus.com/pub/gnu-win32/latest/\">ftp://ftp.cygnus.com/pub/gnu-win32/latest/</a><p>\n  </p></li><li>To set up the command-prompt build environment, run\n      <code>Tornado\\host\\x86-win32\\bin\\TorVars.bat</code>.  This is done\n      implicitly within the Tornado IDE.<p>\n  </p></li><li>To run <code>ace_ld</code>, you still need perl installed -\n      see <a href=\"http://www.activestate.com/software/default.htm\">http://www.activestate.com/software/default.htm</a>\n      for Windows perl.<p>\n  </p></li><li>The Tornado IDE will use a standard Makefile for project\n      builds, but does not have a GUI interface for managing the\n      Makefile.  By default, it will use rules from Makefile in the current\n      directory and you can configure it to add certain Makefile\n      targets to the project.  If you have <code>ACE_ROOT</code> defined\n      before starting Tornado, you can specify an ACE Makefile as a Tornado\n      target and Tornado will then call make from the menu.<p>\n</p></li></ul>\n\nAnd Chris Ryan's instructions for building for VxWorks targets\non Windows NT hosts:\n\n<ol>\n  <li>Path setting that seems to be working is:<p>\n      </p><pre>      /tornado/host/x86-win32/bin:\n      /tornado/host/x86-win32/lib/gcc-lib/i386-wrs-vxworks/cygnus-2.7.2-960126:\n      /tornado/host/x86-win32/i386-wrs-vxworks/bin:\n      /ace/ace_wrappers/bin:\n      /gnuwin32/b18/H-i386-cygwin32/bin:\n      /gnuwin32/b18/tcl/bin:\n      /WINNT/system32:\n      /WINNT:\n      /WINNT/system32/nls/ENGLISH:\n      /bin\n      </pre>\n\n      Other environment variables:<p>\n      </p><pre>      WIND_BASE=/tornado\n      SHELL=/bin/sh.exe\n      TERM=pcbios\n      TAO_ROOT=/ace/ACE_wrappers.vxworks/TAO\n      CPP_LOCATION=/Program Files/DevStudio/VC/bin/CL.EXE\n      GCC_EXEC_PREFIX=/tornado/host/x86-win32/lib/gcc-lib/\n      WIND_HOST_TYPE=x86-win32\n      ACE_ROOT=/ace/ACE_wrappers.vxworks\n      </pre>\n\n  </li><li><code>/tornado</code> is the root of the Tornado install\n      (<code>$WIND_BASE</code>).\n\n  </li><li><code>/gnuwin32</code> is the root of a Cygnus GNU download and install.\n\n  </li><li><code>/bin</code> content is:<p>\n      </p><pre>      aced.dll\n      cygwin.dll\n      perl.exe\n      rm.exe\n      sh.exe\n      true\n      </pre>\n\n      <code>aced.dll</code> is produced in an ACE NT source tree according to\n      documented procedure for Windows VC++ ACE build.\n\n      <code>cygwin.dll</code> is from the Cygnus GNU software download and install.\n\n  </li><li>Basically, follow documented procedure for ACE build/install on UNIX\n      platform.  Create a <code>$ACE_ROOT/ace/config.h</code> that looks\n      like:<p>\n      </p><pre>      #include \"config-vxworks5.x.h\"\n      </pre>\n\n      And create a\n      <code>$ACE_ROOT/include/makeinclude/platform_macros.GNU</code>\n      that looks like:<p>\n      </p><pre>\n      WIND_BASE = /tornado\n      WIND_HOST_TYPE = x86-win32\n      CPU = I80486\n      include $(ACE_ROOT)/include/makeinclude/platform_vxworks5.5.x.GNU\n      </pre>\n\n </li><li>When using cygnus windows GNUTools on WinNT you have to start\n make with \"--unix\" option, otherwise WinNT shell cmd.exe is responded and\n not sh.exe, i.e.,\n <pre> make --unix static_libs_only=1\n </pre>\n</li></ol>\n\n<h3>TAO on NT Tornado host, VxWorks target.</h3>\n\n<ol>\n  <li>Build ACE and TAO_IDL in the NT tree as already documented.\n      Be sure to build ACE's gperf on NT, in\n      <code>ACE_wrappers/apps/gperf/src</code>.<p>\n\n  </p></li><li>Build $TAO_ROOT/tao\n      <pre>      CPP_LOCATION=/Program Files/DevStudio/VC/bin/CL.exe\n      cd $TAO_ROOT/tao\n      /gnuwin32/b18/H-i386-cygwin32/bin/make\n      </pre>\n\n  </li><li>Build orbsvcs.\n      <pre>      CPP_LOCATION=/Program Files/DevStudio/VC/bin/CL.exe\n      cd $TAO_ROOT/orbsvcs/orbsvcs\n      /gnuwin32/b18/H-i386-cygwin32/bin/make\n      </pre>\n\n  </li><li>Build $TAO_ROOT/tests<p>\n</p></li></ol>\n\n\n<h3><a href=\"mailto:Jaffar_Shaikh@Mitel.COM\">Jaffar Shaikh's</a>\nNotes for Building ACE and TAO for VxWorks on NT host</h3>\n<b></b><p><b>Scenario:</b>  I was building the ACE and TAO for VxWorks\non NT. The target system was a PPC860 based chassis and another a NT\nhost based card.</p>\n<b><p>Host System:</p>\n</b><p>NT 4.0 workstation with 128 M RAM, 266MHz Pentium.</p>\n\n<b><p>Software Needed For Building TAO</p>\n</b><p>1) Active State's ActivePerl from\n<a href=\"http://www.activestate.com/software/default.htm\">http://www.activestate.com/software/default.htm</a>\n</p>\n\n<p>2) Tornado 2.2.1 from Windriver.</p>\n\n<p>3) Cygwin GNU to build TAO. It is available for NT as a freeware\nfrom the <a href=\"http://www.cygwin.com\">Cygwin</a> site</p>\n<p>The Cygwin Make (version 3.75) can only build the TAO not the\nTornado II make (version 3.74)</p>\n\n<b><p>Environment Variables:</p>\n</b><p>On NT the environment Variables are set as follows, (from\nControl Panel-&gt; System -&gt; Environment)</p>\n<p>I added following Environment variable entries to PATH </p>\n\n<p>C:\\Perl\\bin\\;</p>\n<p>C:\\tornado\\host\\x86-win32\\bin;</p>\n<p>C:\\tornado\\host\\x86-win32\\powerpc-wrs-vxworks\\bin;</p>\n<p>C:\\tornado\\host\\x86-win32\\lib\\gcc-lib\\powerpc-wrs-vxworks\\cygnus-2.7.2-960126;</p>\n<p>C:\\Corba\\Ace_wrappers\\bin;</p>\n<p>C:\\Cygwin\\bin;</p>\n<p>C:\\Cygwin\\usr\\bin;</p>\n<p>C:\\bin</p>\n\n<p>Additional Environmental variables and the values,</p>\n<p>CPU=PPC860</p>\n<p>LD_LIBRARY_PATH=</p>\n<p>SHELL=/bin/sh.exe</p>\n\n<p>ACE_ROOT=/Corba/ACE_wrappers</p>\n<p>WIND_BASE=/tornado</p>\n<p>SHELL=/bin/sh.exe</p>\n<p>TERM=pcbios</p>\n<p>TAO_ROOT=/Corba/ACE_wrapper/Tao</p>\n<p>CPP_LOCATION=/Program Files/Microsoft Visual Studio/VC98/Bin/CL.exe</p>\n<p>GCC_EXEC_PREFIX=/tornado/host/x86-win32/lib/gcc-lib/</p>\n<p>WIND_HOST_TYPE=x86-win32</p>\n<p>PERL_PATH=/perl/bin/perl.exe</p>\n\n<b><p>Directories of importance</p>\n</b><p>C:\\Corba         &lt;-- Ace_wrappers (uzipped)</p>\n<p>C:\\tornado   &lt;-- Tornado installed</p>\n<p>C:\\Perl      &lt;-- Perl installed</p>\n<p>C:\\Cygwin    &lt;-- Cygwin installed</p>\n<p>C:\\bin        &lt;-- Copy these files,</p>\n<p>              Ace.dll,       &lt;-- After you build Ace</p>\n<p>             gperf.exe       &lt;-- After you build gperf</p>\n<p>             Cygwin1.dll,    &lt;-- After you install Cygwin</p>\n<p>             perl.exe,       &lt;-- After you install Perl</p>\n<p>             rm.exe          &lt;-- After you install Cygwin</p>\n<p>             sh.exe          &lt;-- After you install Cygwin</p>\n<p>             true            &lt;-- After you install Cygwin</p>\n<b><p>Create Files</p>\n</b><p>1) C:\\Corba\\ACE_Wrappers\\ace\\config.h</p>\n<p>with entry</p>\n<p>#if defined (_MSC_VER) || (__BORLANDC__)</p>\n<p>     #include \"ace/config-win32.h\"</p>\n<p>#else</p>\n<p>     #define ACE_HAS_IP_MULTICAST </p>\n<p>     #include \"ace/config-vxworks5.x.h\"</p>\n<p>#endif</p>\n\n<p>2) C:\\Corba\\ACE_wrappers\\include\\makeinclude\\platform_macros.GNU</p>\n<p>WIND_BASE = /tornado</p>\n<p>WIND_HOST_TYPE = x86-win32</p>\n<p>include\n$(ACE_ROOT)/include/makeinclude/platform_vxworks5.5.x.GNU</p>\n<p>ACE_COMPONENTS=FOR_TAO (you may choose this option to build ACE\nlibrary that supports TAO)</p>\n\n<p></p>\n<b><p>Steps to Build</p>\n</b><p>1) Build Ace.dll under NT</p>\n<p>In  MS Visual C++ open C:\\Corba\\ACE_wrappers\\ace.sln And build Ace\nDLL</p>\n<p>Copy Ace.dll in C:\\bin</p>\n\n<p>2) Build gperf utility under NT</p>\n<p>In MS Visual C++ open\nC:\\Corba\\ACE_wrappers\\apps\\gperf\\src\\gperf.sln. Build gperf.exe</p>\n<p>Copy gperf.exe to C:\\bin</p>\n\n<p>3) Mount Directries in Cygwin</p>\n<p>Click on Cygnus Solutions -&gt; Cygwin Bash Shell</p>\n<p>Mount following directories by using mount command.</p>\n<p>create respective directories first then use mount command </p>\n\n<p>e.g. Create /Corba directory then use $mount -s \"C:\\Corba\"\n/Corba</p>\n\n<p>C:\\Corba  mount to /Corba</p>\n<p>C:\\tornado mount to /tornado</p>\n<p>C:\\Perl  mount to /perl</p>\n<p>C:\\Cygwin  mount to /cygwin</p>\n<p>C:\\bin  mount to /bin</p>\n<p>C:\\Program Files mount to /Program Files </p>\n\n<p>4) Build ACE in Cygwin</p>\n<p>$cd /Corba/ACE_wrappers/ace </p>\n<p>$make static_libs_only=1</p>\n<p>This will build your ace library libACE.a for VxWorks. If you use\noption shared_libs_only=1 then the build will be libACE.so. The other\noptions are same as follows.</p>\n\n<p>5) Build TAO in Cygwin</p>\n<p>$cd $TAO_ROOT/tao</p>\n<p>$make debug=0 optimize=1 static_libs_only=1 minimum_orb=1\n</p>\n<p>for shared libs use shared_libs_only=1</p>\n\n<p>The minimum Tao does not have following components,</p>\n<p>Dynamic Skeleton Interface</p>\n<p>Dynamic Invocation Interface</p>\n<p>Dynamic Any</p>\n<p>Interceptors</p>\n<p>Interface Repository</p>\n<p>Advanced POA features</p>\n<p>CORBA/COM interworking</p>\n\n<p>You may play around with above options to find suitable build for\nyour needs. For example when you give option debug=1 all the debug\nsymbols will be created and the build will huge in size. The debug\nsymbols are necessary when you want to debug your code.</p>\n\n<p></p><hr align=\"left\" width=\"50%\">\n\n<p></p><h2><a name=\"android\">Building and Installing ACE on Android</a></h2>\n<p>ACE can be built for Android by using the <a href=\"http://developer.android.com/tools/sdk/ndk/index.html\">Android Native Development\nKit's</a> standalone toolchain. Testing has been performed with\nNDK6 and NDK8e. The compilation creates native binaries,\nnot the standard Android Java applications.  The native binary applications\nthat use ACE can be run by either a shell or using the Java Runtime exec\noperation.</p>\n\n<p>The standalone toolchain must configured for a platform of android API level 8, 9, or 14. From your NDK root directory you can use their\n<code>make-standalone-toolchain.sh</code> script to set this up. For example:</p>\n<code>./build/tools/make-standalone-toolchain.sh --toolchain=arm-linux-androideabi-4.4.3 --arch=arm --platform=android-9 --install-dir=../arm_tools</code>\n<p>To set up an arm-specific tool chain. With the release of NDK r6, x86 targets are supported, so the setup command for that would be:</p>\n<code>./build/tools/make-standalone-toolchain.sh --toolchain=x86-4.4.3 --arch=x86 --platform=android-9 --install-dir=../x86_tools</code>\n<p>\nThe bin directory under the installed standalone toolchain dir must be added to your $PATH</p>\n<p>\nWhen using the Android NDK on a 64bit Linux system you have to install the\nfollowing 32bit packages: <code>libstdc++.i686 glibc.i686 ncurses-libs.i686 zlib.i686</code>\n</p>\n<p>Starting with NDK8e it is possible to use shared libraries on Android.</p>\n\n<p>Compilation requires using the NDK's standalone toolchain for it's\nexception and RTTI support.  The standard NDK compiler is not identified\nas supporting exceptions or RTTI, as of NDK r5c.</p>\n\n<p>It is not recommended to perform the build on a Windows host.  Using the\nNDK r5c, compilation issues were encountered on Windows XP, when the compiler\nfailed to recognize the name difference between the ACE file Signal.h and\nthe system file signal.h.</p>\n\n<p>You should be able to follow the instructions above to build ACE\nand applications that use it.  Use the\n<a href=\"#unix_traditional\">Unix  traditional instructions</a> above to build\nACE and the applications that use it.  Building TAO for Android requires\ncross compiling the code.<p>\n\n<p>Basic steps to build\n<ul>\n  <li>Setup up the standalone compiler toolchain by following the\n instructions provided with the Android NDK.</li>\n  <li>If building TAO, build the ACE and TAO tools (<code>ace_gperf</code> and\n <code>tao_idl</code>) for the compiling host.  Follow the cross compilation setup instructions provide\n in $TAO_ROOT/TAO-INSTALL.html.  Search for \"Using cross compilation\".</li>\n  <ul>\n    <li>Setup the Android build<ul>\n      <li>Create <code>ace/config.h</code>:  <i>#include \"ace/config-android.h\"</i></li>\n      <li>Create <code>include/makeinclude/platform_macros.GNU</code>:\n        <ul>\n          <li>set options for debug and optimized builds</li>\n          <li>inline is forced on and no-hidden-visibility</li>\n          <li>if you want to compile static, add <code>static_libs_only=1</code></li>\n          <li>Include the <code>include/makeinclude/platform_android.GNU</code> file.</li>\n          <li>If building TAO, set the tao idl options specified in the cross compiling instructions in <code>TAO-INSTALL.html</code></li>\n        </ul>\n      <li>Ensure the following environment variables are set:\n        <ul>\n          <li>$ANDROID_ARCH - either arm or x86. Note that x86 is only available in r6 and greater, and is still experimental. ANDROID_ARCH will be set to arm by default.</li>\n          <li>$NDK - the path to the android native development kit</li>\n          <li>$SYSROOT - the platform/arch directory. This defaults to <code>$NDK/platforms/android-9/arch-$ANDROID_ARCH</code>. </li>\n          <li>$HOST_ROOT - the path to the native TAO_IDL & gperf tools</li>\n          <li>$PATH - must include <code>$NDK_TOOLS/bin</code>.</li>\n        </ul>\n      </ul>\n    </li>\n    </li>\n    <li>Generate makefiles (if necessary).</li>\n    <li>Build with GNU make.</li>\n  </ul>\n</ul>\n</p>\n\n<p>Native applications using the ACE library can be installed onto devices by\nseveral different methods.  The files can be include as assets of Java\napplication and can be written by the Java application into it's executable\nprogram directory.  The native application can be downloaded by a Java\napplication and written into the Java applications executable program\ndirectory.  The native application can also be uploaded using the Software\nDevelopment Kit's ADB tool.  This method requires uploading the native\napplication to a directory that allows execution and having any output\ndirected to a writable directory.</p>\n\n<p></p><hr align=\"left\" width=\"50%\">\n<br/>\n<hr>\n<h1><a name=\"svcsinstall\">Building and Installing ACE Network Services</a></h1>\n\nThe following explains how to build the ACE <a href=\"http://www.cs.wustl.edu/%7Eschmidt/ACE-netsvcs.html\">network services</a> on <a href=\"#unixsvcs\">UNIX</a> and <a href=\"#win32svcs\">Win32</a>.\n\n<p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h2><a name=\"unixsvcs\">Building and Installing ACE Network Services on UNIX</a></h2>\n\nBuilding and installing ACE Network Services on UNIX is relatively\nsimple (the <a href=\"#win32svcs\">process</a> for Win32 is different).\nHere's what you need to do:<p>\n\n</p><ol>\n\n  <li>Build and install ACE on UNIX as described <a href=\"#unix\">earlier</a>.  If ACE is built at the root of the ACE\n      source tree (and ACE has been ported to your platform, of course) the\n      netsvcs static and shared object libraries should be built\n      automatically.  In addition, the server driver program\n      (<code>main</code>) contained in <a href=\"netsvcs/servers/main.cpp\">$ACE_ROOT/netsvcs/servers/main.cpp</a>\n      should also be compiled and ready to run.<p>\n\n  </p></li><li>Set your <code>LD_LIBRARY_PATH</code> environment variable to\n      where the binary version of the ACE netsvcs library.  For\n      example, you probably want to do something like the following<p>\n\n      </p><pre><code>\n      % setenv LD_LIBRARY_PATH $ACE_ROOT/ace:$ACE_ROOT/lib:$LD_LIBRARY_PATH\n      </code></pre><p>\n\n  </p></li><li>By default, if the shared object library is built, the services\n      are linked into the <code>main</code> driver program dynamically.\n      To specify which services should be linked in and executed, edit the\n      <a href=\"netsvcs/servers/svc.conf\">$ACE_ROOT/netsvcs/servers/svc.conf</a>\n      file.  During your editing, you should update information (such as the\n      default service port numbers) that affects the initialization of\n      services in this file.  Refer to the\n      <a href=\"http://www.cs.wustl.edu/%7Eschmidt/ACE_wrappers/ACE-papers.html#config\">Service Configurator</a>\n      documentation to learn how the configuration file is parsed and\n      how the services are dynamically linked and executed.  In\n      addition, refer to the <a href=\"http://www.cs.wustl.edu/%7Eschmidt/ACE-netsvcs.html\">Network\n      Services</a> documentation to learn more about how to configure\n      each network service.<p>\n\n  </p></li><li>If you only want to link the services statically, simply remove\n      or rename the svc.conf file.<p>\n</p></li></ol>\n\n<p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h2><a name=\"win32svcs\">Building and Installing ACE Network Services on Win32</a></h2>\n\nOnce again, there are supplied project for Visual C++ 7.1 or later for\nthe Network Services.<p>\n\n</p><hr>\n<h1><a name=\"sslinstall\">Building and Installing the ACE_SSL Library</a></h1>\n\n<p>The first step for all platforms is to build and install the\n<a href=\"http://www.openssl.org/\">OpenSSL</a> distribution.  The\nACE_SSL library must then be built according to the instructions\nbelow.</p>\n<h2>Unix</h2>\n<ol>\n  <li>Make sure the OpenSSL header file directory is in your compiler's\n      include path, and that OpenSSL libraries are in your library link/load\n      path (e.g. <code>LD_LIBRARY_PATH</code>). If you\n      installed OpenSSL into a set of directories unknown by the compiler,\n      set the <code>SSL_ROOT</code> environment variable to point to the\n      top level directory of your OpenSSL distribution, i.e. the one\n      containing OpenSSL's <code>include</code> and <code>lib</code>\n      directories.</li>\n  <li>Build ACE as described above. When building ACE, add\n      <code>ssl=1</code>\n      to your <code>make</code>\n      command line invocation, or add it to your\n      <code>platform_macros.GNU</code> file.</li>\n  <li>Build the ACE_SSL library in the <tt>$ACE_ROOT/ace/SSL</tt>\n      directory. The <code>ACE_ROOT</code> environment variable should be set\n      prior to this point.</li>\n</ol>\n<h2>Microsoft Visual Studio</h2>\n<ol>\n  <li>Set the <code>SSL_ROOT</code> environment variable to the location\n      of the directory containing the OpenSSL <code>inc32</code> and\n      <code>out32dll</code> directories.\n  <li>Add <code>ssl=1</code> to your MPC\n      <code>$ACE_ROOT/bin/MakeProjectCreator/config/default.features</code>\n      or <code>$ACE_ROOT/local.features</code> file.\n  <li>At the moment you are using OpenSSL v1.1 or\n      newer also add <code>openssl11=1</code> to your MPC\n      <code>$ACE_ROOT/bin/MakeProjectCreator/config/default.features</code>\n      or <code>$ACE_ROOT/local.features</code> file.\n  <li>Re-run MPC to add\n      support for building the ACE_SSL library to your MSVC++\n      workspaces and projects.\n  <li>Open the <code>ACE.sln</code> solution, and refer to the ACE build\n      and installation instructions above for details on creating a\n      <code>config.h</code> configuration header for this platform.  Once\n      the <code>config.h</code> file has been created, build the\n      <code>ACE_SSL</code> project.</li>\n</ol>\n<h2>Embarcadero C++</h2>\n<p>Support for building ACE's ACE_SSL library and TAO's SSLIOP\n   pluggable protocol with Embarcadero C++ does exist.\n<ol>\n  <li>Set the <code>SSL_ROOT</code> environment variable to the location\n      of the directory containing the OpenSSL <code>inc32</code> and\n      <code>out32</code> directories.\n  <li>Add <code>ssl=1</code> to your MPC\n      <code>$ACE_ROOT/bin/MakeProjectCreator/config/default.features</code>\n      or <code>$ACE_ROOT/local.features</code> file, and re-run MPC to add\n      support for building the ACE_SSL library to your Embarcadero C++ makefiles.\n  <li>Build ACE and TAO.\n</ol>\n</p>\n\n<hr><p>\n</p><h1><a name=\"guireactor_install\">Building and Using GUI Reactors Libraries</a></h1>\nThere is a general method for building and using <code>ACE_Reactors</code> for various GUI\nlibraries.\n    <h2> Building GUI Reactor Library </h2>\n    <ol>\n      <li>Try to generate build files using MPC. Inspect the output of MPC to find out which features are\n        necessary to build given reactor. Add these features to\n        <code>ACE_wrappers/bin/MakeProjectCreator/*.features</code> file, or pass them directly to MPC\n        using <code>-features</code> command line option. For example, for <code>FlReactor</code> the procedure\n        consists of five steps\n        <ol>\n          <li> In the first pass one gets that <code>x11</code> (X11 libraries) is missing.<br>\n            <code>$ mwc.pl -type gnuace\n              Skipping ACE_FlReactor (ace_flreactor.mpc), it requires x11.\n            </code></li>\n            Ensure that <code>X11</code> libraries are installed, then pass <code>x11=1</code> feature to MPC.\n          <li>In the second pass one gets that <code>gl</code> (OpenGL library) is missing.<br>\n            <code>$ mwc.pl -type gnuace -features x11=1 ace.mwc\n              Skipping ACE_FlReactor (ace_flreactor.mpc), it requires gl.\n            </code></li>\n            Ensure that <code>OpenGL</code> libraries are installed, then pass <code>gl=1</code> feature to MPC.\n          <li>In the third pass one gets that <code>fl</code> (Fast Light Toolkit) is missing.<br>\n            <code>$ mwc.pl -type gnuace -features x11=1,gl=1 ace.mwc\n              Skipping ACE_FlReactor (ace_flreactor.mpc), it requires fl.\n            </code></li>\n            Ensure that <code>Fast Light Toolkit</code> libraries are installed, then pass <code>fl=1</code>\n            feature to MPC.\n          <li>In the fourth pass one gets that <code>ace_flreactor</code> feature is missing<br>\n            <code>$ mwc.pl -type gnuace -features x11=1,gl=1,fl=1 ace.mwc\n              Skipping ACE_FlReactor (ace_flreactor.mpc), it requires ace_flreactor.\n            </code></li>\n          Allow MPC to generate makefiles for <code>FlReactor</code> by setting <code>ace_flreactor=1</code> feature.\n          <li>In the last pass one obtains files for building <code>FlReactor</code>.<br>\n            <code>$ mwc.pl -type gnuace -features x11=1,gl=1,fl=1,ace_flreactor=1 ace.mwc\n            </code></li>\n        </ol>\n        Currently to simplify MPC generation some of features are turned on by default in\n        <code>ACE_wrappers/bin/MakeProjectCreator/global.features</code>. For examples to generate\n        files related with Fl one has to provide only fl=1 feature. To obtain a more fine grained controll\n        over MPC generation process one may modify <code>ACE_wrappers/bin/MakeProjectCreator/*.features</code>\n        files.\n      </li>\n      <li> Required build files are generated now, it is enough then to invoke build tool.\n      For example for under <code>MPC::gnuace</code> one has to call\n      <code>make fl=1</code>. For <code>MPC::vc7</code> target all features are\n      encoded in generated project files, thus it is enough to compile ACE using MSVC.\n      </li>\n  </ol>\n    The build procedure leads to a specific GUI Reactor library. For example, for\n    <code>Qt</code> and <code>Linux </code> one gets <code>libQtReactor.so</code>, while for\n    <code>Windows</code> the results are shared <code>QtReactor.dll</code> and import\n    <code>QtReactor.lib</code> libraries or their variants depending on build options.\n    When compiling TAO also GUI related libraries are created like <code>libTAO_QtResource.so</code>.\n  <h2> Using GUI Reactor Library </h2>\n    Here one has at least three use cases:\n    <ol>\n    <li><b>Applications with their own build system.</b>\n    To use ACE support for GUI one has to include specific GUI headers and\n    link with specific <code>ACE_[GUI]Reactor</code> library. When using TAO support for GUI one has\n    also to link with specific <code>TAO_[GUI]Resource</code> library.</li>\n    <li><b>Applications with build system using MPC.</b>\n    In general, it is better to create specific base projects for using ACE GUI support in such application.\n    Base projects provided by ACE <code>ACE_wrappers/bin/MakeProjectCreator/[ace,tao]_[gui][reactor,resource].mpb</code>\n    may be an examples of how to do this.</li>\n    <li><b>Internal ACE applications like tests or examples.</b>\n    MPC project for internal ACE application using GUI support should be derived from\n    <code>ace_[gui]reactor.mpb</code> base projects. To employ TAO support for GUI one should derive\n    the project from <code>tao_[gui]resource.mpb</code> These base projects ensure that all necessary libraries\n    are linked to the application, specifies features necessary to build a project and moreover impose a\n    build order consistant with ACE. For example, the application project using <code>XtReactor</code> should be\n    derived from <code>ace_xtreactor.mpb</code>.</li>\n   </ol>\n  <h2>Notes on specific GUI Reactors</h2>\n    <ul>\n      <li> <code>QtReactor</code></li>\n        The build is controlled by <code>ace_qtreactor</code> [1 by default] feature.\n        To build this reactor one has to provide feature <code>qt</code> [0 by default] (Qt library). Moreover,\n        it is assumed that <code>Qt</code> was installed in a standard way\n        and <code>QTDIR</code> points to <code>Qt</code> installation folder. To build TAO\n        support for <code>Qt</code> one should use <code>tao_qtresource</code> [1 by default] feature.\n      <li> <code>XtReactor</code></li>\n        The build is controlled by <code>ace_xtreactor</code> [1 by default] feature.\n        To build this reactor one has to provide the following features: <code>x11</code> [1 by default]\n        (X11 libraries) and <code>xt</code> [1 by default] (X11 Toolkit).\n        Moreover, some examples and tests related with <code>XtReactor</code>\n        needs additionall features namely either <code>motif</code> [0 by default] (Motif/Lesstif libraries) or\n        <code>athena</code> [0 by default] (Athena widgets). To build TAO\n        support for <code>xt</code> one should use <code>tao_xtresource\n        </code> [1 by default] feature.\n      <li> <code>TkReactor</code></li>\n        The is controlled by <code>ace_tkreactor</code> [1 by default] feature. To build this reactor one has to provide\n        <code>tk</code> [0 by default] (Tcl libraries) feature. To build TAO\n        support for <code>Tk</code> one should use <code>tao_tkresource</code> [1 by default] feature.\n      <li> <code>FlReactor</code></li>\n        The  build is controlled by <code>ace_flreactor</code> [1 by default] feature.\n        To build this reactor one has to provide the following features: <code>x11</code>\n        [1 by default] (X11 libraries),\n        <code>gl</code> [1 by default] (OpenGl) and <code>fl</code>\n        [0 by default] (Fast Light Toolkit). To build TAO\n        support for <code>Fl</code> one should use <code>tao_flresource</code> [1 by default] feature.\n        <strong>MS Windows:</strong> The paths to <code>fltkdll</code> and\n        <code>OpenGL32</code> libraries, as well as <code>fltk</code> header files\n        should be setup manually for succesfull compilation. Obviosuly,\n        <code>x11</code>switch is ignored for this platform.</li>\n    </ul>\n\n<hr>\n<h1><a name=\"installnotes\">Installation Notes</a></h1>\n\n<ul>\n  <li><b>Windows (Windows NT, 2000, XP, 2003, etc., and Windows '9x/ME) </b><p>\n\n      Please see the <a href=\"#NonStaticObjectManager\">Non-static\n      ACE_Object_Manager</a> discussion below.</p><p>\n\n  </p></li><li><b>Windows CE</b><p>\n\n      Take a look at (<a href=\"docs/CE-status.txt\">CE-status.txt</a>) for\n      up-to-date information about ACE on Windows CE and Windows Mobile.\n\n  </p></li><li><b> Solaris 7, 8, 9, and 10 using Sun ONE Studio 8 (C++ 5.5)\n       or higher, Centerline C++ 2.x, GNU gcc 2.95 and\n       later.</b><p>\n\n      All the source code and tests should build and run without any\n      problems on Solaris 7, 8, and 9 platforms using the above\n      Sun C++ compilers.\n\n      There are likely to be build problems with older versions or\n      different patchlevels of Sun C++.  Likewise, on\n      Solaris with g++ you may need to use GNU as instead of\n      /usr/ccs/bin/as, if you want -gstabs+ and -pipe support.\n\n      Thanks to Susan Liebeskind &lt;shl@janis.gtri.gatech.edu&gt;\n      for providing the following useful information:</p><p>\n\n      By default, ACE uses both the Solaris and POSIX thread\n      interface.  To disable use of the Solaris thread interface, add\n      <code>-D_POSIX_PTHREAD_SEMANTICS</code> to the\n      <code>CFLAGS</code> in your\n      <code>$(ACE_ROOT)/include/makeinclude/platform_macros.GNU</code>.\n      See the Solaris Intro (3) man page for more information.</p><p>\n\n      To disable ACE thread support completely, build with the\n      <code>threads=0</code> make flag.  See the <a href=\"#flags\">Makefile Flags</a> section below for more\n      information on make flags.</p><p>\n\n      If you use g++ on Solaris 7, you might need to rebuild\n      it on a SunOS 5.7 (Solaris 7) host.  Some versions of g++\n      provide replacements for system header files.  The\n      replacements on older SunOS systems are not compatible with the\n      SunOS 5.7 system headers.  </P>\n\n  </li><li><b>AIX</b><p>\n\n      ACE is currently supported on AIX 5.2 and higher using IBM's\n      Visual Age C++ 6 and XL C++ 7 compilers as well as g++ 3.2.</p><p>\n\n      The <code>ace/config-aix-5.x.h</code> file is recommended for all\n      compilers on all AIX 5L versions. The Asynchronous I/O functionality\n      is disabled by default because its use requires the system administrator\n      to explicitly enable it in the kernel using SMIT. If this has been\n      done and you want to enable asynchronous I/O support in ACE, add:\n      <code>#define ACE_HAS_AIO_CALLS</code> to your <code>config.h</code>\n      file before including <code>ace/config-aix-5.x.h</code>.</p><p>\n\n      The Visual Age 6.0.0.3 and 6.0.0.4 do have some bugs that makes\n      them unusable for building TAO. TAO has been tested with 6.0.0.12 and\n      had no problems with that version.</p><p>\n\n      For your <code>platform_macros.GNU</code> file, you should use\n      <code>platform_aix_ibm.GNU</code> when building ACE with any of the\n      IBM compilers and <code>platform_aix_g++.GNU</code> when building ACE\n      with g++.</p><p>\n\n      BTW, here's a technique from Rob Jordan &lt;<a href=\"mailto:jordan@hursley.ibm.com\">jordan@hursley.ibm.com</a>&gt;\n      that can reduce the size of the ACE libraries by about one\n      third, and can also be applied to applications.  It works by\n      optimising the sharing of template functions, which are created\n      in an \"unusual\" way under AIX. It also speeds up\n      compilation.</p><p>\n\n      Here's how to optimise the ACE library generation:</p><p>\n\n      Look at the <a href=\"ace/GNUmakefile.ACE\">ace/GNUmakefile.ACE</a>\n      in <code>$ACE_ROOT/ace</code>. Create a file called\n      <code>ACE_All_Src.cpp</code>, and add a line to #include\n      each of the source files\n      listed under <code>FILES=</code> in the GNUmakefile. Create a\n      file called <code>ACE_All_Tmp.h</code>\n      and add a line to #include each of the .h files listed under\n      <code>TEMPLATE_FILES=</code> in the GNUmakefile. Now update the\n      GNUmakefile so that\n      <code>FILES=ACE_All_Src</code> and\n      <code>TEMPLATE_FILES=ACE_All_Tmp</code>.</p><p>\n\n  </p></li><li><b><a name=\"Linux\">Linux</a></b><p>\n\n      ACE has been ported to <a href=\"http://www.cs.wustl.edu/%7Ecleeland/ace/\">Linux</a> on\n      Intel, Alpha, and PowerPC platforms.  If you use a RedHat 5.x\n      distribution, it's best to use RedHat 5.1 or later.  ACE works\n      without any modifications on RedHat 5.1 and later, and on\n      Debian 2.1 on both Intel and Alpha.  Use the\n      <code>platform_linux.GNU</code> and <code>ace/config-linux.h</code>\n      in your <code>platform_macros.GNU</code> and\n      <code>config.h</code> files, respectively.  The same\n      files can be used on PowerPC, with LinuxPPC\n      1999 (R5), with glibc 2.1.1.</p><p>\n\n      If you run out of memory, it's easy to add virtual memory on\n      Linux.  Please see the <code>mkswap</code> man page.  You'll\n      need at least 256 to 300 Mb of virtual memory (RAM + swap) to\n      compile all of ACE+TAO.  The <a href=\"#resource_requirements\">System\n      Resource Requirements section</a> has some suggestions on how\n      to reduce the memory requirement.</p><p>\n\n      The glibc 2.0 dynamic loader isn't thread safe. If you want to\n      use the Invocation API you'll have to set\n      <code>LD_BIND_NOW=true</code>. If you want to use\n      <code>dlopen</code>, you should use <code>RTLD_NOW</code>.  The\n      dynamic loader in glibc 2.1 is thread safe.</p><p>\n\n      <strong>NOTE:</strong> The TAO NameService uses IP multicasting\n      by default, though it is not required.  IP multicast on Linux\n      requires the following:</p><p>\n\n      </p><ul>\n        <li>Enable IP multicast in the Linux kernel.  It is enabled in\n            the default RedHat 5.1 kernel.  In older distributions, you\n            can enable it by rebuilding your kernel with CONFIG_IP_MULTICAST\n            enabled.<p>\n        </p></li><li>Enable IP multicast in ACE.  It is enabled by default in\n            <code>ace/config-linux.h</code>.  If you don't use\n            IP multicast, add <code>#define ACE_HAS_IP_MULTICAST 0</code>\n            to your <code>ace/config.h</code> before building ACE.<p>\n        </p></li><li>There must be a network interface that is up and supports\n            multicast.  If you have linuxconf, it's easiest to use that\n            to add a network route for multicast (224.0.0.0) on one of\n            your network interfaces, such as <code>eth0</code>.  If\n            you don't have or use linuxconf, try adding a multicast\n            routing table entry using something like this:<p>\n            </p><pre>             <code># route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0</code>\n            </pre><p>\n      </p></li></ul>\n\n      Some of the ACE tests fail on older, pre-glibc2 Linux platforms,\n      such as RedHat 4.2.  The problems are with threads and\n      thread-specific storage.</p><p>\n\n  </p></li><li><b>SCO UNIX</b><p>\n\n      ACE has been ported to SCO UNIX using the GNU g++ 2.7.2\n      compiler.  Arturo Montes &lt;<a href=\"mailto:mitosys@colomsat.net.co\">mitosys@colomsat.net.co</a>&gt;\n      maintains this code.  In addition, he also maintains a version\n      of <a href=\"http://www.cs.wustl.edu/%7Eschmidt/ACE_wrappers/FSU-threads.tar.gz\">FSU pthreads</a>.</p><p>\n\n  </p></li><li><b>SGI IRIX 5.x and 6.x</b><p>\n\n      ACE used to build fine using the SGI C++ and GNU GCC compilers\n      for IRIX 5.x.  It has been ported to IRIX 6.x using the SGI\n      MipsPro 7.1 C++ compiler; be aware that in IRIX 6.2 there is a\n      number of patches that have to be installed and exceptions\n      appear to fail with the O32 ABI.  Please check the config files\n      for the details.</p><p>\n\n  </p></li><li><b>OSF/1 3.2 and 4.0 (a.k.a. Digital UNIX 4.0)</b> <p>\n\n      The Digital UNIX C++ 5.4 through 5.7 compilers have problems\n      with ACE's templates.  They compile the lib and most of the test\n      programs, although they warn about template usage.  Most tests\n      run, some dump core.  If you use a 5.x version of cxx, be sure\n      to set the CXX_VER variable to CXX_5, either on your make\n      command line or in an environment variable.  The ACE Makefiles\n      assume by default that the cxx version is 6.x or later.</p><p>\n\n      CXX 6.0 and 6.1 are much improved over 5.x: V6.0-020, V6.1-025,\n      and later build all of ACE cleanly.  All of the tests in\n      $(ACE_ROOT)/tests run successfully with CXX 6.0 and CXX 6.1.\n      Please note that problems have been reported with some versions\n      of CXX 6.1, notably versions -021 and earlier.  It's best to use\n      V6.1-022 or later.</p><p>\n\n      NOTE: if you use Digital UNIX 4.0f or later, you <strong>must</strong>\n      use <code>ace/config-tru64.h</code> instead of\n      <code>ace/config-osf1-4.0.h</code>.  <code>ace/config-tru64.h</code>\n      can be used for all supported compilers on any version of\n      Digital UNIX after and include 4.0.  And, with 4.0f and later when\n      using Digital CXX, you <strong>must</strong> use\n      <code>include/makeinclude/platform_tru64_cxx.GNU</code> instead of\n      <code>include/makeinclude/platform_osf1_4.0.GNU</code>.</p>\n\n  </li><li><b> FreeBSD </b><p>\n\n      FreeBSD is a fast evolving platform.  However, it has the\n      advantage of having standard releases.  At this moment, ACE is\n      only perodically tested against -stable (3.1R) and we rely a lot\n      on FreeBSD users' feedbacks.  </p><p>\n\n      Notice that on older FreeBSD, <code>ld.so</code> only looks for\n      so libraries with <b>version number</b> appended.  ACE makefiles\n      create symlinks for most shared libraries if\n      <code>versioned_so</code> is defined to 1 in\n      <code>$ACE_ROOT/ace</code> with appropriate ACE version.\n      However, this does not work for libACE.so itself so you have to\n      create it manually (If you figure out how to do this, please let\n      us know) like this: </p><p>\n\n      <code>ln -sf $ACE_ROOT/ace/libACE.so $ACE_ROOT/ace/libACE.so.4.5</code></p><p>\n\n      On newer FreeBSD (3.0 or later,) this is no longer necessary.</p><p>\n\n  </p></li><li><b>NetBSD</b><p>\n\n      Like older FreeBSD, NetBSD's <code>ld.so</code> also requires\n      versioned .so files.</p><p>\n\n  </p></li><li><b>OpenBSD</b><p>\n\n      ACE has been ported to OpenBSD 3.1 and GNU g++ 2.95.3.</p><p>\n\n      As with FreeBSD and NetBSD, OpenBSD requires versioned .so\n      files.  This is currently handled by the build files and no\n      additional work is needed.</p><p>\n\n      ACE has been ported to OpenBSD with and without pthreads\n      enabled.  When using pthreads, though, C++ exceptions must be\n      disabled.  This is a known problem with the current release of\n      OpenBSD (see www.openbsd.org, bug #1750).  ACE emulated\n      exceptions work fine.</p><p>\n\n      Compiling TAO may require the user data segment size\n      restrictions and possibly other options to be increased.  This\n      is done by modifying the default user class in /etc/login.conf\n      or by adding a new class and modifying the master passwer file\n      accordingly.</p><p>\n\n  </p></li><li><b> UnixWare </b> <p>\n\n      Steve Huston &lt;<a href=\"mailto:shuston@riverace.com\">shuston@riverace.com</a>&gt;\n      has ported ACE to work with UnixWare 2.01 and g++.</p><p>\n\n      Ganesh Pai &lt;<a href=\"mailto:gpai@voicetek.com\">gpai@voicetek.com</a>&gt;\n      subsequently did the port for version 2.1.2, also with g++.</p><p>\n\n      Phil Mesnier &lt;<a href=\"mailto:mesnier_p@ociweb.com\">\n      mesnier_p@ociweb.com</a>&gt; updated the port to support\n      UnixWare 7.1.0, with help from Michael Meissnitzer\n      &lt;<a href=\"mailto:michael.meissnitzer@siemens.at\">\n      michael.meissnitzer@siemens.at</a>&gt;, Christian Klepp &lt;\n      <a href=\"mailto:christian.klepp@siemens.at\">christian.klepp@siemens.at\n      </a>&gt; and Engelbert Staller &lt;<a href=\"http://www.cs.wustl.edu/%7Eschmidt/ACE_wrappers/engelbert.staller@siemens.at\">\n      engelbert.staller@siemens.at</a>&gt;\n      Building ACE (and TAO) on Unixware 7.1.0 requires a very specific\n      g++ build environment.  In particular, you must build and install\n      g++ 2.95.2, along with binutils 2.9.1. The order (and the declaration\n      of configuration) is extremely important. Using the gcc compiler\n      provided on the Skunkware CD on a pentium system, here is the recipe\n      I used to build a working environment (as root):<br>\n</p><pre>  mkdir /usr/local/newgnu\n&lt; ftp and untar binutils-2.9.1 &gt;\n&lt; ftp and untar gcc-2.95.2 &gt;\n  mkdir -p build/binutils build/gcc\n  cd build/binutils\n  ../../binutils-2.9.1/configure i386-sco-sysv4\n  gmake  # takes a long time\n  gmake install # this creates /usr/local/i386-sco-sysv4/...\n  mkdir /usr/local/i486-pc-sysv5/bin\n  cd /usr/local/i486-pc-sysv5/bin\n  for a in /usr/local/i386-sco-sysv4/bin/*; do ln -s $a .; done\n  #links all the newly installed utilities\n\n  cd /usr/local/newgnu/build/gcc\n  ../../gcc-2.95.2/configure --with-gnu-as --with-gnu-ld\n  gmake bootstrap # takes a long time\n  gmake install\n  mkdir /usr/local/i586-UnixWare7.1.0-sysv5/bin\n  for a in /usr/local/i386-sco-sysv4/bin/*; do ln -s $a .; done\n</pre>\n       Once done, ACE and TAO will successfully build and link.<p>\n\n  </p></li><li><b><a name=\"LynxOS\">LynxOS</a></b><p>\n\n      ACE builds and runs properly on LynxOS 4.0 for Intel\n      and PowerPC targets. LynxOS 2.x and 3.x are no longer supported.\n\n      If you run out of memory on LynxOS, these might help:</p><p>\n\n      </p><ul>\n        <li>Increase the limits in <code>/etc/starttab</code>,\n          then reboot system.  We use these limits:\n          <pre># Data, stack, and core file limits (in Kbytes)\n80000\n16000\n102400</pre><p>\n        </p></li><li>Enable or expand virtual memory, with something like:\n          <pre># mkcontig /swap 320\n# prio 17 vmstart /swap</pre>\n          See the <code>mkcontig</code> and <code>vmstart</code>\n          man pages, and <code>/bin/rc</code>.<p>\n      </p></li></ul>\n\n      Please see the comments in the\n      <a href=\"include/makeinclude/platform_lynxos.GNU\">ACE\n      platform_lynxos.GNU file</a> for information on, and an\n      example of, tailoring for your particular platform.<p>\n\n      NOTE: if you want to use IP multicast on LynxOS, be sure to add\n      this line to your <code>/net/rc.network</code>, and reboot:</p><p>\n      </p><pre><code>\n        /bin/route add \"224.0.0.0\" \"$my_name\"\n      </code></pre>\n\n  </li><li><strong>VxWorks</strong><p>\n\n      <a href=\"http://www.cs.wustl.edu/%7Elevine/\">David Levine</a>\n      &lt;<a href=\"mailto:levine@cs.wustl.edu\">levine@cs.wustl.edu</a>&gt; has\n      ported ACE to VxWorks 5.2/5.3/5.3.1/5.4 with the GreenHills\n      1.8.8/1.8.9, g++ and diab compilers that are distributed with\n      VxWorks/Tornado. It is not possible to use VxWorks 5.4\n      and earlier with ACE anymore because the compilers delivered with\n      5.4 and earlier don't support the C++ features ACE needs.</p><p>\n\n      At this moment <a href=\"http://www.remedy.nl\">Remedy IT</a> is upgrading\n      and stabilizing ACE/TAO support for Tornado 2.2/VxWorks 5.5.1.\n      Since the existing support for previous VxWorks version has been unsupported\n      and broken for some time and most (potential) users seem to have upgraded to\n      VxWorks 5.5.1 no backporting effort is done. See also <a href=\"#vxworks\">here</a>.\n      </p><p>\n\n      Tornado 2.2/VxWorks 5.5.1 support IP multicast.  That is not enabled\n      by default in ACE for VxWorks, because it depends on your\n      kernel configuration.  To enable it, add\n      <code>#define ACE_HAS_IP_MULTICAST</code> to your\n      <code>ace/config.h</code>.</p><p>\n\n      NOTE: In order for the ACE Broadcast and Multicast tests to work the VxWorks kernel\n      should receive the packages it sends out locally. By default this is not supported.\n      To enable this behaviour you need to include the IFF_SIMPLEX flag for your required\n      NIC driver. See the following Windriver <a href=\"https://secure.windriver.com/cgi-bin/windsurf/techtips/public/viewSum.cgi?4542\">SPR 4542</a>\n      for more information.</p><p>\n\n      In addition to all of the other benefits of ACE, it helps work\n      around some deficiencies with VxWorks. The problems are:</p>\n\n      <p>\n      </p><ol>\n        <li>The program entry point cannot be called \"main\" with g++.  ACE\n            renames it to \"ace_main\" (configurable via ACE_MAIN) on VxWorks.\n            While this may seem trivial, it is important with legacy code.\n            ACE itself ran into this problem.<p>\n\n        </p></li><li>argc/argv isn't used with VxWorks entry points.  ACE provides\n            a wrapper function that transparently converts shell command\n            line arguments to argc/argv form.  See <a href=\"#spa\">below</a>\n            for details.<p>\n\n      </p></li></ol>\n\n      Please note that ACE uses one of the spare fields in the Wind\n      River task control block, spare4, for thread-specific storage.\n      This field is specified in only one place, in ace/OS_NS_Thread.inl, so it\n      can easily be changed to one of the other spare fields, if\n      necessary.</p><p>\n\n      ACE destroys dynamically\n      allocated singletons in the ACE library.  But, they may not\n      properly destroy some static objects.  If you have trouble\n      running a program multiple times, it may be necessary to unload\n      the module, using unld, and reload it between runs.\n      Alternatively, you could try calling <code>cplusDtors</code> and\n      then <code>cplusCtors</code> between runs.</p><p>\n\n  </p></li><li><b>MVS OpenEdition</b> <p>\n\n      All of ACE has been ported to OpenEdition by Chuck Gehr &lt;<a href=\"mailto:gehr@sweng.stortek.com\">gehr@sweng.stortek.com</a>&gt;.\n      The ACE library, all the tests and most of the examples and apps\n      build clean.  There are still some problems that need to be\n      ironed out:</p><p>\n\n      MVS does not support the dynamic linking dl...() calls that the\n      Service Configurator uses to dynamically link services at run\n      time. As a result, all the examples and apps that use a svc.conf\n      file (for dynamically configuring service objects) do not work,\n      however, most of these apps can be built/run statically.  Also,\n      the Svc_Conf_l.cpp and Svc_Conf_y.cpp files are generated using\n      flex and yacc on a ascii (not ebcdic) machine and as a result\n      they don't work very well with ebcdic svc.conf files.  We should\n      be able to regenerate these files on MVS but MVS doesn't have\n      flex.  This is something that needs to be done.</p><p>\n\n      Some of the tests do not execute properly.  This is a minority\n      and over time the goal is to get to 100%.</p><p>\n\n      The make scheme for some of the apps still doesn't work\n      perfectly on MVS.  This is mainly due to the way shared\n      libraries are handled on MVS.  See <a href=\"#mvs\">additional\n      build tips for MVS</a> for more on this.</p><p>\n\n  </p></li><li><strong>QNX Neutrino</strong><p>\n\n      ACE has been ported to <a href=\"http://www.qnx.com/products/os/neutrino.html\">QNX Neutrino\n      2.0</a>.  We cross-compile for Neutrino on a QNX4 host using g++\n      2.8.1, using the <a href=\"ace/config-qnx-neutrino.h\">ace/config-qnx-neutrino.h</a>\n      and <a href=\"include/makeinclude/platform_qnx_neutrino.GNU\">include/makeinclude/platform_qnx_neutrino.GNU</a>\n      configuration files.  Many of the ACE tests succeed, though some\n      fail.  As the porting effort progresses, we hope to eliminate\n      these failures.  If you know of fixes, please send them to\n      us.</p><p>\n      </p></li><li><strong>QNX RTP</strong><p>\n\n      ACE has been ported to <a href=\"http://get.qnx.com/\">QNX RTP\n      </a>. We compile for QNX RTP using the GCC compiler shipped with the\n      distribution, using the <a href=\"ace/config-qnx-rtp.h\">ace/config-qnx-rtp.h</a>\n      and <a href=\"include/makeinclude/platform_qnx_rtp_gcc.GNU\">include/makeinclude/platform_qnx_rtp_gcc.GNU</a>\n      configuration files.\n      Many of the ACE tests succeed, though some\n      fail.  As the porting effort progresses, we hope to eliminate\n      these failures.  If you know of fixes, please send them to\n      us.</p><p>\n      <strong><blink><font color=\"#ff0000\">WARNING:</font></blink></strong>\n      Under the current version of QNX RTP ACE fails if compiled with\n      inline=0 . </p><p>\n\n  </p></li><li><strong><a name=\"rtems\">RTEMS</a></strong><p>\n\n      The support for RTEMS has been reviVed from version x.5.4. This version\n      was the first version that build again out of the box on RTEMS. Compilation\n      and testing was done for RTEMS with and without networking support. The\n      ACE GNU makefiles do automatically detect whether networking support\n      is available or not.\n\n      Besides the standard config.h/platform_macros.GNU file you will need\n      to set <code>RTEMS_MAKEFILE_PATH</code> to point to the location\n      of your RTEMS installation, see below for an example.</p>\n      <p><code>export RTEMS_MAKEFILE_PATH=/opt/rtems/CPU-rtems/BSP</code></p>\n      <p>\n      When building without network support you will need the ace_for_tao\n      subsetting functionality enabled. For this add <code>ace_for_tao = 1</code>\n      to your <code>bin/MakeProjectCreator/config</code> file and regenerate the\n      GNU makefiles as described <a href=\"#power\">here</a>.</p><p>\n\n  </p></li><li><strong>PharLap ETS</strong><p>\n\n      ACE has been ported to Ardence's\n      <a href=\"http://www.ardence.com/embedded/products.aspx?ID=71\">PharLap ETS</a>\n      version 13. The port was originally done for Pharlap 9.1 and MSVC 6,\n      but has been updated to Pharlap ETS 13 with Visual Studio .NET 2003\n      (VC7.1).</p><p> To build for PharLap, you'll need to use MPC to\n      generate .sln/.vcproj files with the ETS configurations. For example:\n      <pre>\ncd \\ace\\ACE_wrappers\nperl bin/mwc.pl  -type vc71 -relative ACE_ROOT=C:/ace/ACE_wrappers -relative TAO_ROOT=C:/ace/ACE_wrappers/TAO -value_template configurations='\"ETS Debug\"' -value_template configurations+='\"ETS Release\"' -name_modifier *_ETS TAO_ACE.mwc\n      </pre>\n      That command will generate the same .sln and .vproj files as for\n      regular Windows builds with VC7.1, but they'll have names with an\n      <code>_ETS</code> suffix and will include the \"ETS Debug\" and\n      \"ETS Release\" configurations.</p><p>\n      After generating the needed VC7.1 files, use the ace/config-pharlap.h\n      configuration file, and the instructions\n      for building on Windows. Building the ACE library is the same as\n      for regular Windows platforms, except you choose one of the PharLap\n      ETS configurations to build within Visual Studio.\n      For an example of how to build binaries, see the tests directory.\n      The tests_pharlap_msvc.lnk file is a LinkLoc commands file that the\n      ACE tests are built with. It is likely that local sites may need\n      to adjust this file for their target environment.\n      </p><p>\n      When executing programs on the target system, it is possible that not\n      all of the VC++ support DLLs are resident on the target. In particular,\n      the debug-supporting DLLs may not be present. If you require these, be\n      sure to add those needed. For example, on the standard LabVIEW RT 8.2\n      distribution using Pharlap ETS, the following DLLs must be copied to\n      the target before being able to run Debug programs:\n      <ul>\n        <li>msvcp71d.dll</li>\n        <li>msvcr71d.dll</li>\n      </ul>\n      </p><p>\n      <note>To build ACE for National Instruments' LabVIEW RT, use\n      the Pharlap ETS information above, but add the following line to your\n      config.h file:\n      <pre>\n      #define ACE_PHARLAP_LABVIEW_RT\n      </pre>\n      This setting makes the necessary adjustments for LabVIEW's implementation\n      of Pharlap ETS.</note>\n\n      <note>By default, the ACE tests log their output/results to the\n      system console on Pharlap ETS. To change this behavior and make the\n      test output log to a file in the <code>log</code> directory under the\n      current working directory while executing, add the following line to\n      your config.h file:\n      <pre>\n      #define ACE_PHARLAP_TESTLOG_TO_FILE\n      </pre>\n      This setting has no affect on TAO tests which always write test output\n      to stdout.\n      </note>\n\n</p></li><li><strong>Mac OS X (10.2.x)</strong><p>\n\n        </p><p>ACE builds and runs on Mac OS X 10.2.x, but the following are\n        needed to build it:</p>\n\n        <p>1. The latest version of the Apple Developer Tools\n        (December 2002)</p>\n        <p>2. The dlcompat library (obtained either through Fink or\n        SourceForge)</p>\n\n        <p>When creating $ACE_ROOT/ace/config.h for Mac OS X, you need\n        to add the following if you obtained dlcompat via Fink:</p>\n\n        <p>#define ACE_NEEDS_DL_UNDERSCORE</p>\n\n        <p>You'll also need to do:</p>\n\n        <p>setenv DYLD_LIBRARY_PATH $ACE_ROOT/ace:$ACE_ROOT/lib</p>\n        <p>setenv MACOSX_DEPLOYMENT_TARGET 10.2</p>\n\n        <p>Currently, all ACE tests pass except Process_Mutex_Test and\n        MEM_Stream_Test.  Also, Mac OS X doesn't yet support *nix\n        aio_* calls, and ACE does not know anything about Mach.</p>\n\n        <p>The work to port ACE to Mac OS X was done by several people,\n        John Zorko\n        &lt;<a href=\"mailto:j.zorko@att.net\">j.zorko@att.net</a>&gt; is\n        only one of them.</p>\n\n</p></li><li><strong>iPhone/iPod Touch/iPad</strong><p>\n\n        </p><p>ACE builds and runs on the iPhone/iPod Touch/iPad Hardware\n        and Simulator. Keep in mind that ACE/TAO needs to be built\n        statically since Apple does not allow third party dynamic libraries\n        to be deployed on the hardware. The following are needed to build ACE:</p>\n\n        <p>1. The iPhone SDK.</p>\n        <p>2. When creating $ACE_ROOT/ace/config.h, include\n        config-macosx-iphone-hardware.h if you want to deploy on the\n        hardware, include config-macosx-iphone-simulator.h if you want\n        to deploy on the simulator. Even though those includes are named\n        after the iPhone, the includes work for iPhone/iPod Touch, and iPad.</p>\n        <p>3. You need to define two environment variables. The first is\n        IPHONE_TARGET. Set IPHONE_TARGET to SIMULATOR if you want to deploy\n        on SIMULATOR. Set IPHONE_TARGET to HARDWARE if you want to deploy on\n        the hardware device.</p>\n        <p>4. When creating $ACE_ROOT/include/makeinclude/platform_macros.GNU,\n        include 'include $(ACE_ROOT)/include/makeinclude/platform_macosx_iphone.GNU'\n        in the file.</p>\n\n\n\n</li></ul>\n\n\n<hr>\n<h2><a name=\"g++\">Compiling ACE with GNU g++</a></h2>\n\nIf you use the GNU GCC g++ compiler please note the following:\n\n<ul>\n  </p></li><li>ACE/TAO needs g++ 2.95.x or better. Older versions are not usable anymore<p>\n\n  </p></li><li>Make sure to update your gcc <code>config.status</code>\n      file.  This file is produced when installing gcc; it specifies\n      where to install the binary files that gcc uses.  For example,\n      it specifies whether to use Solaris's <code>/usr/ccs/bin</code>\n      binary utils or GNU binary utils.  The\n      <code>config.status</code> file is an output of the gcc\n      <code>configure</code> script; it is preferable to use the\n      <code>--prefix</code> option to <code>configure</code> instead\n      of hacking its output.<p>\n\n  </p></li><li>If you are getting weird link errors when building libACE\n      on Solaris you are probably using the GNU linker.  Try using the\n      Sun linker (/usr/ccs/bin/ld) instead.  Note that gcc first looks\n      for the GNU linker if it is installed along with gcc.  The only\n      way to not use the GNU linker is to delete it from the\n      installation or to build your own compiler with no linker.  Be\n      aware that you still need the libraries and includes of gcc.<p>\n\n      NOTE: if you do use the GNU linker, you might need to change\n      the <code>-G</code> flag to <code>-shared</code> in\n      the <code>SOFLAGS</code> definition in your\n      <code>include/makeinclude/platform_macros.GNU</code>.</p><p>\n\n  </p></li><li>Don't get too confused about contradictory statements in\n      the gcc documentation. It was written by different\n      people...<p>\n\n  </p></li><li>Make sure that the linker invoked by gcc produces code\n      that initializes static objects.  Please see gcc's\n      documentation for using <code>collect2</code>.<p>\n\n</p></li></ul>\n\n\n<hr><p>\n</p><h2><a name=\"minimum_build\">What Do I Need to Build for TAO?</a></h2>\nToshio Hori &lt;toshi@etl.go.jp&gt; provided these suggestions on building\njust what's needed for (a subset of) TAO:<p>\n\nI usually make:\n</p><pre>    $ACE_ROOT/ace,\n    $ACE_ROOT/apps/gperf,\n    $TAO_ROOT/tao,\n    $TAO_ROOT/TAO_IDL, and\n    $TAO_ROOT/orbsvcs/orbsvcs\n</pre>\nand the whole make takes less than an hour on my Solaris 7 for intel,\nPentium-III/550MHz, 256MB memory, 512MB swap machine.  (Top secret: I\nrenice the 'make' process to the highest priority, -20... ;-)\n\nTo save time and space, I set\n<pre>    TAO_ORBSVCS = Naming Time Trader ImplRepo\n</pre>\nin <code>$ACE_ROOT/include/makeinclude/platform_macros.GNU</code> also.  See\n<a href=\"TAO/docs/configurations.html#orbsvcs\">TAO's orbsvcs\nlibrary customization instructions</a> for more information.<p>\n\n\n</p><hr><p> </p><h2><a name=\"resource_requirements\">System Resource\nRequirements</a></h2> The amount of system resources required to build\nACE and TAO varies greatly.  The required system resources are\ninfluenced by OS and compiler platform, build options, and component\nconfigurations.  As a rough guide, the typical peak memory requirement\ncan be well over 512 MB (notably, for TAO's orbsvcs).  Depending on\nyour OS and compiler configuration, an <strong>entire</strong> build\nof ACE and TAO can use well over 4 GB of disk space.  It's usually not\nnecessary to build <strong>all</strong> of ACE and TAO, though.<p>\n\nMuch less disk space is required for just the libraries.  For example,\nsee the <a href=\"docs/ACE-subsets.html#ACE%20Library%20Size%20Breakdown\">ACE\nlibrary subset sizes</a>.</p><p>\n\nIf you run out of memory when building, you might consider trying\nsome or all of these suggestions:</p><p>\n</p><ul>\n  <li>Enable or increase virtual memory.  If you're on a <a href=\"#Linux\">Linux</a> or <a href=\"#LynxOS\">LynxOS</a> platform,\n    please see the appropriate sections above.<p>\n  </p></li><li>Disable/enable optimization and/or debugging.  See the\n    <a href=\"#flags\">Makefile Flags</a> discussion for information\n    on how to do that via ACE's Makefiles.<p>\n  </p></li><li>If you're using g++, try removing <code>-pipe</code> from\n    <code>CFLAGS</code> in your\n    <code>include/makeinclude/platform_macros.GNU</code> file.<p>\n  </p></li><li>Restrict the components that you build.  For ACE and TAO, see the\n    discussion of <code>ACE_COMPONENTS</code> in the\n    <a href=\"docs/ACE-subsets.html\">ACE subsets</a> page.  For TAO's\n    orbsvcs, see the discussion of <code>TAO_ORBSVCS</code> in\n    <a href=\"TAO/docs/configurations.html#orbsvcs\">orbsvcs Library configuration information</a>.<p>\n\nIf disk space is a problem, disabling debugging should greatly\nreduce object code, and therefore, library size.  This is especially\ntrue with g++.</p><p>\n\nToshio Hori &lt;toshi@etl.go.jp&gt; provided these tips for reducing\ndisk space usage:</p><p>\n\nTo save space on a Unix machine, I usually run\n    'find . -name \\*.sln -o -name \\*.vcproj -o -name \\*.bmak | xargs rm -f'\nin $ACE_ROOT at first after I untar the distribution.  They are\nmeaningless in my environment (Files named '*.sln' and '*.vcproj' are\nused for MSVC++ and files named '*.bmak' are for Embarcadero C++\nBuilder.)</p><p>\n\nFinally, to save space, may want to run 'make clean' after 'make'.  It\nremoves generated object files and leaves libraries/executables\nintact.  If you want to remove any of the libraries/executables, as\nwell, try 'make realclean'.</p><p>\n\n</p></li></ul>\n\n<p></p><hr><p>\n</p><h1><a name=\"MPC\">General MPC information</a></h1>\n\nThe <A HREF=\"\nhttp://downloads.ociweb.com/MPC/docs/html/MakeProjectCreator.html</A>\nMakefile Project Creator (MPC)</A> is a tool that takes platform and\nbuilding tool generic files (mpc files) as input, which describe basic\ninformation needed to generate a \"project\" file for various build\ntools, including Make, NMake, Visual C++ 6, Visual C++ 7, etc.  Please\nsee <a href=\"MPC/docs/USAGE\">USAGE</a>, <a\nhref=\"MPC/docs/README\">README</a> for documentation on MPC.<P>\n\nA common usage for creating a Windows workspace containing just the\ncore ACE and TAO libraries and executables is the following:\n\n<pre><code>\nC:> cd %TAO_ROOT%\nC:> %ACE_ROOT%\\bin\\mwc.pl -type vc71 TAO_ACE.mwc\n</pre></code>\n\nReplace vc71 with whatever project type you want to use.  On Linux and\nother UNIX platform use the gnuace type: <P>\n\n<pre><code>\n% cd $TAO_ROOT\n% $ACE_ROOT/bin/mwc.pl -type gnuace TAO_ACE.mwc\n</pre></code>\n\nthis creates the appropriate GNUmakefiles.  Additional information on\nhow to obtain, configuration, and build ACE+TAO using MPC appear at\nthe OCI <A\nHREF=\"http://www.theaceorb.com/faq/index.html#HowToBuildACEandTAOonWindows\">FAQ</A>.<P>\n\nIf you are attempting to generate project files using MPC, and you get\nthe following error message:<br>\n\n<pre>ERROR: Unable to find the MPC modules in /builds/ACE_wrappers/MPC.\nYou can set the MPC_ROOT environment variable to the location of MPC.\n</pre>\n\nYou need to do one of the following:\n\n<ol>\n<li>If you have already obtained MPC, either move it underneath the\nACE_wrappers directory or set your MPC_ROOT environment variable to point\nto the full path of MPC.</li>\n<li>Check out MPC from the DOC Group git repository\nand set your MPC_ROOT environment variable.</li>\n</ol>\n\nYou can check\nout MPC from the DOCGroup git repository using the following command.\n\n<pre>git clone https://github.com/DOCGroup/MPC.git MPC\n</pre>\n\nThe <A HREF=\"MPC/docs/README\">README</A> and <A HREF=\"MPC/docs/USAGE\">USAGE</A> files in the MPC/docs directory are an up-to-date\nsource of documentation, however it is not a complete set of\ndocumentation. The TAO Developer's Guide from OCI starting with the\n1.3a version contains more information about MPC.<p>\n\nThe MPC chapter from the TAO Developer's Guide is available at <a\nhref=\"http://downloads.ociweb.com/MPC/\">\nhttp://downloads.ociweb.com/MPC/</a>.  Some of MPC has changed since\nthis version, but it is largely accurate.  An updated version will be\navailable as newer versions of the TAO Developer's Guide are released.\nIn the meantime, please see the README and USAGE files in the MPC\ndirectory.\n\n</p>\n<p>\n</p><h1><a name=\"eclipse\">Working with ACE in Eclipse</a></h1>\n\n\n<p>\nThe Eclipse CDT C++ development environment can be used to develop ACE applications. You can configure a new CDT project to build ACE using either a local source distribution or checking out ACE from CVS in Eclipse. These are the steps to create the CDT project to build ACE.\n</p>\n\n<p>\n<h2>To create an Eclipse project for ACE starting from CVS:</h2>\n<ol>\n<li>In the \"CVS Repository Exploring\" perspective, navigate to the module containing ACE.</li>\n<li>Checkout the module using \"Check Out As\" and select the \"project configured using the New Project Wizard\" option.</li>\n<li>Select \"Standard Make C++ Project\" for the project type.</li>\n<li>Follow the steps outlined above, up to the point of running make, for building ACE on your platform. Use \"path_to_your_eclipse_workspace\"/\"project_name\" as your $ACE_ROOT.\n<li>If you had to regenerate the makefiles using MPC, select the root folder for your poject and use the import wizard to add them to your project.</li>\n<li>Select the root folder for the project and use the \"Create Make Target\" wizard to setup the appropriate make command and options.</li>\n<li>Select the root folder and run \"Build Make Target.\" This will build ACE.</li>\n</ol>\n</p>\n\n\n\n<p>\n<h2>To create an Eclipse project for ACE from a local source distribution:</h2>\n<ol>\n<li>Launch the \"New Project Wizard\" in Eclipse.</li>\n<li>Select \"Standard Make C++ Project\" for the project type.</li>\n<li>On the project name page, uncheck the \"use default\" location option and replace the default path with the path to your source distribution.</li>\n<li>Follow the steps, up to the point of running make, for building ACE on your platform.\n<li>If you had to regenerate the makefiles using MPC, select the root folder for your poject and use the import wizard to add them to your project.</li>\n<li>Select the root folder for the project and use the \"Create Make Target\" wizard to setup the appropriate make command and options.</li>\n<li>Select the root folder and run \"Build Make Target.\" This will build ACE.</li>\n\n\n</ol>\n</p>\n\n</p>\n\n<hr><p>\n</p><h1><a name=\"advanced\">Advanced Topics</a></h1>\n\n<ul>\n  <li><a href=\"docs/ACE-porting.html\">Porting ACE and TAO to a New OS Platform</a>\n  </li><li><a href=\"#NonStaticObjectManager\">Non-static ACE_Object_Manager</a>\n  </li><li><a href=\"#cloning\">Cloning the Source Tree</a>\n  </li><li><a href=\"#mvs\">Additional Build Tips for MVS</a>\n  </li><li><a href=\"#flags\">Makefile Flags</a>\n  </li><li><a href=\"http://www.cs.wustl.edu/%7Elevine/CVS.html\">Version Control</a>\n  </li><li><a href=\"docs/ACE-SSL.html\">ACE SSL effort</a>\n</li></ul>\n\n<p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h2><a name=\"NonStaticObjectManager\">Non-static\nACE_Object_Manager</a></h2> The ACE_Object_Manager can be instantiated\nas a static object, can be instantiated on the stack of the main\nprogram thread, or can be explicitly instantiated and destroyed by the\napplication with <code>ACE::init ()</code> and <code>ACE::fini\n()</code>.  The comments in the header file,\n<a href=\"ace/Object_Manager.h\"><code>ace/Object_Manager.h</code></a>, as well as Section 1.6.3 in\n<a href=\"http://www.riverace.com/docs\">The ACE Programmer's Guide</a>\nprovide more detail.<p>\n\n<strong><blink><font color=\"#ff0000\">NOTE:</font></blink></strong>\nSpecial requirements are imposed on applications if the\nACE_Object_Manager is instantiated, by ACE, on the stack of the main\nthread.  This behavior is selected by defining\n<code>ACE_HAS_NONSTATIC_OBJECT_MANAGER</code> in\n<code>ace/config.h</code>.  Again, see the ACE Object_Manager header file,\n<a href=\"ace/Object_Manager.h\"><code>ace/Object_Manager.h</code></a> for more information.  One of\nthese requirements is discussed here, because it is so important.\nPlease note that <code>ACE_HAS_NONSTATIC_OBJECT_MANAGER</code> is\ndefined in the distributed ACE <code>config.h</code> headers for\nVxWorks and Win32.</p><p>\n\nThe important requirement is that the program <strong>must</strong>\ndeclare its <code>main</code> function with two arguments, even if\nthey're not used, and with <code>int</code> return type:\n\n</p><pre><code>\nint\nmain (int, char *[])\n</code></pre>\n\nIf you don't declare <code>main</code> <strong>exactly</strong> that\nway, then you'll see a link error about <code>ace_main_i</code> being\nundefined.<p>\n\nAlternatively, this feature can be disabled by commenting out the\n#define ACE_HAS_NONSTATIC_OBJECT_MANAGER in the\n<code>ace/config.h</code>.  But, that will make repeated testing more\ndifficult on VxWorks.  And, you'd either have to call static\nconstructors and destructors manually or unload/load the program\nbetween runs.  On Win32, disabling the feature can possibly lead to\nshutdown difficulties.</p><p>\n\n<strong><blink><font color=\"#ff0000\">WARNING:</font></blink></strong>\n<code>ACE_HAS_NONSTATIC_OBJECT_MANAGER</code> assumes that your\n<code>main</code> function is named <code>main</code>.  Any violation\nof this assumption is at your peril.  If you really need to call your\nentry point something other than <code>main</code>, you'll need to\nconstruct and destroy the ACE_Object_Manager.  The best way to do that\nis to call <code>ACE::init ()</code> and <code>ACE::fini ()</code>.\nOr, see the <code>#define</code> of <code>main (int, char *[])</code>\nin <a href=\"ace/OS_main.h\"><code>ace/OS_main.h</code></a> to see how ACE does\nthat for entry points named <code>main</code>.\n\n</p><p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h2><a name=\"cloning\">Cloning the Source Tree</a></h2>\n\nOn UNIX platforms, we typically like to support multiple platform\nbuilds using the same ACE source tree.  This idiom is supported by ACE\nusing the $ACE_ROOT/bin/create_ace_build.pl script.\n\nTo clone the source tree, create ./build and ./build/{your build name}\nsubdirectories under the ACE_wrappers directory.\nThen invoke the create_ace_build.pl script to clone the source tree using\nsoft links from your build directory back to the actual sources.\nHere is an example:</p><p>\n\n</p><pre>% cd ACE_wrappers\n% mkdir build build/build-SunOS5\n% perl bin/create_ace_build.pl -a -v build-SunOS5\n% cd build/build-SunOS5\n% setenv ACE_ROOT $cwd\n% make\n</pre><p>\n\nThis will establish a complete tree of links.  In addition, make sure\nyou set your <code>LD_LIBRARY_PATH</code> to\n<code>$ACE_ROOT/lib:$LD_LIBRARY_PATH</code> on SVR4 UNIX\nplatforms.</p><p>\n\nWhen you do a make in the $ACE_ROOT directory you will be producing\nobject code that is not stored in the same place as the original\nsource tree.  This way, you can easily build another platform in a\nparallel tree structure.</p><p>\n\nSee the comments at the top of the create_ace_build.pl script for\nfurther usage information.\n\n</p><p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h2><a name=\"mvs\">Additional Build Tips for MVS</a></h2>\n\nFor all intents and purpose, MVS OpenEdition (OE) is another flavor of\nUNIX, therefore, the instructions under <a href=\"#aceinstall\">Building\nand Installing ACE on Unix</a> can be used along with the following\nadditional tips:<p>\n\nYou can get a copy of GNU make that has been ported to MVS OpenEdition from\nthe <a href=\"http://www.s390.ibm.com/products/oe/index.html\">IBM OpenEdition web site</a>.\nACE's make scheme generates compile commands that have options and\noperands interspersed.  By default, the c89/cc/c++ compiler expects all options to\nprecede all operands.  To get around this, you must set a special\ncompiler environment variable (_CXX_CCMODE) to 1 which tells the compiler\nto allow options and operands to be interspersed.</p><p>\n\nNote that the environment variable <code>LD_LIBRARY_PATH</code> is\ncalled <code>LIBPATH</code> on MVS.</p><p>\n\nShared objects are built a little different on MVS than on\nother UNIX implementations.  This has been accounted for in the makefiles\nthat come with ACE   When the linker (via the cxx command) builds the\nlibACE.so file it will also create a file called libACE.x.  This is a\nside-deck file and it must be included in subsequent link edits with\napplication code.  For more information on this see the C/C++ MVS\nProgramming Guide.  If you want to build your application statically,\ni.e., using libACE.a instead of libACE.so, you can set ACELIB to\nACELIB_STATIC in platform_mvs.GNU.</p><p>\n\nWhen the libACE.so file is built (via the MVS pre-linker and binder), you\nwill get a rc=4 from the pre-linker.  This is ok.  This is due to some\nwarnings about unresolved references which should get resolved during the\nlink step.  Note, however, there shouldn't be any unresolved references\nfrom the binder (linkage editor).   You can get pre-link and link maps by\nuncommenting the PMAP and LMAP lines in the platform_mvs.GNU file.\n\n</p><p></p><hr align=\"left\" width=\"50%\"><p>\n</p><h2><a name=\"flags\">Makefile Flags</a></h2>\n\nGNU make provides many options to customize its operation.  See its\ndocumentation for more information.  One example is that for multi-cpu\nUNIX machines you will be able to build faster if you use:<p>\n\n</p><pre><code>\n% make -j <em>n</em>\n</code></pre><p>\n\nwhich allows parallel compilation. The number <i>n</i> should\ntypically be the number of CPUs.  It is likely that builds will be\nfaster even on single-CPU UNIX machines with <code>make -j\n2</code>.</p><p>\n\nACE further supports the following flags.  They can be enabled either\non the command line, e.g., \"make purify=1\", or added to your\n<code>platform_macros.GNU</code>.  To disable the option,\nset the flag to null,\ne.g., \"make debug=\".  Some flags support setting to 0 disable, e.g.,\n\"make debug=0\".  debug=1 is enabled in the platform files that are\nreleased with ACE.</p><p>\n\nPlease note that the effects of a flag may be platform specific.\nAlso, combinations of certain flags may or may not be allowed on\nspecific platforms, e.g., debug=1 opt=1 is supported by g++ but\nnot all other C++ compilers.</p><p>\n\nIf you use Purify or Quantify:  purify or quantify <strong>must</strong>\nbe on your <code>PATH</code>.  By default, ACE puts the Purify/Quantify\ncaches below <code>/tmp</code>.  To override that, set the\n<code>PURE_CACHE_BASE_DIR</code> variable, either in your environment\nor on the <code>make</code> make command line, to the destination\ndirectory for your instrumented libraries.</p><p>\n\n</p><pre>Flag             Description\n----             -----------\ndebug            Enable debugging; see DCFLAGS and DCCFLAGS.\nexceptions       Enable exception handling (not supported by all platforms).\ninclude_env      Support old-style ACE_TRY_ENV declarations in methods.\n                 This switch is necessary for compiling TAO applications\n                 in the native exception configuration that were written\n                 for TAO versions before 1.2.2.\n                 In TAO 1.2.2, new macros were introduced that supercede\n                 the direct ACE_TRY_ENV declarations. These are the\n                 ACE_ENV_ARG macros that are defined in ace/CORBA_macros.h\n                 and are documented in docs/exceptions.html.\n                 This switch only affects the exceptions=1 configuration.\n                 It is for backward compatibility only.\n                 There will be warnings about unused _ACE_environment_variable\n                 parameters when using include_env=1.\n                 If possible, do not use it, but instead change your TAO\n                 applications to use the ACE_ENV_ARG macros.\nfast             Enable -fast option, e.g., with Sun C++.\ninline           Enable ACE inlining.  Some platforms enable inlining by\n                   default, others do not.\noptimize         Enable optimization; see OCFLAGS and OCCFLAGS.\npace             Enable PACE as the underpinnings of ACE_OS.\nprobe            Enable ACE_Timeprobes.\nprofile          Enable profiling; see PCFLAGS and PCCFLAGS.\npurify           Purify all executables.\nquantify         Quantify all executables.\nrepo             Use GNU template repository (g++ with repo patches only).\nrtti             Enable run-time type identification.  On some platforms,\n                   it is enabled by default, so this is ignored.\nshared_libs      If migrating from prior version use <code>shared_libs_only</code>\nstatic_libs      If migrating from prior version use <code>static_libs_only</code>\nshared_libs_only Only build shared libraries.  Ignored if no SHLIBs are\n                   specified by the Makefile, as in performance-tests/Misc.\nstatic_libs_only Only build static libraries.\nthreads          Build with thread support.\nxt               Build with Xt (X11 Toolkit) support.\nfl               Build with FlTk (Fast Light Toolkit) support.\ntk               Build with Tk (Tcl/Tk) support.\nqt               Build with Qt (Trolltech Qt) support.\nssl              Build with OpenSSL support.\nrapi             Build with RAPI\nsplit            Build the library by first splitting up the ACE source\n                   to several files, with one object code entity for each\n                   source file. This allows an application that is linked\n                   with ACE to extract _exactly_ what it needs from the\n                   library, resulting in a smaller executable.  Setting this\n                   to 1 overrides debug to 0.\n\nUsually, users do not need to be concerned with make targets.\nJust enter \"make\" on the command line to build.  A few notable\ntargets are listed below.\n\nTarget             Description\n------             -----------\nshow_statics       Lists all static objects in object files built for\n                     current directory.  Only supported for g++.\nshow_uninit        Lists all uninitialized in object files built for\n                     current directory.  Only supported for g++.\n\n</pre>\n\n</p><hr><p>\n</p><h2><a name=\"power\">Building from git</a></h2>\nIf users are building from our <a href=\"https://github.com/DOCGroup/ACE_TAO\">Git repository</a> the\nGNUmakefiles, and project files for building on various platforms will\nnot be available.  Git users are expected to <a href=\"#generate_using_mpc\">generate them</a>\nusing <a href=\"https://raw.githubusercontent.com/DOCGroup/MPC/master/docs/README\">MPC</a> before building ACE, TAO or\nCIAO. We point out some suggestions below to get bootstrapped\nquickly.\n\n<ul>\n  <li>You can clone all code easily from our git repository.\n  <ul>\n  <code>git clone https://github.com/DOCGroup/ACE_TAO.git</code>\n  </ul>\n  </p></li><li>Please make sure that you have <a href=\"http://www.perl.org/\">\n  perl</a> installed, preferably perl\n  5.8 or higher. Users on Win32 based platforms are recommended to use\n  <a href=\"http://www.activestate.com/Products/ActivePerl/\"> Active\n  State Perl</a>. We use active state perl without problems. We have\n  ran into problems trying to use the cygwin version of perl on Win32\n  based platforms. <p>\n  </p></li>\n  <a name=\"generate_using_mpc\"></a>\n  <li>To build ACE and associated tests, examples,\n  and associated utility libraries with GNUmakefiles, you must\n  generate GNUmakefiles with MPC:<p>\n  <code> $ACE_ROOT/bin/mwc.pl -type gnuace ACE.mwc</code> </p>\n  <p>On Windows, with Visual C++ 8, you must generate solution and project files with MPC:<p>\n\n  <code> $ACE_ROOT/bin/mwc.pl -type vc8 ACE.mwc </code> </p><p>\n\n  On Windows, with Visual C++ 7, you must generate solution and project files with MPC:<p>\n  <code> $ACE_ROOT/bin/mwc.pl -type vc71 ACE.mwc </code> </p>\n  </li><li>If you want to build TAO and its associated libraries\n  please see <a href=\"TAO/TAO-INSTALL.html\">TAO-INSTALL</a> for details.\n</li></ul>\n\n<hr><p>\n\nBack to the <a href=\"http://www.cs.wustl.edu/%7Eschmidt/ACE.html\">ACE</a>\nhome page.\n\n\n\n\n</p><p>\n<!--<EM>\nVisitor #\nfrom\n<EM><br> -->\n\n<!-- hhmts start -->\n\n<!-- hhmts end -->\n\n\n</p></body></html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/bin/valgrind.supp": "\n{\n   <Suppress all the leaks in cc1plus>\n   Memcheck:Leak\n   fun:*\n   obj:*cc1plus\n}\n\n{\n   <Suppress all the leaks in g++>\n   Memcheck:Leak\n   fun:*\n   obj:*g++*\n}\n\n{\n   <Suppress all the leaks in perl>\n   Memcheck:Leak\n   ...\n   obj:*/bin/perl\n}\n\n{\n   <Suppress all the leaks in bash>\n   Memcheck:Leak\n   ...\n   obj:*/bin/bash\n}\n\n{\n   <Suppress all the leaks in grep>\n   Memcheck:Leak\n   ...\n   obj:*/bin/grep\n}\n\n{\n   <Suppress all the conditional jumps in grep>\n   Memcheck:Cond\n   ...\n   obj:*/bin/grep\n}\n\n{\n   <Suppress all the leaks in ps>\n   Memcheck:Leak\n   ...\n   obj:*/bin/ps\n}\n\n{\n   <Suppress all the leaks in ls>\n   Memcheck:Leak\n   ...\n   obj:*/bin/ls\n}\n\n# {\n#   <RTI warning>\n#   Memcheck:Param\n#   fun:*\n#   fun:NDDS_Transport_UDPv4_send\n#   fun:RTINetioSender_send\n# }\n\n{\n   <Invalid read>\n   Memcheck:Addr8\n   fun:__memcpy_ssse3_back\n}\n\n{\n   <IIOP error>\n   Memcheck:Addr8\n   fun:__strspn_sse42\n}\n\n{\n   <cleanup load>\n   Memcheck:Leak\n   fun:*\n   fun:*ACE_Log_Msg_Manager*get_lock*\n}\n\n{\n   <cleanup load>\n   Memcheck:Leak\n   ...\n   fun:*ACE_Log_Msg*close*\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:*\n   fun:*ACE_Log_Msg_Manager*init_backend*\n}\n\n{\n   <dlopen>\n   Memcheck:Leak\n   fun:calloc\n   fun:_dlerror_run\n}\n\n{\n  <dlopen2>\n   Memcheck:Leak\n   fun:malloc\n   fun:add_to_global\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n}\n\n{\n   <dlopen3>\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n   fun:openaux\n   fun:_dl_catch_error\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n}\n\n{\n  <dlopen4>\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n}\n\n{\n  <dlopen5>\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_check_map_versions\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n}\n\n{\n   <dlopen6>\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n   fun:openaux\n   fun:_dl_catch_error\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n}\n\n{\n   <dlopen7>\n   Memcheck:Leak\n   fun:calloc\n   fun:do_lookup_x\n   fun:_dl_lookup_symbol_x\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   fun:open_path\n   fun:_dl_map_object\n   fun:openaux\n   fun:_dl_catch_error\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_close_worker\n   fun:_dl_close\n   fun:_dl_catch_error\n   fun:_dlerror_run\n   fun:dlclose\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   obj:/usr/lib64/libicuuc.so.42.0\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_new_object\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_scope_free\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_lookup_symbol_x\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_new_object\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   fun:open_path\n   fun:_dl_map_object\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   fun:realloc\n   fun:_dl_new_object\n}\n\n{\n  <ndds>\n  Memcheck:Leak\n  fun:*\n  fun:*_dl_scope_free*\n}\n\n{\n  <ndds>\n  Memcheck:Leak\n  fun:*\n  fun:*_dl_new_object*\n}\n\n{\n  <ndds>\n  Memcheck:Leak\n  fun:*\n  fun:*NDDSConfigLogger*get_instance*\n}\n\n{\n  <ndds>\n  Memcheck:Leak\n  fun:*\n  fun:*register_or_unregister_typeI*\n}\n\n{\n   <insert_a_suppression_name_here>\n   Memcheck:Leak\n   fun:malloc\n   fun:dl_open_worker\n}\n\n{\n   <see https://bugzilla.redhat.com/show_bug.cgi?id=755242>\n   Memcheck:Addr8\n   fun:wcscmp\n}\n\n{\n  <ndds>\n  Memcheck:Leak\n  ...\n  fun:PRESPsReaderQueue_initializeQueryConditionInventory\n}\n\n{\n   <uninitialized socket buffer>\n   Memcheck:Param\n   writev(vector[...])\n   fun:writev\n   fun:*ACE*sendv*\n   fun:*TAO_IIOP_Transport*send*\n   fun:*TAO_Transport*drain_queue_helper*\n   fun:*TAO_Transport*drain_queue_i*\n   fun:*TAO_Transport*send_synch_message_helper*\n   ...\n   fun:*TAO_IIOP_Transport*send_message*\n}\n\n{\n   <uninitialized buffer>\n   Memcheck:Value8\n   fun:*nibble2hex*\n   fun:*ORB*object_to_string*\n}\n\n{\n   <zlib Conditional jump or move depends on uninitialised value(s)>\n   Memcheck:Cond\n   obj:/usr/lib/libz.so.1.2.3\n   obj:/usr/lib/libz.so.1.2.3\n   fun:deflate\n   fun:compress2\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/bin/fuzz.pl": "eval '(exit $?0)' && eval 'exec perl -S $0 ${1+\"$@\"}'\n    & eval 'exec perl -S $0 $argv:q'\n    if 0;\n\n#   Fuzz is a script whose purpose is to check through ACE/TAO/CIAO files for\n#   easy to spot (by a perl script, at least) problems.\n\nuse lib \"$ENV{ACE_ROOT}/bin\";\nif (defined $ENV{srcdir}) {\n  use lib \"$ENV{srcdir}/bin\";\n}\n\nuse Cwd;\nuse File::Find;\nuse File::Basename;\nuse Getopt::Std;\nuse PerlACE::Run_Test;\n\n###### TODO\n#\n# Add tests for these:\n#\n# - Guards in .h files\n# - no global functions\n# - other commit_check checks\n#\n# And others in ACE_Guidelines and Design Rules\n#\n# Also add a -g flag to ignore tao_idl generated files\n#\n###### END TODO\n\n# Lists of all the files\n@files_cdp = ();\n@files_cpp = ();\n@files_inl = ();\n@files_h = ();\n@files_html = ();\n@files_dsp = ();\n@files_dsw = ();\n@files_gnu = ();\n@files_idl = ();\n@files_pl = ();\n@files_py = ();\n@files_changelog = ();\n@files_makefile = ();\n@files_mpc = ();\n@files_bor = ();\n@files_noncvs = ();\n@files_sln = ();\n@files_vcproj = ();\n@files_run_pl = ();\n@files_generic = ();\n@files_doxygen = ();\n@files_conf = ();\n@files_rb = ();\n@files_features = ();\n\n# To keep track of errors and warnings\n$errors = 0;\n$warnings = 0;\n\n# to register suppressed tests\n%suppressed_tests = ();\n\n# to register excluded directories\n@excluded_dirs = ();\n\n##############################################################################\n\n# Use 'svn -q st' to get a list of locally modified\n# files to look through\nsub find_mod_svn_files ()\n{\n    unless (open (SVN, \"svn -q st |\")) {\n        print STDERR \"Error: Could not run svn\\n\";\n        return 0;\n    }\n\n    while (<SVN>) {\n        #        1234567   (see \"svn help st\" for column definitions)\n        if (/^[MA].....\\s+(.*)$/) {\n            store_file ($1);\n        }\n    }\n    close (SVN);\n    return 1;\n}\n\n# Use 'git status -s' to get a list of locally modified\n# files to look through\nsub find_mod_git_files ()\n{\n    unless (open (GIT, \"git status -s |\")) {\n        print STDERR \"Error: Could not run git\\n\";\n        return 0;\n    }\n\n    while (<GIT>) {\n        if (/^ [MA] +(.*)$/) {\n            store_file ($1);\n        }\n    }\n    close (GIT);\n    return 1;\n}\n\nsub find_mod_files ()\n{\n  if (!(find_mod_svn_files() && find_mod_git_files())) {\n    print \"Could use neither svn nor git to find modified files\\n\";\n    exit (1);\n  }\n}\n\n\nsub is_excluded ($)\n{\n  # exclude will contain the full file name\n  my $exclude = shift;\n  foreach (@excluded_dirs) {\n      if ($exclude =~ /$_/) {\n          return 1;\n      }\n  }\n  return 0;\n}\n\n# Find_Files will search for files with certain extensions in the\n# directory tree\nsub find_files ()\n{\n    # wanted is only used for the File::Find\n    sub wanted\n    {\n        store_file ($File::Find::name);\n    }\n\n    find (\\&wanted, '.');\n}\n\n#\nsub store_file ($)\n{\n    my $name = shift;\n\n    return if is_excluded ($name);\n\n    if ($name =~ /\\.(c|cc|cpp|cxx|tpp)$/i) {\n        push @files_cpp, ($name);\n    }\n    elsif ($name =~ /\\.(inl|i)$/i) {\n        push @files_inl, ($name);\n    }\n    elsif ($name =~ /\\.(h|hh|hpp|hxx)$/i) {\n        push @files_h, ($name);\n    }\n    elsif ($name =~ /\\.(htm|html)$/i) {\n        push @files_html, ($name);\n    }\n    elsif ($name =~ /\\.(bor)$/i) {\n        push @files_bor, ($name);\n    }\n    elsif ($name =~ /\\.(GNU)$/i) {\n        push @files_gnu, ($name);\n    }\n    elsif ($name =~ /\\.(dsp|vcp)$/i) {\n        push @files_dsp, ($name);\n    }\n    elsif ($name =~ /\\.(dsw|vcp)$/i) {\n        push @files_dsw, ($name);\n    }\n    elsif ($name =~ /\\.(pidl|idl|idl3|idl3p)$/i) {\n        push @files_idl, ($name);\n    }\n    elsif ($name =~ /\\.pl$/i) {\n        if ($name =~ /fuzz.pl/) {\n          return;\n        }\n        push @files_pl, ($name);\n        if ($name =~ /^run.*\\.pl$/i) {\n            push @files_run_pl, ($name);\n        }\n    }\n    elsif ($name =~ /\\.py$/i) {\n        push @files_py, ($name);\n    }\n    elsif ($name =~ /\\.(rb|erb)$/i) {\n        push @files_rb, ($name);\n    }\n    elsif ($name =~ /\\.features$/i) {\n        push @files_features, ($name);\n    }\n    elsif ($name =~ /\\.vcproj$/i) {\n        push @files_vcproj, ($name);\n    }\n    elsif ($name =~ /\\.sln$/i) {\n        push @files_sln, ($name);\n    }\n    elsif ($name =~ /ChangeLog/i && -f $name) {\n        push @files_changelog, ($name);\n    }\n    elsif ($name =~ /\\/GNUmakefile.*.[^~]$/) {\n        push @files_makefile, ($name);\n    }\n    elsif ($name =~ /\\.(mpc|mwc|mpb|mpt)$/i) {\n        push @files_mpc, ($name);\n    }\n    elsif ($name =~ /\\.(icc|ncb|zip)$/i) {\n        push @files_noncvs, ($name);\n    }\n    elsif ($name =~ /\\.(cdp)$/i) {\n        push @files_cdp, ($name);\n    }\n    elsif ($name =~ /\\.(doxygen)$/i) {\n        push @files_doxygen, ($name);\n    }\n    elsif ($name =~ /\\.(conf)$/i) {\n        if ($name =~ /\\.(WCHAR_T.conf|UTF-16.conf)$/i) {\n            return;\n        }\n        push @files_conf, ($name);\n    }\n    elsif ($name =~ /\\.(conf.xml)$/i) {\n        if ($name =~ /\\.(WCHAR_T.conf.xml|UTF-16.conf.xml)$/i) {\n            return;\n        }\n        push @files_conf, ($name);\n    }\n    elsif ($name =~ /\\.(pm|cmd|java|sh|txt|xml)$/i) {\n        push @files_generic, ($name);\n    }\n    elsif ($name =~ /README$/i) {\n        push @files_generic, ($name);\n    }\n}\n\n##############################################################################\n## Just messages\n\nsub print_error ($)\n{\n    my $msg = shift;\n    print \"Error: $msg\\n\";\n    ++$errors;\n}\n\n\nsub print_warning ($)\n{\n    my $msg = shift;\n    print \"Warning: $msg\\n\";\n    ++$warnings;\n}\n\n##############################################################################\n## Check if test is suppressed\n\nsub is_suppressed ()\n{\n  my $method = (split (/::/, (caller(1))[3]))[-1];\n  return (defined $suppressed_tests{$method} ? 1 : 0);\n}\n\n##############################################################################\n## Tests\n\n# The point of this test is to check for the existence of ACE_INLINE\n# or ASYS_INLINE in a .cpp file.  This is most commonly caused by\n# copy/pasted code from a .inl/.i file\nsub check_for_inline_in_cpp ()\n{\n    return if is_suppressed ();\n\n    print \"Running ACE_INLINE/ASYS_INLINE check\\n\";\n    foreach $file (@files_cpp) {\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/^ACE_INLINE/) {\n                    print_error (\"$file:$.: ACE_INLINE found\");\n                }\n                if (/^ASYS_INLINE/) {\n                    print_error (\"$file:$.: ASYS_INLINE found\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks to make sure we have no files with $Id string in them.\nsub check_for_id_string ()\n{\n    return if is_suppressed ();\n\n    print \"Running \\$Id\\$ string check\\n\";\n    foreach $file (@files_cpp, @files_inl, @files_h, @files_mpc, @files_bor,\n                   @files_gnu, @files_html, @files_idl, @files_pl,\n                   @files_cdp, @files_py, @files_conf, @files_generic, @files_features) {\n        my $found = 0;\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/\\$id\\$/) {\n                    print_error (\"$file:$.: Incorrect \\$id\\$ found (correct casing)\");\n                }\n                if (/\\$Id:\\$/) {\n                    print_error (\"$file:$.: Incorrect \\$Id:\\$ found (remove colon)\");\n                }\n                if (/\\$Id\\$/ || /\\$Id: /) {\n                    $found = 1;\n                }\n            }\n            close (FILE);\n            if ($found == 1) {\n                print_error (\"$file: \\$Id\\$ string found, not used anymore.\");\n            }\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# check for _MSC_VER\nsub check_for_msc_ver_string ()\n{\n    return if is_suppressed ();\n\n    print \"Running _MSC_VER check\\n\";\n    foreach $file (@files_cpp, @files_inl, @files_h) {\n        my $found = 0;\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            my $mscline = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_msc_ver/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_msc_ver/) {\n                    $disable = 0;\n                }\n                if ($disable == 0 and /\\_MSC_VER \\<= 1200/) {\n                    $found = 1;\n                    $mscline = $.;\n                }\n                if ($disable == 0 and /\\_MSC_VER \\>= 1200/) {\n                    $found = 1;\n                    $mscline = $.;\n                }\n                if ($disable == 0 and /\\_MSC_VER \\> 1200/) {\n                    $found = 1;\n                    $mscline = $.;\n                }\n                if ($disable == 0 and /\\_MSC_VER \\< 1300/) {\n                    $found = 1;\n                    $mscline = $.;\n                }\n                if ($disable == 0 and /\\_MSC_VER \\<= 1300/) {\n                    $found = 1;\n                    $mscline = $.;\n                }\n                if ($disable == 0 and /\\_MSC_VER \\>= 1300/) {\n                    $found = 1;\n                    $mscline = $.;\n                }\n                if ($disable == 0 and /\\_MSC_VER \\< 1310/) {\n                    $found = 1;\n                    $mscline = $.;\n                }\n                if ($disable == 0 and /\\_MSC_VER \\>= 1310/) {\n                    $found = 1;\n                    $mscline = $.;\n                }\n            }\n            close (FILE);\n            if ($found == 1) {\n               print_error (\"$file:$mscline: Incorrect _MSC_VER check found\");\n            }\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the newline at the end of a file\nsub check_for_newline ()\n{\n    return if is_suppressed ();\n\n    print \"Running newline check\\n\";\n    foreach $file (@files_cpp, @files_inl, @files_h,\n                   @files_html, @files_idl, @files_pl) {\n        if (open (FILE, $file)) {\n            my $line;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                $line = $_\n            }\n            close (FILE);\n            if ($line !~ /\\n$/) {\n                print_error (\"$file:$.: No ending newline found in $file\");\n            }\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n\n# This test checks for files that are not allowed to be in svn\nsub check_for_noncvs_files ()\n{\n    return if is_suppressed ();\n\n    print \"Running non svn files check\\n\";\n    foreach $file (@files_noncvs, @files_dsp, @files_dsw, @files_makefile, @files_bor) {\n        print_error (\"File $file should not be in svn!\");\n    }\n}\n\n# This test checks for the use of ACE_SYNCH_MUTEX in TAO/CIAO,\n# TAO_SYNCH_MUTEX should used instead.\n\nsub check_for_ACE_SYNCH_MUTEX ()\n{\n    return if is_suppressed ();\n\n    print \"Running ACE_SYNCH_MUTEX check\\n\";\n    ITERATION: foreach $file (@files_cpp, @files_inl, @files_h) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_ACE_SYNCH_MUTEX/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_ACE_SYNCH_MUTEX/) {\n                    $disable = 0;\n                    next;\n                }\n                if ($disable == 0 and /ACE_SYNCH_MUTEX/) {\n                    # It is okay to use ACE_SYNCH_MUTEX in ACE\n                    # so don't check the ACE directory. The below\n                    # will check it for TAO and CIAO.\n                    if (($file !~ /.*TAO.*/)) {\n                      next ITERATION;\n                    }\n\n                    # Disable the check in the ESF directory for the\n                    # time being until we fix the issues there.\n                    if(($file =~ /.*TAO\\/orbsvcs\\/orbsvcs\\/ESF.*/)) {\n                      next ITERATION;\n                    }\n\n                    print_error (\"$file:$.: found ACE_SYNCH_MUTEX, use TAO_SYNCH_MUTEX instead\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for not having export files in CIAO, all have to be ---\n# generated using TAO_IDL. If you have a file that must be in the repository\n# remove the generated automatically by line\nsub check_for_export_file ()\n{\n    return if is_suppressed ();\n\n    print \"Running export file check\\n\";\n    ITERATION: foreach $file (@files_h) {\n        if (($file =~ /.*CIAO.*export.h/) || ($file =~ /.*DAnCE.*export.h/)) {\n          if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n              if (/generated automatically by/) {\n                print_error (\"$file:$.: file should be generated by TAO_IDL, check -Gxh** option\");\n              }\n            }\n            close (FILE);\n          }\n          else {\n            print STDERR \"Error: Could not open $file\\n\";\n          }\n        }\n    }\n}\n\n\n# This test checks for the use of ACE_Thread_Mutex in TAO/CIAO,\n# TAO_SYNCH_MUTEX should used instead to make the code build\n# in single-threaded builds.\nsub check_for_ACE_Thread_Mutex ()\n{\n    return if is_suppressed ();\n\n    print \"Running ACE_Thread_Mutex check\\n\";\n    ITERATION: foreach $file (@files_cpp, @files_inl, @files_h) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_ACE_Thread_Mutex/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_ACE_Thread_Mutex/) {\n                    $disable = 0;\n                    next;\n                }\n                if ($disable == 0 and /ACE_Thread_Mutex/) {\n                    # It is okay to use ACE_Thread_Mutex in ACE\n                    # so don't check the ACE directory. The below\n                    # will check it for TAO and CIAO.\n                    if (($file !~ /.*TAO.*/)) {\n                      next ITERATION;\n                    }\n\n                    print_error (\"$file:$.: found ACE_Thread_Mutex, use TAO_SYNCH_MUTEX instead to allow the code to work in single-threaded builds\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the use of ACE_Guard\n# ACE_GUARD should used because it checks if we really got a lock\n# in single-threaded builds.\nsub check_for_ACE_Guard ()\n{\n    return if is_suppressed ();\n\n    print \"Running ACE_Guard check\\n\";\n    ITERATION: foreach $file (@files_cpp, @files_inl, @files_h) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_ACE_Guard/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_ACE_Guard/) {\n                    $disable = 0;\n                    next;\n                }\n                if ($disable == 0 and /ACE_Guard/) {\n                    print_error (\"$file:$.: found ACE_Guard, use ACE_GUARD\");\n                }\n                if ($disable == 0 and /ACE_Read_Guard/) {\n                    print_error (\"$file:$.: found ACE_Read_Guard, use ACE_READ_GUARD\");\n                }\n                if ($disable == 0 and /ACE_Write_Guard/) {\n                    print_error (\"$file:$.: found ACE_Write_Guard, use ACE_WRITE_GUARD\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the use of tabs, spaces should be used instead of tabs\nsub check_for_tab ()\n{\n    return if is_suppressed ();\n\n    print \"Running tabs check\\n\";\n    ITERATION: foreach $file (@files_cpp, @files_inl, @files_h, @files_idl, @files_cdp, @files_doxygen, @files_changelog) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_tab/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_tab/) {\n                    $disable = 0;\n                }\n                if ($disable == 0 and /.*\\t.*/) {\n                    print_error (\"$file:$.: found tab\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\nsub check_for_trailing_whitespace ()\n{\n    return if is_suppressed ();\n\n    print \"Running trailing_whitespaces check\\n\";\n    ITERATION: foreach $file (@files_cpp, @files_inl, @files_h, @files_idl,\n                              @files_cdp, @files_pl, @files_py, @files_generic) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_trailing_whitespace/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_trailing_whitespace/) {\n                    $disable = 0;\n                }\n                if ($disable == 0 and /\\s\\n$/) {\n                    print_error (\"$file:$.: found trailing whitespace\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the lack of ACE_OS\nsub check_for_lack_ACE_OS ()\n{\n    return if is_suppressed ();\n\n    $OS_NS_arpa_inet_symbols = \"inet_addr|inet_aton|inet_ntoa|inet_ntop|inet_pton\";\n\n    $OS_NS_ctype_symbols = \"isalnum|isalpha|iscntrl|isdigit|isgraph|islower|isprint|ispunct|isspace|isupper|isxdigit|tolower|toupper|isblank|isascii|isctype|iswctype\";\n\n    $OS_NS_dirent_symbols = \"closedir|opendir|readdir|readdir_r|rewinddir|scandir|alphasort|seekdir|telldir|opendir_emulation|scandir_emulation|closedir_emulation|readdir_emulation\";\n\n    $OS_NS_dlfcn_symbols = \"dlclose|dlerror|dlopen|dlsym\";\n\n    $OS_NS_errno_symbols = \"last_error|set_errno_to_last_error|set_errno_to_wsa_last_error\";\n\n    $OS_NS_fcntl_symbols = \"fcntl|open\";\n\n    $OS_NS_math_symbols = \"floor|ceil|log2\";\n\n    $OS_NS_netdb_symbols = \"gethostbyaddr|gethostbyaddr_r|gethostbyname|gethostbyname_r|getipnodebyaddr|getipnodebyname|getmacaddress|getprotobyname|getprotobyname_r|getprotobynumber|getprotobynumber_r|getservbyname|getservbyname_r|netdb_acquire|netdb_release\";\n\n    $OS_NS_poll_symbols = \"poll\";\n\n    $OS_NS_pwd_symbols = \"endpwent|getpwent|getpwnam|getpwnam_r|setpwent\";\n\n    $OS_NS_regex_symbols = \"compile|step\";\n\n    $OS_NS_signal_symbols = \"kill|pthread_sigmask|sigaction|sigaddset|sigdelset|sigemptyset|sigfillset|sigismember|signal|sigprocmask|sigsuspend|raise\";\n\n    $OS_NS_stdio_symbols = \"fileno|checkUnicodeFormat|clearerr|cuserid|fclose|fdopen|fflush|fgetc|getc|fgetpos|fgets|flock_adjust_params|flock_init|flock_destroy|flock_rdlock|flock_tryrdlock|flock_trywrlock|flock_unlock|flock_wrlock|fopen|default_win32_security_attributes|default_win32_security_attributes_r|get_win32_versioninfo|get_win32_resource_module|set_win32_resource_module|fprintf|ungetc|fputc|putc|fputs|fread|freopen|fseek|fsetpos|ftell|fwrite|perror|printf|puts|rename|rewind|snprintf|sprintf|tempnam|vsprintf|vsnprintf|asprintf|aswprintf|vasprintf|vaswprintf\";\n\n    $OS_NS_stdlib_symbols = \"_exit|abort|atexit|atof|atol|atoi|atop|bsearch|calloc|exit|free|getenv|getenvstrings|itoa|itoa_emulation|itow_emulation|malloc|mkstemp|mkstemp_emulation|mktemp|setenv|unsetenv|putenv|qsort|rand|rand_r|realloc|realpath|set_exit_hook|srand|strenvdup|strtod|strtol|strtol_emulation|strtoul|strtoul_emulation|strtoll|strtoll_emulation|strtoull|strtoull_emulation|system|getprogname|setprogname\";\n\n    $OS_NS_string_symbols = \"memchr|memchr_emulation|memcmp|memcpy|fast_memcpy|memmove|memset|strcat|strchr|strcmp|strcpy|strcspn|strdup|strdup_emulation|strecpy|strerror|strerror_emulation|strsignal|strlen|strncat|strnchr|strncmp|strncpy|strnlen|strnstr|strpbrk|strrchr|strrchr_emulation|strsncpy|strspn|strstr|strtok|strtok_r|strtok_r_emulation\";\n\n    $OS_NS_strings_symbols = \"strcasecmp|strncasecmp|strcasecmp_emulation\";\n\n    $OS_NS_stropts_symbols = \"getmsg|getpmsg|fattach|fdetach|ioctl|isastream|putmsg|putpmsg\";\n\n    $OS_NS_sys_mman_symbols = \"madvise|mmap|mprotect|msync|munmap|shm_open|shm_unlink\";\n\n    $OS_NS_sys_msg_symbols = \"msgctl|msgget|msgrcv|msgsnd\";\n\n    $OS_NS_sys_resource_symbols = \"getrlimit|getrusage|setrlimit\";\n\n    $OS_NS_sys_select_symbols = \"select\";\n\n    $OS_NS_sys_sendfile_symbols = \"sendfile|sendfile_emulation\";\n\n    $OS_NS_sys_shm_symbols = \"shmat|shmctl|shmdt|shmget\";\n\n    $OS_NS_sys_socket_symbols = \"accept|bind|closesocket|connect|enum_protocols|getpeername|getsockname|getsockopt|join_leaf|listen|recv|recvfrom|recvmsg|recvv|send|sendmsg|sendto|sendv|setsockopt|shutdown|if_nametoindex|if_indextoname|if_nameindex|socket_init|socket_fini|socket|socketpair\";\n\n    $OS_NS_sys_stat_symbols = \"creat|filesize|fstat|lstat|mkdir|mkfifo|stat|umask\";\n\n    $OS_NS_sys_time_symbols = \"gettimeofday\";\n\n    $OS_NS_sys_uio_symbols = \"readv|readv_emulation|writev|writev_emulation\";\n\n    $OS_NS_sys_utsname_symbols = \"uname\";\n\n    $OS_NS_sys_wait_symbols = \"wait|waitpid\";\n\n    $OS_NS_Thread_symbols = \"cleanup_tss|condattr_init|condattr_destroy|cond_broadcast|cond_destroy|cond_init|cond_signal|cond_timedwait|cond_wait|event_destroy|event_init|event_pulse|event_reset|event_signal|event_timedwait|event_wait|lwp_getparams|lwp_setparams|mutex_destroy|mutex_init|mutex_lock|mutex_lock_cleanup|mutex_trylock|mutex_unlock|priority_control|recursive_mutex_cond_unlock|recursive_mutex_cond_relock|recursive_mutex_destroy|recursive_mutex_init|recursive_mutex_lock|recursive_mutex_trylock|recursive_mutex_unlock|rw_rdlock|rw_tryrdlock|rw_trywrlock|rw_trywrlock_upgrade|rw_unlock|rw_wrlock|rwlock_destroy|rwlock_init|sched_params|scheduling_class|sema_destroy|sema_init|sema_post|sema_trywait|sema_wait|semctl|semget|semop|set_scheduling_params|sigtimedwait|sigwait|sigwaitinfo|thr_cancel|thr_cmp|thr_continue|thr_create|thr_equal|thr_exit|thr_getconcurrency|thr_getprio|thr_getspecific_native|thr_getspecific|thr_join|thr_get_affinity|thr_set_affinity|thr_key_detach|thr_key_used|thr_keycreate_native|thr_keycreate|thr_keyfree|thr_kill|thr_min_stack|thr_self|thr_setcancelstate|thr_setcanceltype|thr_setconcurrency|thr_setprio|thr_setspecific_native|thr_setspecific|thr_sigsetmask|thr_suspend|thr_testcancel|thr_yield|thread_mutex_destroy|thread_mutex_init|thread_mutex_lock|thread_mutex_trylock|thread_mutex_unlock|unique_name\";\n\n    $OS_NS_time_symbols = \"asctime|asctime_r|clock_gettime|clock_settime|ctime|ctime_r|difftime|gmtime|gmtime_r|localtime|localtime_r|mktime|nanosleep|readPPCTimeBase|strftime|strptime|strptime_emulation|strptime_getnum|time|timezone|tzset\";\n\n    $OS_NS_unistd_symbols = \"access|alarm|allocation_granularity|argv_to_string|chdir|rmdir|close|dup|dup2|execl|execle|execlp|execv|execve|execvp|fork|fork_exec|fsync|ftruncate|getcwd|getgid|getegid|getopt|getpagesize|getpgid|getpid|getppid|getuid|geteuid|hostname|isatty|lseek|llseek|num_processors|num_processors_online|pipe|pread|pwrite|read|read_n|readlink|sbrk|setgid|setegid|setpgid|setregid|setreuid|setsid|setuid|seteuid|sleep|string_to_argv|swab|sysconf|sysinfo|truncate|ualarm|unlink|write|write_n\";\n\n    $OS_NS_wchar_symbols = \"fgetwc|wcscat_emulation|wcschr_emulation|wcscmp_emulation|wcscpy_emulation|wcscspn_emulation|wcsicmp_emulation|wcslen_emulation|wcsncat_emulation|wcsncmp_emulation|wcsncpy_emulation|wcsnicmp_emulation|wcspbrk_emulation|wcsrchr_emulation|wcsrchr_emulation|wcsspn_emulation|wcsstr_emulation|wslen|wscpy|wscmp|wsncmp|ungetwc\";\n\n    print \"Running ACE_OS check\\n\";\n    foreach $file (@files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_lack_ACE_OS/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_lack_ACE_OS/) {\n                    $disable = 0;\n                }\n                if ($disable == 0) {\n                    if($file !~ /.c$/ && $file !~ /S.cpp$/ && $file !~ /S.inl$/ && $file !~ /C.cpp$/ && $file !~ /C.inl$/) {\n                        if($file !~ /OS_NS_arpa_inet/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_arpa_inet_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_arpa_inet.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_ctype/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_ctype_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_ctype.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_dirent/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_dirent_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_dirent.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_dlfcn/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_dlfcn_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_dlfcn.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_errno/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_errno_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_errno.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_fcntl/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_fcntl_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_fcntl.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_math/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_math_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_math.\");\n                            }\n                        }\n                        if($file !~ /OS_NS_netdb/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_netdb_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_netdb.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_poll/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_netdb_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_poll.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_pwd/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_pwd_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_pwd.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_regex/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_regex_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_regex.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_signal/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_signal_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_signal.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_stdlib/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_stdlib_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_stdlib.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_stdio/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_stdio_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_stdio.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_string/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_string_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_string.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_strings/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_strings_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_strings.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_stropts/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_stropts_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_stropts.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_mman/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_mman_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_mman.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_msg/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_msg_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_msg.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_resource/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_resource_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_resource.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_select/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_select_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_select.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_sendfile/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_sendfile_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_sendfile.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_shm/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_shm_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_shm.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_socket/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_socket_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_socket.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_stat/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_stat_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_stat.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_time/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_time_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_time.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_uio/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_uio_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_uio.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_utsname/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_utsname_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_utsname.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_sys_wait/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_sys_wait_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_sys_wait.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_Thread/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_Thread_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_Thread.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_time/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_time_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_time.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_unistd/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_unistd_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_unistd.h\");\n                            }\n                        }\n                        if($file !~ /OS_NS_wchar/) {\n                            if(/(\\s+:{0,2}|\\(:{0,2}|\\s*!:{0,2}|^|\\):{0,2})($OS_NS_wchar_symbols)\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                                print_error (\"$file:$.: missing ACE_OS use ace/OS_NS_wchar.h\");\n                            }\n                        }\n                    }\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the use of exception specification,\n# exception specification has fallen out of favor, and generally\n# should not be used.\nsub check_for_exception_spec ()\n{\n    return if is_suppressed ();\n\n    print \"Running exception specification check\\n\";\n\n    foreach $file (@files_cpp, @files_inl, @files_h) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_exception_sepc/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_exception_sepc/) {\n                    $disable = 0;\n                }\n                if ($disable == 0) {\n                    if(/throw\\s*\\(\\s*\\)/) {\n                        #next;\n                    }\n                    elsif(/(^|\\s+)throw\\s*\\(/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                        print_error (\"$file:$.: exception specification found\");\n                    }\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the use of NULL,\n# NULL shouldn't be used, use 0 instead\nsub check_for_NULL ()\n{\n    return if is_suppressed ();\n\n    print \"Running NULL usage check\\n\";\n\n    foreach $file (@files_cpp, @files_inl, @files_h) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_NULL/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_NULL/) {\n                    $disable = 0;\n                }\n                if ($disable == 0) {\n                    if(/(\\(|\\)|\\s+|=)NULL(\\)|\\s+|\\;|\\,)/ and $` !~ /\\/\\// and $` !~ /\\/\\*/ and $` !~ /\\*\\*+/ and $` !~ /\\s+\\*+\\s+/) {\n                        print_error (\"$file:$.: NULL found\");\n                    }\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for improper main declaration,\n# the proper form should look like:\n# int ACE_TMAIN (int argc, ACE_TCHAR *argv[])\nsub check_for_improper_main_declaration ()\n{\n    return if is_suppressed ();\n\n    print \"Running Improper main() declaration check\\n\";\n\n    foreach $file (@files_cpp) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            my $type_of_main;\n            my $multi_line;\n            my $not_found_end_line_count= 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (!defined $multi_line) {\n                    if (/FUZZ\\: disable check_for_improper_main_declaration/) {\n                        $disable = 1;\n                        next;\n                    }\n                    elsif (/FUZZ\\: enable check_for_improper_main_declaration/) {\n                        $disable = 0;\n                        next;\n                    }\n                    elsif ($disable == 0) {\n                        s/^\\s+//;           ## Remove leading space\n                        s/\\s*(\\/\\/.*)?$//;  ## Remove trailing space and line comments\n                        if (s/^(?:.*\\s)?(main|ACE_TMAIN)\\s*//) {\n                            $type_of_main = $1; ## main or ACE_TMAIN\n                            $multi_line   = $_; ## Rest of the line\n                        }\n                        else {\n                            next;\n                        }\n                    }\n                }\n                else {\n                    $_ =~ s/^\\s+//;           ## Remove leading space\n                    $_ =~ s/\\s*(\\/\\/.*)?$//;  ## Remove trailling space and line comments\n                    if ($multi_line eq \"\") {  ## Append this line to existing statement.\n                        $multi_line = $_;\n                    }\n                    else {\n                        $multi_line .= ' ' . $_;\n                    }\n                }\n                $multi_line =~ s!^(/+\\*.*?\\*/\\s*)*!!;  ## Remove leading /* ... */ comments\n                next if ($multi_line eq \"\");  ## Must have something after main\n                if ($multi_line !~ m/^\\(/) {\n                    ## Not a function opening bracket, we will ignore this one\n                    ## it is not a main function.\n                    undef $multi_line;\n                    $not_found_end_line_count = 0;\n                }\n                elsif ($multi_line =~ s/^\\(\\s*([^\\)]*?)\\s*\\)[^;\\{]*?\\{//) {\n                    $multi_line = $1;                             ## What was between the main's ( and )\n                    $multi_line =~ s/\\s{2,}/ /g;                  ## Compress white space\n                    my $was = $multi_line;\n                    $multi_line =~ s!([^/])\\*\\s([^/])!$1\\*$2!g;   ## Remove space after * (except around comment)\n                    $multi_line =~ s!([^/])\\s\\[!$1\\[!g;           ## Remove space before [ (except following comment)\n                    $multi_line =~ s!\\s?\\*/\\s?/\\*\\s?! !g;         ## Connect seporate adjacent /* ... */ comments\n                    if ($multi_line =~ s!^([^,]*?)\\s?,\\s?(/+\\*.*?\\*/\\s?)*!!) { # Fails if only 1 parameter (ignore this main)\n                        my $arg1 = $1;\n                        if ($multi_line =~ s/^(\\w[\\w\\d]*)\\s?//) { # Fails if no type for 2nd parameter (ignore this main)\n                            my $arg2_type = $1;\n                            $multi_line =~ s!^(?:/+\\*.*?\\*/\\s?)?(\\**)(\\w[\\w\\d]*|\\s?/\\*.*?\\*/\\s?)?!!;\n                            my $prefix = $1; ## should be * or **\n                            my $name   = $2; ## is now arg2's variable name\n                            $multi_line =~ s!\\s?\\*/\\s?/\\*\\s?! !g;  ## Connect seporate adjacent /* ... */ comments\n\n                            ## remove any comment after postfix\n                            if ($multi_line =~ s!\\s?(/+\\*.*?\\*/)$!! && $name eq '') {\n                                $name = \"$1 \";  ## Some name argv in comment after []\n                            }\n                            ## multi_line now postfix, should be []\n\n                            if ($type_of_main ne 'ACE_TMAIN'       ||\n                                $arg2_type ne 'ACE_TCHAR'          ||\n                                !(($prefix eq '*' && $multi_line eq '[]') ||\n                                  ($prefix eq '**' && $multi_line eq '' ))  ) {\n                                print_error (\"$file:$.:  $type_of_main ($was)  should be  ACE_TMAIN ($arg1, ACE_TCHAR \\*$name\\[])\");\n                           }\n                        }\n                    }\n\n                    undef $multi_line;\n                    $not_found_end_line_count = 0;\n                }\n                elsif ($not_found_end_line_count < 10) { # Limit the search for ( ... ) following main to ten lines\n                    ++$not_found_end_line_count;\n                }\n                else {\n                    undef $multi_line;\n                    $not_found_end_line_count = 0;\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the use of \"inline\" instead of ACE_INLINE\nsub check_for_inline ()\n{\n    return if is_suppressed ();\n\n    print \"Running inline check\\n\";\n    foreach $file (@files_inl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_inline/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_inline/) {\n                    $disable = 0;\n                }\n                if ($disable == 0 and m/^\\s*inline/) {\n                    print_error (\"$file:$.: 'inline' keyword found\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n\n# This test checks for the inclusion of math.h.  math.h should be avoided\n# since on some platforms, \"exceptions\" is defined as a struct, which will\n# cause problems with exception handling\nsub check_for_math_include ()\n{\n    return if is_suppressed ();\n\n    print \"Running math.h test\\n\";\n    foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_math_include/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_math_include/) {\n                    $disable = 0;\n                }\n                if ($disable == 0\n                    and /^\\s*#\\s*include\\s*(\\/\\*\\*\\/){0,1}\\s*\\<math\\.h\\>/) {\n                    print_error (\"$file:$.: <math.h> included\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the inclusion of streams.h.\n# // FUZZ: disable check_for_streams_include\nsub check_for_streams_include ()\n{\n    return if is_suppressed ();\n\n    print \"Running ace/streams.h test\\n\";\n    foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_streams_include/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_streams_include/) {\n                    $disable = 0;\n                }\n                if ($disable == 0\n                    and /^\\s*#\\s*include\\s*\\\"ace\\/streams\\.h\\\"/) {\n                    print_error (\"$file:$.: expensive ace/streams.h included; consider ace/iosfwd.h\");\n                    print \" ace/streams.h is very expensive in both \";\n                    print \"compile-time and footprint. \\n\";\n                    print \" Please consider including ace/iosfwd.h instead.\\n\\n\";\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the inclusion of Synch*.h.\nsub check_for_synch_include ()\n{\n    return if is_suppressed ();\n\n    print \"Running ace/Synch*.h test\\n\";\n    foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_synch_include/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_synch_include/) {\n                    $disable = 0;\n                }\n                if ($disable == 0\n                    and (/^\\s*#\\s*include\\s*\\\"(ace\\/Synch\\.h)\\\"/\n                         or /^\\s*#\\s*include\\s*\\\"(ace\\/Synch_T\\.h)\\\"/)) {\n                    my $synch = $1;\n                    print_error (\"$file:$.: expensive $synch included;  consider individual synch file\");\n                    print \" $synch is very expensive in both \";\n                    print \"compile-time and footprint. \\n\";\n                    print \" Please consider including one of the \";\n                    print \"individual synch files instead.\\n\\n\";\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# For general readability, lines should not contain more than 80 characters\nsub check_for_line_length ()\n{\n    return if is_suppressed ();\n\n    print \"Running line length test\\n\";\n    foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n\n                # Make sure to ignore ACE_RCSID lines, since they\n                # are difficult to get under 80 chars.\n                if (/.{80,}/ and !/^ACE_RCSID/) {\n                    print_error (\"$file:$.: line longer than 80 chars\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n\n# For preprocessor directives, only the old C style comments (/* */)\n# should be used, not the newer // style.\nsub check_for_preprocessor_comments ()\n{\n    return if is_suppressed ();\n\n    print \"Running preprocessor comment test\\n\";\n    foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/^\\#.*\\/\\//) {\n                    print_error (\"$file:$.: C++ comment in directive\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# We should not have empty files in the repo\nsub check_for_empty_files ()\n{\n    return if is_suppressed ();\n\n    print \"Running empty file test\\n\";\n    foreach $file (@files_inl, @files_cpp, @files_rb) {\n        my $found_non_empty_line = 0;\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n              next if /^[[:blank:]]*$/; # skip empty lines\n              next if /^[[:blank:]]*\\/\\//; # skip C++ comments\n              next if /^[[:blank:]]*\\/\\*/; # skip C++ comments\n              $found_non_empty_line = 1;\n              last;\n            }\n            close (FILE);\n            if ($found_non_empty_line == 0) {\n             print_error (\"$file:1: empty file should not be in the repository\");\n            }\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n\n# This test checks for the use of the Win32 Unicode string defines\n# or outdated ASYS_* macros\n# We should only be using the ACE_TCHAR, ACE_TEXT macros instead.\nsub check_for_tchar\n{\n    return if is_suppressed ();\n\n    print \"Running TCHAR test\\n\";\n    foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_tchar/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_tchar/) {\n                    $disable = 0;\n                }\n                if ($disable == 0) {\n                    if (/LPTSTR/) {\n                        print_error (\"$file:$.: LPTSTR found\");\n                    }\n\n                    if (/LPCTSTR/) {\n                        print_error (\"$file:$.: LPCTSTR found\");\n                    }\n\n                    if (/ASYS_TCHAR/) {\n                        print_error (\"$file:$.: ASYS_TCHAR found\");\n                    }\n                    elsif (/TCHAR/ and !/ACE_TCHAR/) {\n                        ### Do a double check, since some macros do have TCHAR\n                        ### (like DEFAULTCHARS)\n                        if (/^TCHAR[^\\w_]/ or /[^\\w_]TCHAR[^\\w_]/) {\n                            print_error (\"$file:$.: TCHAR found\");\n                        }\n                    }\n\n                    if (/ASYS_TEXT/) {\n                        print_error (\"$file:$.: ASYS_TEXT found\");\n                    }\n                    elsif (/TEXT/ and !/ACE_TEXT/) {\n                        ### Do a double check, since there are several macros\n                        ### that end with TEXT\n                        if (/^TEXT\\s*\\(/ or /[^\\w_]TEXT\\s*\\(/) {\n                            print_error (\"$file:$.: TEXT found\");\n                        }\n                    }\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This checks to see if Makefiles define a DEPENDENCY_FILE, and if they do\n# whether or not it's in the cvs repo.\nsub check_for_dependency_file ()\n{\n    return if is_suppressed ();\n\n    print \"Running DEPENDENCY_FILE test\\n\";\n    foreach $file (@files_makefile) {\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/^DEPENDENCY_FILE\\s* =\\s*(.*)/) {\n                    my $depend = $1;\n                    my $path = $file;\n                    $path =~ s/\\/GNUmakefile.*/\\//;\n                    $depend = $path . $depend;\n                    unless (open (DFILE, $depend)) {\n                        print_error (\"DEPENDENCY_FILE \\\"$depend\\\" not found\");\n                        print \" Either add \\\"$depend\\\" to svn \";\n                        print \"or remove DEPENDENCY_FILE variable\\n\";\n                        print \" from $file\\n\\n\";\n                    }\n                    close (DFILE);\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print_error (\"cannot open $file\");\n        }\n    }\n}\n\n# This checks to see if GNUmakefiles define a MAKEFILE, and if it matches the\n# name of the GNUmakefile\nsub check_for_makefile_variable ()\n{\n    return if is_suppressed ();\n\n    print \"Running MAKEFILE variable test\\n\";\n    foreach $file (@files_makefile) {\n        if (!(substr($file,-4) eq \".bor\")\n            and !(substr($file,-3) eq \".am\")\n            and !(substr($file,-4) eq \".vac\")\n            and !(substr($file,-4) eq \".alt\")) {\n            if (open (FILE, $file)) {\n                print \"Looking at file $file\\n\" if $opt_d;\n                my $makevarfound = 0;\n                my $filename = basename($file,\"\");\n                while (<FILE>) {\n                    if (/^MAKEFILE\\s*=\\s*(.*)/) {\n                        $makevarfound = 1;\n                        $makevar = $1;\n                        if (!($makevar eq $filename)) {\n                            print_error (\"$file:$.: MAKEFILE variable $makevar != $filename\");\n                            print \" Change MAKEFILE = $filename in $file.\\n\\n\";\n                        }\n                    }\n                }\n                if ($makevarfound == 0 and !($filename eq \"GNUmakefile\")) {\n                    print_error (\"$file:$.: MAKEFILE variable missing in $file\");\n                    print \" Add MAKEFILE = $filename to the top of $file.\\n\\n\";\n                }\n                close (FILE);\n            }\n            else {\n                print_error (\"cannot open $file\");\n            }\n        }\n    }\n}\n\n\n# This checks to make sure files include ace/post.h if ace/pre.h is included\n# and vice versa.\nsub check_for_pre_and_post ()\n{\n    return if is_suppressed ();\n\n    print \"Running pre.h/post.h test\\n\";\n    foreach $file (@files_h) {\n        my $pre = 0;\n        my $post = 0;\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_pre_and_post/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_pre_and_post/) {\n                    $disable = 0;\n                }\n                if ($disable == 0) {\n                    if (/^\\s*#\\s*include\\s*\\\"ace\\/pre\\.h\\\"/) {\n                        print_error (\"$file:$.: pre.h  missing \\\"/**/\\\"\");\n                        ++$pre;\n                    }\n                    if (/^\\s*#\\s*include\\s*\\s*\\\"ace\\/post\\.h\\\"/) {\n                        print_error (\"$file:$.: post.h missing \\\"/**/\\\"\");\n                        ++$post;\n                    }\n                    if (/^\\s*#\\s*include\\s*\\/\\*\\*\\/\\s*\\\"ace\\/pre\\.h\\\"/) {\n                        ++$pre;\n                    }\n                    if (/^\\s*#\\s*include\\s*\\/\\*\\*\\/\\s*\\\"ace\\/post\\.h\\\"/) {\n                        ++$post;\n                    }\n                }\n            }\n            close (FILE);\n\n            if ($disable == 0 && $pre != $post) {\n                print_error (\"$file:1: pre.h/post.h mismatch\");\n            }\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test verifies that the same number of \"#pragma warning(push)\" and\n# \"#pragma warning(pop)\" pragmas are used in a given header.\nsub check_for_push_and_pop ()\n{\n    return if is_suppressed ();\n\n    print \"Running #pragma (push)/(pop) test\\n\";\n    foreach $file (@files_h) {\n        my $push_count = 0;\n        my $pop_count = 0;\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_push_and_pop/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_push_and_pop/) {\n                    $disable = 0;\n                }\n                if ($disable == 0) {\n                    if (/^\\s*#\\s*pragma\\s*warning\\s*\\(\\s*push[,1-4]*\\s*\\)/) {\n                        ++$push_count;\n                    }\n                    if (/^\\s*#\\s*pragma\\s*warning\\s*\\(\\s*pop\\s*\\)/) {\n                        ++$pop_count;\n                    }\n                }\n            }\n            close (FILE);\n\n            if ($disable == 0 && $push_count != $pop_count) {\n                print_error (\"$file: #pragma warning(push)/(pop) mismatch\");\n            }\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test verifies that the same number of\n# \"ACE_VERSIONED_NAMESPACE_BEGIN_DECL\" and\n# \"ACE_END_VERSIONED_NAMESPACE_DECL\" macros are used in a given\n# source file.\nsub check_for_versioned_namespace_begin_end ()\n{\n  return if is_suppressed ();\n\n  print \"Running versioned namespace begin/end test\\n\";\n  foreach $file (@files_cpp, @files_inl, @files_h) {\n    my $begin_count = 0;\n    my $end_count = 0;\n    if (open (FILE, $file)) {\n      print \"Looking at file $file\\n\" if $opt_d;\n      while (<FILE>) {\n        if (/^\\s*\\w+_BEGIN_VERSIONED_NAMESPACE_DECL/) {\n          ++$begin_count;\n        }\n        if (/^\\s*\\w+_END_VERSIONED_NAMESPACE_DECL/) {\n          ++$end_count;\n        }\n        if ($begin_count > $end_count and\n            /^\\s*#\\s*include(\\s*\\/\\*\\*\\/)?\\s*\"/) {\n          print_error (\"$file:$.: #include directive within Versioned namespace block\");\n        }\n      }\n\n      close (FILE);\n\n      if ($begin_count != $end_count) {\n        print_error (\"$file: Versioned namespace begin($begin_count)/end($end_count) mismatch\");\n      }\n    }\n    else {\n      print STDERR \"Error: Could not open $file\\n\";\n    }\n  }\n}\n\n\n# Check doxygen @file comments\nsub check_for_mismatched_filename ()\n{\n    return if is_suppressed ();\n\n    print \"Running doxygen \\@file test\\n\";\n    foreach $file (@files_h, @files_cpp, @files_inl, @files_idl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (m/\\@file\\s*([^\\s]+)/){\n                    # $file includes complete path, $1 is the name after\n                    # @file. We must check whether the last part of $file\n                    # is equal to $1\n                    if ($file !~ /$1$/) {\n                        print_error (\"$file:$.: \\@file mismatch in $file, found $1\");\n                    }\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# check for bad run_test\nsub check_for_bad_run_test ()\n{\n    return if is_suppressed ();\n\n    print \"Running run_test.pl test\\n\";\n    foreach $file (@files_run_pl) {\n        if (open (FILE, $file)) {\n            my $is_run_test = 0;\n            my $sub = 0;\n\n            if (($file =~ /.*TAO\\/examples\\/Advanced.*/)) {\n              next ITERATION;\n            }\n            if (($file =~ /.*TAO\\/orbsvcs\\/examples\\/Security\\/Send_File.*/)) {\n              next ITERATION;\n            }\n\n            print \"Looking at file $file\\n\" if $opt_d;\n\n            while (<FILE>) {\n                if (m/PerlACE/ || m/ACEutils/) {\n                    $is_run_test = 1;\n                }\n\n                if ($is_run_test == 1) {\n                    if (m/ACEutils/) {\n                        print_error (\"$file:$.: ACEutils.pm still in use\");\n                    }\n\n                    if (m/unshift \\@INC/) {\n                        print_error (\"$file:$.: unshifting \\@INC; use \\\"use lib\\\"\");\n                    }\n\n                    if (m/\\$EXEPREFIX/) {\n                        print_error (\"$file:$.: using \\$EXEPREFIX\");\n                    }\n\n                    if (m/\\$EXE_EXT/) {\n                        print_error (\"$file:$.: using \\$EXE_EXT\");\n                    }\n\n                    if (m/Sys::Hostname/) {\n                        print_error (\"$file:$.: using Sys::Hostname\");\n                    }\n\n                    if (m/PerlACE::wait_interval_for_process_creation/) {\n                        print_error (\"$file:$.: using PerlACE::wait_interval_for_process_creation\");\n                    }\n\n                    if (m/PerlACE::waitforfile_timed/) {\n                        print_error (\"$file:$.: using PerlACE::waitforfile_timed\");\n                    }\n\n                    if (m/PerlACE::is_vxworks_test/) {\n                        print_error (\"$file:$.: using PerlACE::is_vxworks_test\");\n                    }\n\n                    if (m/PerlACE::add_lib_path/) {\n                        print_error (\"$file:$.: using PerlACE::add_lib_path, use AddLibPath on the target\");\n                    }\n\n                    if (m/PerlACE::Run_Test/) {\n                        print_error (\"$file:$.: using PerlACE::Run_Test, use PerlACE::TestTarget\");\n                    }\n\n                    if (m/PerlACE::random_port/) {\n                        print_error (\"$file:$.: using PerlACE::random_port, use TestTarget::random_port\");\n                    }\n\n                    if (m/PerlACE::Process/) {\n                        print_error (\"$file:$.: using PerlACE::Process\");\n                    }\n\n                    if (m/PerlACE::TestConfig/) {\n                        print_error (\"$file:$.: using PerlACE::TestConfig\");\n                    }\n\n                    if (m/ACE_RUN_VX_TGTHOST/) {\n                        print_error (\"$file:$.: using ACE_RUN_VX_TGTHOST, use TestTarget::HostName\");\n                    }\n\n                    if (m/Spawn(Wait(Kill)?)?\\s*\\(.+\\->ProcessStop.*\\)/) {\n                        print_error (\"$file:$.: uses Stop together with Spawn\");\n                    }\n\n                    if (m/Spawn(Wait(Kill)?)?\\s*\\(\\d+\\)/) {\n                        print_error (\"$file:$.: uses hardcoded timeout for Spawn\");\n                    }\n\n                    if (m/Kill\\s*\\(\\d+\\)/) {\n                        print_error (\"$file:$.: uses hardcoded timeout for Kill\");\n                    }\n\n                    if (m/unlink/) {\n                        print_error (\"$file:$.: using unlink\");\n                    }\n\n                    if (m/PerlACE::LocalFile/) {\n                        print_error (\"$file:$.: using PerlACE::LocalFile\");\n                    }\n\n                    if (m/\\$DIR_SEPARATOR/) {\n                        print_error (\"$file:$.: using \\$DIR_SEPARATOR\");\n                    }\n                    if (m/ACE\\:\\:/ && !m/PerlACE\\:\\:/) {\n                        print_error (\"$file:$.: using ACE::*\");\n                    }\n\n                    if (m/Process\\:\\:/ && !m/PerlACE\\:\\:Process\\:\\:/) {\n                        print_error (\"$file:$.: using Process::*\");\n                    }\n\n                    if (m/Process\\:\\:Create/) {\n                        print_error (\"$file:$.: using Process::Create\");\n                    }\n\n                    if (m/^  [^ ]/) {\n                        print_warning (\"$file:$.: using two-space indentation\");\n                    }\n\n                    if (m/^\\s*\\t/) {\n                        print_error (\"$file:$.: Indenting using tabs\");\n                    }\n\n                    if (m/^\\s*\\{/ && $sub != 1) {\n                        print_warning (\"$file:$.: Using Curly Brace alone\");\n                    }\n\n                    if (m/timedout/i && !m/\\#/) {\n                        print_error (\"$file:$.: timedout message found\");\n                    }\n\n                    if (m/^\\s*sub/) {\n                        $sub = 1;\n                    }\n                    else {\n                        $sub = 0;\n                    }\n                }\n            }\n\n            close (FILE);\n\n            if ($is_run_test) {\n                my @output = `perl -wc $file 2>&1`;\n\n                foreach $output (@output) {\n                    chomp $output;\n                    if ($output =~ m/error/i) {\n                        print_error ($output);\n                    }\n                    elsif ($output !~ m/syntax OK/) {\n                        print_warning ($output);\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n# Check for links to ~schmidt/ACE_wrappers/, which should not be in the\n# documentation\nsub check_for_absolute_ace_wrappers()\n{\n    return if is_suppressed ();\n\n    print \"Running absolute ACE_wrappers test\\n\";\n    foreach $file (@files_html) {\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (m/\\~schmidt\\/ACE_wrappers\\//) {\n                    chomp;\n                    print_error (\"$file:$.: ~schmidt/ACE_wrappers found\");\n                    print_error ($_);\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# Check for generated headers in the code documentation\nsub check_for_generated_headers()\n{\n    return if is_suppressed ();\n\n    print \"Running generated headers test\\n\";\n    foreach $file (@files_cpp, @files_inl, @files_h) {\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (m/Code generated by the The ACE ORB \\(TAO\\) IDL Compiler/) {\n                    chomp;\n                    print_error (\"$file:$.: header found\");\n                    print_error ($_);\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\nsub check_for_numeric_log()\n{\n    return if is_suppressed ();\n\n    print \"Running check for numeric flags in DAnCE and DDS4CCM\\n\";\n\n    foreach $file (@files_inl, @files_cpp, @files_h) {\n        if (open (FILE, $file)) {\n            while (<FILE>) {\n                # look for debug statements\n                if (m/DANCE_DEBUG\\s*\\(\\s*\\d*\\s*,/) {\n                    print_warning (\"$file:$.: Found numeric log level in debug statement\");\n                }\n                if (m/DANCE_ERROR\\s*\\(\\s*\\d\\s*,/) {\n                    print_warning (\"$file:$.: Found numeric log level in error statement\");\n                }\n                if (m/DANCE_TRACE_LOG\\s*\\(\\s*\\d\\s*,/) {\n                    print_warning (\"$file:$.: Found numeric log level in trace log statement\");\n                }\n                if (m/DDS4CCM_DEBUG\\s*\\(\\s*\\d*\\s*,/) {\n                    print_warning (\"$file:$.: Found numeric log level in debug statement\");\n                }\n                if (m/DDS4CCM_ERROR\\s*\\(\\s*\\d\\s*,/) {\n                    print_warning (\"$file:$.: Found numeric log level in error statement\");\n                }\n            }\n\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# Make sure ACE_[OS_]TRACE matches the function/method\nsub check_for_bad_ace_trace()\n{\n    return if is_suppressed ();\n\n    print \"Running TRACE test\\n\";\n    foreach $file (@files_inl, @files_cpp) {\n        if (open (FILE, $file)) {\n            my $class;\n            my $function;\n\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n\n                # look for methods or functions\n                if (m/(^[^\\s][^\\(]*)\\:\\:([^\\:^\\(]*[^\\s^\\(])\\s*/) {\n                    $class = $1;\n                    $function = $2;\n                }\n                elsif (m/^([^\\s^\\(^\\#]*) \\(/i) {\n                    $class = \"\";\n                    $function = $1;\n                }\n                elsif (m/^(operator.*) \\(/i) {\n                    $class = \"\";\n                    $function = $1;\n                }\n                elsif (m/^class (.*)\\s*:/) {\n                    $class = $1;\n                    $function = \"\";\n                }\n                elsif (m/^class (.*)\\s*$/) {\n                    $class = $1;\n                    $function = \"\";\n                }\n\n                # print \"TRACE_CHECK. Class = $class\\n\";\n\n                # Look for TRACE statements\n                if (m/ACE_OS_TRACE\\s*\\(\\s*\\\"(.*)\\\"/\n                    || m/ACE_TRACE\\s*\\(\\s*\\\"(.*)\\\"/\n                    || m/CIAO_TRACE\\s*\\(\\s*\\\"(.*)\\\"/\n                    || m/DANCE_TRACE\\s*\\(\\s*\\\"(.*)\\\"/\n                    || m/DDS4CCM_TRACE\\s*\\(\\s*\\\"(.*)\\\"/) {\n                    my $trace = $1;\n\n                    # reduce the classname\n                    if ($class =~ m/([^\\s][^\\<^\\s]*)\\s*\\</) {\n                        $class = $1;\n                   }\n\n                    # print \"TRACE_CHECK. Found a trace. Class = $class\\n\";\n\n                    if ($class =~ m/([^\\s^\\&^\\*]*)\\s*$/) {\n                        $class = $1;\n                    }\n\n                    # print \"TRACE_CHECK. Augmenting class. Class = $class\\n\";\n\n                    if ($trace !~ m/\\Q$function\\E/\n                        || ($trace =~ m/\\:\\:/ && !($trace =~ m/\\Q$class\\E/ && $trace =~ m/\\Q$function\\E/))) {\n                        print_error (\"$file:$.: Mismatched TRACE\");\n                        print_error (\"$file:$.:   I see \\\"$trace\\\" but I think I'm in \\\"\"\n                                     . $class . \"::\" . $function . \"\\\"\");\n                    }\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n\n# This test checks for broken ChangeLog entries.\nsub check_for_changelog_errors ()\n{\n    return if is_suppressed ();\n\n    print \"Running ChangeLog check\\n\";\n    foreach $file (@files_changelog) {\n        if (open (FILE, $file)) {\n            my $found_backslash = 0;\n            my $found_cvs_conflict = 0;\n\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n\n                next if m/^\\s*\\/\\//;\n                next if m/^\\s*$/;\n\n                # Check for backslashes in paths.\n                if (m/\\*.*\\\\[^ ]*:/) {\n                    print_error (\"$file:$.: Backslashes in file path\");\n                }\n\n                # Check for svn conflict tags\n                if (m/^<<<<</ || m/^=====/ || m/^>>>>>/) {\n                    print_error (\"$file:$.: svn conflict markers\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\nsub check_for_deprecated_macros ()\n{\n    return if is_suppressed ();\n\n    ## Take the current working directory and remove everything up to\n    ## ACE_wrappers (or ACE for the peer-style checkout).  This will be\n    ## used to determine when the use of ACE_THROW_SPEC is an error.\n    my($cwd) = getcwd();\n    if ($cwd =~ s/.*(ACE_wrappers)/$1/) {\n    }\n    elsif ($cwd =~ s/.*(ACE)/$1/) {\n    }\n\n    print \"Running deprecated macros check\\n\";\n    foreach $file (@files_cpp, @files_inl, @files_h) {\n        if (open (FILE, $file)) {\n\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n              if (/ACE_THROW_SPEC/) {\n                  ## Do not use ACE_THROW_SPEC in TAO or CIAO.\n                  if ($file =~ /TAO|CIAO/i || $cwd =~ /TAO|CIAO/i) {\n                      print_error (\"$file:$.: ACE_THROW_SPEC found.\");\n                  }\n              }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n# This test checks for ptr_arith_t usage in source code.  ptr_arith_t\n# is non-portable.  Use ptrdiff_t instead.\nsub check_for_ptr_arith_t ()\n{\n    return if is_suppressed ();\n\n    print \"Running ptr_arith_t check\\n\";\n    foreach $file (@files_cpp, @files_inl, @files_h) {\n        if (open (FILE, $file)) {\n\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n\n                next if m/^\\s*\\/\\//;  # Ignore C++ comments.\n                next if m/^\\s*$/;     # Skip lines only containing\n                                      # whitespace.\n\n                # Check for ptr_arith_t usage.  This test should\n                # ignore typedefs, and should only catch variable\n                # declarations and parameter types.\n                if (m/ptr_arith_t / || m/ptr_arith_t,/) {\n                    print_error (\"$file:$.: ptr_arith_t; use ptrdiff_t instead.\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the #include <ace/...>\n# This check is suggested by Don Hinton to force user to use\n# \" \" instead of <> to avoid confict with Doxygen.\nsub check_for_include ()\n{\n    return if is_suppressed ();\n\n    print \"Running the include check\\n\";\n    foreach $file (@files_h, @files_cpp, @files_inl, @files_idl) {\n        my $bad_occurance = 0;\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_include/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_include/) {\n                    $disable = 0;\n                }\n                if ($disable == 0) {\n                    if (/^\\s*#\\s*include\\s*<[(ace)|(TAO)|(CIAO)]\\/.*>/) {\n                        print_error (\"$file:$.: include <ace\\/..> used\");\n                        ++$bad_occurance;\n                    }\n                    if (/^\\s*#\\s*include\\s*<tao\\/.*>/) {\n                        print_error (\"$file:$.: include <tao\\/..> used\");\n                        ++$bad_occurance;\n                    }\n                    if (/^\\s*#\\s*include\\s*<ciao\\/.*>/) {\n                        print_error (\"$file:$.: include <ciao\\/..> used\");\n                        ++$bad_occurance;\n                    }\n                }\n            }\n            close (FILE);\n\n            if ($disable == 0 && $bad_occurance > 0 ) {\n                print_error (\"$file:1: found $bad_occurance usage(s) of #include <> of ace\\/tao\\/ciao.\");\n            }\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test verifies that all equality, relational and logical\n# operators return bool, as is the norm for modern C++.\n#\n# NOTE:  This test isn't fool proof yet.\nsub check_for_non_bool_operators ()\n{\n    return if is_suppressed ();\n\n    print \"Running non-bool equality, relational and logical operator check\\n\";\n    foreach $file (@files_h, @files_inl, @files_cpp) {\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            my $found_bool = 0;\n            my $found_return_type = 0;\n            while (<FILE>) {\n\n                if ($found_bool == 0\n                    && (/[^\\w]bool\\s*$/\n                        || /^bool\\s*$/\n                        || /\\sbool\\s+\\w/\n                        || /^bool\\s+\\w/\n                        || /[^\\w]return\\s*$/))\n                  {\n                    $found_bool = 1;\n                    $found_return_type = 0;\n                    next;\n                  }\n\n                if ($found_bool == 0 && $found_return_type == 0\n                    && /^(?:\\w+|\\s+\\w+)\\s*$/\n                    && !/[^\\w]return\\s*$/)\n                  {\n                    $found_return_type = 1;\n                    $found_bool = 0;\n                    next;\n                  }\n\n                if ($found_bool == 0\n                    && /(?<![^\\w]bool)(\\s+|\\w+::|>\\s*::)operator\\s*(?:!|<|<=|>|>=|==|!=|&&|\\|\\|)\\s*\\(/\n                    && !/\\(.*operator\\s*(?:!|<|<=|>|>=|==|!=|&&|\\|\\|)\\s*\\(/\n                    && !/^\\s*return\\s+/) {\n                    print_error (\"$file:$.: non-bool return type for operator\");\n                }\n\n                $found_return_type = 0;\n                $found_bool = 0;\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test verifies that all filenames are short enough\nsub check_for_long_file_names ()\n{\n    return if is_suppressed ();\n\n    my $max_filename = 50;\n    my $max_mpc_projectname = $max_filename - 12; ## GNUmakefile.[project_name]\n    print \"Running file names check\\n\";\n\n    foreach $file (@files_cpp, @files_inl, @files_h, @files_html,\n                   @files_dsp, @files_dsw, @files_gnu, @files_idl,\n                   @files_pl, @files_changelog, @files_makefile,\n                   @files_bor, @files_mpc, @files_generic) {\n        if ( length( basename($file) ) >= $max_filename )\n        {\n            print_error (\"File name $file meets or exceeds $max_filename chars.\");\n        }\n    }\n    foreach $file (grep(/\\.mpc$/, @files_mpc)) {\n      if (open(FH, $file)) {\n        my($blen) = length(basename($file)) - 4; ## .mpc\n        while(<FH>) {\n          if (/project\\s*(:.*)\\s*{/) {\n            if ($blen >= $max_mpc_projectname) {\n              print_warning (\"File name $file meets or exceeds $max_mpc_projectname chars.\");\n            }\n          }\n          elsif (/project\\s*\\(([^\\)]+)\\)/) {\n            my($name) = $1;\n            if ($name =~ /\\*/) {\n              my($length) = length($name) + (($name =~ tr/*//) * $blen);\n              if ($length >= $max_mpc_projectname) {\n                print_warning (\"Project name ($name) from $file will meet or exceed $max_mpc_projectname chars when expanded by MPC.\");\n              }\n            }\n            else {\n              if (length($name) >= $max_mpc_projectname) {\n                print_warning (\"Project name ($name) from $file meets or exceeds $max_mpc_projectname chars.\");\n              }\n            }\n          }\n        }\n        close(FH);\n      }\n    }\n}\n\nsub check_for_refcountservantbase ()\n{\n    return if is_suppressed ();\n\n    print \"Running PortableServer::RefCountServantBase derivation check\\n\";\n\n    foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n\n                if (/PortableServer::RefCountServantBase/) {\n                  print_error (\"$file:$.: reference to deprecated PortableServer::RefCountServantBase\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\nsub check_for_old_documentation_style ()\n{\n    return if is_suppressed ();\n\n    print \"Running documentation style check\\n\";\n\n    foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n\n                if (/\\/\\/\\s*\\= TITLE/) {\n                  print_error (\"$file:$.: found old documentation style // = TITLE\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\nsub check_for_TAO_Local_RefCounted_Object ()\n{\n    return if is_suppressed ();\n\n    print \"Running TAO_Local_RefCounted_Object check\\n\";\n\n    ITERATION: foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_TAO_Local_RefCounted_Object/) {\n                    $disable = 1;\n                }\n                if (/FUZZ\\: enable check_for_TAO_Local_RefCounted_Object/) {\n                    $disable = 0;\n                }\n\n                if ($disable == 0 and /TAO_Local_RefCounted_Object/) {\n                  print_error (\"$file:$.: TAO_Local_RefCounted_Object is deprecated, use CORBA::LocalObject instead\");\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the correct use of ORB_init() so as\n# to be compatible with wide character builds.\nsub check_for_ORB_init ()\n{\n    return if is_suppressed ();\n\n    print \"Running the ORB_init() wide character incompatibility check\\n\";\n    foreach $file (@files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            my $multi_line;\n            my $not_found_end_line_count= 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (!defined $multi_line) {\n                    if (/FUZZ\\: disable check_for_ORB_init/) {\n                        $disable = 1;\n                        next;\n                    }\n                    elsif (/FUZZ\\: enable check_for_ORB_init/) {\n                        $disable = 0;\n                        next;\n                    }\n                    elsif ($disable == 0) {\n                        s/^\\s+//;           ## Remove leading space\n                        s/\\s*(\\/\\/.*)?$//;  ## Remove trailling space and line comments\n                        if (s/^([^=]*=)?\\s*(CORBA\\s*::\\s*)?ORB_init\\s*//) {\n                            $multi_line = $_; ## Rest of the line\n                        }\n                        else {\n                            next;\n                        }\n                    }\n                }\n                else {\n                    $_ =~ s/^\\s+//;           ## Remove leading space\n                    $_ =~ s/\\s*(\\/\\/.*)?$//;  ## Remove trailling space and line comments\n                    if ($multi_line eq \"\") {  ## Append this line to existing statement.\n                        $multi_line = $_;\n                    }\n                    else {\n                        $multi_line .= ' ' . $_;\n                    }\n                }\n                my $testing = $multi_line;\n                if ($testing =~ s/^\\(([^\\\"\\/\\)]*(\\\"([^\\\"\\\\]*(\\\\.)*)\\\")?(\\/+\\*.*?\\*\\/\\s*)*)*\\)//) {\n                    # $testing has thrown away what we actually want, i.e.\n                    # we want to ignore what's left in $testing.\n\n                    $multi_line = substr ($multi_line, 0, -length ($testing));\n                    $multi_line =~ s!/\\*.*?\\*/! !g;  ## Remove any internal /* ... */ comments\n                    $multi_line =~ s!\\s{2,}! !g;     ## collapse multi spaces\n                    $multi_line =~ s/^\\(\\s*//;       ## Trim leading ( and space\n                    $multi_line =~ s/\\s*\\)$//;       ## Trim trailing space and )\n\n                    if ($multi_line =~ s/^[^,]*,\\s*//) { # If this fails there is only 1 parameter (which we will ignore)\n                        # 1st parameter has been removed by the above, split up remaining 2 & 3\n                        $multi_line =~ s/^([^,]*),?\\s*//;\n                        my $param2 = $1;\n                        $param2 =~ s/\\s+$//; # Trim trailing spaces\n\n                        print_error (\"$file:$.: ORB_init() 2nd parameter requires static_cast<ACE_TCHAR **>(0)\") if ($param2 eq '0');\n                        print_error (\"$file:$.: ORB_init() 3rd parameter is redundant (default orbID or give as string)\") if ($multi_line eq '0');\n                        print_error (\"$file:$.: ORB_init() 3rd parameter is redundant (default orbID already \\\"\\\")\") if ($multi_line eq '\"\"');\n                    }\n\n                    undef $multi_line;\n                    $not_found_end_line_count = 0;\n                }\n                elsif ($not_found_end_line_count < 10) { # Limit the search for ( ... ) following ORB_init to ten lines\n                    ++$not_found_end_line_count;\n                }\n                else {\n                    undef $multi_line;\n                    $not_found_end_line_count = 0;\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\n# This test checks for the presence of an include for ace/OS.h\n# which should never occur. Only user code is allowed to include OS.h.\nsub check_for_include_OS_h ()\n{\n    return if is_suppressed ();\n\n    print \"Running the OS.h inclusion check\\n\";\n    foreach $file (@files_h, @files_cpp, @files_inl) {\n        if (open (FILE, $file)) {\n            my $disable = 0;\n            print \"Looking at file $file\\n\" if $opt_d;\n            while (<FILE>) {\n                if (/FUZZ\\: disable check_for_include_OS_h/) {\n                    $disable = 1;\n                    next;\n                }\n                elsif (/FUZZ\\: enable check_for_include_OS_h/) {\n                    $disable = 0;\n                    next;\n                }\n                elsif ($disable == 0 and /^\\s*#\\s*include\\s*<[(ace)|(TAO)|(CIAO)]\\/.*>/) {\n                    print_error (\"$file:$.: include <ace\\/..> used\");\n                }\n                else {\n                    if ($disable == 0 and /^\\s*#\\s*include\\s*\"ace\\/OS.h\"/) {\n                        print_error (\"$file:$.: include ace/OS.h used\");\n                    }\n                }\n            }\n            close (FILE);\n        }\n        else {\n            print STDERR \"Error: Could not open $file\\n\";\n        }\n    }\n}\n\nsub check_for_ace_log_categories ()\n{\n    return if is_suppressed ();\n\n    print \"Running the ACE log categories check\\n\";\n\n    my @macros = qw/HEX_DUMP ERROR ERROR_RETURN ERROR_BREAK DEBUG/;\n    my $macros = join ('|', @macros);\n\n    for my $f (@files_h, @files_cpp, @files_inl) {\n        my $cat = 'ACE';\n        $f =~ s!\\\\!/!g;\n        if ($f =~ /\\bace\\/(\\w+)/) {\n            next if $1 eq 'Log_Msg' || $` =~ /\\/protocols\\/$/;\n            $cat = 'ACELIB';\n        }\n        elsif ($f =~ /tao\\// && $f !~ /interop-tests\\//) {\n            $cat = 'TAOLIB';\n        }\n        elsif ($f =~ /\\/orbsvcs\\// && $f !~ /tests|examples/i) {\n            $cat = 'ORBSVCS';\n        }\n        elsif ($f =~ /CIAO\\// || $f =~ /DAnCE\\//) {\n            next;\n        }\n        elsif ($f =~ /tests\\/Log_Msg_Test\\.cpp/) {\n            next;\n        }\n\n        if (open (IN, $f)) {\n            print \"Looking at file $f for category $cat\\n\" if $opt_d;\n            my $disable = 0;\n            while (<IN>) {\n                if (/FUZZ: disable check_for_ace_log_categories/) {\n                    $disable = 1;\n                    next;\n                }\n                elsif (/FUZZ: enable check_for_ace_log_categories/) {\n                    $disable = 0;\n                    next;\n                }\n                elsif ($disable == 0\n                       && /\\b(ACE|ACELIB|TAOLIB|ORBSVCS)_($macros)\\b/g\n                       && $1 ne $cat) {\n                    print_error (\"$f:$.: found log macro $1_$2, \"\n                                 . \"expecting ${cat}_$2\");\n                }\n            }\n            close IN;\n        }\n        else {\n            print STDERR \"Error: Could not open $f\\n\";\n        }\n    }\n}\n\n\n##############################################################################\n\nuse vars qw/$opt_c $opt_d $opt_x $opt_h $opt_l $opt_t $opt_s $opt_m/;\n\nif (!getopts ('cdx:hl:t:s:mv') || $opt_h) {\n    print \"fuzz.pl [-cdhm] [-l level] [-t test_names] [file1, file2, ...]\\n\";\n    print \"\\n\";\n    print \"    -c             only look at the files passed in\\n\";\n    print \"    -d             turn on debugging\\n\";\n    print \"    -x             specify comma-separated list of path masks\\n\";\n          \"                       (regex) to exclude\\n\";\n    print \"    -h             display this help\\n\";\n    print \"    -l level       set detection level (default = 5)\\n\";\n    print \"    -t test_names  specify comma-separated list of tests to run\\n\".\n          \"                       this will disable the run level setting\\n\";\n    print \"    -s test_names  specify comma-separated list of tests to suppress\\n\".\n          \"                       this will supplement the run level setting\\n\";\n    print \"    -m             only check locally modified files (uses svn)\\n\";\n    print \"======================================================\\n\";\n    print \"list of the tests that could be run or suppressed:\\n\";\n    print <<EOT;\n           check_for_noncvs_files\n           check_for_generated_headers\n           check_for_synch_include\n           check_for_streams_include\n           check_for_dependency_file\n           check_for_makefile_variable\n           check_for_inline_in_cpp\n           check_for_id_string\n           check_for_newline\n           check_for_ACE_SYNCH_MUTEX\n           check_for_ACE_Thread_Mutex\n           check_for_tab\n           check_for_exception_spec\n           check_for_NULL\n           check_for_improper_main_declaration\n           check_for_lack_ACE_OS\n           check_for_inline\n           check_for_math_include\n           check_for_line_length\n           check_for_preprocessor_comments\n           check_for_tchar\n           check_for_pre_and_post\n           check_for_push_and_pop\n           check_for_versioned_namespace_begin_end\n           check_for_mismatched_filename\n           check_for_bad_run_test\n           check_for_absolute_ace_wrappers\n           check_for_bad_ace_trace\n           check_for_changelog_errors\n           check_for_ptr_arith_t\n           check_for_include\n           check_for_non_bool_operators\n           check_for_long_file_names\n           check_for_refcountservantbase\n           check_for_TAO_Local_RefCounted_Object\n           check_for_ORB_init\n           check_for_trailing_whitespace\n           check_for_include_OS_h\n           check_for_numeric_log\n           check_for_ORB_init\n           check_for_old_documentation_style\n           check_for_ace_log_categories\nEOT\n    exit (1);\n}\n\nif (!$opt_l) {\n    $opt_l = 5;\n}\n\n# Before opt_m is read!\nif ($opt_x) {\n    my @excludes = split '\\s*,\\s*', $opt_x;\n    for my $exclude (@excludes) {\n      push (@excluded_dirs, $exclude);\n    }\n}\n\nif ($opt_c) {\n    foreach $file (@ARGV) {\n        store_file ($file);\n    }\n}\nelsif ($opt_m) {\n    find_mod_files ();\n}\nelse {\n    find_files ();\n}\n\nif ($opt_t) {\n    my @tests = split '\\s*,\\s*', $opt_t;\n    for my $test (@tests) {\n      &$test();\n    }\n    print \"\\nfuzz.pl - $errors error(s), $warnings warning(s)\\n\";\n    exit ($errors > 0) ? 1 : 0;\n}\n\nif ($opt_s) {\n    my @tests = split '\\s*,\\s*', $opt_s;\n    for my $test (@tests) {\n      $suppressed_tests{$test} = 1;\n    }\n}\n\nprint \"--------------------Configuration: Fuzz - Level \",$opt_l,\n      \"--------------------\\n\";\n\ncheck_for_export_file () if ($opt_l >= 4);\ncheck_for_trailing_whitespace () if ($opt_l >= 4);\ncheck_for_lack_ACE_OS () if ($opt_l >= 6);\ncheck_for_ACE_Guard () if ($opt_l >= 1);\ncheck_for_generated_headers () if ($opt_l >= 6);\ncheck_for_bad_run_test () if ($opt_l >= 5);\ncheck_for_deprecated_macros () if ($opt_l >= 1);\ncheck_for_refcountservantbase () if ($opt_l >= 1);\ncheck_for_msc_ver_string () if ($opt_l >= 3);\ncheck_for_empty_files () if ($opt_l >= 1);\ncheck_for_noncvs_files () if ($opt_l >= 1);\ncheck_for_streams_include () if ($opt_l >= 6);\ncheck_for_dependency_file () if ($opt_l >= 1);\ncheck_for_makefile_variable () if ($opt_l >= 1);\ncheck_for_inline_in_cpp () if ($opt_l >= 2);\ncheck_for_id_string () if ($opt_l >= 1);\ncheck_for_newline () if ($opt_l >= 1);\ncheck_for_ACE_Thread_Mutex () if ($opt_l >= 1);\ncheck_for_ACE_SYNCH_MUTEX () if ($opt_l >= 1);\ncheck_for_tab () if ($opt_l >= 1);\ncheck_for_exception_spec () if ($opt_l >= 1);\ncheck_for_NULL () if ($opt_l >= 1);\ncheck_for_inline () if ($opt_l >= 2);\ncheck_for_math_include () if ($opt_l >= 3);\ncheck_for_synch_include () if ($opt_l >= 6);\ncheck_for_line_length () if ($opt_l >= 8);\ncheck_for_preprocessor_comments () if ($opt_l >= 7);\ncheck_for_tchar () if ($opt_l >= 4);\ncheck_for_pre_and_post () if ($opt_l >= 4);\ncheck_for_push_and_pop () if ($opt_l >= 4);\ncheck_for_versioned_namespace_begin_end () if ($opt_l >= 4);\ncheck_for_mismatched_filename () if ($opt_l >= 2);\ncheck_for_absolute_ace_wrappers () if ($opt_l >= 3);\ncheck_for_bad_ace_trace () if ($opt_l >= 4);\ncheck_for_changelog_errors () if ($opt_l >= 4);\ncheck_for_ptr_arith_t () if ($opt_l >= 4);\ncheck_for_include () if ($opt_l >= 5);\ncheck_for_non_bool_operators () if ($opt_l > 2);\ncheck_for_long_file_names () if ($opt_l >= 1);\ncheck_for_improper_main_declaration () if ($opt_l >= 1);\ncheck_for_TAO_Local_RefCounted_Object () if ($opt_l >= 1);\ncheck_for_include_OS_h () if ($opt_l >= 1);\ncheck_for_numeric_log () if ($opt_l >= 3);\ncheck_for_ORB_init () if ($opt_l >= 1);\ncheck_for_old_documentation_style () if ($opt_l >= 6);\ncheck_for_ace_log_categories () if ($opt_l >= 5);\n\nprint \"\\nfuzz.pl - $errors error(s), $warnings warning(s)\\n\";\n\nexit (1) if $errors > 0;\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/rpmbuild/ace-tao.spec": "# Set the version number here.\n%define ACEVER  6.5.1\n%define TAOVER  2.5.1\n\n# Conditional build\n# Default values are\n#                    --with ipv6         (IPv6 support)\n#                    --with opt          (Optimized build)\n#                    --with zlib         (Zlib compressor)\n#                    --with bzip2        (Bzip2 compressor)\n#                    --with tao          (TAO)\n#                    --without fltk      (No ftlk support)\n#                    --without tk        (No tk support)\n#                    --without xt        (No xt support)\n#                    --without fox       (No fox support)\n#                    --without qt        (No qt support)\n#                    --without inline    (Code inlining disabled)\n#                    --without versioned (Versioned namespace)\n\n#\n# Read: If neither macro exists, then add the default definition.\n%{!?_with_ipv6: %{!?_without_ipv6: %define _with_ipv6 --with-ipv6}}\n%{!?_with_opt: %{!?_without_opt: %define _with_opt --with-opt}}\n%{!?_with_zlib: %{!?_without_zlib: %define _with_zlib --with-zlib}}\n%{!?_with_bzip2: %{!?_without_bzip2: %define _with_bzip2 --with-bzip2}}\n%{!?_with_tao: %{!?_without_tao: %global _with_tao --with-tao}}\n%{!?_with_ftlk: %{!?_without_ftlk: %define _without_ftlk --without-ftlk}}\n%{!?_with_tk: %{!?_without_tk: %define _without_tk --without-tk}}\n%{!?_with_xt: %{!?_without_xt: %define _without_xt --without-xt}}\n%{!?_with_fox: %{!?_without_fox: %define _without_fox --without-fox}}\n%{!?_with_qt: %{!?_without_qt: %define _without_qt --without-qt}}\n%{!?_with_inline: %{!?_without_inline: %define _without_inline --without-inline}}\n%{!?_with_versioned: %{!?_without_versioned: %define _without_versioned 0}}\n#\n# Read: It's an error if both or neither required options exist.\n%{?_with_ipv6: %{?_without_ipv6: %{error: both _with_ipv6 and _without_ipv6}}}\n%{?_with_opt: %{?_without_opt: %{error: both _with_opt and _without_opt}}}\n%{?_with_zlib: %{?_without_zlib: %{error: both _with_zlib and _without_zlib}}}\n%{?_with_bzip2: %{?_without_bzip2: %{error: both _with_bzip2 and _without_bzip2}}}\n%{?_with_tao: %{?_without_tao: %{error: both _with_tao and _without_tao}}}\n%{?_with_fltk: %{?_without_fltk: %{error: both _with_fltk and _without_fltk}}}\n%{?_with_tk: %{?_without_tk: %{error: both _with_tk and _without_tk}}}\n%{?_with_xt: %{?_without_xt: %{error: both _with_xt and _without_xt}}}\n%{?_with_fox: %{?_without_fox: %{error: both _with_fox and _without_fox}}}\n%{?_with_qt: %{?_without_qt: %{error: both _with_qt and _without_qt}}}\n%{?_with_inline: %{?_without_inline: %{error: both _with_inline and _without_inline}}}\n%{?_with_versioned: %{?_without_versioned: %{error: both _with_versioned and _without_versioned}}}\n\n%{!?skip_make:%global skip_make 0}\n%{!?make_nosrc:%global make_nosrc 0}\n\n%define have_fox 0\n\n%if %{?_with_opt:0}%{!?_with_opt:1}\n%define OPTTAG .O0\n%endif\n\nName:         ace-tao\n%if 0%{?_with_tao:1}%{?_without_tao:0}\nSummary:      The ADAPTIVE Communication Environment (ACE) and The ACE ORB (TAO)\n%else\nSummary:      The ADAPTIVE Communication Environment (ACE)\n%endif\n\nVersion:      %{ACEVER}\n\n%if 0%{?opensuse_bs}\nRelease:      <CI_CNT>%{?OPTTAG}%{?dist}\n%else\nRelease:      1%{?OPTTAG}%{?dist}\n%endif\n\nGroup:        Development/Libraries/C and C++\nURL:          http://www.dre.vanderbilt.edu/~schmidt/ACE.html\nLicense:      DOC License\n%if 0%{?_with_tao:1}%{?_without_tao:0}\nSource0:      http://download.dre.vanderbilt.edu/previous_versions/ACE+TAO-src-%{ACEVER}.tar.gz\n%else\nSource0:      http://download.dre.vanderbilt.edu/previous_versions/ACE-src-%{ACEVER}.tar.gz\n%endif\nSource1:      ace-tao-rpmlintrc\nBuildRoot:    %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)\n\n%define _extension .gz\n\n%if 0%{?fedora} || 0%{?rhel}\nBuildRequires: redhat-rpm-config elfutils sendmail\n%endif\n\n%if !0%{?suse_version}\nRequires(post):   /sbin/install-info\nRequires(preun):  /sbin/install-info\nRequires(postun): /sbin/ldconfig\n%else\nPreReq:         %install_info_prereq %insserv_prereq  %fillup_prereq\nPreReq:         pwdutils\n%endif\n\n%if 0%{?mdkversion}\nBuildRequires:  sendmail\n%endif\n\nBuildRequires:  openssl-devel\nBuildRequires:  gcc-c++\nBuildRequires:  libstdc++-devel\n\n%if %{?_with_zlib:1}%{!?_with_zlib:0}\nBuildRequires:  zlib-devel\n%endif\n\n%if %{?_with_bzip2:1}%{!?_with_bzip2:0}\nBuildRequires:  bzip2\n%endif\n\nBuildRequires:  perl perl(Data::Dumper)\n\n%if %{?_with_fltk:1}%{!?_with_fltk:0}\nBuildRequires:  fltk-devel\n%define fltk_pac ace-flreactor\n%endif\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\nBuildRequires:  tcl-devel\nBuildRequires:  tk-devel\nBuildRequires:  tk\n%define tk_pac ace-tkreactor\n%define tao_tk_pac tao-tkresource\n%endif\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%define qt_pack ace-qtreactor\n%define tao_qt_pac tao-qtresource\n\n# qt3 has a name change in F9\n%if 0%{?fedora} > 8\n%define qtpacname qt3\n%else\n%define qtpacname qt\n%endif\n\n%if 0%{?suse_version}\n%define qtpacname qt3\n%endif\n\nBuildRequires:  %{qtpacname}-devel\n%endif\n\n%if %{?_with_fox:1}%{!?_with_fox:0}\n%if 0%{?suse_version} == 1020\nBuildRequires: fox16-devel\n%endif\n%define fox_pac ace_foxreactor\n%endif\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%define xt_pac ace-xtreactor\n%define tao_xt_pac tao-xtresource\n%endif\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%define tao_fl_pac tao-flresource\n%endif\n\n%if 0%{?suse_version}\n%global ace_packages ace ace-xml ace-gperf ace-kokyu\n%global tao_packages tao tao-utils tao tao-cosnaming tao-cosevent tao-cosnotification tao-costrading tao-rtevent tao-cosconcurrency\n%global all_ace_packages %{?ace_packages} %{?fltk_pac} %{?tk_pac} %{?qt_pac} %{?fox_pac} %{?xt_pac}\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n%global all_tao_packages %{?tao_packages} %{?tao_fl_pac} %{?tao_qt_pac} %{?tao_xt_pac} %{?tao_tk_pac}\n%endif\n%global debug_package_requires %{all_ace_packages} %{?all_tao_packages}\n%endif\n\n%if 0%{?make_nosrc}\n# Leave out the distro for now\nNoSource: 0\n%endif\n\n%description -n ace-tao\n\nThe ADAPTIVE Communication Environment (ACE) is a freely available,\nopen-source object-oriented (OO) framework that implements many core\npatterns for concurrent communication software. ACE provides a rich\nset of reusable C++ wrapper facades and framework components that\nperform common communication software tasks across a range of OS\nplatforms. The communication software tasks provided by ACE include\nevent demultiplexing and event handler dispatching, signal handling,\nservice initialization, interprocess communication, shared memory\nmanagement, message routing, dynamic (re)configuration of distributed\nservices, concurrent execution and synchronization.\n\nTAO is a real-time implementation of CORBA built using the framework\ncomponents and patterns provided by ACE. TAO contains the network\ninterface, OS, communication protocol, and CORBA middleware components\nand features. TAO is based on the standard OMG CORBA reference model,\nwith the enhancements designed to overcome the shortcomings of\nconventional ORBs for high-performance and real-time applications.\n\n# ---------------- ace ----------------\n\n%package -n     ace\nSummary:        The ADAPTIVE Communication Environment (ACE)\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       openssl\n\n%description -n ace\n\nThe ADAPTIVE Communication Environment (ACE) is a freely available,\nopen-source object-oriented (OO) framework that implements many core\npatterns for concurrent communication software. ACE provides a rich\nset of reusable C++ wrapper facades and framework components that\nperform common communication software tasks across a range of OS\nplatforms. The communication software tasks provided by ACE include\nevent demultiplexing and event handler dispatching, signal handling,\nservice initialization, interprocess communication, shared memory\nmanagement, message routing, dynamic (re)configuration of distributed\nservices, concurrent execution and synchronization.\n\n# ---------------- ace-devel ----------------\n\n%package -n     ace-devel\nSummary:        Header files and development components for ACE\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\nRequires:       openssl-devel\n%if !0%{?suse_version}\nProvides:       perl(PerlACE::Run_Test) perl(Process) perl(VmsProcess) perl(Win32::Process)\n%endif\n\n%description -n ace-devel\n\nThis package contains the components needed for developing programs\nusing ACE.\n\n# ---------------- ace-xml ----------------\n\n%package -n     ace-xml\nSummary:        ACE XML Runtime Support\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\n\n%description -n ace-xml\n\nACE XML Parser interfaces follows the the design of SAX 2.0, which is\na public domain specification for Java.  The major difference between\nACE XML Parser interfaces and SAX is that we added an reference of\nACEXML_Env to every SAX method to accommodate platforms/compilers that\ndon't support C++ exceptions.  SAX is defined by David Megginson\n<david@megginson.com>\n\n# ---------------- ace-gperf ----------------\n\n%package -n     ace-gperf\nSummary:        ACE gperf\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\n\n%description -n ace-gperf\n\nACE gperf utility\n\n# ---------------- ace-xml-devel ----------------\n\n%package -n     ace-xml-devel\nSummary:        Header files and development components for ACE XML\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-devel = %{ACEVER}\nRequires:       ace-xml = %{ACEVER}\n\n%description -n ace-xml-devel\n\nThis package contains the components needed for developing programs\nusing ACEXML.\n\n# ---------------- ace-kokyu ----------------\n\n%package -n     ace-kokyu\nSummary:        Kokyu scheduling framework for ACE\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\n\n%description -n ace-kokyu\n\nKokyu is a portable middleware scheduling framework designed to\nprovide flexible scheduling and dispatching services within the\ncontext of higher-level middleware. Kokyu currently provides real-time\nscheduling and dispatching services for TAO's real-time Event Service\nwhich mediates supplier-consumer relationships between application\noperations. Kokyu also provides a scheduling and dispatching framework\nfor threads. This is being used by the TAO RTCORBA 2.0 scheduler\nimplementations.\n\n# ---------------- ace-kokyu-devel ----------------\n\n%package -n     ace-kokyu-devel\nSummary:        Header files and development components for the ACE Kokyu scheduler\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-devel = %{ACEVER}\nRequires:       ace-kokyu = %{ACEVER}\n\n%description -n ace-kokyu-devel\n\nThis package contains the components needed for developing programs\nusing Kokyu.\n\n\n# ---------------- ace-foxreactor ----------------\n\n%if %{?_with_fox:1}%{!?_with_fox:0}\n%if 0%{?have_fox} == 1\n%package -n     ace-foxreactor\nSummary:        ACE_FoxReactor for use with the FOX toolkit\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\nRequires:       fox16\n\n%description -n ace-foxreactor\n\nA Reactor implementation that uses the FOX toolkit for\nevent demultiplexing.  This will let us integrate the FOX toolkit with\nACE and/or TAO.\n%endif\n%endif\n\n# ---------------- ace-foxreactor-devel ----------------\n\n%if %{?_with_fox:1}%{!?_with_fox:0}\n%if 0%{?have_fox} == 1\n%package -n     ace-foxreactor-devel\nSummary:        Header files for development with ACE_FoxReactor\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-devel = %{ACEVER}\nRequires:       ace-foxreactor = %{ACEVER}\nRequires:       fox16-devel\n\n%description -n ace-foxreactor-devel\n\nThis package contains the components needed for developing programs\nusing the ACE_FoxReactor.\n%endif\n%endif\n\n# ---------------- ace-flreactor ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%package -n     ace-flreactor\nSummary:        ACE_FlReactor for use with the Fast-Light toolkit\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\nRequires:       fltk\n\n%description -n ace-flreactor\n\nA Reactor implementation that uses the Fast-Light (FL) toolkit for\nevent demultiplexing.  This will let us integrate the FL toolkit with\nACE and/or TAO.\n%endif\n\n# ---------------- ace-flreactor-devel ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%package -n     ace-flreactor-devel\nSummary:        Header files for development with ACE_FlReactor\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-devel = %{ACEVER}\nRequires:       ace-flreactor = %{ACEVER}\nRequires:       fltk-devel\n\n%description -n ace-flreactor-devel\n\nThis package contains the components needed for developing programs\nusing the ACE_FlReactor.\n%endif\n\n# ---------------- ace-qtreactor ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%package -n     ace-qtreactor\nSummary:        ACE_QtReactor for use with Qt library\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\nRequires:       qt4\n\n%description -n ace-qtreactor\n\nA Reactor implementation that uses the Qt toolkit for event\ndemultiplexing.  This will let us integrate the Qt toolkit with ACE\nand/or TAO.\n%endif\n\n# ---------------- ace-qtreactor-devel ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%package -n     ace-qtreactor-devel\nSummary:        Header files for development with ACE_QtReactor\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-devel = %{ACEVER}\nRequires:       ace-qtreactor = %{ACEVER}\nRequires:       qt4-devel\n\n%description -n ace-qtreactor-devel\n\nThis package contains the components needed for developing programs\nusing the ACE_QtReactor.\n%endif\n\n# ---------------- ace-tkreactor ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%package -n     ace-tkreactor\nSummary:        ACE_TkReactor for use with Tk toolkit\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\nRequires:       tk\n\n%description -n ace-tkreactor\n\nA Reactor implementation that uses the Tk toolkit for event\ndemultiplexing.  This will let us integrate the Tk toolkit with ACE\nand/or TAO.\n%endif\n\n# ---------------- ace-tkreactor-devel ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%package -n     ace-tkreactor-devel\nSummary:        Header files for development with ACE_TkReactor\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-devel = %{ACEVER}\nRequires:       ace-tkreactor = %{ACEVER}\nRequires:       tk-devel\n\n%description -n ace-tkreactor-devel\n\nThis package contains the components needed for developing programs\nusing the ACE_TkReactor.\n%endif\n\n# ---------------- ace-xtreactor ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%package -n     ace-xtreactor\nSummary:        ACE_XtReactor for use with the X Toolkit\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\n# The xorg packaging scheme changed, let autoreq to the job for now.\n# Requires: xorg-x11-libs\n\n%description -n ace-xtreactor\n\nA Reactor implementation that uses the X Toolkit for event\ndemultiplexing.  This will let us integrate the X Toolkit with ACE\nand/or TAO.\n%endif\n\n# ---------------- ace-xtreactor-devel ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%package -n     ace-xtreactor-devel\nSummary:        Header files for development with ACE_XtReactor\nVersion:        %{ACEVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-devel = %{ACEVER}\nRequires:       ace-xtreactor = %{ACEVER}\n# The xorg package naming scheme changed, use specific files for now.\n# old -> Requires: xorg-x11-devel\n# new -> Requires: libX11-devel\nRequires: %{_libdir}/libX11.so\nRequires: %{_libdir}/libXt.so\n\n%description -n ace-xtreactor-devel\n\nThis package contains the components needed for developing programs\nusing the ACE_XtReactor.\n%endif\n\n# ---------------- MPC ----------------\n\n%package -n   mpc\nSummary:      Make Project Creator\nVersion:      %{ACEVER}\nGroup:        Development/Tools/Building\n%if !0%{?suse_version}\nProvides:     perl(Driver) perl(MakeProjectBase) perl(ObjectGenerator) perl(ProjectCreator) perl(WorkspaceCreator) perl(WorkspaceHelper) perl(DependencyWriter) perl(WIXProjectCreator)\n%endif\n\n%description -n mpc\n\nThe Makefile, Project and Workspace Creator.\nDesigned by Justin Michel (michel_j@ociweb.com) and Chad Elliott.\nImplemented by Chad Elliott (elliott_c@ociweb.com).\n\nA single tool (MPC) can be used to generate tool specific input (i.e.\nMakefile, dsp, vcproj, etc). The generator takes platform and building\ntool generic files (mpc files) as input which describe basic information\nneeded to generate a \"project\" file for various build tools. These tools\ninclude Make, NMake, Visual C++ 6, Visual C++ 7, etc.\n\n# ---------------- tao ----------------\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n\n%package -n     tao\nSummary:        The ACE ORB (TAO)\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace = %{ACEVER}\n\n%description -n tao\n\nTAO is a real-time implementation of CORBA built using the framework\ncomponents and patterns provided by ACE. TAO contains the network\ninterface, OS, communication protocol, and CORBA middleware components\nand features. TAO is based on the standard OMG CORBA reference model,\nwith the enhancements designed to overcome the shortcomings of\nconventional ORBs for high-performance and real-time applications.\n\n# ---------------- tao-devel ----------------\n\n%package -n     tao-devel\nSummary:        Header files and development components for TAO\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       tao = %{TAOVER}\nRequires:       ace-devel = %{ACEVER}\nRequires:       ace-gperf = %{ACEVER}\n\n%description -n tao-devel\n\nThis package contains the components needed for developing programs\nusing TAO.\n\n# ---------------- tao-utils ----------------\n\n%package -n     tao-utils\nSummary:        TAO naming service and IOR utilities\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       tao = %{TAOVER}\n\n%description -n tao-utils\n\nThis package includes programs to query or control a CORBA naming service,\nand to dump an IOR.\n\nThe following programs are included:\n* tao-nslist, to list naming context and object bindings\n* tao-nsadd, to create bindings\n* tao-nsdel, to remove bindings\n* tao-catior, to dump the content of an Interoperable Object Reference\n\n# ---------------- tao-cosnaming ----------------\n\n%package -n     tao-cosnaming\nSummary:        The TAO CORBA Naming Service (CosNaming) and Interoperable Naming Service (INS)\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       tao = %{TAOVER}\nRequires:       logrotate\n\n%description -n tao-cosnaming\n\nOMG defined CORBA Naming Service to provide a basic service location\nmechanism for CORBA systems. CosNaming manages a hierarchy of\nname-to-object-reference mappings. Anything, but typically the server\nprocess hosting an object, may bind an object reference with a name in\nthe Naming Service by providing the name and object\nreference. Interested parties (typically clients) can then use the\nNaming Service to resolve a name to an object reference.\n\nMore recently, CORBA Naming Service was subsumed/extended by the CORBA\nInteroperable Naming Service, a.k.a. INS. INS inherits all the\nfunctionality from the original Naming Service specification in\naddition to addressing some its shortcomings. In particular, INS\ndefines a standard way for clients and servers to locate the Naming\nService itself. It also allows the ORB to be administratively\nconfigured for bootstrapping to services not set up with the orb at\ninstall time.\n\n# ---------------- tao-cosevent ----------------\n\n%package -n     tao-cosevent\nSummary:        The TAO CORBA CosEvent Service\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       tao = %{TAOVER}\nRequires:       logrotate\n\n%description -n tao-cosevent\n\nThe CosEvent_Service is a COS compliant Event Service.\n\nThe service is registered with the naming service with the name\n\"CosEventService\" . It exposes the <EventChannel> interface which can be\nused by suppliers and consumers to send and receive events.\n\n# ---------------- tao-cosnotification ----------------\n\n%package -n     tao-cosnotification\nSummary:        The TAO CORBA Notification Service\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       tao = %{TAOVER}\nRequires:       logrotate\n\n%description -n tao-cosnotification\n\nThe Notify_Service is a COS compliant Notification Service.\n\nThe Notify_Service executable starts up a Notification Service factory\nand registers it with the Naming Service under the name\n\"NotifyEventChannelFactory\"\n\n# ---------------- tao-costrading ----------------\n\n%package -n     tao-costrading\nSummary:        The TAO CORBA Trading Service\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       tao = %{TAOVER}\nRequires:       logrotate\n\n%description -n tao-costrading\n\nThe Trading_Service is a COS compliant Trading Service.\n\n# ---------------- tao-rtevent ----------------\n\n%package -n     tao-rtevent\nSummary:        The TAO Real-time Event Service\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       tao = %{TAOVER}\nRequires:       logrotate\n\n%description -n tao-rtevent\n\nThe TAO Real-Time Event Service. This is a TAO specific service\nimplementation\n\n# ---------------- tao-cosconcurrency ----------------\n\n%package -n     tao-cosconcurrency\nSummary:        The TAO CORBA Concurrency Service\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       tao = %{TAOVER}\nRequires:       logrotate\n\n%description -n tao-cosconcurrency\n\nThe CORBA Concurrency Service. One of the standard CORBA services.\n\n# ---------------- tao-flresource ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%package -n     tao-flresource\nSummary:        FlResource_Factory for creating FlReactor\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-flreactor = %{ACEVER}\nRequires:       tao = %{TAOVER}\n\n%description -n tao-flresource\n\nThis factory is intended for creating FlReactor for ORB. This factory\ncan be feed into ORB using TAO_ORB_Core::set_gui_resource_factory\nmethod which is usually done by TAO_FlResource_Loader.\n%endif\n\n# ---------------- tao-flresource-devel ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%package -n     tao-flresource-devel\nSummary:        Header files for development with FlResource_Factory\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-flreactor-devel = %{ACEVER}\nRequires:       tao-devel = %{TAOVER}\nRequires:       tao-flresource = %{TAOVER}\n\n%description -n tao-flresource-devel\n\nThis package contains the components needed for developing programs\nusing the FlResource_Factory.\n%endif\n\n# ---------------- tao-qtresource ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%package -n     tao-qtresource\nSummary:        QtResource_Factory for creating QtReactor\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-qtreactor = %{ACEVER}\nRequires:       tao = %{TAOVER}\n\n%description -n tao-qtresource\n\nThis factory is intended for creating QtReactor for ORB. This factory\ncan be feed into ORB using TAO_ORB_Core::set_gui_resource_factory\nmethod which is usually done by TAO_QtResource_Loader.\n%endif\n\n# ---------------- tao-qtresource-devel ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%package -n     tao-qtresource-devel\nSummary:        Header files for development with QtResource_Factory\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-qtreactor-devel = %{ACEVER}\nRequires:       tao-devel = %{TAOVER}\nRequires:       tao-qtresource = %{TAOVER}\n\n%description -n tao-qtresource-devel\n\nThis package contains the components needed for developing programs\nusing the QtResource_Factory.\n%endif\n\n# ---------------- tao-tkresource ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%package -n     tao-tkresource\nSummary:        TkResource_Factory for creating TkReactor\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-tkreactor = %{ACEVER}\nRequires:       tao = %{TAOVER}\n\n%description -n tao-tkresource\n\nThis factory is intended for creating TkReactor for ORB. This factory\ncan be feed into ORB using TAO_ORB_Core::set_gui_resource_factory\nmethod which is usually done by TAO_TkResource_Loader.\n%endif\n\n# ---------------- tao-tkresource-devel ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%package -n     tao-tkresource-devel\nSummary:        Header files for development with TkResource_Factory\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-tkreactor-devel = %{ACEVER}\nRequires:       tao-devel = %{TAOVER}\nRequires:       tao-tkresource = %{TAOVER}\n\n%description -n tao-tkresource-devel\n\nThis package contains the components needed for developing programs\nusing the TkResource_Factory.\n%endif\n\n# ---------------- tao-xtresource ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%package -n     tao-xtresource\nSummary:        XtResource_Factory for creating XtReactor\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-xtreactor = %{ACEVER}\nRequires:       tao = %{TAOVER}\n\n%description -n tao-xtresource\n\nThis factory is intended for creating XtReactor for ORB. This factory\ncan be feed into ORB using TAO_ORB_Core::set_gui_resource_factory\nmethod which is usually done by TAO_XtResource_Loader.\n%endif\n\n# ---------------- tao-xtresource-devel ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%package -n     tao-xtresource-devel\nSummary:        Header files for development with XtResource_Factory\nVersion:        %{TAOVER}\nGroup:          Development/Libraries/C and C++\nRequires:       ace-xtreactor-devel = %{ACEVER}\nRequires:       tao-devel = %{TAOVER}\nRequires:       tao-xtresource = %{TAOVER}\n\n%description -n tao-xtresource-devel\n\nThis package contains the components needed for developing programs\nusing the XtResource_Factory.\n%endif\n\n%endif\n\n# ================================================================\n# prep\n# ================================================================\n\n%prep\n%setup -q -n ACE_wrappers\n\n# ================================================================\n# build\n# ================================================================\n\n%build\n\nexport ACE_ROOT=$(pwd)\nexport MPC_ROOT=$ACE_ROOT/MPC\nexport LD_LIBRARY_PATH=$ACE_ROOT/lib\n%if 0%{?_with_tao:1}%{?_without_tao:0}\nexport TAO_ROOT=$ACE_ROOT/TAO\n%endif\n\n# Dump the g++ versions, in case the g++ version is broken we can\n# easily see this in the build log\ng++ --version\ng++ -dumpversion\n\n%if %skip_make\n\ncd .. && rm -rf ACE_wrappers && ln -s ACE_wrappers-BUILT ACE_wrappers\n\n%else\n\ncat > $ACE_ROOT/ace/config.h << EOF\nEOF\n\n# If ipv6 support is indicated insert some lines into the config.h file\n%if %{?_with_ipv6:1}%{!?_with_ipv6:0}\ncat >> $ACE_ROOT/ace/config.h << EOF\n#define ACE_HAS_IPV6\n#define ACE_USES_IPV4_IPV6_MIGRATION\nEOF\n%endif\n\n# Include platform include\ncat >> $ACE_ROOT/ace/config.h << EOF\n#include \"ace/config-linux.h\"\nEOF\n\n# platform_macros.GNU\n%if 0%{?suse_version}\ncat > $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\nCCFLAGS += %optflags\nCFLAGS += %optflags\nEOF\n%endif\n\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\nssl = 1\nEOF\n\n%if %{?_with_inline:1}%{!?_with_inline:0}\n%define inline -D__ACE_INLINE__ -U__ACE_NO_INLINE__\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\ninline = 1\nEOF\n%else\n%define inline -D__ACE_NO_INLINE__ -U__ACE_INLINE__\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\ninline = 0\nEOF\n%endif\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\nxt = 1\nace_xtreactor = 1\nx11 = 1\ntao_xtresource = 1\nEOF\n%endif\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\nace_tkreactor = 1\ntao_tkresource = 1\ntk = 1\nEOF\n%endif\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\nfl = 1\ntao_flresource = 1\nace_flreactor = 1\nEOF\n%endif\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\nqt4 = 1\ngl = 1\nace_qt4reactor = 1\ntao_qt4resource = 1\nEOF\n%endif\n\n%if %{?_with_fox:1}%{!?_with_fox:0}\n%if 0%{?have_fox} == 1\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\nfox = 1\nace_foxreactor = 1\ntao_foxresource = 1\n%endif\n%endif\n\n# 64 bit machines need additional macro.\n%ifarch x86_64 ia64 ppc64 s390x\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\nbuildbits = 64\nEOF\n%endif\n\n%ifarch ppc64\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\nminimaltoc = 1\nEOF\n%endif\n\n%if %{?_with_opt:0}%{!?_with_opt:1}\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\noptimize = 0\nEOF\n%else\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\noptimize = 1\nEOF\n%endif\n\ncat >> $ACE_ROOT/include/makeinclude/platform_macros.GNU <<EOF\ninclude \\$(ACE_ROOT)/include/makeinclude/platform_linux.GNU\nEOF\n\ncat > $ACE_ROOT/bin/MakeProjectCreator/config/default.features <<EOF\nssl=1\ncidl=0\nEOF\n\n%if %{?_with_bzip2:1}%{!?_with_bzip2:0}\ncat >> $ACE_ROOT/bin/MakeProjectCreator/config/default.features <<EOF\nbzip2 = 1\nEOF\n%endif\n\n%if %{?_with_zlib:1}%{!?_with_zlib:0}\ncat >> $ACE_ROOT/bin/MakeProjectCreator/config/default.features <<EOF\nzlib = 1\nEOF\n%endif\n\n%if %{?_with_versioned:1}%{!?_with_versioned:0}\ncat >> $ACE_ROOT/bin/MakeProjectCreator/config/default.features <<EOF\nversioned_namespace = 1\nEOF\n%endif\n\n# We don't use default.features to enable ipv6 cause it conflicts w/\n# the config.h generated version.  Config.h is superior because it is\n# shipped to the end-user machines and also defines\n# ACE_USES_IPV4_IPV6_MIGRATION which the default.features technique\n# does not seem to set.\n\n%if %{?_with_fox:1}%{!?_with_fox:0}\n%if 0%{?have_fox} == 1\ncat >> $ACE_ROOT/bin/MakeProjectCreator/config/default.features <<EOF\nfox=1\nEOF\n%endif\n%endif\n\n# Need to regenerate all of the GNUMakefiles\n# then make everything that we have generated for\n%if 0%{?_with_tao:1}%{?_without_tao:0}\nbin/mwc.pl -type gnuace TAO/TAO_ACE.mwc\nmake %{?_smp_mflags} -C $TAO_ROOT\n%else\nbin/mwc.pl -type gnuace ACE.mwc\nmake %{?_smp_mflags} -C $ACE_ROOT\n%endif\n\n%endif\n\n# ================================================================\n# install\n# ================================================================\n\n%define ACEVERSO %{ACEVER}\n%define TAOVERSO %{TAOVER}\n\n%install\n\nexport ACE_ROOT=$(pwd)\n%if 0%{?_with_tao:1}%{?_without_tao:0}\nexport TAO_ROOT=$ACE_ROOT/TAO\n%endif\n\n# ---------------- Runtime Components ----------------\n\n# install shared libraries\ninstall -d %{buildroot}%{_libdir}\n\n# ACE + XML libraries\nINSTLIBS=`ls ${ACE_ROOT}/lib/libACE*.so.%{ACEVERSO}`\ninstall $INSTLIBS %{buildroot}%{_libdir}\n\n# ACE-Kokyu libraries\nINSTLIBS=`ls ${ACE_ROOT}/lib/libKokyu.so.%{ACEVERSO}`\ninstall $INSTLIBS %{buildroot}%{_libdir}\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n# TAO libraries\nINSTLIBS=`ls ${ACE_ROOT}/lib/libTAO*.so.%{TAOVERSO}`\ninstall $INSTLIBS %{buildroot}%{_libdir}\n%endif\n\n# Create un-versioned symbolic links for libraries\n(cd %{buildroot}%{_libdir} && \\\n ls *.so.* | awk 'BEGIN{FS=\".\"}{print \"ln -sf \" $0 \" \" $1 \".\" $2;}' | sh)\n\n# install binaries\ninstall -d %{buildroot}%{_sbindir}\n\n# Rename the TAO service binaries:\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n\ninstall ${ACE_ROOT}/TAO/orbsvcs/Naming_Service/tao_cosnaming \\\n    %{buildroot}%{_sbindir}/tao-cosnaming\n\ninstall ${ACE_ROOT}/TAO/orbsvcs/CosEvent_Service/tao_cosevent \\\n    %{buildroot}%{_sbindir}/tao-cosevent\n\ninstall ${ACE_ROOT}/TAO/orbsvcs/Notify_Service/tao_cosnotification \\\n    %{buildroot}%{_sbindir}/tao-cosnotification\n\ninstall ${ACE_ROOT}/TAO/orbsvcs/Trading_Service/tao_costrading \\\n    %{buildroot}%{_sbindir}/tao-costrading\n\ninstall ${ACE_ROOT}/TAO/orbsvcs/Event_Service/tao_rtevent \\\n    %{buildroot}%{_sbindir}/tao-rtevent\n\ninstall ${ACE_ROOT}/TAO/orbsvcs/Concurrency_Service/tao_cosconcurrency \\\n    %{buildroot}%{_sbindir}/tao-cosconcurrency\n\n#Create directories\nfor dir in cache log; do\n        mkdir -p %{buildroot}%{_localstatedir}/${dir}/tao\ndone\n\n# Create data files which will be ghosted.\ntouch %{buildroot}%{_localstatedir}/cache/tao/tao-cosnaming.dat\n\n# Create data files which will be ghosted.\nfor logfile in cosnaming cosconcurrency cosevent cosnotification costrading rtevent; do\n    touch %{buildroot}%{_localstatedir}/log/tao/tao-${logfile}.log\ndone\n\n%endif\n\n# ---------------- Development Components ----------------\n\n# INSTHDR=\"cp --preserve=timestamps\"\nINSTHDR=\"install -m 0644 -p\"\n\n# install headers\ninstall -d %{buildroot}%{_includedir}\n( set +x\necho \"Building list of headers...\"\n\n# Generate raw dependency output\nBASEHDR=`find \\\n    ace \\\n    ACEXML/common \\\n    ACEXML/parser/parser \\\n    Kokyu \\\n    -name '*.h' -not -name 'config-*'`\n%if 0%{?_with_tao:1}%{?_without_tao:0}\nTAO_MM_OPTS=\"-I TAO -I TAO/orbsvcs -I TAO/orbsvcs/orbsvcs\"\nBASEHDR=\"$BASEHDR `find \\\n    TAO/tao \\\n    TAO/orbsvcs/orbsvcs \\\n    -name '*.h' -not -name 'config-*'`\"\n%endif\nfor j in $BASEHDR; do\n        echo $j >> rawhdrs.log\n        echo '#include <'$j'>' | \\\n        g++ %{inline} \\\n            -I . \\\n            -I protocols \\\n            $TAO_MM_OPTS \\\n            -x c++ - -MM -MF mmout 2>> rawhdrs.log && cat mmout || true;\ndone > mmraw.list\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n# Append IDL headers to the raw list.\nfind \\\n    TAO/tao \\\n    TAO/orbsvcs/orbsvcs \\\n    -regex '.*\\.p?idl$' >> mmraw.list\n%endif\n\n# Cleanup dependency output:\n#   remove '-:' sequences\n#   change all sequences of whitespace into \\n\n#   remove leading './'\n#   cannonicalize up to two levels of '/../../'\n#   remove duplicates\ncat mmraw.list |\\\n        sed -e 's/^-://g' -e 's/\\\\//g' | \\\n        tr -s [:space:] \"\\n\" | \\\n        sed -e 's#^./##g' | \\\n        sed -e 's#/[^/]\\+/\\.\\./#/#g' -e 's#/[^/]\\+/\\.\\./#/#g' | \\\n        sort -u > allhdrs.list\n\n# Add missing headers.\necho ace/QtReactor/QtReactor.h >> allhdrs.list\n%if 0%{?_with_tao:1}%{?_without_tao:0}\necho TAO/tao/QtResource/QtResource_Factory.h >> allhdrs.list\necho TAO/tao/QtResource/QtResource_Loader.h >> allhdrs.list\necho TAO/tao/PortableServer/get_arg.h >> allhdrs.list\necho TAO/orbsvcs/orbsvcs/ESF/ESF_Proxy_List.{h,inl,cpp} >> allhdrs.list\necho TAO/orbsvcs/orbsvcs/ESF/ESF_Proxy_RB_Tree.{h,inl,cpp} >> allhdrs.list\n%endif\n\n# Install headers and create header lists\nrm -f ace-headers.tmp\nrm -f acexml-headers.tmp\nrm -f kokyu-headers.tmp\nrm -f tao-headers.tmp\n\nfor i in `cat allhdrs.list`; do\n    case \"$i\" in\n    protocols/ace/*)\n        mkdir -p `dirname %{buildroot}%{_includedir}/${i/protocols\\/}`\n        $INSTHDR $i %{buildroot}%{_includedir}/${i/protocols/}\n        echo '%dir %{_includedir}/'`dirname ${i/protocols/}` >> ace-headers.tmp\n        echo '%{_includedir}/'${i/protocols/} >> ace-headers.tmp\n        ;;\n    ace/*)\n        mkdir -p `dirname %{buildroot}%{_includedir}/$i`\n        $INSTHDR $i %{buildroot}%{_includedir}/$i\n        echo '%dir %{_includedir}/'`dirname $i` >> ace-headers.tmp\n        echo '%{_includedir}/'$i >> ace-headers.tmp\n        ;;\n    ACEXML/*)\n        mkdir -p `dirname %{buildroot}%{_includedir}/$i`\n        $INSTHDR $i %{buildroot}%{_includedir}/$i\n        echo '%dir %{_includedir}/'`dirname $i` >> acexml-headers.tmp\n        echo '%{_includedir}/'$i >> acexml-headers.tmp\n        ;;\n    Kokyu/*)\n        mkdir -p `dirname %{buildroot}%{_includedir}/$i`\n        $INSTHDR $i %{buildroot}%{_includedir}/$i\n        echo '%dir %{_includedir}/'`dirname $i` >> kokyu-headers.tmp\n        echo '%{_includedir}/'$i >> kokyu-headers.tmp\n        ;;\n    TAO/tao/*)\n        mkdir -p `dirname %{buildroot}%{_includedir}/${i/TAO\\/}`\n        $INSTHDR $i %{buildroot}%{_includedir}/${i/TAO\\/}\n        echo '%dir %{_includedir}/'`dirname ${i/TAO\\/}` >> tao-headers.tmp\n        echo '%{_includedir}/'${i/TAO\\/} >> tao-headers.tmp\n        ;;\n    TAO/orbsvcs/orbsvcs/*)\n        mkdir -p `dirname %{buildroot}%{_includedir}/${i/TAO\\/orbsvcs\\/}`\n        $INSTHDR $i %{buildroot}%{_includedir}/${i/TAO\\/orbsvcs\\/}\n        echo '%dir %{_includedir}/'`dirname ${i/TAO\\/orbsvcs\\/}` >> tao-headers.tmp\n        echo '%{_includedir}/'${i/TAO\\/orbsvcs\\/} >> tao-headers.tmp\n        ;;\n    *)\n        echo $i\n        ;;\n    esac\ndone\n\necho '%defattr(-,root,root,-)' > ace-headers.list\nsort -u < ace-headers.tmp >> ace-headers.list\nrm -f ace-headers.tmp\n\necho '%defattr(-,root,root,-)' > acexml-headers.list\nsort -u < acexml-headers.tmp >> acexml-headers.list\nrm -f acexml-headers.tmp\n\necho '%defattr(-,root,root,-)' > kokyu-headers.list\nsort -u < kokyu-headers.tmp >> kokyu-headers.list\nrm -f kokyu-headers.tmp\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\necho '%defattr(-,root,root,-)' > tao-headers.list\nsort -u < tao-headers.tmp >> tao-headers.list\nrm -f tao-headers.tmp\n%endif\n\n)\n\n# Will also be needed for mpc.\ninstall -d %{buildroot}%{_bindir}\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n\n# install the TAO_IDL compiler\ninstall -d %{buildroot}%{_libdir}\n\ninstall ${ACE_ROOT}/bin/ace_gperf %{buildroot}%{_bindir}\ninstall ${ACE_ROOT}/bin/tao_idl %{buildroot}%{_bindir}\ninstall ${ACE_ROOT}/bin/tao_imr %{buildroot}%{_bindir}\ninstall ${ACE_ROOT}/bin/tao_ifr %{buildroot}%{_bindir}\ninstall ${ACE_ROOT}/bin/tao_catior %{buildroot}%{_bindir}/tao_catior\ninstall ${ACE_ROOT}/bin/tao_nsadd %{buildroot}%{_bindir}/tao_nsadd\ninstall ${ACE_ROOT}/bin/tao_nsdel %{buildroot}%{_bindir}/tao_nsdel\ninstall ${ACE_ROOT}/bin/tao_nslist %{buildroot}%{_bindir}/tao_nslist\n\n# ================================================================\n# Config & Options\n# ================================================================\n\ninstall -d %{buildroot}%{_sysconfdir}\nmkdir -p %{buildroot}%{_sysconfdir}/logrotate.d\nmkdir -p %{buildroot}%{_sysconfdir}/tao\ncp -R ${ACE_ROOT}/rpmbuild/etc/logrotate.d/* %{buildroot}%{_sysconfdir}/logrotate.d/\ncp -R ${ACE_ROOT}/rpmbuild/etc/tao/* %{buildroot}%{_sysconfdir}/tao/\n\n%if 0%{?suse_version}\nmkdir -p %{buildroot}%{_sysconfdir}/init.d\nmkdir -p %{buildroot}%{_localstatedir}/adm\ncp -R ${ACE_ROOT}/rpmbuild/ace-tao-init-suse/init.d/* %{buildroot}%{_sysconfdir}/init.d/\ncp -R ${ACE_ROOT}/rpmbuild/ace-tao-init-suse/tao/* %{buildroot}%{_sysconfdir}/tao/\n%else\nmkdir -p %{buildroot}%{_sysconfdir}/rc.d/init.d\ncp -R ${ACE_ROOT}/rpmbuild/ace-tao-init-fedora/rc.d/init.d/* %{buildroot}%{_sysconfdir}/rc.d/init.d/\ncp -R ${ACE_ROOT}/rpmbuild/ace-tao-init-fedora/tao/* %{buildroot}%{_sysconfdir}/tao/\n%endif\n\n%if 0%{?suse_version}\npushd %{buildroot}%{_sysconfdir}/init.d\nfor f in *; do\n        ln -s /etc/init.d/$f %{buildroot}%{_sbindir}/rc${f}\ndone\npopd\n%endif\n%endif\n\n# ================================================================\n# Makefiles\n# ================================================================\n\ninstall -d %{buildroot}%{_datadir}\ninstall -d %{buildroot}%{_datadir}/ace\ninstall -d %{buildroot}%{_datadir}/ace/include\ninstall -d %{buildroot}%{_datadir}/ace/include/makeinclude\ninstall -d %{buildroot}%{_datadir}/mpc\n%if 0%{?_with_tao:1}%{?_without_tao:0}\ninstall -d %{buildroot}%{_datadir}/tao\ninstall -d %{buildroot}%{_datadir}/tao/orbsvcs\ninstall -d %{buildroot}%{_datadir}/tao/MPC\n%endif\n\nfor mk_macros in \\\n    all_in_one.GNU \\\n    component_check.GNU \\\n    macros.GNU \\\n    platform_g++_common.GNU \\\n    platform_linux.GNU \\\n    platform_linux_common.GNU \\\n    platform_macros.GNU \\\n    rules.bin.GNU \\\n    rules.common.GNU \\\n    rules.lib.GNU \\\n    rules.local.GNU \\\n    rules.nested.GNU \\\n    rules.nolocal.GNU \\\n    rules.nonested.GNU \\\n    wrapper_macros.GNU; do (\n        install ${ACE_ROOT}/include/makeinclude/$mk_macros %{buildroot}%{_datadir}/ace/include/makeinclude)\ndone\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\ninstall ${TAO_ROOT}/rules.tao.GNU %{buildroot}%{_datadir}/tao\n%endif\n\ncp -a ${ACE_ROOT}/MPC/* %{buildroot}%{_datadir}/mpc\n\ninstall -d %{buildroot}%{_datadir}/ace/bin\ncp -a ${ACE_ROOT}/bin/DependencyGenerator %{buildroot}%{_datadir}/ace/bin\ncp -a ${ACE_ROOT}/bin/MakeProjectCreator %{buildroot}%{_datadir}/ace/bin\ninstall -d %{buildroot}%{_datadir}/ace/bin/PerlACE\ncp -a ${ACE_ROOT}/bin/PerlACE/* %{buildroot}%{_datadir}/ace/bin/PerlACE\ninstall ${ACE_ROOT}/bin/mpc.pl %{buildroot}%{_datadir}/ace/bin\ninstall ${ACE_ROOT}/bin/mwc.pl %{buildroot}%{_datadir}/ace/bin\ninstall ${ACE_ROOT}/bin/g++dep %{buildroot}%{_datadir}/ace/bin\ninstall ${ACE_ROOT}/bin/depgen.pl %{buildroot}%{_datadir}/ace/bin\ninstall ${ACE_ROOT}/bin/generate_export_file.pl %{buildroot}%{_datadir}/ace/bin\ninstall ${ACE_ROOT}/bin/add_rel_link.sh %{buildroot}%{_datadir}/ace/bin\ninstall ${ACE_ROOT}/bin/{ACEutils,Uniqueid}.pm %{buildroot}%{_datadir}/ace/bin\n\nln -sfn %{_includedir}/ace %{buildroot}%{_datadir}/ace\n%if 0%{?_with_tao:1}%{?_without_tao:0}\nln -sfn %{_includedir}/tao %{buildroot}%{_datadir}/tao\nln -sfn %{_includedir}/orbsvcs %{buildroot}%{_datadir}/tao/orbsvcs\n%endif\nln -sfn %{_libdir} %{buildroot}%{_datadir}/ace/lib\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\ncp -a ${TAO_ROOT}/MPC/* %{buildroot}%{_datadir}/tao/MPC\n\n# Set TAO_IDL setting for the user\ncat > %{buildroot}%{_datadir}/ace/include/makeinclude/platform_macros.GNU.tmp <<EOF\nTAO_IDL = %{_bindir}/tao_idl\nTAO_IDL_DEP = %{_bindir}/tao_idl\nEOF\ncat %{buildroot}%{_datadir}/ace/include/makeinclude/platform_macros.GNU >> %{buildroot}%{_datadir}/ace/include/makeinclude/platform_macros.GNU.tmp\nmv %{buildroot}%{_datadir}/ace/include/makeinclude/platform_macros.GNU.tmp %{buildroot}%{_datadir}/ace/include/makeinclude/platform_macros.GNU\n%endif\n\ninstall -d %{buildroot}%{_sysconfdir}/profile.d\ncat > %{buildroot}%{_sysconfdir}/profile.d/mpc.sh <<EOF\nMPC_ROOT=/usr/share/mpc\nexport MPC_ROOT\nEOF\ncat > %{buildroot}%{_sysconfdir}/profile.d/ace-devel.sh <<EOF\nACE_ROOT=/usr/share/ace\nexport ACE_ROOT\nEOF\n%if 0%{?_with_tao:1}%{?_without_tao:0}\ncat > %{buildroot}%{_sysconfdir}/profile.d/tao-devel.sh <<EOF\nTAO_ROOT=/usr/share/tao\nexport TAO_ROOT\nEOF\n%endif\n\n# convenience symlinks\nln -sfn %{_datadir}/ace/bin/mpc.pl %{buildroot}%{_bindir}/mpc.pl\nln -sfn %{_datadir}/ace/bin/mwc.pl %{buildroot}%{_bindir}/mwc.pl\n\n# ================================================================\n# Manuals\n# ================================================================\ninstall -d %{buildroot}%{_mandir}\ninstall -d %{buildroot}%{_mandir}/man1\ninstall ${ACE_ROOT}/apps/gperf/ace_gperf.1 %{buildroot}%{_mandir}/man1\n%if 0%{?_with_tao:1}%{?_without_tao:0}\ninstall ${TAO_ROOT}/TAO_IDL/tao_idl.1 %{buildroot}%{_mandir}/man1\n%endif\ninstall -d  %{buildroot}%{_infodir}\ninstall ${ACE_ROOT}/apps/gperf/ace_gperf.info %{buildroot}%{_infodir}\n\n# ================================================================\n# Create lists of symlinked so's.  We need two lists because we need\n# the unversioned symlinks in the runtime package for so's that can\n# be loaded in the svc.conf.\n# ================================================================\n\n# Make a list of all shared objects.\n(cd %{buildroot}/%{_libdir} && ls *.so | \\\n        awk '{ print \"%{_libdir}/\"$1; }' | \\\n        sort) > all-so.list\n\n# Make a list of likely svc.conf targets.\n(cd %{buildroot}/%{_libdir} && ls *.so | \\\n    nm --print-file-name *.so | \\\n    grep _make_ | \\\n    awk 'BEGIN { FS=\":\"} /^[^:]+:/ { print \"%{_libdir}/\"$1; }' | \\\n    sort -u) > rough-svc-so.list\n\n# Remove false positives (IMPORTANT keep this list sorted!)\ncat > falsepos-svc-so.list <<EOF\n%{_libdir}/libACE.so\n%{_libdir}/libTAO.so\nEOF\ncomm -2 -3 rough-svc-so.list falsepos-svc-so.list > svc-so.list\n\n# Find the list of non-sv.conf target files.\ncomm -2 -3 all-so.list svc-so.list > nonsvc-so.list\n\n# Generate file lists.\ngrep libACE svc-so.list > ace-svc-so.list\ngrep libACE nonsvc-so.list > ace-nonsvc-so.list\n%if 0%{?_with_tao:1}%{?_without_tao:0}\ngrep libTAO svc-so.list > tao-svc-so.list\ngrep libTAO nonsvc-so.list > tao-nonsvc-so.list\n%endif\n\n# Concatenate file lists as neccessary\n%if 0%{?_with_tao:1}%{?_without_tao:0}\ncat tao-headers.list tao-nonsvc-so.list > tao-devel-files.list\n%endif\ncat ace-headers.list ace-nonsvc-so.list > ace-devel-files.list\n\n# ================================================================\n# clean\n# ================================================================\n\n%clean\nrm -rf %{buildroot}\n\n# ================================================================\n# pre install\n# ================================================================\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n\n# ---------------- tao-cosnaming ----------------\n\n%pre -n tao-cosnaming\n\ngetent group tao >/dev/null || /usr/sbin/groupadd -r tao\ngetent passwd tao >/dev/null || \\\n/usr/sbin/useradd -r -g tao -d %{_sysconfdir}/tao -s /sbin/nologin \\\n    -c \"TAO Services\" tao\nexit 0\n\n# ---------------- tao-cosevent ----------------\n\n%pre -n tao-cosevent\n\ngetent group tao >/dev/null || /usr/sbin/groupadd -r tao\ngetent passwd tao >/dev/null || \\\n/usr/sbin/useradd -r -g tao -d %{_sysconfdir}/tao -s /sbin/nologin \\\n    -c \"TAO Services\" tao\nexit 0\n\n# ---------------- tao-cosnotification ----------------\n\n%pre -n tao-cosnotification\n\ngetent group tao >/dev/null || /usr/sbin/groupadd -r tao\ngetent passwd tao >/dev/null || \\\n/usr/sbin/useradd -r -g tao -d %{_sysconfdir}/tao -s /sbin/nologin \\\n    -c \"TAO Services\" tao\nexit 0\n\n# ---------------- tao-costrading ----------------\n\n%pre -n tao-costrading\n\ngetent group tao >/dev/null || /usr/sbin/groupadd -r tao\ngetent passwd tao >/dev/null || \\\n/usr/sbin/useradd -r -g tao -d %{_sysconfdir}/tao -s /sbin/nologin \\\n    -c \"TAO Services\" tao\nexit 0\n\n# ---------------- tao-rtevent ----------------\n\n%pre -n tao-rtevent\n\ngetent group tao >/dev/null || /usr/sbin/groupadd -r tao\ngetent passwd tao >/dev/null || \\\n/usr/sbin/useradd -r -g tao -d %{_sysconfdir}/tao -s /sbin/nologin \\\n    -c \"TAO Services\" tao\nexit 0\n\n# ---------------- tao-cosconcurrency ----------------\n\n%pre -n tao-cosconcurrency\n\ngetent group tao >/dev/null || /usr/sbin/groupadd -r tao\ngetent passwd tao >/dev/null || \\\n/usr/sbin/useradd -r -g tao -d %{_sysconfdir}/tao -s /sbin/nologin \\\n    -c \"TAO Services\" tao\nexit 0\n\n%endif\n\n# ================================================================\n# post install\n# ================================================================\n\n# ---------------- ace ----------------\n\n%post -n ace\n/sbin/ldconfig\n\n# ---------------- ace-devel ----------------\n\n%post -n ace-devel\n/sbin/ldconfig\n\n# ---------------- ace-xml ----------------\n\n%post -n ace-xml\n/sbin/ldconfig\n\n# ---------------- ace-gperf ----------------\n\n%post -n ace-gperf\n\n%if 0%{?suse_version}\n%install_info --info-dir=%_infodir %_infodir/ace_gperf.info%{_extension}\n%else\n/sbin/install-info %{_infodir}/ace_gperf.info%{_extension} %{_infodir}/dir\n%endif\n\n# ---------------- ace-kokyu ----------------\n\n%post -n ace-kokyu\n/sbin/ldconfig\n\n# ---------------- ace-foxreactor ----------------\n\n%if %{?_with_fox:1}%{!?_with_fox:0}\n%if 0%{!?suse_version} || 0%{?suse_version} == 1020\n%post -n ace-foxreactor\n/sbin/ldconfig\n%endif\n%endif\n\n# ---------------- ace-flreactor ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%post -n ace-flreactor\n/sbin/ldconfig\n%endif\n\n# ---------------- ace-qtreactor ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%post -n ace-qtreactor\n/sbin/ldconfig\n%endif\n\n# ---------------- ace-tkreactor ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%post -n ace-tkreactor\n/sbin/ldconfig\n%endif\n\n# ---------------- ace-xtreactor ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%post -n ace-xtreactor\n/sbin/ldconfig\n%endif\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n\n# ---------------- tao ----------------\n\n%post -n tao\n/sbin/ldconfig\n\n# ---------------- tao-devel ----------------\n\n%post -n tao-devel\n/sbin/ldconfig\n\n# ---------------- tao-utils ----------------\n\n%post -n tao-utils\n/sbin/ldconfig\n\n# ---------------- tao-cosnaming ----------------\n\n%post -n tao-cosnaming\n%if 0%{?suse_version}\n%{fillup_and_insserv tao-cosnaming}\n%else\n/sbin/chkconfig --add tao-cosnaming\n%endif\n\n# ---------------- tao-cosevent ----------------\n\n%post -n tao-cosevent\n\n%if 0%{?suse_version}\n%{fillup_and_insserv tao-cosevent}\n%else\n/sbin/chkconfig --add tao-cosevent\n%endif\n\n# ---------------- tao-cosnotification ----------------\n\n%post -n tao-cosnotification\n\n%if 0%{?suse_version}\n%{fillup_and_insserv tao-cosnotification}\n%else\n/sbin/chkconfig --add tao-cosnotification\n%endif\n\n# ---------------- tao-costrading ----------------\n\n%post -n tao-costrading\n\n%if 0%{?suse_version}\n%{fillup_and_insserv tao-costrading}\n%else\n/sbin/chkconfig --add tao-costrading\n%endif\n\n# ---------------- tao-rtevent ----------------\n\n%post -n tao-rtevent\n\n%if 0%{?suse_version}\n%{fillup_and_insserv tao-rtevent}\n%else\n/sbin/chkconfig --add tao-rtevent\n%endif\n\n# ---------------- tao-cosconcurrency ----------------\n\n%post -n tao-cosconcurrency\n\n%if 0%{?suse_version}\n%{fillup_and_insserv tao-cosconcurrency}\n%else\n/sbin/chkconfig --add tao-cosconcurrency\n%endif\n\n# ---------------- tao-flresource ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%post -n tao-flresource\n/sbin/ldconfig\n%endif\n\n# ---------------- tao-qtresource ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%post -n tao-qtresource\n/sbin/ldconfig\n%endif\n\n# ---------------- tao-tkresource ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%post -n tao-tkresource\n/sbin/ldconfig\n%endif\n\n# ---------------- tao-xtresource ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%post -n tao-xtresource\n/sbin/ldconfig\n%endif\n\n%endif\n\n# ================================================================\n# pre uninstall\n# ================================================================\n\n# ---------------- ace-gperf ----------------\n\n%preun -n ace-gperf\n\nif [ $1 = 0 ]; then\n    /sbin/install-info --delete %{_infodir}/ace_gperf.info%{_extension} %{_infodir}/dir\nfi\n\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n\n# ---------------- tao-cosnaming ----------------\n\n%preun -n tao-cosnaming\n%if 0%{?suse_version}\n%stop_on_removal tao-cosnaming\n%else\nif [ $1 = 0 ]; then\n    /sbin/service tao-cosnaming stop > /dev/null 2>&1\n    /sbin/chkconfig --del tao-cosnaming\nfi\n%endif\n\n# ---------------- tao-cosevent ----------------\n\n%preun -n tao-cosevent\n\n%if 0%{?suse_version}\n%stop_on_removal tao-cosevent\n%else\nif [ $1 = 0 ]; then\n    /sbin/service tao-cosevent stop > /dev/null 2>&1\n    /sbin/chkconfig --del tao-cosevent\nfi\n%endif\n\n# ---------------- tao-cosnotification ----------------\n\n%preun -n tao-cosnotification\n\n%if 0%{?suse_version}\n%stop_on_removal tao-cosnotification\n%else\nif [ $1 = 0 ]; then\n    /sbin/service tao-cosnotification stop > /dev/null 2>&1\n    /sbin/chkconfig --del tao-cosnotification\nfi\n%endif\n\n# ---------------- tao-costrading ----------------\n\n%preun -n tao-costrading\n\n%if 0%{?suse_version}\n%stop_on_removal tao-costrading\n%else\nif [ $1 = 0 ]; then\n    /sbin/service tao-costrading stop > /dev/null 2>&1\n    /sbin/chkconfig --del tao-costrading\nfi\n%endif\n\n# ---------------- tao-rtevent ----------------\n\n%preun -n tao-rtevent\n\n%if 0%{?suse_version}\n%stop_on_removal tao-rtevent\n%else\nif [ $1 = 0 ]; then\n    /sbin/service tao-rtevent stop > /dev/null 2>&1\n    /sbin/chkconfig --del tao-rtevent\nfi\n%endif\n\n# ---------------- tao-cosconcurrency ----------------\n\n%preun -n tao-cosconcurrency\n\n%if 0%{?suse_version}\n%stop_on_removal tao-cosconcurrency\n%else\nif [ $1 = 0 ]; then\n    /sbin/service tao-cosconcurrency stop > /dev/null 2>&1\n    /sbin/chkconfig --del tao-cosconcurrency\nfi\n%endif\n\n%endif\n\n# ================================================================\n# post uninstall\n# ================================================================\n\n# ---------------- ace ----------------\n\n%postun -n ace\n/sbin/ldconfig\n\n# ---------------- ace-xml ----------------\n\n%postun -n ace-xml\n/sbin/ldconfig\n\n# ---------------- ace-kokyu ----------------\n\n%postun -n ace-kokyu\n/sbin/ldconfig\n\n# ---------------- ace-foxreactor ----------------\n\n%if %{?_with_fox:1}%{!?_with_fox:0}\n%if 0%{?have_fox} == 1\n%postun -n ace-foxreactor\n/sbin/ldconfig\n%endif\n%endif\n\n# ---------------- ace-flreactor ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%postun -n ace-flreactor\n/sbin/ldconfig\n%endif\n\n# ---------------- ace-qtreactor ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%postun -n ace-qtreactor\n/sbin/ldconfig\n%endif\n\n# ---------------- ace-tkreactor ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%postun -n ace-tkreactor\n/sbin/ldconfig\n%endif\n\n# ---------------- ace-xtreactor ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%postun -n ace-xtreactor\n/sbin/ldconfig\n%endif\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n\n# ---------------- tao ----------------\n\n%postun -n tao\n/sbin/ldconfig\n\n# ---------------- tao-devel ----------------\n\n%postun -n tao-devel\n/sbin/ldconfig\n\n# ---------------- tao-utils ----------------\n\n%postun -n tao-utils\n/sbin/ldconfig\n\n# ---------------- tao-cosnaming ----------------\n\n%postun -n tao-cosnaming\n\n%if 0%{?suse_version}\n%restart_on_update tao-cosnaming\n%insserv_cleanup\n%else\nif [ \"$1\" -ge \"1\" ]; then\n    /sbin/service tao-cosnaming %{cond_restart} > /dev/null 2>&1\nfi\n%endif\n\n# ---------------- tao-cosevent ----------------\n\n%postun -n tao-cosevent\n\n%if 0%{?suse_version}\n%restart_on_update tao-cosevent\n%insserv_cleanup\n%else\nif [ \"$1\" -ge \"1\" ]; then\n    /sbin/service tao-cosevent %{cond_restart} > /dev/null 2>&1\nfi\n%endif\n\n# ---------------- tao-cosnotification ----------------\n\n%postun -n tao-cosnotification\n\n%if 0%{?suse_version}\n%restart_on_update tao-cosnotification\n%insserv_cleanup\n%else\nif [ \"$1\" -ge \"1\" ]; then\n    /sbin/service tao-cosnotification %{cond_restart} > /dev/null 2>&1\nfi\n%endif\n\n# ---------------- tao-costrading ----------------\n\n%postun -n tao-costrading\n\n%if 0%{?suse_version}\n%restart_on_update tao-costrading\n%insserv_cleanup\n%else\nif [ \"$1\" -ge \"1\" ]; then\n    /sbin/service tao-costrading %{cond_restart} > /dev/null 2>&1\nfi\n%endif\n\n# ---------------- tao-rtevent ----------------\n\n%postun -n tao-rtevent\n\n%if 0%{?suse_version}\n%restart_on_update tao-rtevent\n%insserv_cleanup\n%else\nif [ \"$1\" -ge \"1\" ]; then\n    /sbin/service tao-rtevent %{cond_restart} > /dev/null 2>&1\nfi\n%endif\n\n# ---------------- tao-cosconcurrency ----------------\n\n%postun -n tao-cosconcurrency\n\n%if 0%{?suse_version}\n%restart_on_update tao-cosconcurrency\n%insserv_cleanup\n%else\nif [ \"$1\" -ge \"1\" ]; then\n    /sbin/service tao-cosconcurrency %{cond_restart} > /dev/null 2>&1\nfi\n%endif\n\n# ---------------- tao-flresource ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%postun -n tao-flresource\n/sbin/ldconfig\n%endif\n\n# ---------------- tao-qtresource ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%postun -n tao-qtresource\n/sbin/ldconfig\n%endif\n\n# ---------------- tao-tkresource ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%postun -n tao-tkresource\n/sbin/ldconfig\n%endif\n\n# ---------------- tao-xtresource ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%postun -n tao-xtresource\n/sbin/ldconfig\n%endif\n\n%endif\n\n# ================================================================\n# files\n# ================================================================\n\n# ---------------- ace ----------------\n\n%files -n ace\n%defattr(-,root,root,-)\n%{_libdir}/libACE.so.%{ACEVERSO}\n%{_libdir}/libACE_ETCL_Parser.so.%{ACEVERSO}\n%{_libdir}/libACE_ETCL.so.%{ACEVERSO}\n%{_libdir}/libACE_HTBP.so.%{ACEVERSO}\n%{_libdir}/libACE_Monitor_Control.so.%{ACEVERSO}\n%{_libdir}/libACE_RMCast.so.%{ACEVERSO}\n%{_libdir}/libACE_TMCast.so.%{ACEVERSO}\n%{_libdir}/libACE_SSL.so.%{ACEVERSO}\n%{_libdir}/libACE_INet.so.%{ACEVERSO}\n%{_libdir}/libACE_INet_SSL.so.%{ACEVERSO}\n%{_libdir}/libACE_Compression.so.%{ACEVERSO}\n%{_libdir}/libACE_RLECompression.so.%{ACEVERSO}\n\n%doc ACE-INSTALL.html\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc THANKS\n%doc VERSION\n\n# ---------------- ace-devel ----------------\n\n%files -n ace-devel -f ace-devel-files.list\n%defattr(-,root,root,-)\n%{_libdir}/libACE_HTBP.so\n%{_libdir}/libACE_SSL.so\n%dir %{_datadir}/ace\n%{_datadir}/ace/include\n%{_datadir}/ace/bin\n%{_datadir}/ace/ace\n%{_datadir}/ace/lib\n%config %{_sysconfdir}/profile.d/ace-devel.sh\n\n%if %{?_with_fox:1}%{!?_with_fox:0}\n%exclude %{_includedir}/ace/FoxReactor/FoxReactor.h\n%exclude %{_includedir}/ace/FoxReactor/ACE_FoxReactor_export.h\n%endif\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%exclude %{_includedir}/ace/FlReactor/FlReactor.h\n%exclude %{_includedir}/ace/FlReactor/ACE_FlReactor_export.h\n%endif\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%exclude %{_includedir}/ace/QtReactor/QtReactor.h\n%exclude %{_includedir}/ace/QtReactor/ACE_QtReactor_export.h\n%endif\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%exclude %{_includedir}/ace/TkReactor/TkReactor.h\n%exclude %{_includedir}/ace/TkReactor/ACE_TkReactor_export.h\n%endif\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%exclude %{_includedir}/ace/XtReactor/XtReactor.h\n%exclude %{_includedir}/ace/XtReactor/ACE_XtReactor_export.h\n%endif\n%exclude %{_libdir}/libACEXML*.so\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n# ---------------- ace-xml ----------------\n\n%files -n ace-xml\n%defattr(-,root,root,-)\n%{_libdir}/libACEXML*.so.%{ACEVERSO}\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n# ---------------- ace-gperf ----------------\n\n%files -n ace-gperf\n%defattr(-,root,root,-)\n%{_bindir}/ace_gperf\n%attr(0644,root,root) %{_mandir}/man1/ace_gperf.1%{_extension}\n%attr(0644,root,root) %{_infodir}/ace_gperf.info%{_extension}\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n# ---------------- ace-xml-devel ----------------\n\n%files -n ace-xml-devel -f acexml-headers.list\n%defattr(-,root,root,-)\n%{_libdir}/libACEXML*.so\n\n# These get missed by the automatic list generator because they\n# contain no immediate files.\n%dir %{_includedir}/ACEXML/parser\n%dir %{_includedir}/ACEXML\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n# ---------------- ace-kokyu ----------------\n\n%files -n ace-kokyu\n%defattr(-,root,root,-)\n%{_libdir}/libKokyu.so.%{ACEVERSO}\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n# ---------------- ace-kokyu-devel ----------------\n\n%files -n ace-kokyu-devel -f kokyu-headers.list\n%defattr(-,root,root,-)\n%{_libdir}/libKokyu.so\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n# ---------------- ace-foxreactor ----------------\n\n%if 0%{?have_fox} == 1\n%if %{?_with_fox:1}%{!?_with_fox:0}\n%files -n ace-foxreactor\n%defattr(-,root,root,-)\n%{_libdir}/libACE_FoxReactor.so.%{ACEVERSO}\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n%endif\n%endif\n# ---------------- ace-flreactor ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n\n%files -n ace-flreactor\n%defattr(-,root,root,-)\n%{_libdir}/libACE_FlReactor.so.%{ACEVERSO}\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n%endif\n\n# ---------------- ace-flreactor-devel ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n\n%files -n ace-flreactor-devel\n%defattr(-,root,root,-)\n%dir %{_includedir}/ace/FlReactor\n%{_libdir}/libACE_FlReactor.so\n%{_includedir}/ace/FlReactor/FlReactor.h\n%{_includedir}/ace/FlReactor/ACE_FlReactor_export.h\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n%endif\n\n# ---------------- ace-qtreactor ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n\n%files -n ace-qtreactor\n%defattr(-,root,root,-)\n%{_libdir}/libACE_QtReactor.so.%{ACEVERSO}\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n%endif\n\n# ---------------- ace-qtreactor-devel ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n\n%files -n ace-qtreactor-devel\n%defattr(-,root,root,-)\n%{_libdir}/libACE_QtReactor.so\n%dir %{_includedir}/ace/QtReactor\n%{_includedir}/ace/QtReactor/QtReactor.h\n%{_includedir}/ace/QtReactor/ACE_QtReactor_export.h\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n%endif\n\n# ---------------- ace-tkreactor ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n\n%files -n ace-tkreactor\n%defattr(-,root,root,-)\n%{_libdir}/libACE_TkReactor.so.%{ACEVERSO}\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n%endif\n\n# ---------------- ace-tkreactor-devel ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n\n%files -n ace-tkreactor-devel\n%defattr(-,root,root,-)\n%{_libdir}/libACE_TkReactor.so\n%dir %{_includedir}/ace/TkReactor\n%{_includedir}/ace/TkReactor/TkReactor.h\n%{_includedir}/ace/TkReactor/ACE_TkReactor_export.h\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n%endif\n\n# ---------------- ace-xtreactor ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n\n%files -n ace-xtreactor\n%defattr(-,root,root,-)\n%{_libdir}/libACE_XtReactor.so.%{ACEVERSO}\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n%endif\n\n# ---------------- ace-xtreactor-devel ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n\n%files -n ace-xtreactor-devel\n%defattr(-,root,root,-)\n%{_libdir}/libACE_XtReactor.so\n%dir %{_includedir}/ace/XtReactor\n%{_includedir}/ace/XtReactor/XtReactor.h\n%{_includedir}/ace/XtReactor/ACE_XtReactor_export.h\n\n%doc AUTHORS\n%doc COPYING\n%doc PROBLEM-REPORT-FORM\n%doc README\n%doc VERSION\n\n%endif\n\n# ---------------- mpc ----------------\n\n%files -n mpc\n%defattr(-,root,root,-)\n%{_datadir}/mpc\n%config %{_sysconfdir}/profile.d/mpc.sh\n%{_bindir}/mpc.pl\n%{_bindir}/mwc.pl\n\n# ---------------- tao ----------------\n\n%if 0%{?_with_tao:1}%{?_without_tao:0}\n\n# NOTE - Some of the TAO service modules need to be found by dlopen at\n# runtime.  Currently this means these specific .so files need to be\n# shipped in the runtime package instead of the devel package.\n\n%files -n tao -f tao-svc-so.list\n%defattr(-,root,root,-)\n%{_datadir}/tao\n%exclude %{_datadir}/tao/MPC\n%exclude %{_datadir}/tao/tao\n%exclude %{_datadir}/tao/orbsvcs\n\n%{_libdir}/libTAO*.so.%{TAOVERSO}\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%exclude %{_libdir}/libTAO_FlResource.so*\n%endif\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%exclude %{_libdir}/libTAO_QtResource.so*\n%endif\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%exclude %{_libdir}/libTAO_TkResource.so*\n%endif\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%exclude %{_libdir}/libTAO_XtResource.so*\n%endif\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/TAO-INSTALL.html\n%doc TAO/VERSION\n%doc TAO/README\n\n# ---------------- tao-devel ----------------\n\n# NOTE - Some of the TAO service modules need to be found by dlopen() at\n# runtime. Currently this means these specific .so files need to be\n# shipped in the runtime package instead of the development package.\n\n%files -n tao-devel -f tao-devel-files.list\n%defattr(-,root,root,-)\n%config %{_sysconfdir}/profile.d/tao-devel.sh\n\n%{_bindir}/tao_imr\n%{_bindir}/tao_ifr\n%{_datadir}/tao/MPC\n%{_bindir}/tao_idl\n%attr(0644,root,root) %doc %{_mandir}/man1/tao_idl.1%{_extension}\n%{_datadir}/tao/tao\n%{_datadir}/tao/orbsvcs\n\n# These get missed by the automatic list generator because they\n# contain no immediate files.\n%dir %{_includedir}/orbsvcs/FtRtEvent\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n%exclude %{_includedir}/tao/FlResource/FlResource_Factory.h\n%exclude %{_includedir}/tao/FlResource/FlResource_Loader.h\n%exclude %{_includedir}/tao/FlResource/TAO_FlResource_Export.h\n%exclude %{_libdir}/libTAO_FlResource.so\n%endif\n%if %{?_with_qt:1}%{!?_with_qt:0}\n%exclude %{_includedir}/tao/QtResource/QtResource_Factory.h\n%exclude %{_includedir}/tao/QtResource/QtResource_Loader.h\n%exclude %{_includedir}/tao/QtResource/TAO_QtResource_Export.h\n%exclude %{_libdir}/libTAO_QtResource.so\n%endif\n%if %{?_with_tk:1}%{!?_with_tk:0}\n%exclude %{_includedir}/tao/TkResource/TkResource_Factory.h\n%exclude %{_includedir}/tao/TkResource/TkResource_Loader.h\n%exclude %{_includedir}/tao/TkResource/TAO_TkResource_Export.h\n%exclude %{_libdir}/libTAO_TkResource.so\n%endif\n%if %{?_with_xt:1}%{!?_with_xt:0}\n%exclude %{_includedir}/tao/XtResource/XtResource_Factory.h\n%exclude %{_includedir}/tao/XtResource/XtResource_Loader.h\n%exclude %{_includedir}/tao/XtResource/TAO_XtResource_Export.h\n%exclude %{_libdir}/libTAO_XtResource.so\n%endif\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n# ---------------- tao-utils ----------------\n\n%files -n tao-utils\n%defattr(-,root,root,-)\n\n%{_bindir}/tao_catior\n%{_bindir}/tao_nsadd\n%{_bindir}/tao_nsdel\n%{_bindir}/tao_nslist\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n%doc TAO/utils/catior/README.catior\n%doc TAO/utils/nslist/README.nslist\n\n# ---------------- tao-cosnaming ----------------\n\n%files -n tao-cosnaming\n%defattr(-,root,root,-)\n\n%dir %{_sysconfdir}/tao\n\n%{_sbindir}/tao-cosnaming\n\n%if 0%{?suse_version}\n%{_sysconfdir}/init.d/tao-cosnaming\n%{_sbindir}/rctao-cosnaming\n%{_sysconfdir}/tao/tao-cosnaming\n%else\n%{_sysconfdir}/rc.d/init.d/tao-cosnaming\n%config(noreplace) %{_sysconfdir}/tao/tao-cosnaming.opt\n%endif\n\n%config(noreplace) %{_sysconfdir}/tao/tao-cosnaming.conf\n%config(noreplace) %{_sysconfdir}/logrotate.d/tao-cosnaming\n%attr(-,tao,tao) %dir %{_localstatedir}/cache/tao\n%attr(0644,tao,tao) %ghost %{_localstatedir}/cache/tao/tao-cosnaming.dat\n%attr(-,tao,tao) %dir %{_localstatedir}/log/tao\n%attr(0644,tao,tao) %ghost %{_localstatedir}/log/tao/tao-cosnaming.log\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n# ---------------- tao-cosevent ----------------\n\n%files -n tao-cosevent\n%defattr(-,root,root,-)\n\n%dir %{_sysconfdir}/tao\n%{_sbindir}/tao-cosevent\n\n%if 0%{?suse_version}\n%{_sysconfdir}/init.d/tao-cosevent\n%{_sbindir}/rctao-cosevent\n%{_sysconfdir}/tao/tao-cosevent\n%else\n%{_sysconfdir}/rc.d/init.d/tao-cosevent\n%config(noreplace) %{_sysconfdir}/tao/tao-cosevent.opt\n%endif\n\n%config(noreplace) %{_sysconfdir}/tao/tao-cosevent.conf\n%config(noreplace) %{_sysconfdir}/logrotate.d/tao-cosevent\n%attr(-,tao,tao) %dir %{_localstatedir}/log/tao\n%attr(0644,tao,tao) %ghost %{_localstatedir}/log/tao/tao-cosevent.log\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n# ---------------- tao-cosnotification ----------------\n\n%files -n tao-cosnotification\n%defattr(-,root,root,-)\n\n%{_sbindir}/tao-cosnotification\n%dir %{_sysconfdir}/tao\n\n%if 0%{?suse_version}\n%{_sysconfdir}/init.d/tao-cosnotification\n%{_sbindir}/rctao-cosnotification\n%{_sysconfdir}/tao/tao-cosnotification\n%else\n%{_sysconfdir}/rc.d/init.d/tao-cosnotification\n%config(noreplace) %{_sysconfdir}/tao/tao-cosnotification.opt\n%endif\n\n%config(noreplace) %{_sysconfdir}/tao/tao-cosnotification.conf\n%config(noreplace) %{_sysconfdir}/logrotate.d/tao-cosnotification\n%attr(-,tao,tao) %dir %{_localstatedir}/log/tao\n%attr(0644,tao,tao) %ghost %{_localstatedir}/log/tao/tao-cosnotification.log\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n# ---------------- tao-costrading ----------------\n\n%files -n tao-costrading\n%defattr(-,root,root,-)\n\n%dir %{_sysconfdir}/tao\n\n%{_sbindir}/tao-costrading\n\n%if 0%{?suse_version}\n%{_sysconfdir}/init.d/tao-costrading\n%{_sbindir}/rctao-costrading\n%{_sysconfdir}/tao/tao-costrading\n%else\n%{_sysconfdir}/rc.d/init.d/tao-costrading\n%config(noreplace) %{_sysconfdir}/tao/tao-costrading.opt\n%endif\n\n%config(noreplace) %{_sysconfdir}/tao/tao-costrading.conf\n%config(noreplace) %{_sysconfdir}/logrotate.d/tao-costrading\n%attr(-,tao,tao) %dir %{_localstatedir}/log/tao\n%attr(0644,tao,tao) %ghost %{_localstatedir}/log/tao/tao-costrading.log\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n# ---------------- tao-rtevent ----------------\n\n%files -n tao-rtevent\n%defattr(-,root,root,-)\n\n%dir %{_sysconfdir}/tao\n%{_sbindir}/tao-rtevent\n\n%if 0%{?suse_version}\n%{_sysconfdir}/init.d/tao-rtevent\n%{_sbindir}/rctao-rtevent\n%{_sysconfdir}/tao/tao-rtevent\n%else\n%{_sysconfdir}/rc.d/init.d/tao-rtevent\n%config(noreplace) %{_sysconfdir}/tao/tao-rtevent.opt\n%endif\n\n%config(noreplace) %{_sysconfdir}/tao/tao-rtevent.conf\n%config(noreplace) %{_sysconfdir}/logrotate.d/tao-rtevent\n%attr(-,tao,tao) %dir %{_localstatedir}/log/tao\n%attr(0644,tao,tao) %ghost %{_localstatedir}/log/tao/tao-rtevent.log\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n# ---------------- tao-cosconcurrency ----------------\n\n%files -n tao-cosconcurrency\n%defattr(-,root,root,-)\n\n%dir %{_sysconfdir}/tao\n%{_sbindir}/tao-cosconcurrency\n\n%if 0%{?suse_version}\n%{_sysconfdir}/init.d/tao-cosconcurrency\n%{_sbindir}/rctao-cosconcurrency\n%{_sysconfdir}/tao/tao-cosconcurrency\n%else\n%{_sysconfdir}/rc.d/init.d/tao-cosconcurrency\n%config(noreplace) %{_sysconfdir}/tao/tao-cosconcurrency.opt\n%endif\n\n%config(noreplace) %{_sysconfdir}/tao/tao-cosconcurrency.conf\n%config(noreplace) %{_sysconfdir}/logrotate.d/tao-cosconcurrency\n%attr(-,tao,tao) %dir %{_localstatedir}/log/tao\n%attr(0644,tao,tao) %ghost %{_localstatedir}/log/tao/tao-cosconcurrency.log\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n# ---------------- tao-flresource ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n\n%files -n tao-flresource\n%defattr(-,root,root,-)\n%{_libdir}/libTAO_FlResource.so.%{TAOVERSO}\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n%endif\n\n# ---------------- tao-flresource-devel ----------------\n\n%if %{?_with_fl:1}%{!?_with_fl:0}\n\n%files -n tao-flresource-devel\n%defattr(-,root,root,-)\n%{_libdir}/libTAO_FlResource.so\n%dir %{_includedir}/tao\n%{_includedir}/tao/FlResource/FlResource_Factory.h\n%{_includedir}/tao/FlResource/FlResource_Loader.h\n%{_includedir}/tao/FlResource/TAO_FlResource_Export.h\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n%endif\n\n# ---------------- tao-qtresource ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n\n%files -n tao-qtresource\n%defattr(-,root,root,-)\n%{_libdir}/libTAO_QtResource.so.%{TAOVERSO}\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n%endif\n\n# ---------------- tao-qtresource-devel ----------------\n\n%if %{?_with_qt:1}%{!?_with_qt:0}\n\n%files -n tao-qtresource-devel\n%defattr(-,root,root,-)\n%{_libdir}/libTAO_QtResource.so\n%dir %{_includedir}/tao\n%{_includedir}/tao/QtResource/QtResource_Factory.h\n%{_includedir}/tao/QtResource/QtResource_Loader.h\n%{_includedir}/tao/QtResource/TAO_QtResource_Export.h\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n%endif\n\n# ---------------- tao-tkresource ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n\n%files -n tao-tkresource\n%defattr(-,root,root,-)\n%{_libdir}/libTAO_TkResource.so.%{TAOVERSO}\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n%endif\n\n# ---------------- tao-tkresource-devel ----------------\n\n%if %{?_with_tk:1}%{!?_with_tk:0}\n\n%files -n tao-tkresource-devel\n%defattr(-,root,root,-)\n%{_libdir}/libTAO_TkResource.so\n%dir %{_includedir}/tao\n%{_includedir}/tao/TkResource/TkResource_Factory.h\n%{_includedir}/tao/TkResource/TkResource_Loader.h\n%{_includedir}/tao/TkResource/TAO_TkResource_Export.h\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n%endif\n\n# ---------------- tao-xtresource ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n\n%files -n tao-xtresource\n%defattr(-,root,root,-)\n%{_libdir}/libTAO_XtResource.so.%{TAOVERSO}\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n%endif\n\n# ---------------- tao-xtresource-devel ----------------\n\n%if %{?_with_xt:1}%{!?_with_xt:0}\n\n%files -n tao-xtresource-devel\n%defattr(-,root,root,-)\n%{_libdir}/libTAO_XtResource.so\n%dir %{_includedir}/tao\n%{_includedir}/tao/XtResource/XtResource_Factory.h\n%{_includedir}/tao/XtResource/XtResource_Loader.h\n%{_includedir}/tao/XtResource/TAO_XtResource_Export.h\n\n%doc TAO/COPYING\n%doc TAO/PROBLEM-REPORT-FORM\n%doc TAO/VERSION\n%doc TAO/README\n\n%endif\n\n%endif\n\n%changelog\n* Fri Jan 31 2014 Steve Huston <shuston@riverace.com> 6.2.5\n- Added rpmbuild options \"--with tao\" and \"--without tao\"; defaults to 'with'.\n  Allows building ACE only (--without tao)\n\n* Thu Aug 11 2011 Thomas Lockhart <lockhart@fourpalms.org> 6.0.3-54\n- Parameterize code inlining. Defaults to not inlining which was the previous behavior.\n- Implement the rpmbuild options \"--with inline\" and \"--without inline\".\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/include/makeinclude/platform_macosx_jaguar.GNU": "# -*- Makefile -*-\n\n# support for Mac OS X 10.2 (jaguar), 10.3 (panther)\n# Note: /sw/lib & /sw/include are inserted for the convience of Fink\n#       users. Non-Fink users should simply create these directories to\n#       eliminate the warnings.\n\nthreads ?= 1\ndebug ?= 1\noptimize ?= 0\nversioned_so ?= 0\nwith_ld = macosx\n\nCC              = gcc\nCXX             = g++\nCFLAGS          += -Wno-long-double -I/sw/include\n\nDCFLAGS         += -g\nDLD             = libtool\nLD              = $(CXX)\nLDFLAGS\t\t+= -L/sw/lib -flat_namespace -undefined warning\nLIBS            += -lcc_dynamic -lstdc++ -lSystem\n\n## dlcompat package (not part of base Darwin) is needed for dlopen() on 10.2.\n## Fink installer puts libraries in /sw/lib and headers in /sw/include\n## In order to install dlcompat do the following:\n##   - download fink from http://fink.sf.net\n##   - type:\n##        fink install dlcompat\n## 10.3 does not need this package.\nLIBS            += -ldl\n# 10.3 cannot do -03, this could be version dependent (probably on gcc)\nOCFLAGS         += -O2\nRANLIB          = ranlib\nSOEXT\t\t= dylib\nSOFLAGS += -dynamic\nSOBUILD = -o $(VSHDIR)$*.dylib $<\n\n# Test for template instantiation, add to SOFLAGS if versioned_so set,\n# add -E to LDFLAGS if using GNU ld\n#\ninclude $(ACE_ROOT)/include/makeinclude/platform_g++_common.GNU\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/DLL_Manager.h": "// -*- C++ -*-\n\n//=============================================================================\n/**\n *  @file    DLL_Manager.h\n *\n *  @author Don Hinton <dhinton@ieee.org>\n */\n//=============================================================================\n\n#ifndef ACE_DLL_MANAGER_H\n#define ACE_DLL_MANAGER_H\n#include /**/ \"ace/pre.h\"\n\n#include /**/ \"ace/ACE_export.h\"\n\n#if !defined (ACE_LACKS_PRAGMA_ONCE)\n# pragma once\n#endif /* ACE_LACKS_PRAGMA_ONCE */\n\n#include \"ace/Containers_T.h\"\n#include \"ace/SString.h\"\n#include \"ace/os_include/os_dlfcn.h\"\n\n#if defined (ACE_MT_SAFE) && (ACE_MT_SAFE != 0)\n#  include \"ace/Thread_Mutex.h\"\n#endif /* ACE_MT_SAFE */\n\n#define ACE_DEFAULT_DLL_MANAGER_SIZE 1024\n\n\nACE_BEGIN_VERSIONED_NAMESPACE_DECL\n\n/**\n * @class ACE_DLL_Handle\n *\n * @brief Provides an abstract interface for handling various DLL\n * operations.\n *\n * This class is an wrapper over the various methods for utilizing a\n * dynamically linked library (DLL), which is called a shared library\n * on some platforms.  It is refcounted and managed by\n * ACE_DLL_Manager, so there will only be a single instance of this\n * class for each dll loaded, no matter how many instances of ACE_DLL\n * an application has open.  Operations open(), close(), and symbol()\n * have been implemented to help opening/closing and extracting symbol\n * information from a DLL, respectively.\n *\n * Most of this class came from the original ACE_DLL class.  ACE_DLL\n * is now just an interface that passed all it's calls either directly\n * or via ACE_DLL_Manager to this class for execution.\n */\nclass ACE_Export ACE_DLL_Handle\n{\npublic:\n\n  /// Error stack. Fixed size should suffice. Ignores any errors exceeding the size.\n  typedef ACE_Fixed_Stack < ACE_TString, 10 >  ERROR_STACK;\n\n  /// Default construtor.\n  ACE_DLL_Handle (void);\n\n  /// Destructor.\n  ~ACE_DLL_Handle (void);\n\n  /// Returns the name of the shared library (without prefixes or suffixes).\n  const ACE_TCHAR *dll_name () const;\n\n  /**\n   * This method opens and dynamically links a library/DLL.\n   * @param dll_name  The filename or path of the DLL to load. ACE will\n   *        attempt to apply the platform's standard library/DLL prefixes\n   *        and suffixes, allowing a simple, unadorned name to be passed\n   *        regardless of platform. The set of name transforms is listed\n   *        below. A @i decorator is a platform's name designator for a debug\n   *        vs release build. For example, on Windows it is usually \"d\".\n   *        @li Prefix + name + decorator + suffix\n   *        @li Prefix + name + suffix\n   *        @li Name + decorator + suffix\n   *        @li Name + suffix\n   *        @li Name\n   *        Note that the transforms with @i decorator will be avoided if\n   *        ACE is built with the @c ACE_DISABLE_DEBUG_DLL_CHECK config macro.\n   *\n   *        @Note There is another mode for locating library/DLL files that\n   *        was used in old versions of ACE. The alternate method builds\n   *        more combinations of pathname by combining the names transforms\n   *        above with locations listed in the platform's standard \"path\"\n   *        locations (e.g., @c LD_LIBRARY_PATH). It can be enabled by building\n   *        ACE with the @c ACE_MUST_HELP_DLOPEN_SEARCH_PATH config macro.\n   *        Use of this option is discouraged since it avoids the standard\n   *        platform search options and security mechanisms.\n   *\n   * @param open_mode  Flags to alter the actions taken when loading the DLL.\n   *        The possible values are:\n   *        @li @c RTLD_LAZY (this the default): loads identifier symbols but\n   *            not the symbols for functions, which are loaded dynamically\n   *            on demand.\n   *        @li @c RTLD_NOW: performs all necessary relocations when\n   *            @a dll_name is first loaded\n   *        @li @c RTLD_GLOBAL: makes symbols available for relocation\n   *            processing of any other DLLs.\n   * @param handle If a value other than @c ACE_INVALID_HANDLE is supplied,\n   *        this object is assigned the specified handle instead of attempting\n   *        to open the specified @a dll_name.\n   * @param errors Optional address of an error stack to collect any errors\n   *        encountered.\n   * @retval -1 On failure\n   * @retval 0 On success.\n   */\n  int open (const ACE_TCHAR *dll_name,\n            int open_mode,\n            ACE_SHLIB_HANDLE handle,\n            ERROR_STACK *errors = 0);\n\n  /// Call to close the DLL object.  If unload = 0, it only decrements\n  /// the refcount, but if unload = 1, then it will actually unload\n  /// the library when the refcount == 0;\n  int close (int unload = 0);\n\n  /// Return the current refcount.\n  sig_atomic_t refcount (void) const;\n\n  /// If @a symbol_name is in the symbol table of the DLL a pointer to\n  /// the @a symbol_name is returned.  Otherwise, returns 0.  Set the\n  /// ignore_errors flag to supress logging errors if symbol_name isn't\n  /// found.  This is nice if you just want to probe a dll to see what's\n  /// available, since missing functions in that case aren't really errors.\n  void *symbol (const ACE_TCHAR *symbol_name, bool ignore_errors = false);\n\n  /// Resolves and returns any error encountered.\n  void *symbol (const ACE_TCHAR *symbol_name, bool ignore_errors,\n                ACE_TString &error);\n\n  /**\n   * Return the handle to the caller.  If @a become_owner is true then\n   * caller assumes ownership of the handle so we decrement the retcount.\n   */\n  ACE_SHLIB_HANDLE get_handle (bool become_owner = false);\n\n  ACE_ALLOC_HOOK_DECLARE;\n\nprivate:\n\n  /// Returns a string explaining why <symbol> or <open>\n  /// failed in @a err.  This is used internal to print out the error to the log,\n  /// but since this object is shared, we can't store or return the error\n  /// to the caller.\n  ACE_TString& error (ACE_TString& err);\n\n  /// Builds array of DLL names to try to dlopen, based on platform\n  /// and configured DLL prefixes/suffixes.\n  /// Returns the array of names to try in try_names.\n  void get_dll_names (const ACE_TCHAR *dll_name,\n                      ACE_Array<ACE_TString> &try_names);\n\n  /// Disallow copying and assignment since we don't handle them.\n  ACE_DLL_Handle (const ACE_DLL_Handle &);\n  void operator= (const ACE_DLL_Handle &);\n\nprivate:\n\n  /// Keep track of how many ACE_DLL objects have a reference to this\n  /// dll.\n  sig_atomic_t refcount_;\n\n  /// Name of the shared library.\n  ACE_TCHAR *dll_name_;\n\n  /// Handle to the actual library loaded by the OS.\n  ACE_SHLIB_HANDLE handle_;\n\n  /// Keeps track of whether or not open() has ever been called.  This\n  /// helps get around problem on Linux, and perhaps other OS's, that\n  /// seg-fault if dlerror() is called before the ld library has been\n  /// initialized by a call to dlopen().\n  static sig_atomic_t open_called_;\n\n#if defined (ACE_MT_SAFE) && (ACE_MT_SAFE != 0)\n  /// Synchronization variable for the MT_SAFE Repository\n  ACE_Thread_Mutex lock_;\n#endif /* ACE_MT_SAFE */\n};\n\nclass ACE_Framework_Repository;\n\n/**\n * @class ACE_DLL_Manager\n *\n * @brief This class is a singleton and serves as a factory and\n * repository for instances of ACE_DLL_Handle.\n *\n * This class is a singleton whose lifetime is managed by the\n * ACE_Framework_Repository.  Although it is normally meant to be\n * used directly only by ACE_DLL, applications can call the unload_policy()\n * methods in order get/set the the dll unload policy.  Unload policies include\n * per_process/per-dll and eager/lazy.  Dlls can export set their own policy\n * by using the ACE_DLL_UNLOAD_POLICY macro found in config-all.h.  If a dll\n * choses to set an unload policy, it will be used when the per-dll policy\n * (the default) is in effect.  If the per-dll policy is in effect and a dll\n * has not chosen to set a policy, the current per-process policy will be\n * used.\n *\n * The following policy macros are provided in config-all.h:\n *\n *  ACE_DLL_UNLOAD_POLICY_PER_PROCESS - Per-process policy that unloads dlls\n *  eagerly.\n *\n *  ACE_DLL_UNLOAD_POLICY_PER_DLL - Apply policy on a per-dll basis.  If the\n *  dll doesn't use one of the macros below, the current per-process policy\n *  will be used.\n *\n *  ACE_DLL_UNLOAD_POLICY_LAZY - Don't unload dll when refcount reaches\n *  zero, i.e., wait for either an explicit unload request or program exit.\n *\n *  ACE_DLL_UNLOAD_POLICY_DEFAULT - Default policy allows dlls to control\n *  their own destinies, but will unload those that don't make a choice eagerly.\n */\nclass ACE_Export ACE_DLL_Manager\n{\npublic:\n  friend class ACE_Framework_Repository;\n  friend class ACE_Object_Manager;\n\n  enum\n  {\n    DEFAULT_SIZE = ACE_DEFAULT_DLL_MANAGER_SIZE\n  };\n\n  /// Return a unique instance\n  static ACE_DLL_Manager *instance (int size = ACE_DLL_Manager::DEFAULT_SIZE);\n\n  /// Factory for ACE_DLL_Handle objects.  If one already exits,\n  /// its refcount is incremented.\n  ACE_DLL_Handle *open_dll (const ACE_TCHAR *dll_name,\n                            int openmode,\n                            ACE_SHLIB_HANDLE handle,\n                            ACE_DLL_Handle::ERROR_STACK *errors = 0);\n\n  /// Close the underlying dll.  Decrements the refcount.\n  int close_dll (const ACE_TCHAR *dll_name);\n\n  /// Returns the current per-process UNLOAD_POLICY.\n  u_long unload_policy (void) const;\n\n  /// Set the per-process UNLOAD_POLICY.  If the policy is changed from\n  /// LAZY to EAGER, then it will also unload any dlls with zero\n  /// refcounts.\n  void unload_policy (u_long unload_policy);\n\n  ACE_ALLOC_HOOK_DECLARE;\n\nprotected:\n\n  /// Default constructor.\n  ACE_DLL_Manager (int size = ACE_DLL_Manager::DEFAULT_SIZE);\n\n  /// Destructor.\n  ~ACE_DLL_Manager (void);\n\n  /// Allocate handle_vector_.\n  int open (int size);\n\n  /// Close all open dlls and deallocate memory.\n  int close (void);\n\n  /// Find dll in handle_vector_.\n  ACE_DLL_Handle *find_dll (const ACE_TCHAR *dll_name) const;\n\n  /// Applies strategy for unloading dll.\n  int unload_dll (ACE_DLL_Handle *dll_handle, int force_unload = 0);\n\nprivate:\n\n  /// Close the singleton instance.\n  static void close_singleton (void);\n\n  /// Disallow copying and assignment since we don't handle these.\n  ACE_DLL_Manager (const ACE_DLL_Manager &);\n  void operator= (const ACE_DLL_Manager &);\n\nprivate:\n\n  /// Vector containing all loaded handle objects.\n  ACE_DLL_Handle **handle_vector_;\n\n  /// Current number of handles.\n  int current_size_;\n\n  /// Maximum number of handles.\n  int total_size_;\n\n  /// Unload strategy.\n  u_long unload_policy_;\n\n  /// Pointer to a process-wide ACE_DLL_Manager.\n  static ACE_DLL_Manager *instance_;\n\n#if defined (ACE_MT_SAFE) && (ACE_MT_SAFE != 0)\n  /// Synchronization variable for the MT_SAFE Repository\n  ACE_Thread_Mutex lock_;\n#endif /* ACE_MT_SAFE */\n\n};\n\nACE_END_VERSIONED_NAMESPACE_DECL\n\n#include /**/ \"ace/post.h\"\n#endif /* ACE_DLL_MANAGER_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/Strategies_T.cpp": "#ifndef ACE_STRATEGIES_T_CPP\n#define ACE_STRATEGIES_T_CPP\n\n#include \"ace/Strategies_T.h\"\n\n#if !defined (ACE_LACKS_PRAGMA_ONCE)\n# pragma once\n#endif /* ACE_LACKS_PRAGMA_ONCE */\n\n#include \"ace/Service_Repository.h\"\n#include \"ace/Service_Types.h\"\n#include \"ace/Thread_Manager.h\"\n#include \"ace/WFMO_Reactor.h\"\n#include \"ace/ACE.h\"\n#include \"ace/OS_NS_dlfcn.h\"\n#include \"ace/OS_NS_string.h\"\n#include \"ace/OS_Errno.h\"\n#include \"ace/Svc_Handler.h\"\n#if defined (ACE_OPENVMS)\n# include \"ace/Lib_Find.h\"\n#endif\n\n#if !defined (__ACE_INLINE__)\n#include \"ace/Strategies_T.inl\"\n#endif /* __ACE_INLINE__ */\n\nACE_BEGIN_VERSIONED_NAMESPACE_DECL\n\ntemplate<class SVC_HANDLER>\nACE_Recycling_Strategy<SVC_HANDLER>::~ACE_Recycling_Strategy (void)\n{\n}\n\ntemplate<class SVC_HANDLER> int\nACE_Recycling_Strategy<SVC_HANDLER>::assign_recycler (SVC_HANDLER *svc_handler,\n                                                      ACE_Connection_Recycling_Strategy *recycler,\n                                                      const void *recycling_act)\n{\n  svc_handler->recycler (recycler, recycling_act);\n  return 0;\n}\n\ntemplate<class SVC_HANDLER> int\nACE_Recycling_Strategy<SVC_HANDLER>::prepare_for_recycling (SVC_HANDLER *svc_handler)\n{\n  return svc_handler->recycle ();\n}\n\ntemplate <class SVC_HANDLER>\nACE_Singleton_Strategy<SVC_HANDLER>::~ACE_Singleton_Strategy (void)\n{\n  ACE_TRACE (\"ACE_Singleton_Strategy<SVC_HANDLER>::~ACE_Singleton_Strategy\");\n  if (this->delete_svc_handler_)\n    delete this->svc_handler_;\n}\n\n// Create a Singleton SVC_HANDLER by always returning the same\n// SVC_HANDLER.\n\ntemplate <class SVC_HANDLER> int\nACE_Singleton_Strategy<SVC_HANDLER>::make_svc_handler (SVC_HANDLER *&sh)\n{\n  ACE_TRACE (\"ACE_Singleton_Strategy<SVC_HANDLER>::make_svc_handler\");\n  sh = this->svc_handler_;\n  return 0;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Singleton_Strategy<SVC_HANDLER>::open (SVC_HANDLER *sh,\n                                           ACE_Thread_Manager *)\n{\n  ACE_TRACE (\"ACE_Singleton_Strategy<SVC_HANDLER>::open\");\n\n  if (this->delete_svc_handler_)\n    delete this->svc_handler_;\n\n  // If <sh> is NULL then create a new <SVC_HANDLER>.\n  if (sh == 0)\n    {\n      ACE_NEW_RETURN (this->svc_handler_,\n                      SVC_HANDLER,\n                      -1);\n      this->delete_svc_handler_ = true;\n    }\n  else\n    {\n      this->svc_handler_ = sh;\n      this->delete_svc_handler_ = false;\n    }\n\n  return 0;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_DLL_Strategy<SVC_HANDLER>::open (const ACE_TCHAR dll_name[],\n                                     const ACE_TCHAR factory_function[],\n                                     const ACE_TCHAR svc_name[],\n                                     ACE_Service_Repository *svc_rep,\n                                     ACE_Thread_Manager *thr_mgr)\n{\n  ACE_TRACE (\"ACE_DLL_Strategy<SVC_HANDLER>::open\");\n  this->inherited::open (thr_mgr);\n  ACE_OS::strcpy (this->dll_name_, dll_name);\n  ACE_OS::strcpy (this->factory_function_, factory_function);\n  ACE_OS::strcpy (this->svc_name_, svc_name);\n  this->svc_rep_ = svc_rep;\n  return 0;\n}\n\n// Create a SVC_HANDLER by dynamically linking it from a DLL.\n\ntemplate <class SVC_HANDLER> int\nACE_DLL_Strategy<SVC_HANDLER>::make_svc_handler (SVC_HANDLER *&sh)\n{\n  ACE_TRACE (\"ACE_DLL_Strategy<SVC_HANDLER>::make_svc_handler\");\n\n  // Open the shared library.\n  ACE_SHLIB_HANDLE handle = ACE_OS::dlopen (this->dll_name_);\n\n  // Extract the factory function.\n#if defined (ACE_OPENVMS)\n  SVC_HANDLER *(*factory)(void) =\n    (SVC_HANDLER *(*)(void)) ACE::ldsymbol (handle,\n                                            this->factory_function_);\n#else\n  SVC_HANDLER *(*factory)(void) =\n    (SVC_HANDLER *(*)(void)) ACE_OS::dlsym (handle,\n                                            this->factory_function_);\n#endif\n\n  // Call the factory function to obtain the new SVC_Handler (should\n  // use RTTI here when it becomes available...)\n  SVC_HANDLER *svc_handler = 0;\n\n  ACE_ALLOCATOR_RETURN (svc_handler, (*factory)(), -1);\n\n  if (svc_handler != 0)\n    {\n      // Create an ACE_Service_Type containing the SVC_Handler and\n      // insert into this->svc_rep_;\n\n      ACE_Service_Type_Impl *stp = 0;\n      ACE_NEW_RETURN (stp,\n                      ACE_Service_Object_Type (svc_handler,\n                                               this->svc_name_),\n                      -1);\n\n      ACE_Service_Type *srp = 0;\n\n      ACE_NEW_RETURN (srp,\n                      ACE_Service_Type (this->svc_name_,\n                                        stp,\n                                        handle,\n                                        1),\n                      -1);\n      if (srp == 0)\n        {\n          delete stp;\n          errno = ENOMEM;\n          return -1;\n        }\n\n      if (this->svc_rep_->insert (srp) == -1)\n        return -1;\n      // @@ Somehow, we need to deal with this->thr_mgr_...\n    }\n\n  sh = svc_handler;\n  return 0;\n}\n\n// Default behavior is to activate the SVC_HANDLER by calling it's\n// open() method, which allows the SVC_HANDLER to determine its own\n// concurrency strategy.\n\ntemplate <class SVC_HANDLER> int\nACE_Concurrency_Strategy<SVC_HANDLER>::activate_svc_handler (SVC_HANDLER *svc_handler,\n                                                             void *arg)\n{\n  ACE_TRACE (\"ACE_Concurrency_Strategy<SVC_HANDLER>::activate_svc_handler\");\n\n  int result = 0;\n\n  // See if we should enable non-blocking I/O on the <svc_handler>'s\n  // peer.\n  if (ACE_BIT_ENABLED (this->flags_, ACE_NONBLOCK) != 0)\n    {\n      if (svc_handler->peer ().enable (ACE_NONBLOCK) == -1)\n        result = -1;\n    }\n  // Otherwise, make sure it's disabled by default.\n  else if (svc_handler->peer ().disable (ACE_NONBLOCK) == -1)\n    result = -1;\n\n  if (result == 0 && svc_handler->open (arg) == -1)\n    result = -1;\n\n  if (result == -1)\n    // The connection was already made; so this close is a \"normal\" close\n    // operation.\n    svc_handler->close (NORMAL_CLOSE_OPERATION);\n\n  return result;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Reactive_Strategy<SVC_HANDLER>::open (ACE_Reactor *reactor,\n                                          ACE_Reactor_Mask mask,\n                                          int flags)\n{\n  ACE_TRACE (\"ACE_Reactive_Strategy<SVC_HANDLER>::open\");\n  this->reactor_ = reactor;\n  this->mask_ = mask;\n  this->flags_ = flags;\n\n  // Must have a <Reactor>\n  if (this->reactor_ == 0)\n    return -1;\n  else\n    return 0;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Reactive_Strategy<SVC_HANDLER>::activate_svc_handler (SVC_HANDLER *svc_handler,\n                                                          void *arg)\n{\n  ACE_TRACE (\"ACE_Reactive_Strategy<SVC_HANDLER>::activate_svc_handler\");\n\n  int result = 0;\n\n  if (this->reactor_ == 0)\n    result = -1;\n\n  // Register with the Reactor with the appropriate <mask>.\n  else if (this->reactor_->register_handler (svc_handler, this->mask_) == -1)\n    result = -1;\n\n  // If the implementation of the reactor uses event associations\n  else if (this->reactor_->uses_event_associations ())\n    {\n      // If we don't have non-block on, it won't work with\n      // WFMO_Reactor\n      // This maybe too harsh\n      // if (!ACE_BIT_ENABLED (this->flags_, ACE_NONBLOCK))\n      // goto failure;\n      if (svc_handler->open (arg) != -1)\n        return 0;\n      else\n        result = -1;\n    }\n  else\n    // Call up to our parent to do the SVC_HANDLER initialization.\n    return this->inherited::activate_svc_handler (svc_handler, arg);\n\n  if (result == -1)\n    // The connection was already made; so this close is a \"normal\" close\n    // operation.\n    svc_handler->close (NORMAL_CLOSE_OPERATION);\n\n  return result;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Thread_Strategy<SVC_HANDLER>::open (ACE_Thread_Manager *thr_mgr,\n                                        long thr_flags,\n                                        int n_threads,\n                                        int flags)\n{\n  ACE_TRACE (\"ACE_Thread_Strategy<SVC_HANDLER>::open\");\n  this->thr_mgr_ = thr_mgr;\n  this->n_threads_ = n_threads;\n  this->thr_flags_ = thr_flags;\n  this->flags_ = flags;\n\n  // Must have a thread manager!\n  if (this->thr_mgr_ == 0)\n    ACELIB_ERROR_RETURN ((LM_ERROR,\n                       ACE_TEXT (\"error: must have a non-NULL thread manager\\n\")),\n                      -1);\n  else\n    return 0;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Thread_Strategy<SVC_HANDLER>::activate_svc_handler (SVC_HANDLER *svc_handler,\n                                                        void *arg)\n{\n  ACE_TRACE (\"ACE_Thread_Strategy<SVC_HANDLER>::activate_svc_handler\");\n  // Call up to our parent to do the SVC_HANDLER initialization.\n  if (this->inherited::activate_svc_handler (svc_handler,\n                                             arg) == -1)\n    return -1;\n  else\n    // Turn the <svc_handler> into an active object (if it isn't\n    // already one as a result of the first activation...)\n    return svc_handler->activate (this->thr_flags_,\n                                  this->n_threads_);\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_ACCEPTOR_1> int\nACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::open\n  (const ACE_PEER_ACCEPTOR_ADDR &local_addr, bool reuse_addr)\n{\n  this->reuse_addr_ = reuse_addr;\n  this->peer_acceptor_addr_ = local_addr;\n  if (this->peer_acceptor_.open (local_addr, reuse_addr) == -1)\n    return -1;\n\n  // Set the peer acceptor's handle into non-blocking mode.  This is a\n  // safe-guard against the race condition that can otherwise occur\n  // between the time when <select> indicates that a passive-mode\n  // socket handle is \"ready\" and when we call <accept>.  During this\n  // interval, the client can shutdown the connection, in which case,\n  // the <accept> call can hang!\n  if (this->peer_acceptor_.enable (ACE_NONBLOCK) == -1)\n    return -1;\n\n  return 0;\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_ACCEPTOR_1>\nACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::ACE_Accept_Strategy\n  (const ACE_PEER_ACCEPTOR_ADDR &local_addr,\n   bool reuse_addr,\n   ACE_Reactor *reactor)\n    : reactor_ (reactor)\n{\n  ACE_TRACE (\"ACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::ACE_Accept_Strategy\");\n\n  if (this->open (local_addr, reuse_addr) == -1)\n    ACELIB_ERROR ((LM_ERROR,\n                ACE_TEXT (\"%p\\n\"),\n                ACE_TEXT (\"open\")));\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_ACCEPTOR_1> int\nACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::accept_svc_handler\n  (SVC_HANDLER *svc_handler)\n{\n  ACE_TRACE (\"ACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::accept_svc_handler\");\n\n  // Try to find out if the implementation of the reactor that we are\n  // using requires us to reset the event association for the newly\n  // created handle. This is because the newly created handle will\n  // inherit the properties of the listen handle, including its event\n  // associations.\n  bool reset_new_handle = this->reactor_->uses_event_associations ();\n\n  if (this->peer_acceptor_.accept (svc_handler->peer (), // stream\n                                   0, // remote address\n                                   0, // timeout\n                                   1, // restart\n                                   reset_new_handle  // reset new handler\n                                   ) == -1)\n    {\n      // Ensure that errno is preserved in case the svc_handler\n      // close() method resets it\n      ACE_Errno_Guard error(errno);\n\n      // Close down handler to avoid memory leaks.\n      svc_handler->close (CLOSE_DURING_NEW_CONNECTION);\n\n      return -1;\n    }\n  else\n    return 0;\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_CONNECTOR_1> int\nACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::connect_svc_handler\n(SVC_HANDLER *&sh,\n const ACE_PEER_CONNECTOR_ADDR &remote_addr,\n ACE_Time_Value *timeout,\n const ACE_PEER_CONNECTOR_ADDR &local_addr,\n bool reuse_addr,\n int flags,\n int perms)\n{\n  ACE_TRACE (\"ACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::connect_svc_handler\");\n\n  return this->connector_.connect (sh->peer (),\n                                   remote_addr,\n                                   timeout,\n                                   local_addr,\n                                   reuse_addr,\n                                   flags,\n                                   perms);\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_CONNECTOR_1> int\nACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::connect_svc_handler\n(SVC_HANDLER *&sh,\n SVC_HANDLER *&sh_copy,\n const ACE_PEER_CONNECTOR_ADDR &remote_addr,\n ACE_Time_Value *timeout,\n const ACE_PEER_CONNECTOR_ADDR &local_addr,\n bool reuse_addr,\n int flags,\n int perms)\n{\n  ACE_TRACE (\"ACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::connect_svc_handler\");\n\n  int const result =\n    this->connector_.connect (sh->peer (),\n                              remote_addr,\n                              timeout,\n                              local_addr,\n                              reuse_addr,\n                              flags,\n                              perms);\n  sh_copy = sh;\n  return result;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Process_Strategy<SVC_HANDLER>::open (size_t n_processes,\n                                         ACE_Event_Handler *acceptor,\n                                         ACE_Reactor *reactor,\n                                         int avoid_zombies)\n{\n  ACE_TRACE (\"ACE_Process_Strategy<SVC_HANDLER>::open\");\n  this->n_processes_ = n_processes;\n  this->acceptor_ = acceptor;\n  this->reactor_ = reactor;\n  this->flags_ = avoid_zombies;\n\n  return 0;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Process_Strategy<SVC_HANDLER>::activate_svc_handler (SVC_HANDLER *svc_handler,\n                                                         void *arg)\n{\n  ACE_TRACE (\"ACE_Process_Strategy<SVC_HANDLER>::activate_svc_handler\");\n\n  // If <flags_> is non-0 then we won't create zombies.\n  switch (ACE::fork (ACE_TEXT (\"child\"), this->flags_))\n    {\n    case -1:\n      {\n        ACE_Errno_Guard error (errno);\n        svc_handler->close ();\n      }\n      ACELIB_ERROR_RETURN ((LM_ERROR,\n                         ACE_TEXT (\"%p\\n\"),\n                         ACE_TEXT (\"fork\")),\n                        -1);\n      /* NOTREACHED */\n    case 0: // In child process.\n\n      // Close down the SOCK_Acceptor's handle since we don't need to\n      // keep it open.\n      if (this->acceptor_ != 0)\n        // Ignore the return value here...\n        (void) this->reactor_->remove_handler (this->acceptor_,\n                                               ACE_Event_Handler::ACCEPT_MASK);\n\n      // Call up to our ancestor in the inheritance to do the\n      // SVC_HANDLER initialization.\n      return this->inherited::activate_svc_handler (svc_handler, arg);\n      /* NOTREACHED */\n    default: // In parent process.\n      // We need to close down the <SVC_HANDLER> here because it's\n      // running in the child.\n      svc_handler->close ();\n      return 0;\n    }\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX>\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::ACE_Cached_Connect_Strategy\n(creation_strategy_type *cre_s,\n ACE_Concurrency_Strategy<SVC_HANDLER> *con_s,\n ACE_Recycling_Strategy<SVC_HANDLER> *rec_s,\n MUTEX *lock,\n bool delete_lock)\n  : lock_ (lock),\n    delete_lock_ (delete_lock),\n    reverse_lock_ (0),\n    creation_strategy_ (0),\n    delete_creation_strategy_ (false),\n    concurrency_strategy_ (0),\n    delete_concurrency_strategy_ (false),\n    recycling_strategy_ (0),\n    delete_recycling_strategy_ (false)\n{\n  // Create a new lock if necessary.\n  if (this->lock_ == 0)\n    {\n      ACE_NEW (this->lock_,\n               MUTEX);\n\n      this->delete_lock_ = true;\n    }\n\n  ACE_NEW (this->reverse_lock_,\n           REVERSE_MUTEX (*this->lock_));\n\n  if (this->open (cre_s,\n                  con_s,\n                  rec_s) == -1)\n    ACELIB_ERROR ((LM_ERROR,\n                ACE_TEXT (\"%p\\n\"),\n                ACE_TEXT (\"ACE_Cached_Connect_Strategy::ACE_Cached_Connect_Strategy\")));\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX>\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::~ACE_Cached_Connect_Strategy (void)\n{\n  if (this->delete_lock_)\n    delete this->lock_;\n\n  delete this->reverse_lock_;\n\n  if (this->delete_creation_strategy_)\n    delete this->creation_strategy_;\n  this->delete_creation_strategy_ = false;\n  this->creation_strategy_ = 0;\n\n  if (this->delete_concurrency_strategy_)\n    delete this->concurrency_strategy_;\n  this->delete_concurrency_strategy_ = false;\n  this->concurrency_strategy_ = 0;\n\n  if (this->delete_recycling_strategy_)\n    delete this->recycling_strategy_;\n  this->delete_recycling_strategy_ = false;\n  this->recycling_strategy_ = 0;\n\n  // Close down all cached service handlers.\n  CONNECTION_MAP_ENTRY *entry = 0;\n  for (CONNECTION_MAP_ITERATOR iterator (connection_map_);\n       iterator.next (entry);\n       iterator.advance ())\n    {\n      entry->int_id_->recycler (0, 0);\n      entry->int_id_->close ();\n    }\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::open\n(creation_strategy_type *cre_s,\n ACE_Concurrency_Strategy<SVC_HANDLER> *con_s,\n ACE_Recycling_Strategy<SVC_HANDLER> *rec_s)\n{\n  // Initialize the creation strategy.\n\n  // First we decide if we need to clean up.\n  if (this->creation_strategy_ != 0 &&\n      this->delete_creation_strategy_ &&\n      cre_s != 0)\n    {\n      delete this->creation_strategy_;\n      this->creation_strategy_ = 0;\n      this->delete_creation_strategy_ = false;\n    }\n\n  if (cre_s != 0)\n    this->creation_strategy_ = cre_s;\n  else if (this->creation_strategy_ == 0)\n    {\n      ACE_NEW_RETURN (this->creation_strategy_,\n                      CREATION_STRATEGY, -1);\n      this->delete_creation_strategy_ = true;\n    }\n\n  // Initialize the concurrency strategy.\n\n  if (this->concurrency_strategy_ != 0 &&\n      this->delete_concurrency_strategy_ &&\n      con_s != 0)\n    {\n      delete this->concurrency_strategy_;\n      this->concurrency_strategy_ = 0;\n      this->delete_concurrency_strategy_ = false;\n    }\n\n  if (con_s != 0)\n    this->concurrency_strategy_ = con_s;\n  else if (this->concurrency_strategy_ == 0)\n    {\n      ACE_NEW_RETURN (this->concurrency_strategy_,\n                      CONCURRENCY_STRATEGY, -1);\n      this->delete_concurrency_strategy_ = true;\n    }\n\n  // Initialize the recycling strategy.\n\n  if (this->recycling_strategy_ != 0 &&\n      this->delete_recycling_strategy_ &&\n      rec_s != 0)\n    {\n      delete this->recycling_strategy_;\n      this->recycling_strategy_ = 0;\n      this->delete_recycling_strategy_ = false;\n    }\n\n  if (rec_s != 0)\n    this->recycling_strategy_ = rec_s;\n  else if (this->recycling_strategy_ == 0)\n    {\n      ACE_NEW_RETURN (this->recycling_strategy_,\n                      RECYCLING_STRATEGY, -1);\n      this->delete_recycling_strategy_ = true;\n    }\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::make_svc_handler\n  (SVC_HANDLER *&sh)\n{\n  return this->creation_strategy_->make_svc_handler (sh);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::activate_svc_handler\n  (SVC_HANDLER *svc_handler)\n{\n  return this->concurrency_strategy_->activate_svc_handler (svc_handler);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::assign_recycler\n  (SVC_HANDLER *svc_handler,\n   ACE_Connection_Recycling_Strategy *recycler,\n   const void *recycling_act)\n{\n  return this->recycling_strategy_->assign_recycler (svc_handler,\n                                                     recycler,\n                                                     recycling_act);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::prepare_for_recycling\n  (SVC_HANDLER *svc_handler)\n{\n  return this->recycling_strategy_->prepare_for_recycling (svc_handler);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::check_hint_i\n(SVC_HANDLER *&sh,\n const ACE_PEER_CONNECTOR_ADDR &remote_addr,\n ACE_Time_Value *timeout,\n const ACE_PEER_CONNECTOR_ADDR &local_addr,\n bool reuse_addr,\n int flags,\n int perms,\n CONNECTION_MAP_ENTRY *&entry,\n int &found)\n{\n  ACE_UNUSED_ARG (remote_addr);\n  ACE_UNUSED_ARG (timeout);\n  ACE_UNUSED_ARG (local_addr);\n  ACE_UNUSED_ARG (reuse_addr);\n  ACE_UNUSED_ARG (flags);\n  ACE_UNUSED_ARG (perms);\n\n  found = 0;\n\n  // Get the recycling act for the svc_handler\n  CONNECTION_MAP_ENTRY *possible_entry = (CONNECTION_MAP_ENTRY *) sh->recycling_act ();\n\n  // Check to see if the hint svc_handler has been closed down\n  if (possible_entry->ext_id_.recycle_state () == ACE_RECYCLABLE_CLOSED)\n    {\n      // If close, decrement refcount\n      if (possible_entry->ext_id_.decrement () == 0)\n        {\n          // If refcount goes to zero, close down the svc_handler\n          possible_entry->int_id_->recycler (0, 0);\n          possible_entry->int_id_->close ();\n          this->purge_i (possible_entry);\n        }\n\n      // Hint not successful\n      found = 0;\n\n      // Reset hint\n      sh = 0;\n    }\n\n  // If hint is not closed, see if it is connected to the correct\n  // address and is recyclable\n  else if ((possible_entry->ext_id_.recycle_state () == ACE_RECYCLABLE_IDLE_AND_PURGABLE ||\n            possible_entry->ext_id_.recycle_state () == ACE_RECYCLABLE_IDLE_BUT_NOT_PURGABLE) &&\n           possible_entry->ext_id_.subject () == remote_addr)\n    {\n      // Hint successful\n      found = 1;\n\n      // Tell the <svc_handler> that it should prepare itself for\n      // being recycled.\n      this->prepare_for_recycling (sh);\n    }\n  else\n    {\n      // This hint will not be used.\n      possible_entry->ext_id_.decrement ();\n\n      // Hint not successful\n      found = 0;\n\n      // If <sh> is not connected to the correct address or is busy,\n      // we will not use it.\n      sh = 0;\n    }\n\n  if (found)\n    entry = possible_entry;\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::find_or_create_svc_handler_i\n(SVC_HANDLER *&sh,\n const ACE_PEER_CONNECTOR_ADDR &remote_addr,\n ACE_Time_Value *timeout,\n const ACE_PEER_CONNECTOR_ADDR &local_addr,\n bool reuse_addr,\n int flags,\n int perms,\n CONNECTION_MAP_ENTRY *&entry,\n int &found)\n{\n  // Explicit type conversion\n  REFCOUNTED_HASH_RECYCLABLE_ADDRESS search_addr (remote_addr);\n\n  // Try to find the address in the cache.  Only if we don't find it\n  // do we create a new <SVC_HANDLER> and connect it with the server.\n  if (this->find (search_addr, entry) == -1)\n    {\n      // Set the flag\n      found = 0;\n\n      // We need to use a temporary variable here since we are not\n      // allowed to change <sh> because other threads may use this\n      // when we let go of the lock during the OS level connect.\n      //\n      // Note that making a new svc_handler, connecting remotely,\n      // binding to the map, and assigning of the hint and recycler\n      // should be atomic to the outside world.\n      SVC_HANDLER *potential_handler = 0;\n\n      // Create a new svc_handler\n      if (this->make_svc_handler (potential_handler) == -1)\n        return -1;\n\n      // Actively establish the connection.  This is a timed blocking\n      // connect.\n      if (this->new_connection (potential_handler,\n                                remote_addr,\n                                timeout,\n                                local_addr,\n                                reuse_addr,\n                                flags,\n                                perms) == -1)\n        {\n          // If connect() failed because of timeouts, we have to\n          // reject the connection entirely. This is necessary since\n          // currently there is no way for the non-blocking connects\n          // to complete and for the <Connector> to notify the cache\n          // of the completion of connect().\n          if (errno == EWOULDBLOCK)\n            errno = ENOTSUP;\n\n          // Close the svc handler.\n          potential_handler->close (0);\n\n          return -1;\n        }\n      else\n        {\n          // Insert the new SVC_HANDLER instance into the cache.\n          if (this->connection_map_.bind (search_addr,\n                                          potential_handler,\n                                          entry) == -1)\n            {\n              // Close the svc handler.\n              potential_handler->close (CLOSE_DURING_NEW_CONNECTION);\n\n              return -1;\n            }\n\n          // Everything succeeded as planned. Assign <sh> to <potential_handler>.\n          sh = potential_handler;\n\n          // Set the recycler and the recycling act\n          this->assign_recycler (sh, this, entry);\n        }\n    }\n  else\n    // We found a cached svc_handler.\n    {\n      // Set the flag\n      found = 1;\n\n      // Get the cached <svc_handler>\n      sh = entry->int_id_;\n\n      // Tell the <svc_handler> that it should prepare itself for\n      // being recycled.\n      this->prepare_for_recycling (sh);\n    }\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::new_connection\n(SVC_HANDLER *&sh,\n const ACE_PEER_CONNECTOR_ADDR &remote_addr,\n ACE_Time_Value *timeout,\n const ACE_PEER_CONNECTOR_ADDR &local_addr,\n bool reuse_addr,\n int flags,\n int perms)\n{\n  // Yow, Reverse Guard!  Let go of the lock for the duration of the\n  // actual connect.  This will allow other threads to hack on the\n  // connection cache while this thread creates the new connection.\n  ACE_GUARD_RETURN (REVERSE_MUTEX, ace_mon, *this->reverse_lock_, -1);\n\n  return this->CONNECT_STRATEGY::connect_svc_handler (sh,\n                                                      remote_addr,\n                                                      timeout,\n                                                      local_addr,\n                                                      reuse_addr,\n                                                      flags,\n                                                      perms);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::connect_svc_handler\n(SVC_HANDLER *&sh,\n const ACE_PEER_CONNECTOR_ADDR &remote_addr,\n ACE_Time_Value *timeout,\n const ACE_PEER_CONNECTOR_ADDR &local_addr,\n bool reuse_addr,\n int flags,\n int perms)\n{\n  int found = 0;\n\n  // This artificial scope is required since we need to let go of the\n  // lock *before* registering the newly created handler with the\n  // Reactor.\n  {\n    // Synchronization is required here as the setting of the\n    // recyclable state must be done atomically with the finding and\n    // binding of the service handler in the cache.\n    ACE_GUARD_RETURN (MUTEX, ace_mon, *this->lock_, -1);\n\n    int result = this->connect_svc_handler_i (sh,\n                                              remote_addr,\n                                              timeout,\n                                              local_addr,\n                                              reuse_addr,\n                                              flags,\n                                              perms,\n                                              found);\n    if (result != 0)\n      return result;\n\n  }\n\n  // If it is a new connection, activate it.\n  //\n  // Note: This activation is outside the scope of the lock of the\n  // cached connector.  This is necessary to avoid subtle deadlock\n  // conditions with this lock and the Reactor lock.\n\n  if (!found)\n    {\n      if (this->activate_svc_handler (sh) == -1)\n        {\n          // If an error occurs while activating the handler, the\n          // <activate_svc_handler> method will close the handler.\n          // This in turn will remove this entry from the internal\n          // table.\n\n          // Synchronization is required here as the setting of the\n          // handler to zero must be done atomically with the users of\n          // the cache.\n          ACE_GUARD_RETURN (MUTEX, ace_mon, *this->lock_, -1);\n\n          // Reset handler.\n          sh = 0;\n\n          return -1;\n        }\n    }\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::connect_svc_handler\n(SVC_HANDLER *&sh,\n SVC_HANDLER *&sh_copy,\n const ACE_PEER_CONNECTOR_ADDR &remote_addr,\n ACE_Time_Value *timeout,\n const ACE_PEER_CONNECTOR_ADDR &local_addr,\n bool reuse_addr,\n int flags,\n int perms)\n{\n  int found = 0;\n\n  // This artificial scope is required since we need to let go of the\n  // lock *before* registering the newly created handler with the\n  // Reactor.\n  {\n    // Synchronization is required here as the setting of the\n    // recyclable state must be done atomically with the finding and\n    // binding of the service handler in the cache.\n    ACE_GUARD_RETURN (MUTEX, ace_mon, *this->lock_, -1);\n\n    int result = this->connect_svc_handler_i (sh,\n                                              remote_addr,\n                                              timeout,\n                                              local_addr,\n                                              reuse_addr,\n                                              flags,\n                                              perms,\n                                              found);\n    sh_copy = sh;\n\n    if (result != 0)\n      return result;\n\n  }\n\n  // If it is a new connection, activate it.\n  //\n  // Note: This activation is outside the scope of the lock of the\n  // cached connector.  This is necessary to avoid subtle deadlock\n  // conditions with this lock and the Reactor lock.\n\n  if (!found)\n    {\n      if (this->activate_svc_handler (sh_copy) == -1)\n        {\n          // If an error occurs while activating the handler, the\n          // <activate_svc_handler> method will close the handler.\n          // This in turn will remove this entry from the internal\n          // table.\n\n          // Synchronization is required here as the setting of the\n          // handler to zero must be done atomically with the users of\n          // the cache.\n          ACE_GUARD_RETURN (MUTEX, ace_mon, *this->lock_, -1);\n\n          // Reset handler.\n          sh = 0;\n          sh_copy = 0;\n\n          return -1;\n        }\n    }\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::connect_svc_handler_i\n(SVC_HANDLER *&sh,\n const ACE_PEER_CONNECTOR_ADDR &remote_addr,\n ACE_Time_Value *timeout,\n const ACE_PEER_CONNECTOR_ADDR &local_addr,\n bool reuse_addr,\n int flags,\n int perms,\n int& found)\n{\n  CONNECTION_MAP_ENTRY *entry = 0;\n\n  // Check if the user passed a hint svc_handler\n  if (sh != 0)\n    {\n      int result = this->check_hint_i (sh,\n                                       remote_addr,\n                                       timeout,\n                                       local_addr,\n                                       reuse_addr,\n                                       flags,\n                                       perms,\n                                       entry,\n                                       found);\n      if (result != 0)\n        return result;\n    }\n\n  // If not found\n  if (!found)\n    {\n      int result = this->find_or_create_svc_handler_i (sh,\n                                                       remote_addr,\n                                                       timeout,\n                                                       local_addr,\n                                                       reuse_addr,\n                                                       flags,\n                                                       perms,\n                                                       entry,\n                                                       found);\n      if (result != 0)\n        return result;\n    }\n\n  if (entry)\n    {\n      // For all successful cases: mark the <svc_handler> in the cache\n      // as being <in_use>.  Therefore recyclable is BUSY.\n      entry->ext_id_.recycle_state (ACE_RECYCLABLE_BUSY);\n\n      // And increment the refcount\n      entry->ext_id_.increment ();\n    }\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::cache (const void *recycling_act)\n{\n  // Synchronization is required here as the setting of the recyclable\n  // state must be done atomically with respect to other threads that\n  // are querying the cache.\n  ACE_GUARD_RETURN (MUTEX, ace_mon, *this->lock_, -1);\n\n  return this->cache_i (recycling_act);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::cache_i (const void *recycling_act)\n{\n  // The wonders and perils of ACT\n  CONNECTION_MAP_ENTRY *entry = (CONNECTION_MAP_ENTRY *) recycling_act;\n\n  // Mark the <svc_handler> in the cache as not being <in_use>.\n  // Therefore recyclable is IDLE.\n  entry->ext_id_.recycle_state (ACE_RECYCLABLE_IDLE_AND_PURGABLE);\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::recycle_state (const void *recycling_act,\n                                                                                      ACE_Recyclable_State new_state)\n{\n  // Synchronization is required here as the setting of the recyclable\n  // state must be done atomically with respect to other threads that\n  // are querying the cache.\n  ACE_GUARD_RETURN (MUTEX, ace_mon, *this->lock_, -1);\n\n  return this->recycle_state_i (recycling_act,\n                                new_state);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::recycle_state_i (const void *recycling_act,\n                                                                                        ACE_Recyclable_State new_state)\n{\n  // The wonders and perils of ACT\n  CONNECTION_MAP_ENTRY *entry = (CONNECTION_MAP_ENTRY *) recycling_act;\n\n  // Mark the <svc_handler> in the cache as not being <in_use>.\n  // Therefore recyclable is IDLE.\n  entry->ext_id_.recycle_state (new_state);\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> ACE_Recyclable_State\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::recycle_state (const void *recycling_act) const\n{\n  // Const cast.\n  SELF *fake_this = const_cast<SELF *> (this);\n\n  // Synchronization is required here.\n  ACE_GUARD_RETURN (MUTEX, ace_mon, *fake_this->lock_, ACE_RECYCLABLE_UNKNOWN);\n\n  return this->recycle_state_i (recycling_act);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> ACE_Recyclable_State\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::recycle_state_i (const void *recycling_act) const\n{\n  // The wonders and perils of ACT\n  CONNECTION_MAP_ENTRY *entry = (CONNECTION_MAP_ENTRY *) recycling_act;\n\n  // Mark the <svc_handler> in the cache as not being <in_use>.\n  // Therefore recyclable is IDLE.\n  return entry->ext_id_.recycle_state ();\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::purge (const void *recycling_act)\n{\n  // Excluded other threads from changing cache while we take this\n  // entry out.\n  ACE_GUARD_RETURN (MUTEX, ace_mon, *this->lock_, -1);\n\n  return this->purge_i (recycling_act);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::purge_i (const void *recycling_act)\n{\n  // The wonders and perils of ACT\n  CONNECTION_MAP_ENTRY *entry = (CONNECTION_MAP_ENTRY *) recycling_act;\n\n  return this->connection_map_.unbind (entry);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::mark_as_closed (const void *recycling_act)\n{\n  // Excluded other threads from changing cache while we take this\n  // entry out.\n  ACE_GUARD_RETURN (MUTEX, ace_mon, *this->lock_, -1);\n\n  return this->mark_as_closed_i (recycling_act);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::mark_as_closed_i (const void *recycling_act)\n{\n  // The wonders and perils of ACT\n  CONNECTION_MAP_ENTRY *entry = (CONNECTION_MAP_ENTRY *) recycling_act;\n\n  // Mark the <svc_handler> in the cache as CLOSED.\n  entry->ext_id_.recycle_state (ACE_RECYCLABLE_CLOSED);\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::cleanup_hint (const void *recycling_act,\n                                                                                     void **act_holder)\n{\n  // Excluded other threads from changing cache while we take this\n  // entry out.\n  ACE_GUARD_RETURN (MUTEX, ace_mon, *this->lock_, -1);\n\n  return this->cleanup_hint_i (recycling_act,\n                               act_holder);\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::cleanup_hint_i (const void *recycling_act,\n                                                                                       void **act_holder)\n{\n  // Reset the <*act_holder> in the confines and protection of the\n  // lock.\n  if (act_holder)\n    *act_holder = 0;\n\n  // The wonders and perils of ACT\n  CONNECTION_MAP_ENTRY *entry = (CONNECTION_MAP_ENTRY *) recycling_act;\n\n  // Decrement the refcount on the <svc_handler>.\n  int refcount = entry->ext_id_.decrement ();\n\n  // If the svc_handler state is closed and the refcount == 0, call\n  // close() on svc_handler.\n  if (entry->ext_id_.recycle_state () == ACE_RECYCLABLE_CLOSED &&\n      refcount == 0)\n    {\n      entry->int_id_->recycler (0, 0);\n      entry->int_id_->close ();\n      this->purge_i (entry);\n    }\n\n  return 0;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> ACE_Creation_Strategy<SVC_HANDLER> *\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::creation_strategy (void) const\n{\n  return this->creation_strategy_;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> ACE_Recycling_Strategy<SVC_HANDLER> *\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::recycling_strategy (void) const\n{\n  return this->recycling_strategy_;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> ACE_Concurrency_Strategy<SVC_HANDLER> *\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::concurrency_strategy (void) const\n{\n  return this->concurrency_strategy_;\n}\n\ntemplate<class SVC_HANDLER, ACE_PEER_CONNECTOR_1, class MUTEX> int\nACE_Cached_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2, MUTEX>::find (\n  REFCOUNTED_HASH_RECYCLABLE_ADDRESS &search_addr,\n  CONNECTION_MAP_ENTRY *&entry)\n{\n  typedef ACE_Hash_Map_Bucket_Iterator<REFCOUNTED_HASH_RECYCLABLE_ADDRESS,\n                                       SVC_HANDLER *,\n                                       ACE_Hash<REFCOUNTED_HASH_RECYCLABLE_ADDRESS>,\n                                       ACE_Equal_To<REFCOUNTED_HASH_RECYCLABLE_ADDRESS>,\n                                       ACE_Null_Mutex>\n    CONNECTION_MAP_BUCKET_ITERATOR;\n\n  CONNECTION_MAP_BUCKET_ITERATOR iterator (this->connection_map_,\n                                           search_addr);\n\n  CONNECTION_MAP_BUCKET_ITERATOR end (this->connection_map_,\n                                      search_addr,\n                                      1);\n\n  for (;\n       iterator != end;\n       ++iterator)\n    {\n      REFCOUNTED_HASH_RECYCLABLE_ADDRESS &addr = (*iterator).ext_id_;\n\n      if (addr.recycle_state () != ACE_RECYCLABLE_IDLE_AND_PURGABLE &&\n          addr.recycle_state () != ACE_RECYCLABLE_IDLE_BUT_NOT_PURGABLE)\n        continue;\n\n      if (addr.subject () != search_addr.subject ())\n        continue;\n\n      entry = &(*iterator);\n      return 0;\n    }\n\n  return -1;\n}\n\ntemplate <class SVC_HANDLER> void\nACE_DLL_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_DLL_Strategy<SVC_HANDLER>::dump\");\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER>\nACE_Concurrency_Strategy<SVC_HANDLER>::~ACE_Concurrency_Strategy (void)\n{\n  ACE_TRACE (\"ACE_Concurrency_Strategy<SVC_HANDLER>::~ACE_Concurrency_Strategy\");\n}\n\n\ntemplate <class SVC_HANDLER> void\nACE_Concurrency_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Concurrency_Strategy<SVC_HANDLER>::dump\");\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER>\nACE_Reactive_Strategy<SVC_HANDLER>::~ACE_Reactive_Strategy (void)\n{\n  ACE_TRACE (\"ACE_Reactive_Strategy<SVC_HANDLER>::~ACE_Reactive_Strategy\");\n}\n\n\ntemplate <class SVC_HANDLER> void\nACE_Reactive_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Reactive_Strategy<SVC_HANDLER>::dump\");\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER>\nACE_Thread_Strategy<SVC_HANDLER>::~ACE_Thread_Strategy (void)\n{\n  ACE_TRACE (\"ACE_Thread_Strategy<SVC_HANDLER>::~ACE_Thread_Strategy\");\n}\n\ntemplate <class SVC_HANDLER> void\nACE_Thread_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Thread_Strategy<SVC_HANDLER>::dump\");\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_ACCEPTOR_1>\nACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::~ACE_Accept_Strategy (void)\n{\n  ACE_TRACE (\"ACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::~ACE_Accept_Strategy\");\n\n  // Close the underlying acceptor.\n  this->peer_acceptor_.close ();\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_ACCEPTOR_1> ACE_HANDLE\nACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::get_handle (void) const\n{\n  ACE_TRACE (\"ACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::get_handle\");\n  return this->peer_acceptor_.get_handle ();\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_ACCEPTOR_1> ACE_PEER_ACCEPTOR &\nACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::acceptor (void) const\n{\n  ACE_TRACE (\"ACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::acceptor\");\n  return (ACE_PEER_ACCEPTOR &) this->peer_acceptor_;\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_ACCEPTOR_1> void\nACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Accept_Strategy<SVC_HANDLER, ACE_PEER_ACCEPTOR_2>::dump\");\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_CONNECTOR_1>\nACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::~ACE_Connect_Strategy (void)\n{\n  ACE_TRACE (\"ACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::~ACE_Connect_Strategy\");\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_CONNECTOR_1> ACE_PEER_CONNECTOR &\nACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::connector (void) const\n{\n  ACE_TRACE (\"ACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::connector\");\n  return (ACE_PEER_CONNECTOR &) this->connector_;\n}\n\ntemplate <class SVC_HANDLER, ACE_PEER_CONNECTOR_1> void\nACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Connect_Strategy<SVC_HANDLER, ACE_PEER_CONNECTOR_2>::dump\");\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER>\nACE_Process_Strategy<SVC_HANDLER>::~ACE_Process_Strategy (void)\n{\n  ACE_TRACE (\"ACE_Process_Strategy<SVC_HANDLER>::~ACE_Process_Strategy\");\n}\n\ntemplate <class SVC_HANDLER> void\nACE_Process_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Process_Strategy<SVC_HANDLER>::dump\");\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER>\nACE_Scheduling_Strategy<SVC_HANDLER>::~ACE_Scheduling_Strategy (void)\n{\n  ACE_TRACE (\"ACE_Scheduling_Strategy<SVC_HANDLER>::~ACE_Scheduling_Strategy\");\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Scheduling_Strategy<SVC_HANDLER>::suspend (void)\n{\n  ACE_TRACE (\"ACE_Scheduling_Strategy<SVC_HANDLER>::suspend\");\n  return -1;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Scheduling_Strategy<SVC_HANDLER>::resume (void)\n{\n  ACE_TRACE (\"ACE_Scheduling_Strategy<SVC_HANDLER>::resume\");\n  return -1;\n}\n\ntemplate <class SVC_HANDLER> void\nACE_Scheduling_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Scheduling_Strategy<SVC_HANDLER>::dump\");\n\n  ACELIB_DEBUG ((LM_DEBUG, ACE_BEGIN_DUMP, this));\n  ACELIB_DEBUG ((LM_DEBUG, ACE_END_DUMP));\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Schedule_All_Reactive_Strategy<SVC_HANDLER>::suspend (void)\n{\n  ACE_TRACE (\"ACE_Schedule_All_Reactive_Strategy<SVC_HANDLER>::suspend\");\n  return this->reactor_->suspend_handlers ();\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Schedule_All_Reactive_Strategy<SVC_HANDLER>::resume (void)\n{\n  ACE_TRACE (\"ACE_Schedule_All_Reactive_Strategy<SVC_HANDLER>::resume\");\n  return this->reactor_->resume_handlers ();\n}\n\ntemplate <class SVC_HANDLER> void\nACE_Schedule_All_Reactive_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Schedule_All_Reactive_Strategy<SVC_HANDLER>::dump\");\n\n  ACE_Scheduling_Strategy<SVC_HANDLER>::dump ();\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Schedule_All_Threaded_Strategy<SVC_HANDLER>::suspend (void)\n{\n  ACE_TRACE (\"ACE_Schedule_All_Threaded_Strategy<SVC_HANDLER>::suspend\");\n  return this->thr_mgr_->suspend_all ();\n}\n\ntemplate <class SVC_HANDLER> int\nACE_Schedule_All_Threaded_Strategy<SVC_HANDLER>::resume (void)\n{\n  ACE_TRACE (\"ACE_Schedule_All_Threaded_Strategy<SVC_HANDLER>::resume\");\n  return this->thr_mgr_->resume_all ();\n}\n\ntemplate <class SVC_HANDLER> void\nACE_Schedule_All_Threaded_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Schedule_All_Threaded_Strategy<SVC_HANDLER>::dump\");\n\n  ACE_Scheduling_Strategy<SVC_HANDLER>::dump ();\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class T>\nACE_Refcounted_Hash_Recyclable<T>::~ACE_Refcounted_Hash_Recyclable (void)\n{\n}\n\ntemplate <class SVC_HANDLER> void\nACE_Singleton_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Singleton_Strategy<SVC_HANDLER>::dump\");\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER>\nACE_Creation_Strategy<SVC_HANDLER>::~ACE_Creation_Strategy (void)\n{\n  ACE_TRACE (\"ACE_Creation_Strategy<SVC_HANDLER>::~ACE_Creation_Strategy\");\n}\n\n// Default behavior is to make a new SVC_HANDLER, passing in the\n// Thread_Manager (if any).\n\ntemplate <class SVC_HANDLER> int\nACE_Creation_Strategy<SVC_HANDLER>::make_svc_handler (SVC_HANDLER *&sh)\n{\n  ACE_TRACE (\"ACE_Creation_Strategy<SVC_HANDLER>::make_svc_handler\");\n\n  if (sh == 0)\n    ACE_NEW_RETURN (sh, SVC_HANDLER (this->thr_mgr_), -1);\n  sh->reactor (this->reactor_);\n  return 0;\n}\n\ntemplate <class SVC_HANDLER> void\nACE_Creation_Strategy<SVC_HANDLER>::dump (void) const\n{\n#if defined (ACE_HAS_DUMP)\n  ACE_TRACE (\"ACE_Creation_Strategy<SVC_HANDLER>::dump\");\n#endif /* ACE_HAS_DUMP */\n}\n\ntemplate <class SVC_HANDLER> int\nACE_NOOP_Creation_Strategy<SVC_HANDLER>::make_svc_handler (SVC_HANDLER *&)\n{\n  ACE_TRACE (\"ACE_NOOP_Creation_Strategy<SVC_HANDLER>::make_svc_handler\");\n  return 0;\n}\n\ntemplate <class SVC_HANDLER> int\nACE_NOOP_Concurrency_Strategy<SVC_HANDLER>::activate_svc_handler (SVC_HANDLER *,\n                                                                  void *)\n{\n  ACE_TRACE (\"ACE_NOOP_Concurrency_Strategy<SVC_HANDLER>::activate_svc_handler\");\n  return 0;\n}\n\nACE_ALLOC_HOOK_DEFINE_Tc(ACE_Creation_Strategy)\nACE_ALLOC_HOOK_DEFINE_Tc(ACE_Singleton_Strategy)\nACE_ALLOC_HOOK_DEFINE_Tc(ACE_DLL_Strategy)\nACE_ALLOC_HOOK_DEFINE_Tc(ACE_Concurrency_Strategy)\nACE_ALLOC_HOOK_DEFINE_Tc(ACE_Reactive_Strategy)\nACE_ALLOC_HOOK_DEFINE_Tc(ACE_Thread_Strategy)\nACE_ALLOC_HOOK_DEFINE_Tc(ACE_Process_Strategy)\nACE_ALLOC_HOOK_DEFINE_Tca(ACE_Accept_Strategy)\nACE_ALLOC_HOOK_DEFINE_Tco(ACE_Connect_Strategy)\n\nACE_END_VERSIONED_NAMESPACE_DECL\n\n#endif /* ACE_STRATEGIES_T_CPP */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/config-macosx-jaguar.h": "/* -*- C++ -*- */\n// This configuration file is designed to work with the MacOS X operating system, version 10.2 (Jaguar).\n\n#ifndef ACE_CONFIG_MACOSX_H\n#define ACE_CONFIG_MACOSX_H\n\n#if ! defined (__ACE_INLINE__)\n#define __ACE_INLINE__\n#endif /* ! __ACE_INLINE__ */\n\n#if defined (__GNUG__)\n# include \"ace/config-g++-common.h\"\n#endif /* __GNUG__ */\n\n#define ACE_SIZE_T_FORMAT_SPECIFIER_ASCII \"%lu\"\n\n#if defined (ACE_HAS_PENTIUM)\n# undef ACE_HAS_PENTIUM\n#endif /* ACE_HAS_PENTIUM */\n\n#if !defined (_THREAD_SAFE)\n#define _THREAD_SAFE\n#endif /* _THREAD_SAFE */\n\n#define ACE_HAS_GPERF\n#define ACE_HAS_POSIX_SEM\n\n//#define ACE_HAS_SVR4_TLI\n\n#define ACE_LACKS_STROPTS_H\n#define ACE_LACKS_WCHAR_H\n\n#define ACE_SYS_SELECT_NEEDS_UNISTD_H\n\n//\n// Compiler/platform defines the sig_atomic_t typedef.\n#define ACE_HAS_SIG_ATOMIC_T\n\n// Compiler/platform supports SVR4 signal typedef\n#define ACE_HAS_SVR4_SIGNAL_T\n\n//Platform/compiler has the sigwait(2) prototype\n#define ACE_HAS_SIGWAIT\n\n//Platform supports sigsuspend()\n#define ACE_HAS_SIGSUSPEND\n\n//#define ACE_HAS_RECURSIVE_THR_EXIT_SEMANTICS\n#define ACE_LACKS_GETPGID\n#define ACE_LACKS_RWLOCK_T\n\n#define ACE_HAS_SIOCGIFCONF\n\n// Optimize ACE_Handle_Set for select().\n#define ACE_HAS_HANDLE_SET_OPTIMIZED_FOR_SELECT\n\n#define ACE_HAS_NONCONST_SELECT_TIMEVAL\n\n#define ACE_HAS_SYSCTL\n\n#define ACE_NEEDS_SCHED_H\n\n#define ACE_LACKS_MALLOC_H\n\n#define ACE_HAS_ALT_CUSERID\n\n// Platform supports POSIX timers via struct timespec.\n#define ACE_HAS_POSIX_TIME\n#define ACE_HAS_UALARM\n\n// Platform defines struct timespec but not timespec_t\n#define ACE_LACKS_TIMESPEC_T\n\n#define ACE_LACKS_STRRECVFD\n\n#define ACE_HAS_SOCKADDR_IN6_SIN6_LEN\n\n// Compiler/platform contains the <sys/syscall.h> file.\n#define ACE_HAS_SYS_SYSCALL_H\n\n#define ACE_HAS_CONSISTENT_SIGNAL_PROTOTYPES\n\n// Compiler/platform supports alloca().\n// Although ACE does have alloca() on this compiler/platform combination, it is\n// disabled by default since it can be dangerous.  Uncomment the following line\n// if you ACE to use it.\n//#define ACE_HAS_ALLOCA\n\n// Compiler/platform correctly calls init()/fini() for shared libraries.\n#define ACE_HAS_AUTOMATIC_INIT_FINI\n\n// Explicit dynamic linking permits \"lazy\" symbol resolution\n//#define ACE_HAS_RTLD_LAZY_V\n\n// platform supports POSIX O_NONBLOCK semantics\n#define ACE_HAS_POSIX_NONBLOCK\n\n// platform supports IP multicast\n#define ACE_HAS_IP_MULTICAST\n#define ACE_LACKS_PERFECT_MULTICAST_FILTERING 1\n\n// Compiler/platform has the getrusage() system call.\n#define ACE_HAS_GETRUSAGE\n\n// Compiler supports the ssize_t typedef.\n#define ACE_HAS_SSIZE_T\n\n// Compiler/platform provides the sockio.h file.\n#define ACE_HAS_SYS_SOCKIO_H\n\n// Defines the page size of the system.\n#define ACE_HAS_GETPAGESIZE\n\n// Platform provides <sys/filio.h> header.\n#define ACE_HAS_SYS_FILIO_H\n\n// Platform/compiler supports timezone * as second parameter to gettimeofday().\n#define ACE_HAS_TIMEZONE_GETTIMEOFDAY\n\n#define ACE_LACKS_SYS_MSG_H\n#define ACE_LACKS_SYSV_MSQ_PROTOS\n#define ACE_HAS_MSG\n#define ACE_HAS_4_4BSD_SENDMSG_RECVMSG\n#define ACE_HAS_NONCONST_MSGSND\n\n#if !defined (ACE_MT_SAFE)\n# define ACE_MT_SAFE 1\n#endif\n\n#if ACE_MT_SAFE == 1\n// Yes, we do have threads.\n# define ACE_HAS_THREADS\n// And they're even POSIX pthreads\n# define ACE_HAS_PTHREADS\n# define ACE_HAS_THREAD_SPECIFIC_STORAGE\n# define ACE_LACKS_THREAD_PROCESS_SCOPING\n#endif  /* ACE_MT_SAFE == 1 */\n\n#define ACE_HAS_DIRENT\n#define ACE_LACKS_POLL_H\n#define ACE_LACKS_SEARCH_H\n\n#define ACE_LACKS_SETSCHED\n//#define ACE_HAS_RECURSIVE_MUTEXES\n\n// Platform has POSIX terminal interface.\n#define ACE_HAS_TERMIOS\n\n#define ACE_HAS_SEMUN\n#define ACE_HAS_SIGINFO_T\n#define ACE_LACKS_SIGINFO_H\n#define ACE_HAS_UCONTEXT_T\n#define ACE_HAS_GETIFADDRS\n#define ACE_LACKS_STATIC_DATA_MEMBER_TEMPLATES\n#define ACE_LACKS_UNNAMED_SEMAPHORE\n\n// dlcompat package (not part of base Darwin) is needed for dlopen().\n// You may download directly from sourceforge and install or use fink\n// Fink installer puts libraries in /sw/lib and headers in /sw/include\n// In order to install dlcompat do the following:\n//   - download fink from http://fink.sf.net\n//   - type:\n//        fink install dlcompat\n// as of Dec 2002, if you use fink you will need to uncomment the next line\n//#define ACE_NEEDS_DL_UNDERSCORE\n#define ACE_HAS_SVR4_DYNAMIC_LINKING\n#define ACE_LD_SEARCH_PATH ACE_TEXT (\"DYLD_LIBRARY_PATH\")\n#define ACE_DLL_SUFFIX ACE_TEXT (\".dylib\")\n#define ACE_LACKS_DLCLOSE\n\n// gperf seems to need this\n#define ACE_HAS_NONSTATIC_OBJECT_MANAGER\n\n#if defined(__APPLE_CC__) && (__APPLE_CC__ < 1173)\n#error \"Compiler must be upgraded, see http://developer.apple.com\"\n#endif /* __APPLE_CC__ */\n\n#endif /* ACE_CONFIG_MACOSX_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/OS_NS_dlfcn.h": "// -*- C++ -*-\n\n//=============================================================================\n/**\n *  @file   OS_NS_dlfcn.h\n *\n *  @author Douglas C. Schmidt <schmidt@cs.wustl.edu>\n *  @author Jesper S. M|ller<stophph@diku.dk>\n *  @author and a cast of thousands...\n *\n *  Originally in OS.h.\n */\n//=============================================================================\n\n#ifndef ACE_OS_NS_DLFCN_H\n# define ACE_OS_NS_DLFCN_H\n\n# include /**/ \"ace/pre.h\"\n\n# include \"ace/config-all.h\"\n\n# if !defined (ACE_LACKS_PRAGMA_ONCE)\n#  pragma once\n# endif /* ACE_LACKS_PRAGMA_ONCE */\n\n#include \"ace/os_include/os_dlfcn.h\"\n#include /**/ \"ace/ACE_export.h\"\n\n#if defined (ACE_EXPORT_MACRO)\n#  undef ACE_EXPORT_MACRO\n#endif\n#define ACE_EXPORT_MACRO ACE_Export\n\nACE_BEGIN_VERSIONED_NAMESPACE_DECL\n\nnamespace ACE_OS {\n\n  //@{ @name A set of wrappers for explicit dynamic linking.\n  ACE_NAMESPACE_INLINE_FUNCTION\n  int dlclose (ACE_SHLIB_HANDLE handle);\n\n  ACE_NAMESPACE_INLINE_FUNCTION\n  ACE_TCHAR *dlerror (void);\n\n  ACE_NAMESPACE_INLINE_FUNCTION\n  ACE_SHLIB_HANDLE dlopen (const ACE_TCHAR *filename,\n                           int mode = ACE_DEFAULT_SHLIB_MODE);\n\n  ACE_NAMESPACE_INLINE_FUNCTION\n  void *dlsym (ACE_SHLIB_HANDLE handle,\n               const ACE_TCHAR *symbol);\n  //@}\n\n} /* namespace ACE_OS */\n\nACE_END_VERSIONED_NAMESPACE_DECL\n\n# if defined (ACE_HAS_INLINED_OSCALLS)\n#   if defined (ACE_INLINE)\n#     undef ACE_INLINE\n#   endif /* ACE_INLINE */\n#   define ACE_INLINE inline\n#   include \"ace/OS_NS_dlfcn.inl\"\n# endif /* ACE_HAS_INLINED_OSCALLS */\n\n# include /**/ \"ace/post.h\"\n#endif /* ACE_OS_NS_DLFCN_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/config-hpux-11.00.h": "/* -*- C++ -*- */\n// The following configuration file is designed to work for HP\n// platforms running HP-UX 11.00 using aC++ or gcc (2.95 and up).\n\n#ifndef ACE_CONFIG_H\n#define ACE_CONFIG_H\n#include /**/ \"ace/pre.h\"\n\n#define ACE_LACKS_STDINT_H\n#define ACE_LACKS_SYS_SELECT_H\n\n#if defined (__GNUG__)\n\n// config-g++-common.h undef's ACE_HAS_STRING_CLASS with -frepo, so\n// this must appear before its #include.\n#  define ACE_HAS_STRING_CLASS\n\n#  include \"ace/config-g++-common.h\"\n\n#else\n\n// aC++...\n\n// Precompiler needs extra flags to ignore \"invalid #pragma directive\"\n#  define ACE_CC_PREPROCESSOR_ARGS \"-E +W 67\"\n\n// If the -AA compile option is used, the compiler defines _HP_NAMESPACE_STD.\n// The -AA option enables the 2.0 standard C++ library. If not used, then\n// we have the old, 1.2.1 C++ library.\n#    if defined (_HP_NAMESPACE_STD)\n#      if defined (ACE_HAS_STANDARD_CPP_LIBRARY)\n#        undef ACE_HAS_STANDARD_CPP_LIBRARY\n#      endif\n#      define ACE_HAS_STANDARD_CPP_LIBRARY 1\n#      if defined (ACE_USES_STD_NAMESPACE_FOR_STDCPP_LIB)\n#        undef ACE_USES_STD_NAMESPACE_FOR_STDCPP_LIB\n#      endif\n#      if defined (RWSTD_NO_NAMESPACE)\n         namespace std {} using namespace std;\n#      else\n#        define ACE_USES_STD_NAMESPACE_FOR_STDCPP_LIB 1\n#      endif /* RWSTD_NO_NAMESPACE */\n#    else\n#      define ACE_USES_OLD_IOSTREAMS\n       // There's no support in ACE's use of numeric_limits for those that\n       // aren't in std::\n#      define ACE_LACKS_NUMERIC_LIMITS\n#    endif /* _HP_NAMESPACE_STD */\n\n#    define ACE_HAS_WORKING_EXPLICIT_TEMPLATE_DESTRUCTOR\n\n// Platform lacks streambuf \"linebuffered ()\".\n#    define ACE_LACKS_LINEBUFFERED_STREAMBUF 1\n\n// Lack of (and broken) support for placement operator delete is a known\n// bug by HP, up until aC++ A.03.55.02.\n#    if (__HP_aCC < 35502)\n#      define ACE_LACKS_PLACEMENT_OPERATOR_DELETE\n#    endif /* __HP_aCC < 35502 */\n\n// Compiler's 'new' throws exceptions on failure, regardless of whether or\n// not exception handling is enabled in the compiler options. Fortunately,\n// new(nothrow_t) is offered.\n#    define ACE_NEW_THROWS_EXCEPTIONS\n#    define ACE_HAS_NEW_NOTHROW\n#    define ACE_HAS_NEW_NO_H 1\n\n// Compiler's template mechanism must see source code (i.e., .C files).\n#    define ACE_TEMPLATES_REQUIRE_SOURCE\n\n// Compiler doesn't handle 'signed char' correctly (used in ace/IOStream.h)\n#  define ACE_LACKS_SIGNED_CHAR\n\n#endif /* __GNUG__, HP */\n\n//*********************************************************************\n//\n// From here down is the compiler-INdependent OS settings.\n//\n//*********************************************************************\n\n// Compiling for HPUX.\n#if !defined (HPUX)\n#define HPUX\n#endif /* HPUX */\n#define HPUX_11\n\n#ifndef _HPUX_SOURCE\n#define _HPUX_SOURCE\n#endif\n\n#include /**/ <sys/stdsyms.h>\n\n// HP-UX is a POSIX-compliant system - see what's available.\n#include \"ace/config-posix.h\"\n\n// config-posix.h sets up ACE_HAS_AIO_CALLS if the headers define the\n// proper things. In HP-UX 11's case, the AIOCB Proactor works the best\n// overall. If the user hasn't overridden it, select AIOCB.\n#if defined (ACE_HAS_AIO_CALLS)\n#  if !defined (ACE_POSIX_AIOCB_PROACTOR) && !defined (ACE_POSIX_SIG_PROACTOR)\n#    define ACE_POSIX_AIOCB_PROACTOR\n#  endif /* !ACE_HAS_POSIX_AIOCB_PROACTOR && !ACE_POSIX_SIG_PROACTOR */\n#endif /* ACE_HAS_AIO_CALLS */\n\n////////////////////////////////////////////////////////////////////////////\n// General OS information - see README for more details on what they mean\n//\n///////////////////////////////////////////////////////////////////////////\n\n// HP/UX needs to have these addresses in a special range.\n// If this is on a 64-bit model, the default is to use 64-bit addressing.\n// It can also be set so that the mapped region is shareable with 32-bit\n// programs.  To enable the 32/64 sharing, comment out the first definition\n// of ACE_DEFAULT_BASE_ADDR and uncomment the two lines after it.\n#if defined (__LP64__)\n#  define ACE_DEFAULT_BASE_ADDR ((char *) 0x0000001100000000)\n//#  define ACE_DEFAULT_BASE_ADDR ((char *) 0x80000000)\n//#  define ACE_OS_EXTRA_MMAP_FLAGS MAP_ADDR32\n\n#  define ACE_DEFAULT_BASE_ADDRL (0x0000001100000000)\n//#  define ACE_DEFAULT_BASE_ADDRL (0x80000000)\n#else\n#  define ACE_DEFAULT_BASE_ADDR ((char *) 0x80000000)\n#endif  /* __LP64__ */\n\n// Preprocessor needs some help with data types\n#if defined (__LP64__)\n#  define ACE_SIZEOF_LONG 8\n#else\n#  define ACE_SIZEOF_LONG 4\n#endif\n\n// Platform can do async I/O (aio_*) (set up in config-posix.h)\n// ... but seems to require this in order to keep from hanging.  Needs some\n// investigation, maybe with HP.  John Mulhern determined this value\n// empirically.  YMMV.  If it does vary, set it up in your own config.h which\n// then includes the ACE-supplied config.\n#if !defined (ACE_INFINITE)\n#  define ACE_INFINITE 10000000\n#endif\n\n/* Compiler/platform correctly calls init()/fini() for shared libraries. */\n#define ACE_HAS_AUTOMATIC_INIT_FINI 1\n\n// Manually tweak the malloc control block paddings to properly align\n// things.\n#define ACE_MALLOC_PADDING 16\n#define ACE_MALLOC_ALIGN 8\n#define ACE_PI_CONTROL_BLOCK_ALIGN_LONGS  3\n\n// Compiler/platform contains the <sys/syscall.h> file.\n#define ACE_HAS_SYS_SYSCALL_H\n\n#define ACE_HAS_SYS_PSTAT_H\n\n// But doesn't have a prototype for syscall()\n#define ACE_LACKS_SYSCALL\n\n// Platform supports POSIX.1b clock_gettime ()\n#define ACE_HAS_CLOCK_GETTIME\n#define ACE_HAS_CLOCK_SETTIME\n\n#define ACE_LACKS_CLOCK_MONOTONIC\n#define ACE_LACKS_MONOTONIC_TIME\n\n#define ACE_LACKS_PTHREAD_SCOPE_PROCESS\n\n// Prototypes for both signal() and struct sigaction are consistent.\n#define ACE_HAS_CONSISTENT_SIGNAL_PROTOTYPES\n\n// Compiler/platform has correctly prototyped header files.\n#define ACE_HAS_CPLUSPLUS_HEADERS\n\n// Compiler/platform has Dirent iterator functions.\n#define ACE_HAS_DIRENT\n\n#define ACE_HAS_VSWPRINTF\n\n// Platform supports getpagesize() call\n#define ACE_HAS_GETPAGESIZE\n// But we define this just to be safe\n#define ACE_PAGE_SIZE 4096\n\n// Can run gperf on this platform (needed for TAO)\n#  define ACE_HAS_GPERF\n\n// Optimize ACE_Handle_Set for select().\n#  define ACE_HAS_HANDLE_SET_OPTIMIZED_FOR_SELECT\n\n// Platform supports IP multicast\n#define ACE_HAS_IP_MULTICAST\n// At least for 11iv2, lacks perfect filtering.\n#if (HPUX_VERS >= 1123) && !defined (ACE_LACKS_PERFECT_MULTICAST_FILTERING)\n# define ACE_LACKS_PERFECT_MULTICAST_FILTERING 1\n#endif\n\n/* Platform defines MAP_FAILED as a long constant. */\n#define ACE_HAS_LONG_MAP_FAILED 1\n\n// Platform supports recvmsg and sendmsg.\n#define ACE_HAS_MSG\n\n// Platform's select() has non-const timeval argument\n#define ACE_HAS_NONCONST_SELECT_TIMEVAL\n\n// Compiler/platform supports poll().\n#define ACE_HAS_POLL\n\n// Platform supports POSIX O_NONBLOCK semantics.\n#define ACE_HAS_POSIX_NONBLOCK\n\n// Platform supports the POSIX struct timespec type\n#define ACE_HAS_POSIX_TIME\n\n/* Platform has pread() and pwrite() support. */\n#define ACE_HAS_P_READ_WRITE 1\n\n/* Platform will recurse infinitely on thread exits from TSS cleanup routines\n   (e.g., AIX) */\n#define ACE_HAS_RECURSIVE_THR_EXIT_SEMANTICS 1\n\n// Platform supports reentrant functions (all the POSIX *_r functions).\n#define ACE_HAS_REENTRANT_FUNCTIONS\n// ctime_r and asctime_r conform to POSIX.1c (2 param version)\n#define ACE_HAS_2_PARAM_ASCTIME_R_AND_CTIME_R\n\n// Platform offers scandir(), and requires no adjustments for its API.\n#define ACE_HAS_SCANDIR\n\n// HP-UX 11 has reentrant netdb functions.  The catch is that the old\n// functions (gethostbyname, etc.) are thread-safe and the _r versions are\n// obsolescent.  So, define things so the _r versions are not used.\n// OS_NS_netdb.inl ensures no funny lock games are played in the\n// ACE_NETDBCALL_RETURN macro.\n#define ACE_LACKS_NETDB_REENTRANT_FUNCTIONS\n\n/* Platform lacks pri_t (e.g., Tandem NonStop UNIX). */\n#define ACE_LACKS_PRI_T 1\n\n// Platform has shm_open\n#define ACE_HAS_SHM_OPEN\n\n// Compiler/platform defines the sig_atomic_t typedef\n#define ACE_HAS_SIG_ATOMIC_T\n\n/* Compiler requires extern \"C\" functions for signals. */\n#define ACE_HAS_SIG_C_FUNC 1\n\n// Platform's sigaction() function takes const sigaction* as 2nd parameter.\n#define ACE_HAS_SIGACTION_CONSTP2\n\n#define ACE_HAS_SSIZE_T\n\n// Platform supports SVR4 extended signals\n#define ACE_HAS_SIGINFO_T\n\n/* Define to 1 if platform has sigsuspend(). */\n#define ACE_HAS_SIGSUSPEND 1\n\n// Platform doesn't detect a signal out of range unless it's way out of range.\n#define ACE_HAS_SIGISMEMBER_BUG\n\n/* Platform provides socklen_t type, such as Linux with glibc2. */\n#define ACE_HAS_SOCKLEN_T 1\n\n#define ACE_HAS_XPG4_MULTIBYTE_CHAR\n\n#define ACE_HAS_UALARM\n\n// Platform supports ucontext_t (which is used in the extended signal API).\n#define ACE_HAS_UCONTEXT_T\n\n// Platform/compiler supports void * as second parameter to gettimeofday().\n#define ACE_HAS_VOIDPTR_GETTIMEOFDAY\n\n/* Platform requires void * for mmap(). */\n#define ACE_HAS_VOIDPTR_MMAP 1\n\n/* OS/compiler uses void * arg 4 setsockopt() rather than const char * */\n#define ACE_HAS_VOIDPTR_SOCKOPT 1\n\n// Platform supports SVR4 dynamic linking semantics.\n// When used, this requires -ldl on the ACE library link line.\n#define ACE_HAS_SVR4_DYNAMIC_LINKING\n\n// Platform supports the getrusage() system call.\n#define ACE_HAS_GETRUSAGE\n\n/* Define to 1 if platform has the declaration of getrusage(). */\n#define ACE_HAS_GETRUSAGE_PROTOTYPE 1\n\n// Platform has the sigwait function in a header file\n#define ACE_HAS_SIGWAIT\n#define ACE_HAS_SIGTIMEDWAIT\n\n// Platform supports System V IPC (most versions of UNIX, but not Win32)\n#define ACE_HAS_SYSV_IPC\n\n// accept() is thread-safe\n#define ACE_HAS_THREAD_SAFE_ACCEPT\n\n// Platform lacks a typedef for timespec_t, but has struct timespec\n#define ACE_LACKS_TIMESPEC_T\n\n// dlopen() takes a char* instead of const char*\n#define ACE_HAS_CHARPTR_DL\n\n// lacks setegid and seteuid\n#define ACE_LACKS_SETEGID\n#define ACE_LACKS_SETEUID\n\n#define ACE_LACKS_SUSECONDS_T\n#define ACE_LACKS_SYS_SYSCTL_H\n\n#if !(defined(__STDC_EXT__) || defined(_INCLUDE_LONGLONG) || defined(_INCLUDE_STDC__SOURCE_199901))\n#  define ACE_LACKS_STRTOLL\n#  define ACE_LACKS_WCSTOLL\n#  define ACE_LACKS_STRTOULL\n#  define ACE_LACKS_WCSTOULL\n#endif\n\n#define ACE_LACKS_ISWASCII\n\n#define ACE_LACKS_SETENV\n#define ACE_LACKS_UNSETENV\n\n// Shared library name/path components\n#if defined (__ia64)\n#  define ACE_DLL_SUFFIX  ACE_TEXT (\".so\")\n#else\n#  define ACE_DLL_SUFFIX  ACE_TEXT (\".sl\")\n#endif  /* __ia64 */\n#if defined (__LP64__)\n#  define ACE_LD_SEARCH_PATH ACE_TEXT (\"LD_LIBRARY_PATH\")\n#else\n#  define ACE_LD_SEARCH_PATH ACE_TEXT (\"SHLIB_PATH\")\n#endif  /* __LP64__ */\n\n#if defined (_INCLUDE__STDC_A1_SOURCE)\n#  define ACE_HAS_3_PARAM_WCSTOK\n#endif\n\n#define ACE_HAS_3_PARAM_READDIR_R\n\n#define ACE_LACKS_STRUCT_LIFNUM\n\n//////////////////////////////////////////////////////////////////////////\n// STREAMS information\n//\n//////////////////////////////////////////////////////////////////////////\n\n// Platform supports STREAMS\n#define ACE_HAS_STREAMS\n// Compiler/platform supports struct strbuf.\n#define ACE_HAS_STRBUF_T\n// But the putmsg signature doesn't have it as const...\n// Well, it really does, but it depends on preprocessor defines.\n#define ACE_LACKS_CONST_STRBUF_PTR\n/* Platform supports TLI timod STREAMS module */\n#define ACE_HAS_TIMOD_H 1\n\n// Platform supports STREAM pipes\n// This is possible, but not by default - need to rebuild the kernel to\n// get them enabled - see pipe(2) and \"STREAMS/UX for the HP 9000\"\n// #define ACE_HAS_STREAM_PIPES\n\n/////////////////////////////////////////////////////////////////////////\n// TLI/XTI information\n//\n////////////////////////////////////////////////////////////////////////\n\n// Platform supports XTI (includes TLI).\n#define ACE_HAS_XTI\n// HP-UX 11 conforms to the XPG4 spec, which ACE calls broken for the\n// errmsg not being const...\n#define ACE_HAS_BROKEN_T_ERROR\n// The definitions of TCP_NODELAY and TCP_MAXSEG conflict between\n// sys/xti.h and netinet/tcp.h.\n#define ACE_HAS_CONFLICTING_XTI_MACROS\n/* Platform provides <sys/xti.h> header */\n#define ACE_HAS_SYS_XTI_H 1\n\n/////////////////////////////////////////////////////////////////////////\n// Threads information.\n//\n// Use of threads is controlled by the 'threads' argument to make.  See\n// include/makeinclude/platform_hpux_aCC.GNU for details. If it's not set,\n// the default is to enable it, since kernel threads are always available\n// on HP-UX 11, as opposed to 10.x where it was optional software.\n//\n////////////////////////////////////////////////////////////////////////\n\n#if defined (ACE_HAS_THREADS)\n#  if (ACE_HAS_THREADS == 0)\n#    undef ACE_HAS_THREADS\n#  endif /* ACE_HAS_THREADS == 0 */\n#else\n#  define ACE_HAS_THREADS\n#endif /* ACE_HAS_THREADS */\n\n#if defined (ACE_HAS_THREADS)\n\n#  if !defined (ACE_MT_SAFE)\n#    define ACE_MT_SAFE 1\n#  endif\n\n// HP-UX doesn't define _POSIX_THREADS since it doesn't implement all\n// features (lacks thread priority inheritance and protection), so\n// config-posix.h doesn't get this one...\n#  define ACE_HAS_PTHREADS\n#  define ACE_HAS_PTHREADS_UNIX98_EXT\n#  define ACE_HAS_PTHREAD_CONTINUE\n#  define ACE_HAS_PTHREAD_RESUME_NP\n#  define ACE_HAS_PTHREAD_SUSPEND\n#  define ACE_HAS_RECURSIVE_MUTEXES\n#  define ACE_HAS_THREAD_SPECIFIC_STORAGE\n#  define ACE_LACKS_PTHREAD_ATTR_SETSTACK\n#  define ACE_LACKS_CONDATTR_SETCLOCK\n#endif /* ACE_HAS_THREADS */\n\n#define ACE_HAS_POSIX_SEM\n\n// Platform has POSIX terminal interface.\n#define ACE_HAS_TERMIOS\n\n// gethostbyaddr does not handle IPv6-mapped-IPv4 addresses\n#define ACE_HAS_BROKEN_GETHOSTBYADDR_V4MAPPED\n\n#include /**/ \"ace/post.h\"\n#endif /* ACE_CONFIG_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/config-macosx-tiger.h": "/* -*- C++ -*- */\n// This configuration file is designed to work with the MacOS X operating system.\n\n#ifndef ACE_CONFIG_MACOSX_TIGER_H\n#define ACE_CONFIG_MACOSX_TIGER_H\n\n#if ! defined (__ACE_INLINE__)\n#define __ACE_INLINE__\n#endif /* ! __ACE_INLINE__ */\n\n#if !defined (ACE_SIZEOF_LONG_DOUBLE)\n# if (__GNUC__ == 3 && __GNUC_MINOR__ == 3)\n   // Size of long double in GCC 3.3 is 8.\n#  define ACE_SIZEOF_LONG_DOUBLE 8\n# else // Else, the compiler is GCC4\n   // For GCC4, the size is 16.\n#  define ACE_SIZEOF_LONG_DOUBLE 16\n# endif // GCC 3.3\n#endif // ACE_SIZEOF_LONG_DOUBLE\n\n#if defined (__GNUG__)\n# include \"ace/config-g++-common.h\"\n#endif /* __GNUG__ */\n\n#define ACE_HAS_WORKING_EXPLICIT_TEMPLATE_DESTRUCTOR\n\n#define ACE_SIZE_T_FORMAT_SPECIFIER_ASCII \"%lu\"\n\n#if !defined (__i386__)\n# if defined (ACE_HAS_PENTIUM)\n#  undef ACE_HAS_PENTIUM\n# endif /* ACE_HAS_PENTIUM */\n#else // __i386__\n# define ACE_HAS_PENTIUM\n#endif //__i386__\n\n#if !defined (_THREAD_SAFE)\n#define _THREAD_SAFE\n#endif /* _THREAD_SAFE */\n\n#define ACE_HAS_GPERF\n#define ACE_HAS_POSIX_SEM\n\n#define ACE_HAS_SUNOS4_GETTIMEOFDAY\n\n#define ACE_LACKS_STROPTS_H\n\n// Wcharness....\n#define ACE_HAS_WCHAR\n#define ACE_SIZEOF_WCHAR 4\n\n\n#define ACE_HAS_3_PARAM_WCSTOK\n#define ACE_LACKS_ITOW\n#define ACE_LACKS_WCSICMP\n#define ACE_LACKS_WCSNICMP\n#define ACE_LACKS_WCSDUP\n\n// Mac lacks the following pthread features\n#define ACE_LACKS_MUTEXATTR_PSHARED\n#define ACE_LACKS_CONDATTR_PSHARED\n//\n// Compiler/platform defines the sig_atomic_t typedef.\n#define ACE_HAS_SIG_ATOMIC_T\n\n// Compiler/platform supports SVR4 signal typedef\n#define ACE_HAS_SVR4_SIGNAL_T\n\n//Platform/compiler has the sigwait(2) prototype\n#define ACE_HAS_SIGWAIT\n\n#define ACE_HAS_AIO_CALLS\n\n//Platform supports sigsuspend()\n#define ACE_HAS_SIGSUSPEND\n\n#define ACE_LACKS_GETPGID\n#define ACE_LACKS_RWLOCK_T\n\n// Optimize ACE_Handle_Set for select().\n#define ACE_HAS_HANDLE_SET_OPTIMIZED_FOR_SELECT\n\n#define ACE_HAS_NONCONST_SELECT_TIMEVAL\n\n#define ACE_NEEDS_SCHED_H\n\n#define ACE_LACKS_MALLOC_H\n\n#define ACE_HAS_ALT_CUSERID\n\n// Platform supports POSIX timers via struct timespec.\n#define ACE_HAS_POSIX_TIME\n#define ACE_HAS_UALARM\n\n// Platform defines struct timespec but not timespec_t\n#define ACE_LACKS_TIMESPEC_T\n\n#define ACE_LACKS_STRRECVFD\n\n#define ACE_HAS_SOCKADDR_IN6_SIN6_LEN\n\n// Platform supports System V IPC (most versions of UNIX, but not Win32)\n#define ACE_HAS_SYSV_IPC\n\n// Compiler/platform contains the <sys/syscall.h> file.\n#define ACE_HAS_SYS_SYSCALL_H\n\n#define ACE_HAS_CONSISTENT_SIGNAL_PROTOTYPES\n\n// Compiler/platform supports alloca().\n// Although ACE does have alloca() on this compiler/platform combination, it is\n// disabled by default since it can be dangerous.  Uncomment the following line\n// if you ACE to use it.\n//#define ACE_HAS_ALLOCA\n\n// Compiler/platform correctly calls init()/fini() for shared libraries.\n#define ACE_HAS_AUTOMATIC_INIT_FINI\n\n// platform supports POSIX O_NONBLOCK semantics\n#define ACE_HAS_POSIX_NONBLOCK\n\n// platform supports IP multicast\n#define ACE_HAS_IP_MULTICAST\n#define ACE_LACKS_PERFECT_MULTICAST_FILTERING 1\n\n// Compiler/platform has the getrusage() system call.\n#define ACE_HAS_GETRUSAGE\n\n// Compiler supports the ssize_t typedef.\n#define ACE_HAS_SSIZE_T\n\n// Compiler/platform provides the sockio.h file.\n#define ACE_HAS_SYS_SOCKIO_H\n\n// Compiler/platform provides the socklen_t type.\n#define ACE_HAS_SOCKLEN_T\n\n// Defines the page size of the system.\n#define ACE_HAS_GETPAGESIZE\n\n// Platform provides <sys/filio.h> header.\n#define ACE_HAS_SYS_FILIO_H\n\n// Platform/compiler supports timezone * as second parameter to gettimeofday().\n#define ACE_HAS_TIMEZONE_GETTIMEOFDAY\n\n#define ACE_LACKS_SYS_MSG_H\n#define ACE_LACKS_SYSV_MSQ_PROTOS\n#define ACE_HAS_MSG\n#define ACE_HAS_4_4BSD_SENDMSG_RECVMSG\n#define ACE_HAS_NONCONST_MSGSND\n\n#if !defined (ACE_MT_SAFE)\n# define ACE_MT_SAFE 1\n#endif\n\n#if ACE_MT_SAFE == 1\n// Yes, we do have threads.\n# define ACE_HAS_THREADS\n// And they're even POSIX pthreads\n# define ACE_HAS_PTHREADS\n# define ACE_HAS_PTHREAD_SCHEDPARAM\n# define ACE_HAS_THREAD_SPECIFIC_STORAGE\n#endif  /* ACE_MT_SAFE == 1 */\n\n#define ACE_LACKS_THREAD_PROCESS_SCOPING\n\n#define ACE_HAS_DIRENT\n#define ACE_LACKS_POLL_H\n#define ACE_LACKS_SEARCH_H\n\n#define ACE_LACKS_SETSCHED\n//#define ACE_HAS_RECURSIVE_MUTEXES\n\n// Platform has POSIX terminal interface.\n#define ACE_HAS_TERMIOS\n\n#define ACE_HAS_SEMUN\n#define ACE_HAS_SIGINFO_T\n#define ACE_LACKS_SIGINFO_H\n#define ACE_HAS_UCONTEXT_T\n#define ACE_HAS_GETIFADDRS\n#define ACE_LACKS_STATIC_DATA_MEMBER_TEMPLATES\n#define ACE_LACKS_UNNAMED_SEMAPHORE\n\n// dlcompat package (not part of base Darwin) is needed for dlopen().\n// You may download directly from sourceforge and install or use fink\n// Fink installer puts libraries in /sw/lib and headers in /sw/include\n// In order to install dlcompat do the following:\n//   - download fink from http://fink.sf.net\n//   - type:\n//        fink install dlcompat\n// as of Dec 2002, if you use fink you will need to uncomment the next line\n// #define ACE_NEEDS_DL_UNDERSCORE\n#define ACE_HAS_SVR4_DYNAMIC_LINKING\n#define ACE_LD_SEARCH_PATH ACE_TEXT (\"DYLD_LIBRARY_PATH\")\n#define ACE_DLL_SUFFIX ACE_TEXT (\".dylib\")\n//#define ACE_LACKS_DLCLOSE\n\n// gperf seems to need this\n//#define ACE_HAS_NONSTATIC_OBJECT_MANAGER\n\n#define ACE_LACKS_UNSETENV\n#define ACE_LACKS_ISCTYPE\n\n#if defined(__APPLE_CC__) && (__APPLE_CC__ < 1173)\n#error \"Compiler must be upgraded, see http://developer.apple.com\"\n#endif /* __APPLE_CC__ */\n\n#endif /* ACE_CONFIG_MACOSX_TIGER_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/config-macosx-panther.h": "/* -*- C++ -*- */\n// This configuration file is designed to work with the MacOS X operating system.\n\n#ifndef ACE_CONFIG_MACOSX_H\n#define ACE_CONFIG_MACOSX_H\n\n#if ! defined (__ACE_INLINE__)\n#define __ACE_INLINE__\n#endif /* ! __ACE_INLINE__ */\n\n#if defined (__GNUG__)\n# include \"ace/config-g++-common.h\"\n#endif /* __GNUG__ */\n\n#define ACE_LACKS_SUSECONDS_T\n#define ACE_SIZE_T_FORMAT_SPECIFIER_ASCII \"%lu\"\n\n#if defined (ACE_HAS_PENTIUM)\n# undef ACE_HAS_PENTIUM\n#endif /* ACE_HAS_PENTIUM */\n\n#if !defined (_THREAD_SAFE)\n#define _THREAD_SAFE\n#endif /* _THREAD_SAFE */\n\n#define ACE_HAS_GPERF\n#define ACE_HAS_POSIX_SEM\n\n//#define ACE_HAS_SVR4_TLI\n\n#define ACE_LACKS_STROPTS_H\n#define ACE_LACKS_WCHAR_H\n\n//\n// Compiler/platform defines the sig_atomic_t typedef.\n#define ACE_HAS_SIG_ATOMIC_T\n\n// Compiler/platform supports SVR4 signal typedef\n#define ACE_HAS_SVR4_SIGNAL_T\n\n//Platform/compiler has the sigwait(2) prototype\n#define ACE_HAS_SIGWAIT\n\n//Platform supports sigsuspend()\n#define ACE_HAS_SIGSUSPEND\n\n//#define ACE_HAS_RECURSIVE_THR_EXIT_SEMANTICS\n#define ACE_LACKS_GETPGID\n#define ACE_LACKS_RWLOCK_T\n\n// Optimize ACE_Handle_Set for select().\n#define ACE_HAS_HANDLE_SET_OPTIMIZED_FOR_SELECT\n\n#define ACE_HAS_NONCONST_SELECT_TIMEVAL\n\n#define ACE_NEEDS_SCHED_H\n\n// Use of <malloc.h> is deprecated.\n#define ACE_LACKS_MALLOC_H\n\n#define ACE_HAS_ALT_CUSERID\n\n// Platform supports POSIX timers via struct timespec.\n#define ACE_HAS_POSIX_TIME\n#define ACE_HAS_UALARM\n\n// Platform defines struct timespec but not timespec_t\n#define ACE_LACKS_TIMESPEC_T\n\n#define ACE_LACKS_STRRECVFD\n\n#define ACE_HAS_SOCKADDR_IN_SIN_LEN\n#define ACE_HAS_SOCKADDR_IN6_SIN6_LEN\n\n// Platform supports System V IPC (most versions of UNIX, but not Win32)\n#define ACE_HAS_SYSV_IPC\n\n// Compiler/platform contains the <sys/syscall.h> file.\n#define ACE_HAS_SYS_SYSCALL_H\n\n#define ACE_HAS_CONSISTENT_SIGNAL_PROTOTYPES\n\n// Compiler/platform supports alloca().\n// Although ACE does have alloca() on this compiler/platform combination, it is\n// disabled by default since it can be dangerous.  Uncomment the following line\n// if you ACE to use it.\n//#define ACE_HAS_ALLOCA\n\n// Compiler/platform correctly calls init()/fini() for shared libraries.\n#define ACE_HAS_AUTOMATIC_INIT_FINI\n\n// Explicit dynamic linking permits \"lazy\" symbol resolution\n//#define ACE_HAS_RTLD_LAZY_V\n\n// platform supports POSIX O_NONBLOCK semantics\n#define ACE_HAS_POSIX_NONBLOCK\n\n// platform supports IP multicast\n#define ACE_HAS_IP_MULTICAST\n#define ACE_LACKS_PERFECT_MULTICAST_FILTERING 1\n\n// Compiler/platform has the getrusage() system call.\n#define ACE_HAS_GETRUSAGE\n\n// Compiler supports the ssize_t typedef.\n#define ACE_HAS_SSIZE_T\n\n// Compiler/platform provides the sockio.h file.\n#define ACE_HAS_SYS_SOCKIO_H\n\n// Defines the page size of the system.\n#define ACE_HAS_GETPAGESIZE\n\n// Platform provides <sys/filio.h> header.\n#define ACE_HAS_SYS_FILIO_H\n\n// Platform/compiler supports timezone * as second parameter to gettimeofday().\n#define ACE_HAS_TIMEZONE_GETTIMEOFDAY\n\n#define ACE_LACKS_SYS_MSG_H\n#define ACE_LACKS_SYSV_MSQ_PROTOS\n#define ACE_HAS_MSG\n#define ACE_HAS_4_4BSD_SENDMSG_RECVMSG\n#define ACE_HAS_NONCONST_MSGSND\n\n#if !defined (ACE_MT_SAFE)\n# define ACE_MT_SAFE 1\n#endif\n\n#if ACE_MT_SAFE == 1\n// Yes, we do have threads.\n# define ACE_HAS_THREADS\n// And they're even POSIX pthreads\n# define ACE_HAS_PTHREADS\n# define ACE_HAS_PTHREAD_SCHEDPARAM\n# define ACE_HAS_THREAD_SPECIFIC_STORAGE\n#endif  /* ACE_MT_SAFE == 1 */\n\n# define ACE_LACKS_THREAD_PROCESS_SCOPING\n\n#define ACE_HAS_DIRENT\n#define ACE_LACKS_POLL_H\n#define ACE_LACKS_SEARCH_H\n\n#define ACE_LACKS_SETSCHED\n//#define ACE_HAS_RECURSIVE_MUTEXES\n\n// Platform has POSIX terminal interface.\n#define ACE_HAS_TERMIOS\n\n#define ACE_HAS_SEMUN\n#define ACE_HAS_SIGINFO_T\n#define ACE_LACKS_SIGINFO_H\n#define ACE_HAS_UCONTEXT_T\n#define ACE_HAS_GETIFADDRS\n#define ACE_LACKS_STATIC_DATA_MEMBER_TEMPLATES\n#define ACE_LACKS_UNNAMED_SEMAPHORE\n\n// dlcompat package (not part of base Darwin) is needed for dlopen().\n// You may download directly from sourceforge and install or use fink\n// Fink installer puts libraries in /sw/lib and headers in /sw/include\n// In order to install dlcompat do the following:\n//   - download fink from http://fink.sf.net\n//   - type:\n//        fink install dlcompat\n// as of Dec 2002, if you use fink you will need to uncomment the next line\n//#define ACE_NEEDS_DL_UNDERSCORE\n#define ACE_HAS_SVR4_DYNAMIC_LINKING\n#define ACE_LD_SEARCH_PATH ACE_TEXT (\"DYLD_LIBRARY_PATH\")\n#define ACE_DLL_SUFFIX ACE_TEXT (\".dylib\")\n//#define ACE_LACKS_DLCLOSE\n\n// gperf seems to need this\n//#define ACE_HAS_NONSTATIC_OBJECT_MANAGER\n\n#if defined(__APPLE_CC__) && (__APPLE_CC__ < 1173)\n#error \"Compiler must be upgraded, see http://developer.apple.com\"\n#endif /* __APPLE_CC__ */\n\n#endif /* ACE_CONFIG_MACOSX_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/config-macosx-leopard.h": "/* -*- C++ -*- */\n// This configuration file is designed to work with the MacOS X operating system.\n\n#ifndef ACE_CONFIG_MACOSX_LEOPARD_H\n#define ACE_CONFIG_MACOSX_LEOPARD_H\n\n#include <Availability.h>\n\n#define ACE_HAS_MAC_OSX\n#define ACE_HAS_NET_IF_DL_H\n\n#define ACE_HAS_VOID_UNSETENV\n\n#if ! defined (__ACE_INLINE__)\n#define __ACE_INLINE__\n#endif /* ! __ACE_INLINE__ */\n\n#if !defined (ACE_SIZEOF_LONG_DOUBLE)\n# if (__GNUC__ == 3 && __GNUC_MINOR__ == 3)\n   // Size of long double in GCC 3.3 is 8.\n#  define ACE_SIZEOF_LONG_DOUBLE 8\n# else // Else, the compiler is GCC4\n   // For GCC4, the size is 16.\n#  define ACE_SIZEOF_LONG_DOUBLE 16\n# endif // GCC 3.3\n#endif // ACE_SIZEOF_LONG_DOUBLE\n\n#if defined (__GNUG__)\n# include \"ace/config-g++-common.h\"\n#endif /* __GNUG__ */\n\n#define ACE_ISCTYPE_EQUIVALENT __isctype\n\n#define ACE_HAS_WORKING_EXPLICIT_TEMPLATE_DESTRUCTOR\n\n#define ACE_SIZE_T_FORMAT_SPECIFIER_ASCII \"%lu\"\n\n#if !defined (__i386__)\n# if defined (ACE_HAS_PENTIUM)\n#  undef ACE_HAS_PENTIUM\n# endif /* ACE_HAS_PENTIUM */\n#else // __i386__\n# define ACE_HAS_PENTIUM\n#endif //__i386__\n\n#if !defined (_THREAD_SAFE)\n#define _THREAD_SAFE\n#endif /* _THREAD_SAFE */\n\n#define ACE_HAS_GPERF\n#define ACE_HAS_POSIX_SEM\n#define ACE_HAS_SIOCGIFCONF\n\n#define ACE_HAS_SUNOS4_GETTIMEOFDAY\n\n#define ACE_LACKS_STROPTS_H\n\n// Platform provides <execinfo.h> header.\n#define ACE_HAS_EXECINFO_H\n\n// Wcharness....\n#define ACE_HAS_WCHAR\n#define ACE_SIZEOF_WCHAR 4\n\n\n#define ACE_HAS_3_PARAM_WCSTOK\n#define ACE_LACKS_ITOW\n#define ACE_LACKS_WCSICMP\n#define ACE_LACKS_WCSNICMP\n#define ACE_LACKS_WCSDUP\n\n// Mac lacks the following pthread features\n#define ACE_LACKS_MUTEXATTR_PSHARED\n#define ACE_LACKS_CONDATTR_PSHARED\n//\n// Compiler/platform defines the sig_atomic_t typedef.\n#define ACE_HAS_SIG_ATOMIC_T\n\n// Compiler/platform supports SVR4 signal typedef\n#define ACE_HAS_SVR4_SIGNAL_T\n\n//Platform/compiler has the sigwait(2) prototype\n#define ACE_HAS_SIGWAIT\n\n#define ACE_HAS_AIO_CALLS\n\n#define ACE_HAS_ICMP_SUPPORT 1\n\n//Platform supports sigsuspend()\n#define ACE_HAS_SIGSUSPEND\n\n#define ACE_LACKS_GETPGID\n#define ACE_LACKS_RWLOCK_T\n\n// Optimize ACE_Handle_Set for select().\n#define ACE_HAS_HANDLE_SET_OPTIMIZED_FOR_SELECT\n\n#define ACE_HAS_NONCONST_SELECT_TIMEVAL\n\n#define ACE_NEEDS_SCHED_H\n\n#define ACE_LACKS_MALLOC_H\n\n#define ACE_HAS_ALT_CUSERID\n\n// Platform supports POSIX timers via struct timespec.\n#define ACE_HAS_POSIX_TIME\n#define ACE_HAS_UALARM\n\n// Platform defines struct timespec but not timespec_t\n#define ACE_LACKS_TIMESPEC_T\n\n#define ACE_LACKS_STRRECVFD\n\n#define ACE_HAS_SOCKADDR_IN_SIN_LEN\n#define ACE_HAS_SOCKADDR_IN6_SIN6_LEN\n\n// Platform supports System V IPC (most versions of UNIX, but not Win32)\n#define ACE_HAS_SYSV_IPC\n\n// Compiler/platform contains the <sys/syscall.h> file.\n#define ACE_HAS_SYS_SYSCALL_H\n\n#define ACE_HAS_CONSISTENT_SIGNAL_PROTOTYPES\n\n// Compiler/platform supports alloca().\n// Although ACE does have alloca() on this compiler/platform combination, it is\n// disabled by default since it can be dangerous.  Uncomment the following line\n// if you ACE to use it.\n//#define ACE_HAS_ALLOCA\n\n// Compiler/platform correctly calls init()/fini() for shared libraries.\n#define ACE_HAS_AUTOMATIC_INIT_FINI\n\n// platform supports POSIX O_NONBLOCK semantics\n#define ACE_HAS_POSIX_NONBLOCK\n\n// platform supports IP multicast\n#define ACE_HAS_IP_MULTICAST\n#define ACE_LACKS_PERFECT_MULTICAST_FILTERING 1\n\n// Compiler/platform has the getrusage() system call.\n#define ACE_HAS_GETRUSAGE\n\n// Compiler supports the ssize_t typedef.\n#define ACE_HAS_SSIZE_T\n\n// Compiler/platform provides the sockio.h file.\n#define ACE_HAS_SYS_SOCKIO_H\n\n// Compiler/platform provides the socklen_t type.\n#define ACE_HAS_SOCKLEN_T\n\n// Defines the page size of the system.\n#define ACE_HAS_GETPAGESIZE\n\n// Platform provides <sys/filio.h> header.\n#define ACE_HAS_SYS_FILIO_H\n\n// Platform/compiler supports timezone * as second parameter to gettimeofday().\n#define ACE_HAS_TIMEZONE_GETTIMEOFDAY\n\n#define ACE_LACKS_SYS_MSG_H\n#define ACE_LACKS_SYSV_MSQ_PROTOS\n#define ACE_HAS_MSG\n#define ACE_HAS_4_4BSD_SENDMSG_RECVMSG\n#define ACE_HAS_NONCONST_MSGSND\n\n#if !defined (ACE_MT_SAFE)\n# define ACE_MT_SAFE 1\n#endif\n\n#if ACE_MT_SAFE == 1\n// Yes, we do have threads.\n# define ACE_HAS_THREADS\n// And they're even POSIX pthreads\n# define ACE_HAS_PTHREADS\n# define ACE_HAS_PTHREAD_SCHEDPARAM\n# define ACE_HAS_THREAD_SPECIFIC_STORAGE\n#endif  /* ACE_MT_SAFE == 1 */\n\n#define ACE_LACKS_THREAD_PROCESS_SCOPING\n\n#define ACE_HAS_DIRENT\n#define ACE_LACKS_POLL_H\n#define ACE_LACKS_SEARCH_H\n\n#define ACE_LACKS_SETSCHED\n//#define ACE_HAS_RECURSIVE_MUTEXES\n\n// Platform has POSIX terminal interface.\n#define ACE_HAS_TERMIOS\n\n#define ACE_HAS_SEMUN\n#define ACE_HAS_SIGINFO_T\n#define ACE_LACKS_SIGINFO_H\n#define ACE_HAS_UCONTEXT_T\n#define ACE_HAS_GETIFADDRS\n#define ACE_LACKS_STATIC_DATA_MEMBER_TEMPLATES\n#define ACE_LACKS_UNNAMED_SEMAPHORE\n\n#if !defined (__DARWIN_UNIX03)\n#define ACE_HAS_VOID_UNSETENV\n#endif\n\n#define ACE_LACKS_CONDATTR_SETCLOCK\n#if __MAC_OS_X_VERSION_MAX_ALLOWED < 101200\n#define ACE_LACKS_CLOCKID_T\n#define ACE_LACKS_CLOCK_MONOTONIC\n#define ACE_LACKS_CLOCK_REALTIME\n#endif\n// dlcompat package (not part of base Darwin) is needed for dlopen().\n// You may download directly from sourceforge and install or use fink\n// Fink installer puts libraries in /sw/lib and headers in /sw/include\n// In order to install dlcompat do the following:\n//   - download fink from http://fink.sf.net\n//   - type:\n//        fink install dlcompat\n// as of Dec 2002, if you use fink you will need to uncomment the next line\n// #define ACE_NEEDS_DL_UNDERSCORE\n#define ACE_HAS_SVR4_DYNAMIC_LINKING\n#define ACE_LD_SEARCH_PATH ACE_TEXT (\"DYLD_LIBRARY_PATH\")\n#define ACE_DLL_SUFFIX ACE_TEXT (\".dylib\")\n//#define ACE_LACKS_DLCLOSE\n\n// gperf seems to need this\n//#define ACE_HAS_NONSTATIC_OBJECT_MANAGER\n\n#define ACE_IOCTL_TYPE_ARG2 unsigned long\n\n#if defined(__APPLE_CC__) && (__APPLE_CC__ < 1173)\n#error \"Compiler must be upgraded, see http://developer.apple.com\"\n#endif /* __APPLE_CC__ */\n\n#endif /* ACE_CONFIG_MACOSX_LEOPARD_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/DLL.cpp": "#include \"ace/DLL.h\"\n\n#include \"ace/Log_Category.h\"\n#include \"ace/ACE.h\"\n#include \"ace/DLL_Manager.h\"\n#include \"ace/OS_NS_string.h\"\n#include \"ace/OS_NS_dlfcn.h\"\n#include \"ace/OS_NS_Thread.h\"\n\n#include <algorithm>\n\n\n\n  ACE_BEGIN_VERSIONED_NAMESPACE_DECL\n\n// Default constructor. Also, by default, the object will be closed\n// before it is destroyed.\n\nACE_DLL::ACE_DLL (bool close_handle_on_destruction)\n  : open_mode_ (0),\n    dll_name_ (0),\n    close_handle_on_destruction_ (close_handle_on_destruction),\n    dll_handle_ (0),\n    error_ (0)\n{\n  ACE_TRACE (\"ACE_DLL::ACE_DLL (int)\");\n}\n\nACE_DLL::ACE_DLL (const ACE_DLL &rhs)\n  : open_mode_ (0),\n    dll_name_ (0),\n    close_handle_on_destruction_ (false),\n    dll_handle_ (0),\n    error_ (0)\n{\n  ACE_TRACE (\"ACE_DLL::ACE_DLL (const ACE_DLL &)\");\n\n  if (rhs.dll_name_\n      // This will automatically up the refcount.\n      && this->open (rhs.dll_name_,\n                     rhs.open_mode_,\n                     rhs.close_handle_on_destruction_) != 0\n      && ACE::debug ())\n    ACELIB_ERROR ((LM_ERROR,\n    ACE_TEXT (\"ACE_DLL::copy_ctor: error: %s\\n\"),\n    this->error ()));\n}\n\n// Assignment operator\n\nACE_DLL &\nACE_DLL::operator= (const ACE_DLL &rhs)\n{\n  ACE_TRACE (\"ACE_DLL::operator= (const ACE_DLL &)\");\n\n  ACE_DLL tmp (rhs);\n\n  std::swap (this->open_mode_, tmp.open_mode_);\n  std::swap (this->dll_name_, tmp.dll_name_);\n  std::swap (this->close_handle_on_destruction_,\n             tmp.close_handle_on_destruction_);\n  std::swap (this->dll_handle_, tmp.dll_handle_);\n  std::swap (this->error_, tmp.error_);\n\n  return *this;\n}\n\n\n// If the library name and the opening mode are specified than on\n// object creation the library is implicitly opened.\n\nACE_DLL::ACE_DLL (const ACE_TCHAR *dll_name,\n                  int open_mode,\n                  bool close_handle_on_destruction)\n  : open_mode_ (open_mode),\n    dll_name_ (0),\n    close_handle_on_destruction_ (close_handle_on_destruction),\n    dll_handle_ (0),\n    error_ (0)\n{\n  ACE_TRACE (\"ACE_DLL::ACE_DLL\");\n\n  if (this->open (dll_name, this->open_mode_, close_handle_on_destruction) != 0\n      && ACE::debug ())\n    ACELIB_ERROR ((LM_ERROR,\n                ACE_TEXT (\"ACE_DLL::open: error calling open: %s\\n\"),\n                this->error ()));\n}\n\n// The library is closed before the class gets destroyed depending on\n// the close_handle_on_destruction value specified which is stored in\n// close_handle_on_destruction_.\n\nACE_DLL::~ACE_DLL (void)\n{\n  ACE_TRACE (\"ACE_DLL::~ACE_DLL\");\n\n  this->close ();\n\n  // Normally delete()d in ACE_DLL::close().  However, that may not\n  // occur if full ACE_DLL initialization is interrupted due to errors\n  // (e.g. attempting to open a DSO/DLL that does not exist).  Make\n  // sure this->dll_name_ is deallocated.\n#if defined (ACE_HAS_ALLOC_HOOKS)\n  ACE_Allocator::instance()->free (this->dll_name_);\n#else\n  delete [] this->dll_name_;\n#endif /* ACE_HAS_ALLOC_HOOKS */\n}\n\n// This method opens the library based on the mode specified using the\n// ACE_SHLIB_HANDLE which is obtained on making the ACE_OS::dlopen call.\n// The default mode is:\n// RTLD_LAZY     Only references to data symbols are relocate when the\n//               object is first loaded.\n// The other modes include:\n//  RTLD_NOW     All necessary relocations are performed when the\n//               object is first loaded.\n//  RTLD_GLOBAL  The object symbols are made available for the\n//               relocation processing of any other object.\n\nint\nACE_DLL::open (const ACE_TCHAR *dll_filename,\n               int open_mode,\n               bool close_handle_on_destruction)\n{\n  ACE_TRACE (\"ACE_DLL::open\");\n\n  return open_i (dll_filename, open_mode, close_handle_on_destruction);\n}\n\nint\nACE_DLL::open_i (const ACE_TCHAR *dll_filename,\n                 int open_mode,\n                 bool close_handle_on_destruction,\n                 ACE_SHLIB_HANDLE handle)\n{\n  ACE_TRACE (\"ACE_DLL::open_i\");\n\n  this->error_ = 0;\n  this->errmsg_.clear (true);\n\n  if (!dll_filename)\n    {\n      if (ACE::debug ())\n        ACELIB_ERROR ((LM_ERROR,\n                    ACE_TEXT (\"ACE_DLL::open_i: dll_name is %s\\n\"),\n                    this->dll_name_ == 0 ? ACE_TEXT (\"(null)\")\n        : this->dll_name_));\n      return -1;\n    }\n\n  if (this->dll_handle_)\n    {\n      // If we have a good handle and its the same name, just return.\n      if (ACE_OS::strcmp (this->dll_name_, dll_filename) == 0)\n        return 0;\n      else\n        this->close ();\n    }\n\n  if (!this->dll_name_)\n    this->dll_name_ = ACE::strnew (dll_filename);\n\n  this->open_mode_ = open_mode;\n  this->close_handle_on_destruction_ = close_handle_on_destruction;\n\n  ACE_DLL_Handle::ERROR_STACK errors;\n  this->dll_handle_ = ACE_DLL_Manager::instance()->open_dll (this->dll_name_,\n                                                             this->open_mode_,\n                                                             handle,\n                                                             &errors);\n\n  if (!this->dll_handle_)\n    {\n      ACE_TString errtmp;\n      while (!errors.is_empty ())\n        {\n          errors.pop (errtmp);\n          if (this->errmsg_.length () > 0)\n            this->errmsg_ += ACE_TEXT (\"\\n\");\n          this->errmsg_ += errtmp;\n        }\n      this->error_ = 1;\n    }\n\n  return this->error_ ? -1 : 0;\n}\n\n// The symbol refernce of the name specified is obtained.\n\nvoid *\nACE_DLL::symbol (const ACE_TCHAR *sym_name, int ignore_errors)\n{\n  ACE_TRACE (\"ACE_DLL::symbol\");\n\n  this->error_ = 0;\n  this->errmsg_.clear (true);\n\n  void *sym = 0;\n  if (this->dll_handle_)\n    sym = this->dll_handle_->symbol (sym_name, ignore_errors, this->errmsg_);\n\n  if (!sym)\n    this->error_ = 1;\n\n  return sym;\n}\n\n// The library is closed using the ACE_SHLIB_HANDLE object, i.e., the\n// shared object is now disassociated form the current process.\n\nint\nACE_DLL::close (void)\n{\n  ACE_TRACE (\"ACE_DLL::close\");\n\n  int retval = 0;\n\n  if (this->dll_handle_\n      && this->close_handle_on_destruction_\n      && this->dll_name_\n      && (retval = ACE_DLL_Manager::instance ()->close_dll (this->dll_name_)) != 0)\n    this->error_ = 1;\n\n  // Even if close_dll() failed, go ahead and cleanup.\n  this->dll_handle_ = 0;\n#if defined (ACE_HAS_ALLOC_HOOKS)\n  ACE_Allocator::instance()->free (this->dll_name_);\n#else\n  delete [] this->dll_name_;\n#endif /* ACE_HAS_ALLOC_HOOKS */\n  this->dll_name_ = 0;\n  this->close_handle_on_destruction_ = false;\n\n  return retval;\n}\n\n// This method is used return the last error of a library operation.\n\nACE_TCHAR *\nACE_DLL::error (void) const\n{\n  ACE_TRACE (\"ACE_DLL::error\");\n  if (this->error_)\n    {\n      return const_cast<ACE_TCHAR*> (this->errmsg_.c_str ());\n    }\n\n  return 0;\n}\n\n// Return the handle to the user either temporarily or forever, thus\n// orphaning it. If 0 means the user wants the handle forever and if 1\n// means the user temporarily wants to take the handle.\n\nACE_SHLIB_HANDLE\nACE_DLL::get_handle (bool become_owner) const\n{\n  ACE_TRACE (\"ACE_DLL::get_handle\");\n\n  ACE_SHLIB_HANDLE handle = ACE_SHLIB_INVALID_HANDLE;\n\n  if (this->dll_handle_)\n    handle = this->dll_handle_->get_handle (become_owner);\n\n  return handle;\n}\n\n// Set the handle for the DLL. By default, the object will be closed\n// before it is destroyed.\n\nint\nACE_DLL::set_handle (ACE_SHLIB_HANDLE handle,\n                     bool close_handle_on_destruction)\n{\n  ACE_TRACE (\"ACE_DLL::set_handle\");\n\n  // Create a unique name.  Note that this name is only quaranteed\n  // to be unique for the life of this object.\n  ACE_TCHAR temp[ACE_UNIQUE_NAME_LEN];\n  ACE_OS::unique_name (this, temp, ACE_UNIQUE_NAME_LEN);\n\n  return this->open_i (temp, 1, close_handle_on_destruction, handle);\n}\n\nACE_END_VERSIONED_NAMESPACE_DECL\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/OS_NS_dlfcn.inl": "// -*- C++ -*-\n#include \"ace/OS_NS_macros.h\"\n#include \"ace/OS_NS_errno.h\"\n#include \"ace/OS_NS_fcntl.h\"\n#include \"ace/OS_NS_string.h\"\n#include \"ace/OS_NS_unistd.h\"\n#include \"ace/Default_Constants.h\"\n#include \"ace/os_include/os_fcntl.h\"\n#include \"ace/os_include/os_string.h\"\n\n#if defined (ACE_WIN32) && defined (ACE_HAS_PHARLAP)\n# include \"ace/OS_NS_stdio.h\"\n#endif\n\n#if defined (ACE_USES_ASM_SYMBOL_IN_DLSYM)\n#  include \"ace/OS_Memory.h\"\n#  include \"ace/OS_NS_string.h\"\n#endif /* ACE_USES_ASM_SYMBOL_IN_DLSYM */\n\nACE_BEGIN_VERSIONED_NAMESPACE_DECL\n\nACE_INLINE int\nACE_OS::dlclose (ACE_SHLIB_HANDLE handle)\n{\n  ACE_OS_TRACE (\"ACE_OS::dlclose\");\n#if defined (ACE_LACKS_DLCLOSE)\n  ACE_UNUSED_ARG (handle);\n  return 0;\n#elif defined (ACE_HAS_SVR4_DYNAMIC_LINKING)\n\n# if !defined (ACE_HAS_AUTOMATIC_INIT_FINI)\n  // SunOS4 does not automatically call _fini()!\n  void *ptr;\n\n  ACE_OSCALL (::dlsym (handle, ACE_TEXT (\"_fini\")), void *, 0, ptr);\n\n  if (ptr != 0)\n    (*((int (*)(void)) ptr)) (); // Call _fini hook explicitly.\n# endif /* ACE_HAS_AUTOMATIC_INIT_FINI */\n  ACE_OSCALL_RETURN (::dlclose (handle), int, -1);\n#elif defined (ACE_WIN32)\n  ACE_WIN32CALL_RETURN (ACE_ADAPT_RETVAL (::FreeLibrary (handle), ace_result_), int, -1);\n#elif defined (__hpux)\n  // HP-UX 10.x and 32-bit 11.00 do not pay attention to the ref count\n  // when unloading a dynamic lib.  So, if the ref count is more than\n  // 1, do not unload the lib.  This will cause a library loaded more\n  // than once to not be unloaded until the process runs down, but\n  // that's life.  It's better than unloading a library that's in use.\n  // So far as I know, there's no way to decrement the refcnt that the\n  // kernel is looking at - the shl_descriptor is a copy of what the\n  // kernel has, not the actual struct.  On 64-bit HP-UX using dlopen,\n  // this problem has been fixed.\n  struct shl_descriptor  desc;\n  if (shl_gethandle_r (handle, &desc) == -1)\n    return -1;\n  if (desc.ref_count > 1)\n    return 0;\n# if defined(__GNUC__) || __cplusplus >= 199707L\n  ACE_OSCALL_RETURN (::shl_unload (handle), int, -1);\n# else\n  ACE_OSCALL_RETURN (::cxxshl_unload (handle), int, -1);\n# endif  /* aC++ vs. Hp C++ */\n#else\n  ACE_UNUSED_ARG (handle);\n  ACE_NOTSUP_RETURN (-1);\n#endif /* ACE_HAS_SVR4_DYNAMIC_LINKING */\n}\n\nACE_INLINE ACE_TCHAR *\nACE_OS::dlerror (void)\n{\n  ACE_OS_TRACE (\"ACE_OS::dlerror\");\n# if defined (ACE_HAS_SVR4_DYNAMIC_LINKING)\n  const char *err = 0;\n  ACE_OSCALL (::dlerror (), const char *, 0, err);\n  if (err == 0)\n    return 0;\n#   if defined (ACE_USES_WCHAR)\n  const size_t BufLen = 256;\n  static wchar_t buf[BufLen];\n  ACE_OS::strncpy (buf, ACE_TEXT_CHAR_TO_TCHAR (err), BufLen);\n  return buf;\n#   else\n  return const_cast <char *> (err);\n#   endif /* ACE_USES_WCHAR */\n# elif defined (__hpux) || defined (ACE_VXWORKS)\n  //FUZZ: disable check_for_lack_ACE_OS\n  ACE_OSCALL_RETURN (::strerror(errno), char *, 0);\n  //FUZZ: enable check_for_lack_ACE_OS\n# elif defined (ACE_WIN32)\n  static ACE_TCHAR buf[128];\n#   if defined (ACE_HAS_PHARLAP)\n  ACE_OS::sprintf (buf, \"error code %d\", GetLastError());\n#   else\n  ACE_TEXT_FormatMessage (FORMAT_MESSAGE_FROM_SYSTEM,\n                          0,\n                          ::GetLastError (),\n                          0,\n                          buf,\n                          sizeof buf / sizeof buf[0],\n                          0);\n#   endif /* ACE_HAS_PHARLAP */\n  return buf;\n# else\n  ACE_NOTSUP_RETURN (0);\n# endif /* ACE_HAS_SVR4_DYNAMIC_LINKING */\n}\n\nACE_INLINE ACE_SHLIB_HANDLE\nACE_OS::dlopen (const ACE_TCHAR *fname,\n                int mode)\n{\n  ACE_OS_TRACE (\"ACE_OS::dlopen\");\n\n# if defined (ACE_HAS_SVR4_DYNAMIC_LINKING)\n  void *handle;\n#   if defined (ACE_HAS_SGIDLADD)\n  ACE_OSCALL\n    (::sgidladd (ACE_TEXT_ALWAYS_CHAR (fname), mode), void *, 0, handle);\n#   else\n  ACE_OSCALL\n    (::dlopen (ACE_TEXT_ALWAYS_CHAR (fname), mode), void *, 0, handle);\n#   endif /* ACE_HAS_SGIDLADD */\n#   if !defined (ACE_HAS_AUTOMATIC_INIT_FINI)\n  if (handle != 0)\n    {\n      void *ptr;\n      // Some systems (e.g., SunOS4) do not automatically call _init(), so\n      // we'll have to call it manually.\n\n      ACE_OSCALL (::dlsym (handle, ACE_TEXT (\"_init\")), void *, 0, ptr);\n\n      if (ptr != 0 && (*((int (*)(void)) ptr)) () == -1) // Call _init hook explicitly.\n        {\n          // Close down the handle to prevent leaks.\n          ::dlclose (handle);\n          return 0;\n        }\n    }\n#   endif /* ACE_HAS_AUTOMATIC_INIT_FINI */\n  return handle;\n# elif defined (ACE_WIN32)\n  ACE_UNUSED_ARG (mode);\n\n  ACE_WIN32CALL_RETURN (ACE_TEXT_LoadLibrary (fname), ACE_SHLIB_HANDLE, 0);\n# elif defined (__hpux)\n\n#   if defined(__GNUC__) || __cplusplus >= 199707L\n  ACE_OSCALL_RETURN (::shl_load(fname, mode, 0L), ACE_SHLIB_HANDLE, 0);\n#   else\n  ACE_OSCALL_RETURN (::cxxshl_load(fname, mode, 0L), ACE_SHLIB_HANDLE, 0);\n#   endif  /* aC++ vs. Hp C++ */\n# elif defined (ACE_VXWORKS) && !defined (__RTP__)\n  ACE_UNUSED_ARG (mode);\n  MODULE* handle = 0;\n  // Open readonly\n  ACE_HANDLE filehandle = ACE_OS::open (fname,\n                                        O_RDONLY,\n                                        ACE_DEFAULT_FILE_PERMS);\n\n  if (filehandle != ACE_INVALID_HANDLE)\n    {\n      ACE_OS::last_error(0);\n      ACE_OSCALL ( ::loadModule (filehandle, LOAD_GLOBAL_SYMBOLS|LOAD_COMMON_MATCH_ALL ), MODULE *, 0, handle);\n      int loaderror = ACE_OS::last_error();\n      ACE_OS::close (filehandle);\n\n      if ( (loaderror != 0) && (handle != 0) )\n        {\n          // ouch something went wrong most likely unresolved externals\n          if (handle)\n            ::unldByModuleId ( handle, 0 );\n          handle = 0;\n        }\n    }\n  else\n    {\n      // couldn't open file\n      handle = 0;\n    }\n  return handle;\n# else\n  ACE_UNUSED_ARG (fname);\n  ACE_UNUSED_ARG (mode);\n  ACE_NOTSUP_RETURN (0);\n# endif /* ACE_HAS_SVR4_DYNAMIC_LINKING */\n}\n\nACE_INLINE void *\nACE_OS::dlsym (ACE_SHLIB_HANDLE handle,\n               const ACE_TCHAR *sname)\n{\n  ACE_OS_TRACE (\"ACE_OS::dlsym\");\n\n#if defined (ACE_HAS_DLSYM_SEGFAULT_ON_INVALID_HANDLE)\n  // Check if the handle is valid before making any calls using it.\n  if (handle == ACE_SHLIB_INVALID_HANDLE)\n    return 0;\n#endif /* ACE_HAS_DLSYM_SEGFAULT_ON_INVALID_HANDLE */\n\n  // Get the correct OS type.\n#if defined (ACE_HAS_WINCE)\n  // CE (at least thru Pocket PC 2003) offers GetProcAddressW, not ...A, so\n  // we always need a wide-char string.\n  const wchar_t *symbolname = 0;\n#  if defined (ACE_USES_WCHAR)\n  symbolname = sname;\n#  else\n  ACE_Ascii_To_Wide sname_xlate (sname);\n  symbolname = sname_xlate.wchar_rep ();\n#  endif /* ACE_USES_WCHAR */\n#elif defined (ACE_USES_WCHAR)\n  // WinCE is WCHAR always; other platforms need a char * symbol name\n  ACE_Wide_To_Ascii w_sname (sname);\n  char *symbolname = w_sname.char_rep ();\n#elif defined (ACE_VXWORKS)\n  char *symbolname = const_cast<char *> (sname);\n#else\n  const char *symbolname = sname;\n#endif /* ACE_HAS_WINCE */\n\n# if defined (ACE_HAS_SVR4_DYNAMIC_LINKING)\n\n#   if defined (ACE_USES_ASM_SYMBOL_IN_DLSYM)\n  int l = ACE_OS::strlen (symbolname) + 2;\n  char *asm_symbolname = 0;\n  ACE_NEW_RETURN (asm_symbolname, char[l], 0);\n  ACE_OS::strcpy (asm_symbolname, \"_\") ;\n  ACE_OS::strcpy (asm_symbolname + 1, symbolname) ;\n  void *ace_result;\n  ACE_OSCALL (::dlsym (handle, asm_symbolname), void *, 0, ace_result);\n  delete [] asm_symbolname;\n  return ace_result;\n#   else\n  ACE_OSCALL_RETURN (::dlsym (handle, symbolname), void *, 0);\n#   endif /* ACE_USES_ASM_SYMBOL_IN_DLSYM */\n\n# elif defined (ACE_WIN32)\n\n  ACE_WIN32CALL_RETURN (::GetProcAddress (handle, symbolname), void *, 0);\n\n# elif defined (__hpux)\n\n  void *value = 0;\n  int status;\n  shl_t _handle = handle;\n  ACE_OSCALL (::shl_findsym(&_handle, symbolname, TYPE_UNDEFINED, &value), int, -1, status);\n  return status == 0 ? value : 0;\n\n# elif defined (ACE_VXWORKS) && !defined (__RTP__)\n\n  // For now we use the VxWorks global symbol table\n  // which resolves the most recently loaded symbols, which resolve\n  // mostly what we want..\n  ACE_UNUSED_ARG (handle);\n#if (ACE_VXWORKS < 0x690)\n  SYM_TYPE symtype;\n  char *value = 0;\n  STATUS status;\n  ACE_OSCALL (::symFindByName(sysSymTbl, symbolname, &value, &symtype), int, -1, status);\n\n  return status == OK ? reinterpret_cast <void*>(value) : 0;\n#else\n  STATUS status;\n\n  SYMBOL_DESC symbolDesc;     /* symFind() descriptor */\n  ACE_OS::memset (&symbolDesc, 0, sizeof (SYMBOL_DESC));\n  symbolDesc.mask = SYM_FIND_BY_NAME;\n  symbolDesc.name = symbolname;\n\n  ACE_OSCALL (::symFind(sysSymTbl, &symbolDesc), int, -1, status);\n\n  return status == OK ? reinterpret_cast <void*>(symbolDesc.value) : 0;\n#endif /* (ACE_VXWORKS < 0x690) */\n\n# else\n\n  ACE_UNUSED_ARG (handle);\n  ACE_UNUSED_ARG (symbolname);\n  ACE_NOTSUP_RETURN (0);\n\n# endif /* ACE_HAS_SVR4_DYNAMIC_LINKING */\n}\n\nACE_END_VERSIONED_NAMESPACE_DECL\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/DLL_Manager.cpp": "#include \"ace/DLL_Manager.h\"\n\n#include \"ace/Auto_Ptr.h\"\n#include \"ace/Log_Category.h\"\n#include \"ace/ACE.h\"\n#include \"ace/Framework_Component.h\"\n\n#include \"ace/Lib_Find.h\"\n#include \"ace/Object_Manager.h\"\n#include \"ace/SString.h\"\n#include \"ace/Recursive_Thread_Mutex.h\"\n#include \"ace/Guard_T.h\"\n#include \"ace/OS_NS_dlfcn.h\"\n#include \"ace/OS_NS_string.h\"\n\nACE_BEGIN_VERSIONED_NAMESPACE_DECL\n\nsig_atomic_t ACE_DLL_Handle::open_called_ = 0;\n\nACE_DLL_Handle::ACE_DLL_Handle (void)\n  : refcount_ (0),\n    dll_name_ (0),\n    handle_ (ACE_SHLIB_INVALID_HANDLE)\n{\n  ACE_TRACE (\"ACE_DLL_Handle::ACE_DLL_Handle\");\n}\n\nACE_DLL_Handle::~ACE_DLL_Handle (void)\n{\n  ACE_TRACE (\"ACE_DLL_Handle::~ACE_DLL_Handle\");\n  this->close (1);\n#if defined (ACE_HAS_ALLOC_HOOKS)\n  ACE_Allocator::instance()->free(this->dll_name_);\n#else\n  delete[] this->dll_name_;\n#endif /* ACE_HAS_ALLOC_HOOKS */\n}\n\nACE_ALLOC_HOOK_DEFINE(ACE_DLL_Handle)\n\nconst ACE_TCHAR  *\nACE_DLL_Handle::dll_name (void) const\n{\n  ACE_TRACE (\"ACE_DLL_Handle::dll_name\");\n  return this->dll_name_;\n}\n\nint\nACE_DLL_Handle::open (const ACE_TCHAR *dll_name,\n                      int open_mode,\n                      ACE_SHLIB_HANDLE handle,\n                      ERROR_STACK *errors)\n{\n  ACE_TRACE (\"ACE_DLL_Handle::open\");\n  ACE_MT (ACE_GUARD_RETURN (ACE_Thread_Mutex, ace_mon, this->lock_, 0));\n\n  if (this->dll_name_)\n    {\n      // Once dll_name_ has been set, it can't be changed..\n      if (ACE_OS::strcmp (this->dll_name_, dll_name) != 0)\n        {\n          if (ACE::debug ())\n            ACELIB_ERROR ((LM_ERROR,\n                        ACE_TEXT (\"ACE (%P|%t) DLL_Handle::open: error, \")\n                        ACE_TEXT (\"tried to reopen %s with name %s\\n\"),\n                        this->dll_name_,\n                        dll_name));\n\n          return -1;\n        }\n    }\n  else\n    this->dll_name_ = ACE::strnew (dll_name);\n\n  if (!this->open_called_)\n    this->open_called_ = 1;\n\n  // If it hasn't been loaded yet, go ahead and do that now.\n  if (this->handle_ == ACE_SHLIB_INVALID_HANDLE)\n    {\n      if (handle)\n        this->handle_ = handle;\n      else\n        {\n          /*\n          ** Get the set of names to try loading. We need to do this to\n          ** properly support the ability for a user to specify a simple,\n          ** unadorned name (for example, \"ACE\") that will work across\n          ** platforms. We apply platform specifics to get a name that will\n          ** work (e.g. libACE, ACEd.dll, ACE.dll, etc.) We rely on the\n          ** underlying dlopen() implementation to \"Do The Right Thing\" in\n          ** terms of using relative paths, LD_LIBRARY_PATH, system security\n          ** rules, etc. except when ACE_MUST_HELP_DLOPEN_SEARCH_PATH is set.\n          ** If it is set, then ACE::ldfind() scans the configured path\n          ** looking for a match on the name and prefix/suffix applications.\n          ** NOTE: having ACE scan for a file and then pass a fully-qualified\n          ** pathname to dlopen() is a potential security hole; therefore,\n          ** do not use ACE_MUST_HELP_DLOPEN_SEARCH_PATH unless necessary\n          ** and only after considering the risks.\n          */\n          ACE_Array<ACE_TString> dll_names;\n          dll_names.max_size (10);    // Decent guess to avoid realloc later\n\n#if defined (ACE_MUST_HELP_DLOPEN_SEARCH_PATH)\n          // Find out where the library is\n          ACE_TCHAR dll_pathname[MAXPATHLEN + 1];\n\n          // Transform the pathname into the appropriate dynamic link library\n          // by searching the ACE_LD_SEARCH_PATH.\n          ACE::ldfind (dll_name,\n                       dll_pathname,\n                       (sizeof dll_pathname / sizeof (ACE_TCHAR)));\n          ACE_TString dll_str (dll_pathname);\n          dll_names.size (1);\n          dll_names.set (dll_str, 0);\n#else\n          this->get_dll_names (dll_name, dll_names);\n#endif\n\n          ACE_Array_Iterator<ACE_TString> name_iter (dll_names);\n          ACE_TString *name = 0;\n          while (name_iter.next (name))\n            {\n              // The ACE_SHLIB_HANDLE object is obtained.\n              this->handle_ = ACE_OS::dlopen (name->c_str (),\n                                              open_mode);\n\n              if (ACE::debug ())\n                {\n                  ACE_TString err;\n                  ACELIB_DEBUG ((LM_DEBUG,\n                              ACE_TEXT (\"ACE (%P|%t) DLL_Handle::open \")\n                              ACE_TEXT (\"(\\\"%s\\\", 0x%x) -> %s: %s\\n\"),\n                              name->c_str (),\n                              open_mode,\n                              ((this->handle_ != ACE_SHLIB_INVALID_HANDLE)\n                               ? ACE_TEXT (\"succeeded\")\n                               : ACE_TEXT (\"failed\")),\n                              this->error (err).c_str()));\n                }\n\n              if (this->handle_ != ACE_SHLIB_INVALID_HANDLE)   // Good one?\n                break;\n\n              // If errno is ENOENT we just skip over this one,\n              // anything else - like an undefined symbol, for\n              // instance must be flagged here or the next error will\n              // mask it.\n              // @TODO: If we've found our DLL _and_ it's\n              // broken, should we continue at all?\n              if ((errno != 0) && (errno != ENOENT) && (errors || ACE::debug ()))\n                {\n                  ACE_TString errtmp;\n                  if (errors)\n                    {\n                      errors->push (this->error (errtmp));\n                    }\n\n                  if (ACE::debug ())\n                    {\n                      if (!errors)\n                        this->error (errtmp);\n                      ACELIB_ERROR ((LM_ERROR,\n                                  ACE_TEXT (\"ACE (%P|%t) DLL_Handle::open \")\n                                  ACE_TEXT (\"(\\'%s\\') failed, errno=\")\n                                  ACE_TEXT (\"%d: <%s>\\n\"),\n                                  name->c_str (),\n                                  ACE_ERRNO_GET,\n                                  errtmp.c_str ()));\n                    }\n                }\n\n#if defined (AIX)\n              // AIX often puts the shared library file (most often named\n              // shr.o) inside an archive library. If this is an archive\n              // library name, then try appending [shr.o] and retry.\n              if (ACE_TString::npos != name->strstr (ACE_TEXT (\".a\")))\n                {\n                  ACE_TCHAR aix_pathname[MAXPATHLEN + 1];\n                  ACE_OS::strncpy (aix_pathname,\n                                   name->c_str (),\n                                   name->length ());\n                  aix_pathname[name->length ()] = '\\0';\n                  ACE_OS::strcat (aix_pathname, ACE_TEXT (\"(shr.o)\"));\n                  open_mode |= RTLD_MEMBER;\n\n                  if (ACE::debug ())\n                    {\n                      ACE_TString err;\n                      ACELIB_DEBUG ((LM_DEBUG,\n                                  ACE_TEXT (\"ACE (%P|%t) DLL_Handle::open \")\n                                  ACE_TEXT (\"(\\\"%s\\\", 0x%x) -> %s: %s\\n\"),\n                                  aix_pathname,\n                                  open_mode,\n                                  (this->handle_ != ACE_SHLIB_INVALID_HANDLE\n                                                ? ACE_TEXT (\"succeeded\")\n                                                : ACE_TEXT (\"failed\")),\n                                  this->error(err).c_str()));\n                    }\n\n                  this->handle_ = ACE_OS::dlopen (aix_pathname, open_mode);\n                  if (this->handle_ != ACE_SHLIB_INVALID_HANDLE)\n                    break;\n\n                  // If errno is ENOENT we just skip over this one, anything\n                  // else - like an undefined symbol, for instance\n                  // must be flagged here or the next error will mask it.\n                  //\n                  // @TODO: If we've found our DLL _and_ it's broken,\n                  // should we continue at all?\n                  if ((errno != 0) && (errno != ENOENT) && (errors || ACE::debug ()))\n                    {\n                      ACE_TString errtmp;\n                      if (errors)\n                        {\n                          errors->push (this->error (errtmp));\n                        }\n\n                      if (ACE::debug ())\n                        {\n                          if (!errors)\n                            this->error (errtmp);\n                          ACELIB_ERROR ((LM_ERROR,\n                                      ACE_TEXT (\"ACE (%P|%t) DLL_Handle::open \")\n                                      ACE_TEXT (\"(\\'%s\\') failed, errno=\")\n                                      ACE_TEXT (\"%d: <%s>\\n\"),\n                                      name->c_str (),\n                                      ACE_ERRNO_GET,\n                                      errtmp.c_str ()));\n                        }\n                    }\n\n                }\n#endif /* AIX */\n\n              name_iter.advance ();\n            }\n\n          if (this->handle_ == ACE_SHLIB_INVALID_HANDLE)\n            {\n              if (errors || ACE::debug ())\n                {\n                  ACE_TString errtmp;\n                  if (errors)\n                    {\n                      errors->push (this->error (errtmp));\n                    }\n\n                  if (ACE::debug ())\n                    {\n                      if (!errors)\n                        this->error (errtmp);\n                      ACELIB_ERROR ((LM_ERROR,\n                                  ACE_TEXT (\"ACE (%P|%t) DLL_Handle::open (\\\"%s\\\"): \")\n                                  ACE_TEXT (\"Invalid handle error: %s\\n\"),\n                                  this->dll_name_,\n                                  errtmp.c_str ()));\n                    }\n                }\n\n              return -1;\n            }\n        }\n    }\n\n  ++this->refcount_;\n\n  if (ACE::debug ())\n    ACELIB_DEBUG ((LM_DEBUG,\n                ACE_TEXT (\"ACE (%P|%t) DLL_Handle::open - %s (%d), refcount=%d\\n\"),\n                this->dll_name_,\n                this->handle_,\n                this->refcount_));\n  return 0;\n}\n\n\nint\nACE_DLL_Handle::close (int unload)\n{\n  ACE_TRACE (\"ACE_DLL_Handle::close\");\n\n  int retval = 0;\n  ACE_SHLIB_HANDLE h = ACE_SHLIB_INVALID_HANDLE;\n\n  // Only hold the lock until it comes time to dlclose() the DLL. Closing\n  // the DLL can cause further shutdowns as DLLs and their dependents are\n  // unloaded.\n  {\n    ACE_MT (ACE_GUARD_RETURN (ACE_Thread_Mutex, ace_mon, this->lock_, 0));\n\n    // Since we don't actually unload the dll as soon as the refcount\n    // reaches zero, we need to make sure we don't decrement it below\n    // zero.\n    if (this->refcount_ > 0)\n      --this->refcount_;\n    else\n      this->refcount_ = 0;\n\n    if (ACE::debug ())\n      ACELIB_DEBUG ((LM_DEBUG,\n                  ACE_TEXT (\"ACE (%P|%t) DLL_Handle::close - \")\n                  ACE_TEXT (\"%s (handle=%d, refcount=%d)\\n\"),\n                  this->dll_name_,\n                  this->handle_,\n                  this->refcount_));\n\n    if (this->refcount_ == 0 &&\n        this->handle_ != ACE_SHLIB_INVALID_HANDLE &&\n        unload == 1)\n      {\n        if (ACE::debug ())\n          ACELIB_DEBUG ((LM_DEBUG,\n                      ACE_TEXT (\"ACE (%P|%t) DLL_Handle::close: \")\n                      ACE_TEXT (\"Unloading %s (handle=%d)\\n\"),\n                      this->dll_name_,\n                      this->handle_));\n\n        // First remove any associated Framework Components.\n        ACE_Framework_Repository *frPtr= ACE_Framework_Repository::instance ();\n        if (frPtr)\n          {\n            frPtr->remove_dll_components (this->dll_name_);\n          }\n\n        h = this->handle_;\n        this->handle_ = ACE_SHLIB_INVALID_HANDLE;\n      }\n  } // Release lock_ here\n\n  if (h != ACE_SHLIB_INVALID_HANDLE)\n    {\n      retval = ACE_OS::dlclose (h);\n\n      if (retval != 0 && ACE::debug ())\n        {\n          ACE_TString err;\n          ACELIB_ERROR ((LM_ERROR,\n                      ACE_TEXT (\"ACE (%P|%t) DLL_Handle::close - \")\n                      ACE_TEXT (\"Failed with: \\\"%s\\\".\\n\"),\n                      this->error (err).c_str ()));\n        }\n    }\n\n  return retval;\n}\n\nsig_atomic_t\nACE_DLL_Handle::refcount (void) const\n{\n  return this->refcount_;\n}\n\nvoid *\nACE_DLL_Handle::symbol (const ACE_TCHAR *sym_name, bool ignore_errors)\n{\n  ACE_TString error;\n  return this->symbol (sym_name, ignore_errors, error);\n}\n\nvoid *\nACE_DLL_Handle::symbol (const ACE_TCHAR *sym_name, bool ignore_errors, ACE_TString &error)\n{\n  ACE_TRACE (\"ACE_DLL_Handle::symbol\");\n  ACE_MT (ACE_GUARD_RETURN (ACE_Thread_Mutex, ace_mon, this->lock_, 0));\n\n  ACE_Auto_Array_Ptr <ACE_TCHAR> auto_name (ACE::ldname (sym_name));\n  // handle_ can be invalid especially when ACE_DLL_Handle resigned ownership\n  // BTW. Handle lifecycle management is a little crazy in ACE\n  if (this->handle_ != ACE_SHLIB_INVALID_HANDLE)\n    {\n#if defined (ACE_OPENVMS)\n      void *sym =  ACE::ldsymbol (this->handle_, auto_name.get ());\n#else\n      void *sym =  ACE_OS::dlsym (this->handle_, auto_name.get ());\n#endif\n\n      // Linux says that the symbol could be null and that it isn't an\n      // error.  So you should check the error message also, but since\n      // null symbols won't do us much good anyway, let's still report\n      // an error.\n      if (!sym && !ignore_errors)\n        {\n          this->error (error);\n\n          if (ACE::debug ())\n            ACELIB_ERROR ((LM_ERROR,\n                        ACE_TEXT (\"ACE (%P|%t) DLL_Handle::symbol (\\\"%s\\\") \")\n                        ACE_TEXT (\" failed with \\\"%s\\\".\\n\"),\n                        auto_name.get (),\n                        error.c_str ()));\n\n          return 0;\n        }\n      return sym;\n    }\n  return 0;\n}\n\nACE_SHLIB_HANDLE\nACE_DLL_Handle::get_handle (bool become_owner)\n{\n  ACE_TRACE (\"ACE_DLL_Handle::get_handle\");\n  ACE_MT (ACE_GUARD_RETURN (ACE_Thread_Mutex, ace_mon, this->lock_, 0));\n\n  if (this->refcount_ == 0 && become_owner)\n    {\n      if (ACE::debug ())\n        ACELIB_ERROR ((LM_ERROR,\n                    ACE_TEXT (\"ACE (%P|%t) DLL_Handle::get_handle: \")\n                    ACE_TEXT (\"cannot become owner, refcount == 0.\\n\")));\n\n      return ACE_SHLIB_INVALID_HANDLE;\n    }\n\n  ACE_SHLIB_HANDLE handle = this->handle_;\n\n  if (become_owner)\n    {\n      if (--this->refcount_ == 0)\n        this->handle_ = ACE_SHLIB_INVALID_HANDLE;\n    }\n\n  if (ACE::debug ())\n    ACELIB_DEBUG ((LM_DEBUG,\n                ACE_TEXT (\"ACE (%P|%t) DLL_Handle::get_handle: \")\n                ACE_TEXT (\"post call: handle %s, refcount %d\\n\"),\n                this->handle_ == ACE_SHLIB_INVALID_HANDLE ?\n                ACE_TEXT (\"invalid\") : ACE_TEXT (\"valid\"),\n                this->refcount_));\n\n  return handle;\n}\n\n// This method is used return the last error of a library operation.\n\nACE_TString &\nACE_DLL_Handle::error (ACE_TString &err)\n{\n  ACE_TRACE (\"ACE_DLL_Handle::error\");\n  const ACE_TCHAR *error = ACE_OS::dlerror ();\n  err = (error ? error : ACE_TEXT (\"no error\"));\n  return err;\n}\n\nvoid\nACE_DLL_Handle::get_dll_names (const ACE_TCHAR *dll_name,\n                               ACE_Array<ACE_TString> &try_names)\n{\n  // Build the array of DLL names to try on this platform by applying the\n  // proper prefixes and/or suffixes to the specified dll_name.\n  ACE_TString base (dll_name);\n  ACE_TString base_dir, base_file, base_suffix;\n\n  // 1. Separate the dll_name into the dir part and the file part. We\n  // only decorate the file part to determine the names to try loading.\n  ACE_TString::size_type pos = base.rfind (ACE_DIRECTORY_SEPARATOR_CHAR);\n  if (pos != ACE_TString::npos)\n    {\n      base_dir = base.substr (0, pos + 1);\n      base_file = base.substr (pos + 1);\n    }\n  else\n    base_file = base;\n\n  // 2. Locate the file suffix, if there is one. Move the '.' and the\n  // suffix to base_suffix.\n  if ((pos = base_file.rfind (ACE_TEXT ('.'))) != ACE_TString::npos)\n    {\n      base_suffix = base_file.substr (pos);\n      base_file = base_file.substr (0, pos);\n    }\n\n  // 3. Build the combinations to try for this platform.\n  // Try these combinations:\n  //   - name with platform's dll prefix (if it has one) and suffix\n  //   - name with platform's dll prefix, decorator, and suffix.\n  //   - name with decorator and platform's suffix appended (if not supplied)\n  //   - name with platform's suffix appended (if not supplied)\n  //   - name as originally given\n  // We first try to find the file using the decorator so that when a\n  // filename with and without decorator is used, we get the file with\n  // the same decorator as the ACE dll has and then as last resort\n  // the one without. For example with msvc, the debug build has a \"d\"\n  // decorator, but the release build has none and we really want to get\n  // the debug version of the library in a debug application instead\n  // of the release one.\n  // So we need room for 5 entries in try_names.\n  try_names.size (0);\n  if ((try_names.max_size () - try_names.size ()) < 5)\n    try_names.max_size (try_names.max_size () + 5);\n#if defined (ACE_LD_DECORATOR_STR) && !defined (ACE_DISABLE_DEBUG_DLL_CHECK)\n  ACE_TString decorator (ACE_LD_DECORATOR_STR);\n#endif\n  ACE_TString suffix (ACE_DLL_SUFFIX);\n  ACE_TString prefix (ACE_DLL_PREFIX);\n\n  for (size_t i = 0; i < 5 && try_names.size () < try_names.max_size (); ++i)\n    {\n      ACE_TString try_this;\n      size_t const j = try_names.size ();\n      switch (i)\n        {\n        case 0:        // Prefix + name + decorator + suffix\n        case 1:        // Prefix + name + suffix\n        case 2:        // Name + decorator + suffix\n        case 3:        // Name + suffix\n          if (\n              base_suffix.length () > 0\n#if !(defined (ACE_LD_DECORATOR_STR) && !defined (ACE_DISABLE_DEBUG_DLL_CHECK))\n              || (i == 1 || i == 3)    // No decorator desired; skip\n#endif\n              )\n            break;\n          try_this = base_dir;\n          if (i < 2)\n            try_this += prefix;\n          try_this += base_file;\n          if (base_suffix.length () > 0)\n            try_this += base_suffix;\n          else\n            {\n#if defined (ACE_LD_DECORATOR_STR) && !defined (ACE_DISABLE_DEBUG_DLL_CHECK)\n              try_this += decorator;\n#endif\n              try_this += suffix;\n            }\n          break;\n        case 4:\n          try_this = dll_name;\n          break;\n        }\n\n      if (try_this.length ())\n        {\n          try_names.size (j + 1);\n          try_names.set (try_this, j);\n        }\n    }\n  return;\n}\n\n/******************************************************************/\n\n// Pointer to the Singleton instance.\nACE_DLL_Manager *ACE_DLL_Manager::instance_ = 0;\n\n\nACE_DLL_Manager *\nACE_DLL_Manager::instance (int size)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::instance\");\n\n  if (ACE_DLL_Manager::instance_ == 0)\n    {\n      // Perform Double-Checked Locking Optimization.\n      ACE_MT (ACE_GUARD_RETURN (ACE_Recursive_Thread_Mutex, ace_mon,\n                                *ACE_Static_Object_Lock::instance (), 0));\n      if (ACE_DLL_Manager::instance_ == 0)\n        {\n          ACE_NEW_RETURN (ACE_DLL_Manager::instance_,\n                          ACE_DLL_Manager (size),\n                          0);\n        }\n    }\n\n  return ACE_DLL_Manager::instance_;\n}\n\nvoid\nACE_DLL_Manager::close_singleton (void)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::close_singleton\");\n\n  ACE_MT (ACE_GUARD (ACE_Recursive_Thread_Mutex, ace_mon,\n                     *ACE_Static_Object_Lock::instance ()));\n\n  delete ACE_DLL_Manager::instance_;\n  ACE_DLL_Manager::instance_ = 0;\n}\n\nACE_DLL_Manager::ACE_DLL_Manager (int size)\n  : handle_vector_ (0),\n    current_size_ (0),\n    total_size_ (0),\n    unload_policy_ (ACE_DLL_UNLOAD_POLICY_PER_DLL)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::ACE_DLL_Manager\");\n\n  if (this->open (size) != 0 && ACE::debug ())\n    ACELIB_ERROR ((LM_ERROR,\n                ACE_TEXT (\"ACE (%P|%t) DLL_Manager ctor failed to allocate \")\n                ACE_TEXT (\"handle_vector_.\\n\")));\n}\n\nACE_DLL_Manager::~ACE_DLL_Manager (void)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::~ACE_DLL_Manager\");\n\n  if (this->close () != 0 && ACE::debug ())\n    ACELIB_ERROR ((LM_ERROR,\n                ACE_TEXT (\"ACE (%P|%t) DLL_Manager dtor failed to close \")\n                ACE_TEXT (\"properly.\\n\")));\n}\n\nACE_ALLOC_HOOK_DEFINE(ACE_DLL_Manager)\n\nACE_DLL_Handle *\nACE_DLL_Manager::open_dll (const ACE_TCHAR *dll_name,\n                           int open_mode,\n                           ACE_SHLIB_HANDLE handle,\n                           ACE_DLL_Handle::ERROR_STACK *errors)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::open_dll\");\n\n  ACE_DLL_Handle *temp_handle = 0;\n  ACE_DLL_Handle *dll_handle = 0;\n  {\n    ACE_MT (ACE_GUARD_RETURN (ACE_Thread_Mutex, ace_mon, this->lock_, 0));\n    dll_handle = this->find_dll (dll_name);\n    if (!dll_handle)\n      {\n        if (this->current_size_ < this->total_size_)\n          {\n            ACE_NEW_RETURN (temp_handle,\n                            ACE_DLL_Handle,\n                            0);\n\n            dll_handle = temp_handle;\n          }\n      }\n  }\n\n  if (dll_handle)\n    {\n      if (dll_handle->open (dll_name, open_mode, handle, errors) != 0)\n        {\n          // Error while opening dll. Free temp handle\n          if (ACE::debug ())\n            ACELIB_ERROR ((LM_ERROR,\n                        ACE_TEXT (\"ACE (%P|%t) DLL_Manager::open_dll: Could not \")\n                        ACE_TEXT (\"open dll %s.\\n\"),\n                        dll_name));\n\n          delete temp_handle;\n          return 0;\n        }\n\n      // Add the handle to the vector only if the dll is successfully\n      // opened.\n      if (temp_handle != 0)\n        {\n          ACE_MT (ACE_GUARD_RETURN (ACE_Thread_Mutex, ace_mon, this->lock_, 0));\n          this->handle_vector_[this->current_size_] = dll_handle;\n          ++this->current_size_;\n        }\n    }\n\n  return dll_handle;\n}\n\nint\nACE_DLL_Manager::close_dll (const ACE_TCHAR *dll_name)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::close_dll\");\n  ACE_DLL_Handle *handle = 0;\n\n  {\n    ACE_MT (ACE_GUARD_RETURN (ACE_Thread_Mutex, ace_mon, this->lock_, 0));\n    handle = this->find_dll (dll_name);\n  }\n\n  if (handle)\n    {\n      return this->unload_dll (handle, 0);\n    }\n\n  return -1;\n}\n\nu_long\nACE_DLL_Manager::unload_policy (void) const\n{\n  ACE_TRACE (\"ACE_DLL_Manager::unload_policy\");\n  return this->unload_policy_;\n}\n\nvoid\nACE_DLL_Manager::unload_policy (u_long unload_policy)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::unload_policy\");\n  ACE_MT (ACE_GUARD (ACE_Thread_Mutex, ace_mon, this->lock_));\n\n  u_long old_policy = this->unload_policy_;\n  this->unload_policy_ = unload_policy;\n\n  // If going from LAZY to EAGER or from PER_DLL to PER_PROCESS|EAGER,\n  // call close(1) on all the ACE_DLL_Handle objects with refcount == 0\n  // which will force those that are still loaded to be unloaded.\n  if (this->handle_vector_)\n    if (( ACE_BIT_ENABLED (old_policy, ACE_DLL_UNLOAD_POLICY_LAZY) &&\n          ACE_BIT_DISABLED (this->unload_policy_, ACE_DLL_UNLOAD_POLICY_LAZY) ) ||\n        ( ACE_BIT_DISABLED (this->unload_policy_, ACE_DLL_UNLOAD_POLICY_LAZY) &&\n          ACE_BIT_ENABLED (old_policy, ACE_DLL_UNLOAD_POLICY_PER_DLL) &&\n          ACE_BIT_DISABLED (this->unload_policy_, ACE_DLL_UNLOAD_POLICY_PER_DLL) ))\n      {\n        for (int i = this->current_size_ - 1; i >= 0; i--)\n          {\n            if (this->handle_vector_[i] &&\n                this->handle_vector_[i]->refcount () == 0)\n              this->handle_vector_[i]->close (1);\n          }\n      }\n}\n\nint\nACE_DLL_Manager::open (int size)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::open\");\n\n  ACE_DLL_Handle **temp = 0;\n\n#if defined (ACE_HAS_ALLOC_HOOKS)\n  ACE_ALLOCATOR_RETURN (temp,\n                        static_cast<ACE_DLL_Handle**> (ACE_Allocator::instance()->malloc(sizeof (ACE_DLL_Handle*) * size)),\n                        -1);\n#else\n  ACE_NEW_RETURN (temp,\n                  ACE_DLL_Handle *[size],\n                  -1);\n#endif /* ACE_HAS_ALLOC_HOOKS */\n\n  this->handle_vector_ = temp;\n  this->total_size_ = size;\n  return 0;\n}\n\nint\nACE_DLL_Manager::close (void)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::close\");\n\n  int force_close = 1;\n\n  if (this->handle_vector_ != 0)\n    {\n      // Delete components in reverse order.\n      for (int i = this->current_size_ - 1; i >= 0; i--)\n        {\n          if (this->handle_vector_[i])\n            {\n              ACE_DLL_Handle *s =\n                const_cast<ACE_DLL_Handle *> (this->handle_vector_[i]);\n              this->handle_vector_[i] = 0;\n              this->unload_dll (s, force_close);\n              delete s;\n            }\n        }\n\n#if defined (ACE_HAS_ALLOC_HOOKS)\n      ACE_Allocator::instance()->free(this->handle_vector_);\n#else\n      delete [] this->handle_vector_;\n#endif /* ACE_HAS_ALLOC_HOOKS */\n\n      this->handle_vector_ = 0;\n      this->current_size_ = 0;\n    }\n  return 0;\n}\n\nACE_DLL_Handle *\nACE_DLL_Manager::find_dll (const ACE_TCHAR *dll_name) const\n{\n  ACE_TRACE (\"ACE_DLL_Manager::find_dll\");\n\n  for (int i = 0; i < this->current_size_; i++)\n    if (this->handle_vector_[i] &&\n        ACE_OS::strcmp (this->handle_vector_[i]->dll_name (), dll_name) == 0)\n      {\n        return this->handle_vector_[i];\n      }\n\n  return 0;\n}\n\nint\nACE_DLL_Manager::unload_dll (ACE_DLL_Handle *dll_handle, int force_unload)\n{\n  ACE_TRACE (\"ACE_DLL_Manager::unload_dll\");\n\n  if (dll_handle)\n    {\n      int unload = force_unload;\n      if (unload == 0)\n        {\n          // apply strategy\n          if (ACE_BIT_DISABLED (this->unload_policy_,\n                                ACE_DLL_UNLOAD_POLICY_PER_DLL))\n            {\n              unload = ACE_BIT_DISABLED (this->unload_policy_,\n                                         ACE_DLL_UNLOAD_POLICY_LAZY);\n            }\n          else\n            {\n              // Declare the type of the symbol:\n              typedef int (*dll_unload_policy)(void);\n\n              void * const unload_policy_ptr =\n                dll_handle->symbol (ACE_TEXT (\"_get_dll_unload_policy\"), 1);\n#if defined (ACE_OPENVMS) && (!defined (__INITIAL_POINTER_SIZE) || (__INITIAL_POINTER_SIZE < 64))\n              int const temp_p =\n                reinterpret_cast<int> (unload_policy_ptr);\n#else\n              intptr_t const temp_p =\n                reinterpret_cast<intptr_t> (unload_policy_ptr);\n#endif\n\n              dll_unload_policy const the_policy =\n                reinterpret_cast<dll_unload_policy> (temp_p);\n\n              if (the_policy != 0)\n                unload = ACE_BIT_DISABLED (the_policy (),\n                                           ACE_DLL_UNLOAD_POLICY_LAZY);\n              else\n                unload = ACE_BIT_DISABLED (this->unload_policy_,\n                                           ACE_DLL_UNLOAD_POLICY_LAZY);\n            }\n        }\n\n      if (dll_handle->close (unload) != 0)\n        {\n          if (ACE::debug ())\n            ACELIB_ERROR ((LM_ERROR,\n                        ACE_TEXT (\"ACE (%P|%t) DLL_Manager::unload error.\\n\")));\n\n          return -1;\n        }\n    }\n  else\n    {\n      if (ACE::debug ())\n        ACELIB_ERROR ((LM_ERROR,\n                    ACE_TEXT (\"ACE (%P|%t) DLL_Manager::unload_dll called with \")\n                    ACE_TEXT (\"null pointer.\\n\")));\n\n      return -1;\n    }\n\n  return 0;\n}\n\nACE_END_VERSIONED_NAMESPACE_DECL\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/os_include/os_dlfcn.h": "// -*- C++ -*-\n\n//=============================================================================\n/**\n *  @file    os_dlfcn.h\n *\n *  dynamic linking\n *\n *  @author Don Hinton <dhinton@dresystems.com>\n *  @author This code was originally in various places including ace/OS.h.\n */\n//=============================================================================\n\n#ifndef ACE_OS_INCLUDE_OS_DLFCN_H\n#define ACE_OS_INCLUDE_OS_DLFCN_H\n\n#include /**/ \"ace/pre.h\"\n\n#include /**/ \"ace/config-all.h\"\n\n#if !defined (ACE_LACKS_PRAGMA_ONCE)\n# pragma once\n#endif /* ACE_LACKS_PRAGMA_ONCE */\n\n#if !defined (ACE_LACKS_DLFCN_H)\n#  include /**/ <dlfcn.h>\n#endif /* !ACE_LACKS_DLFCN_H */\n\n#if defined (__hpux)\n#  if defined(__GNUC__) || __cplusplus >= 199707L\n#    include /**/ <dl.h>\n#  else\n#    include /**/ <cxxdl.h>\n#  endif /* (g++ || HP aC++) vs. HP C++ */\n#endif /* __hpux */\n\n#if defined (ACE_VXWORKS) && !defined (__RTP__)\n#  include /**/ <loadLib.h> /* for module load */\n#  include /**/ <unldLib.h> /* for module unload */\n#  include /**/ <symLib.h> /* for findSymbol  */\n#  include /**/ <sysSymTbl.h> /* for global symbol table */\n#endif /* ACE_VXWORKS */\n\n// Place all additions (especially function declarations) within extern \"C\" {}\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif /* __cplusplus */\n\n/* Set the proper handle type for dynamically-loaded libraries. */\n/* Also define a default 'mode' for loading a library - the names and values */\n/* differ between OSes, so if you write code that uses the mode, be careful */\n/* of the platform differences. */\n#if defined (ACE_WIN32)\n   // Dynamic loading-related types - used for dlopen and family.\n   typedef HINSTANCE ACE_SHLIB_HANDLE;\n#  if !defined (ACE_SHLIB_INVALID_HANDLE)\n#    define ACE_SHLIB_INVALID_HANDLE 0\n#  endif /* ACE_SHLIB_INVALID_HANDLE */\n#  if !defined (ACE_DEFAULT_SHLIB_MODE)\n#    define ACE_DEFAULT_SHLIB_MODE 0\n#  endif /* ACE_DEFAULT_SHLIB_MODE */\n#elif defined (ACE_HAS_SVR4_DYNAMIC_LINKING)\n   typedef void *ACE_SHLIB_HANDLE;\n#  if !defined (ACE_SHLIB_INVALID_HANDLE)\n#    define ACE_SHLIB_INVALID_HANDLE 0\n#  endif /* ACE_SHLIB_INVALID_HANDLE */\n   // This is needed to for dynamic_cast to work properly on objects passed to\n   // libraries.\n#  if !defined (ACE_DEFAULT_SHLIB_MODE)\n#    define ACE_DEFAULT_SHLIB_MODE RTLD_LAZY | RTLD_GLOBAL\n#  endif\n#elif defined (__hpux)\n   typedef shl_t ACE_SHLIB_HANDLE;\n#  if !defined (ACE_SHLIB_INVALID_HANDLE)\n#    define ACE_SHLIB_INVALID_HANDLE 0\n#  endif /* ACE_SHLIB_INVALID_HANDLE */\n#  if !defined (ACE_DEFAULT_SHLIB_MODE)\n#    define ACE_DEFAULT_SHLIB_MODE BIND_DEFERRED | DYNAMIC_PATH\n#  endif /* ACE_DEFAULT_SHLIB_MODE */\n#else /* !ACE_WIN32 && !ACE_HAS_SVR4_DYNAMIC_LINKING && !__hpux */\n   typedef void *ACE_SHLIB_HANDLE;\n#  if !defined (ACE_SHLIB_INVALID_HANDLE)\n#    define ACE_SHLIB_INVALID_HANDLE 0\n#  endif /* ACE_SHLIB_INVALID_HANDLE */\n#  if !defined (ACE_DEFAULT_SHLIB_MODE)\n#    define ACE_DEFAULT_SHLIB_MODE RTLD_LAZY\n#  endif /* ACE_DEFAULT_SHLIB_MODE */\n#endif /* ACE_WIN32 */\n\n#if !defined (RTLD_LAZY)\n#define RTLD_LAZY 1\n#endif /* !RTLD_LAZY */\n\n#if !defined (RTLD_NOW)\n#define RTLD_NOW 2\n#endif /* !RTLD_NOW */\n\n#if !defined (RTLD_GLOBAL)\n#define RTLD_GLOBAL 3\n#endif /* !RTLD_GLOBAL */\n\n#ifdef __cplusplus\n}\n#endif /* __cplusplus */\n\n#include /**/ \"ace/post.h\"\n#endif /* ACE_OS_INCLUDE_OS_DLFCN_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/tests/Unload_libACE.cpp": "\n//=============================================================================\n/**\n *  @file    Unload_libACE.cpp\n *\n *    This is a simple test of library unloading that uses\n *    an application which has _not_ been linked with libACE\n *    but uses dlopen() to dynamically load libACE\n *    and then uses dlclose() to unload it.\n *\n *  @author David Smith <dts@prismtech.com> and Don Sharp <Donald.Sharp@prismtech.com>\n */\n//=============================================================================\n\n\n//FUZZ: disable check_for_lack_ACE_OS\n//FUZZ: disable check_for_improper_main_declaration\n\n#include <stdio.h>\n\n#undef UNLOAD_LIBACE_TEST\n\n#if defined (__GNUC__)\n#if !defined (ACE_VXWORKS) && !defined (__MINGW32__) && !defined (__CYGWIN32__)\n#define UNLOAD_LIBACE_TEST 1\n#endif /* !ACE_VXWORKS && !__MINGW32__ && !CYGWIN32 */\n#endif /* __GNUC__ */\n\n#if defined (__hpux) || defined (__SUNPRO_CC)\n#define UNLOAD_LIBACE_TEST 1\n#endif /* (__hpux) || (__SUNPRO_CC) */\n\n#if defined (ACE_AS_STATIC_LIBS)\n#undef UNLOAD_LIBACE_TEST\n#endif /* ACE_AS_STATIC_LIBS */\n\n#ifdef UNLOAD_LIBACE_TEST\n\n#include <errno.h>\n#include <dlfcn.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n#define TIME_STAMP_FIELD_WIDTH  32\n\nstatic char *\ntime_stamp (char date_and_time[], int date_and_timelen, int format)\n{\n  static char const *const month_name[] =\n    {\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    };\n\n  static char const *const day_of_week_name[] =\n    {\n      \"Sun\",\n      \"Mon\",\n      \"Tue\",\n      \"Wed\",\n      \"Thu\",\n      \"Fri\",\n      \"Sat\"\n    };\n\n  char *ts = 0;\n\n  if (date_and_timelen >= TIME_STAMP_FIELD_WIDTH)\n    {\n      time_t timeval;\n      struct tm *now;\n\n      time (&timeval);\n      now = localtime (&timeval);     /* Get current local time. */\n\n      if (format == 'Y')\n        {\n          sprintf (date_and_time,\n                   \"%3s %3s %2d %04d %02d:%02d:%02d.%06d\",\n                   day_of_week_name[now->tm_wday],\n                   month_name[now->tm_mon],\n                   (int) now->tm_mday,\n                   (int) now->tm_year + 1900,\n                   (int) now->tm_hour,\n                   (int) now->tm_min, (int) now->tm_sec, (int) 0);\n        }\n      else                      /* 'T' */\n        {\n          sprintf (date_and_time,\n                   \"%3s %2d %02d:%02d:%02d.%03d %04d\",\n                   month_name[now->tm_mon],\n                   (int) now->tm_mday,\n                   (int) now->tm_hour,\n                   (int) now->tm_min,\n                   (int) now->tm_sec, (int) 0,\n                   (int) now->tm_year + 1900);\n        }\n\n      ts = date_and_time;\n    }\n  return ts;\n}\n\nint\nmain (int, char **)\n{\n  char const *const program = \"UnloadLibACE\";\n\n  int status = 0;\n  void *handle = 0;\n  char *ace_root = 0;\n  char tbuf[BUFSIZ];\n  char ybuf[BUFSIZ];\n  FILE *logfp = 0;\n\n  if ((logfp = fopen (\"log/UnloadLibACE.log\", \"w\")) != 0)\n    {\n      setvbuf (logfp, 0, _IONBF, 0);\n      // reassign stdout/stderr to log file\n      int fdno = fileno (logfp);\n\n      dup2 (fdno, fileno (stdout));\n      dup2 (fdno, fileno (stderr));\n      setvbuf (stdout, 0, _IONBF, 0);\n      setvbuf (stderr, 0, _IONBF, 0);\n      fflush (stdout);\n      fflush (stderr);\n\n      printf (\"%s@LM_DEBUG@ Starting %s test at %s\\n\",\n              time_stamp (tbuf, BUFSIZ, 'T'),\n              program, time_stamp (ybuf, BUFSIZ, 'Y'));\n\n      if ((ace_root = getenv (\"ACE_ROOT\")) != 0)\n        {\n          char buf[BUFSIZ];\n\n          strcpy (buf, ace_root);\n          strcat (buf, \"/lib/\");\n          const char *subdir_env = getenv (\"ACE_EXE_SUB_DIR\");\n          if (subdir_env)\n            {\n              strcat (buf, subdir_env);\n              strcat (buf, \"/\");\n            }\n          strcat (buf, \"lib\");\n#if defined (ACE_LIB_NAME)\n          strcat (buf, ACE_LIB_NAME);\n#else\n          strcat (buf, \"ACE\");\n#endif /* ACE_LIB_NAME */\n#if defined (__hpux) && !(defined (__ia64) && (__ia64 == 1))\n          strcat (buf, \".sl\");\n#elif defined (__APPLE__)\n          strcat (buf, \".dylib\");\n#else\n          strcat (buf, \".so\");\n#endif /* (__hpux) */\n\n          handle = dlopen (buf, RTLD_LAZY);\n          if (handle == 0)\n            {\n              // is it because of \"No such file or directory\" ?\n              if (errno != ENOENT)\n                {\n                  fprintf (stderr,\n                           \"%s@LM_ERROR@ dlopen() returned NULL\\n\",\n                           time_stamp (tbuf, BUFSIZ, 'T'));\n                  fprintf (stderr,\n                           \"%s@LM_ERROR@ dlerror() says: %s\\n\",\n                           time_stamp (tbuf, BUFSIZ, 'T'), dlerror ());\n                  status = 1;\n                }\n              else\n                {\n                  printf (\"%s@LM_DEBUG@ dlopen() did not find %s\\n\",\n                          time_stamp (tbuf, BUFSIZ, 'T'), buf);\n                  status = 0;\n                }\n            }\n          else if (dlclose (handle) != 0)\n            {\n              fprintf (stderr,\n                       \"%s@LM_ERROR@ dlclose() failed : %s\\n\",\n                       time_stamp (tbuf, BUFSIZ, 'T'), strerror (errno));\n              status = 1;\n            }\n        }\n      else\n        {\n          fprintf (stderr,\n                   \"%s@LM_ERROR@ ACE_ROOT environment variable not set\\n\",\n                   time_stamp (tbuf, BUFSIZ, 'T'));\n          status = 1;\n        }\n\n      fflush (stdout);\n      fflush (stderr);\n      fflush (logfp);\n\n      fclose (logfp);\n    }\n  else\n    {\n      // Couldn't go into the log file !!!\n      printf (\"%s@LM_DEBUG@ Starting %s test at %s\\n\",\n              time_stamp (tbuf, BUFSIZ, 'T'),\n              program, time_stamp (ybuf, BUFSIZ, 'Y'));\n\n      fprintf (stderr,\n               \"%s@LM_ERROR@ Could not open log/UnloadLibACE.log : %s\\n\",\n               time_stamp (tbuf, BUFSIZ, 'T'), strerror (errno));\n      status = 1;\n    }\n\n  printf (\"%s@LM_DEBUG@ Ending %s test at %s\\n\",\n          time_stamp (tbuf, BUFSIZ, 'T'),\n          program, time_stamp (ybuf, BUFSIZ, 'Y'));\n\n  fflush (stderr);\n  fflush (stdout);\n  fclose (stdout);\n  fclose (stderr);\n\n  // Don't change this since we do NOT want to use ACE for this test!\n  exit (status);\n  return 0;\n}\n#else\n# if defined (WIN32) && defined (ACE_USES_WCHAR)\n// Borrow include list from ace_wchar.h\n# if defined (ACE_HAS_WINCE)\n#   include /**/ <wtypes.h>\n# elif !defined (__BORLANDC__)\n#   include /**/ <wchar.h>\n# endif /* ACE_HAS_WINCE || __BORLANDC__ */\n\nint\nwmain (int, wchar_t **)\n#else\nint\nmain (int, char **)\n#endif /* (WIN32) && (ACE_USES_WCHAR) */\n{\n  char const *const program = \"UnloadLibACE\";\n\n  FILE *logfp = 0;\n\n  if ((logfp = fopen (\"log/UnloadLibACE.log\", \"w\")) != 0)\n    {\n      fprintf (logfp, \"@LM_DEBUG@ Starting %s test\\n\", program);\n      fprintf (logfp, \"@LM_DEBUG@ %s test not implemented for this platform\\n\",\n               program);\n      fprintf (logfp, \"@LM_DEBUG@ Ending %s test\\n\", program);\n\n      fflush (logfp);\n      fclose (logfp);\n    }\n  return 0;\n}\n#endif /* UNLOAD_LIBACE_TEST */\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/tests/Bug_2980_Regression_Test.cpp": "//FUZZ: disable check_for_lack_ACE_OS\n\n#include \"ace/config-lite.h\"\n\n#include <iostream>\n#include <assert.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <string.h>\n\n// This is a non-ACE driver program which loads an ACE-based DLL.  The\n// usual ACE-related defines will not apply and we must use\n// platform-specific ones.\n//\n// This test has not been made to work on Windows and vxWorks, yet ...\n\n#if defined (ACE_HAS_THREADS)\n#  define CAN_USE_THREADS\n#else\n#  undef CAN_USE_THREADS\n#endif\n\n#if !(defined (WIN32) || defined (ACE_VXWORKS) || defined (ACE_HAS_LYNXOS_178))\\\n    && !defined ACE_FACE_SAFETY_EXTENDED\n#  define CAN_RUN_TEST\n\n#  include <dlfcn.h>\n\nnamespace {\n#  if defined (ACE_DLL_SUFFIX)\n  const char *DllTestName = \"./libBug_2980_Regression\" ACE_DLL_SUFFIX;\n#else\n  const char *DllTestName = \"./libBug_2980_Regression.so\";\n#endif /* ACE_DLL_SUFFIX */\n}\n\n#  if defined CAN_USE_THREADS\n#    include <pthread.h>\n#  endif\n\n#else\n#  undef CAN_RUN_TEST\n#endif\n\n#if defined (__BORLANDC__)\n#  define PRINTF std::printf\n#else\n#  define PRINTF printf\n#endif\n\n\ntypedef int (* voidfunction)(void);\n\n\n#if defined (CAN_RUN_TEST)\nstatic void * dllHandle;\nstatic voidfunction   capi_init = 0;\nstatic voidfunction   capi_fini = 0;\nstatic voidfunction   capi_dosomething = 0;\n#endif /* defined (CAN_RUN_TEST) */\n\n\nextern \"C\"\nvoid* loadDll(void*)\n{\n#if defined (CAN_RUN_TEST)\n\n  PRINTF (\"loadDll - entered\\n\");\n  const char *subdir_env = getenv (\"ACE_EXE_SUB_DIR\");\n  if (subdir_env)\n    {\n      char *dllFile =\n        (char *) malloc (2 + strlen (subdir_env) + strlen (DllTestName));\n      strcpy (dllFile, subdir_env);\n      strcat (dllFile, \"/\");\n      strcat (dllFile, DllTestName);\n      dllHandle = dlopen (dllFile, RTLD_NOW);\n      free (dllFile);\n    }\n  else\n    {\n      dllHandle = dlopen (DllTestName, RTLD_NOW);\n    }\n\n  if (dllHandle == 0)\n  {\n    PRINTF (\"unable to load library: %s\\n\", dlerror());\n    assert(dllHandle != 0);\n  }\n\n  void* temp = dlsym (dllHandle, \"capi_init\");\n  memcpy (&capi_init, &temp, sizeof (temp));\n  if (capi_init == 0)\n  {\n    PRINTF (\"unable to resolve symbol capi_init: %s\\n\", dlerror());\n    assert(capi_init != 0);\n  }\n\n  temp = dlsym (dllHandle, \"capi_fini\");\n  memcpy (&capi_fini, &temp, sizeof (temp));\n  if (capi_fini == 0)\n  {\n    PRINTF (\"unable to resolve symbol capi_fini: %s\\n\", dlerror());\n    assert(capi_fini != 0);\n  }\n\n  temp = dlsym (dllHandle, \"capi_dosomething\");\n  memcpy (&capi_dosomething, &temp, sizeof (temp));\n  if (capi_dosomething == 0)\n  {\n    PRINTF (\"unable to resolve symbol capi_dosomething: %s\\n\", dlerror());\n    assert(capi_dosomething != 0);\n  }\n  capi_init();\n  PRINTF (\"loadDll - leaving\\n\");\n#endif /* defined (CAN_RUN_TEST) */\n  return 0;\n}\n\nextern \"C\"\nvoid* unloadDll(void*)\n{\n#if defined (CAN_RUN_TEST)\n  PRINTF (\"unloadDll - entered\\n\");\n  capi_fini();\n  dlclose(dllHandle);\n  PRINTF (\"unloadDll - leaving\\n\");\n#endif /* defined (CAN_RUN_TEST) */\n  return 0;\n}\n\nvoid * loadunloadDll(void *pp)\n{\n  loadDll(pp);\n\n#if defined (CAN_RUN_TEST)\n  assert(capi_dosomething != 0);\n  capi_dosomething();\n#endif /* defined (CAN_RUN_TEST) */\n\n  unloadDll(pp);\n\n  return 0;\n}\n// FUZZ: disable check_for_improper_main_declaration\nint main (int, char *[])\n{\n#if !defined (CAN_RUN_TEST)\n# ifndef ACE_FACE_SAFETY_EXTENDED\n  PRINTF (\"Terminating because this test has not been designed \"\n          \"to run on WIN32 or VXWORKS.\\n\");\n# endif\n#else\n  PRINTF (\"main called\\n\");\n  PRINTF (\"main - calling loadDll\\n\");\n\n#  if defined (CAN_USE_THREADS)\n  int result = 0;\n  pthread_t tid1;\n  result = pthread_create(&tid1, 0, &loadDll, 0);\n  if (result != 0)\n  {\n    PRINTF (\"pthread_create() failed: %d\\n\", result);\n    return result;\n  }\n\n  pthread_join(tid1, 0);\n  PRINTF (\"loadDll thread finished and re-joined\\n\");\n\n#  else\n\n  loadDll(0);\n  PRINTF (\"loadDll finished\\n\");\n\n#  endif /* defined (CAN_USE_THREADS) */\n\n  PRINTF (\"main - calling unloadDll\\n\");\n\n#  if defined (CAN_USE_THREADS)\n  pthread_t tid2;\n  result = pthread_create(&tid2, 0, &unloadDll, 0);\n  if (result != 0)\n  {\n    PRINTF (\"pthread_create() failed: %d\\n\", result);\n    return 1;\n  }\n  pthread_join(tid2, 0);\n  PRINTF (\"unloadDll thread finished and re-joined\\n\");\n\n#  else\n\n  unloadDll(0);\n  PRINTF (\"unloadDll finished\\n\");\n\n#  endif /* defined (CAN_USE_THREADS) */\n\n  PRINTF (\"main finished\\n\");\n#endif /* defined (CAN_RUN_TEST) */\n\n  return 0;\n\n}\n  //FUZZ: enable check_for_lack_ACE_OS\n",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/apps/JAWS/clients/WebSTONE/src/nsapi-includes/base/dll.h": "/*\n * Copyright (c) 1994, 1995.  Netscape Communications Corporation.  All\n * rights reserved.\n *\n * Use of this software is governed by the terms of the license agreement for\n * the Netscape Communications or Netscape Comemrce Server between the\n * parties.\n */\n\n\n/* ------------------------------------------------------------------------ */\n\n\n/*\n * dll.h: Handle dynamically linked libraries\n *\n * Rob McCool\n */\n\n#ifndef _DLL_H\n#define _DLL_H\n\n#include \"systems.h\"\n\n#if defined(DLL_CAPABLE)\n\n/* --------------------------- Data structures ---------------------------- */\n\n\n#if defined(USE_NSPR)\n#include <nspr/prlink.h>\ntypedef int DLHANDLE;\n\n#elif defined(DLL_DLOPEN)\n#include <dlfcn.h>\ntypedef void *DLHANDLE;  /* DLOPEN */\n\n#elif defined(DLL_HPSHL)\n#include <dl.h>\ntypedef shl_t DLHANDLE;  /* HP_SHL */\n\n#elif defined(DLL_WIN32)\ntypedef HINSTANCE DLHANDLE; /* WIN32 */\n#endif\n\n\n/* ------------------------------ Prototypes ------------------------------ */\n\n\n/*\n * dll_open loads the library at the given path into memory, and returns\n * a handle to be used in later calls to dll_findsym and dll_close.\n */\n#if defined(USE_NSPR)\n#define dll_open(libfn) PR_LoadLibrary(libfn)\n\n#elif defined(DLL_DLOPEN)\n#define dll_open(libfn) dlopen(libfn, DLL_DLOPEN_FLAGS)\n\n#elif defined(DLL_HPSHL)\n#define dll_open(libfn) shl_load((libfn), BIND_IMMEDIATE, 0)\n\n#elif defined(DLL_WIN32)\nDLHANDLE dll_open(char *libfn);\n#endif\n\n\n/*\n * dll_findsym looks for a symbol with the given name in the library\n * pointed to by the given handle. Returns a pointer to the named function.\n */\n\n#if defined(USE_NSPR)\n#define dll_findsym(dlp, name) PR_FindSymbol(name)\n\n#elif defined(DLL_DLOPEN)\n#define dll_findsym(dlp, name) dlsym(dlp, name)\n\n#elif defined(DLL_HPSHL)\nvoid *dll_findsym(DLHANDLE dlp, char *name);\n\n#elif defined(DLL_WIN32)\n#define dll_findsym(dlp, name) GetProcAddress(dlp, name)\n#endif\n\n\n/*\n * dll_error returns a string describing the last error on the given handle\n */\n#if defined(USE_NSPR)\n#define dll_error(dlp) system_errmsg(0)\n\n#elif defined(DLL_DLOPEN)\n#define dll_error(dlp) dlerror()\n\n#elif defined(DLL_HPSHL)\n#define dll_error(dlp) system_errmsg(0)\n\n#elif defined(DLL_WIN32)\n#define dll_error(dlp) system_errmsg(0)\n#endif\n\n\n/*\n * dll_close closes the previously opened library given by handle\n */\n#if defined(USE_NSPR)\nint dll_close(void *arg);\n\n#elif defined(DLL_DLOPEN)\n#define dll_close dlclose\n\n#elif defined (DLL_HPSHL)\n#define dll_close shl_unload\n\n#elif defined(DLL_WIN32)\n#define dll_close FreeLibrary\n#endif\n\n\n#endif /* DLL_CAPABLE */\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/bin/LabVIEW_RT/PXI_Reset.exe",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/bin/LabVIEW_RT/Reboot_Target.exe",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/Kokyu/docs/kokyu2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/Kokyu/docs/KokyuEC.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/Kokyu/docs/Kokyu.html",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/Kokyu/docs/kokyu1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/performance-tests/SCTP/SOCK_SEQPACK_wrapper_facade.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/performance-tests/SCTP/README.SCTP_in_ACE",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/performance-tests/SCTP/sample-spectrum.png",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/ace/Monitor_Control/Monitor_Control.vsd",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/tests/Service_Config_Test.UTF-16.conf.xml",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/tests/ACE_Init_Test.ico",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/tests/Service_Config_Test.WCHAR_T.conf",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/tests/Service_Config_Test.UTF-16.conf",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/MPC/MPC.ico",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/MPC/docs/html/rpmworkflow.png",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/MPC/docs/html/images/mpc_mtiff.eps",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/MPC/docs/html/images/mpc.gif",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/MPC/docs/html/images/mwc_mtiff.eps",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/MPC/docs/html/images/mwc.gif",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/MPC/docs/html/images/OCILOGO_bw_book.eps",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/apps/JAWS3/docs/web/images/jaws3_components.gif",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/apps/JAWS3/docs/web/images/jaws3_banner.png",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/apps/JAWS3/docs/web/images/jaws3_banner.gif",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/apps/JAWS/clients/WebSTONE/doc/webstone.gif",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/examples/Log_Msg/Log_Msg_MFC/res/Log_Msg_MFC.ico",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/examples/ConfigViewer/mondrian.ico",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/contrib/FaCE/ACE_Racer.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/contrib/FaCE/ACE.ico",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/contrib/FaCE/FACE.ico",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/contrib/FaCE/TAO.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-ace-6.5.1-3lx4ykx7ddlfebfznrxd3unz4wxxi5yc/spack-src/docs/ace_guidelines.vsmacros"
    ],
    "total_files": 10494
}